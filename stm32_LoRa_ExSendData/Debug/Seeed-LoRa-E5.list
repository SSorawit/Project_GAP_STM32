
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b360  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  0801b498  0801b498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801c3e0  0801c3e0  0001d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c4a0  0801c4a0  0001e158  2**0
                  CONTENTS
  5 .ARM          00000008  0801c4a0  0801c4a0  0001d4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c4a8  0801c4a8  0001e158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c4a8  0801c4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c4ac  0801c4ac  0001d4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801c4b0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002000  20000158  0801c608  0001e158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002158  0801c608  0001e158  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001e158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e08c  00000000  00000000  0001e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fa6  00000000  00000000  0005c20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031b8  00000000  00000000  000661b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025c9  00000000  00000000  00069370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d2  00000000  00000000  0006b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d685  00000000  00000000  0009330b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9d8f  00000000  00000000  000d0990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019a71f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cc00  00000000  00000000  0019a764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001a7364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b480 	.word	0x0801b480

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801b480 	.word	0x0801b480

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001da:	2afd      	cmp	r2, #253	@ 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	@ 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__gedf2>:
 8000668:	f04f 3cff 	mov.w	ip, #4294967295
 800066c:	e006      	b.n	800067c <__cmpdf2+0x4>
 800066e:	bf00      	nop

08000670 <__ledf2>:
 8000670:	f04f 0c01 	mov.w	ip, #1
 8000674:	e002      	b.n	800067c <__cmpdf2+0x4>
 8000676:	bf00      	nop

08000678 <__cmpdf2>:
 8000678:	f04f 0c01 	mov.w	ip, #1
 800067c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800068c:	bf18      	it	ne
 800068e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000692:	d01b      	beq.n	80006cc <__cmpdf2+0x54>
 8000694:	b001      	add	sp, #4
 8000696:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800069a:	bf0c      	ite	eq
 800069c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006a0:	ea91 0f03 	teqne	r1, r3
 80006a4:	bf02      	ittt	eq
 80006a6:	ea90 0f02 	teqeq	r0, r2
 80006aa:	2000      	moveq	r0, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	f110 0f00 	cmn.w	r0, #0
 80006b2:	ea91 0f03 	teq	r1, r3
 80006b6:	bf58      	it	pl
 80006b8:	4299      	cmppl	r1, r3
 80006ba:	bf08      	it	eq
 80006bc:	4290      	cmpeq	r0, r2
 80006be:	bf2c      	ite	cs
 80006c0:	17d8      	asrcs	r0, r3, #31
 80006c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006c6:	f040 0001 	orr.w	r0, r0, #1
 80006ca:	4770      	bx	lr
 80006cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d4:	d102      	bne.n	80006dc <__cmpdf2+0x64>
 80006d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006da:	d107      	bne.n	80006ec <__cmpdf2+0x74>
 80006dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d1d6      	bne.n	8000694 <__cmpdf2+0x1c>
 80006e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ea:	d0d3      	beq.n	8000694 <__cmpdf2+0x1c>
 80006ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__aeabi_cdrcmple>:
 80006f4:	4684      	mov	ip, r0
 80006f6:	4610      	mov	r0, r2
 80006f8:	4662      	mov	r2, ip
 80006fa:	468c      	mov	ip, r1
 80006fc:	4619      	mov	r1, r3
 80006fe:	4663      	mov	r3, ip
 8000700:	e000      	b.n	8000704 <__aeabi_cdcmpeq>
 8000702:	bf00      	nop

08000704 <__aeabi_cdcmpeq>:
 8000704:	b501      	push	{r0, lr}
 8000706:	f7ff ffb7 	bl	8000678 <__cmpdf2>
 800070a:	2800      	cmp	r0, #0
 800070c:	bf48      	it	mi
 800070e:	f110 0f00 	cmnmi.w	r0, #0
 8000712:	bd01      	pop	{r0, pc}

08000714 <__aeabi_dcmpeq>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff fff4 	bl	8000704 <__aeabi_cdcmpeq>
 800071c:	bf0c      	ite	eq
 800071e:	2001      	moveq	r0, #1
 8000720:	2000      	movne	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_dcmplt>:
 8000728:	f84d ed08 	str.w	lr, [sp, #-8]!
 800072c:	f7ff ffea 	bl	8000704 <__aeabi_cdcmpeq>
 8000730:	bf34      	ite	cc
 8000732:	2001      	movcc	r0, #1
 8000734:	2000      	movcs	r0, #0
 8000736:	f85d fb08 	ldr.w	pc, [sp], #8
 800073a:	bf00      	nop

0800073c <__aeabi_dcmple>:
 800073c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000740:	f7ff ffe0 	bl	8000704 <__aeabi_cdcmpeq>
 8000744:	bf94      	ite	ls
 8000746:	2001      	movls	r0, #1
 8000748:	2000      	movhi	r0, #0
 800074a:	f85d fb08 	ldr.w	pc, [sp], #8
 800074e:	bf00      	nop

08000750 <__aeabi_dcmpge>:
 8000750:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000754:	f7ff ffce 	bl	80006f4 <__aeabi_cdrcmple>
 8000758:	bf94      	ite	ls
 800075a:	2001      	movls	r0, #1
 800075c:	2000      	movhi	r0, #0
 800075e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000762:	bf00      	nop

08000764 <__aeabi_dcmpgt>:
 8000764:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000768:	f7ff ffc4 	bl	80006f4 <__aeabi_cdrcmple>
 800076c:	bf34      	ite	cc
 800076e:	2001      	movcc	r0, #1
 8000770:	2000      	movcs	r0, #0
 8000772:	f85d fb08 	ldr.w	pc, [sp], #8
 8000776:	bf00      	nop

08000778 <__aeabi_d2iz>:
 8000778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800077c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000780:	d215      	bcs.n	80007ae <__aeabi_d2iz+0x36>
 8000782:	d511      	bpl.n	80007a8 <__aeabi_d2iz+0x30>
 8000784:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800078c:	d912      	bls.n	80007b4 <__aeabi_d2iz+0x3c>
 800078e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000792:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800079a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800079e:	fa23 f002 	lsr.w	r0, r3, r2
 80007a2:	bf18      	it	ne
 80007a4:	4240      	negne	r0, r0
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007b2:	d105      	bne.n	80007c0 <__aeabi_d2iz+0x48>
 80007b4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007b8:	bf08      	it	eq
 80007ba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <__aeabi_frsub>:
 80007c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007cc:	e002      	b.n	80007d4 <__addsf3>
 80007ce:	bf00      	nop

080007d0 <__aeabi_fsub>:
 80007d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007d4 <__addsf3>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	bf1f      	itttt	ne
 80007d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007dc:	ea92 0f03 	teqne	r2, r3
 80007e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007e8:	d06a      	beq.n	80008c0 <__addsf3+0xec>
 80007ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f2:	bfc1      	itttt	gt
 80007f4:	18d2      	addgt	r2, r2, r3
 80007f6:	4041      	eorgt	r1, r0
 80007f8:	4048      	eorgt	r0, r1
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	bfb8      	it	lt
 80007fe:	425b      	neglt	r3, r3
 8000800:	2b19      	cmp	r3, #25
 8000802:	bf88      	it	hi
 8000804:	4770      	bxhi	lr
 8000806:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800080a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800080e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000812:	bf18      	it	ne
 8000814:	4240      	negne	r0, r0
 8000816:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800081e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000822:	bf18      	it	ne
 8000824:	4249      	negne	r1, r1
 8000826:	ea92 0f03 	teq	r2, r3
 800082a:	d03f      	beq.n	80008ac <__addsf3+0xd8>
 800082c:	f1a2 0201 	sub.w	r2, r2, #1
 8000830:	fa41 fc03 	asr.w	ip, r1, r3
 8000834:	eb10 000c 	adds.w	r0, r0, ip
 8000838:	f1c3 0320 	rsb	r3, r3, #32
 800083c:	fa01 f103 	lsl.w	r1, r1, r3
 8000840:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000844:	d502      	bpl.n	800084c <__addsf3+0x78>
 8000846:	4249      	negs	r1, r1
 8000848:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800084c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000850:	d313      	bcc.n	800087a <__addsf3+0xa6>
 8000852:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000856:	d306      	bcc.n	8000866 <__addsf3+0x92>
 8000858:	0840      	lsrs	r0, r0, #1
 800085a:	ea4f 0131 	mov.w	r1, r1, rrx
 800085e:	f102 0201 	add.w	r2, r2, #1
 8000862:	2afe      	cmp	r2, #254	@ 0xfe
 8000864:	d251      	bcs.n	800090a <__addsf3+0x136>
 8000866:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800086a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800086e:	bf08      	it	eq
 8000870:	f020 0001 	biceq.w	r0, r0, #1
 8000874:	ea40 0003 	orr.w	r0, r0, r3
 8000878:	4770      	bx	lr
 800087a:	0049      	lsls	r1, r1, #1
 800087c:	eb40 0000 	adc.w	r0, r0, r0
 8000880:	3a01      	subs	r2, #1
 8000882:	bf28      	it	cs
 8000884:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000888:	d2ed      	bcs.n	8000866 <__addsf3+0x92>
 800088a:	fab0 fc80 	clz	ip, r0
 800088e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000892:	ebb2 020c 	subs.w	r2, r2, ip
 8000896:	fa00 f00c 	lsl.w	r0, r0, ip
 800089a:	bfaa      	itet	ge
 800089c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a0:	4252      	neglt	r2, r2
 80008a2:	4318      	orrge	r0, r3
 80008a4:	bfbc      	itt	lt
 80008a6:	40d0      	lsrlt	r0, r2
 80008a8:	4318      	orrlt	r0, r3
 80008aa:	4770      	bx	lr
 80008ac:	f092 0f00 	teq	r2, #0
 80008b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008b4:	bf06      	itte	eq
 80008b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008ba:	3201      	addeq	r2, #1
 80008bc:	3b01      	subne	r3, #1
 80008be:	e7b5      	b.n	800082c <__addsf3+0x58>
 80008c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008c8:	bf18      	it	ne
 80008ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ce:	d021      	beq.n	8000914 <__addsf3+0x140>
 80008d0:	ea92 0f03 	teq	r2, r3
 80008d4:	d004      	beq.n	80008e0 <__addsf3+0x10c>
 80008d6:	f092 0f00 	teq	r2, #0
 80008da:	bf08      	it	eq
 80008dc:	4608      	moveq	r0, r1
 80008de:	4770      	bx	lr
 80008e0:	ea90 0f01 	teq	r0, r1
 80008e4:	bf1c      	itt	ne
 80008e6:	2000      	movne	r0, #0
 80008e8:	4770      	bxne	lr
 80008ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008ee:	d104      	bne.n	80008fa <__addsf3+0x126>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	bf28      	it	cs
 80008f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008f8:	4770      	bx	lr
 80008fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008fe:	bf3c      	itt	cc
 8000900:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000904:	4770      	bxcc	lr
 8000906:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800090a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000912:	4770      	bx	lr
 8000914:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000918:	bf16      	itet	ne
 800091a:	4608      	movne	r0, r1
 800091c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000920:	4601      	movne	r1, r0
 8000922:	0242      	lsls	r2, r0, #9
 8000924:	bf06      	itte	eq
 8000926:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092a:	ea90 0f01 	teqeq	r0, r1
 800092e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000932:	4770      	bx	lr

08000934 <__aeabi_ui2f>:
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	e004      	b.n	8000944 <__aeabi_i2f+0x8>
 800093a:	bf00      	nop

0800093c <__aeabi_i2f>:
 800093c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000940:	bf48      	it	mi
 8000942:	4240      	negmi	r0, r0
 8000944:	ea5f 0c00 	movs.w	ip, r0
 8000948:	bf08      	it	eq
 800094a:	4770      	bxeq	lr
 800094c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000950:	4601      	mov	r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	e01c      	b.n	8000992 <__aeabi_l2f+0x2a>

08000958 <__aeabi_ul2f>:
 8000958:	ea50 0201 	orrs.w	r2, r0, r1
 800095c:	bf08      	it	eq
 800095e:	4770      	bxeq	lr
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e00a      	b.n	800097c <__aeabi_l2f+0x14>
 8000966:	bf00      	nop

08000968 <__aeabi_l2f>:
 8000968:	ea50 0201 	orrs.w	r2, r0, r1
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000974:	d502      	bpl.n	800097c <__aeabi_l2f+0x14>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	ea5f 0c01 	movs.w	ip, r1
 8000980:	bf02      	ittt	eq
 8000982:	4684      	moveq	ip, r0
 8000984:	4601      	moveq	r1, r0
 8000986:	2000      	moveq	r0, #0
 8000988:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800098c:	bf08      	it	eq
 800098e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000992:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000996:	fabc f28c 	clz	r2, ip
 800099a:	3a08      	subs	r2, #8
 800099c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a0:	db10      	blt.n	80009c4 <__aeabi_l2f+0x5c>
 80009a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80009a6:	4463      	add	r3, ip
 80009a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009b4:	fa20 f202 	lsr.w	r2, r0, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f102 0220 	add.w	r2, r2, #32
 80009c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009cc:	f1c2 0220 	rsb	r2, r2, #32
 80009d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d4:	fa21 f202 	lsr.w	r2, r1, r2
 80009d8:	eb43 0002 	adc.w	r0, r3, r2
 80009dc:	bf08      	it	eq
 80009de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_f2iz>:
 80009e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009ec:	d30f      	bcc.n	8000a0e <__aeabi_f2iz+0x2a>
 80009ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_f2iz+0x30>
 80009f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a00:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a04:	fa23 f002 	lsr.w	r0, r3, r2
 8000a08:	bf18      	it	ne
 8000a0a:	4240      	negne	r0, r0
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr
 8000a14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a18:	d101      	bne.n	8000a1e <__aeabi_f2iz+0x3a>
 8000a1a:	0242      	lsls	r2, r0, #9
 8000a1c:	d105      	bne.n	8000a2a <__aeabi_f2iz+0x46>
 8000a1e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a22:	bf08      	it	eq
 8000a24:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_f2uiz>:
 8000a30:	0042      	lsls	r2, r0, #1
 8000a32:	d20e      	bcs.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a38:	d30b      	bcc.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d409      	bmi.n	8000a58 <__aeabi_f2uiz+0x28>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	4770      	bx	lr
 8000a58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_f2uiz+0x32>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d102      	bne.n	8000a68 <__aeabi_f2uiz+0x38>
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_uldivmod>:
 8000a70:	b953      	cbnz	r3, 8000a88 <__aeabi_uldivmod+0x18>
 8000a72:	b94a      	cbnz	r2, 8000a88 <__aeabi_uldivmod+0x18>
 8000a74:	2900      	cmp	r1, #0
 8000a76:	bf08      	it	eq
 8000a78:	2800      	cmpeq	r0, #0
 8000a7a:	bf1c      	itt	ne
 8000a7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a80:	f04f 30ff 	movne.w	r0, #4294967295
 8000a84:	f000 b96a 	b.w	8000d5c <__aeabi_idiv0>
 8000a88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a90:	f000 f806 	bl	8000aa0 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4770      	bx	lr

08000aa0 <__udivmoddi4>:
 8000aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa4:	9d08      	ldr	r5, [sp, #32]
 8000aa6:	460c      	mov	r4, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14e      	bne.n	8000b4a <__udivmoddi4+0xaa>
 8000aac:	4694      	mov	ip, r2
 8000aae:	458c      	cmp	ip, r1
 8000ab0:	4686      	mov	lr, r0
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	d962      	bls.n	8000b7e <__udivmoddi4+0xde>
 8000ab8:	b14a      	cbz	r2, 8000ace <__udivmoddi4+0x2e>
 8000aba:	f1c2 0320 	rsb	r3, r2, #32
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f f68c 	uxth.w	r6, ip
 8000ad6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb07 1114 	mls	r1, r7, r4, r1
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb04 f106 	mul.w	r1, r4, r6
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x64>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af6:	f080 8112 	bcs.w	8000d1e <__udivmoddi4+0x27e>
 8000afa:	4299      	cmp	r1, r3
 8000afc:	f240 810f 	bls.w	8000d1e <__udivmoddi4+0x27e>
 8000b00:	3c02      	subs	r4, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1a59      	subs	r1, r3, r1
 8000b06:	fa1f f38e 	uxth.w	r3, lr
 8000b0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b16:	fb00 f606 	mul.w	r6, r0, r6
 8000b1a:	429e      	cmp	r6, r3
 8000b1c:	d90a      	bls.n	8000b34 <__udivmoddi4+0x94>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b26:	f080 80fc 	bcs.w	8000d22 <__udivmoddi4+0x282>
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	f240 80f9 	bls.w	8000d22 <__udivmoddi4+0x282>
 8000b30:	4463      	add	r3, ip
 8000b32:	3802      	subs	r0, #2
 8000b34:	1b9b      	subs	r3, r3, r6
 8000b36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	b11d      	cbz	r5, 8000b46 <__udivmoddi4+0xa6>
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	e9c5 3200 	strd	r3, r2, [r5]
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d905      	bls.n	8000b5a <__udivmoddi4+0xba>
 8000b4e:	b10d      	cbz	r5, 8000b54 <__udivmoddi4+0xb4>
 8000b50:	e9c5 0100 	strd	r0, r1, [r5]
 8000b54:	2100      	movs	r1, #0
 8000b56:	4608      	mov	r0, r1
 8000b58:	e7f5      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000b5a:	fab3 f183 	clz	r1, r3
 8000b5e:	2900      	cmp	r1, #0
 8000b60:	d146      	bne.n	8000bf0 <__udivmoddi4+0x150>
 8000b62:	42a3      	cmp	r3, r4
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xcc>
 8000b66:	4290      	cmp	r0, r2
 8000b68:	f0c0 80f0 	bcc.w	8000d4c <__udivmoddi4+0x2ac>
 8000b6c:	1a86      	subs	r6, r0, r2
 8000b6e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d0e6      	beq.n	8000b46 <__udivmoddi4+0xa6>
 8000b78:	e9c5 6300 	strd	r6, r3, [r5]
 8000b7c:	e7e3      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x204>
 8000b84:	eba1 040c 	sub.w	r4, r1, ip
 8000b88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b8c:	fa1f f78c 	uxth.w	r7, ip
 8000b90:	2101      	movs	r1, #1
 8000b92:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb07 f006 	mul.w	r0, r7, r6
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x11c>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x11a>
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	f200 80cd 	bhi.w	8000d54 <__udivmoddi4+0x2b4>
 8000bba:	4626      	mov	r6, r4
 8000bbc:	1a1c      	subs	r4, r3, r0
 8000bbe:	fa1f f38e 	uxth.w	r3, lr
 8000bc2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc6:	fb08 4410 	mls	r4, r8, r0, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb00 f707 	mul.w	r7, r0, r7
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x148>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x146>
 8000be0:	429f      	cmp	r7, r3
 8000be2:	f200 80b0 	bhi.w	8000d46 <__udivmoddi4+0x2a6>
 8000be6:	4620      	mov	r0, r4
 8000be8:	1bdb      	subs	r3, r3, r7
 8000bea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0x9c>
 8000bf0:	f1c1 0620 	rsb	r6, r1, #32
 8000bf4:	408b      	lsls	r3, r1
 8000bf6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c00:	fa04 f301 	lsl.w	r3, r4, r1
 8000c04:	ea43 030c 	orr.w	r3, r3, ip
 8000c08:	40f4      	lsrs	r4, r6
 8000c0a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0e:	0c38      	lsrs	r0, r7, #16
 8000c10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c14:	fbb4 fef0 	udiv	lr, r4, r0
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c20:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c24:	fb0e f90c 	mul.w	r9, lr, ip
 8000c28:	45a1      	cmp	r9, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x1a6>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c36:	f080 8084 	bcs.w	8000d42 <__udivmoddi4+0x2a2>
 8000c3a:	45a1      	cmp	r9, r4
 8000c3c:	f240 8081 	bls.w	8000d42 <__udivmoddi4+0x2a2>
 8000c40:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	eba4 0409 	sub.w	r4, r4, r9
 8000c4a:	fa1f f983 	uxth.w	r9, r3
 8000c4e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c52:	fb00 4413 	mls	r4, r0, r3, r4
 8000c56:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c5a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x1d2>
 8000c62:	193c      	adds	r4, r7, r4
 8000c64:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c68:	d267      	bcs.n	8000d3a <__udivmoddi4+0x29a>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0x29a>
 8000c6e:	3b02      	subs	r3, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c76:	fba0 9302 	umull	r9, r3, r0, r2
 8000c7a:	eba4 040c 	sub.w	r4, r4, ip
 8000c7e:	429c      	cmp	r4, r3
 8000c80:	46ce      	mov	lr, r9
 8000c82:	469c      	mov	ip, r3
 8000c84:	d351      	bcc.n	8000d2a <__udivmoddi4+0x28a>
 8000c86:	d04e      	beq.n	8000d26 <__udivmoddi4+0x286>
 8000c88:	b155      	cbz	r5, 8000ca0 <__udivmoddi4+0x200>
 8000c8a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c92:	fa04 f606 	lsl.w	r6, r4, r6
 8000c96:	40cb      	lsrs	r3, r1
 8000c98:	431e      	orrs	r6, r3
 8000c9a:	40cc      	lsrs	r4, r1
 8000c9c:	e9c5 6400 	strd	r6, r4, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	e750      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f103 	lsr.w	r1, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ccc:	0c23      	lsrs	r3, r4, #16
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb00 f107 	mul.w	r1, r0, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x24c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ce2:	d22c      	bcs.n	8000d3e <__udivmoddi4+0x29e>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d92a      	bls.n	8000d3e <__udivmoddi4+0x29e>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf4:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb01 f307 	mul.w	r3, r1, r7
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x276>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d0c:	d213      	bcs.n	8000d36 <__udivmoddi4+0x296>
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	d911      	bls.n	8000d36 <__udivmoddi4+0x296>
 8000d12:	3902      	subs	r1, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	1ae4      	subs	r4, r4, r3
 8000d18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d1c:	e739      	b.n	8000b92 <__udivmoddi4+0xf2>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	e6f0      	b.n	8000b04 <__udivmoddi4+0x64>
 8000d22:	4608      	mov	r0, r1
 8000d24:	e706      	b.n	8000b34 <__udivmoddi4+0x94>
 8000d26:	45c8      	cmp	r8, r9
 8000d28:	d2ae      	bcs.n	8000c88 <__udivmoddi4+0x1e8>
 8000d2a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d32:	3801      	subs	r0, #1
 8000d34:	e7a8      	b.n	8000c88 <__udivmoddi4+0x1e8>
 8000d36:	4631      	mov	r1, r6
 8000d38:	e7ed      	b.n	8000d16 <__udivmoddi4+0x276>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	e799      	b.n	8000c72 <__udivmoddi4+0x1d2>
 8000d3e:	4630      	mov	r0, r6
 8000d40:	e7d4      	b.n	8000cec <__udivmoddi4+0x24c>
 8000d42:	46d6      	mov	lr, sl
 8000d44:	e77f      	b.n	8000c46 <__udivmoddi4+0x1a6>
 8000d46:	4463      	add	r3, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e74d      	b.n	8000be8 <__udivmoddi4+0x148>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	4623      	mov	r3, r4
 8000d50:	4608      	mov	r0, r1
 8000d52:	e70f      	b.n	8000b74 <__udivmoddi4+0xd4>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	e730      	b.n	8000bbc <__udivmoddi4+0x11c>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da6:	4013      	ands	r3, r2
 8000da8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dba:	4a24      	ldr	r2, [pc, #144]	@ (8000e4c <MX_ADC_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dc0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dc4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e36:	f001 fee7 	bl	8002c08 <HAL_ADC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000e40:	f000 fb80 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000174 	.word	0x20000174
 8000e4c:	40012400 	.word	0x40012400

08000e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <HAL_ADC_MspInit+0x24>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d103      	bne.n	8000e6a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e66:	f7ff ff7b 	bl	8000d60 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012400 	.word	0x40012400

08000e78 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <HAL_ADC_MspDeInit+0x24>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d103      	bne.n	8000e92 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000e8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e8e:	f7ff ff7f 	bl	8000d90 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <SYS_InitMeasurement+0x14>)
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <SYS_InitMeasurement+0x18>)
 8000ea8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000174 	.word	0x20000174
 8000eb8:	40012400 	.word	0x40012400

08000ebc <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000eca:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <SYS_GetBatteryLevel+0x5c>)
 8000ecc:	f000 f82a 	bl	8000f24 <ADC_ReadChannels>
 8000ed0:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	80fb      	strh	r3, [r7, #6]
 8000edc:	e016      	b.n	8000f0c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <SYS_GetBatteryLevel+0x60>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00b      	beq.n	8000f02 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <SYS_GetBatteryLevel+0x60>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000ef4:	fb03 f202 	mul.w	r2, r3, r2
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	80fb      	strh	r3, [r7, #6]
 8000f00:	e004      	b.n	8000f0c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f02:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <SYS_GetBatteryLevel+0x64>)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	b4002000 	.word	0xb4002000
 8000f1c:	1fff75aa 	.word	0x1fff75aa
 8000f20:	004c08d8 	.word	0x004c08d8

08000f24 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000f3c:	f7ff ff3a 	bl	8000db4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f40:	481a      	ldr	r0, [pc, #104]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f42:	f002 fc90 	bl	8003866 <HAL_ADCEx_Calibration_Start>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000f4c:	f000 fafa 	bl	8001544 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f64:	f002 f99c 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000f6e:	f000 fae9 	bl	8001544 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f72:	480e      	ldr	r0, [pc, #56]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f74:	f002 f878 	bl	8003068 <HAL_ADC_Start>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000f7e:	f000 fae1 	bl	8001544 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4809      	ldr	r0, [pc, #36]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f88:	f002 f8e6 	bl	8003158 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f8e:	f002 f8b1 	bl	80030f4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f94:	f002 f977 	bl	8003286 <HAL_ADC_GetValue>
 8000f98:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <ADC_ReadChannels+0x88>)
 8000f9c:	f001 ffe8 	bl	8002f70 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000fa0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000174 	.word	0x20000174

08000fb0 <LL_AHB1_GRP1_EnableClock>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	f7ff ffe3 	bl	8000fb0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ffe0 	bl	8000fb0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	200b      	movs	r0, #11
 8000ff6:	f002 fddc 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ffa:	200b      	movs	r0, #11
 8000ffc:	f002 fdf3 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001010:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001014:	d101      	bne.n	800101a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800101a:	2300      	movs	r3, #0
#endif
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	58004000 	.word	0x58004000

08001028 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001040:	4b56      	ldr	r3, [pc, #344]	@ (800119c <FLASH_IF_Write+0x174>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0299      	lsls	r1, r3, #10
 8001046:	4b56      	ldr	r3, [pc, #344]	@ (80011a0 <FLASH_IF_Write+0x178>)
 8001048:	400b      	ands	r3, r1
 800104a:	fbb2 f1f3 	udiv	r1, r2, r3
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	0adb      	lsrs	r3, r3, #11
 8001056:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001062:	3b01      	subs	r3, #1
 8001064:	4a4d      	ldr	r2, [pc, #308]	@ (800119c <FLASH_IF_Write+0x174>)
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	0291      	lsls	r1, r2, #10
 800106a:	4a4d      	ldr	r2, [pc, #308]	@ (80011a0 <FLASH_IF_Write+0x178>)
 800106c:	400a      	ands	r2, r1
 800106e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001072:	fb01 f202 	mul.w	r2, r1, r2
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	0adb      	lsrs	r3, r3, #11
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <FLASH_IF_Write+0x7a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <FLASH_IF_Write+0x7a>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	e074      	b.n	8001192 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010a8:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <FLASH_IF_Write+0x17c>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da02      	bge.n	80010b6 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80010b0:	f06f 0303 	mvn.w	r3, #3
 80010b4:	e06d      	b.n	8001192 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d005      	beq.n	80010ca <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e05b      	b.n	8001188 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f8f8 	bl	80012ca <FLASH_IF_IsEmpty>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d037      	beq.n	8001150 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80010e6:	f06f 0304 	mvn.w	r3, #4
 80010ea:	e052      	b.n	8001192 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80010f2:	02db      	lsls	r3, r3, #11
 80010f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010f8:	4619      	mov	r1, r3
 80010fa:	6838      	ldr	r0, [r7, #0]
 80010fc:	f018 fe52 	bl	8019da4 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	6a39      	ldr	r1, [r7, #32]
 800110c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800110e:	b292      	uxth	r2, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f018 fe47 	bl	8019da4 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001116:	2200      	movs	r2, #0
 8001118:	2101      	movs	r1, #1
 800111a:	69f8      	ldr	r0, [r7, #28]
 800111c:	f000 f865 	bl	80011ea <FLASH_IF_EraseByPages>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001126:	f06f 0301 	mvn.w	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 800112c:	e030      	b.n	8001190 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001134:	02db      	lsls	r3, r3, #11
 8001136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f88a 	bl	8001256 <FLASH_IF_Write_Buffer>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d010      	beq.n	800116a <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001148:	f06f 0302 	mvn.w	r3, #2
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 800114e:	e01f      	b.n	8001190 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001154:	4619      	mov	r1, r3
 8001156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001158:	f000 f87d 	bl	8001256 <FLASH_IF_Write_Buffer>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001162:	f06f 0302 	mvn.w	r3, #2
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001168:	e012      	b.n	8001190 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800116a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800116e:	4413      	add	r3, r2
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 8001172:	6a3a      	ldr	r2, [r7, #32]
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	4413      	add	r3, r2
 8001178:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	d99f      	bls.n	80010d0 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001192:	4618      	mov	r0, r3
 8001194:	3730      	adds	r7, #48	@ 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	1fff75e0 	.word	0x1fff75e0
 80011a0:	03fffc00 	.word	0x03fffc00
 80011a4:	58004000 	.word	0x58004000

080011a8 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80011b4:	e00b      	b.n	80011ce <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80011b6:	bf00      	nop
 80011b8:	f7ff ff24 	bl	8001004 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1fa      	bne.n	80011b8 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80011c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	2001      	movs	r0, #1
 80011ca:	f003 f913 	bl	80043f4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d8:	4299      	cmp	r1, r3
 80011da:	bf08      	it	eq
 80011dc:	4290      	cmpeq	r0, r2
 80011de:	d1ea      	bne.n	80011b6 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80011e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b08a      	sub	sp, #40	@ 0x28
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	460b      	mov	r3, r1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001200:	897b      	ldrh	r3, [r7, #10]
 8001202:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fa8e 	bl	8004730 <HAL_FLASHEx_Erase_IT>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800121a:	e00a      	b.n	8001232 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800121c:	f107 0214 	add.w	r2, r7, #20
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fa2a 	bl	8004680 <HAL_FLASHEx_Erase>
 800122c:	4603      	mov	r3, r0
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <FLASH_IF_EraseByPages+0x62>
 800123a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800123e:	2b02      	cmp	r3, #2
 8001240:	d101      	bne.n	8001246 <FLASH_IF_EraseByPages+0x5c>
 8001242:	2301      	movs	r3, #1
 8001244:	e003      	b.n	800124e <FLASH_IF_EraseByPages+0x64>
 8001246:	f06f 0301 	mvn.w	r3, #1
 800124a:	e000      	b.n	800124e <FLASH_IF_EraseByPages+0x64>
 800124c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800124e:	4618      	mov	r0, r3
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b08a      	sub	sp, #40	@ 0x28
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e020      	b.n	80012b2 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2208      	movs	r2, #8
 8001276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001278:	4618      	mov	r0, r3
 800127a:	f018 fd93 	bl	8019da4 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 800127e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	bf08      	it	eq
 8001288:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800128c:	d005      	beq.n	800129a <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ff88 	bl	80011a8 <FLASH_IF_Write64>
 8001298:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3308      	adds	r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	3308      	adds	r3, #8
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3d9      	bcc.n	8001270 <FLASH_IF_Write_Buffer+0x1a>
 80012bc:	e000      	b.n	80012c0 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80012be:	bf00      	nop
    }
  }

  return status;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3728      	adds	r7, #40	@ 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012d4:	e00a      	b.n	80012ec <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2bff      	cmp	r3, #255	@ 0xff
 80012e0:	d001      	beq.n	80012e6 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e039      	b.n	800135a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ef      	bne.n	80012d6 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	e010      	b.n	8001322 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f103 0208 	add.w	r2, r3, #8
 8001306:	60fa      	str	r2, [r7, #12]
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	bf08      	it	eq
 8001312:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001316:	d001      	beq.n	800131c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001318:	2301      	movs	r3, #1
 800131a:	e01e      	b.n	800135a <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3e9      	bcc.n	8001300 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800133a:	e00a      	b.n	8001352 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2bff      	cmp	r3, #255	@ 0xff
 8001346:	d001      	beq.n	800134c <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001348:	2301      	movs	r3, #1
 800134a:	e006      	b.n	800135a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f1      	bne.n	800133c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001358:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_AHB2_GRP1_EnableClock>:
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001380:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	2004      	movs	r0, #4
 80013aa:	f7ff ffdb 	bl	8001364 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff ffd8 	bl	8001364 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff ffd5 	bl	8001364 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80013c0:	4821      	ldr	r0, [pc, #132]	@ (8001448 <MX_GPIO_Init+0xb4>)
 80013c2:	f003 fca7 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2120      	movs	r1, #32
 80013ca:	481f      	ldr	r0, [pc, #124]	@ (8001448 <MX_GPIO_Init+0xb4>)
 80013cc:	f003 fca2 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2131      	movs	r1, #49	@ 0x31
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f003 fc9c 	bl	8004d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 80013dc:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80013e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4815      	ldr	r0, [pc, #84]	@ (8001448 <MX_GPIO_Init+0xb4>)
 80013f4:	f003 fa60 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80013f8:	2331      	movs	r3, #49	@ 0x31
 80013fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f003 fa52 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800141a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4807      	ldr	r0, [pc, #28]	@ (8001448 <MX_GPIO_Init+0xb4>)
 800142a:	f003 fa45 	bl	80048b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2029      	movs	r0, #41	@ 0x29
 8001434:	f002 fbbd 	bl	8003bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001438:	2029      	movs	r0, #41	@ 0x29
 800143a:	f002 fbd4 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	48000400 	.word	0x48000400

0800144c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800145c:	f023 0218 	bic.w	r2, r3, #24
 8001460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f001 f9d7 	bl	800282c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f807 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f7ff ff87 	bl	8001394 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001486:	f008 f9d5 	bl	8009834 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800148a:	f008 f9db 	bl	8009844 <MX_LoRaWAN_Process>
 800148e:	e7fc      	b.n	800148a <main+0x14>

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09a      	sub	sp, #104	@ 0x68
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2248      	movs	r2, #72	@ 0x48
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f019 ff42 	bl	801b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014b6:	f003 fc5d 	bl	8004d74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff ffc6 	bl	800144c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <SystemClock_Config+0xb0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <SystemClock_Config+0xb0>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <SystemClock_Config+0xb0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014dc:	2324      	movs	r3, #36	@ 0x24
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014e0:	2381      	movs	r3, #129	@ 0x81
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014ec:	23b0      	movs	r3, #176	@ 0xb0
 80014ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 ff87 	bl	800540c <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001504:	f000 f81e 	bl	8001544 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001508:	234f      	movs	r3, #79	@ 0x4f
 800150a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2102      	movs	r1, #2
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fb0c 	bl	8005b44 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001532:	f000 f807 	bl	8001544 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3768      	adds	r7, #104	@ 0x68
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	58000400 	.word	0x58000400

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <Error_Handler+0x8>

08001550 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_APB1_GRP1_EnableClock>:
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800157e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	@ 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	222c      	movs	r2, #44	@ 0x2c
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f019 febb 	bl	801b328 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b2:	4b22      	ldr	r3, [pc, #136]	@ (800163c <MX_RTC_Init+0x9c>)
 80015b4:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <MX_RTC_Init+0xa0>)
 80015b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80015b8:	4b20      	ldr	r3, [pc, #128]	@ (800163c <MX_RTC_Init+0x9c>)
 80015ba:	221f      	movs	r2, #31
 80015bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <MX_RTC_Init+0x9c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <MX_RTC_Init+0x9c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <MX_RTC_Init+0x9c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <MX_RTC_Init+0x9c>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <MX_RTC_Init+0x9c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MX_RTC_Init+0x9c>)
 80015e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e6:	4815      	ldr	r0, [pc, #84]	@ (800163c <MX_RTC_Init+0x9c>)
 80015e8:	f004 ff68 	bl	80064bc <HAL_RTC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015f2:	f7ff ffa7 	bl	8001544 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80015f6:	4811      	ldr	r0, [pc, #68]	@ (800163c <MX_RTC_Init+0x9c>)
 80015f8:	f005 fa56 	bl	8006aa8 <HAL_RTCEx_SetSSRU_IT>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001602:	f7ff ff9f 	bl	8001544 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001612:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001616:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_RTC_Init+0x9c>)
 8001626:	f004 ffc3 	bl	80065b0 <HAL_RTC_SetAlarm_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001630:	f7ff ff88 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200001d8 	.word	0x200001d8
 8001640:	40002800 	.word	0x40002800

08001644 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b090      	sub	sp, #64	@ 0x40
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	2238      	movs	r2, #56	@ 0x38
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f019 fe67 	bl	801b328 <memset>
  if(rtcHandle->Instance==RTC)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <HAL_RTC_MspInit+0x74>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d125      	bne.n	80016b0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001668:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800166a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fe07 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001680:	f7ff ff60 	bl	8001544 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001684:	f7ff ff64 	bl	8001550 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001688:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800168c:	f7ff ff70 	bl	8001570 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2002      	movs	r0, #2
 8001696:	f002 fa8c 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800169a:	2002      	movs	r0, #2
 800169c:	f002 faa3 	bl	8003be6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	202a      	movs	r0, #42	@ 0x2a
 80016a6:	f002 fa84 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016aa:	202a      	movs	r0, #42	@ 0x2a
 80016ac:	f002 fa9b 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3740      	adds	r7, #64	@ 0x40
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40002800 	.word	0x40002800

080016bc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	58000400 	.word	0x58000400

080016d4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80016f0:	f001 f8bc 	bl	800286c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80016f4:	f7ff ffe2 	bl	80016bc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f003 fbcd 	bl	8004e98 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}

08001702 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001706:	f001 f8bf 	bl	8002888 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800170a:	f000 ff3f 	bl	800258c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001716:	f001 f8a9 	bl	800286c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800171a:	2101      	movs	r1, #1
 800171c:	2000      	movs	r0, #0
 800171e:	f003 fb37 	bl	8004d90 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}

08001726 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800172a:	f001 f8ad 	bl	8002888 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <HardFault_Handler+0x4>

0800174e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	bf00      	nop
 800175c:	e7fd      	b.n	800175a <BusFault_Handler+0x4>

0800175e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001762:	bf00      	nop
 8001764:	e7fd      	b.n	8001762 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800179e:	f005 f9bf 	bl	8006b20 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001d8 	.word	0x200001d8

080017ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Channel1_IRQHandler+0x10>)
 80017b2:	f002 fcaf 	bl	8004114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002b4 	.word	0x200002b4

080017c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <USART1_IRQHandler+0x10>)
 80017c6:	f006 f803 	bl	80077d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000224 	.word	0x20000224

080017d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80017d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017dc:	f003 fab2 	bl	8004d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <RTC_Alarm_IRQHandler+0x10>)
 80017ea:	f005 f849 	bl	8006880 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200001d8 	.word	0x200001d8

080017f8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <SUBGHZ_Radio_IRQHandler+0x10>)
 80017fe:	f005 fcf7 	bl	80071f0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000210 	.word	0x20000210

0800180c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001818:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_SUBGHZ_Init+0x20>)
 8001842:	2208      	movs	r2, #8
 8001844:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_SUBGHZ_Init+0x20>)
 8001848:	f005 fa56 	bl	8006cf8 <HAL_SUBGHZ_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001852:	f7ff fe77 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000210 	.word	0x20000210

08001860 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff ffcf 	bl	800180c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2032      	movs	r0, #50	@ 0x32
 8001874:	f002 f99d 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001878:	2032      	movs	r0, #50	@ 0x32
 800187a:	f002 f9b4 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018b0:	4b02      	ldr	r3, [pc, #8]	@ (80018bc <LL_FLASH_GetUDN+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	1fff7580 	.word	0x1fff7580

080018c0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <LL_FLASH_GetDeviceID+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	1fff7584 	.word	0x1fff7584

080018d8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <LL_FLASH_GetSTCompanyID+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0a1b      	lsrs	r3, r3, #8
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	1fff7584 	.word	0x1fff7584

080018f0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ffc6 	bl	8001886 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80018fa:	f018 ffdf 	bl	801a8bc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <SystemApp_Init+0x50>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001904:	f000 f98c 	bl	8001c20 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001908:	f019 fa68 	bl	801addc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <SystemApp_Init+0x54>)
 800190e:	f019 fb13 	bl	801af38 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <SystemApp_Init+0x58>)
 8001914:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001918:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800191a:	2002      	movs	r0, #2
 800191c:	f019 fb1a 	bl	801af54 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001920:	f7ff fabe 	bl	8000ea0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001924:	f000 fa02 	bl	8001d2c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001928:	f018 f996 	bl	8019c58 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800192c:	2101      	movs	r1, #1
 800192e:	2001      	movs	r0, #1
 8001930:	f018 f9d2 	bl	8019cd8 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001934:	2101      	movs	r1, #1
 8001936:	2001      	movs	r0, #1
 8001938:	f018 f99e 	bl	8019c78 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000021c 	.word	0x2000021c
 8001944:	08001b11 	.word	0x08001b11
 8001948:	58004000 	.word	0x58004000

0800194c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001950:	f018 f9f2 	bl	8019d38 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001962:	f7ff faab 	bl	8000ebc <SYS_GetBatteryLevel>
 8001966:	4603      	mov	r3, r0
 8001968:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001970:	4293      	cmp	r3, r2
 8001972:	d902      	bls.n	800197a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001974:	23fe      	movs	r3, #254	@ 0xfe
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	e014      	b.n	80019a4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001980:	d202      	bcs.n	8001988 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e00d      	b.n	80019a4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 800198e:	461a      	mov	r2, r3
 8001990:	4613      	mov	r3, r2
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	461a      	mov	r2, r3
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <GetBatteryLevel+0x58>)
 800199c:	fba3 2302 	umull	r2, r3, r3, r2
 80019a0:	09db      	lsrs	r3, r3, #7
 80019a2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019a4:	79fb      	ldrb	r3, [r7, #7]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	1b4e81b5 	.word	0x1b4e81b5

080019b4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f989 	bl	8001cd8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f80b 	bl	80009e4 <__aeabi_f2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80019de:	b590      	push	{r4, r7, lr}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80019ea:	f7ff ff5f 	bl	80018ac <LL_FLASH_GetUDN>
 80019ee:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d138      	bne.n	8001a6a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80019f8:	f000 ff54 	bl	80028a4 <HAL_GetUIDw0>
 80019fc:	4604      	mov	r4, r0
 80019fe:	f000 ff65 	bl	80028cc <HAL_GetUIDw2>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4423      	add	r3, r4
 8001a06:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a08:	f000 ff56 	bl	80028b8 <HAL_GetUIDw1>
 8001a0c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	0e1a      	lsrs	r2, r3, #24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3307      	adds	r3, #7
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	0c1a      	lsrs	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3306      	adds	r3, #6
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	0a1a      	lsrs	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3305      	adds	r3, #5
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0e1a      	lsrs	r2, r3, #24
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3303      	adds	r3, #3
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	0c1a      	lsrs	r2, r3, #16
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0a1a      	lsrs	r2, r3, #8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a68:	e031      	b.n	8001ace <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3307      	adds	r3, #7
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	0a1a      	lsrs	r2, r3, #8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3306      	adds	r3, #6
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	0c1a      	lsrs	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3305      	adds	r3, #5
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	0e1a      	lsrs	r2, r3, #24
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3304      	adds	r3, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001a98:	f7ff ff12 	bl	80018c0 <LL_FLASH_GetDeviceID>
 8001a9c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3303      	adds	r3, #3
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001aa8:	f7ff ff16 	bl	80018d8 <LL_FLASH_GetSTCompanyID>
 8001aac:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0a1a      	lsrs	r2, r3, #8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	701a      	strb	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}

08001ad6 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001ad6:	b590      	push	{r4, r7, lr}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001ae0:	f7ff fee4 	bl	80018ac <LL_FLASH_GetUDN>
 8001ae4:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d10b      	bne.n	8001b06 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001aee:	f000 fed9 	bl	80028a4 <HAL_GetUIDw0>
 8001af2:	4604      	mov	r4, r0
 8001af4:	f000 fee0 	bl	80028b8 <HAL_GetUIDw1>
 8001af8:	4603      	mov	r3, r0
 8001afa:	405c      	eors	r4, r3
 8001afc:	f000 fee6 	bl	80028cc <HAL_GetUIDw2>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4063      	eors	r3, r4
 8001b04:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b06:	687b      	ldr	r3, [r7, #4]

}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f018 fa1a 	bl	8019f58 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <TimestampNow+0x3c>)
 8001b2e:	2110      	movs	r1, #16
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f81d 	bl	8001b70 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fb1e 	bl	8000178 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0801b498 	.word	0x0801b498

08001b50 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b54:	2101      	movs	r1, #1
 8001b56:	2002      	movs	r0, #2
 8001b58:	f018 f88e 	bl	8019c78 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b64:	2100      	movs	r1, #0
 8001b66:	2002      	movs	r0, #2
 8001b68:	f018 f886 	bl	8019c78 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b70:	b40c      	push	{r2, r3}
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f018 fbb7 	bl	801a2fc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b98:	b002      	add	sp, #8
 8001b9a:	4770      	bx	lr

08001b9c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_GetTick+0x24>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001bc2:	f000 f97f 	bl	8001ec4 <TIMER_IF_GetTimerValue>
 8001bc6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000021c 	.word	0x2000021c

08001bd8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f9f5 	bl	8001fd2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c14:	68fb      	ldr	r3, [r7, #12]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c26:	f000 fe5b 	bl	80028e0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c2a:	f000 fe5f 	bl	80028ec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c2e:	f000 fe63 	bl	80028f8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff ffcf 	bl	8001bf0 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001c52:	2002      	movs	r0, #2
 8001c54:	f7ff ffcc 	bl	8001bf0 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7ff ffc9 	bl	8001bf0 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7ff ffc6 	bl	8001bf0 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001c64:	2301      	movs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c70:	f002 fe22 	bl	80048b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c78:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <DBG_Init+0xb4>)
 8001c80:	f002 fe1a 	bl	80048b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001c84:	2308      	movs	r3, #8
 8001c86:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <DBG_Init+0xb4>)
 8001c8e:	f002 fe13 	bl	80048b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001c92:	2310      	movs	r3, #16
 8001c94:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480e      	ldr	r0, [pc, #56]	@ (8001cd4 <DBG_Init+0xb4>)
 8001c9c:	f002 fe0c 	bl	80048b8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca8:	f003 f834 	bl	8004d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cb2:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <DBG_Init+0xb4>)
 8001cb4:	f003 f82e 	bl	8004d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <DBG_Init+0xb4>)
 8001cbe:	f003 f829 	bl	8004d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <DBG_Init+0xb4>)
 8001cc8:	f003 f824 	bl	8004d14 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001ccc:	bf00      	nop
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	48000400 	.word	0x48000400

08001cd8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <EnvSensors_Read+0x40>)
 8001ce2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <EnvSensors_Read+0x44>)
 8001ce6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <EnvSensors_Read+0x48>)
 8001cea:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <EnvSensors_Read+0x4c>)
 8001d02:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <EnvSensors_Read+0x50>)
 8001d08:	611a      	str	r2, [r3, #16]

  return 0;
 8001d0a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	42480000 	.word	0x42480000
 8001d1c:	41900000 	.word	0x41900000
 8001d20:	447a0000 	.word	0x447a0000
 8001d24:	003e090d 	.word	0x003e090d
 8001d28:	000503ab 	.word	0x000503ab

08001d2c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001d36:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <TIMER_IF_Init+0x5c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <TIMER_IF_Init+0x60>)
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001d84:	f7ff fc0c 	bl	80015a0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001d88:	f000 f856 	bl	8001e38 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <TIMER_IF_Init+0x60>)
 8001d92:	f004 fd19 	bl	80067c8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <TIMER_IF_Init+0x60>)
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d9e:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <TIMER_IF_Init+0x60>)
 8001da0:	f004 fe50 	bl	8006a44 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 f9d3 	bl	8002150 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001daa:	f000 f85f 	bl	8001e6c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <TIMER_IF_Init+0x5c>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000021d 	.word	0x2000021d
 8001dc4:	200001d8 	.word	0x200001d8

08001dc8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	222c      	movs	r2, #44	@ 0x2c
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f019 faa2 	bl	801b328 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001de4:	f000 f828 	bl	8001e38 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <TIMER_IF_StartTimer+0x68>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e00:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e04:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	2201      	movs	r2, #1
 8001e12:	4619      	mov	r1, r3
 8001e14:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <TIMER_IF_StartTimer+0x6c>)
 8001e16:	f004 fbcb 	bl	80065b0 <HAL_RTC_SetAlarm_IT>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001e20:	f7ff fb90 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001e24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3738      	adds	r7, #56	@ 0x38
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000220 	.word	0x20000220
 8001e34:	200001d8 	.word	0x200001d8

08001e38 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <TIMER_IF_StopTimer+0x2c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4c:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <TIMER_IF_StopTimer+0x30>)
 8001e4e:	f004 fcbb 	bl	80067c8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <TIMER_IF_StopTimer+0x30>)
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40002800 	.word	0x40002800
 8001e68:	200001d8 	.word	0x200001d8

08001e6c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001e70:	f000 f98e 	bl	8002190 <GetTimerTicks>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <TIMER_IF_SetTimerContext+0x18>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e7a:	4b02      	ldr	r3, [pc, #8]	@ (8001e84 <TIMER_IF_SetTimerContext+0x18>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000220 	.word	0x20000220

08001e88 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <TIMER_IF_GetTimerContext+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000220 	.word	0x20000220

08001e9c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ea6:	f000 f973 	bl	8002190 <GetTimerTicks>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000220 	.word	0x20000220

08001ec4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <TIMER_IF_GetTimerValue+0x24>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001ed6:	f000 f95b 	bl	8002190 <GetTimerTicks>
 8001eda:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001edc:	687b      	ldr	r3, [r7, #4]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000021d 	.word	0x2000021d

08001eec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001f06:	b5b0      	push	{r4, r5, r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f0e:	2100      	movs	r1, #0
 8001f10:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	2000      	movs	r0, #0
 8001f16:	460a      	mov	r2, r1
 8001f18:	4603      	mov	r3, r0
 8001f1a:	0d95      	lsrs	r5, r2, #22
 8001f1c:	0294      	lsls	r4, r2, #10
 8001f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe fda1 	bl	8000a70 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4613      	mov	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}

08001f40 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001f40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	2000      	movs	r0, #0
 8001f52:	460c      	mov	r4, r1
 8001f54:	4605      	mov	r5, r0
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f04f 0a00 	mov.w	sl, #0
 8001f5e:	f04f 0b00 	mov.w	fp, #0
 8001f62:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f66:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f6a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f6e:	4650      	mov	r0, sl
 8001f70:	4659      	mov	r1, fp
 8001f72:	1b02      	subs	r2, r0, r4
 8001f74:	eb61 0305 	sbc.w	r3, r1, r5
 8001f78:	f04f 0000 	mov.w	r0, #0
 8001f7c:	f04f 0100 	mov.w	r1, #0
 8001f80:	0099      	lsls	r1, r3, #2
 8001f82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f86:	0090      	lsls	r0, r2, #2
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	eb12 0804 	adds.w	r8, r2, r4
 8001f90:	eb43 0905 	adc.w	r9, r3, r5
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa8:	4690      	mov	r8, r2
 8001faa:	4699      	mov	r9, r3
 8001fac:	4640      	mov	r0, r8
 8001fae:	4649      	mov	r1, r9
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	0a82      	lsrs	r2, r0, #10
 8001fba:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001fbe:	0a8b      	lsrs	r3, r1, #10
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fd0:	4770      	bx	lr

08001fd2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff93 	bl	8001f06 <TIMER_IF_Convert_ms2Tick>
 8001fe0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001fe2:	f000 f8d5 	bl	8002190 <GetTimerTicks>
 8001fe6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fe8:	e000      	b.n	8001fec <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001fea:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fec:	f000 f8d0 	bl	8002190 <GetTimerTicks>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f6      	bhi.n	8001fea <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800200e:	f018 fda3 	bl	801ab58 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002022:	f000 f8a5 	bl	8002170 <TIMER_IF_BkUp_Read_MSBticks>
 8002026:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f88f 	bl	8002150 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800203a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002048:	f000 f8a2 	bl	8002190 <GetTimerTicks>
 800204c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800204e:	f000 f88f 	bl	8002170 <TIMER_IF_BkUp_Read_MSBticks>
 8002052:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	2200      	movs	r2, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	60fa      	str	r2, [r7, #12]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	000b      	movs	r3, r1
 8002068:	2200      	movs	r2, #0
 800206a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800206c:	2000      	movs	r0, #0
 800206e:	460c      	mov	r4, r1
 8002070:	4605      	mov	r5, r0
 8002072:	eb12 0804 	adds.w	r8, r2, r4
 8002076:	eb43 0905 	adc.w	r9, r3, r5
 800207a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800207e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	0a82      	lsrs	r2, r0, #10
 800208c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002090:	0a8b      	lsrs	r3, r1, #10
 8002092:	4613      	mov	r3, r2
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2200      	movs	r2, #0
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80020a4:	f04f 0b00 	mov.w	fp, #0
 80020a8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff46 	bl	8001f40 <TIMER_IF_Convert_Tick2ms>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80020bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3730      	adds	r7, #48	@ 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080020c8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80020d6:	f004 fd47 	bl	8006b68 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001d8 	.word	0x200001d8

080020e8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	2101      	movs	r1, #1
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80020f6:	f004 fd37 	bl	8006b68 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200001d8 	.word	0x200001d8

08002108 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002112:	2100      	movs	r1, #0
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002116:	f004 fd3f 	bl	8006b98 <HAL_RTCEx_BKUPRead>
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001d8 	.word	0x200001d8

0800212c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002136:	2101      	movs	r1, #1
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800213a:	f004 fd2d 	bl	8006b98 <HAL_RTCEx_BKUPRead>
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001d8 	.word	0x200001d8

08002150 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	2102      	movs	r1, #2
 800215c:	4803      	ldr	r0, [pc, #12]	@ (800216c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800215e:	f004 fd03 	bl	8006b68 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200001d8 	.word	0x200001d8

08002170 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002176:	2102      	movs	r1, #2
 8002178:	4804      	ldr	r0, [pc, #16]	@ (800218c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800217a:	f004 fd0d 	bl	8006b98 <HAL_RTCEx_BKUPRead>
 800217e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002180:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200001d8 	.word	0x200001d8

08002190 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002196:	480b      	ldr	r0, [pc, #44]	@ (80021c4 <GetTimerTicks+0x34>)
 8002198:	f7ff fdd9 	bl	8001d4e <LL_RTC_TIME_GetSubSecond>
 800219c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800219e:	e003      	b.n	80021a8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <GetTimerTicks+0x34>)
 80021a2:	f7ff fdd4 	bl	8001d4e <LL_RTC_TIME_GetSubSecond>
 80021a6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021a8:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <GetTimerTicks+0x34>)
 80021aa:	f7ff fdd0 	bl	8001d4e <LL_RTC_TIME_GetSubSecond>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d1f4      	bne.n	80021a0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40002800 	.word	0x40002800

080021c8 <LL_AHB2_GRP1_EnableClock>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <LL_APB2_GRP1_EnableClock>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002204:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002214:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221c:	68fb      	ldr	r3, [r7, #12]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <LL_APB2_GRP1_DisableClock>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	43db      	mvns	r3, r3
 800223a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800223e:	4013      	ands	r3, r2
 8002240:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <MX_USART1_UART_Init+0x94>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002294:	4811      	ldr	r0, [pc, #68]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002296:	f005 f962 	bl	800755e <HAL_UART_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022a0:	f7ff f950 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a4:	2100      	movs	r1, #0
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022a8:	f007 f9d9 	bl	800965e <HAL_UARTEx_SetTxFifoThreshold>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022b2:	f7ff f947 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4808      	ldr	r0, [pc, #32]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ba:	f007 fa0e 	bl	80096da <HAL_UARTEx_SetRxFifoThreshold>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022c4:	f7ff f93e 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ca:	f007 f98d 	bl	80095e8 <HAL_UARTEx_EnableFifoMode>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022d4:	f7ff f936 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000224 	.word	0x20000224
 80022e0:	40013800 	.word	0x40013800

080022e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b096      	sub	sp, #88	@ 0x58
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2238      	movs	r2, #56	@ 0x38
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f019 f80f 	bl	801b328 <memset>
  if(uartHandle->Instance==USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <HAL_UART_MspInit+0xe8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d156      	bne.n	80023c2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002314:	2301      	movs	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002318:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800231c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4618      	mov	r0, r3
 8002324:	f003 ffb0 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800232e:	f7ff f909 	bl	8001544 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002332:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002336:	f7ff ff5f 	bl	80021f8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2002      	movs	r0, #2
 800233c:	f7ff ff44 	bl	80021c8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002340:	23c0      	movs	r3, #192	@ 0xc0
 8002342:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002350:	2307      	movs	r3, #7
 8002352:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002358:	4619      	mov	r1, r3
 800235a:	481d      	ldr	r0, [pc, #116]	@ (80023d0 <HAL_UART_MspInit+0xec>)
 800235c:	f002 faac 	bl	80048b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002360:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002362:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_UART_MspInit+0xf4>)
 8002364:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002366:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002368:	2212      	movs	r2, #18
 800236a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 800236e:	2210      	movs	r2, #16
 8002370:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002390:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002396:	480f      	ldr	r0, [pc, #60]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 8002398:	f001 fc42 	bl	8003c20 <HAL_DMA_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80023a2:	f7ff f8cf 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 80023aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80023ac:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_UART_MspInit+0xf0>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2102      	movs	r1, #2
 80023b6:	2024      	movs	r0, #36	@ 0x24
 80023b8:	f001 fbfb 	bl	8003bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023bc:	2024      	movs	r0, #36	@ 0x24
 80023be:	f001 fc12 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023c2:	bf00      	nop
 80023c4:	3758      	adds	r7, #88	@ 0x58
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40013800 	.word	0x40013800
 80023d0:	48000400 	.word	0x48000400
 80023d4:	200002b4 	.word	0x200002b4
 80023d8:	40020008 	.word	0x40020008

080023dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_UART_MspDeInit+0x3c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10f      	bne.n	800240e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80023ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80023f2:	f7ff ff19 	bl	8002228 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80023f6:	21c0      	movs	r1, #192	@ 0xc0
 80023f8:	4808      	ldr	r0, [pc, #32]	@ (800241c <HAL_UART_MspDeInit+0x40>)
 80023fa:	f002 fbbd 	bl	8004b78 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002402:	4618      	mov	r0, r3
 8002404:	f001 fcb4 	bl	8003d70 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002408:	2024      	movs	r0, #36	@ 0x24
 800240a:	f001 fbfa 	bl	8003c02 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40013800 	.word	0x40013800
 800241c:	48000400 	.word	0x48000400

08002420 <LL_APB2_GRP1_ForceReset>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800242c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <LL_APB2_GRP1_ReleaseReset>:
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800244e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	43db      	mvns	r3, r3
 8002454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002458:	4013      	ands	r3, r2
 800245a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
	...

08002468 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <LL_EXTI_EnableIT_0_31+0x24>)
 8002472:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002476:	4905      	ldr	r1, [pc, #20]	@ (800248c <LL_EXTI_EnableIT_0_31+0x24>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	58000800 	.word	0x58000800

08002490 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002498:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <vcom_Init+0x28>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800249e:	f7fe fd9f 	bl	8000fe0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024a2:	f7ff fed3 	bl	800224c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80024a6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80024aa:	f7ff ffdd 	bl	8002468 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80024ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000318 	.word	0x20000318

080024bc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80024c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80024c4:	f7ff ffac 	bl	8002420 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80024c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80024cc:	f7ff ffb9 	bl	8002442 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <vcom_DeInit+0x28>)
 80024d2:	f7ff ff83 	bl	80023dc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80024d6:	200f      	movs	r0, #15
 80024d8:	f001 fb93 	bl	8003c02 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80024dc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000224 	.word	0x20000224

080024e8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4804      	ldr	r0, [pc, #16]	@ (800250c <vcom_Trace_DMA+0x24>)
 80024fc:	f005 f8d6 	bl	80076ac <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002500:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000224 	.word	0x20000224

08002510 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <vcom_ReceiveInit+0x70>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800251e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002522:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	e893 0006 	ldmia.w	r3, {r1, r2}
 800252c:	4815      	ldr	r0, [pc, #84]	@ (8002584 <vcom_ReceiveInit+0x74>)
 800252e:	f006 ffce 	bl	80094ce <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002532:	bf00      	nop
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <vcom_ReceiveInit+0x74>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002542:	d0f7      	beq.n	8002534 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002544:	bf00      	nop
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <vcom_ReceiveInit+0x74>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002554:	d1f7      	bne.n	8002546 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <vcom_ReceiveInit+0x74>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <vcom_ReceiveInit+0x74>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002564:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002566:	4807      	ldr	r0, [pc, #28]	@ (8002584 <vcom_ReceiveInit+0x74>)
 8002568:	f007 f80c 	bl	8009584 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800256c:	2201      	movs	r2, #1
 800256e:	4906      	ldr	r1, [pc, #24]	@ (8002588 <vcom_ReceiveInit+0x78>)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <vcom_ReceiveInit+0x74>)
 8002572:	f005 f845 	bl	8007600 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002576:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000031c 	.word	0x2000031c
 8002584:	20000224 	.word	0x20000224
 8002588:	20000314 	.word	0x20000314

0800258c <vcom_Resume>:

void vcom_Resume(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002590:	4808      	ldr	r0, [pc, #32]	@ (80025b4 <vcom_Resume+0x28>)
 8002592:	f004 ffe4 	bl	800755e <HAL_UART_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <vcom_Resume+0x14>
  {
    Error_Handler();
 800259c:	f7fe ffd2 	bl	8001544 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025a0:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <vcom_Resume+0x2c>)
 80025a2:	f001 fb3d 	bl	8003c20 <HAL_DMA_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80025ac:	f7fe ffca 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000224 	.word	0x20000224
 80025b8:	200002b4 	.word	0x200002b4

080025bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <HAL_UART_TxCpltCallback+0x24>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d103      	bne.n	80025d6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_UART_TxCpltCallback+0x28>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2000      	movs	r0, #0
 80025d4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40013800 	.word	0x40013800
 80025e4:	20000318 	.word	0x20000318

080025e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <HAL_UART_RxCpltCallback+0x44>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <HAL_UART_RxCpltCallback+0x48>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_UART_RxCpltCallback+0x30>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_UART_RxCpltCallback+0x48>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	2101      	movs	r1, #1
 8002614:	4807      	ldr	r0, [pc, #28]	@ (8002634 <HAL_UART_RxCpltCallback+0x4c>)
 8002616:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002618:	2201      	movs	r2, #1
 800261a:	4906      	ldr	r1, [pc, #24]	@ (8002634 <HAL_UART_RxCpltCallback+0x4c>)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f004 ffef 	bl	8007600 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40013800 	.word	0x40013800
 8002630:	2000031c 	.word	0x2000031c
 8002634:	20000314 	.word	0x20000314

08002638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002638:	480d      	ldr	r0, [pc, #52]	@ (8002670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800263c:	f7ff fb81 	bl	8001d42 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	@ (8002678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	@ (8002684 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002666:	f018 fe67 	bl	801b338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266a:	f7fe ff04 	bl	8001476 <main>

0800266e <LoopForever>:

LoopForever:
    b LoopForever
 800266e:	e7fe      	b.n	800266e <LoopForever>
  ldr   r0, =_estack
 8002670:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800267c:	0801c4b0 	.word	0x0801c4b0
  ldr r2, =_sbss
 8002680:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002684:	20002158 	.word	0x20002158

08002688 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC_IRQHandler>

0800268a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800269e:	2310      	movs	r3, #16
 80026a0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b6:	f002 f8ff 	bl	80048b8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80026ba:	2320      	movs	r3, #32
 80026bc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c6:	f002 f8f7 	bl	80048b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80026ca:	2200      	movs	r2, #0
 80026cc:	2120      	movs	r1, #32
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d2:	f002 fb1f 	bl	8004d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80026d6:	2200      	movs	r2, #0
 80026d8:	2110      	movs	r1, #16
 80026da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026de:	f002 fb19 	bl	8004d14 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d83f      	bhi.n	800277c <BSP_RADIO_ConfigRFSwitch+0x90>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002715 	.word	0x08002715
 8002708:	0800272f 	.word	0x0800272f
 800270c:	08002749 	.word	0x08002749
 8002710:	08002763 	.word	0x08002763
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	2110      	movs	r1, #16
 8002718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271c:	f002 fafa 	bl	8004d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	2120      	movs	r1, #32
 8002724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002728:	f002 faf4 	bl	8004d14 <HAL_GPIO_WritePin>
      break;      
 800272c:	e027      	b.n	800277e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800272e:	2201      	movs	r2, #1
 8002730:	2110      	movs	r1, #16
 8002732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002736:	f002 faed 	bl	8004d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800273a:	2200      	movs	r2, #0
 800273c:	2120      	movs	r1, #32
 800273e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002742:	f002 fae7 	bl	8004d14 <HAL_GPIO_WritePin>
      break;
 8002746:	e01a      	b.n	800277e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002748:	2201      	movs	r2, #1
 800274a:	2110      	movs	r1, #16
 800274c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002750:	f002 fae0 	bl	8004d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002754:	2201      	movs	r2, #1
 8002756:	2120      	movs	r1, #32
 8002758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275c:	f002 fada 	bl	8004d14 <HAL_GPIO_WritePin>
      break;
 8002760:	e00d      	b.n	800277e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002762:	2200      	movs	r2, #0
 8002764:	2110      	movs	r1, #16
 8002766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800276a:	f002 fad3 	bl	8004d14 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800276e:	2201      	movs	r2, #1
 8002770:	2120      	movs	r1, #32
 8002772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002776:	f002 facd 	bl	8004d14 <HAL_GPIO_WritePin>
      break;
 800277a:	e000      	b.n	800277e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800277c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800278c:	2302      	movs	r3, #2
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80027c2:	230f      	movs	r3, #15
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e001      	b.n	80027cc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80027c8:	2316      	movs	r3, #22
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80027cc:	68fb      	ldr	r3, [r7, #12]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a03      	ldr	r2, [pc, #12]	@ (80027f0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6053      	str	r3, [r2, #4]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	e0042000 	.word	0xe0042000

080027f4 <LL_DBGMCU_DisableDBGStopMode>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a03      	ldr	r2, [pc, #12]	@ (800280c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80027fe:	f023 0302 	bic.w	r3, r3, #2
 8002802:	6053      	str	r3, [r2, #4]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	e0042000 	.word	0xe0042000

08002810 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a03      	ldr	r2, [pc, #12]	@ (8002828 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6053      	str	r3, [r2, #4]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	e0042000 	.word	0xe0042000

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002836:	2003      	movs	r0, #3
 8002838:	f001 f9b0 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800283c:	f003 fb46 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8002840:	4603      	mov	r3, r0
 8002842:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <HAL_Init+0x3c>)
 8002844:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002846:	200f      	movs	r0, #15
 8002848:	f7ff f9a8 	bl	8001b9c <HAL_InitTick>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	71fb      	strb	r3, [r7, #7]
 8002856:	e001      	b.n	800285c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002858:	f7fe ff6b 	bl	8001732 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800285c:	79fb      	ldrb	r3, [r7, #7]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <HAL_SuspendTick+0x18>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a03      	ldr	r2, [pc, #12]	@ (8002884 <HAL_SuspendTick+0x18>)
 8002876:	f023 0302 	bic.w	r3, r3, #2
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <HAL_ResumeTick+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a03      	ldr	r2, [pc, #12]	@ (80028a0 <HAL_ResumeTick+0x18>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80028a8:	4b02      	ldr	r3, [pc, #8]	@ (80028b4 <HAL_GetUIDw0+0x10>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	1fff7590 	.word	0x1fff7590

080028b8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80028bc:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <HAL_GetUIDw1+0x10>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	1fff7594 	.word	0x1fff7594

080028cc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80028d0:	4b02      	ldr	r3, [pc, #8]	@ (80028dc <HAL_GetUIDw2+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	1fff7598 	.word	0x1fff7598

080028e0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80028e4:	f7ff ff78 	bl	80027d8 <LL_DBGMCU_DisableDBGSleepMode>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80028f0:	f7ff ff80 	bl	80027f4 <LL_DBGMCU_DisableDBGStopMode>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80028fc:	f7ff ff88 	bl	8002810 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2107      	movs	r1, #7
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2107      	movs	r1, #7
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	210f      	movs	r1, #15
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 010f 	and.w	r1, r3, #15
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	43db      	mvns	r3, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0219      	lsls	r1, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002a82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a86:	431a      	orrs	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002aa6:	f023 0317 	bic.w	r3, r3, #23
 8002aaa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002acc:	f023 0317 	bic.w	r3, r3, #23
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6093      	str	r3, [r2, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b14:	f023 0317 	bic.w	r3, r3, #23
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b3a:	f023 0317 	bic.w	r3, r3, #23
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d101      	bne.n	8002b8c <LL_ADC_IsDisableOngoing+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_ADC_IsDisableOngoing+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ba8:	f023 0317 	bic.w	r3, r3, #23
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bce:	f023 0317 	bic.w	r3, r3, #23
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e19e      	b.n	8002f68 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe f909 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff44 	bl	8002ade <LL_ADC_IsInternalRegulatorEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d115      	bne.n	8002c88 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff18 	bl	8002a96 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c66:	4b99      	ldr	r3, [pc, #612]	@ (8002ecc <HAL_ADC_Init+0x2c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	4a98      	ldr	r2, [pc, #608]	@ (8002ed0 <HAL_ADC_Init+0x2c8>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	3301      	adds	r3, #1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff26 	bl	8002ade <LL_ADC_IsInternalRegulatorEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff93 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 8144 	bne.w	8002f56 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 8140 	bne.w	8002f56 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff30 	bl	8002b50 <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80a7 	bne.w	8002e46 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e1b      	ldrb	r3, [r3, #24]
 8002d00:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d02:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7e5b      	ldrb	r3, [r3, #25]
 8002d08:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d0a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e9b      	ldrb	r3, [r3, #26]
 8002d10:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d12:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_ADC_Init+0x11a>
 8002d1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_Init+0x11c>
 8002d22:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d24:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d2a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da04      	bge.n	8002d3e <HAL_ADC_Init+0x136>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d3c:	e001      	b.n	8002d42 <HAL_ADC_Init+0x13a>
 8002d3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002d42:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002d4a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d4c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d114      	bne.n	8002d88 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7e9b      	ldrb	r3, [r3, #26]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e00b      	b.n	8002d88 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002dae:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d111      	bne.n	8002dfe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002de6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002dec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002df2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <HAL_ADC_Init+0x2cc>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002e1a:	d014      	beq.n	8002e46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d00f      	beq.n	8002e46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e2e:	d00a      	beq.n	8002e46 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e30:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <HAL_ADC_Init+0x2d0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e40:	4925      	ldr	r1, [pc, #148]	@ (8002ed8 <HAL_ADC_Init+0x2d0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	f7ff fd76 	bl	8002942 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	461a      	mov	r2, r3
 8002e60:	491e      	ldr	r1, [pc, #120]	@ (8002edc <HAL_ADC_Init+0x2d4>)
 8002e62:	f7ff fd6e 	bl	8002942 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d108      	bne.n	8002e80 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f062 020f 	orn	r2, r2, #15
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e7e:	e042      	b.n	8002f06 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e88:	d13d      	bne.n	8002f06 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	e00c      	b.n	8002eaa <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d006      	beq.n	8002eb2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b07      	cmp	r3, #7
 8002eae:	d9ef      	bls.n	8002e90 <HAL_ADC_Init+0x288>
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002eb2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d112      	bne.n	8002ee0 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f062 020f 	orn	r2, r2, #15
 8002ec8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eca:	e01c      	b.n	8002f06 <HAL_ADC_Init+0x2fe>
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	053e2d63 	.word	0x053e2d63
 8002ed4:	1ffffc02 	.word	0x1ffffc02
 8002ed8:	40012708 	.word	0x40012708
 8002edc:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	f003 031c 	and.w	r3, r3, #28
 8002ef2:	f06f 020f 	mvn.w	r2, #15
 8002ef6:	fa02 f103 	lsl.w	r1, r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd36 	bl	800297e <LL_ADC_GetSamplingTimeCommonChannels>
 8002f12:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f32:	e018      	b.n	8002f66 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	f023 0312 	bic.w	r3, r3, #18
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f54:	e007      	b.n	8002f66 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06a      	b.n	8003058 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fabe 	bl	8003510 <ADC_ConversionStop>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb82 	bl	80036a8 <ADC_Disable>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fd7f 	bl	8002abc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8002fcc:	f023 0303 	bic.w	r3, r3, #3
 8002fd0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f240 329f 	movw	r2, #927	@ 0x39f
 8002fda:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68d9      	ldr	r1, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <HAL_ADC_DeInit+0xf0>)
 8002fe8:	400b      	ands	r3, r1
 8002fea:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002ffa:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0207 	bic.w	r2, r2, #7
 800300a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800301a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800302a:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <HAL_ADC_DeInit+0xf4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <HAL_ADC_DeInit+0xf4>)
 8003030:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003034:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd ff1e 	bl	8000e78 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	833e0200 	.word	0x833e0200
 8003064:	40012708 	.word	0x40012708

08003068 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fdb5 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d132      	bne.n	80030e6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_Start+0x26>
 800308a:	2302      	movs	r3, #2
 800308c:	e02e      	b.n	80030ec <HAL_ADC_Start+0x84>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa80 	bl	800359c <ADC_Enable>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11a      	bne.n	80030dc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	221c      	movs	r2, #28
 80030c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fd5f 	bl	8002b98 <LL_ADC_REG_StartConversion>
 80030da:	e006      	b.n	80030ea <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80030e4:	e001      	b.n	80030ea <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
 80030e8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_ADC_Stop+0x16>
 8003106:	2302      	movs	r3, #2
 8003108:	e022      	b.n	8003150 <HAL_ADC_Stop+0x5c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9fc 	bl	8003510 <ADC_ConversionStop>
 8003118:	4603      	mov	r3, r0
 800311a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d111      	bne.n	8003146 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fac0 	bl	80036a8 <ADC_Disable>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d102      	bne.n	8003170 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800316a:	2308      	movs	r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e010      	b.n	8003192 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e077      	b.n	800327e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800318e:	2304      	movs	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003192:	f7fe fd0d 	bl	8001bb0 <HAL_GetTick>
 8003196:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003198:	e021      	b.n	80031de <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d01d      	beq.n	80031de <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031a2:	f7fe fd05 	bl	8001bb0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <HAL_ADC_PollForConversion+0x60>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d112      	bne.n	80031de <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0d6      	beq.n	800319a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fbd6 	bl	80029ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d031      	beq.n	800326c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7e9b      	ldrb	r3, [r3, #26]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12d      	bne.n	800326c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d126      	bne.n	800326c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fcde 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d112      	bne.n	8003254 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020c 	bic.w	r2, r2, #12
 800323c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	659a      	str	r2, [r3, #88]	@ 0x58
 8003252:	e00b      	b.n	800326c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e1b      	ldrb	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	220c      	movs	r2, #12
 800327a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x28>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e110      	b.n	80034ea <HAL_ADC_ConfigChannel+0x24a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fc85 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 80f7 	bne.w	80034d0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	f000 80b1 	beq.w	800344e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032f4:	d004      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032fa:	4a7e      	ldr	r2, [pc, #504]	@ (80034f4 <HAL_ADC_ConfigChannel+0x254>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7ff fb82 	bl	8002a14 <LL_ADC_REG_SetSequencerChAdd>
 8003310:	e041      	b.n	8003396 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	210f      	movs	r1, #15
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_ADC_ConfigChannel+0xa0>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	e011      	b.n	8003364 <HAL_ADC_ConfigChannel+0xc4>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	6849      	ldr	r1, [r1, #4]
 8003368:	f001 011f 	and.w	r1, r1, #31
 800336c:	408b      	lsls	r3, r1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	429a      	cmp	r2, r3
 8003382:	d808      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	f7ff fb1e 	bl	80029d2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fb5b 	bl	8002a5e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f280 8097 	bge.w	80034e0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b2:	4851      	ldr	r0, [pc, #324]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 80033b4:	f7ff fab8 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 80033b8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4f      	ldr	r2, [pc, #316]	@ (80034fc <HAL_ADC_ConfigChannel+0x25c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d120      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11b      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033d4:	4619      	mov	r1, r3
 80033d6:	4848      	ldr	r0, [pc, #288]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 80033d8:	f7ff fa94 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033dc:	4b48      	ldr	r3, [pc, #288]	@ (8003500 <HAL_ADC_ConfigChannel+0x260>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	4a48      	ldr	r2, [pc, #288]	@ (8003504 <HAL_ADC_ConfigChannel+0x264>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033f6:	e002      	b.n	80033fe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003404:	e06c      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a3f      	ldr	r2, [pc, #252]	@ (8003508 <HAL_ADC_ConfigChannel+0x268>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10c      	bne.n	800342a <HAL_ADC_ConfigChannel+0x18a>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003420:	4619      	mov	r1, r3
 8003422:	4835      	ldr	r0, [pc, #212]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 8003424:	f7ff fa6e 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
 8003428:	e05a      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a37      	ldr	r2, [pc, #220]	@ (800350c <HAL_ADC_ConfigChannel+0x26c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d155      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d150      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003444:	4619      	mov	r1, r3
 8003446:	482c      	ldr	r0, [pc, #176]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 8003448:	f7ff fa5c 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
 800344c:	e048      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003456:	d004      	beq.n	8003462 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800345c:	4a25      	ldr	r2, [pc, #148]	@ (80034f4 <HAL_ADC_ConfigChannel+0x254>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d107      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7ff fae3 	bl	8002a38 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da32      	bge.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800347a:	481f      	ldr	r0, [pc, #124]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 800347c:	f7ff fa54 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 8003480:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_ADC_ConfigChannel+0x25c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d107      	bne.n	800349c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003492:	4619      	mov	r1, r3
 8003494:	4818      	ldr	r0, [pc, #96]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 8003496:	f7ff fa35 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
 800349a:	e021      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_ADC_ConfigChannel+0x268>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d107      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ac:	4619      	mov	r1, r3
 80034ae:	4812      	ldr	r0, [pc, #72]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 80034b0:	f7ff fa28 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
 80034b4:	e014      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a14      	ldr	r2, [pc, #80]	@ (800350c <HAL_ADC_ConfigChannel+0x26c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10f      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80034c6:	4619      	mov	r1, r3
 80034c8:	480b      	ldr	r0, [pc, #44]	@ (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 80034ca:	f7ff fa1b 	bl	8002904 <LL_ADC_SetCommonPathInternalCh>
 80034ce:	e007      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	80000004 	.word	0x80000004
 80034f8:	40012708 	.word	0x40012708
 80034fc:	b0001000 	.word	0xb0001000
 8003500:	20000000 	.word	0x20000000
 8003504:	053e2d63 	.word	0x053e2d63
 8003508:	b8004000 	.word	0xb8004000
 800350c:	b4002000 	.word	0xb4002000

08003510 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fb61 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d033      	beq.n	8003590 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fb21 	bl	8002b74 <LL_ADC_IsDisableOngoing>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fb3e 	bl	8002bbe <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003542:	f7fe fb35 	bl	8001bb0 <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003548:	e01b      	b.n	8003582 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800354a:	f7fe fb31 	bl	8001bb0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d914      	bls.n	8003582 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e007      	b.n	8003592 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1dc      	bne.n	800354a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff facf 	bl	8002b50 <LL_ADC_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d169      	bne.n	800368c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <ADC_Enable+0xfc>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	f043 0210 	orr.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e055      	b.n	800368e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fa8c 	bl	8002b04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035ec:	482b      	ldr	r0, [pc, #172]	@ (800369c <ADC_Enable+0x100>)
 80035ee:	f7ff f99b 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00f      	beq.n	800361c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035fc:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <ADC_Enable+0x104>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	4a28      	ldr	r2, [pc, #160]	@ (80036a4 <ADC_Enable+0x108>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	3301      	adds	r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800360e:	e002      	b.n	8003616 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3b01      	subs	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f9      	bne.n	8003610 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7e5b      	ldrb	r3, [r3, #25]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d033      	beq.n	800368c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003624:	f7fe fac4 	bl	8001bb0 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362a:	e028      	b.n	800367e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa8d 	bl	8002b50 <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fa5f 	bl	8002b04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003646:	f7fe fab3 	bl	8001bb0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d914      	bls.n	800367e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d00d      	beq.n	800367e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	f043 0210 	orr.w	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e007      	b.n	800368e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d1cf      	bne.n	800362c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	80000017 	.word	0x80000017
 800369c:	40012708 	.word	0x40012708
 80036a0:	20000000 	.word	0x20000000
 80036a4:	053e2d63 	.word	0x053e2d63

080036a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fa5d 	bl	8002b74 <LL_ADC_IsDisableOngoing>
 80036ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fa45 	bl	8002b50 <LL_ADC_IsEnabled>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d047      	beq.n	800375c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d144      	bne.n	800375c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0305 	and.w	r3, r3, #5
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10c      	bne.n	80036fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fa20 	bl	8002b2a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2203      	movs	r2, #3
 80036f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036f2:	f7fe fa5d 	bl	8001bb0 <HAL_GetTick>
 80036f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036f8:	e029      	b.n	800374e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e023      	b.n	800375e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003716:	f7fe fa4b 	bl	8001bb0 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d914      	bls.n	800374e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e007      	b.n	800375e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1dc      	bne.n	8003716 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <LL_ADC_SetCalibrationFactor>:
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003776:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <LL_ADC_GetCalibrationFactor>:
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800379c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <LL_ADC_Enable>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037ba:	f023 0317 	bic.w	r3, r3, #23
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_Disable>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037e0:	f023 0317 	bic.w	r3, r3, #23
 80037e4:	f043 0202 	orr.w	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <LL_ADC_IsEnabled>:
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <LL_ADC_IsEnabled+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_IsEnabled+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <LL_ADC_StartCalibration>:
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800382a:	f023 0317 	bic.w	r3, r3, #23
 800382e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsCalibrationOnGoing>:
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003854:	d101      	bne.n	800385a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b088      	sub	sp, #32
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_ADCEx_Calibration_Start+0x1e>
 8003880:	2302      	movs	r3, #2
 8003882:	e0b9      	b.n	80039f8 <HAL_ADCEx_Calibration_Start+0x192>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff0b 	bl	80036a8 <ADC_Disable>
 8003892:	4603      	mov	r3, r0
 8003894:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ffab 	bl	80037f6 <LL_ADC_IsEnabled>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 809d 	bne.w	80039e2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038b0:	f043 0202 	orr.w	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	f248 0303 	movw	r3, #32771	@ 0x8003
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038d4:	f023 0303 	bic.w	r3, r3, #3
 80038d8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	e02e      	b.n	800393e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff98 	bl	800381a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038ea:	e014      	b.n	8003916 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80038f8:	d30d      	bcc.n	8003916 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fe:	f023 0312 	bic.w	r3, r3, #18
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e070      	b.n	80039f8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff90 	bl	8003840 <LL_ADC_IsCalibrationOnGoing>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e2      	bne.n	80038ec <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff2f 	bl	800378e <LL_ADC_GetCalibrationFactor>
 8003930:	4602      	mov	r2, r0
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b07      	cmp	r3, #7
 8003942:	d9cd      	bls.n	80038e0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff29 	bl	80037aa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff01 	bl	8003766 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff31 	bl	80037d0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800396e:	f7fe f91f 	bl	8001bb0 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003974:	e01c      	b.n	80039b0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003976:	f7fe f91b 	bl	8001bb0 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d915      	bls.n	80039b0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff34 	bl	80037f6 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e023      	b.n	80039f8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff1e 	bl	80037f6 <LL_ADC_IsEnabled>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1da      	bne.n	8003976 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f023 0303 	bic.w	r3, r3, #3
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	@ 0x58
 80039e0:	e005      	b.n	80039ee <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <__NVIC_GetPriorityGrouping+0x18>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0307 	and.w	r3, r3, #7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0b      	blt.n	8003a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4906      	ldr	r1, [pc, #24]	@ (8003a98 <__NVIC_EnableIRQ+0x34>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2001      	movs	r0, #1
 8003a86:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db12      	blt.n	8003ad4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <__NVIC_DisableIRQ+0x44>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	3320      	adds	r3, #32
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac8:	f3bf 8f4f 	dsb	sy
}
 8003acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ace:	f3bf 8f6f 	isb	sy
}
 8003ad2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	@ (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	@ (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	@ 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff2b 	bl	8003a00 <__NVIC_SetPriorityGrouping>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc0:	f7ff ff42 	bl	8003a48 <__NVIC_GetPriorityGrouping>
 8003bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ffb4 	bl	8003b38 <NVIC_EncodePriority>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff83 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff35 	bl	8003a64 <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff43 	bl	8003a9c <__NVIC_DisableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e08e      	b.n	8003d50 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_DMA_Init+0x138>)
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d80f      	bhi.n	8003c5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b45      	ldr	r3, [pc, #276]	@ (8003d5c <HAL_DMA_Init+0x13c>)
 8003c46:	4413      	add	r3, r2
 8003c48:	4a45      	ldr	r2, [pc, #276]	@ (8003d60 <HAL_DMA_Init+0x140>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	009a      	lsls	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a42      	ldr	r2, [pc, #264]	@ (8003d64 <HAL_DMA_Init+0x144>)
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c5c:	e00e      	b.n	8003c7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b40      	ldr	r3, [pc, #256]	@ (8003d68 <HAL_DMA_Init+0x148>)
 8003c66:	4413      	add	r3, r2
 8003c68:	4a3d      	ldr	r2, [pc, #244]	@ (8003d60 <HAL_DMA_Init+0x140>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	009a      	lsls	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a3c      	ldr	r2, [pc, #240]	@ (8003d6c <HAL_DMA_Init+0x14c>)
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c96:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fb24 	bl	800431c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cdc:	d102      	bne.n	8003ce4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cfa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_DMA_Init+0x106>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d80c      	bhi.n	8003d26 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb4d 	bl	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e008      	b.n	8003d38 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40020407 	.word	0x40020407
 8003d5c:	bffdfff8 	.word	0xbffdfff8
 8003d60:	cccccccd 	.word	0xcccccccd
 8003d64:	40020000 	.word	0x40020000
 8003d68:	bffdfbf8 	.word	0xbffdfbf8
 8003d6c:	40020400 	.word	0x40020400

08003d70 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07b      	b.n	8003e7a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b3a      	ldr	r3, [pc, #232]	@ (8003e84 <HAL_DMA_DeInit+0x114>)
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d80f      	bhi.n	8003dbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b38      	ldr	r3, [pc, #224]	@ (8003e88 <HAL_DMA_DeInit+0x118>)
 8003da6:	4413      	add	r3, r2
 8003da8:	4a38      	ldr	r2, [pc, #224]	@ (8003e8c <HAL_DMA_DeInit+0x11c>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a35      	ldr	r2, [pc, #212]	@ (8003e90 <HAL_DMA_DeInit+0x120>)
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dbc:	e00e      	b.n	8003ddc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <HAL_DMA_DeInit+0x124>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a30      	ldr	r2, [pc, #192]	@ (8003e8c <HAL_DMA_DeInit+0x11c>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e98 <HAL_DMA_DeInit+0x128>)
 8003dda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	f003 021c 	and.w	r2, r3, #28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa8f 	bl	800431c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00f      	beq.n	8003e38 <HAL_DMA_DeInit+0xc8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d80b      	bhi.n	8003e38 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fac3 	bl	80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e36:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40020407 	.word	0x40020407
 8003e88:	bffdfff8 	.word	0xbffdfff8
 8003e8c:	cccccccd 	.word	0xcccccccd
 8003e90:	40020000 	.word	0x40020000
 8003e94:	bffdfbf8 	.word	0xbffdfbf8
 8003e98:	40020400 	.word	0x40020400

08003e9c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_DMA_Start_IT+0x20>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e069      	b.n	8003f90 <HAL_DMA_Start_IT+0xf4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d155      	bne.n	8003f7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f9d3 	bl	80042a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 020e 	orr.w	r2, r2, #14
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e00f      	b.n	8003f34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0204 	bic.w	r2, r2, #4
 8003f22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 020a 	orr.w	r2, r2, #10
 8003f32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e008      	b.n	8003f8e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2280      	movs	r2, #128	@ 0x80
 8003f80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e04f      	b.n	800404a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d008      	beq.n	8003fc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e040      	b.n	800404a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020e 	bic.w	r2, r2, #14
 8003fd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	f003 021c 	and.w	r2, r3, #28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004014:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800402c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004036:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d005      	beq.n	8004078 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2204      	movs	r2, #4
 8004070:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e047      	b.n	8004108 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 020e 	bic.w	r2, r2, #14
 8004086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ac:	f003 021c 	and.w	r2, r3, #28
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
    }
  }
  return status;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	f003 031c 	and.w	r3, r3, #28
 8004134:	2204      	movs	r2, #4
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d027      	beq.n	8004190 <HAL_DMA_IRQHandler+0x7c>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d022      	beq.n	8004190 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	f003 021c 	and.w	r2, r3, #28
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	2104      	movs	r1, #4
 8004176:	fa01 f202 	lsl.w	r2, r1, r2
 800417a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8081 	beq.w	8004288 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800418e:	e07b      	b.n	8004288 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	f003 031c 	and.w	r3, r3, #28
 8004198:	2202      	movs	r2, #2
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03d      	beq.n	8004220 <HAL_DMA_IRQHandler+0x10c>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d038      	beq.n	8004220 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020a 	bic.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_DMA_IRQHandler+0x180>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d909      	bls.n	80041f4 <HAL_DMA_IRQHandler+0xe0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f003 031c 	and.w	r3, r3, #28
 80041e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004298 <HAL_DMA_IRQHandler+0x184>)
 80041ea:	2102      	movs	r1, #2
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	6053      	str	r3, [r2, #4]
 80041f2:	e008      	b.n	8004206 <HAL_DMA_IRQHandler+0xf2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	f003 031c 	and.w	r3, r3, #28
 80041fc:	4a27      	ldr	r2, [pc, #156]	@ (800429c <HAL_DMA_IRQHandler+0x188>)
 80041fe:	2102      	movs	r1, #2
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d038      	beq.n	8004288 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800421e:	e033      	b.n	8004288 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f003 031c 	and.w	r3, r3, #28
 8004228:	2208      	movs	r2, #8
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02a      	beq.n	800428a <HAL_DMA_IRQHandler+0x176>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d025      	beq.n	800428a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 020e 	bic.w	r2, r2, #14
 800424c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f003 021c 	and.w	r2, r3, #28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004288:	bf00      	nop
 800428a:	bf00      	nop
}
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40020080 	.word	0x40020080
 8004298:	40020400 	.word	0x40020400
 800429c:	40020000 	.word	0x40020000

080042a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f003 021c 	and.w	r2, r3, #28
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d108      	bne.n	8004300 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042fe:	e007      	b.n	8004310 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
	...

0800431c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800432c:	429a      	cmp	r2, r3
 800432e:	d813      	bhi.n	8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800433c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3b08      	subs	r3, #8
 800434c:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e011      	b.n	800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004362:	4413      	add	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3b08      	subs	r3, #8
 8004370:	4a0b      	ldr	r2, [pc, #44]	@ (80043a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	3307      	adds	r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004380:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40020407 	.word	0x40020407
 80043a0:	cccccccd 	.word	0xcccccccd
 80043a4:	4002081c 	.word	0x4002081c
 80043a8:	40020880 	.word	0x40020880

080043ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a08      	ldr	r2, [pc, #32]	@ (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2201      	movs	r2, #1
 80043dc:	409a      	lsls	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	1000823f 	.word	0x1000823f
 80043f0:	40020940 	.word	0x40020940

080043f4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <HAL_FLASH_Program+0x80>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_FLASH_Program+0x1a>
 800440a:	2302      	movs	r3, #2
 800440c:	e02d      	b.n	800446a <HAL_FLASH_Program+0x76>
 800440e:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_FLASH_Program+0x80>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004414:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <HAL_FLASH_Program+0x80>)
 8004416:	2200      	movs	r2, #0
 8004418:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800441a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800441e:	f000 f869 	bl	80044f4 <FLASH_WaitForLastOperation>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11a      	bne.n	8004462 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004436:	68b8      	ldr	r0, [r7, #8]
 8004438:	f000 f8be 	bl	80045b8 <FLASH_Program_DoubleWord>
 800443c:	e004      	b.n	8004448 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4619      	mov	r1, r3
 8004442:	68b8      	ldr	r0, [r7, #8]
 8004444:	f000 f8de 	bl	8004604 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800444c:	f000 f852 	bl	80044f4 <FLASH_WaitForLastOperation>
 8004450:	4603      	mov	r3, r0
 8004452:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004454:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <HAL_FLASH_Program+0x84>)
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	4906      	ldr	r1, [pc, #24]	@ (8004478 <HAL_FLASH_Program+0x84>)
 800445e:	4013      	ands	r3, r2
 8004460:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004462:	4b04      	ldr	r3, [pc, #16]	@ (8004474 <HAL_FLASH_Program+0x80>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000320 	.word	0x20000320
 8004478:	58004000 	.word	0x58004000

0800447c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da0b      	bge.n	80044a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004490:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <HAL_FLASH_Unlock+0x3c>)
 8004492:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004494:	4b07      	ldr	r3, [pc, #28]	@ (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <HAL_FLASH_Unlock+0x40>)
 8004498:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800449a:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_FLASH_Unlock+0x38>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da01      	bge.n	80044a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80044a6:	79fb      	ldrb	r3, [r7, #7]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	58004000 	.word	0x58004000
 80044b8:	45670123 	.word	0x45670123
 80044bc:	cdef89ab 	.word	0xcdef89ab

080044c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_FLASH_Lock+0x30>)
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <HAL_FLASH_Lock+0x30>)
 80044d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044d4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_FLASH_Lock+0x30>)
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db01      	blt.n	80044e2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80044e2:	79fb      	ldrb	r3, [r7, #7]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58004000 	.word	0x58004000

080044f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80044fc:	f7fd fb58 	bl	8001bb0 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004502:	e009      	b.n	8004518 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004504:	f7fd fb54 	bl	8001bb0 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d801      	bhi.n	8004518 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e046      	b.n	80045a6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004518:	4b25      	ldr	r3, [pc, #148]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004524:	d0ee      	beq.n	8004504 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004526:	4b22      	ldr	r3, [pc, #136]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004536:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 8004538:	2201      	movs	r2, #1
 800453a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004542:	4013      	ands	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454c:	d307      	bcc.n	800455e <FLASH_WaitForLastOperation+0x6a>
 800454e:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004558:	4915      	ldr	r1, [pc, #84]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	618b      	str	r3, [r1, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <FLASH_WaitForLastOperation+0x7e>
 8004568:	4a11      	ldr	r2, [pc, #68]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004570:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00e      	beq.n	8004596 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004578:	4a0e      	ldr	r2, [pc, #56]	@ (80045b4 <FLASH_WaitForLastOperation+0xc0>)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e011      	b.n	80045a6 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004582:	f7fd fb15 	bl	8001bb0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d801      	bhi.n	8004596 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e007      	b.n	80045a6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004596:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <FLASH_WaitForLastOperation+0xbc>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800459e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045a2:	d0ee      	beq.n	8004582 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58004000 	.word	0x58004000
 80045b4:	20000320 	.word	0x20000320

080045b8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <FLASH_Program_DoubleWord+0x48>)
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <FLASH_Program_DoubleWord+0x48>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80045d6:	f3bf 8f6f 	isb	sy
}
 80045da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80045dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	000a      	movs	r2, r1
 80045ea:	2300      	movs	r3, #0
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	3104      	adds	r1, #4
 80045f0:	4613      	mov	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	58004000 	.word	0x58004000

08004604 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800460e:	2340      	movs	r3, #64	@ 0x40
 8004610:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <FLASH_Program_Fast+0x78>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <FLASH_Program_Fast+0x78>)
 8004620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004624:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	60fb      	str	r3, [r7, #12]
  return(result);
 800462c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800462e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004630:	b672      	cpsid	i
}
 8004632:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	3304      	adds	r3, #4
 8004640:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3304      	adds	r3, #4
 8004646:	617b      	str	r3, [r7, #20]
    row_index--;
 8004648:	7ffb      	ldrb	r3, [r7, #31]
 800464a:	3b01      	subs	r3, #1
 800464c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800464e:	7ffb      	ldrb	r3, [r7, #31]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ef      	bne.n	8004634 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004654:	bf00      	nop
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <FLASH_Program_Fast+0x78>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004662:	d0f8      	beq.n	8004656 <FLASH_Program_Fast+0x52>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004670:	bf00      	nop
 8004672:	3724      	adds	r7, #36	@ 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	58004000 	.word	0x58004000

08004680 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_FLASHEx_Erase+0xac>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_FLASHEx_Erase+0x16>
 8004692:	2302      	movs	r3, #2
 8004694:	e046      	b.n	8004724 <HAL_FLASHEx_Erase+0xa4>
 8004696:	4b25      	ldr	r3, [pc, #148]	@ (800472c <HAL_FLASHEx_Erase+0xac>)
 8004698:	2201      	movs	r2, #1
 800469a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800469c:	4b23      	ldr	r3, [pc, #140]	@ (800472c <HAL_FLASHEx_Erase+0xac>)
 800469e:	2200      	movs	r2, #0
 80046a0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046a6:	f7ff ff25 	bl	80044f4 <FLASH_WaitForLastOperation>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d133      	bne.n	800471c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d108      	bne.n	80046ce <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80046bc:	f000 f880 	bl	80047c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046c4:	f7ff ff16 	bl	80044f4 <FLASH_WaitForLastOperation>
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e024      	b.n	8004718 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	e012      	b.n	8004704 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80046de:	68b8      	ldr	r0, [r7, #8]
 80046e0:	f000 f87e 	bl	80047e0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046e8:	f7ff ff04 	bl	80044f4 <FLASH_WaitForLastOperation>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	601a      	str	r2, [r3, #0]
          break;
 80046fc:	e00a      	b.n	8004714 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3301      	adds	r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4413      	add	r3, r2
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	429a      	cmp	r2, r3
 8004712:	d3e4      	bcc.n	80046de <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004714:	f000 f8c0 	bl	8004898 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004718:	f000 f87a 	bl	8004810 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_FLASHEx_Erase+0xac>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]

  return status;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000320 	.word	0x20000320

08004730 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004738:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_FLASHEx_Erase_IT+0x14>
 8004740:	2302      	movs	r3, #2
 8004742:	e034      	b.n	80047ae <HAL_FLASHEx_Erase_IT+0x7e>
 8004744:	4b1c      	ldr	r3, [pc, #112]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 800474c:	2200      	movs	r2, #0
 800474e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004756:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004758:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800475c:	f7ff feca 	bl	80044f4 <FLASH_WaitForLastOperation>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800476a:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e01c      	b.n	80047ac <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004772:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <HAL_FLASHEx_Erase_IT+0x8c>)
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <HAL_FLASHEx_Erase_IT+0x8c>)
 8004778:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800477c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d105      	bne.n	8004792 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004788:	2200      	movs	r2, #0
 800478a:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 800478c:	f000 f818 	bl	80047c0 <FLASH_MassErase>
 8004790:	e00c      	b.n	80047ac <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4a08      	ldr	r2, [pc, #32]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004798:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <HAL_FLASHEx_Erase_IT+0x88>)
 80047a0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f81a 	bl	80047e0 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000320 	.word	0x20000320
 80047bc:	58004000 	.word	0x58004000

080047c0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <FLASH_MassErase+0x1c>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4a04      	ldr	r2, [pc, #16]	@ (80047dc <FLASH_MassErase+0x1c>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6153      	str	r3, [r2, #20]
#endif
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	58004000 	.word	0x58004000

080047e0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <FLASH_PageErase+0x2c>)
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4313      	orrs	r3, r2
 80047f6:	4a05      	ldr	r2, [pc, #20]	@ (800480c <FLASH_PageErase+0x2c>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	6153      	str	r3, [r2, #20]
#endif
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	58004000 	.word	0x58004000

08004810 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004814:	4b1f      	ldr	r3, [pc, #124]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800481c:	2b01      	cmp	r3, #1
 800481e:	d117      	bne.n	8004850 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004820:	4b1c      	ldr	r3, [pc, #112]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1b      	ldr	r2, [pc, #108]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004826:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800482a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004832:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800483e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004842:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004844:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a12      	ldr	r2, [pc, #72]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800484a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800484e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004858:	2b01      	cmp	r3, #1
 800485a:	d117      	bne.n	800488c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004866:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004868:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800486e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a06      	ldr	r2, [pc, #24]	@ (8004894 <FLASH_FlushCaches+0x84>)
 800487a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800487e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004880:	4b04      	ldr	r3, [pc, #16]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a03      	ldr	r2, [pc, #12]	@ (8004894 <FLASH_FlushCaches+0x84>)
 8004886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800488a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	58004000 	.word	0x58004000

08004898 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <FLASH_AcknowledgePageErase+0x1c>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <FLASH_AcknowledgePageErase+0x1c>)
 80048a2:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80048a6:	f023 0302 	bic.w	r3, r3, #2
 80048aa:	6153      	str	r3, [r2, #20]
#endif
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	58004000 	.word	0x58004000

080048b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c6:	e140      	b.n	8004b4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2101      	movs	r1, #1
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8132 	beq.w	8004b44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d005      	beq.n	80048f8 <HAL_GPIO_Init+0x40>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d130      	bne.n	800495a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800492e:	2201      	movs	r2, #1
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0201 	and.w	r2, r3, #1
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b03      	cmp	r3, #3
 8004964:	d017      	beq.n	8004996 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d123      	bne.n	80049ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	08da      	lsrs	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3208      	adds	r2, #8
 80049aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	08da      	lsrs	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3208      	adds	r2, #8
 80049e4:	6939      	ldr	r1, [r7, #16]
 80049e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	2203      	movs	r2, #3
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0203 	and.w	r2, r3, #3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 808c 	beq.w	8004b44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8004b68 <HAL_GPIO_Init+0x2b0>)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	2207      	movs	r2, #7
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a56:	d00d      	beq.n	8004a74 <HAL_GPIO_Init+0x1bc>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a44      	ldr	r2, [pc, #272]	@ (8004b6c <HAL_GPIO_Init+0x2b4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <HAL_GPIO_Init+0x1b8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a43      	ldr	r2, [pc, #268]	@ (8004b70 <HAL_GPIO_Init+0x2b8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <HAL_GPIO_Init+0x1b4>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e004      	b.n	8004a76 <HAL_GPIO_Init+0x1be>
 8004a6c:	2307      	movs	r3, #7
 8004a6e:	e002      	b.n	8004a76 <HAL_GPIO_Init+0x1be>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_GPIO_Init+0x1be>
 8004a74:	2300      	movs	r3, #0
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	f002 0203 	and.w	r2, r2, #3
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	4093      	lsls	r3, r2
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a86:	4938      	ldr	r1, [pc, #224]	@ (8004b68 <HAL_GPIO_Init+0x2b0>)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	3302      	adds	r3, #2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a94:	4b37      	ldr	r3, [pc, #220]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004abe:	4b2d      	ldr	r3, [pc, #180]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ae2:	4a24      	ldr	r2, [pc, #144]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ae8:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b0e:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b16:	4b17      	ldr	r3, [pc, #92]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <HAL_GPIO_Init+0x2bc>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3301      	adds	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f47f aeb7 	bne.w	80048c8 <HAL_GPIO_Init+0x10>
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	48000400 	.word	0x48000400
 8004b70:	48000800 	.word	0x48000800
 8004b74:	58000800 	.word	0x58000800

08004b78 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b86:	e0af      	b.n	8004ce8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b88:	2201      	movs	r2, #1
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80a2 	beq.w	8004ce2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b9e:	4a59      	ldr	r2, [pc, #356]	@ (8004d04 <HAL_GPIO_DeInit+0x18c>)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	2207      	movs	r2, #7
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bc6:	d00d      	beq.n	8004be4 <HAL_GPIO_DeInit+0x6c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a4f      	ldr	r2, [pc, #316]	@ (8004d08 <HAL_GPIO_DeInit+0x190>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <HAL_GPIO_DeInit+0x68>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8004d0c <HAL_GPIO_DeInit+0x194>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_GPIO_DeInit+0x64>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e004      	b.n	8004be6 <HAL_GPIO_DeInit+0x6e>
 8004bdc:	2307      	movs	r3, #7
 8004bde:	e002      	b.n	8004be6 <HAL_GPIO_DeInit+0x6e>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_GPIO_DeInit+0x6e>
 8004be4:	2300      	movs	r3, #0
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	f002 0203 	and.w	r2, r2, #3
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	4093      	lsls	r3, r2
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d136      	bne.n	8004c64 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004bf6:	4b46      	ldr	r3, [pc, #280]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004bf8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	4943      	ldr	r1, [pc, #268]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004c08:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	493f      	ldr	r1, [pc, #252]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	493b      	ldr	r1, [pc, #236]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c28:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	4937      	ldr	r1, [pc, #220]	@ (8004d10 <HAL_GPIO_DeInit+0x198>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	2207      	movs	r2, #7
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c46:	4a2f      	ldr	r2, [pc, #188]	@ (8004d04 <HAL_GPIO_DeInit+0x18c>)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	482b      	ldr	r0, [pc, #172]	@ (8004d04 <HAL_GPIO_DeInit+0x18c>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	08da      	lsrs	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3208      	adds	r2, #8
 8004c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	08d2      	lsrs	r2, r2, #3
 8004c98:	4019      	ands	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3208      	adds	r2, #8
 8004c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2103      	movs	r1, #3
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af49 	bne.w	8004b88 <HAL_GPIO_DeInit+0x10>
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	58000800 	.word	0x58000800

08004d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
 8004d20:	4613      	mov	r3, r2
 8004d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d24:	787b      	ldrb	r3, [r7, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2a:	887a      	ldrh	r2, [r7, #2]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d30:	e002      	b.n	8004d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d4e:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d5a:	4a05      	ldr	r2, [pc, #20]	@ (8004d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f004 fe7e 	bl	8009a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58000800 	.word	0x58000800

08004d74 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d78:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a03      	ldr	r2, [pc, #12]	@ (8004d8c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	58000400 	.word	0x58000400

08004d90 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dae:	d10d      	bne.n	8004dcc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004db0:	f000 f83c 	bl	8004e2c <HAL_PWREx_DisableLowPowerRunMode>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004dba:	e015      	b.n	8004de8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004dc8:	f000 f822 	bl	8004e10 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dcc:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004dde:	bf30      	wfi
 8004de0:	e002      	b.n	8004de8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004de2:	bf40      	sev
    __WFE();
 8004de4:	bf20      	wfe
    __WFE();
 8004de6:	bf20      	wfe
  }
}
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	58000400 	.word	0x58000400
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <HAL_PWREx_GetVoltageRange+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	58000400 	.word	0x58000400

08004e10 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e14:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a03      	ldr	r2, [pc, #12]	@ (8004e28 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	58000400 	.word	0x58000400

08004e2c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e32:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e3c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004e3e:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2232      	movs	r2, #50	@ 0x32
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	4a12      	ldr	r2, [pc, #72]	@ (8004e94 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0c9b      	lsrs	r3, r3, #18
 8004e50:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e52:	e002      	b.n	8004e5a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e66:	d102      	bne.n	8004e6e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f2      	bne.n	8004e54 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e6e:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7a:	d101      	bne.n	8004e80 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e000      	b.n	8004e82 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	58000400 	.word	0x58000400
 8004e90:	20000000 	.word	0x20000000
 8004e94:	431bde83 	.word	0x431bde83

08004e98 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f023 0307 	bic.w	r3, r3, #7
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ec4:	bf30      	wfi
 8004ec6:	e002      	b.n	8004ece <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ec8:	bf40      	sev
    __WFE();
 8004eca:	bf20      	wfe
    __WFE();
 8004ecc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4a05      	ldr	r2, [pc, #20]	@ (8004ee8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	6113      	str	r3, [r2, #16]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	58000400 	.word	0x58000400
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <LL_PWR_IsEnabledBkUpAccess>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efc:	d101      	bne.n	8004f02 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	58000400 	.word	0x58000400

08004f10 <LL_RCC_HSE_EnableTcxo>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_HSE_DisableTcxo>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f5a:	d101      	bne.n	8004f60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <LL_RCC_HSE_Enable>:
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_HSE_Disable>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_HSE_IsReady>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb4:	d101      	bne.n	8004fba <LL_RCC_HSE_IsReady+0x18>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <LL_RCC_HSE_IsReady+0x1a>
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <LL_RCC_HSI_Enable>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_HSI_Disable>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_HSI_IsReady>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d101      	bne.n	8005014 <LL_RCC_HSI_IsReady+0x18>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <LL_RCC_HSI_IsReady+0x1a>
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <LL_RCC_HSI_SetCalibTrimming>:
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <LL_RCC_LSE_IsReady>:
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d101      	bne.n	800505e <LL_RCC_LSE_IsReady+0x18>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <LL_RCC_LSE_IsReady+0x1a>
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <LL_RCC_LSI_Enable>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <LL_RCC_LSI_Disable>:
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <LL_RCC_LSI_IsReady>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80050ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d101      	bne.n	80050c0 <LL_RCC_LSI_IsReady+0x18>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <LL_RCC_LSI_IsReady+0x1a>
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_MSI_Enable>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <LL_RCC_MSI_Disable>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6013      	str	r3, [r2, #0]
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <LL_RCC_MSI_IsReady>:
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d101      	bne.n	8005118 <LL_RCC_MSI_IsReady+0x16>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <LL_RCC_MSI_IsReady+0x18>
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b08      	cmp	r3, #8
 8005132:	d101      	bne.n	8005138 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <LL_RCC_MSI_GetRange>:
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005164:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800518a:	4313      	orrs	r3, r2
 800518c:	604b      	str	r3, [r1, #4]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <LL_RCC_SetSysClkSource>:
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <LL_RCC_GetSysClkSource>:
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 030c 	and.w	r3, r3, #12
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_SetAHBPrescaler>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_SetAHB3Prescaler>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005206:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800520a:	f023 020f 	bic.w	r2, r3, #15
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <LL_RCC_SetAPB1Prescaler>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <LL_RCC_SetAPB2Prescaler>:
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800525e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4313      	orrs	r3, r2
 8005266:	608b      	str	r3, [r1, #8]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <LL_RCC_GetAHBPrescaler>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <LL_RCC_GetAHB3Prescaler>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_GetAPB1Prescaler>:
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <LL_RCC_GetAPB2Prescaler>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e0:	6013      	str	r3, [r2, #0]
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005318:	d101      	bne.n	800531e <LL_RCC_PLL_IsReady+0x18>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <LL_RCC_PLL_IsReady+0x1a>
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800534e:	4618      	mov	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0303 	and.w	r3, r3, #3
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005394:	d101      	bne.n	800539a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b8:	d101      	bne.n	80053be <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053da:	d101      	bne.n	80053e0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053fc:	d101      	bne.n	8005402 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e38b      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541e:	f7ff fece 	bl	80051be <LL_RCC_GetSysClkSource>
 8005422:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005424:	f7ff ffa2 	bl	800536c <LL_RCC_PLL_GetMainSource>
 8005428:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80c9 	beq.w	80055ca <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x3e>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d17b      	bne.n	800553c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d178      	bne.n	800553c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544a:	f7ff fe5a 	bl	8005102 <LL_RCC_MSI_IsReady>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCC_OscConfig+0x54>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e36a      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x72>
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800547c:	e006      	b.n	800548c <HAL_RCC_OscConfig+0x80>
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800548c:	4293      	cmp	r3, r2
 800548e:	d222      	bcs.n	80054d6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fd51 	bl	8005f3c <RCC_SetFlashLatencyFromMSIRange>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e348      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ae:	f043 0308 	orr.w	r3, r3, #8
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fe4e 	bl	8005170 <LL_RCC_MSI_SetCalibTrimming>
 80054d4:	e021      	b.n	800551a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fe35 	bl	8005170 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fd16 	bl	8005f3c <RCC_SetFlashLatencyFromMSIRange>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e30d      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800551a:	f000 fcd7 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 800551e:	4603      	mov	r3, r0
 8005520:	4aa1      	ldr	r2, [pc, #644]	@ (80057a8 <HAL_RCC_OscConfig+0x39c>)
 8005522:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005524:	4ba1      	ldr	r3, [pc, #644]	@ (80057ac <HAL_RCC_OscConfig+0x3a0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fc fb37 	bl	8001b9c <HAL_InitTick>
 800552e:	4603      	mov	r3, r0
 8005530:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d047      	beq.n	80055c8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	e2fc      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02c      	beq.n	800559e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005544:	f7ff fdc1 	bl	80050ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005548:	f7fc fb32 	bl	8001bb0 <HAL_GetTick>
 800554c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005550:	f7fc fb2e 	bl	8001bb0 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e2e9      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005562:	f7ff fdce 	bl	8005102 <LL_RCC_MSI_IsReady>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f1      	beq.n	8005550 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005576:	f043 0308 	orr.w	r3, r3, #8
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fdea 	bl	8005170 <LL_RCC_MSI_SetCalibTrimming>
 800559c:	e015      	b.n	80055ca <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800559e:	f7ff fda2 	bl	80050e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055a2:	f7fc fb05 	bl	8001bb0 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055aa:	f7fc fb01 	bl	8001bb0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e2bc      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80055bc:	f7ff fda1 	bl	8005102 <LL_RCC_MSI_IsReady>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f1      	bne.n	80055aa <HAL_RCC_OscConfig+0x19e>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055c8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05f      	beq.n	8005696 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_OscConfig+0x1dc>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d10d      	bne.n	80055fe <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d10a      	bne.n	80055fe <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	f7ff fcdb 	bl	8004fa2 <LL_RCC_HSE_IsReady>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d050      	beq.n	8005694 <HAL_RCC_OscConfig+0x288>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d14c      	bne.n	8005694 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e29b      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561c:	d102      	bne.n	8005624 <HAL_RCC_OscConfig+0x218>
 800561e:	f7ff fca4 	bl	8004f6a <LL_RCC_HSE_Enable>
 8005622:	e00d      	b.n	8005640 <HAL_RCC_OscConfig+0x234>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800562c:	d104      	bne.n	8005638 <HAL_RCC_OscConfig+0x22c>
 800562e:	f7ff fc6f 	bl	8004f10 <LL_RCC_HSE_EnableTcxo>
 8005632:	f7ff fc9a 	bl	8004f6a <LL_RCC_HSE_Enable>
 8005636:	e003      	b.n	8005640 <HAL_RCC_OscConfig+0x234>
 8005638:	f7ff fca5 	bl	8004f86 <LL_RCC_HSE_Disable>
 800563c:	f7ff fc76 	bl	8004f2c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc fab2 	bl	8001bb0 <HAL_GetTick>
 800564c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005650:	f7fc faae 	bl	8001bb0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	@ 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e269      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005662:	f7ff fc9e 	bl	8004fa2 <LL_RCC_HSE_IsReady>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f1      	beq.n	8005650 <HAL_RCC_OscConfig+0x244>
 800566c:	e013      	b.n	8005696 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566e:	f7fc fa9f 	bl	8001bb0 <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005676:	f7fc fa9b 	bl	8001bb0 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b64      	cmp	r3, #100	@ 0x64
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e256      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005688:	f7ff fc8b 	bl	8004fa2 <LL_RCC_HSE_IsReady>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f1      	bne.n	8005676 <HAL_RCC_OscConfig+0x26a>
 8005692:	e000      	b.n	8005696 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005694:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04b      	beq.n	800573a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_OscConfig+0x2a8>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d113      	bne.n	80056d6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d110      	bne.n	80056d6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b4:	f7ff fca2 	bl	8004ffc <LL_RCC_HSI_IsReady>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_RCC_OscConfig+0x2be>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e235      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fca5 	bl	800501e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d4:	e031      	b.n	800573a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d019      	beq.n	8005712 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056de:	f7ff fc71 	bl	8004fc4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fc fa65 	bl	8001bb0 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ea:	f7fc fa61 	bl	8001bb0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e21c      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056fc:	f7ff fc7e 	bl	8004ffc <LL_RCC_HSI_IsReady>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f1      	beq.n	80056ea <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fc87 	bl	800501e <LL_RCC_HSI_SetCalibTrimming>
 8005710:	e013      	b.n	800573a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005712:	f7ff fc65 	bl	8004fe0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005716:	f7fc fa4b 	bl	8001bb0 <HAL_GetTick>
 800571a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571e:	f7fc fa47 	bl	8001bb0 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e202      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005730:	f7ff fc64 	bl	8004ffc <LL_RCC_HSI_IsReady>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f1      	bne.n	800571e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d06f      	beq.n	8005826 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d057      	beq.n	80057fe <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005756:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	429a      	cmp	r2, r3
 8005764:	d036      	beq.n	80057d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e1db      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d018      	beq.n	80057ba <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005788:	f7ff fc7e 	bl	8005088 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800578c:	f7fc fa10 	bl	8001bb0 <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005792:	e00d      	b.n	80057b0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fc fa0c 	bl	8001bb0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b11      	cmp	r3, #17
 80057a0:	d906      	bls.n	80057b0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e1c7      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
 80057a6:	bf00      	nop
 80057a8:	20000000 	.word	0x20000000
 80057ac:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80057b0:	f7ff fc7a 	bl	80050a8 <LL_RCC_LSI_IsReady>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1ec      	bne.n	8005794 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80057ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d4:	f7ff fc48 	bl	8005068 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fc f9ea 	bl	8001bb0 <HAL_GetTick>
 80057dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e0:	f7fc f9e6 	bl	8001bb0 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b11      	cmp	r3, #17
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e1a1      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80057f2:	f7ff fc59 	bl	80050a8 <LL_RCC_LSI_IsReady>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f1      	beq.n	80057e0 <HAL_RCC_OscConfig+0x3d4>
 80057fc:	e013      	b.n	8005826 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057fe:	f7ff fc43 	bl	8005088 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005802:	f7fc f9d5 	bl	8001bb0 <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800580a:	f7fc f9d1 	bl	8001bb0 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b11      	cmp	r3, #17
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e18c      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800581c:	f7ff fc44 	bl	80050a8 <LL_RCC_LSI_IsReady>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f1      	bne.n	800580a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80d8 	beq.w	80059e4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005834:	f7ff fb5a 	bl	8004eec <LL_PWR_IsEnabledBkUpAccess>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d113      	bne.n	8005866 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800583e:	f7ff fa99 	bl	8004d74 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005842:	f7fc f9b5 	bl	8001bb0 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584a:	f7fc f9b1 	bl	8001bb0 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e16c      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800585c:	f7ff fb46 	bl	8004eec <LL_PWR_IsEnabledBkUpAccess>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f1      	beq.n	800584a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d07b      	beq.n	8005966 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b85      	cmp	r3, #133	@ 0x85
 8005874:	d003      	beq.n	800587e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d109      	bne.n	8005892 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005892:	f7fc f98d 	bl	8001bb0 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fc f97f 	bl	8001bb0 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e138      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058c4:	f7ff fbbf 	bl	8005046 <LL_RCC_LSE_IsReady>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ef      	beq.n	80058ae <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b81      	cmp	r3, #129	@ 0x81
 80058d4:	d003      	beq.n	80058de <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b85      	cmp	r3, #133	@ 0x85
 80058dc:	d121      	bne.n	8005922 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fc f967 	bl	8001bb0 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fc f959 	bl	8001bb0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e112      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ec      	beq.n	80058fa <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005920:	e060      	b.n	80059e4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc f945 	bl	8001bb0 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fc f937 	bl	8001bb0 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0f0      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ec      	bne.n	800593e <HAL_RCC_OscConfig+0x532>
 8005964:	e03e      	b.n	80059e4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005966:	f7fc f923 	bl	8001bb0 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800597c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fc f915 	bl	8001bb0 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0ce      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ec      	bne.n	8005982 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fc f902 	bl	8001bb0 <HAL_GetTick>
 80059ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80059c2:	e00a      	b.n	80059da <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c4:	f7fc f8f4 	bl	8001bb0 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0ad      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80059da:	f7ff fb34 	bl	8005046 <LL_RCC_LSE_IsReady>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ef      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a3 	beq.w	8005b34 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d076      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d14b      	bne.n	8005a94 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fc:	f7ff fc75 	bl	80052ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fc f8d6 	bl	8001bb0 <HAL_GetTick>
 8005a04:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fc f8d2 	bl	8001bb0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b0a      	cmp	r3, #10
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e08d      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a1a:	f7ff fc74 	bl	8005306 <LL_RCC_PLL_IsReady>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f1      	bne.n	8005a08 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	4b45      	ldr	r3, [pc, #276]	@ (8005b40 <HAL_RCC_OscConfig+0x734>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a36:	4311      	orrs	r1, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a3c:	0212      	lsls	r2, r2, #8
 8005a3e:	4311      	orrs	r1, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a4a:	4311      	orrs	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a50:	430a      	orrs	r2, r1
 8005a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a5a:	f7ff fc38 	bl	80052ce <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fc f89f 	bl	8001bb0 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fc f89b 	bl	8001bb0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b0a      	cmp	r3, #10
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e056      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a88:	f7ff fc3d 	bl	8005306 <LL_RCC_PLL_IsReady>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f1      	beq.n	8005a76 <HAL_RCC_OscConfig+0x66a>
 8005a92:	e04f      	b.n	8005b34 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a94:	f7ff fc29 	bl	80052ea <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab2:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc f878 	bl	8001bb0 <HAL_GetTick>
 8005ac0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fc f874 	bl	8001bb0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b0a      	cmp	r3, #10
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e02f      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ad6:	f7ff fc16 	bl	8005306 <LL_RCC_PLL_IsReady>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f1      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x6b8>
 8005ae0:	e028      	b.n	8005b34 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e023      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f003 0203 	and.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d115      	bne.n	8005b30 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d10e      	bne.n	8005b30 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d106      	bne.n	8005b30 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	11c1808c 	.word	0x11c1808c

08005b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e10f      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b89      	ldr	r3, [pc, #548]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d91b      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b86      	ldr	r3, [pc, #536]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 0207 	bic.w	r2, r3, #7
 8005b6e:	4984      	ldr	r1, [pc, #528]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b76:	f7fc f81b 	bl	8001bb0 <HAL_GetTick>
 8005b7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b7e:	f7fc f817 	bl	8001bb0 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e0f3      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b90:	4b7b      	ldr	r3, [pc, #492]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d1ef      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fb10 	bl	80051d4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bb4:	f7fb fffc 	bl	8001bb0 <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bbc:	f7fb fff8 	bl	8001bb0 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e0d4      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bce:	f7ff fbd8 	bl	8005382 <LL_RCC_IsActiveFlag_HPRE>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f1      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d016      	beq.n	8005c12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff fb06 	bl	80051fa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bee:	f7fb ffdf 	bl	8001bb0 <HAL_GetTick>
 8005bf2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bf6:	f7fb ffdb 	bl	8001bb0 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e0b7      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c08:	f7ff fbcc 	bl	80053a4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f1      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff faff 	bl	8005226 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c28:	f7fb ffc2 	bl	8001bb0 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c30:	f7fb ffbe 	bl	8001bb0 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e09a      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c42:	f7ff fbc1 	bl	80053c8 <LL_RCC_IsActiveFlag_PPRE1>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d017      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff faf4 	bl	800524c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c64:	f7fb ffa4 	bl	8001bb0 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c6c:	f7fb ffa0 	bl	8001bb0 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e07c      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c7e:	f7ff fbb4 	bl	80053ea <LL_RCC_IsActiveFlag_PPRE2>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f1      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d043      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c9c:	f7ff f981 	bl	8004fa2 <LL_RCC_HSE_IsReady>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11e      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e066      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d106      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cb2:	f7ff fb28 	bl	8005306 <LL_RCC_PLL_IsReady>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d113      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e05b      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005cc8:	f7ff fa1b 	bl	8005102 <LL_RCC_MSI_IsReady>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e050      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cd6:	f7ff f991 	bl	8004ffc <LL_RCC_HSI_IsReady>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e049      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fa55 	bl	8005198 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cee:	f7fb ff5f 	bl	8001bb0 <HAL_GetTick>
 8005cf2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf4:	e00a      	b.n	8005d0c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf6:	f7fb ff5b 	bl	8001bb0 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e035      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0c:	f7ff fa57 	bl	80051be <LL_RCC_GetSysClkSource>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1ec      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b18      	ldr	r3, [pc, #96]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d21b      	bcs.n	8005d62 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 0207 	bic.w	r2, r3, #7
 8005d32:	4913      	ldr	r1, [pc, #76]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3a:	f7fb ff39 	bl	8001bb0 <HAL_GetTick>
 8005d3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d42:	f7fb ff35 	bl	8001bb0 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e011      	b.n	8005d78 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d54:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <HAL_RCC_ClockConfig+0x23c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d1ef      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d62:	f000 f8b3 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005d66:	4603      	mov	r3, r0
 8005d68:	4a06      	ldr	r2, [pc, #24]	@ (8005d84 <HAL_RCC_ClockConfig+0x240>)
 8005d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d6c:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_RCC_ClockConfig+0x244>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fb ff13 	bl	8001b9c <HAL_InitTick>
 8005d76:	4603      	mov	r3, r0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	58004000 	.word	0x58004000
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000004 	.word	0x20000004

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9a:	f7ff fa10 	bl	80051be <LL_RCC_GetSysClkSource>
 8005d9e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da0:	f7ff fae4 	bl	800536c <LL_RCC_PLL_GetMainSource>
 8005da4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x2c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d139      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d136      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005db8:	f7ff f9b3 	bl	8005122 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d115      	bne.n	8005dee <HAL_RCC_GetSysClockFreq+0x62>
 8005dc2:	f7ff f9ae 	bl	8005122 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d106      	bne.n	8005dda <HAL_RCC_GetSysClockFreq+0x4e>
 8005dcc:	f7ff f9b9 	bl	8005142 <LL_RCC_MSI_GetRange>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	e005      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x5a>
 8005dda:	f7ff f9bd 	bl	8005158 <LL_RCC_MSI_GetRangeAfterStandby>
 8005dde:	4603      	mov	r3, r0
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	4a36      	ldr	r2, [pc, #216]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dec:	e014      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x8c>
 8005dee:	f7ff f998 	bl	8005122 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x7a>
 8005df8:	f7ff f9a3 	bl	8005142 <LL_RCC_MSI_GetRange>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	e005      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x86>
 8005e06:	f7ff f9a7 	bl	8005158 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e18:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d115      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e24:	e012      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e00c      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d109      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e38:	f7ff f886 	bl	8004f48 <LL_RCC_HSE_IsEnabledDiv2>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d102      	bne.n	8005e48 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e42:	4b20      	ldr	r3, [pc, #128]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e001      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e48:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e4a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4c:	f7ff f9b7 	bl	80051be <LL_RCC_GetSysClkSource>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d12f      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e56:	f7ff fa89 	bl	800536c <LL_RCC_PLL_GetMainSource>
 8005e5a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d003      	beq.n	8005e6a <HAL_RCC_GetSysClockFreq+0xde>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d003      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e68:	e00d      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e6a:	4b16      	ldr	r3, [pc, #88]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e6c:	60fb      	str	r3, [r7, #12]
        break;
 8005e6e:	e00d      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e70:	f7ff f86a 	bl	8004f48 <LL_RCC_HSE_IsEnabledDiv2>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d102      	bne.n	8005e80 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e7c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005e80:	4b11      	ldr	r3, [pc, #68]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e82:	60fb      	str	r3, [r7, #12]
        break;
 8005e84:	e002      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	60fb      	str	r3, [r7, #12]
        break;
 8005e8a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e8c:	f7ff fa4c 	bl	8005328 <LL_RCC_PLL_GetN>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	fb03 f402 	mul.w	r4, r3, r2
 8005e98:	f7ff fa5d 	bl	8005356 <LL_RCC_PLL_GetDivider>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ea6:	f7ff fa4b 	bl	8005340 <LL_RCC_PLL_GetR>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	0f5b      	lsrs	r3, r3, #29
 8005eae:	3301      	adds	r3, #1
 8005eb0:	fbb4 f3f3 	udiv	r3, r4, r3
 8005eb4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}
 8005ec0:	0801be10 	.word	0x0801be10
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	01e84800 	.word	0x01e84800

08005ecc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ecc:	b598      	push	{r3, r4, r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ed0:	f7ff ff5c 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	f7ff f9cc 	bl	8005272 <LL_RCC_GetAHBPrescaler>
 8005eda:	4603      	mov	r3, r0
 8005edc:	091b      	lsrs	r3, r3, #4
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	4a03      	ldr	r2, [pc, #12]	@ (8005ef0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd98      	pop	{r3, r4, r7, pc}
 8005ef0:	0801bdb0 	.word	0x0801bdb0

08005ef4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef4:	b598      	push	{r3, r4, r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ef8:	f7ff ffe8 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005efc:	4604      	mov	r4, r0
 8005efe:	f7ff f9d0 	bl	80052a2 <LL_RCC_GetAPB1Prescaler>
 8005f02:	4603      	mov	r3, r0
 8005f04:	0a1b      	lsrs	r3, r3, #8
 8005f06:	4a03      	ldr	r2, [pc, #12]	@ (8005f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd98      	pop	{r3, r4, r7, pc}
 8005f14:	0801bdf0 	.word	0x0801bdf0

08005f18 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f18:	b598      	push	{r3, r4, r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f1c:	f7ff ffd6 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005f20:	4604      	mov	r4, r0
 8005f22:	f7ff f9c9 	bl	80052b8 <LL_RCC_GetAPB2Prescaler>
 8005f26:	4603      	mov	r3, r0
 8005f28:	0adb      	lsrs	r3, r3, #11
 8005f2a:	4a03      	ldr	r2, [pc, #12]	@ (8005f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd98      	pop	{r3, r4, r7, pc}
 8005f38:	0801bdf0 	.word	0x0801bdf0

08005f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	4a10      	ldr	r2, [pc, #64]	@ (8005f90 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f52:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005f54:	f7ff f998 	bl	8005288 <LL_RCC_GetAHB3Prescaler>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4a09      	ldr	r2, [pc, #36]	@ (8005f98 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0c9c      	lsrs	r4, r3, #18
 8005f78:	f7fe ff3e 	bl	8004df8 <HAL_PWREx_GetVoltageRange>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 f80b 	bl	8005f9c <RCC_SetFlashLatency>
 8005f86:	4603      	mov	r3, r0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd90      	pop	{r4, r7, pc}
 8005f90:	0801be10 	.word	0x0801be10
 8005f94:	0801bdb0 	.word	0x0801bdb0
 8005f98:	431bde83 	.word	0x431bde83

08005f9c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08e      	sub	sp, #56	@ 0x38
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8006090 <RCC_SetFlashLatency+0xf4>)
 8005fa8:	f107 0320 	add.w	r3, r7, #32
 8005fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005fb6:	4a37      	ldr	r2, [pc, #220]	@ (8006094 <RCC_SetFlashLatency+0xf8>)
 8005fb8:	f107 0318 	add.w	r3, r7, #24
 8005fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fc0:	6018      	str	r0, [r3, #0]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005fc6:	4a34      	ldr	r2, [pc, #208]	@ (8006098 <RCC_SetFlashLatency+0xfc>)
 8005fc8:	f107 030c 	add.w	r3, r7, #12
 8005fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fdc:	d11b      	bne.n	8006016 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fe2:	e014      	b.n	800600e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	3338      	adds	r3, #56	@ 0x38
 8005fea:	443b      	add	r3, r7
 8005fec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d807      	bhi.n	8006008 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3338      	adds	r3, #56	@ 0x38
 8005ffe:	443b      	add	r3, r7
 8006000:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006006:	e021      	b.n	800604c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	3301      	adds	r3, #1
 800600c:	633b      	str	r3, [r7, #48]	@ 0x30
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b02      	cmp	r3, #2
 8006012:	d9e7      	bls.n	8005fe4 <RCC_SetFlashLatency+0x48>
 8006014:	e01a      	b.n	800604c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006016:	2300      	movs	r3, #0
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601a:	e014      	b.n	8006046 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	3338      	adds	r3, #56	@ 0x38
 8006022:	443b      	add	r3, r7
 8006024:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4293      	cmp	r3, r2
 800602e:	d807      	bhi.n	8006040 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	3338      	adds	r3, #56	@ 0x38
 8006036:	443b      	add	r3, r7
 8006038:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800603e:	e005      	b.n	800604c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	3301      	adds	r3, #1
 8006044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	2b02      	cmp	r3, #2
 800604a:	d9e7      	bls.n	800601c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <RCC_SetFlashLatency+0x100>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 0207 	bic.w	r2, r3, #7
 8006054:	4911      	ldr	r1, [pc, #68]	@ (800609c <RCC_SetFlashLatency+0x100>)
 8006056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006058:	4313      	orrs	r3, r2
 800605a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800605c:	f7fb fda8 	bl	8001bb0 <HAL_GetTick>
 8006060:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006062:	e008      	b.n	8006076 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006064:	f7fb fda4 	bl	8001bb0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e007      	b.n	8006086 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <RCC_SetFlashLatency+0x100>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006080:	429a      	cmp	r2, r3
 8006082:	d1ef      	bne.n	8006064 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3738      	adds	r7, #56	@ 0x38
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	0801b4a4 	.word	0x0801b4a4
 8006094:	0801b4ac 	.word	0x0801b4ac
 8006098:	0801b4b4 	.word	0x0801b4b4
 800609c:	58004000 	.word	0x58004000

080060a0 <LL_RCC_LSE_IsReady>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d101      	bne.n	80060b8 <LL_RCC_LSE_IsReady+0x18>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <LL_RCC_LSE_IsReady+0x1a>
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <LL_RCC_SetUSARTClockSource>:
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	43db      	mvns	r3, r3
 80060d8:	401a      	ands	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <LL_RCC_SetI2SClockSource>:
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <LL_RCC_SetLPUARTClockSource>:
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr

08006146 <LL_RCC_SetI2CClockSource>:
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800614e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006152:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800615e:	43db      	mvns	r3, r3
 8006160:	401a      	ands	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800616a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <LL_RCC_SetLPTIMClockSource>:
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	041b      	lsls	r3, r3, #16
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <LL_RCC_SetRNGClockSource>:
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr

080061da <LL_RCC_SetADCClockSource>:
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <LL_RCC_SetRTCClockSource>:
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800620c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006218:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <LL_RCC_GetRTCClockSource>:
{
 800622e:	b480      	push	{r7}
 8006230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800623e:	4618      	mov	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <LL_RCC_ForceBackupDomainReset>:
{
 8006246:	b480      	push	{r7}
 8006248:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
	...

08006288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006294:	2300      	movs	r3, #0
 8006296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006298:	2300      	movs	r3, #0
 800629a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d058      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80062a8:	f7fe fd64 	bl	8004d74 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ac:	f7fb fc80 	bl	8001bb0 <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80062b2:	e009      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b4:	f7fb fc7c 	bl	8001bb0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d902      	bls.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	74fb      	strb	r3, [r7, #19]
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80062c8:	4b7b      	ldr	r3, [pc, #492]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d4:	d1ee      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80062d6:	7cfb      	ldrb	r3, [r7, #19]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d13c      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80062dc:	f7ff ffa7 	bl	800622e <LL_RCC_GetRTCClockSource>
 80062e0:	4602      	mov	r2, r0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d00f      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f8:	f7ff ffa5 	bl	8006246 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062fc:	f7ff ffb3 	bl	8006266 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d014      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fb fc4c 	bl	8001bb0 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800631a:	e00b      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fb fc48 	bl	8001bb0 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d902      	bls.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	74fb      	strb	r3, [r7, #19]
            break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006334:	f7ff feb4 	bl	80060a0 <LL_RCC_LSE_IsReady>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d1ee      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff5b 	bl	8006204 <LL_RCC_SetRTCClockSource>
 800634e:	e004      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	74bb      	strb	r3, [r7, #18]
 8006354:	e001      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fea9 	bl	80060c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fe9e 	bl	80060c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fec0 	bl	800611c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fee6 	bl	800617e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fedb 	bl	800617e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fed0 	bl	800617e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fea9 	bl	8006146 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe9e 	bl	8006146 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fe93 	bl	8006146 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d011      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fe5e 	bl	80060f2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643e:	d107      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800644a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800644e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fea5 	bl	80061b0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800646e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800647c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d011      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fea3 	bl	80061da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800649c:	d107      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800649e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80064ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	58000400 	.word	0x58000400

080064bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d068      	beq.n	80065a0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb f8ae 	bl	8001644 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f0:	4b2e      	ldr	r3, [pc, #184]	@ (80065ac <HAL_RTC_Init+0xf0>)
 80064f2:	22ca      	movs	r2, #202	@ 0xca
 80064f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80064f6:	4b2d      	ldr	r3, [pc, #180]	@ (80065ac <HAL_RTC_Init+0xf0>)
 80064f8:	2253      	movs	r2, #83	@ 0x53
 80064fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa0f 	bl	8006920 <RTC_EnterInitMode>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d13f      	bne.n	800658c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800650c:	4b27      	ldr	r3, [pc, #156]	@ (80065ac <HAL_RTC_Init+0xf0>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	4a26      	ldr	r2, [pc, #152]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006512:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800651c:	4b23      	ldr	r3, [pc, #140]	@ (80065ac <HAL_RTC_Init+0xf0>)
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	4319      	orrs	r1, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	430b      	orrs	r3, r1
 8006530:	491e      	ldr	r1, [pc, #120]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006532:	4313      	orrs	r3, r2
 8006534:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	491a      	ldr	r1, [pc, #104]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	430b      	orrs	r3, r1
 8006558:	4914      	ldr	r1, [pc, #80]	@ (80065ac <HAL_RTC_Init+0xf0>)
 800655a:	4313      	orrs	r3, r2
 800655c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa12 	bl	8006988 <RTC_ExitInitMode>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10e      	bne.n	800658c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800656e:	4b0f      	ldr	r3, [pc, #60]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a19      	ldr	r1, [r3, #32]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	4319      	orrs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	430b      	orrs	r3, r1
 8006586:	4909      	ldr	r1, [pc, #36]	@ (80065ac <HAL_RTC_Init+0xf0>)
 8006588:	4313      	orrs	r3, r2
 800658a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <HAL_RTC_Init+0xf0>)
 800658e:	22ff      	movs	r2, #255	@ 0xff
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40002800 	.word	0x40002800

080065b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_RTC_SetAlarm_IT+0x1e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0f3      	b.n	80067b6 <HAL_RTC_SetAlarm_IT+0x206>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80065de:	4b78      	ldr	r3, [pc, #480]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ee:	d06a      	beq.n	80066c6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d13a      	bne.n	800666c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80065f6:	4b72      	ldr	r3, [pc, #456]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f000 f9f5 	bl	8006a04 <RTC_ByteToBcd2>
 800661a:	4603      	mov	r3, r0
 800661c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f9ee 	bl	8006a04 <RTC_ByteToBcd2>
 8006628:	4603      	mov	r3, r0
 800662a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800662c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	789b      	ldrb	r3, [r3, #2]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f9e6 	bl	8006a04 <RTC_ByteToBcd2>
 8006638:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800663a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006644:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f9d8 	bl	8006a04 <RTC_ByteToBcd2>
 8006654:	4603      	mov	r3, r0
 8006656:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006658:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006660:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e02c      	b.n	80066c6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006674:	d00d      	beq.n	8006692 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800667e:	d008      	beq.n	8006692 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006680:	4b4f      	ldr	r3, [pc, #316]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800669e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	78db      	ldrb	r3, [r3, #3]
 80066aa:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066ac:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066b4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066b6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066c6:	4b3e      	ldr	r3, [pc, #248]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80066c8:	22ca      	movs	r2, #202	@ 0xca
 80066ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80066cc:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ce:	2253      	movs	r2, #83	@ 0x53
 80066d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066da:	d12c      	bne.n	8006736 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80066dc:	4b38      	ldr	r3, [pc, #224]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	4a37      	ldr	r2, [pc, #220]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80066e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80066e6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80066e8:	4b35      	ldr	r3, [pc, #212]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066f4:	d107      	bne.n	8006706 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4930      	ldr	r1, [pc, #192]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006700:	4313      	orrs	r3, r2
 8006702:	644b      	str	r3, [r1, #68]	@ 0x44
 8006704:	e006      	b.n	8006714 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006706:	4a2e      	ldr	r2, [pc, #184]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800670c:	4a2c      	ldr	r2, [pc, #176]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006714:	4a2a      	ldr	r2, [pc, #168]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	f043 0201 	orr.w	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006728:	4b25      	ldr	r3, [pc, #148]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	4a24      	ldr	r2, [pc, #144]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800672e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006732:	6193      	str	r3, [r2, #24]
 8006734:	e02b      	b.n	800678e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006736:	4b22      	ldr	r3, [pc, #136]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	4a21      	ldr	r2, [pc, #132]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800673c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006740:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006742:	4b1f      	ldr	r3, [pc, #124]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006744:	2202      	movs	r2, #2
 8006746:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674e:	d107      	bne.n	8006760 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4919      	ldr	r1, [pc, #100]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800675a:	4313      	orrs	r3, r2
 800675c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800675e:	e006      	b.n	800676e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006760:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006766:	4a16      	ldr	r2, [pc, #88]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800676e:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	f043 0202 	orr.w	r2, r3, #2
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006782:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	4a0e      	ldr	r2, [pc, #56]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006788:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800678c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006794:	4a0b      	ldr	r2, [pc, #44]	@ (80067c4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800679a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679e:	4b08      	ldr	r3, [pc, #32]	@ (80067c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067a0:	22ff      	movs	r2, #255	@ 0xff
 80067a2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}
 80067be:	bf00      	nop
 80067c0:	40002800 	.word	0x40002800
 80067c4:	58000800 	.word	0x58000800

080067c8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_RTC_DeactivateAlarm+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e048      	b.n	8006872 <HAL_RTC_DeactivateAlarm+0xaa>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f0:	4b22      	ldr	r3, [pc, #136]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 80067f2:	22ca      	movs	r2, #202	@ 0xca
 80067f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80067f6:	4b21      	ldr	r3, [pc, #132]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 80067f8:	2253      	movs	r2, #83	@ 0x53
 80067fa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006802:	d115      	bne.n	8006830 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006804:	4b1d      	ldr	r3, [pc, #116]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 800680a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800680e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006810:	4b1a      	ldr	r3, [pc, #104]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006814:	4a19      	ldr	r2, [pc, #100]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006816:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800681a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	f023 0201 	bic.w	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006828:	4b14      	ldr	r3, [pc, #80]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 800682a:	2201      	movs	r2, #1
 800682c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800682e:	e014      	b.n	800685a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006830:	4b12      	ldr	r3, [pc, #72]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4a11      	ldr	r2, [pc, #68]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006836:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800683a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800683c:	4b0f      	ldr	r3, [pc, #60]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 800683e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006840:	4a0e      	ldr	r2, [pc, #56]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006846:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	f023 0202 	bic.w	r2, r3, #2
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006854:	4b09      	ldr	r3, [pc, #36]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006856:	2202      	movs	r2, #2
 8006858:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800685a:	4b08      	ldr	r3, [pc, #32]	@ (800687c <HAL_RTC_DeactivateAlarm+0xb4>)
 800685c:	22ff      	movs	r2, #255	@ 0xff
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	40002800 	.word	0x40002800

08006880 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006888:	4b11      	ldr	r3, [pc, #68]	@ (80068d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 800688a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	4013      	ands	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fb fbae 	bl	8002006 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80068b6:	2202      	movs	r2, #2
 80068b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f94a 	bl	8006b54 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40002800 	.word	0x40002800

080068d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068dc:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <HAL_RTC_WaitForSynchro+0x48>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a0e      	ldr	r2, [pc, #56]	@ (800691c <HAL_RTC_WaitForSynchro+0x48>)
 80068e2:	f023 0320 	bic.w	r3, r3, #32
 80068e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068e8:	f7fb f962 	bl	8001bb0 <HAL_GetTick>
 80068ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068ee:	e009      	b.n	8006904 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f0:	f7fb f95e 	bl	8001bb0 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068fe:	d901      	bls.n	8006904 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e006      	b.n	8006912 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <HAL_RTC_WaitForSynchro+0x48>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0ef      	beq.n	80068f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40002800 	.word	0x40002800

08006920 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800692c:	4b15      	ldr	r3, [pc, #84]	@ (8006984 <RTC_EnterInitMode+0x64>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d120      	bne.n	800697a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006938:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <RTC_EnterInitMode+0x64>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4a11      	ldr	r2, [pc, #68]	@ (8006984 <RTC_EnterInitMode+0x64>)
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006944:	f7fb f934 	bl	8001bb0 <HAL_GetTick>
 8006948:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800694a:	e00d      	b.n	8006968 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800694c:	f7fb f930 	bl	8001bb0 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800695a:	d905      	bls.n	8006968 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2203      	movs	r2, #3
 8006964:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006968:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <RTC_EnterInitMode+0x64>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <RTC_EnterInitMode+0x5a>
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d1e8      	bne.n	800694c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40002800 	.word	0x40002800

08006988 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006994:	4b1a      	ldr	r3, [pc, #104]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a19      	ldr	r2, [pc, #100]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 800699a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069a0:	4b17      	ldr	r3, [pc, #92]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10c      	bne.n	80069c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff91 	bl	80068d4 <HAL_RTC_WaitForSynchro>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01e      	beq.n	80069f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2203      	movs	r2, #3
 80069bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e017      	b.n	80069f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 80069cc:	f023 0320 	bic.w	r3, r3, #32
 80069d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff7e 	bl	80068d4 <HAL_RTC_WaitForSynchro>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ea:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	4a04      	ldr	r2, [pc, #16]	@ (8006a00 <RTC_ExitInitMode+0x78>)
 80069f0:	f043 0320 	orr.w	r3, r3, #32
 80069f4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40002800 	.word	0x40002800

08006a04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006a16:	e005      	b.n	8006a24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	3b0a      	subs	r3, #10
 8006a22:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	d8f6      	bhi.n	8006a18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	b2db      	uxtb	r3, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e01f      	b.n	8006a9a <HAL_RTCEx_EnableBypassShadow+0x56>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a6c:	22ca      	movs	r2, #202	@ 0xca
 8006a6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a70:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a72:	2253      	movs	r2, #83	@ 0x53
 8006a74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a76:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a7c:	f043 0320 	orr.w	r3, r3, #32
 8006a80:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a82:	4b08      	ldr	r3, [pc, #32]	@ (8006aa4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a84:	22ff      	movs	r2, #255	@ 0xff
 8006a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr
 8006aa4:	40002800 	.word	0x40002800

08006aa8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_RTCEx_SetSSRU_IT+0x16>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e027      	b.n	8006b0e <HAL_RTCEx_SetSSRU_IT+0x66>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ad0:	22ca      	movs	r2, #202	@ 0xca
 8006ad2:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ad4:	4b10      	ldr	r3, [pc, #64]	@ (8006b18 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ad6:	2253      	movs	r2, #83	@ 0x53
 8006ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006ada:	4b0f      	ldr	r3, [pc, #60]	@ (8006b18 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	@ (8006b18 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae4:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aec:	4a0b      	ldr	r2, [pc, #44]	@ (8006b1c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006af2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af6:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006af8:	22ff      	movs	r2, #255	@ 0xff
 8006afa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	40002800 	.word	0x40002800
 8006b1c:	58000800 	.word	0x58000800

08006b20 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006b28:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006b34:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b36:	2240      	movs	r2, #64	@ 0x40
 8006b38:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fb fa6d 	bl	800201a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40002800 	.word	0x40002800

08006b54 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006b74:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006b76:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	4000b100 	.word	0x4000b100

08006b98 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006ba2:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <HAL_RTCEx_BKUPRead+0x28>)
 8006ba4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	4000b100 	.word	0x4000b100

08006bc4 <LL_PWR_SetRadioBusyTrigger>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006bcc:	4b06      	ldr	r3, [pc, #24]	@ (8006be8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bd4:	4904      	ldr	r1, [pc, #16]	@ (8006be8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	58000400 	.word	0x58000400

08006bec <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf6:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	58000400 	.word	0x58000400

08006c0c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c16:	4a04      	ldr	r2, [pc, #16]	@ (8006c28 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006c18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c20:	bf00      	nop
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr
 8006c28:	58000400 	.word	0x58000400

08006c2c <LL_PWR_ClearFlag_RFBUSY>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006c30:	4b03      	ldr	r3, [pc, #12]	@ (8006c40 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006c32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c36:	619a      	str	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	58000400 	.word	0x58000400

08006c44 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d101      	bne.n	8006c58 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	58000400 	.word	0x58000400

08006c68 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d101      	bne.n	8006c7c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	58000400 	.word	0x58000400

08006c8c <LL_RCC_RF_DisableReset>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_IsRFUnderReset>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cc0:	d101      	bne.n	8006cc6 <LL_RCC_IsRFUnderReset+0x1a>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <LL_RCC_IsRFUnderReset+0x1c>
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <LL_EXTI_EnableIT_32_63+0x24>)
 8006cda:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006cde:	4905      	ldr	r1, [pc, #20]	@ (8006cf4 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	58000800 	.word	0x58000800

08006cf8 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
    return status;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	e04b      	b.n	8006da6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	799b      	ldrb	r3, [r3, #6]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa fd9c 	bl	8001860 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006d2e:	f7ff ffad 	bl	8006c8c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d32:	4b1f      	ldr	r3, [pc, #124]	@ (8006db0 <HAL_SUBGHZ_Init+0xb8>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	0cdb      	lsrs	r3, r3, #19
 8006d40:	2264      	movs	r2, #100	@ 0x64
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e007      	b.n	8006d6a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006d60:	f7ff ffa4 	bl	8006cac <LL_RCC_IsRFUnderReset>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1ee      	bne.n	8006d48 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d6a:	f7ff ff3f 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006d6e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006d72:	f7ff ffad 	bl	8006cd0 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006d76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006d7a:	f7ff ff23 	bl	8006bc4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006d7e:	f7ff ff55 	bl	8006c2c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 faa5 	bl	80072dc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	719a      	strb	r2, [r3, #6]

  return status;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000000 	.word	0x20000000

08006db4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	817b      	strh	r3, [r7, #10]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	799b      	ldrb	r3, [r3, #6]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d14a      	bne.n	8006e68 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	795b      	ldrb	r3, [r3, #5]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e045      	b.n	8006e6a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2202      	movs	r2, #2
 8006de8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fb44 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006df0:	f7ff ff0c 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006df4:	210d      	movs	r1, #13
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fa90 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006dfc:	897b      	ldrh	r3, [r7, #10]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa88 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006e0c:	897b      	ldrh	r3, [r7, #10]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	4619      	mov	r1, r3
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fa82 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	82bb      	strh	r3, [r7, #20]
 8006e1c:	e00a      	b.n	8006e34 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e1e:	8abb      	ldrh	r3, [r7, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa77 	bl	800731c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e2e:	8abb      	ldrh	r3, [r7, #20]
 8006e30:	3301      	adds	r3, #1
 8006e32:	82bb      	strh	r3, [r7, #20]
 8006e34:	8aba      	ldrh	r2, [r7, #20]
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d3f0      	bcc.n	8006e1e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e3c:	f7ff fed6 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fb3d 	bl	80074c0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
 8006e52:	e001      	b.n	8006e58 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	715a      	strb	r2, [r3, #5]

    return status;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	e000      	b.n	8006e6a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
  }
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b088      	sub	sp, #32
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	460b      	mov	r3, r1
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	4613      	mov	r3, r2
 8006e84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	799b      	ldrb	r3, [r3, #6]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d14a      	bne.n	8006f2a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	795b      	ldrb	r3, [r3, #5]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e045      	b.n	8006f2c <HAL_SUBGHZ_ReadRegisters+0xba>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fae6 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006eac:	f7ff feae 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006eb0:	211d      	movs	r1, #29
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fa32 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006eb8:	897b      	ldrh	r3, [r7, #10]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 fa2a 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ec8:	897b      	ldrh	r3, [r7, #10]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	4619      	mov	r1, r3
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fa24 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fa20 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	82fb      	strh	r3, [r7, #22]
 8006ee0:	e009      	b.n	8006ef6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fa6f 	bl	80073c8 <SUBGHZSPI_Receive>
      pData++;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	3301      	adds	r3, #1
 8006eee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006ef0:	8afb      	ldrh	r3, [r7, #22]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	82fb      	strh	r3, [r7, #22]
 8006ef6:	8afa      	ldrh	r2, [r7, #22]
 8006ef8:	893b      	ldrh	r3, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d3f1      	bcc.n	8006ee2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006efe:	f7ff fe75 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fadc 	bl	80074c0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e001      	b.n	8006f1a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	715a      	strb	r2, [r3, #5]

    return status;
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	e000      	b.n	8006f2c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3720      	adds	r7, #32
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	460b      	mov	r3, r1
 8006f42:	72fb      	strb	r3, [r7, #11]
 8006f44:	4613      	mov	r3, r2
 8006f46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	799b      	ldrb	r3, [r3, #6]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d14a      	bne.n	8006fe8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	795b      	ldrb	r3, [r3, #5]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e045      	b.n	8006fea <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa87 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b84      	cmp	r3, #132	@ 0x84
 8006f6e:	d002      	beq.n	8006f76 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b94      	cmp	r3, #148	@ 0x94
 8006f74:	d103      	bne.n	8006f7e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	711a      	strb	r2, [r3, #4]
 8006f7c:	e002      	b.n	8006f84 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f84:	f7ff fe42 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f9c5 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	82bb      	strh	r3, [r7, #20]
 8006f96:	e00a      	b.n	8006fae <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f98:	8abb      	ldrh	r3, [r7, #20]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f9ba 	bl	800731c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fa8:	8abb      	ldrh	r3, [r7, #20]
 8006faa:	3301      	adds	r3, #1
 8006fac:	82bb      	strh	r3, [r7, #20]
 8006fae:	8aba      	ldrh	r2, [r7, #20]
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3f0      	bcc.n	8006f98 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006fb6:	f7ff fe19 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	2b84      	cmp	r3, #132	@ 0x84
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fa7d 	bl	80074c0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
 8006fd2:	e001      	b.n	8006fd8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	715a      	strb	r2, [r3, #5]

    return status;
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	e000      	b.n	8006fea <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b088      	sub	sp, #32
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	460b      	mov	r3, r1
 8007000:	72fb      	strb	r3, [r7, #11]
 8007002:	4613      	mov	r3, r2
 8007004:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	799b      	ldrb	r3, [r3, #6]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d13d      	bne.n	8007090 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	795b      	ldrb	r3, [r3, #5]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800701c:	2302      	movs	r3, #2
 800701e:	e038      	b.n	8007092 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fa26 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800702c:	f7ff fdee 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	4619      	mov	r1, r3
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f971 	bl	800731c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f96d 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007042:	2300      	movs	r3, #0
 8007044:	82fb      	strh	r3, [r7, #22]
 8007046:	e009      	b.n	800705c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f9bc 	bl	80073c8 <SUBGHZSPI_Receive>
      pData++;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	3301      	adds	r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	3301      	adds	r3, #1
 800705a:	82fb      	strh	r3, [r7, #22]
 800705c:	8afa      	ldrh	r2, [r7, #22]
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d3f1      	bcc.n	8007048 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007064:	f7ff fdc2 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fa29 	bl	80074c0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e001      	b.n	8007080 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	715a      	strb	r2, [r3, #5]

    return status;
 800708c:	7ffb      	ldrb	r3, [r7, #31]
 800708e:	e000      	b.n	8007092 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	461a      	mov	r2, r3
 80070a6:	460b      	mov	r3, r1
 80070a8:	72fb      	strb	r3, [r7, #11]
 80070aa:	4613      	mov	r3, r2
 80070ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	799b      	ldrb	r3, [r3, #6]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d13e      	bne.n	8007136 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	795b      	ldrb	r3, [r3, #5]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e039      	b.n	8007138 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f9d4 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070d0:	f7ff fd9c 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80070d4:	210e      	movs	r1, #14
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f920 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	4619      	mov	r1, r3
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f91b 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070e6:	2300      	movs	r3, #0
 80070e8:	82bb      	strh	r3, [r7, #20]
 80070ea:	e00a      	b.n	8007102 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070ec:	8abb      	ldrh	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f910 	bl	800731c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070fc:	8abb      	ldrh	r3, [r7, #20]
 80070fe:	3301      	adds	r3, #1
 8007100:	82bb      	strh	r3, [r7, #20]
 8007102:	8aba      	ldrh	r2, [r7, #20]
 8007104:	893b      	ldrh	r3, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	d3f0      	bcc.n	80070ec <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800710a:	f7ff fd6f 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f9d6 	bl	80074c0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	e001      	b.n	8007126 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	715a      	strb	r2, [r3, #5]

    return status;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	e000      	b.n	8007138 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007136:	2302      	movs	r3, #2
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	461a      	mov	r2, r3
 800714c:	460b      	mov	r3, r1
 800714e:	72fb      	strb	r3, [r7, #11]
 8007150:	4613      	mov	r3, r2
 8007152:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	799b      	ldrb	r3, [r3, #6]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b01      	cmp	r3, #1
 8007160:	d141      	bne.n	80071e6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	795b      	ldrb	r3, [r3, #5]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800716a:	2302      	movs	r3, #2
 800716c:	e03c      	b.n	80071e8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f97f 	bl	8007478 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800717a:	f7ff fd47 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800717e:	211e      	movs	r1, #30
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f8cb 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f8c6 	bl	800731c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007190:	2100      	movs	r1, #0
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 f8c2 	bl	800731c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007198:	2300      	movs	r3, #0
 800719a:	82fb      	strh	r3, [r7, #22]
 800719c:	e009      	b.n	80071b2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800719e:	69b9      	ldr	r1, [r7, #24]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f911 	bl	80073c8 <SUBGHZSPI_Receive>
      pData++;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80071ac:	8afb      	ldrh	r3, [r7, #22]
 80071ae:	3301      	adds	r3, #1
 80071b0:	82fb      	strh	r3, [r7, #22]
 80071b2:	8afa      	ldrh	r2, [r7, #22]
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d3f1      	bcc.n	800719e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071ba:	f7ff fd17 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f97e 	bl	80074c0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e001      	b.n	80071d6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]

    return status;
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
 80071e4:	e000      	b.n	80071e8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
  }
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80071f8:	2300      	movs	r3, #0
 80071fa:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80071fc:	f107 020c 	add.w	r2, r7, #12
 8007200:	2302      	movs	r3, #2
 8007202:	2112      	movs	r1, #18
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fef4 	bl	8006ff2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800720a:	7b3b      	ldrb	r3, [r7, #12]
 800720c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800720e:	89fb      	ldrh	r3, [r7, #14]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	b21a      	sxth	r2, r3
 8007214:	7b7b      	ldrb	r3, [r7, #13]
 8007216:	b21b      	sxth	r3, r3
 8007218:	4313      	orrs	r3, r2
 800721a:	b21b      	sxth	r3, r3
 800721c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f012 fb49 	bl	80198c0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800722e:	89fb      	ldrh	r3, [r7, #14]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f012 fb4f 	bl	80198dc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800723e:	89fb      	ldrh	r3, [r7, #14]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f012 fb9f 	bl	801998c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800724e:	89fb      	ldrh	r3, [r7, #14]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f012 fba5 	bl	80199a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800725e:	89fb      	ldrh	r3, [r7, #14]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f012 fbab 	bl	80199c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800726e:	89fb      	ldrh	r3, [r7, #14]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f012 fb79 	bl	8019970 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800727e:	89fb      	ldrh	r3, [r7, #14]
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f012 fb35 	bl	80198f8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80072a2:	2101      	movs	r1, #1
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f012 fb35 	bl	8019914 <HAL_SUBGHZ_CADStatusCallback>
 80072aa:	e003      	b.n	80072b4 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f012 fb30 	bl	8019914 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80072b4:	89fb      	ldrh	r3, [r7, #14]
 80072b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f012 fb46 	bl	8019950 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80072c4:	f107 020c 	add.w	r2, r7, #12
 80072c8:	2302      	movs	r3, #2
 80072ca:	2102      	movs	r1, #2
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff fe31 	bl	8006f34 <HAL_SUBGHZ_ExecSetCmd>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 80072ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ee:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80072f0:	4a09      	ldr	r2, [pc, #36]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80072f8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80072fa:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 80072fc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007300:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007302:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a04      	ldr	r2, [pc, #16]	@ (8007318 <SUBGHZSPI_Init+0x3c>)
 8007308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730c:	6013      	str	r3, [r2, #0]
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr
 8007318:	58010000 	.word	0x58010000

0800731c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800732c:	4b23      	ldr	r3, [pc, #140]	@ (80073bc <SUBGHZSPI_Transmit+0xa0>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	0cdb      	lsrs	r3, r3, #19
 800733a:	2264      	movs	r2, #100	@ 0x64
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	609a      	str	r2, [r3, #8]
      break;
 8007352:	e008      	b.n	8007366 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3b01      	subs	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800735a:	4b19      	ldr	r3, [pc, #100]	@ (80073c0 <SUBGHZSPI_Transmit+0xa4>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b02      	cmp	r3, #2
 8007364:	d1ed      	bne.n	8007342 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007366:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <SUBGHZSPI_Transmit+0xa8>)
 8007368:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007370:	4b12      	ldr	r3, [pc, #72]	@ (80073bc <SUBGHZSPI_Transmit+0xa0>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	0cdb      	lsrs	r3, r3, #19
 800737e:	2264      	movs	r2, #100	@ 0x64
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	609a      	str	r2, [r3, #8]
      break;
 8007396:	e008      	b.n	80073aa <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b01      	subs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800739e:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <SUBGHZSPI_Transmit+0xa4>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d1ed      	bne.n	8007386 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80073aa:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <SUBGHZSPI_Transmit+0xa4>)
 80073ac:	68db      	ldr	r3, [r3, #12]

  return status;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000000 	.word	0x20000000
 80073c0:	58010000 	.word	0x58010000
 80073c4:	5801000c 	.word	0x5801000c

080073c8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073d6:	4b25      	ldr	r3, [pc, #148]	@ (800746c <SUBGHZSPI_Receive+0xa4>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	0cdb      	lsrs	r3, r3, #19
 80073e4:	2264      	movs	r2, #100	@ 0x64
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	609a      	str	r2, [r3, #8]
      break;
 80073fc:	e008      	b.n	8007410 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b01      	subs	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007404:	4b1a      	ldr	r3, [pc, #104]	@ (8007470 <SUBGHZSPI_Receive+0xa8>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b02      	cmp	r3, #2
 800740e:	d1ed      	bne.n	80073ec <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007410:	4b18      	ldr	r3, [pc, #96]	@ (8007474 <SUBGHZSPI_Receive+0xac>)
 8007412:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	22ff      	movs	r2, #255	@ 0xff
 8007418:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800741a:	4b14      	ldr	r3, [pc, #80]	@ (800746c <SUBGHZSPI_Receive+0xa4>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	0cdb      	lsrs	r3, r3, #19
 8007428:	2264      	movs	r2, #100	@ 0x64
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	609a      	str	r2, [r3, #8]
      break;
 8007440:	e008      	b.n	8007454 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b01      	subs	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007448:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <SUBGHZSPI_Receive+0xa8>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d1ed      	bne.n	8007430 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007454:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <SUBGHZSPI_Receive+0xa8>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	701a      	strb	r2, [r3, #0]

  return status;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20000000 	.word	0x20000000
 8007470:	58010000 	.word	0x58010000
 8007474:	5801000c 	.word	0x5801000c

08007478 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	791b      	ldrb	r3, [r3, #4]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d111      	bne.n	80074ac <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007488:	4b0c      	ldr	r3, [pc, #48]	@ (80074bc <SUBGHZ_CheckDeviceReady+0x44>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	4413      	add	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007498:	f7ff fbb8 	bl	8006c0c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3b01      	subs	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f9      	bne.n	800749c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074a8:	f7ff fba0 	bl	8006bec <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f807 	bl	80074c0 <SUBGHZ_WaitOnBusy>
 80074b2:	4603      	mov	r3, r0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000000 	.word	0x20000000

080074c0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80074cc:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <SUBGHZ_WaitOnBusy+0x58>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4413      	add	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	0d1b      	lsrs	r3, r3, #20
 80074da:	2264      	movs	r2, #100	@ 0x64
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80074e2:	f7ff fbc1 	bl	8006c68 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80074e6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	609a      	str	r2, [r3, #8]
      break;
 80074f8:	e009      	b.n	800750e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007500:	f7ff fba0 	bl	8006c44 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4013      	ands	r3, r2
 800750a:	2b01      	cmp	r3, #1
 800750c:	d0e9      	beq.n	80074e2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000000 	.word	0x20000000

0800751c <LL_RCC_GetUSARTClockSource>:
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007528:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	401a      	ands	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	4313      	orrs	r3, r2
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <LL_RCC_GetLPUARTClockSource>:
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800754c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4013      	ands	r3, r2
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e042      	b.n	80075f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fa feae 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2224      	movs	r2, #36	@ 0x24
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0201 	bic.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc4b 	bl	8007e3c <UART_SetConfig>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e022      	b.n	80075f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 feb3 	bl	8008324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0201 	orr.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 ff39 	bl	8008466 <UART_CheckIdleState>
 80075f4:	4603      	mov	r3, r0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	2b20      	cmp	r3, #32
 8007616:	d142      	bne.n	800769e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Receive_IT+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e03b      	b.n	80076a0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_UART_Receive_IT+0x36>
 8007632:	2302      	movs	r3, #2
 8007634:	e034      	b.n	80076a0 <HAL_UART_Receive_IT+0xa0>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <HAL_UART_Receive_IT+0xa8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01f      	beq.n	800768e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d018      	beq.n	800768e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	613b      	str	r3, [r7, #16]
   return(result);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	69f9      	ldr	r1, [r7, #28]
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	61bb      	str	r3, [r7, #24]
   return(result);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	461a      	mov	r2, r3
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fff9 	bl	800868c <UART_Start_Receive_IT>
 800769a:	4603      	mov	r3, r0
 800769c:	e000      	b.n	80076a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800769e:	2302      	movs	r3, #2
  }
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3728      	adds	r7, #40	@ 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40008000 	.word	0x40008000

080076ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d17a      	bne.n	80077ba <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_UART_Transmit_DMA+0x24>
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e073      	b.n	80077bc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Transmit_DMA+0x36>
 80076de:	2302      	movs	r3, #2
 80076e0:	e06c      	b.n	80077bc <HAL_UART_Transmit_DMA+0x110>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	88fa      	ldrh	r2, [r7, #6]
 80076f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2221      	movs	r2, #33	@ 0x21
 800770c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02c      	beq.n	8007772 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800771c:	4a29      	ldr	r2, [pc, #164]	@ (80077c4 <HAL_UART_Transmit_DMA+0x118>)
 800771e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007724:	4a28      	ldr	r2, [pc, #160]	@ (80077c8 <HAL_UART_Transmit_DMA+0x11c>)
 8007726:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772c:	4a27      	ldr	r2, [pc, #156]	@ (80077cc <HAL_UART_Transmit_DMA+0x120>)
 800772e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007734:	2200      	movs	r2, #0
 8007736:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007740:	4619      	mov	r1, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3328      	adds	r3, #40	@ 0x28
 8007748:	461a      	mov	r2, r3
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	f7fc fba6 	bl	8003e9c <HAL_DMA_Start_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00d      	beq.n	8007772 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2210      	movs	r2, #16
 800775a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e024      	b.n	80077bc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2240      	movs	r2, #64	@ 0x40
 8007778:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	613b      	str	r3, [r7, #16]
   return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a2:	623a      	str	r2, [r7, #32]
 80077a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	69f9      	ldr	r1, [r7, #28]
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3728      	adds	r7, #40	@ 0x28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	08008a27 	.word	0x08008a27
 80077c8:	08008ac1 	.word	0x08008ac1
 80077cc:	08008add 	.word	0x08008add

080077d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b0ba      	sub	sp, #232	@ 0xe8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077fe:	4013      	ands	r3, r2
 8007800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d11b      	bne.n	8007844 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800780c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d015      	beq.n	8007844 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 82d6 	beq.w	8007de6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
      }
      return;
 8007842:	e2d0      	b.n	8007de6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 811f 	beq.w	8007a8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800784e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007852:	4b8b      	ldr	r3, [pc, #556]	@ (8007a80 <HAL_UART_IRQHandler+0x2b0>)
 8007854:	4013      	ands	r3, r2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800785a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800785e:	4b89      	ldr	r3, [pc, #548]	@ (8007a84 <HAL_UART_IRQHandler+0x2b4>)
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8112 	beq.w	8007a8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d011      	beq.n	8007898 <HAL_UART_IRQHandler+0xc8>
 8007874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2201      	movs	r2, #1
 8007886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800788e:	f043 0201 	orr.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d011      	beq.n	80078c8 <HAL_UART_IRQHandler+0xf8>
 80078a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2202      	movs	r2, #2
 80078b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078be:	f043 0204 	orr.w	r2, r3, #4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d011      	beq.n	80078f8 <HAL_UART_IRQHandler+0x128>
 80078d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2204      	movs	r2, #4
 80078e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007910:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007914:	4b5a      	ldr	r3, [pc, #360]	@ (8007a80 <HAL_UART_IRQHandler+0x2b0>)
 8007916:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2208      	movs	r2, #8
 8007922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800792a:	f043 0208 	orr.w	r2, r3, #8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800793c:	2b00      	cmp	r3, #0
 800793e:	d012      	beq.n	8007966 <HAL_UART_IRQHandler+0x196>
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00c      	beq.n	8007966 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800795c:	f043 0220 	orr.w	r2, r3, #32
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 823c 	beq.w	8007dea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d013      	beq.n	80079a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800798a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800798e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	d005      	beq.n	80079ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d04f      	beq.n	8007a6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 ffc6 	bl	800895c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d141      	bne.n	8007a62 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1d9      	bne.n	80079de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d013      	beq.n	8007a5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a36:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <HAL_UART_IRQHandler+0x2b8>)
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fc fb08 	bl	8004054 <HAL_DMA_Abort_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d017      	beq.n	8007a7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00f      	b.n	8007a7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9d9 	bl	8007e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e00b      	b.n	8007a7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9d5 	bl	8007e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a68:	e007      	b.n	8007a7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9d1 	bl	8007e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007a78:	e1b7      	b.n	8007dea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7a:	bf00      	nop
    return;
 8007a7c:	e1b5      	b.n	8007dea <HAL_UART_IRQHandler+0x61a>
 8007a7e:	bf00      	nop
 8007a80:	10000001 	.word	0x10000001
 8007a84:	04000120 	.word	0x04000120
 8007a88:	08008b5d 	.word	0x08008b5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	f040 814a 	bne.w	8007d2a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8143 	beq.w	8007d2a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 813c 	beq.w	8007d2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	f040 80b5 	bne.w	8007c34 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8187 	beq.w	8007dee <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f080 817f 	bcs.w	8007dee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 8086 	bne.w	8007c18 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1da      	bne.n	8007b0c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b68:	f023 0301 	bic.w	r3, r3, #1
 8007b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3308      	adds	r3, #8
 8007b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e1      	bne.n	8007b56 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e3      	bne.n	8007b92 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be8:	f023 0310 	bic.w	r3, r3, #16
 8007bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e4      	bne.n	8007bd8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc f9c0 	bl	8003f98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8f9 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c32:	e0dc      	b.n	8007dee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80ce 	beq.w	8007df2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80c9 	beq.w	8007df2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e4      	bne.n	8007c60 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e1      	bne.n	8007c96 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0310 	bic.w	r3, r3, #16
 8007cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	69b9      	ldr	r1, [r7, #24]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	617b      	str	r3, [r7, #20]
   return(result);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e4      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f87e 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d28:	e063      	b.n	8007df2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <HAL_UART_IRQHandler+0x584>
 8007d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 fba3 	bl	8009498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d52:	e051      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d014      	beq.n	8007d8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d03a      	beq.n	8007df6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
    }
    return;
 8007d88:	e035      	b.n	8007df6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_UART_IRQHandler+0x5da>
 8007d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fef0 	bl	8008b88 <UART_EndTransmit_IT>
    return;
 8007da8:	e026      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_UART_IRQHandler+0x5fa>
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fb7a 	bl	80094bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc8:	e016      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <HAL_UART_IRQHandler+0x628>
 8007dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da0c      	bge.n	8007df8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fb63 	bl	80094aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007de4:	e008      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
      return;
 8007de6:	bf00      	nop
 8007de8:	e006      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
    return;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
      return;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
      return;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <HAL_UART_IRQHandler+0x628>
    return;
 8007df6:	bf00      	nop
  }
}
 8007df8:	37e8      	adds	r7, #232	@ 0xe8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop

08007e00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
	...

08007e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e40:	b08c      	sub	sp, #48	@ 0x30
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4b94      	ldr	r3, [pc, #592]	@ (80080bc <UART_SetConfig+0x280>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a89      	ldr	r2, [pc, #548]	@ (80080c0 <UART_SetConfig+0x284>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007eb2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	f023 010f 	bic.w	r1, r3, #15
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a7a      	ldr	r2, [pc, #488]	@ (80080c4 <UART_SetConfig+0x288>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d127      	bne.n	8007f30 <UART_SetConfig+0xf4>
 8007ee0:	2003      	movs	r0, #3
 8007ee2:	f7ff fb1b 	bl	800751c <LL_RCC_GetUSARTClockSource>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d81b      	bhi.n	8007f28 <UART_SetConfig+0xec>
 8007ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <UART_SetConfig+0xbc>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f11 	.word	0x08007f11
 8007f04:	08007f21 	.word	0x08007f21
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0e:	e080      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f10:	2302      	movs	r3, #2
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e07c      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e078      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f26:	e074      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2e:	e070      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a64      	ldr	r2, [pc, #400]	@ (80080c8 <UART_SetConfig+0x28c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d138      	bne.n	8007fac <UART_SetConfig+0x170>
 8007f3a:	200c      	movs	r0, #12
 8007f3c:	f7ff faee 	bl	800751c <LL_RCC_GetUSARTClockSource>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007f46:	2b0c      	cmp	r3, #12
 8007f48:	d82c      	bhi.n	8007fa4 <UART_SetConfig+0x168>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <UART_SetConfig+0x114>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f85 	.word	0x08007f85
 8007f54:	08007fa5 	.word	0x08007fa5
 8007f58:	08007fa5 	.word	0x08007fa5
 8007f5c:	08007fa5 	.word	0x08007fa5
 8007f60:	08007f95 	.word	0x08007f95
 8007f64:	08007fa5 	.word	0x08007fa5
 8007f68:	08007fa5 	.word	0x08007fa5
 8007f6c:	08007fa5 	.word	0x08007fa5
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	08007fa5 	.word	0x08007fa5
 8007f78:	08007fa5 	.word	0x08007fa5
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e042      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e03e      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f94:	2304      	movs	r3, #4
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e03a      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa2:	e036      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007faa:	e032      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a43      	ldr	r2, [pc, #268]	@ (80080c0 <UART_SetConfig+0x284>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d12a      	bne.n	800800c <UART_SetConfig+0x1d0>
 8007fb6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007fba:	f7ff fac1 	bl	8007540 <LL_RCC_GetLPUARTClockSource>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fc4:	d01a      	beq.n	8007ffc <UART_SetConfig+0x1c0>
 8007fc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fca:	d81b      	bhi.n	8008004 <UART_SetConfig+0x1c8>
 8007fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fd0:	d00c      	beq.n	8007fec <UART_SetConfig+0x1b0>
 8007fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fd6:	d815      	bhi.n	8008004 <UART_SetConfig+0x1c8>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <UART_SetConfig+0x1a8>
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe0:	d008      	beq.n	8007ff4 <UART_SetConfig+0x1b8>
 8007fe2:	e00f      	b.n	8008004 <UART_SetConfig+0x1c8>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fea:	e012      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007fec:	2302      	movs	r3, #2
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff2:	e00e      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e00a      	b.n	8008012 <UART_SetConfig+0x1d6>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e006      	b.n	8008012 <UART_SetConfig+0x1d6>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e002      	b.n	8008012 <UART_SetConfig+0x1d6>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2a      	ldr	r2, [pc, #168]	@ (80080c0 <UART_SetConfig+0x284>)
 8008018:	4293      	cmp	r3, r2
 800801a:	f040 80a4 	bne.w	8008166 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800801e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008022:	2b08      	cmp	r3, #8
 8008024:	d823      	bhi.n	800806e <UART_SetConfig+0x232>
 8008026:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <UART_SetConfig+0x1f0>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008051 	.word	0x08008051
 8008030:	0800806f 	.word	0x0800806f
 8008034:	08008059 	.word	0x08008059
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800805f 	.word	0x0800805f
 8008040:	0800806f 	.word	0x0800806f
 8008044:	0800806f 	.word	0x0800806f
 8008048:	0800806f 	.word	0x0800806f
 800804c:	08008067 	.word	0x08008067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fd ff50 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 8008054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008056:	e010      	b.n	800807a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008058:	4b1c      	ldr	r3, [pc, #112]	@ (80080cc <UART_SetConfig+0x290>)
 800805a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800805c:	e00d      	b.n	800807a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805e:	f7fd fe95 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8008062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8137 	beq.w	80082f0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	4a12      	ldr	r2, [pc, #72]	@ (80080d0 <UART_SetConfig+0x294>)
 8008088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808c:	461a      	mov	r2, r3
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	fbb3 f3f2 	udiv	r3, r3, r2
 8008094:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4413      	add	r3, r2
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d305      	bcc.n	80080b2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d910      	bls.n	80080d4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080b8:	e11a      	b.n	80082f0 <UART_SetConfig+0x4b4>
 80080ba:	bf00      	nop
 80080bc:	cfff69f3 	.word	0xcfff69f3
 80080c0:	40008000 	.word	0x40008000
 80080c4:	40013800 	.word	0x40013800
 80080c8:	40004400 	.word	0x40004400
 80080cc:	00f42400 	.word	0x00f42400
 80080d0:	0801bea0 	.word	0x0801bea0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	2200      	movs	r2, #0
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	60fa      	str	r2, [r7, #12]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	4a8e      	ldr	r2, [pc, #568]	@ (800831c <UART_SetConfig+0x4e0>)
 80080e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2200      	movs	r2, #0
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080f6:	f7f8 fcbb 	bl	8000a70 <__aeabi_uldivmod>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4610      	mov	r0, r2
 8008100:	4619      	mov	r1, r3
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	020b      	lsls	r3, r1, #8
 800810c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008110:	0202      	lsls	r2, r0, #8
 8008112:	6979      	ldr	r1, [r7, #20]
 8008114:	6849      	ldr	r1, [r1, #4]
 8008116:	0849      	lsrs	r1, r1, #1
 8008118:	2000      	movs	r0, #0
 800811a:	460c      	mov	r4, r1
 800811c:	4605      	mov	r5, r0
 800811e:	eb12 0804 	adds.w	r8, r2, r4
 8008122:	eb43 0905 	adc.w	r9, r3, r5
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	469a      	mov	sl, r3
 800812e:	4693      	mov	fp, r2
 8008130:	4652      	mov	r2, sl
 8008132:	465b      	mov	r3, fp
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 fc9a 	bl	8000a70 <__aeabi_uldivmod>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4613      	mov	r3, r2
 8008142:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800814a:	d308      	bcc.n	800815e <UART_SetConfig+0x322>
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008152:	d204      	bcs.n	800815e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6a3a      	ldr	r2, [r7, #32]
 800815a:	60da      	str	r2, [r3, #12]
 800815c:	e0c8      	b.n	80082f0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008164:	e0c4      	b.n	80082f0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816e:	d168      	bne.n	8008242 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008170:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008174:	2b08      	cmp	r3, #8
 8008176:	d828      	bhi.n	80081ca <UART_SetConfig+0x38e>
 8008178:	a201      	add	r2, pc, #4	@ (adr r2, 8008180 <UART_SetConfig+0x344>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081a5 	.word	0x080081a5
 8008184:	080081ad 	.word	0x080081ad
 8008188:	080081b5 	.word	0x080081b5
 800818c:	080081cb 	.word	0x080081cb
 8008190:	080081bb 	.word	0x080081bb
 8008194:	080081cb 	.word	0x080081cb
 8008198:	080081cb 	.word	0x080081cb
 800819c:	080081cb 	.word	0x080081cb
 80081a0:	080081c3 	.word	0x080081c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a4:	f7fd fea6 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 80081a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081aa:	e014      	b.n	80081d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ac:	f7fd feb4 	bl	8005f18 <HAL_RCC_GetPCLK2Freq>
 80081b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081b2:	e010      	b.n	80081d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008320 <UART_SetConfig+0x4e4>)
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081b8:	e00d      	b.n	80081d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ba:	f7fd fde7 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 80081be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081c0:	e009      	b.n	80081d6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081c8:	e005      	b.n	80081d6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8089 	beq.w	80082f0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	4a4e      	ldr	r2, [pc, #312]	@ (800831c <UART_SetConfig+0x4e0>)
 80081e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f0:	005a      	lsls	r2, r3, #1
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	441a      	add	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	2b0f      	cmp	r3, #15
 800820a:	d916      	bls.n	800823a <UART_SetConfig+0x3fe>
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008212:	d212      	bcs.n	800823a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f023 030f 	bic.w	r3, r3, #15
 800821c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	b29b      	uxth	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	b29a      	uxth	r2, r3
 800822a:	8bfb      	ldrh	r3, [r7, #30]
 800822c:	4313      	orrs	r3, r2
 800822e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	8bfa      	ldrh	r2, [r7, #30]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e05a      	b.n	80082f0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008240:	e056      	b.n	80082f0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008246:	2b08      	cmp	r3, #8
 8008248:	d827      	bhi.n	800829a <UART_SetConfig+0x45e>
 800824a:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <UART_SetConfig+0x414>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008275 	.word	0x08008275
 8008254:	0800827d 	.word	0x0800827d
 8008258:	08008285 	.word	0x08008285
 800825c:	0800829b 	.word	0x0800829b
 8008260:	0800828b 	.word	0x0800828b
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800829b 	.word	0x0800829b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008274:	f7fd fe3e 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 8008278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800827a:	e014      	b.n	80082a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827c:	f7fd fe4c 	bl	8005f18 <HAL_RCC_GetPCLK2Freq>
 8008280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008282:	e010      	b.n	80082a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b26      	ldr	r3, [pc, #152]	@ (8008320 <UART_SetConfig+0x4e4>)
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008288:	e00d      	b.n	80082a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fd fd7f 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 800828e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082a4:	bf00      	nop
    }

    if (pclk != 0U)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d021      	beq.n	80082f0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	4a1a      	ldr	r2, [pc, #104]	@ (800831c <UART_SetConfig+0x4e0>)
 80082b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	441a      	add	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	2b0f      	cmp	r3, #15
 80082d6:	d908      	bls.n	80082ea <UART_SetConfig+0x4ae>
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082de:	d204      	bcs.n	80082ea <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6a3a      	ldr	r2, [r7, #32]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e002      	b.n	80082f0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800830c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008310:	4618      	mov	r0, r3
 8008312:	3730      	adds	r7, #48	@ 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800831a:	bf00      	nop
 800831c:	0801bea0 	.word	0x0801bea0
 8008320:	00f42400 	.word	0x00f42400

08008324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008422:	d10a      	bne.n	800843a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr

08008466 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af02      	add	r7, sp, #8
 800846c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008476:	f7f9 fb9b 	bl	8001bb0 <HAL_GetTick>
 800847a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b08      	cmp	r3, #8
 8008488:	d10e      	bne.n	80084a8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f82f 	bl	80084fc <UART_WaitOnFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e025      	b.n	80084f4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d10e      	bne.n	80084d4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f819 	bl	80084fc <UART_WaitOnFlagUntilTimeout>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e00f      	b.n	80084f4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b09c      	sub	sp, #112	@ 0x70
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4613      	mov	r3, r2
 800850a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800850c:	e0a9      	b.n	8008662 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800850e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	f000 80a5 	beq.w	8008662 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008518:	f7f9 fb4a 	bl	8001bb0 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008524:	429a      	cmp	r2, r3
 8008526:	d302      	bcc.n	800852e <UART_WaitOnFlagUntilTimeout+0x32>
 8008528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800852a:	2b00      	cmp	r3, #0
 800852c:	d140      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800853c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800853e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008542:	667b      	str	r3, [r7, #100]	@ 0x64
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800854c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800854e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800855a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e6      	bne.n	800852e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	663b      	str	r3, [r7, #96]	@ 0x60
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008580:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008582:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800858e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e5      	bne.n	8008560 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e069      	b.n	8008684 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d051      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085cc:	d149      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80085ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	613b      	str	r3, [r7, #16]
   return(result);
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800862a:	623a      	str	r2, [r7, #32]
 800862c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	69f9      	ldr	r1, [r7, #28]
 8008630:	6a3a      	ldr	r2, [r7, #32]
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	61bb      	str	r3, [r7, #24]
   return(result);
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e010      	b.n	8008684 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4013      	ands	r3, r2
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	429a      	cmp	r2, r3
 800867e:	f43f af46 	beq.w	800850e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3770      	adds	r7, #112	@ 0x70
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800868c:	b480      	push	{r7}
 800868e:	b0a3      	sub	sp, #140	@ 0x8c
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	88fa      	ldrh	r2, [r7, #6]
 80086ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086be:	d10e      	bne.n	80086de <UART_Start_Receive_IT+0x52>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <UART_Start_Receive_IT+0x48>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086d2:	e02d      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	22ff      	movs	r2, #255	@ 0xff
 80086d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086dc:	e028      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <UART_Start_Receive_IT+0x76>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <UART_Start_Receive_IT+0x6c>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	22ff      	movs	r2, #255	@ 0xff
 80086f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086f6:	e01b      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	227f      	movs	r2, #127	@ 0x7f
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008700:	e016      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870a:	d10d      	bne.n	8008728 <UART_Start_Receive_IT+0x9c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <UART_Start_Receive_IT+0x92>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	227f      	movs	r2, #127	@ 0x7f
 8008718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800871c:	e008      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	223f      	movs	r2, #63	@ 0x3f
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008726:	e003      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2222      	movs	r2, #34	@ 0x22
 800873c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008764:	673a      	str	r2, [r7, #112]	@ 0x70
 8008766:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800876a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e3      	bne.n	8008740 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008780:	d153      	bne.n	800882a <UART_Start_Receive_IT+0x19e>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	429a      	cmp	r2, r3
 800878c:	d34d      	bcc.n	800882a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008796:	d107      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a4a      	ldr	r2, [pc, #296]	@ (80088cc <UART_Start_Receive_IT+0x240>)
 80087a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80087a6:	e002      	b.n	80087ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a49      	ldr	r2, [pc, #292]	@ (80088d0 <UART_Start_Receive_IT+0x244>)
 80087ac:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01a      	beq.n	80087f4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80087ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e4      	bne.n	80087be <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800880a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008814:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008816:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800881a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_Start_Receive_IT+0x168>
 8008828:	e04a      	b.n	80088c0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008832:	d107      	bne.n	8008844 <UART_Start_Receive_IT+0x1b8>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d103      	bne.n	8008844 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a25      	ldr	r2, [pc, #148]	@ (80088d4 <UART_Start_Receive_IT+0x248>)
 8008840:	671a      	str	r2, [r3, #112]	@ 0x70
 8008842:	e002      	b.n	800884a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4a24      	ldr	r2, [pc, #144]	@ (80088d8 <UART_Start_Receive_IT+0x24c>)
 8008848:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d019      	beq.n	800888e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800886e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
 800887a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800887e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e6      	bne.n	800885a <UART_Start_Receive_IT+0x1ce>
 800888c:	e018      	b.n	80088c0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f043 0320 	orr.w	r3, r3, #32
 80088a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ac:	623b      	str	r3, [r7, #32]
 80088ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e6      	bne.n	800888e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	378c      	adds	r7, #140	@ 0x8c
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	08009199 	.word	0x08009199
 80088d0:	08008ea1 	.word	0x08008ea1
 80088d4:	08008d3f 	.word	0x08008d3f
 80088d8:	08008bdf 	.word	0x08008bdf

080088dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b08f      	sub	sp, #60	@ 0x3c
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008904:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e6      	bne.n	80088e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	60bb      	str	r3, [r7, #8]
   return(result);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800892c:	633b      	str	r3, [r7, #48]	@ 0x30
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008936:	61ba      	str	r2, [r7, #24]
 8008938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6979      	ldr	r1, [r7, #20]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	613b      	str	r3, [r7, #16]
   return(result);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e5      	bne.n	8008916 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8008952:	bf00      	nop
 8008954:	373c      	adds	r7, #60	@ 0x3c
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr

0800895c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b095      	sub	sp, #84	@ 0x54
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008982:	643b      	str	r3, [r7, #64]	@ 0x40
 8008984:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3308      	adds	r3, #8
 80089b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e3      	bne.n	8008996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d118      	bne.n	8008a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f023 0310 	bic.w	r3, r3, #16
 80089ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f4:	61bb      	str	r3, [r7, #24]
 80089f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6979      	ldr	r1, [r7, #20]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	613b      	str	r3, [r7, #16]
   return(result);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e6      	bne.n	80089d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008a1c:	bf00      	nop
 8008a1e:	3754      	adds	r7, #84	@ 0x54
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b090      	sub	sp, #64	@ 0x40
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d137      	bne.n	8008ab2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	623b      	str	r3, [r7, #32]
   return(result);
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e5      	bne.n	8008a4a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	69b9      	ldr	r1, [r7, #24]
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e6      	bne.n	8008a7e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ab0:	e002      	b.n	8008ab8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ab2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ab4:	f7f9 fd82 	bl	80025bc <HAL_UART_TxCpltCallback>
}
 8008ab8:	bf00      	nop
 8008aba:	3740      	adds	r7, #64	@ 0x40
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008acc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff f996 	bl	8007e00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b04:	2b80      	cmp	r3, #128	@ 0x80
 8008b06:	d109      	bne.n	8008b1c <UART_DMAError+0x40>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b21      	cmp	r3, #33	@ 0x21
 8008b0c:	d106      	bne.n	8008b1c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff fee0 	bl	80088dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d109      	bne.n	8008b3e <UART_DMAError+0x62>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b22      	cmp	r3, #34	@ 0x22
 8008b2e:	d106      	bne.n	8008b3e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008b38:	6978      	ldr	r0, [r7, #20]
 8008b3a:	f7ff ff0f 	bl	800895c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b44:	f043 0210 	orr.w	r2, r3, #16
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b4e:	6978      	ldr	r0, [r7, #20]
 8008b50:	f7ff f95f 	bl	8007e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b54:	bf00      	nop
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff f949 	bl	8007e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	613b      	str	r3, [r7, #16]
   return(result);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f9 fcf3 	bl	80025bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd6:	bf00      	nop
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b096      	sub	sp, #88	@ 0x58
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf6:	2b22      	cmp	r3, #34	@ 0x22
 8008bf8:	f040 8095 	bne.w	8008d26 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c06:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008c0a:	b2d9      	uxtb	r1, r3
 8008c0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c16:	400a      	ands	r2, r1
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d178      	bne.n	8008d36 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	623b      	str	r3, [r7, #32]
   return(result);
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c96:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d12e      	bne.n	8008d1e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0310 	bic.w	r3, r3, #16
 8008cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f003 0310 	and.w	r3, r3, #16
 8008d02:	2b10      	cmp	r3, #16
 8008d04:	d103      	bne.n	8008d0e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff f884 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d1c:	e00b      	b.n	8008d36 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7f9 fc62 	bl	80025e8 <HAL_UART_RxCpltCallback>
}
 8008d24:	e007      	b.n	8008d36 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699a      	ldr	r2, [r3, #24]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0208 	orr.w	r2, r2, #8
 8008d34:	619a      	str	r2, [r3, #24]
}
 8008d36:	bf00      	nop
 8008d38:	3758      	adds	r7, #88	@ 0x58
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b096      	sub	sp, #88	@ 0x58
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d56:	2b22      	cmp	r3, #34	@ 0x22
 8008d58:	f040 8095 	bne.w	8008e86 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d6a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d6c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008d70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d74:	4013      	ands	r3, r2
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d7a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d178      	bne.n	8008e96 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e6      	bne.n	8008da4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3308      	adds	r3, #8
 8008df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e5      	bne.n	8008dd6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d12e      	bne.n	8008e7e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 0310 	bic.w	r3, r3, #16
 8008e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e44:	61bb      	str	r3, [r7, #24]
 8008e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6979      	ldr	r1, [r7, #20]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	613b      	str	r3, [r7, #16]
   return(result);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d103      	bne.n	8008e6e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2210      	movs	r2, #16
 8008e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7fe ffd4 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e7c:	e00b      	b.n	8008e96 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f9 fbb2 	bl	80025e8 <HAL_UART_RxCpltCallback>
}
 8008e84:	e007      	b.n	8008e96 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0208 	orr.w	r2, r2, #8
 8008e94:	619a      	str	r2, [r3, #24]
}
 8008e96:	bf00      	nop
 8008e98:	3758      	adds	r7, #88	@ 0x58
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b0a6      	sub	sp, #152	@ 0x98
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed6:	2b22      	cmp	r3, #34	@ 0x22
 8008ed8:	f040 814f 	bne.w	800917a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ee2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ee6:	e0f6      	b.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eee:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ef2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008ef6:	b2d9      	uxtb	r1, r3
 8008ef8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f02:	400a      	ands	r2, r1
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d053      	beq.n	8008fe2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d011      	beq.n	8008f6a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2201      	movs	r2, #1
 8008f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f60:	f043 0201 	orr.w	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d011      	beq.n	8008f9a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2202      	movs	r2, #2
 8008f88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f90:	f043 0204 	orr.w	r2, r3, #4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d011      	beq.n	8008fca <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fc0:	f043 0202 	orr.w	r2, r3, #2
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d006      	beq.n	8008fe2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fe ff1c 	bl	8007e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d173      	bne.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009010:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009012:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009016:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800901e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e4      	bne.n	8008fee <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800903a:	f023 0301 	bic.w	r3, r3, #1
 800903e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3308      	adds	r3, #8
 8009046:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009048:	657a      	str	r2, [r7, #84]	@ 0x54
 800904a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800904e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e3      	bne.n	8009024 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800906e:	2b01      	cmp	r3, #1
 8009070:	d12e      	bne.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009096:	643b      	str	r3, [r7, #64]	@ 0x40
 8009098:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800909c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d103      	bne.n	80090c0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2210      	movs	r2, #16
 80090be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7fe feab 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
 80090ce:	e002      	b.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7f9 fa89 	bl	80025e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d006      	beq.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x24c>
 80090de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f47f aefe 	bne.w	8008ee8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d045      	beq.n	800918a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009108:	429a      	cmp	r2, r3
 800910a:	d23e      	bcs.n	800918a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	61fb      	str	r3, [r7, #28]
   return(result);
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009122:	673b      	str	r3, [r7, #112]	@ 0x70
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3308      	adds	r3, #8
 800912a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800912c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800912e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e5      	bne.n	800910c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a14      	ldr	r2, [pc, #80]	@ (8009194 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009144:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	60bb      	str	r3, [r7, #8]
   return(result);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f043 0320 	orr.w	r3, r3, #32
 800915a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	613b      	str	r3, [r7, #16]
   return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e6      	bne.n	8009146 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009178:	e007      	b.n	800918a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0208 	orr.w	r2, r2, #8
 8009188:	619a      	str	r2, [r3, #24]
}
 800918a:	bf00      	nop
 800918c:	3798      	adds	r7, #152	@ 0x98
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	08008bdf 	.word	0x08008bdf

08009198 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b0a8      	sub	sp, #160	@ 0xa0
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091a6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ce:	2b22      	cmp	r3, #34	@ 0x22
 80091d0:	f040 8153 	bne.w	800947a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091de:	e0fa      	b.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80091f2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 80091f6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80091fa:	4013      	ands	r3, r2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009202:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009208:	1c9a      	adds	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800922a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	2b00      	cmp	r3, #0
 8009234:	d053      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009236:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d011      	beq.n	8009266 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2201      	movs	r2, #1
 8009254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800925c:	f043 0201 	orr.w	r2, r3, #1
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009266:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d011      	beq.n	8009296 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009272:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2202      	movs	r2, #2
 8009284:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800928c:	f043 0204 	orr.w	r2, r3, #4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009296:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800929a:	f003 0304 	and.w	r3, r3, #4
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d011      	beq.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80092a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00b      	beq.n	80092c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2204      	movs	r2, #4
 80092b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092bc:	f043 0202 	orr.w	r2, r3, #2
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fe fd9e 	bl	8007e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d175      	bne.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800930c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800930e:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800931a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e4      	bne.n	80092ea <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009348:	65ba      	str	r2, [r7, #88]	@ 0x58
 800934a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800934e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e1      	bne.n	8009320 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800936e:	2b01      	cmp	r3, #1
 8009370:	d12e      	bne.n	80093d0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009396:	647b      	str	r3, [r7, #68]	@ 0x44
 8009398:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800939c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e6      	bne.n	8009378 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b10      	cmp	r3, #16
 80093b6:	d103      	bne.n	80093c0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2210      	movs	r2, #16
 80093be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7fe fd2b 	bl	8007e24 <HAL_UARTEx_RxEventCallback>
 80093ce:	e002      	b.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7f9 f909 	bl	80025e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <UART_RxISR_16BIT_FIFOEN+0x254>
 80093de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f47f aefa 	bne.w	80091e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093f2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d045      	beq.n	800948a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009404:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009408:	429a      	cmp	r2, r3
 800940a:	d23e      	bcs.n	800948a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	623b      	str	r3, [r7, #32]
   return(result);
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009422:	677b      	str	r3, [r7, #116]	@ 0x74
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800942c:	633a      	str	r2, [r7, #48]	@ 0x30
 800942e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e5      	bne.n	800940c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a14      	ldr	r2, [pc, #80]	@ (8009494 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009444:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	60fb      	str	r3, [r7, #12]
   return(result);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f043 0320 	orr.w	r3, r3, #32
 800945a:	673b      	str	r3, [r7, #112]	@ 0x70
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009464:	61fb      	str	r3, [r7, #28]
 8009466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	69b9      	ldr	r1, [r7, #24]
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	617b      	str	r3, [r7, #20]
   return(result);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e6      	bne.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009478:	e007      	b.n	800948a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0208 	orr.w	r2, r2, #8
 8009488:	619a      	str	r2, [r3, #24]
}
 800948a:	bf00      	nop
 800948c:	37a0      	adds	r7, #160	@ 0xa0
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	08008d3f 	.word	0x08008d3f

08009498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr

080094bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b088      	sub	sp, #32
 80094d2:	af02      	add	r7, sp, #8
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e046      	b.n	800957c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2224      	movs	r2, #36	@ 0x24
 80094fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d105      	bne.n	8009534 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009528:	1d3b      	adds	r3, r7, #4
 800952a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 f911 	bl	8009756 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009544:	f7f8 fb34 	bl	8001bb0 <HAL_GetTick>
 8009548:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800954a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2200      	movs	r2, #0
 8009554:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7fe ffcf 	bl	80084fc <UART_WaitOnFlagUntilTimeout>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	75fb      	strb	r3, [r7, #23]
 8009568:	e003      	b.n	8009572 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b089      	sub	sp, #36	@ 0x24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_UARTEx_EnableStopMode+0x16>
 8009596:	2302      	movs	r3, #2
 8009598:	e021      	b.n	80095de <HAL_UARTEx_EnableStopMode+0x5a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f043 0302 	orr.w	r3, r3, #2
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	61bb      	str	r3, [r7, #24]
 80095c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6979      	ldr	r1, [r7, #20]
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	613b      	str	r3, [r7, #16]
   return(result);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e6      	bne.n	80095a2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3724      	adds	r7, #36	@ 0x24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr

080095e8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_UARTEx_EnableFifoMode+0x16>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e02b      	b.n	8009656 <HAL_UARTEx_EnableFifoMode+0x6e>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2224      	movs	r2, #36	@ 0x24
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800962c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009634:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f8ac 	bl	800979c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009672:	2302      	movs	r3, #2
 8009674:	e02d      	b.n	80096d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2224      	movs	r2, #36	@ 0x24
 8009682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f872 	bl	800979c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e02d      	b.n	800974e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2224      	movs	r2, #36	@ 0x24
 80096fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0201 	bic.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f834 	bl	800979c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	1d3b      	adds	r3, r7, #4
 8009760:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f023 0210 	bic.w	r2, r3, #16
 800976e:	893b      	ldrh	r3, [r7, #8]
 8009770:	4619      	mov	r1, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009784:	7abb      	ldrb	r3, [r7, #10]
 8009786:	061a      	lsls	r2, r3, #24
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	605a      	str	r2, [r3, #4]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
	...

0800979c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d108      	bne.n	80097be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097bc:	e031      	b.n	8009822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097be:	2308      	movs	r3, #8
 80097c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097c2:	2308      	movs	r3, #8
 80097c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	0e5b      	lsrs	r3, r3, #25
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	0f5b      	lsrs	r3, r3, #29
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	7b3a      	ldrb	r2, [r7, #12]
 80097ea:	4910      	ldr	r1, [pc, #64]	@ (800982c <UARTEx_SetNbDataToProcess+0x90>)
 80097ec:	5c8a      	ldrb	r2, [r1, r2]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097f2:	7b3a      	ldrb	r2, [r7, #12]
 80097f4:	490e      	ldr	r1, [pc, #56]	@ (8009830 <UARTEx_SetNbDataToProcess+0x94>)
 80097f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	7b7a      	ldrb	r2, [r7, #13]
 8009808:	4908      	ldr	r1, [pc, #32]	@ (800982c <UARTEx_SetNbDataToProcess+0x90>)
 800980a:	5c8a      	ldrb	r2, [r1, r2]
 800980c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009810:	7b7a      	ldrb	r2, [r7, #13]
 8009812:	4907      	ldr	r1, [pc, #28]	@ (8009830 <UARTEx_SetNbDataToProcess+0x94>)
 8009814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009816:	fb93 f3f2 	sdiv	r3, r3, r2
 800981a:	b29a      	uxth	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr
 800982c:	0801beb8 	.word	0x0801beb8
 8009830:	0801bec0 	.word	0x0801bec0

08009834 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009838:	f7f8 f85a 	bl	80018f0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800983c:	f000 f820 	bl	8009880 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009840:	bf00      	nop
 8009842:	bd80      	pop	{r7, pc}

08009844 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	f010 fea8 	bl	801a5a0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009850:	bf00      	nop
 8009852:	bd80      	pop	{r7, pc}

08009854 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009858:	f3bf 8f4f 	dsb	sy
}
 800985c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800985e:	4b06      	ldr	r3, [pc, #24]	@ (8009878 <__NVIC_SystemReset+0x24>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009866:	4904      	ldr	r1, [pc, #16]	@ (8009878 <__NVIC_SystemReset+0x24>)
 8009868:	4b04      	ldr	r3, [pc, #16]	@ (800987c <__NVIC_SystemReset+0x28>)
 800986a:	4313      	orrs	r3, r2
 800986c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800986e:	f3bf 8f4f 	dsb	sy
}
 8009872:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <__NVIC_SystemReset+0x20>
 8009878:	e000ed00 	.word	0xe000ed00
 800987c:	05fa0004 	.word	0x05fa0004

08009880 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009886:	2300      	movs	r3, #0
 8009888:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800988a:	2300      	movs	r3, #0
 800988c:	9302      	str	r3, [sp, #8]
 800988e:	2302      	movs	r3, #2
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	2301      	movs	r3, #1
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	4b5a      	ldr	r3, [pc, #360]	@ (8009a00 <LoRaWAN_Init+0x180>)
 8009898:	2200      	movs	r2, #0
 800989a:	2100      	movs	r1, #0
 800989c:	2002      	movs	r0, #2
 800989e:	f011 facb 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80098a2:	2300      	movs	r3, #0
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	2304      	movs	r3, #4
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	2302      	movs	r3, #2
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4b55      	ldr	r3, [pc, #340]	@ (8009a04 <LoRaWAN_Init+0x184>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	2100      	movs	r1, #0
 80098b4:	2002      	movs	r0, #2
 80098b6:	f011 fabf 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80098ba:	2300      	movs	r3, #0
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	2302      	movs	r3, #2
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	2301      	movs	r3, #1
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	4b50      	ldr	r3, [pc, #320]	@ (8009a08 <LoRaWAN_Init+0x188>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	2100      	movs	r1, #0
 80098cc:	2002      	movs	r0, #2
 80098ce:	f011 fab3 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80098d2:	1d3b      	adds	r3, r7, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	2000      	movs	r0, #0
 80098d8:	f003 f8b0 	bl	800ca3c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	0e1b      	lsrs	r3, r3, #24
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	9101      	str	r1, [sp, #4]
 80098f6:	9200      	str	r2, [sp, #0]
 80098f8:	4b44      	ldr	r3, [pc, #272]	@ (8009a0c <LoRaWAN_Init+0x18c>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	2002      	movs	r0, #2
 8009900:	f011 fa9a 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009904:	1d3b      	adds	r3, r7, #4
 8009906:	4619      	mov	r1, r3
 8009908:	2001      	movs	r0, #1
 800990a:	f003 f897 	bl	800ca3c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0e1b      	lsrs	r3, r3, #24
 8009912:	b2db      	uxtb	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	0c1b      	lsrs	r3, r3, #16
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4619      	mov	r1, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	b2db      	uxtb	r3, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	b2c0      	uxtb	r0, r0
 8009928:	9003      	str	r0, [sp, #12]
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	9101      	str	r1, [sp, #4]
 800992e:	9200      	str	r2, [sp, #0]
 8009930:	4b37      	ldr	r3, [pc, #220]	@ (8009a10 <LoRaWAN_Init+0x190>)
 8009932:	2200      	movs	r2, #0
 8009934:	2100      	movs	r1, #0
 8009936:	2002      	movs	r0, #2
 8009938:	f011 fa7e 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800993c:	2300      	movs	r3, #0
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	4b34      	ldr	r3, [pc, #208]	@ (8009a14 <LoRaWAN_Init+0x194>)
 8009942:	2200      	movs	r2, #0
 8009944:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009948:	4833      	ldr	r0, [pc, #204]	@ (8009a18 <LoRaWAN_Init+0x198>)
 800994a:	f010 ffc7 	bl	801a8dc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800994e:	2300      	movs	r3, #0
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4b32      	ldr	r3, [pc, #200]	@ (8009a1c <LoRaWAN_Init+0x19c>)
 8009954:	2200      	movs	r2, #0
 8009956:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800995a:	4831      	ldr	r0, [pc, #196]	@ (8009a20 <LoRaWAN_Init+0x1a0>)
 800995c:	f010 ffbe 	bl	801a8dc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	4b2f      	ldr	r3, [pc, #188]	@ (8009a24 <LoRaWAN_Init+0x1a4>)
 8009966:	2201      	movs	r2, #1
 8009968:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800996c:	482e      	ldr	r0, [pc, #184]	@ (8009a28 <LoRaWAN_Init+0x1a8>)
 800996e:	f010 ffb5 	bl	801a8dc <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009972:	2300      	movs	r3, #0
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4b2d      	ldr	r3, [pc, #180]	@ (8009a2c <LoRaWAN_Init+0x1ac>)
 8009978:	2200      	movs	r2, #0
 800997a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800997e:	482c      	ldr	r0, [pc, #176]	@ (8009a30 <LoRaWAN_Init+0x1b0>)
 8009980:	f010 ffac 	bl	801a8dc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009984:	4a2b      	ldr	r2, [pc, #172]	@ (8009a34 <LoRaWAN_Init+0x1b4>)
 8009986:	2100      	movs	r1, #0
 8009988:	2001      	movs	r0, #1
 800998a:	f010 ff05 	bl	801a798 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800998e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a38 <LoRaWAN_Init+0x1b8>)
 8009990:	2100      	movs	r1, #0
 8009992:	2002      	movs	r0, #2
 8009994:	f010 ff00 	bl	801a798 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009998:	4a28      	ldr	r2, [pc, #160]	@ (8009a3c <LoRaWAN_Init+0x1bc>)
 800999a:	2100      	movs	r1, #0
 800999c:	2004      	movs	r0, #4
 800999e:	f010 fefb 	bl	801a798 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80099a2:	4a27      	ldr	r2, [pc, #156]	@ (8009a40 <LoRaWAN_Init+0x1c0>)
 80099a4:	2100      	movs	r1, #0
 80099a6:	2008      	movs	r0, #8
 80099a8:	f010 fef6 	bl	801a798 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 80099ac:	f000 fc72 	bl	800a294 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80099b0:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 80099b4:	4823      	ldr	r0, [pc, #140]	@ (8009a44 <LoRaWAN_Init+0x1c4>)
 80099b6:	f002 f927 	bl	800bc08 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 80099ba:	4823      	ldr	r0, [pc, #140]	@ (8009a48 <LoRaWAN_Init+0x1c8>)
 80099bc:	f002 f982 	bl	800bcc4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 80099c0:	4819      	ldr	r0, [pc, #100]	@ (8009a28 <LoRaWAN_Init+0x1a8>)
 80099c2:	f010 ffc1 	bl	801a948 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 80099c6:	4b21      	ldr	r3, [pc, #132]	@ (8009a4c <LoRaWAN_Init+0x1cc>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	4a21      	ldr	r2, [pc, #132]	@ (8009a50 <LoRaWAN_Init+0x1d0>)
 80099cc:	7812      	ldrb	r2, [r2, #0]
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 faf3 	bl	800bfbc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 80099d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a54 <LoRaWAN_Init+0x1d4>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10b      	bne.n	80099f6 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80099de:	4b1e      	ldr	r3, [pc, #120]	@ (8009a58 <LoRaWAN_Init+0x1d8>)
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <LoRaWAN_Init+0x1dc>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	481d      	ldr	r0, [pc, #116]	@ (8009a60 <LoRaWAN_Init+0x1e0>)
 80099ec:	f010 ff76 	bl	801a8dc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80099f0:	481b      	ldr	r0, [pc, #108]	@ (8009a60 <LoRaWAN_Init+0x1e0>)
 80099f2:	f010 ffa9 	bl	801a948 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	0801b4e0 	.word	0x0801b4e0
 8009a04:	0801b504 	.word	0x0801b504
 8009a08:	0801b528 	.word	0x0801b528
 8009a0c:	0801b54c 	.word	0x0801b54c
 8009a10:	0801b570 	.word	0x0801b570
 8009a14:	08009d89 	.word	0x08009d89
 8009a18:	20000460 	.word	0x20000460
 8009a1c:	08009d9b 	.word	0x08009d9b
 8009a20:	20000478 	.word	0x20000478
 8009a24:	08009dad 	.word	0x08009dad
 8009a28:	20000490 	.word	0x20000490
 8009a2c:	0800a15d 	.word	0x0800a15d
 8009a30:	20000354 	.word	0x20000354
 8009a34:	0800bf51 	.word	0x0800bf51
 8009a38:	08009bd5 	.word	0x08009bd5
 8009a3c:	0800a181 	.word	0x0800a181
 8009a40:	0800a0dd 	.word	0x0800a0dd
 8009a44:	20000024 	.word	0x20000024
 8009a48:	20000070 	.word	0x20000070
 8009a4c:	20000020 	.word	0x20000020
 8009a50:	20000021 	.word	0x20000021
 8009a54:	20000338 	.word	0x20000338
 8009a58:	20000084 	.word	0x20000084
 8009a5c:	08009d65 	.word	0x08009d65
 8009a60:	2000033c 	.word	0x2000033c

08009a64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009a6e:	88fb      	ldrh	r3, [r7, #6]
 8009a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a74:	d104      	bne.n	8009a80 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009a76:	2100      	movs	r1, #0
 8009a78:	2002      	movs	r0, #2
 8009a7a:	f010 feaf 	bl	801a7dc <UTIL_SEQ_SetTask>
      }
      break;
 8009a7e:	e000      	b.n	8009a82 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009a80:	bf00      	nop
  }
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009a8c:	b5b0      	push	{r4, r5, r7, lr}
 8009a8e:	b08a      	sub	sp, #40	@ 0x28
 8009a90:	af06      	add	r7, sp, #24
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8086 	beq.w	8009bae <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009aa2:	4845      	ldr	r0, [pc, #276]	@ (8009bb8 <OnRxData+0x12c>)
 8009aa4:	f010 ff50 	bl	801a948 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d05a      	beq.n	8009b66 <OnRxData+0xda>
    {
      if (appData != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d057      	beq.n	8009b66 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d050      	beq.n	8009b66 <OnRxData+0xda>
        {
          switch (appData->Port)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d01f      	beq.n	8009b0c <OnRxData+0x80>
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d145      	bne.n	8009b5c <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d143      	bne.n	8009b60 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d00e      	beq.n	8009b00 <OnRxData+0x74>
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	dc10      	bgt.n	8009b08 <OnRxData+0x7c>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <OnRxData+0x64>
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d004      	beq.n	8009af8 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009aee:	e00b      	b.n	8009b08 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 8009af0:	2000      	movs	r0, #0
 8009af2:	f002 fbef 	bl	800c2d4 <LmHandlerRequestClass>
                    break;
 8009af6:	e008      	b.n	8009b0a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 8009af8:	2001      	movs	r0, #1
 8009afa:	f002 fbeb 	bl	800c2d4 <LmHandlerRequestClass>
                    break;
 8009afe:	e004      	b.n	8009b0a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 8009b00:	2002      	movs	r0, #2
 8009b02:	f002 fbe7 	bl	800c2d4 <LmHandlerRequestClass>
                    break;
 8009b06:	e000      	b.n	8009b0a <OnRxData+0x7e>
                    break;
 8009b08:	bf00      	nop
                }
              }
              break;
 8009b0a:	e029      	b.n	8009b60 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	785b      	ldrb	r3, [r3, #1]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d127      	bne.n	8009b64 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	4b26      	ldr	r3, [pc, #152]	@ (8009bbc <OnRxData+0x130>)
 8009b22:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009b24:	4b25      	ldr	r3, [pc, #148]	@ (8009bbc <OnRxData+0x130>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10b      	bne.n	8009b44 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009b2c:	4b24      	ldr	r3, [pc, #144]	@ (8009bc0 <OnRxData+0x134>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2100      	movs	r1, #0
 8009b32:	2003      	movs	r0, #3
 8009b34:	f011 f980 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009b38:	2201      	movs	r2, #1
 8009b3a:	2120      	movs	r1, #32
 8009b3c:	4821      	ldr	r0, [pc, #132]	@ (8009bc4 <OnRxData+0x138>)
 8009b3e:	f7fb f8e9 	bl	8004d14 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009b42:	e00f      	b.n	8009b64 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009b44:	4b20      	ldr	r3, [pc, #128]	@ (8009bc8 <OnRxData+0x13c>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	2100      	movs	r1, #0
 8009b4a:	2003      	movs	r0, #3
 8009b4c:	f011 f974 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009b50:	2200      	movs	r2, #0
 8009b52:	2120      	movs	r1, #32
 8009b54:	481b      	ldr	r0, [pc, #108]	@ (8009bc4 <OnRxData+0x138>)
 8009b56:	f7fb f8dd 	bl	8004d14 <HAL_GPIO_WritePin>
              break;
 8009b5a:	e003      	b.n	8009b64 <OnRxData+0xd8>

            default:

              break;
 8009b5c:	bf00      	nop
 8009b5e:	e002      	b.n	8009b66 <OnRxData+0xda>
              break;
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <OnRxData+0xda>
              break;
 8009b64:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	7c1b      	ldrb	r3, [r3, #16]
 8009b6a:	2b05      	cmp	r3, #5
 8009b6c:	d81f      	bhi.n	8009bae <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	7bfa      	ldrb	r2, [r7, #15]
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	7c09      	ldrb	r1, [r1, #16]
 8009b80:	4608      	mov	r0, r1
 8009b82:	4912      	ldr	r1, [pc, #72]	@ (8009bcc <OnRxData+0x140>)
 8009b84:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009b88:	6838      	ldr	r0, [r7, #0]
 8009b8a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009b8e:	4605      	mov	r5, r0
 8009b90:	6838      	ldr	r0, [r7, #0]
 8009b92:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009b96:	9005      	str	r0, [sp, #20]
 8009b98:	9504      	str	r5, [sp, #16]
 8009b9a:	9103      	str	r1, [sp, #12]
 8009b9c:	9402      	str	r4, [sp, #8]
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd0 <OnRxData+0x144>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2003      	movs	r0, #3
 8009baa:	f011 f945 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000478 	.word	0x20000478
 8009bbc:	2000045e 	.word	0x2000045e
 8009bc0:	0801b594 	.word	0x0801b594
 8009bc4:	48000400 	.word	0x48000400
 8009bc8:	0801b5a0 	.word	0x0801b5a0
 8009bcc:	20000008 	.word	0x20000008
 8009bd0:	0801b5ac 	.word	0x0801b5ac

08009bd4 <SendTxData>:

static void SendTxData(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
	LmHandlerErrorStatus_t status;
	  UTIL_TIMER_Time_t nextTxIn = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]

	  AppData.Port = LORAWAN_USER_APP_PORT;
 8009bde:	4b56      	ldr	r3, [pc, #344]	@ (8009d38 <SendTxData+0x164>)
 8009be0:	2202      	movs	r2, #2
 8009be2:	701a      	strb	r2, [r3, #0]

	  float temp = 25.3;
 8009be4:	4b55      	ldr	r3, [pc, #340]	@ (8009d3c <SendTxData+0x168>)
 8009be6:	613b      	str	r3, [r7, #16]
	  float humi = 60.5;
 8009be8:	4b55      	ldr	r3, [pc, #340]	@ (8009d40 <SendTxData+0x16c>)
 8009bea:	60fb      	str	r3, [r7, #12]
	  uint16_t light = 782;
 8009bec:	f240 330e 	movw	r3, #782	@ 0x30e
 8009bf0:	817b      	strh	r3, [r7, #10]
	  uint8_t rain = 1;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	727b      	strb	r3, [r7, #9]

	  // สร้าง payload (แบบง่าย: fixed-point encoding)
	  // เช่น อุณหภูมิ x10, ความชื้น x10 แล้ว pack เป็น bytes
	  uint16_t temp_encoded = (uint16_t)(temp * 10);   // 253
 8009bf6:	4953      	ldr	r1, [pc, #332]	@ (8009d44 <SendTxData+0x170>)
 8009bf8:	6938      	ldr	r0, [r7, #16]
 8009bfa:	f7f6 fac5 	bl	8000188 <__aeabi_fmul>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7f6 ff15 	bl	8000a30 <__aeabi_f2uiz>
 8009c06:	4603      	mov	r3, r0
 8009c08:	80fb      	strh	r3, [r7, #6]
	  uint16_t humi_encoded = (uint16_t)(humi * 10);   // 605
 8009c0a:	494e      	ldr	r1, [pc, #312]	@ (8009d44 <SendTxData+0x170>)
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7f6 fabb 	bl	8000188 <__aeabi_fmul>
 8009c12:	4603      	mov	r3, r0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7f6 ff0b 	bl	8000a30 <__aeabi_f2uiz>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	80bb      	strh	r3, [r7, #4]

	  uint8_t i = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	70fb      	strb	r3, [r7, #3]
	  AppData.Buffer[i++] = (temp_encoded >> 8) & 0xFF;
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	0a1b      	lsrs	r3, r3, #8
 8009c26:	b299      	uxth	r1, r3
 8009c28:	4b43      	ldr	r3, [pc, #268]	@ (8009d38 <SendTxData+0x164>)
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	1c58      	adds	r0, r3, #1
 8009c30:	70f8      	strb	r0, [r7, #3]
 8009c32:	4413      	add	r3, r2
 8009c34:	b2ca      	uxtb	r2, r1
 8009c36:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = temp_encoded & 0xFF;
 8009c38:	4b3f      	ldr	r3, [pc, #252]	@ (8009d38 <SendTxData+0x164>)
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	1c59      	adds	r1, r3, #1
 8009c40:	70f9      	strb	r1, [r7, #3]
 8009c42:	4413      	add	r3, r2
 8009c44:	88fa      	ldrh	r2, [r7, #6]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = (humi_encoded >> 8) & 0xFF;
 8009c4a:	88bb      	ldrh	r3, [r7, #4]
 8009c4c:	0a1b      	lsrs	r3, r3, #8
 8009c4e:	b299      	uxth	r1, r3
 8009c50:	4b39      	ldr	r3, [pc, #228]	@ (8009d38 <SendTxData+0x164>)
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	1c58      	adds	r0, r3, #1
 8009c58:	70f8      	strb	r0, [r7, #3]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	b2ca      	uxtb	r2, r1
 8009c5e:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = humi_encoded & 0xFF;
 8009c60:	4b35      	ldr	r3, [pc, #212]	@ (8009d38 <SendTxData+0x164>)
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	1c59      	adds	r1, r3, #1
 8009c68:	70f9      	strb	r1, [r7, #3]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	88ba      	ldrh	r2, [r7, #4]
 8009c6e:	b2d2      	uxtb	r2, r2
 8009c70:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = (light >> 8) & 0xFF;
 8009c72:	897b      	ldrh	r3, [r7, #10]
 8009c74:	0a1b      	lsrs	r3, r3, #8
 8009c76:	b299      	uxth	r1, r3
 8009c78:	4b2f      	ldr	r3, [pc, #188]	@ (8009d38 <SendTxData+0x164>)
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	1c58      	adds	r0, r3, #1
 8009c80:	70f8      	strb	r0, [r7, #3]
 8009c82:	4413      	add	r3, r2
 8009c84:	b2ca      	uxtb	r2, r1
 8009c86:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = light & 0xFF;
 8009c88:	4b2b      	ldr	r3, [pc, #172]	@ (8009d38 <SendTxData+0x164>)
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	1c59      	adds	r1, r3, #1
 8009c90:	70f9      	strb	r1, [r7, #3]
 8009c92:	4413      	add	r3, r2
 8009c94:	897a      	ldrh	r2, [r7, #10]
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[i++] = rain;
 8009c9a:	4b27      	ldr	r3, [pc, #156]	@ (8009d38 <SendTxData+0x164>)
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	1c59      	adds	r1, r3, #1
 8009ca2:	70f9      	strb	r1, [r7, #3]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	7a7a      	ldrb	r2, [r7, #9]
 8009ca8:	701a      	strb	r2, [r3, #0]

	  AppData.BufferSize = i;
 8009caa:	4a23      	ldr	r2, [pc, #140]	@ (8009d38 <SendTxData+0x164>)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	7053      	strb	r3, [r2, #1]

	  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8009cb0:	4b25      	ldr	r3, [pc, #148]	@ (8009d48 <SendTxData+0x174>)
 8009cb2:	78db      	ldrb	r3, [r3, #3]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	481f      	ldr	r0, [pc, #124]	@ (8009d38 <SendTxData+0x164>)
 8009cba:	f002 fa1d 	bl	800c0f8 <LmHandlerSend>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	70bb      	strb	r3, [r7, #2]
	  if (status == LORAMAC_HANDLER_SUCCESS)
 8009cc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <SendTxData+0x104>
	  {
	    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8009cca:	4b20      	ldr	r3, [pc, #128]	@ (8009d4c <SendTxData+0x178>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	2100      	movs	r1, #0
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f011 f8b1 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 8009cd6:	e016      	b.n	8009d06 <SendTxData+0x132>
	  }
	  else if (status == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED)
 8009cd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cdc:	f113 0f06 	cmn.w	r3, #6
 8009ce0:	d111      	bne.n	8009d06 <SendTxData+0x132>
	  {
	    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009ce2:	f002 f961 	bl	800bfa8 <LmHandlerGetDutyCycleWaitTime>
 8009ce6:	6178      	str	r0, [r7, #20]
	    if (nextTxIn > 0)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <SendTxData+0x132>
	    {
	      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in: ~%d second(s)\r\n", (nextTxIn / 1000));
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4a17      	ldr	r2, [pc, #92]	@ (8009d50 <SendTxData+0x17c>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	099b      	lsrs	r3, r3, #6
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	4b16      	ldr	r3, [pc, #88]	@ (8009d54 <SendTxData+0x180>)
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	2100      	movs	r1, #0
 8009d00:	2001      	movs	r0, #1
 8009d02:	f011 f899 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
	    }
	  }

	  if (EventType == TX_ON_TIMER)
 8009d06:	4b14      	ldr	r3, [pc, #80]	@ (8009d58 <SendTxData+0x184>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10f      	bne.n	8009d2e <SendTxData+0x15a>
	  {
	    UTIL_TIMER_Stop(&TxTimer);
 8009d0e:	4813      	ldr	r0, [pc, #76]	@ (8009d5c <SendTxData+0x188>)
 8009d10:	f010 fe88 	bl	801aa24 <UTIL_TIMER_Stop>
	    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8009d14:	4b12      	ldr	r3, [pc, #72]	@ (8009d60 <SendTxData+0x18c>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	bf38      	it	cc
 8009d1e:	4613      	movcc	r3, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	480e      	ldr	r0, [pc, #56]	@ (8009d5c <SendTxData+0x188>)
 8009d24:	f010 feee 	bl	801ab04 <UTIL_TIMER_SetPeriod>
	    UTIL_TIMER_Start(&TxTimer);
 8009d28:	480c      	ldr	r0, [pc, #48]	@ (8009d5c <SendTxData+0x188>)
 8009d2a:	f010 fe0d 	bl	801a948 <UTIL_TIMER_Start>
	  }

  /* USER CODE END SendTxData_1 */
}
 8009d2e:	bf00      	nop
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000088 	.word	0x20000088
 8009d3c:	41ca6666 	.word	0x41ca6666
 8009d40:	42720000 	.word	0x42720000
 8009d44:	41200000 	.word	0x41200000
 8009d48:	20000070 	.word	0x20000070
 8009d4c:	0801b5f4 	.word	0x0801b5f4
 8009d50:	10624dd3 	.word	0x10624dd3
 8009d54:	0801b604 	.word	0x0801b604
 8009d58:	20000338 	.word	0x20000338
 8009d5c:	2000033c 	.word	0x2000033c
 8009d60:	20000084 	.word	0x20000084

08009d64 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	2002      	movs	r0, #2
 8009d70:	f010 fd34 	bl	801a7dc <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8009d74:	4803      	ldr	r0, [pc, #12]	@ (8009d84 <OnTxTimerEvent+0x20>)
 8009d76:	f010 fde7 	bl	801a948 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000033c 	.word	0x2000033c

08009d88 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bc80      	pop	{r7}
 8009d98:	4770      	bx	lr

08009d9a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr

08009dac <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	4770      	bx	lr
	...

08009dc0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d041      	beq.n	8009e52 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d03d      	beq.n	8009e52 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 8009dd6:	4821      	ldr	r0, [pc, #132]	@ (8009e5c <OnTxData+0x9c>)
 8009dd8:	f010 fdb6 	bl	801a948 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8009ddc:	4b20      	ldr	r3, [pc, #128]	@ (8009e60 <OnTxData+0xa0>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	2002      	movs	r0, #2
 8009de4:	f011 f828 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	7c12      	ldrb	r2, [r2, #16]
 8009df0:	4611      	mov	r1, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8009df8:	4610      	mov	r0, r2
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	f992 2018 	ldrsb.w	r2, [r2, #24]
 8009e00:	9203      	str	r2, [sp, #12]
 8009e02:	9002      	str	r0, [sp, #8]
 8009e04:	9101      	str	r1, [sp, #4]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	4b16      	ldr	r3, [pc, #88]	@ (8009e64 <OnTxData+0xa4>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2003      	movs	r0, #3
 8009e10:	f011 f812 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8009e14:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <OnTxData+0xa8>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	2100      	movs	r1, #0
 8009e1a:	2003      	movs	r0, #3
 8009e1c:	f011 f80c 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7a1b      	ldrb	r3, [r3, #8]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d10e      	bne.n	8009e46 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	7a5b      	ldrb	r3, [r3, #9]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <OnTxData+0x74>
 8009e30:	4b0e      	ldr	r3, [pc, #56]	@ (8009e6c <OnTxData+0xac>)
 8009e32:	e000      	b.n	8009e36 <OnTxData+0x76>
 8009e34:	4b0e      	ldr	r3, [pc, #56]	@ (8009e70 <OnTxData+0xb0>)
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4b0e      	ldr	r3, [pc, #56]	@ (8009e74 <OnTxData+0xb4>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	2003      	movs	r0, #3
 8009e40:	f010 fffa 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8009e44:	e005      	b.n	8009e52 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8009e46:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <OnTxData+0xb8>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	2003      	movs	r0, #3
 8009e4e:	f010 fff3 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000460 	.word	0x20000460
 8009e60:	0801b620 	.word	0x0801b620
 8009e64:	0801b654 	.word	0x0801b654
 8009e68:	0801b688 	.word	0x0801b688
 8009e6c:	0801b698 	.word	0x0801b698
 8009e70:	0801b69c 	.word	0x0801b69c
 8009e74:	0801b6a4 	.word	0x0801b6a4
 8009e78:	0801b6b8 	.word	0x0801b6b8

08009e7c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d039      	beq.n	8009efe <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d11e      	bne.n	8009ed2 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8009e94:	2100      	movs	r1, #0
 8009e96:	2004      	movs	r0, #4
 8009e98:	f010 fca0 	bl	801a7dc <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 8009e9c:	481a      	ldr	r0, [pc, #104]	@ (8009f08 <OnJoinRequest+0x8c>)
 8009e9e:	f010 fdc1 	bl	801aa24 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8009ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8009f0c <OnJoinRequest+0x90>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	2002      	movs	r0, #2
 8009eaa:	f010 ffc5 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	799b      	ldrb	r3, [r3, #6]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d106      	bne.n	8009ec4 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8009eb6:	4b16      	ldr	r3, [pc, #88]	@ (8009f10 <OnJoinRequest+0x94>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2100      	movs	r1, #0
 8009ebc:	2002      	movs	r0, #2
 8009ebe:	f010 ffbb 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 8009ec2:	e01c      	b.n	8009efe <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8009ec4:	4b13      	ldr	r3, [pc, #76]	@ (8009f14 <OnJoinRequest+0x98>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	2002      	movs	r0, #2
 8009ecc:	f010 ffb4 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 8009ed0:	e015      	b.n	8009efe <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8009ed2:	4b11      	ldr	r3, [pc, #68]	@ (8009f18 <OnJoinRequest+0x9c>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	2002      	movs	r0, #2
 8009eda:	f010 ffad 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	799b      	ldrb	r3, [r3, #6]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d10b      	bne.n	8009efe <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f1c <OnJoinRequest+0xa0>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	2002      	movs	r0, #2
 8009eee:	f010 ffa3 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f20 <OnJoinRequest+0xa4>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f002 f85f 	bl	800bfbc <LmHandlerJoin>
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20000490 	.word	0x20000490
 8009f0c:	0801b6c8 	.word	0x0801b6c8
 8009f10:	0801b6e0 	.word	0x0801b6e0
 8009f14:	0801b700 	.word	0x0801b700
 8009f18:	0801b720 	.word	0x0801b720
 8009f1c:	0801b73c 	.word	0x0801b73c
 8009f20:	20000020 	.word	0x20000020

08009f24 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 8009f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f26:	b093      	sub	sp, #76	@ 0x4c
 8009f28:	af0c      	add	r7, sp, #48	@ 0x30
 8009f2a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d056      	beq.n	8009fe0 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d008      	beq.n	8009f4c <OnBeaconStatusChange+0x28>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d049      	beq.n	8009fd2 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8009f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8009fe8 <OnBeaconStatusChange+0xc4>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	2100      	movs	r1, #0
 8009f44:	2002      	movs	r0, #2
 8009f46:	f010 ff77 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009f4a:	e049      	b.n	8009fe0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	7c1b      	ldrb	r3, [r3, #16]
 8009f50:	4618      	mov	r0, r3
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009f58:	461c      	mov	r4, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8009f60:	461d      	mov	r5, r3
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	6852      	ldr	r2, [r2, #4]
 8009f6a:	6979      	ldr	r1, [r7, #20]
 8009f6c:	7d89      	ldrb	r1, [r1, #22]
 8009f6e:	460e      	mov	r6, r1
 8009f70:	6979      	ldr	r1, [r7, #20]
 8009f72:	7dc9      	ldrb	r1, [r1, #23]
 8009f74:	6139      	str	r1, [r7, #16]
 8009f76:	6979      	ldr	r1, [r7, #20]
 8009f78:	7e09      	ldrb	r1, [r1, #24]
 8009f7a:	60f9      	str	r1, [r7, #12]
 8009f7c:	6979      	ldr	r1, [r7, #20]
 8009f7e:	7e49      	ldrb	r1, [r1, #25]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	6979      	ldr	r1, [r7, #20]
 8009f84:	7e89      	ldrb	r1, [r1, #26]
 8009f86:	6079      	str	r1, [r7, #4]
 8009f88:	6979      	ldr	r1, [r7, #20]
 8009f8a:	7ec9      	ldrb	r1, [r1, #27]
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	6979      	ldr	r1, [r7, #20]
 8009f90:	7f09      	ldrb	r1, [r1, #28]
 8009f92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f94:	f8d7 c000 	ldr.w	ip, [r7]
 8009f98:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8009f9c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8009fa0:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8009fa4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8009fa8:	f8cd c020 	str.w	ip, [sp, #32]
 8009fac:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8009fb0:	f8cd c01c 	str.w	ip, [sp, #28]
 8009fb4:	6939      	ldr	r1, [r7, #16]
 8009fb6:	9106      	str	r1, [sp, #24]
 8009fb8:	9605      	str	r6, [sp, #20]
 8009fba:	9204      	str	r2, [sp, #16]
 8009fbc:	9303      	str	r3, [sp, #12]
 8009fbe:	9502      	str	r5, [sp, #8]
 8009fc0:	9401      	str	r4, [sp, #4]
 8009fc2:	9000      	str	r0, [sp, #0]
 8009fc4:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <OnBeaconStatusChange+0xc8>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2100      	movs	r1, #0
 8009fca:	2002      	movs	r0, #2
 8009fcc:	f010 ff34 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 8009fd0:	e006      	b.n	8009fe0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8009fd2:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <OnBeaconStatusChange+0xcc>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	2002      	movs	r0, #2
 8009fda:	f010 ff2d 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8009fde:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8009fe0:	bf00      	nop
 8009fe2:	371c      	adds	r7, #28
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe8:	0801b760 	.word	0x0801b760
 8009fec:	0801b778 	.word	0x0801b778
 8009ff0:	0801b7ec 	.word	0x0801b7ec

08009ff4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	4a06      	ldr	r2, [pc, #24]	@ (800a01c <OnClassChange+0x28>)
 800a002:	5cd3      	ldrb	r3, [r2, r3]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4b06      	ldr	r3, [pc, #24]	@ (800a020 <OnClassChange+0x2c>)
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	2002      	movs	r0, #2
 800a00e:	f010 ff13 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	0801b828 	.word	0x0801b828
 800a020:	0801b80c 	.word	0x0801b80c

0800a024 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a028:	2100      	movs	r1, #0
 800a02a:	2001      	movs	r0, #1
 800a02c:	f010 fbd6 	bl	801a7dc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a030:	bf00      	nop
 800a032:	bd80      	pop	{r7, pc}

0800a034 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a03c:	4a0d      	ldr	r2, [pc, #52]	@ (800a074 <OnTxPeriodicityChanged+0x40>)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a042:	4b0c      	ldr	r3, [pc, #48]	@ (800a074 <OnTxPeriodicityChanged+0x40>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d103      	bne.n	800a052 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a04a:	4b0a      	ldr	r3, [pc, #40]	@ (800a074 <OnTxPeriodicityChanged+0x40>)
 800a04c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a050:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a052:	4809      	ldr	r0, [pc, #36]	@ (800a078 <OnTxPeriodicityChanged+0x44>)
 800a054:	f010 fce6 	bl	801aa24 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a058:	4b06      	ldr	r3, [pc, #24]	@ (800a074 <OnTxPeriodicityChanged+0x40>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4619      	mov	r1, r3
 800a05e:	4806      	ldr	r0, [pc, #24]	@ (800a078 <OnTxPeriodicityChanged+0x44>)
 800a060:	f010 fd50 	bl	801ab04 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a064:	4804      	ldr	r0, [pc, #16]	@ (800a078 <OnTxPeriodicityChanged+0x44>)
 800a066:	f010 fc6f 	bl	801a948 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000084 	.word	0x20000084
 800a078:	2000033c 	.word	0x2000033c

0800a07c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a086:	4a04      	ldr	r2, [pc, #16]	@ (800a098 <OnTxFrameCtrlChanged+0x1c>)
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	bc80      	pop	{r7}
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	20000070 	.word	0x20000070

0800a09c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a0a6:	4a04      	ldr	r2, [pc, #16]	@ (800a0b8 <OnPingSlotPeriodicityChanged+0x1c>)
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bc80      	pop	{r7}
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20000070 	.word	0x20000070

0800a0bc <OnSystemReset>:

static void OnSystemReset(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a0c0:	f002 fced 	bl	800ca9e <LmHandlerHalt>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <OnSystemReset+0x1c>
 800a0ca:	f001 fff9 	bl	800c0c0 <LmHandlerJoinStatus>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a0d4:	f7ff fbbe 	bl	8009854 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a0d8:	bf00      	nop
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <StopJoin>:

static void StopJoin(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a0e0:	4817      	ldr	r0, [pc, #92]	@ (800a140 <StopJoin+0x64>)
 800a0e2:	f010 fc9f 	bl	801aa24 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a0e6:	f002 fccd 	bl	800ca84 <LmHandlerStop>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a0f0:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <StopJoin+0x68>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	2002      	movs	r0, #2
 800a0f8:	f010 fe9e 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800a0fc:	e01a      	b.n	800a134 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a0fe:	4b12      	ldr	r3, [pc, #72]	@ (800a148 <StopJoin+0x6c>)
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	2002      	movs	r0, #2
 800a106:	f010 fe97 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a10a:	4b10      	ldr	r3, [pc, #64]	@ (800a14c <StopJoin+0x70>)
 800a10c:	2201      	movs	r2, #1
 800a10e:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a110:	4b0f      	ldr	r3, [pc, #60]	@ (800a150 <StopJoin+0x74>)
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	2002      	movs	r0, #2
 800a118:	f010 fe8e 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a11c:	480d      	ldr	r0, [pc, #52]	@ (800a154 <StopJoin+0x78>)
 800a11e:	f001 fdd1 	bl	800bcc4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a122:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <StopJoin+0x70>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2101      	movs	r1, #1
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 ff47 	bl	800bfbc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a12e:	4804      	ldr	r0, [pc, #16]	@ (800a140 <StopJoin+0x64>)
 800a130:	f010 fc0a 	bl	801a948 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a134:	4808      	ldr	r0, [pc, #32]	@ (800a158 <StopJoin+0x7c>)
 800a136:	f010 fc07 	bl	801a948 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a13a:	bf00      	nop
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000033c 	.word	0x2000033c
 800a144:	0801b82c 	.word	0x0801b82c
 800a148:	0801b84c 	.word	0x0801b84c
 800a14c:	20000020 	.word	0x20000020
 800a150:	0801b860 	.word	0x0801b860
 800a154:	20000070 	.word	0x20000070
 800a158:	20000354 	.word	0x20000354

0800a15c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <OnStopJoinTimerEvent+0x20>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d103      	bne.n	800a174 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a16c:	2100      	movs	r1, #0
 800a16e:	2008      	movs	r0, #8
 800a170:	f010 fb34 	bl	801a7dc <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20000020 	.word	0x20000020

0800a180 <StoreContext>:

static void StoreContext(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a186:	23ff      	movs	r3, #255	@ 0xff
 800a188:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a18a:	f002 fc95 	bl	800cab8 <LmHandlerNvmDataStore>
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a196:	f113 0f08 	cmn.w	r3, #8
 800a19a:	d106      	bne.n	800a1aa <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a19c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c8 <StoreContext+0x48>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	2002      	movs	r0, #2
 800a1a4:	f010 fe48 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a1a8:	e00a      	b.n	800a1c0 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d105      	bne.n	800a1c0 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <StoreContext+0x4c>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	2002      	movs	r0, #2
 800a1bc:	f010 fe3c 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	0801b880 	.word	0x0801b880
 800a1cc:	0801b898 	.word	0x0801b898

0800a1d0 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d106      	bne.n	800a1ee <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a1e0:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <OnNvmDataChange+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	2002      	movs	r0, #2
 800a1e8:	f010 fe26 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a1ec:	e005      	b.n	800a1fa <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a1ee:	4b06      	ldr	r3, [pc, #24]	@ (800a208 <OnNvmDataChange+0x38>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	2002      	movs	r0, #2
 800a1f6:	f010 fe1f 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	0801b8b0 	.word	0x0801b8b0
 800a208:	0801b8c4 	.word	0x0801b8c4

0800a20c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a216:	f7fa f931 	bl	800447c <HAL_FLASH_Unlock>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d11c      	bne.n	800a25a <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a220:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <OnStoreContextRequest+0x58>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	029a      	lsls	r2, r3, #10
 800a226:	4b10      	ldr	r3, [pc, #64]	@ (800a268 <OnStoreContextRequest+0x5c>)
 800a228:	4013      	ands	r3, r2
 800a22a:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800a22e:	fbb2 f1f3 	udiv	r1, r2, r3
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	0adb      	lsrs	r3, r3, #11
 800a23a:	2200      	movs	r2, #0
 800a23c:	2101      	movs	r1, #1
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f6 ffd3 	bl	80011ea <FLASH_IF_EraseByPages>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a24a:	2300      	movs	r3, #0
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4806      	ldr	r0, [pc, #24]	@ (800a26c <OnStoreContextRequest+0x60>)
 800a252:	f7f6 fee9 	bl	8001028 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a256:	f7fa f933 	bl	80044c0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	1fff75e0 	.word	0x1fff75e0
 800a268:	03fffc00 	.word	0x03fffc00
 800a26c:	0803f000 	.word	0x0803f000

0800a270 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	4903      	ldr	r1, [pc, #12]	@ (800a290 <OnRestoreContextRequest+0x20>)
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f00f fd8e 	bl	8019da4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0803f000 	.word	0x0803f000

0800a294 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a298:	4b15      	ldr	r3, [pc, #84]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a2a4:	4b12      	ldr	r3, [pc, #72]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a2aa:	4b11      	ldr	r3, [pc, #68]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	f043 0301 	orr.w	r3, r3, #1
 800a2b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2ba:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10d      	bne.n	800a2e0 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f4 <LoraInfo_Init+0x60>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	f010 fdb4 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a2d0:	bf00      	nop
 800a2d2:	f010 fd9f 	bl	801ae14 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d1fa      	bne.n	800a2d2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a2dc:	bf00      	nop
 800a2de:	e7fd      	b.n	800a2dc <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a2e0:	4b03      	ldr	r3, [pc, #12]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a2e6:	4b02      	ldr	r3, [pc, #8]	@ (800a2f0 <LoraInfo_Init+0x5c>)
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a2ec:	bf00      	nop
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	200004a8 	.word	0x200004a8
 800a2f4:	0801b8d8 	.word	0x0801b8d8

0800a2f8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a2fc:	4b02      	ldr	r3, [pc, #8]	@ (800a308 <LoraInfo_GetPtr+0x10>)
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	46bd      	mov	sp, r7
 800a302:	bc80      	pop	{r7}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	200004a8 	.word	0x200004a8

0800a30c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a310:	f7f8 f9bb 	bl	800268a <BSP_RADIO_Init>
 800a314:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a316:	4618      	mov	r0, r3
 800a318:	bd80      	pop	{r7, pc}

0800a31a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	4603      	mov	r3, r0
 800a322:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	4618      	mov	r0, r3
 800a328:	f7f8 f9e0 	bl	80026ec <BSP_RADIO_ConfigRFSwitch>
 800a32c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a33a:	f7f8 fa25 	bl	8002788 <BSP_RADIO_GetTxConfig>
 800a33e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a340:	4618      	mov	r0, r3
 800a342:	bd80      	pop	{r7, pc}

0800a344 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a348:	f7f8 fa25 	bl	8002796 <BSP_RADIO_IsTCXO>
 800a34c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a34e:	4618      	mov	r0, r3
 800a350:	bd80      	pop	{r7, pc}

0800a352 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a356:	f7f8 fa25 	bl	80027a4 <BSP_RADIO_IsDCDC>
 800a35a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f8 fa20 	bl	80027b2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a372:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	33f1      	adds	r3, #241	@ 0xf1
 800a388:	2210      	movs	r2, #16
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f00c fa3f 	bl	8016810 <memset1>
    ctx->M_n = 0;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	22f0      	movs	r2, #240	@ 0xf0
 800a39e:	2100      	movs	r1, #0
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f00c fa35 	bl	8016810 <memset1>
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	2110      	movs	r1, #16
 800a3be:	6838      	ldr	r0, [r7, #0]
 800a3c0:	f000 fe5c 	bl	800b07c <lorawan_aes_set_key>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08c      	sub	sp, #48	@ 0x30
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 80a1 	beq.w	800a526 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a3ea:	f1c3 0310 	rsb	r3, r3, #16
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	bf28      	it	cs
 800a3f4:	4613      	movcs	r3, r2
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a404:	4413      	add	r3, r2
 800a406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a408:	b292      	uxth	r2, r2
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f00c f9c4 	bl	801679a <memcpy1>
        ctx->M_n += mlen;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a428:	2b0f      	cmp	r3, #15
 800a42a:	f240 808d 	bls.w	800a548 <AES_CMAC_Update+0x17c>
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	429a      	cmp	r2, r3
 800a434:	f000 8088 	beq.w	800a548 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a438:	2300      	movs	r3, #0
 800a43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a43c:	e015      	b.n	800a46a <AES_CMAC_Update+0x9e>
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a442:	4413      	add	r3, r2
 800a444:	33f1      	adds	r3, #241	@ 0xf1
 800a446:	781a      	ldrb	r2, [r3, #0]
 800a448:	68f9      	ldr	r1, [r7, #12]
 800a44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44c:	440b      	add	r3, r1
 800a44e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	4053      	eors	r3, r2
 800a456:	b2d9      	uxtb	r1, r3
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45c:	4413      	add	r3, r2
 800a45e:	33f1      	adds	r3, #241	@ 0xf1
 800a460:	460a      	mov	r2, r1
 800a462:	701a      	strb	r2, [r3, #0]
 800a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a466:	3301      	adds	r3, #1
 800a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46c:	2b0f      	cmp	r3, #15
 800a46e:	dde6      	ble.n	800a43e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a476:	f107 0314 	add.w	r3, r7, #20
 800a47a:	2210      	movs	r2, #16
 800a47c:	4618      	mov	r0, r3
 800a47e:	f00c f98c 	bl	801679a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	f107 0114 	add.w	r1, r7, #20
 800a488:	f107 0314 	add.w	r3, r7, #20
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fed3 	bl	800b238 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	33f1      	adds	r3, #241	@ 0xf1
 800a496:	f107 0114 	add.w	r1, r7, #20
 800a49a:	2210      	movs	r2, #16
 800a49c:	4618      	mov	r0, r3
 800a49e:	f00c f97c 	bl	801679a <memcpy1>

        data += mlen;
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a4b2:	e038      	b.n	800a526 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4b8:	e013      	b.n	800a4e2 <AES_CMAC_Update+0x116>
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4be:	4413      	add	r3, r2
 800a4c0:	33f1      	adds	r3, #241	@ 0xf1
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	440b      	add	r3, r1
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	4053      	eors	r3, r2
 800a4ce:	b2d9      	uxtb	r1, r3
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	4413      	add	r3, r2
 800a4d6:	33f1      	adds	r3, #241	@ 0xf1
 800a4d8:	460a      	mov	r2, r1
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	3301      	adds	r3, #1
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	2b0f      	cmp	r3, #15
 800a4e6:	dde8      	ble.n	800a4ba <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a4ee:	f107 0314 	add.w	r3, r7, #20
 800a4f2:	2210      	movs	r2, #16
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f00c f950 	bl	801679a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	f107 0114 	add.w	r1, r7, #20
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fe97 	bl	800b238 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	33f1      	adds	r3, #241	@ 0xf1
 800a50e:	f107 0114 	add.w	r1, r7, #20
 800a512:	2210      	movs	r2, #16
 800a514:	4618      	mov	r0, r3
 800a516:	f00c f940 	bl	801679a <memcpy1>

        data += 16;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	3310      	adds	r3, #16
 800a51e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3b10      	subs	r3, #16
 800a524:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d8c3      	bhi.n	800a4b4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	b292      	uxth	r2, r2
 800a536:	68b9      	ldr	r1, [r7, #8]
 800a538:	4618      	mov	r0, r3
 800a53a:	f00c f92e 	bl	801679a <memcpy1>
    ctx->M_n = len;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a546:	e000      	b.n	800a54a <AES_CMAC_Update+0x17e>
            return;
 800a548:	bf00      	nop
}
 800a54a:	3730      	adds	r7, #48	@ 0x30
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b092      	sub	sp, #72	@ 0x48
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a55a:	f107 031c 	add.w	r3, r7, #28
 800a55e:	2210      	movs	r2, #16
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f00c f954 	bl	8016810 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	f107 011c 	add.w	r1, r7, #28
 800a56e:	f107 031c 	add.w	r3, r7, #28
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fe60 	bl	800b238 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a578:	7f3b      	ldrb	r3, [r7, #28]
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	da30      	bge.n	800a5e2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a580:	2300      	movs	r3, #0
 800a582:	647b      	str	r3, [r7, #68]	@ 0x44
 800a584:	e01b      	b.n	800a5be <AES_CMAC_Final+0x6e>
 800a586:	f107 021c 	add.w	r2, r7, #28
 800a58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a58c:	4413      	add	r3, r2
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	b25a      	sxtb	r2, r3
 800a594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a596:	3301      	adds	r3, #1
 800a598:	3348      	adds	r3, #72	@ 0x48
 800a59a:	443b      	add	r3, r7
 800a59c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a5a0:	09db      	lsrs	r3, r3, #7
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	b2d9      	uxtb	r1, r3
 800a5ac:	f107 021c 	add.w	r2, r7, #28
 800a5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5b2:	4413      	add	r3, r2
 800a5b4:	460a      	mov	r2, r1
 800a5b6:	701a      	strb	r2, [r3, #0]
 800a5b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5c0:	2b0e      	cmp	r3, #14
 800a5c2:	dde0      	ble.n	800a586 <AES_CMAC_Final+0x36>
 800a5c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a5d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5d4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a5d8:	43db      	mvns	r3, r3
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e0:	e027      	b.n	800a632 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5e6:	e01b      	b.n	800a620 <AES_CMAC_Final+0xd0>
 800a5e8:	f107 021c 	add.w	r2, r7, #28
 800a5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	b25a      	sxtb	r2, r3
 800a5f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	3348      	adds	r3, #72	@ 0x48
 800a5fc:	443b      	add	r3, r7
 800a5fe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a602:	09db      	lsrs	r3, r3, #7
 800a604:	b2db      	uxtb	r3, r3
 800a606:	b25b      	sxtb	r3, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	b25b      	sxtb	r3, r3
 800a60c:	b2d9      	uxtb	r1, r3
 800a60e:	f107 021c 	add.w	r2, r7, #28
 800a612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a614:	4413      	add	r3, r2
 800a616:	460a      	mov	r2, r1
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a61c:	3301      	adds	r3, #1
 800a61e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a622:	2b0e      	cmp	r3, #14
 800a624:	dde0      	ble.n	800a5e8 <AES_CMAC_Final+0x98>
 800a626:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a638:	2b10      	cmp	r3, #16
 800a63a:	d11d      	bne.n	800a678 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a640:	e016      	b.n	800a670 <AES_CMAC_Final+0x120>
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a646:	4413      	add	r3, r2
 800a648:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a64c:	781a      	ldrb	r2, [r3, #0]
 800a64e:	f107 011c 	add.w	r1, r7, #28
 800a652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a654:	440b      	add	r3, r1
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	4053      	eors	r3, r2
 800a65a:	b2d9      	uxtb	r1, r3
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a660:	4413      	add	r3, r2
 800a662:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a666:	460a      	mov	r2, r1
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66c:	3301      	adds	r3, #1
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a672:	2b0f      	cmp	r3, #15
 800a674:	dde5      	ble.n	800a642 <AES_CMAC_Final+0xf2>
 800a676:	e096      	b.n	800a7a6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a678:	7f3b      	ldrb	r3, [r7, #28]
 800a67a:	b25b      	sxtb	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	da30      	bge.n	800a6e2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a680:	2300      	movs	r3, #0
 800a682:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a684:	e01b      	b.n	800a6be <AES_CMAC_Final+0x16e>
 800a686:	f107 021c 	add.w	r2, r7, #28
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	4413      	add	r3, r2
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	b25a      	sxtb	r2, r3
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	3301      	adds	r3, #1
 800a698:	3348      	adds	r3, #72	@ 0x48
 800a69a:	443b      	add	r3, r7
 800a69c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a6a0:	09db      	lsrs	r3, r3, #7
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	b25b      	sxtb	r3, r3
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	b2d9      	uxtb	r1, r3
 800a6ac:	f107 021c 	add.w	r2, r7, #28
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b2:	4413      	add	r3, r2
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	701a      	strb	r2, [r3, #0]
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	2b0e      	cmp	r3, #14
 800a6c2:	dde0      	ble.n	800a686 <AES_CMAC_Final+0x136>
 800a6c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a6d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6d4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a6d8:	43db      	mvns	r3, r3
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e0:	e027      	b.n	800a732 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e6:	e01b      	b.n	800a720 <AES_CMAC_Final+0x1d0>
 800a6e8:	f107 021c 	add.w	r2, r7, #28
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ee:	4413      	add	r3, r2
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	b25a      	sxtb	r2, r3
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	3348      	adds	r3, #72	@ 0x48
 800a6fc:	443b      	add	r3, r7
 800a6fe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a702:	09db      	lsrs	r3, r3, #7
 800a704:	b2db      	uxtb	r3, r3
 800a706:	b25b      	sxtb	r3, r3
 800a708:	4313      	orrs	r3, r2
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	b2d9      	uxtb	r1, r3
 800a70e:	f107 021c 	add.w	r2, r7, #28
 800a712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a714:	4413      	add	r3, r2
 800a716:	460a      	mov	r2, r1
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	3301      	adds	r3, #1
 800a71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a722:	2b0e      	cmp	r3, #14
 800a724:	dde0      	ble.n	800a6e8 <AES_CMAC_Final+0x198>
 800a726:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	4413      	add	r3, r2
 800a73c:	2280      	movs	r2, #128	@ 0x80
 800a73e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a742:	e007      	b.n	800a754 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	4413      	add	r3, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a768:	2b0f      	cmp	r3, #15
 800a76a:	d9eb      	bls.n	800a744 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a76c:	2300      	movs	r3, #0
 800a76e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a770:	e016      	b.n	800a7a0 <AES_CMAC_Final+0x250>
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	4413      	add	r3, r2
 800a778:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	f107 011c 	add.w	r1, r7, #28
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	440b      	add	r3, r1
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	4053      	eors	r3, r2
 800a78a:	b2d9      	uxtb	r1, r3
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	4413      	add	r3, r2
 800a792:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a796:	460a      	mov	r2, r1
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	3301      	adds	r3, #1
 800a79e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	2b0f      	cmp	r3, #15
 800a7a4:	dde5      	ble.n	800a772 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7aa:	e015      	b.n	800a7d8 <AES_CMAC_Final+0x288>
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b0:	4413      	add	r3, r2
 800a7b2:	33f1      	adds	r3, #241	@ 0xf1
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	440b      	add	r3, r1
 800a7bc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	4053      	eors	r3, r2
 800a7c4:	b2d9      	uxtb	r1, r3
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	4413      	add	r3, r2
 800a7cc:	33f1      	adds	r3, #241	@ 0xf1
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	2b0f      	cmp	r3, #15
 800a7dc:	dde6      	ble.n	800a7ac <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a7e4:	f107 030c 	add.w	r3, r7, #12
 800a7e8:	2210      	movs	r2, #16
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f00b ffd5 	bl	801679a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	f107 030c 	add.w	r3, r7, #12
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fd1d 	bl	800b238 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a7fe:	f107 031c 	add.w	r3, r7, #28
 800a802:	2210      	movs	r2, #16
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f00c f802 	bl	8016810 <memset1>
}
 800a80c:	bf00      	nop
 800a80e:	3748      	adds	r7, #72	@ 0x48
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3301      	adds	r3, #1
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	7852      	ldrb	r2, [r2, #1]
 800a82e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3302      	adds	r3, #2
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	7892      	ldrb	r2, [r2, #2]
 800a838:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3303      	adds	r3, #3
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	78d2      	ldrb	r2, [r2, #3]
 800a842:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3304      	adds	r3, #4
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	7912      	ldrb	r2, [r2, #4]
 800a84c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3305      	adds	r3, #5
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	7952      	ldrb	r2, [r2, #5]
 800a856:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3306      	adds	r3, #6
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	7992      	ldrb	r2, [r2, #6]
 800a860:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3307      	adds	r3, #7
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	79d2      	ldrb	r2, [r2, #7]
 800a86a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3308      	adds	r3, #8
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	7a12      	ldrb	r2, [r2, #8]
 800a874:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3309      	adds	r3, #9
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	7a52      	ldrb	r2, [r2, #9]
 800a87e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	330a      	adds	r3, #10
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	7a92      	ldrb	r2, [r2, #10]
 800a888:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	330b      	adds	r3, #11
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	7ad2      	ldrb	r2, [r2, #11]
 800a892:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	330c      	adds	r3, #12
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	7b12      	ldrb	r2, [r2, #12]
 800a89c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	330d      	adds	r3, #13
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	7b52      	ldrb	r2, [r2, #13]
 800a8a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	330e      	adds	r3, #14
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	7b92      	ldrb	r2, [r2, #14]
 800a8b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	330f      	adds	r3, #15
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	7bd2      	ldrb	r2, [r2, #15]
 800a8ba:	701a      	strb	r2, [r3, #0]
#endif
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr

0800a8c6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a8d4:	e007      	b.n	800a8e6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	1c53      	adds	r3, r2, #1
 800a8da:	60bb      	str	r3, [r7, #8]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	1c59      	adds	r1, r3, #1
 800a8e0:	60f9      	str	r1, [r7, #12]
 800a8e2:	7812      	ldrb	r2, [r2, #0]
 800a8e4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	1e5a      	subs	r2, r3, #1
 800a8ea:	71fa      	strb	r2, [r7, #7]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f2      	bne.n	800a8d6 <copy_block_nn+0x10>
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bc80      	pop	{r7}
 800a8fa:	4770      	bx	lr

0800a8fc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	781a      	ldrb	r2, [r3, #0]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	4053      	eors	r3, r2
 800a910:	b2da      	uxtb	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3301      	adds	r3, #1
 800a91a:	7819      	ldrb	r1, [r3, #0]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3301      	adds	r3, #1
 800a926:	404a      	eors	r2, r1
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3302      	adds	r3, #2
 800a930:	7819      	ldrb	r1, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	3302      	adds	r3, #2
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3302      	adds	r3, #2
 800a93c:	404a      	eors	r2, r1
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3303      	adds	r3, #3
 800a946:	7819      	ldrb	r1, [r3, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	3303      	adds	r3, #3
 800a94c:	781a      	ldrb	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3303      	adds	r3, #3
 800a952:	404a      	eors	r2, r1
 800a954:	b2d2      	uxtb	r2, r2
 800a956:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	7819      	ldrb	r1, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	3304      	adds	r3, #4
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3304      	adds	r3, #4
 800a968:	404a      	eors	r2, r1
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3305      	adds	r3, #5
 800a972:	7819      	ldrb	r1, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	3305      	adds	r3, #5
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3305      	adds	r3, #5
 800a97e:	404a      	eors	r2, r1
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3306      	adds	r3, #6
 800a988:	7819      	ldrb	r1, [r3, #0]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	3306      	adds	r3, #6
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3306      	adds	r3, #6
 800a994:	404a      	eors	r2, r1
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3307      	adds	r3, #7
 800a99e:	7819      	ldrb	r1, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	3307      	adds	r3, #7
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3307      	adds	r3, #7
 800a9aa:	404a      	eors	r2, r1
 800a9ac:	b2d2      	uxtb	r2, r2
 800a9ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	7819      	ldrb	r1, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	404a      	eors	r2, r1
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3309      	adds	r3, #9
 800a9ca:	7819      	ldrb	r1, [r3, #0]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	3309      	adds	r3, #9
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3309      	adds	r3, #9
 800a9d6:	404a      	eors	r2, r1
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	330a      	adds	r3, #10
 800a9e0:	7819      	ldrb	r1, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	330a      	adds	r3, #10
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	330a      	adds	r3, #10
 800a9ec:	404a      	eors	r2, r1
 800a9ee:	b2d2      	uxtb	r2, r2
 800a9f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	330b      	adds	r3, #11
 800a9f6:	7819      	ldrb	r1, [r3, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	330b      	adds	r3, #11
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	330b      	adds	r3, #11
 800aa02:	404a      	eors	r2, r1
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	7819      	ldrb	r1, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	330c      	adds	r3, #12
 800aa12:	781a      	ldrb	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	330c      	adds	r3, #12
 800aa18:	404a      	eors	r2, r1
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	330d      	adds	r3, #13
 800aa22:	7819      	ldrb	r1, [r3, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	330d      	adds	r3, #13
 800aa28:	781a      	ldrb	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	330d      	adds	r3, #13
 800aa2e:	404a      	eors	r2, r1
 800aa30:	b2d2      	uxtb	r2, r2
 800aa32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	330e      	adds	r3, #14
 800aa38:	7819      	ldrb	r1, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	330e      	adds	r3, #14
 800aa3e:	781a      	ldrb	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	330e      	adds	r3, #14
 800aa44:	404a      	eors	r2, r1
 800aa46:	b2d2      	uxtb	r2, r2
 800aa48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	330f      	adds	r3, #15
 800aa4e:	7819      	ldrb	r1, [r3, #0]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	330f      	adds	r3, #15
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	330f      	adds	r3, #15
 800aa5a:	404a      	eors	r2, r1
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	701a      	strb	r2, [r3, #0]
#endif
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr

0800aa6a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	781a      	ldrb	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4053      	eors	r3, r2
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	7819      	ldrb	r1, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	781a      	ldrb	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	404a      	eors	r2, r1
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	3302      	adds	r3, #2
 800aaa0:	7819      	ldrb	r1, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3302      	adds	r3, #2
 800aaac:	404a      	eors	r2, r1
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	3303      	adds	r3, #3
 800aab6:	7819      	ldrb	r1, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3303      	adds	r3, #3
 800aabc:	781a      	ldrb	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3303      	adds	r3, #3
 800aac2:	404a      	eors	r2, r1
 800aac4:	b2d2      	uxtb	r2, r2
 800aac6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3304      	adds	r3, #4
 800aacc:	7819      	ldrb	r1, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3304      	adds	r3, #4
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3304      	adds	r3, #4
 800aad8:	404a      	eors	r2, r1
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	3305      	adds	r3, #5
 800aae2:	7819      	ldrb	r1, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3305      	adds	r3, #5
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3305      	adds	r3, #5
 800aaee:	404a      	eors	r2, r1
 800aaf0:	b2d2      	uxtb	r2, r2
 800aaf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	3306      	adds	r3, #6
 800aaf8:	7819      	ldrb	r1, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3306      	adds	r3, #6
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3306      	adds	r3, #6
 800ab04:	404a      	eors	r2, r1
 800ab06:	b2d2      	uxtb	r2, r2
 800ab08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	7819      	ldrb	r1, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3307      	adds	r3, #7
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3307      	adds	r3, #7
 800ab1a:	404a      	eors	r2, r1
 800ab1c:	b2d2      	uxtb	r2, r2
 800ab1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	3308      	adds	r3, #8
 800ab24:	7819      	ldrb	r1, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3308      	adds	r3, #8
 800ab30:	404a      	eors	r2, r1
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	3309      	adds	r3, #9
 800ab3a:	7819      	ldrb	r1, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3309      	adds	r3, #9
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3309      	adds	r3, #9
 800ab46:	404a      	eors	r2, r1
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	330a      	adds	r3, #10
 800ab50:	7819      	ldrb	r1, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	330a      	adds	r3, #10
 800ab56:	781a      	ldrb	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	330a      	adds	r3, #10
 800ab5c:	404a      	eors	r2, r1
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	330b      	adds	r3, #11
 800ab66:	7819      	ldrb	r1, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	330b      	adds	r3, #11
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	330b      	adds	r3, #11
 800ab72:	404a      	eors	r2, r1
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	330c      	adds	r3, #12
 800ab7c:	7819      	ldrb	r1, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	330c      	adds	r3, #12
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	330c      	adds	r3, #12
 800ab88:	404a      	eors	r2, r1
 800ab8a:	b2d2      	uxtb	r2, r2
 800ab8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	330d      	adds	r3, #13
 800ab92:	7819      	ldrb	r1, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	330d      	adds	r3, #13
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	330d      	adds	r3, #13
 800ab9e:	404a      	eors	r2, r1
 800aba0:	b2d2      	uxtb	r2, r2
 800aba2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	330e      	adds	r3, #14
 800aba8:	7819      	ldrb	r1, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	330e      	adds	r3, #14
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	330e      	adds	r3, #14
 800abb4:	404a      	eors	r2, r1
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	330f      	adds	r3, #15
 800abbe:	7819      	ldrb	r1, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	330f      	adds	r3, #15
 800abc4:	781a      	ldrb	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	330f      	adds	r3, #15
 800abca:	404a      	eors	r2, r1
 800abcc:	b2d2      	uxtb	r2, r2
 800abce:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800abd0:	bf00      	nop
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr

0800abda <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fe88 	bl	800a8fc <xor_block>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	4b48      	ldr	r3, [pc, #288]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac04:	5c9a      	ldrb	r2, [r3, r2]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	701a      	strb	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	4619      	mov	r1, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4a43      	ldr	r2, [pc, #268]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac18:	5c52      	ldrb	r2, [r2, r1]
 800ac1a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3308      	adds	r3, #8
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	4619      	mov	r1, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3308      	adds	r3, #8
 800ac28:	4a3e      	ldr	r2, [pc, #248]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac2a:	5c52      	ldrb	r2, [r2, r1]
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	330c      	adds	r3, #12
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	4619      	mov	r1, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	330c      	adds	r3, #12
 800ac3a:	4a3a      	ldr	r2, [pc, #232]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac3c:	5c52      	ldrb	r2, [r2, r1]
 800ac3e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	73fb      	strb	r3, [r7, #15]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3305      	adds	r3, #5
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	3301      	adds	r3, #1
 800ac52:	4a34      	ldr	r2, [pc, #208]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac54:	5c52      	ldrb	r2, [r2, r1]
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3309      	adds	r3, #9
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3305      	adds	r3, #5
 800ac64:	4a2f      	ldr	r2, [pc, #188]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac66:	5c52      	ldrb	r2, [r2, r1]
 800ac68:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	330d      	adds	r3, #13
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3309      	adds	r3, #9
 800ac76:	4a2b      	ldr	r2, [pc, #172]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac78:	5c52      	ldrb	r2, [r2, r1]
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	7bfa      	ldrb	r2, [r7, #15]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	330d      	adds	r3, #13
 800ac82:	4928      	ldr	r1, [pc, #160]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac84:	5c8a      	ldrb	r2, [r1, r2]
 800ac86:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	73fb      	strb	r3, [r7, #15]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	330a      	adds	r3, #10
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	4619      	mov	r1, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3302      	adds	r3, #2
 800ac9a:	4a22      	ldr	r2, [pc, #136]	@ (800ad24 <shift_sub_rows+0x130>)
 800ac9c:	5c52      	ldrb	r2, [r2, r1]
 800ac9e:	701a      	strb	r2, [r3, #0]
 800aca0:	7bfa      	ldrb	r2, [r7, #15]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	330a      	adds	r3, #10
 800aca6:	491f      	ldr	r1, [pc, #124]	@ (800ad24 <shift_sub_rows+0x130>)
 800aca8:	5c8a      	ldrb	r2, [r1, r2]
 800acaa:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	799b      	ldrb	r3, [r3, #6]
 800acb0:	73fb      	strb	r3, [r7, #15]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	330e      	adds	r3, #14
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	4619      	mov	r1, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3306      	adds	r3, #6
 800acbe:	4a19      	ldr	r2, [pc, #100]	@ (800ad24 <shift_sub_rows+0x130>)
 800acc0:	5c52      	ldrb	r2, [r2, r1]
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	7bfa      	ldrb	r2, [r7, #15]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	330e      	adds	r3, #14
 800acca:	4916      	ldr	r1, [pc, #88]	@ (800ad24 <shift_sub_rows+0x130>)
 800accc:	5c8a      	ldrb	r2, [r1, r2]
 800acce:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7bdb      	ldrb	r3, [r3, #15]
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	330b      	adds	r3, #11
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	4619      	mov	r1, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	330f      	adds	r3, #15
 800ace2:	4a10      	ldr	r2, [pc, #64]	@ (800ad24 <shift_sub_rows+0x130>)
 800ace4:	5c52      	ldrb	r2, [r2, r1]
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3307      	adds	r3, #7
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	4619      	mov	r1, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	330b      	adds	r3, #11
 800acf4:	4a0b      	ldr	r2, [pc, #44]	@ (800ad24 <shift_sub_rows+0x130>)
 800acf6:	5c52      	ldrb	r2, [r2, r1]
 800acf8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3303      	adds	r3, #3
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3307      	adds	r3, #7
 800ad06:	4a07      	ldr	r2, [pc, #28]	@ (800ad24 <shift_sub_rows+0x130>)
 800ad08:	5c52      	ldrb	r2, [r2, r1]
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	7bfa      	ldrb	r2, [r7, #15]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3303      	adds	r3, #3
 800ad12:	4904      	ldr	r1, [pc, #16]	@ (800ad24 <shift_sub_rows+0x130>)
 800ad14:	5c8a      	ldrb	r2, [r1, r2]
 800ad16:	701a      	strb	r2, [r3, #0]
}
 800ad18:	bf00      	nop
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	0801bec8 	.word	0x0801bec8

0800ad28 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff fd6c 	bl	800a814 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ad3c:	7a3b      	ldrb	r3, [r7, #8]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4b9a      	ldr	r3, [pc, #616]	@ (800afac <mix_sub_columns+0x284>)
 800ad42:	5c9a      	ldrb	r2, [r3, r2]
 800ad44:	7b7b      	ldrb	r3, [r7, #13]
 800ad46:	4619      	mov	r1, r3
 800ad48:	4b99      	ldr	r3, [pc, #612]	@ (800afb0 <mix_sub_columns+0x288>)
 800ad4a:	5c5b      	ldrb	r3, [r3, r1]
 800ad4c:	4053      	eors	r3, r2
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	7cbb      	ldrb	r3, [r7, #18]
 800ad52:	4619      	mov	r1, r3
 800ad54:	4b97      	ldr	r3, [pc, #604]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ad56:	5c5b      	ldrb	r3, [r3, r1]
 800ad58:	4053      	eors	r3, r2
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4b94      	ldr	r3, [pc, #592]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ad62:	5c5b      	ldrb	r3, [r3, r1]
 800ad64:	4053      	eors	r3, r2
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ad6c:	7a3b      	ldrb	r3, [r7, #8]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4b90      	ldr	r3, [pc, #576]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ad72:	5c9a      	ldrb	r2, [r3, r2]
 800ad74:	7b7b      	ldrb	r3, [r7, #13]
 800ad76:	4619      	mov	r1, r3
 800ad78:	4b8c      	ldr	r3, [pc, #560]	@ (800afac <mix_sub_columns+0x284>)
 800ad7a:	5c5b      	ldrb	r3, [r3, r1]
 800ad7c:	4053      	eors	r3, r2
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	7cbb      	ldrb	r3, [r7, #18]
 800ad82:	4619      	mov	r1, r3
 800ad84:	4b8a      	ldr	r3, [pc, #552]	@ (800afb0 <mix_sub_columns+0x288>)
 800ad86:	5c5b      	ldrb	r3, [r3, r1]
 800ad88:	4053      	eors	r3, r2
 800ad8a:	b2d9      	uxtb	r1, r3
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4b88      	ldr	r3, [pc, #544]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ad92:	5c9a      	ldrb	r2, [r3, r2]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3301      	adds	r3, #1
 800ad98:	404a      	eors	r2, r1
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ad9e:	7a3b      	ldrb	r3, [r7, #8]
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b84      	ldr	r3, [pc, #528]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ada4:	5c9a      	ldrb	r2, [r3, r2]
 800ada6:	7b7b      	ldrb	r3, [r7, #13]
 800ada8:	4619      	mov	r1, r3
 800adaa:	4b82      	ldr	r3, [pc, #520]	@ (800afb4 <mix_sub_columns+0x28c>)
 800adac:	5c5b      	ldrb	r3, [r3, r1]
 800adae:	4053      	eors	r3, r2
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	7cbb      	ldrb	r3, [r7, #18]
 800adb4:	4619      	mov	r1, r3
 800adb6:	4b7d      	ldr	r3, [pc, #500]	@ (800afac <mix_sub_columns+0x284>)
 800adb8:	5c5b      	ldrb	r3, [r3, r1]
 800adba:	4053      	eors	r3, r2
 800adbc:	b2d9      	uxtb	r1, r3
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	461a      	mov	r2, r3
 800adc2:	4b7b      	ldr	r3, [pc, #492]	@ (800afb0 <mix_sub_columns+0x288>)
 800adc4:	5c9a      	ldrb	r2, [r3, r2]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3302      	adds	r3, #2
 800adca:	404a      	eors	r2, r1
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800add0:	7a3b      	ldrb	r3, [r7, #8]
 800add2:	461a      	mov	r2, r3
 800add4:	4b76      	ldr	r3, [pc, #472]	@ (800afb0 <mix_sub_columns+0x288>)
 800add6:	5c9a      	ldrb	r2, [r3, r2]
 800add8:	7b7b      	ldrb	r3, [r7, #13]
 800adda:	4619      	mov	r1, r3
 800addc:	4b75      	ldr	r3, [pc, #468]	@ (800afb4 <mix_sub_columns+0x28c>)
 800adde:	5c5b      	ldrb	r3, [r3, r1]
 800ade0:	4053      	eors	r3, r2
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	7cbb      	ldrb	r3, [r7, #18]
 800ade6:	4619      	mov	r1, r3
 800ade8:	4b72      	ldr	r3, [pc, #456]	@ (800afb4 <mix_sub_columns+0x28c>)
 800adea:	5c5b      	ldrb	r3, [r3, r1]
 800adec:	4053      	eors	r3, r2
 800adee:	b2d9      	uxtb	r1, r3
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	461a      	mov	r2, r3
 800adf4:	4b6d      	ldr	r3, [pc, #436]	@ (800afac <mix_sub_columns+0x284>)
 800adf6:	5c9a      	ldrb	r2, [r3, r2]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3303      	adds	r3, #3
 800adfc:	404a      	eors	r2, r1
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ae02:	7b3b      	ldrb	r3, [r7, #12]
 800ae04:	461a      	mov	r2, r3
 800ae06:	4b69      	ldr	r3, [pc, #420]	@ (800afac <mix_sub_columns+0x284>)
 800ae08:	5c9a      	ldrb	r2, [r3, r2]
 800ae0a:	7c7b      	ldrb	r3, [r7, #17]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4b68      	ldr	r3, [pc, #416]	@ (800afb0 <mix_sub_columns+0x288>)
 800ae10:	5c5b      	ldrb	r3, [r3, r1]
 800ae12:	4053      	eors	r3, r2
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	7dbb      	ldrb	r3, [r7, #22]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4b66      	ldr	r3, [pc, #408]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae1c:	5c5b      	ldrb	r3, [r3, r1]
 800ae1e:	4053      	eors	r3, r2
 800ae20:	b2d9      	uxtb	r1, r3
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	461a      	mov	r2, r3
 800ae26:	4b63      	ldr	r3, [pc, #396]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae28:	5c9a      	ldrb	r2, [r3, r2]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	404a      	eors	r2, r1
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ae34:	7b3b      	ldrb	r3, [r7, #12]
 800ae36:	461a      	mov	r2, r3
 800ae38:	4b5e      	ldr	r3, [pc, #376]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae3a:	5c9a      	ldrb	r2, [r3, r2]
 800ae3c:	7c7b      	ldrb	r3, [r7, #17]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4b5a      	ldr	r3, [pc, #360]	@ (800afac <mix_sub_columns+0x284>)
 800ae42:	5c5b      	ldrb	r3, [r3, r1]
 800ae44:	4053      	eors	r3, r2
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	7dbb      	ldrb	r3, [r7, #22]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4b58      	ldr	r3, [pc, #352]	@ (800afb0 <mix_sub_columns+0x288>)
 800ae4e:	5c5b      	ldrb	r3, [r3, r1]
 800ae50:	4053      	eors	r3, r2
 800ae52:	b2d9      	uxtb	r1, r3
 800ae54:	7afb      	ldrb	r3, [r7, #11]
 800ae56:	461a      	mov	r2, r3
 800ae58:	4b56      	ldr	r3, [pc, #344]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae5a:	5c9a      	ldrb	r2, [r3, r2]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3305      	adds	r3, #5
 800ae60:	404a      	eors	r2, r1
 800ae62:	b2d2      	uxtb	r2, r2
 800ae64:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ae66:	7b3b      	ldrb	r3, [r7, #12]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4b52      	ldr	r3, [pc, #328]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae6c:	5c9a      	ldrb	r2, [r3, r2]
 800ae6e:	7c7b      	ldrb	r3, [r7, #17]
 800ae70:	4619      	mov	r1, r3
 800ae72:	4b50      	ldr	r3, [pc, #320]	@ (800afb4 <mix_sub_columns+0x28c>)
 800ae74:	5c5b      	ldrb	r3, [r3, r1]
 800ae76:	4053      	eors	r3, r2
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	7dbb      	ldrb	r3, [r7, #22]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4b4b      	ldr	r3, [pc, #300]	@ (800afac <mix_sub_columns+0x284>)
 800ae80:	5c5b      	ldrb	r3, [r3, r1]
 800ae82:	4053      	eors	r3, r2
 800ae84:	b2d9      	uxtb	r1, r3
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4b49      	ldr	r3, [pc, #292]	@ (800afb0 <mix_sub_columns+0x288>)
 800ae8c:	5c9a      	ldrb	r2, [r3, r2]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3306      	adds	r3, #6
 800ae92:	404a      	eors	r2, r1
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae98:	7b3b      	ldrb	r3, [r7, #12]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	4b44      	ldr	r3, [pc, #272]	@ (800afb0 <mix_sub_columns+0x288>)
 800ae9e:	5c9a      	ldrb	r2, [r3, r2]
 800aea0:	7c7b      	ldrb	r3, [r7, #17]
 800aea2:	4619      	mov	r1, r3
 800aea4:	4b43      	ldr	r3, [pc, #268]	@ (800afb4 <mix_sub_columns+0x28c>)
 800aea6:	5c5b      	ldrb	r3, [r3, r1]
 800aea8:	4053      	eors	r3, r2
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	7dbb      	ldrb	r3, [r7, #22]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4b40      	ldr	r3, [pc, #256]	@ (800afb4 <mix_sub_columns+0x28c>)
 800aeb2:	5c5b      	ldrb	r3, [r3, r1]
 800aeb4:	4053      	eors	r3, r2
 800aeb6:	b2d9      	uxtb	r1, r3
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b3b      	ldr	r3, [pc, #236]	@ (800afac <mix_sub_columns+0x284>)
 800aebe:	5c9a      	ldrb	r2, [r3, r2]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3307      	adds	r3, #7
 800aec4:	404a      	eors	r2, r1
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800aeca:	7c3b      	ldrb	r3, [r7, #16]
 800aecc:	461a      	mov	r2, r3
 800aece:	4b37      	ldr	r3, [pc, #220]	@ (800afac <mix_sub_columns+0x284>)
 800aed0:	5c9a      	ldrb	r2, [r3, r2]
 800aed2:	7d7b      	ldrb	r3, [r7, #21]
 800aed4:	4619      	mov	r1, r3
 800aed6:	4b36      	ldr	r3, [pc, #216]	@ (800afb0 <mix_sub_columns+0x288>)
 800aed8:	5c5b      	ldrb	r3, [r3, r1]
 800aeda:	4053      	eors	r3, r2
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	7abb      	ldrb	r3, [r7, #10]
 800aee0:	4619      	mov	r1, r3
 800aee2:	4b34      	ldr	r3, [pc, #208]	@ (800afb4 <mix_sub_columns+0x28c>)
 800aee4:	5c5b      	ldrb	r3, [r3, r1]
 800aee6:	4053      	eors	r3, r2
 800aee8:	b2d9      	uxtb	r1, r3
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	461a      	mov	r2, r3
 800aeee:	4b31      	ldr	r3, [pc, #196]	@ (800afb4 <mix_sub_columns+0x28c>)
 800aef0:	5c9a      	ldrb	r2, [r3, r2]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3308      	adds	r3, #8
 800aef6:	404a      	eors	r2, r1
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800aefc:	7c3b      	ldrb	r3, [r7, #16]
 800aefe:	461a      	mov	r2, r3
 800af00:	4b2c      	ldr	r3, [pc, #176]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af02:	5c9a      	ldrb	r2, [r3, r2]
 800af04:	7d7b      	ldrb	r3, [r7, #21]
 800af06:	4619      	mov	r1, r3
 800af08:	4b28      	ldr	r3, [pc, #160]	@ (800afac <mix_sub_columns+0x284>)
 800af0a:	5c5b      	ldrb	r3, [r3, r1]
 800af0c:	4053      	eors	r3, r2
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	7abb      	ldrb	r3, [r7, #10]
 800af12:	4619      	mov	r1, r3
 800af14:	4b26      	ldr	r3, [pc, #152]	@ (800afb0 <mix_sub_columns+0x288>)
 800af16:	5c5b      	ldrb	r3, [r3, r1]
 800af18:	4053      	eors	r3, r2
 800af1a:	b2d9      	uxtb	r1, r3
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	461a      	mov	r2, r3
 800af20:	4b24      	ldr	r3, [pc, #144]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af22:	5c9a      	ldrb	r2, [r3, r2]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3309      	adds	r3, #9
 800af28:	404a      	eors	r2, r1
 800af2a:	b2d2      	uxtb	r2, r2
 800af2c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800af2e:	7c3b      	ldrb	r3, [r7, #16]
 800af30:	461a      	mov	r2, r3
 800af32:	4b20      	ldr	r3, [pc, #128]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af34:	5c9a      	ldrb	r2, [r3, r2]
 800af36:	7d7b      	ldrb	r3, [r7, #21]
 800af38:	4619      	mov	r1, r3
 800af3a:	4b1e      	ldr	r3, [pc, #120]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af3c:	5c5b      	ldrb	r3, [r3, r1]
 800af3e:	4053      	eors	r3, r2
 800af40:	b2da      	uxtb	r2, r3
 800af42:	7abb      	ldrb	r3, [r7, #10]
 800af44:	4619      	mov	r1, r3
 800af46:	4b19      	ldr	r3, [pc, #100]	@ (800afac <mix_sub_columns+0x284>)
 800af48:	5c5b      	ldrb	r3, [r3, r1]
 800af4a:	4053      	eors	r3, r2
 800af4c:	b2d9      	uxtb	r1, r3
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
 800af50:	461a      	mov	r2, r3
 800af52:	4b17      	ldr	r3, [pc, #92]	@ (800afb0 <mix_sub_columns+0x288>)
 800af54:	5c9a      	ldrb	r2, [r3, r2]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	330a      	adds	r3, #10
 800af5a:	404a      	eors	r2, r1
 800af5c:	b2d2      	uxtb	r2, r2
 800af5e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800af60:	7c3b      	ldrb	r3, [r7, #16]
 800af62:	461a      	mov	r2, r3
 800af64:	4b12      	ldr	r3, [pc, #72]	@ (800afb0 <mix_sub_columns+0x288>)
 800af66:	5c9a      	ldrb	r2, [r3, r2]
 800af68:	7d7b      	ldrb	r3, [r7, #21]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4b11      	ldr	r3, [pc, #68]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af6e:	5c5b      	ldrb	r3, [r3, r1]
 800af70:	4053      	eors	r3, r2
 800af72:	b2da      	uxtb	r2, r3
 800af74:	7abb      	ldrb	r3, [r7, #10]
 800af76:	4619      	mov	r1, r3
 800af78:	4b0e      	ldr	r3, [pc, #56]	@ (800afb4 <mix_sub_columns+0x28c>)
 800af7a:	5c5b      	ldrb	r3, [r3, r1]
 800af7c:	4053      	eors	r3, r2
 800af7e:	b2d9      	uxtb	r1, r3
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	461a      	mov	r2, r3
 800af84:	4b09      	ldr	r3, [pc, #36]	@ (800afac <mix_sub_columns+0x284>)
 800af86:	5c9a      	ldrb	r2, [r3, r2]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	330b      	adds	r3, #11
 800af8c:	404a      	eors	r2, r1
 800af8e:	b2d2      	uxtb	r2, r2
 800af90:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800af92:	7d3b      	ldrb	r3, [r7, #20]
 800af94:	461a      	mov	r2, r3
 800af96:	4b05      	ldr	r3, [pc, #20]	@ (800afac <mix_sub_columns+0x284>)
 800af98:	5c9a      	ldrb	r2, [r3, r2]
 800af9a:	7a7b      	ldrb	r3, [r7, #9]
 800af9c:	4619      	mov	r1, r3
 800af9e:	4b04      	ldr	r3, [pc, #16]	@ (800afb0 <mix_sub_columns+0x288>)
 800afa0:	5c5b      	ldrb	r3, [r3, r1]
 800afa2:	4053      	eors	r3, r2
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	4619      	mov	r1, r3
 800afaa:	e005      	b.n	800afb8 <mix_sub_columns+0x290>
 800afac:	0801bfc8 	.word	0x0801bfc8
 800afb0:	0801c0c8 	.word	0x0801c0c8
 800afb4:	0801bec8 	.word	0x0801bec8
 800afb8:	4b2d      	ldr	r3, [pc, #180]	@ (800b070 <mix_sub_columns+0x348>)
 800afba:	5c5b      	ldrb	r3, [r3, r1]
 800afbc:	4053      	eors	r3, r2
 800afbe:	b2d9      	uxtb	r1, r3
 800afc0:	7cfb      	ldrb	r3, [r7, #19]
 800afc2:	461a      	mov	r2, r3
 800afc4:	4b2a      	ldr	r3, [pc, #168]	@ (800b070 <mix_sub_columns+0x348>)
 800afc6:	5c9a      	ldrb	r2, [r3, r2]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	330c      	adds	r3, #12
 800afcc:	404a      	eors	r2, r1
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800afd2:	7d3b      	ldrb	r3, [r7, #20]
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b26      	ldr	r3, [pc, #152]	@ (800b070 <mix_sub_columns+0x348>)
 800afd8:	5c9a      	ldrb	r2, [r3, r2]
 800afda:	7a7b      	ldrb	r3, [r7, #9]
 800afdc:	4619      	mov	r1, r3
 800afde:	4b25      	ldr	r3, [pc, #148]	@ (800b074 <mix_sub_columns+0x34c>)
 800afe0:	5c5b      	ldrb	r3, [r3, r1]
 800afe2:	4053      	eors	r3, r2
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	4619      	mov	r1, r3
 800afea:	4b23      	ldr	r3, [pc, #140]	@ (800b078 <mix_sub_columns+0x350>)
 800afec:	5c5b      	ldrb	r3, [r3, r1]
 800afee:	4053      	eors	r3, r2
 800aff0:	b2d9      	uxtb	r1, r3
 800aff2:	7cfb      	ldrb	r3, [r7, #19]
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b1e      	ldr	r3, [pc, #120]	@ (800b070 <mix_sub_columns+0x348>)
 800aff8:	5c9a      	ldrb	r2, [r3, r2]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	330d      	adds	r3, #13
 800affe:	404a      	eors	r2, r1
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b004:	7d3b      	ldrb	r3, [r7, #20]
 800b006:	461a      	mov	r2, r3
 800b008:	4b19      	ldr	r3, [pc, #100]	@ (800b070 <mix_sub_columns+0x348>)
 800b00a:	5c9a      	ldrb	r2, [r3, r2]
 800b00c:	7a7b      	ldrb	r3, [r7, #9]
 800b00e:	4619      	mov	r1, r3
 800b010:	4b17      	ldr	r3, [pc, #92]	@ (800b070 <mix_sub_columns+0x348>)
 800b012:	5c5b      	ldrb	r3, [r3, r1]
 800b014:	4053      	eors	r3, r2
 800b016:	b2da      	uxtb	r2, r3
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	4619      	mov	r1, r3
 800b01c:	4b15      	ldr	r3, [pc, #84]	@ (800b074 <mix_sub_columns+0x34c>)
 800b01e:	5c5b      	ldrb	r3, [r3, r1]
 800b020:	4053      	eors	r3, r2
 800b022:	b2d9      	uxtb	r1, r3
 800b024:	7cfb      	ldrb	r3, [r7, #19]
 800b026:	461a      	mov	r2, r3
 800b028:	4b13      	ldr	r3, [pc, #76]	@ (800b078 <mix_sub_columns+0x350>)
 800b02a:	5c9a      	ldrb	r2, [r3, r2]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	330e      	adds	r3, #14
 800b030:	404a      	eors	r2, r1
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b036:	7d3b      	ldrb	r3, [r7, #20]
 800b038:	461a      	mov	r2, r3
 800b03a:	4b0f      	ldr	r3, [pc, #60]	@ (800b078 <mix_sub_columns+0x350>)
 800b03c:	5c9a      	ldrb	r2, [r3, r2]
 800b03e:	7a7b      	ldrb	r3, [r7, #9]
 800b040:	4619      	mov	r1, r3
 800b042:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <mix_sub_columns+0x348>)
 800b044:	5c5b      	ldrb	r3, [r3, r1]
 800b046:	4053      	eors	r3, r2
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	4619      	mov	r1, r3
 800b04e:	4b08      	ldr	r3, [pc, #32]	@ (800b070 <mix_sub_columns+0x348>)
 800b050:	5c5b      	ldrb	r3, [r3, r1]
 800b052:	4053      	eors	r3, r2
 800b054:	b2d9      	uxtb	r1, r3
 800b056:	7cfb      	ldrb	r3, [r7, #19]
 800b058:	461a      	mov	r2, r3
 800b05a:	4b06      	ldr	r3, [pc, #24]	@ (800b074 <mix_sub_columns+0x34c>)
 800b05c:	5c9a      	ldrb	r2, [r3, r2]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	330f      	adds	r3, #15
 800b062:	404a      	eors	r2, r1
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	701a      	strb	r2, [r3, #0]
  }
 800b068:	bf00      	nop
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	0801bec8 	.word	0x0801bec8
 800b074:	0801bfc8 	.word	0x0801bfc8
 800b078:	0801c0c8 	.word	0x0801c0c8

0800b07c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	460b      	mov	r3, r1
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b08a:	7afb      	ldrb	r3, [r7, #11]
 800b08c:	3b10      	subs	r3, #16
 800b08e:	2b10      	cmp	r3, #16
 800b090:	bf8c      	ite	hi
 800b092:	2201      	movhi	r2, #1
 800b094:	2200      	movls	r2, #0
 800b096:	b2d2      	uxtb	r2, r2
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d10b      	bne.n	800b0b4 <lorawan_aes_set_key+0x38>
 800b09c:	4a64      	ldr	r2, [pc, #400]	@ (800b230 <lorawan_aes_set_key+0x1b4>)
 800b09e:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bf14      	ite	ne
 800b0aa:	2301      	movne	r3, #1
 800b0ac:	2300      	moveq	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d105      	bne.n	800b0c0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b0bc:	23ff      	movs	r3, #255	@ 0xff
 800b0be:	e0b2      	b.n	800b226 <lorawan_aes_set_key+0x1aa>
        break;
 800b0c0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7afa      	ldrb	r2, [r7, #11]
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fbfc 	bl	800a8c6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b0ce:	7afb      	ldrb	r3, [r7, #11]
 800b0d0:	331c      	adds	r3, #28
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b0d8:	7c7b      	ldrb	r3, [r7, #17]
 800b0da:	091b      	lsrs	r3, r3, #4
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	75fb      	strb	r3, [r7, #23]
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	75bb      	strb	r3, [r7, #22]
 800b0f0:	e093      	b.n	800b21a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	3b04      	subs	r3, #4
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	5cd3      	ldrb	r3, [r2, r3]
 800b0fa:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	3b03      	subs	r3, #3
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	5cd3      	ldrb	r3, [r2, r3]
 800b104:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	3b02      	subs	r3, #2
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	5cd3      	ldrb	r3, [r2, r3]
 800b10e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	3b01      	subs	r3, #1
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	5cd3      	ldrb	r3, [r2, r3]
 800b118:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	7afa      	ldrb	r2, [r7, #11]
 800b11e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b122:	fb01 f202 	mul.w	r2, r1, r2
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d127      	bne.n	800b17e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b12e:	7d7b      	ldrb	r3, [r7, #21]
 800b130:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b132:	7d3b      	ldrb	r3, [r7, #20]
 800b134:	4a3f      	ldr	r2, [pc, #252]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b136:	5cd2      	ldrb	r2, [r2, r3]
 800b138:	7dbb      	ldrb	r3, [r7, #22]
 800b13a:	4053      	eors	r3, r2
 800b13c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b13e:	7cfb      	ldrb	r3, [r7, #19]
 800b140:	4a3c      	ldr	r2, [pc, #240]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b142:	5cd3      	ldrb	r3, [r2, r3]
 800b144:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b146:	7cbb      	ldrb	r3, [r7, #18]
 800b148:	4a3a      	ldr	r2, [pc, #232]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b14a:	5cd3      	ldrb	r3, [r2, r3]
 800b14c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b14e:	7c3b      	ldrb	r3, [r7, #16]
 800b150:	4a38      	ldr	r2, [pc, #224]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b152:	5cd3      	ldrb	r3, [r2, r3]
 800b154:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b156:	7dbb      	ldrb	r3, [r7, #22]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	b25a      	sxtb	r2, r3
 800b15c:	7dbb      	ldrb	r3, [r7, #22]
 800b15e:	09db      	lsrs	r3, r3, #7
 800b160:	b2db      	uxtb	r3, r3
 800b162:	4619      	mov	r1, r3
 800b164:	0049      	lsls	r1, r1, #1
 800b166:	440b      	add	r3, r1
 800b168:	4619      	mov	r1, r3
 800b16a:	00c8      	lsls	r0, r1, #3
 800b16c:	4619      	mov	r1, r3
 800b16e:	4603      	mov	r3, r0
 800b170:	440b      	add	r3, r1
 800b172:	b2db      	uxtb	r3, r3
 800b174:	b25b      	sxtb	r3, r3
 800b176:	4053      	eors	r3, r2
 800b178:	b25b      	sxtb	r3, r3
 800b17a:	75bb      	strb	r3, [r7, #22]
 800b17c:	e01c      	b.n	800b1b8 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	2b18      	cmp	r3, #24
 800b182:	d919      	bls.n	800b1b8 <lorawan_aes_set_key+0x13c>
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	7afa      	ldrb	r2, [r7, #11]
 800b188:	fbb3 f1f2 	udiv	r1, r3, r2
 800b18c:	fb01 f202 	mul.w	r2, r1, r2
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b10      	cmp	r3, #16
 800b196:	d10f      	bne.n	800b1b8 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b198:	7d7b      	ldrb	r3, [r7, #21]
 800b19a:	4a26      	ldr	r2, [pc, #152]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b19c:	5cd3      	ldrb	r3, [r2, r3]
 800b19e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b1a0:	7d3b      	ldrb	r3, [r7, #20]
 800b1a2:	4a24      	ldr	r2, [pc, #144]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b1a4:	5cd3      	ldrb	r3, [r2, r3]
 800b1a6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b1a8:	7cfb      	ldrb	r3, [r7, #19]
 800b1aa:	4a22      	ldr	r2, [pc, #136]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b1ac:	5cd3      	ldrb	r3, [r2, r3]
 800b1ae:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b1b0:	7cbb      	ldrb	r3, [r7, #18]
 800b1b2:	4a20      	ldr	r2, [pc, #128]	@ (800b234 <lorawan_aes_set_key+0x1b8>)
 800b1b4:	5cd3      	ldrb	r3, [r2, r3]
 800b1b6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b1b8:	7dfa      	ldrb	r2, [r7, #23]
 800b1ba:	7afb      	ldrb	r3, [r7, #11]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b1c0:	7c3b      	ldrb	r3, [r7, #16]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	5cd1      	ldrb	r1, [r2, r3]
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	7d7a      	ldrb	r2, [r7, #21]
 800b1ca:	404a      	eors	r2, r1
 800b1cc:	b2d1      	uxtb	r1, r2
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b1d2:	7c3b      	ldrb	r3, [r7, #16]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	5cd1      	ldrb	r1, [r2, r3]
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	7d3a      	ldrb	r2, [r7, #20]
 800b1e0:	404a      	eors	r2, r1
 800b1e2:	b2d1      	uxtb	r1, r2
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b1e8:	7c3b      	ldrb	r3, [r7, #16]
 800b1ea:	3302      	adds	r3, #2
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	5cd1      	ldrb	r1, [r2, r3]
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	7cfa      	ldrb	r2, [r7, #19]
 800b1f6:	404a      	eors	r2, r1
 800b1f8:	b2d1      	uxtb	r1, r2
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b1fe:	7c3b      	ldrb	r3, [r7, #16]
 800b200:	3303      	adds	r3, #3
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	5cd1      	ldrb	r1, [r2, r3]
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	3303      	adds	r3, #3
 800b20a:	7cba      	ldrb	r2, [r7, #18]
 800b20c:	404a      	eors	r2, r1
 800b20e:	b2d1      	uxtb	r1, r2
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	3304      	adds	r3, #4
 800b218:	75fb      	strb	r3, [r7, #23]
 800b21a:	7dfa      	ldrb	r2, [r7, #23]
 800b21c:	7c7b      	ldrb	r3, [r7, #17]
 800b21e:	429a      	cmp	r2, r3
 800b220:	f4ff af67 	bcc.w	800b0f2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	00010101 	.word	0x00010101
 800b234:	0801bec8 	.word	0x0801bec8

0800b238 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	@ 0x28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d038      	beq.n	800b2c0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	f107 0314 	add.w	r3, r7, #20
 800b254:	68f9      	ldr	r1, [r7, #12]
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff fc07 	bl	800aa6a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b262:	e014      	b.n	800b28e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b264:	f107 0314 	add.w	r3, r7, #20
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fd5d 	bl	800ad28 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b274:	0112      	lsls	r2, r2, #4
 800b276:	441a      	add	r2, r3
 800b278:	f107 0314 	add.w	r3, r7, #20
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff fcab 	bl	800abda <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b288:	3301      	adds	r3, #1
 800b28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b294:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b298:	429a      	cmp	r2, r3
 800b29a:	d3e3      	bcc.n	800b264 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b29c:	f107 0314 	add.w	r3, r7, #20
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fca7 	bl	800abf4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b2ac:	0112      	lsls	r2, r2, #4
 800b2ae:	441a      	add	r2, r3
 800b2b0:	f107 0314 	add.w	r3, r7, #20
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	68b8      	ldr	r0, [r7, #8]
 800b2b8:	f7ff fbd7 	bl	800aa6a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e000      	b.n	800b2c2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b2c0:	23ff      	movs	r3, #255	@ 0xff
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3728      	adds	r7, #40	@ 0x28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ce:	b09d      	sub	sp, #116	@ 0x74
 800b2d0:	af10      	add	r7, sp, #64	@ 0x40
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b2d8:	2306      	movs	r3, #6
 800b2da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b2de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 f9a7 	bl	800b63c <SecureElementGetKeyByID>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b2f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f040 80b0 	bne.w	800b45e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b2fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b306:	4b58      	ldr	r3, [pc, #352]	@ (800b468 <PrintKey+0x19c>)
 800b308:	2200      	movs	r2, #0
 800b30a:	2100      	movs	r1, #0
 800b30c:	2002      	movs	r0, #2
 800b30e:	f00f fd93 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b312:	e056      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d106      	bne.n	800b32a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b31c:	4b53      	ldr	r3, [pc, #332]	@ (800b46c <PrintKey+0x1a0>)
 800b31e:	2200      	movs	r2, #0
 800b320:	2100      	movs	r1, #0
 800b322:	2002      	movs	r0, #2
 800b324:	f00f fd88 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b328:	e04b      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b32a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b32e:	2b03      	cmp	r3, #3
 800b330:	d106      	bne.n	800b340 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b332:	4b4f      	ldr	r3, [pc, #316]	@ (800b470 <PrintKey+0x1a4>)
 800b334:	2200      	movs	r2, #0
 800b336:	2100      	movs	r1, #0
 800b338:	2002      	movs	r0, #2
 800b33a:	f00f fd7d 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b33e:	e040      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b344:	2b02      	cmp	r3, #2
 800b346:	d106      	bne.n	800b356 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b348:	4b4a      	ldr	r3, [pc, #296]	@ (800b474 <PrintKey+0x1a8>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	2100      	movs	r1, #0
 800b34e:	2002      	movs	r0, #2
 800b350:	f00f fd72 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b354:	e035      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d106      	bne.n	800b36c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b35e:	4b46      	ldr	r3, [pc, #280]	@ (800b478 <PrintKey+0x1ac>)
 800b360:	2200      	movs	r2, #0
 800b362:	2100      	movs	r1, #0
 800b364:	2002      	movs	r0, #2
 800b366:	f00f fd67 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b36a:	e02a      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b370:	2b7f      	cmp	r3, #127	@ 0x7f
 800b372:	d106      	bne.n	800b382 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b374:	4b41      	ldr	r3, [pc, #260]	@ (800b47c <PrintKey+0x1b0>)
 800b376:	2200      	movs	r2, #0
 800b378:	2100      	movs	r1, #0
 800b37a:	2002      	movs	r0, #2
 800b37c:	f00f fd5c 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b380:	e01f      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b386:	2b80      	cmp	r3, #128	@ 0x80
 800b388:	d106      	bne.n	800b398 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b38a:	4b3d      	ldr	r3, [pc, #244]	@ (800b480 <PrintKey+0x1b4>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	2100      	movs	r1, #0
 800b390:	2002      	movs	r0, #2
 800b392:	f00f fd51 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b396:	e014      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b39c:	2b81      	cmp	r3, #129	@ 0x81
 800b39e:	d106      	bne.n	800b3ae <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b3a0:	4b38      	ldr	r3, [pc, #224]	@ (800b484 <PrintKey+0x1b8>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	2002      	movs	r0, #2
 800b3a8:	f00f fd46 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 800b3ac:	e009      	b.n	800b3c2 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b3ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b2:	2b82      	cmp	r3, #130	@ 0x82
 800b3b4:	d105      	bne.n	800b3c2 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b3b6:	4b34      	ldr	r3, [pc, #208]	@ (800b488 <PrintKey+0x1bc>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	2002      	movs	r0, #2
 800b3be:	f00f fd3b 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ca:	789b      	ldrb	r3, [r3, #2]
 800b3cc:	461c      	mov	r4, r3
 800b3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d0:	78db      	ldrb	r3, [r3, #3]
 800b3d2:	461d      	mov	r5, r3
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	791b      	ldrb	r3, [r3, #4]
 800b3d8:	461e      	mov	r6, r3
 800b3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3dc:	795b      	ldrb	r3, [r3, #5]
 800b3de:	623b      	str	r3, [r7, #32]
 800b3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e2:	799b      	ldrb	r3, [r3, #6]
 800b3e4:	61fb      	str	r3, [r7, #28]
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	79db      	ldrb	r3, [r3, #7]
 800b3ea:	61bb      	str	r3, [r7, #24]
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	7a1b      	ldrb	r3, [r3, #8]
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	7a5b      	ldrb	r3, [r3, #9]
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	7a9b      	ldrb	r3, [r3, #10]
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b400:	7adb      	ldrb	r3, [r3, #11]
 800b402:	60bb      	str	r3, [r7, #8]
 800b404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b406:	7b1b      	ldrb	r3, [r3, #12]
 800b408:	607b      	str	r3, [r7, #4]
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	7b5b      	ldrb	r3, [r3, #13]
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	7b9b      	ldrb	r3, [r3, #14]
 800b414:	4619      	mov	r1, r3
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b418:	7bdb      	ldrb	r3, [r3, #15]
 800b41a:	461a      	mov	r2, r3
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	7c1b      	ldrb	r3, [r3, #16]
 800b420:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b422:	920e      	str	r2, [sp, #56]	@ 0x38
 800b424:	910d      	str	r1, [sp, #52]	@ 0x34
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	920c      	str	r2, [sp, #48]	@ 0x30
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	920a      	str	r2, [sp, #40]	@ 0x28
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	9209      	str	r2, [sp, #36]	@ 0x24
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	9208      	str	r2, [sp, #32]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	9207      	str	r2, [sp, #28]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	9206      	str	r2, [sp, #24]
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	9205      	str	r2, [sp, #20]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	9603      	str	r6, [sp, #12]
 800b44c:	9502      	str	r5, [sp, #8]
 800b44e:	9401      	str	r4, [sp, #4]
 800b450:	9000      	str	r0, [sp, #0]
 800b452:	4b0e      	ldr	r3, [pc, #56]	@ (800b48c <PrintKey+0x1c0>)
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	2002      	movs	r0, #2
 800b45a:	f00f fced 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b45e:	bf00      	nop
 800b460:	3734      	adds	r7, #52	@ 0x34
 800b462:	46bd      	mov	sp, r7
 800b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b466:	bf00      	nop
 800b468:	0801b928 	.word	0x0801b928
 800b46c:	0801b940 	.word	0x0801b940
 800b470:	0801b958 	.word	0x0801b958
 800b474:	0801b970 	.word	0x0801b970
 800b478:	0801b988 	.word	0x0801b988
 800b47c:	0801b9a0 	.word	0x0801b9a0
 800b480:	0801b9b8 	.word	0x0801b9b8
 800b484:	0801b9d0 	.word	0x0801b9d0
 800b488:	0801b9e8 	.word	0x0801b9e8
 800b48c:	0801ba00 	.word	0x0801ba00

0800b490 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	6039      	str	r1, [r7, #0]
 800b49a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
 800b4a0:	e01a      	b.n	800b4d8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b4a2:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <GetKeyByID+0x5c>)
 800b4a4:	6819      	ldr	r1, [r3, #0]
 800b4a6:	7bfa      	ldrb	r2, [r7, #15]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	011b      	lsls	r3, r3, #4
 800b4ac:	4413      	add	r3, r2
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3310      	adds	r3, #16
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	79fa      	ldrb	r2, [r7, #7]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d10b      	bne.n	800b4d2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b4ec <GetKeyByID+0x5c>)
 800b4bc:	6819      	ldr	r1, [r3, #0]
 800b4be:	7bfa      	ldrb	r2, [r7, #15]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	3310      	adds	r3, #16
 800b4c8:	18ca      	adds	r2, r1, r3
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e006      	b.n	800b4e0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	73fb      	strb	r3, [r7, #15]
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	d9e1      	bls.n	800b4a2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b4de:	2303      	movs	r3, #3
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	200004b8 	.word	0x200004b8

0800b4f0 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b4f0:	b590      	push	{r4, r7, lr}
 800b4f2:	b0d1      	sub	sp, #324	@ 0x144
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b4fa:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b4fe:	6020      	str	r0, [r4, #0]
 800b500:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b504:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b508:	6001      	str	r1, [r0, #0]
 800b50a:	4619      	mov	r1, r3
 800b50c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b510:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b51a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b51e:	460a      	mov	r2, r1
 800b520:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b522:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b526:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <ComputeCmac+0x48>
 800b530:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b538:	2302      	movs	r3, #2
 800b53a:	e05c      	b.n	800b5f6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b53c:	f107 0314 	add.w	r3, r7, #20
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe ff1b 	bl	800a37c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b546:	f107 0210 	add.w	r2, r7, #16
 800b54a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b54e:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4611      	mov	r1, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff ff9a 	bl	800b490 <GetKeyByID>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b562:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b566:	2b00      	cmp	r3, #0
 800b568:	d143      	bne.n	800b5f2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b56a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b56e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	f107 0314 	add.w	r3, r7, #20
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe ff16 	bl	800a3ae <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b582:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b586:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b590:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b594:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b598:	f107 0014 	add.w	r0, r7, #20
 800b59c:	2210      	movs	r2, #16
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	f7fe ff14 	bl	800a3cc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b5a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5a8:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b5ac:	881a      	ldrh	r2, [r3, #0]
 800b5ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b5b6:	f107 0014 	add.w	r0, r7, #20
 800b5ba:	6819      	ldr	r1, [r3, #0]
 800b5bc:	f7fe ff06 	bl	800a3cc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b5c0:	f107 0214 	add.w	r2, r7, #20
 800b5c4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe ffc0 	bl	800a550 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b5d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b5d4:	061a      	lsls	r2, r3, #24
 800b5d6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b5da:	041b      	lsls	r3, r3, #16
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b5e6:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b5f0:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b5f2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}

0800b600 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b610:	2302      	movs	r3, #2
 800b612:	e00a      	b.n	800b62a <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b614:	4a07      	ldr	r2, [pc, #28]	@ (800b634 <SecureElementInit+0x34>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b61a:	4b06      	ldr	r3, [pc, #24]	@ (800b634 <SecureElementInit+0x34>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	22c0      	movs	r2, #192	@ 0xc0
 800b620:	4905      	ldr	r1, [pc, #20]	@ (800b638 <SecureElementInit+0x38>)
 800b622:	4618      	mov	r0, r3
 800b624:	f00b f8b9 	bl	801679a <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	200004b8 	.word	0x200004b8
 800b638:	0801c3e0 	.word	0x0801c3e0

0800b63c <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e01a      	b.n	800b684 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b64e:	4b12      	ldr	r3, [pc, #72]	@ (800b698 <SecureElementGetKeyByID+0x5c>)
 800b650:	6819      	ldr	r1, [r3, #0]
 800b652:	7bfa      	ldrb	r2, [r7, #15]
 800b654:	4613      	mov	r3, r2
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	4413      	add	r3, r2
 800b65a:	440b      	add	r3, r1
 800b65c:	3310      	adds	r3, #16
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	79fa      	ldrb	r2, [r7, #7]
 800b662:	429a      	cmp	r2, r3
 800b664:	d10b      	bne.n	800b67e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b666:	4b0c      	ldr	r3, [pc, #48]	@ (800b698 <SecureElementGetKeyByID+0x5c>)
 800b668:	6819      	ldr	r1, [r3, #0]
 800b66a:	7bfa      	ldrb	r2, [r7, #15]
 800b66c:	4613      	mov	r3, r2
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	4413      	add	r3, r2
 800b672:	3310      	adds	r3, #16
 800b674:	18ca      	adds	r2, r1, r3
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b67a:	2300      	movs	r3, #0
 800b67c:	e006      	b.n	800b68c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	3301      	adds	r3, #1
 800b682:	73fb      	strb	r3, [r7, #15]
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b09      	cmp	r3, #9
 800b688:	d9e1      	bls.n	800b64e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b68a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	bc80      	pop	{r7}
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	200004b8 	.word	0x200004b8

0800b69c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b69e:	b08b      	sub	sp, #44	@ 0x2c
 800b6a0:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b6a2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7a0 <SecureElementPrintKeys+0x104>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	2002      	movs	r0, #2
 800b6aa:	f00f fbc5 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f7ff fe0c 	bl	800b2cc <PrintKey>
    PrintKey(NWK_KEY);
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	f7ff fe09 	bl	800b2cc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b6ba:	4b3a      	ldr	r3, [pc, #232]	@ (800b7a4 <SecureElementPrintKeys+0x108>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2100      	movs	r1, #0
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	f00f fbb9 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b6c6:	2003      	movs	r0, #3
 800b6c8:	f7ff fe00 	bl	800b2cc <PrintKey>
    PrintKey(NWK_S_KEY);
 800b6cc:	2002      	movs	r0, #2
 800b6ce:	f7ff fdfd 	bl	800b2cc <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800b6d2:	4b35      	ldr	r3, [pc, #212]	@ (800b7a8 <SecureElementPrintKeys+0x10c>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	2002      	movs	r0, #2
 800b6da:	f00f fbad 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b6de:	4b33      	ldr	r3, [pc, #204]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4b31      	ldr	r3, [pc, #196]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	789b      	ldrb	r3, [r3, #2]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	78db      	ldrb	r3, [r3, #3]
 800b6fc:	461c      	mov	r4, r3
 800b6fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	791b      	ldrb	r3, [r3, #4]
 800b704:	461d      	mov	r5, r3
 800b706:	4b29      	ldr	r3, [pc, #164]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	795b      	ldrb	r3, [r3, #5]
 800b70c:	461e      	mov	r6, r3
 800b70e:	4b27      	ldr	r3, [pc, #156]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	799b      	ldrb	r3, [r3, #6]
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	4b25      	ldr	r3, [pc, #148]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	79db      	ldrb	r3, [r3, #7]
 800b71c:	9307      	str	r3, [sp, #28]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	9306      	str	r3, [sp, #24]
 800b722:	9605      	str	r6, [sp, #20]
 800b724:	9504      	str	r5, [sp, #16]
 800b726:	9403      	str	r4, [sp, #12]
 800b728:	9002      	str	r0, [sp, #8]
 800b72a:	9101      	str	r1, [sp, #4]
 800b72c:	9200      	str	r2, [sp, #0]
 800b72e:	4b20      	ldr	r3, [pc, #128]	@ (800b7b0 <SecureElementPrintKeys+0x114>)
 800b730:	2200      	movs	r2, #0
 800b732:	2100      	movs	r1, #0
 800b734:	2002      	movs	r0, #2
 800b736:	f00f fb7f 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b73a:	4b1c      	ldr	r3, [pc, #112]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	7a1b      	ldrb	r3, [r3, #8]
 800b740:	461a      	mov	r2, r3
 800b742:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	7a5b      	ldrb	r3, [r3, #9]
 800b748:	4619      	mov	r1, r3
 800b74a:	4b18      	ldr	r3, [pc, #96]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	7a9b      	ldrb	r3, [r3, #10]
 800b750:	4618      	mov	r0, r3
 800b752:	4b16      	ldr	r3, [pc, #88]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	7adb      	ldrb	r3, [r3, #11]
 800b758:	461c      	mov	r4, r3
 800b75a:	4b14      	ldr	r3, [pc, #80]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	7b1b      	ldrb	r3, [r3, #12]
 800b760:	461d      	mov	r5, r3
 800b762:	4b12      	ldr	r3, [pc, #72]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	7b5b      	ldrb	r3, [r3, #13]
 800b768:	461e      	mov	r6, r3
 800b76a:	4b10      	ldr	r3, [pc, #64]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	7b9b      	ldrb	r3, [r3, #14]
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <SecureElementPrintKeys+0x110>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	7bdb      	ldrb	r3, [r3, #15]
 800b778:	9307      	str	r3, [sp, #28]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	9306      	str	r3, [sp, #24]
 800b77e:	9605      	str	r6, [sp, #20]
 800b780:	9504      	str	r5, [sp, #16]
 800b782:	9403      	str	r4, [sp, #12]
 800b784:	9002      	str	r0, [sp, #8]
 800b786:	9101      	str	r1, [sp, #4]
 800b788:	9200      	str	r2, [sp, #0]
 800b78a:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <SecureElementPrintKeys+0x118>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	2100      	movs	r1, #0
 800b790:	2002      	movs	r0, #2
 800b792:	f00f fb51 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	0801ba54 	.word	0x0801ba54
 800b7a4:	0801ba6c 	.word	0x0801ba6c
 800b7a8:	0801ba84 	.word	0x0801ba84
 800b7ac:	200004b8 	.word	0x200004b8
 800b7b0:	0801ba9c 	.word	0x0801ba9c
 800b7b4:	0801badc 	.word	0x0801badc

0800b7b8 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800b7bc:	2004      	movs	r0, #4
 800b7be:	f7ff fd85 	bl	800b2cc <PrintKey>
    PrintKey(MC_KE_KEY);
 800b7c2:	207f      	movs	r0, #127	@ 0x7f
 800b7c4:	f7ff fd82 	bl	800b2cc <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800b7c8:	2002      	movs	r0, #2
 800b7ca:	f7ff fd7f 	bl	800b2cc <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800b7ce:	2003      	movs	r0, #3
 800b7d0:	f7ff fd7c 	bl	800b2cc <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	6039      	str	r1, [r7, #0]
 800b7e6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e04c      	b.n	800b88c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	77fb      	strb	r3, [r7, #31]
 800b7f6:	e045      	b.n	800b884 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b7f8:	4b26      	ldr	r3, [pc, #152]	@ (800b894 <SecureElementSetKey+0xb8>)
 800b7fa:	6819      	ldr	r1, [r3, #0]
 800b7fc:	7ffa      	ldrb	r2, [r7, #31]
 800b7fe:	4613      	mov	r3, r2
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	4413      	add	r3, r2
 800b804:	440b      	add	r3, r1
 800b806:	3310      	adds	r3, #16
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	79fa      	ldrb	r2, [r7, #7]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d136      	bne.n	800b87e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b80      	cmp	r3, #128	@ 0x80
 800b814:	d123      	bne.n	800b85e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800b816:	2306      	movs	r3, #6
 800b818:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	f107 0310 	add.w	r3, r7, #16
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	605a      	str	r2, [r3, #4]
 800b828:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b82a:	f107 030c 	add.w	r3, r7, #12
 800b82e:	227f      	movs	r2, #127	@ 0x7f
 800b830:	2110      	movs	r1, #16
 800b832:	6838      	ldr	r0, [r7, #0]
 800b834:	f000 f87d 	bl	800b932 <SecureElementAesEncrypt>
 800b838:	4603      	mov	r3, r0
 800b83a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b83c:	4b15      	ldr	r3, [pc, #84]	@ (800b894 <SecureElementSetKey+0xb8>)
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	7ffa      	ldrb	r2, [r7, #31]
 800b842:	4613      	mov	r3, r2
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	4413      	add	r3, r2
 800b848:	3310      	adds	r3, #16
 800b84a:	440b      	add	r3, r1
 800b84c:	3301      	adds	r3, #1
 800b84e:	f107 010c 	add.w	r1, r7, #12
 800b852:	2210      	movs	r2, #16
 800b854:	4618      	mov	r0, r3
 800b856:	f00a ffa0 	bl	801679a <memcpy1>
                return retval;
 800b85a:	7fbb      	ldrb	r3, [r7, #30]
 800b85c:	e016      	b.n	800b88c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <SecureElementSetKey+0xb8>)
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	7ffa      	ldrb	r2, [r7, #31]
 800b864:	4613      	mov	r3, r2
 800b866:	011b      	lsls	r3, r3, #4
 800b868:	4413      	add	r3, r2
 800b86a:	3310      	adds	r3, #16
 800b86c:	440b      	add	r3, r1
 800b86e:	3301      	adds	r3, #1
 800b870:	2210      	movs	r2, #16
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	4618      	mov	r0, r3
 800b876:	f00a ff90 	bl	801679a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e006      	b.n	800b88c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b87e:	7ffb      	ldrb	r3, [r7, #31]
 800b880:	3301      	adds	r3, #1
 800b882:	77fb      	strb	r3, [r7, #31]
 800b884:	7ffb      	ldrb	r3, [r7, #31]
 800b886:	2b09      	cmp	r3, #9
 800b888:	d9b6      	bls.n	800b7f8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b88a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	200004b8 	.word	0x200004b8

0800b898 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	80fb      	strh	r3, [r7, #6]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b8ae:	797b      	ldrb	r3, [r7, #5]
 800b8b0:	2b7e      	cmp	r3, #126	@ 0x7e
 800b8b2:	d901      	bls.n	800b8b8 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e009      	b.n	800b8cc <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b8b8:	7979      	ldrb	r1, [r7, #5]
 800b8ba:	88fa      	ldrh	r2, [r7, #6]
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	68b9      	ldr	r1, [r7, #8]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7ff fe13 	bl	800b4f0 <ComputeCmac>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	817b      	strh	r3, [r7, #10]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e01b      	b.n	800b92a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b8f2:	2306      	movs	r3, #6
 800b8f4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b8fa:	7a79      	ldrb	r1, [r7, #9]
 800b8fc:	897a      	ldrh	r2, [r7, #10]
 800b8fe:	f107 0310 	add.w	r3, r7, #16
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	460b      	mov	r3, r1
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	2000      	movs	r0, #0
 800b90a:	f7ff fdf1 	bl	800b4f0 <ComputeCmac>
 800b90e:	4603      	mov	r3, r0
 800b910:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
 800b91a:	e006      	b.n	800b92a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d001      	beq.n	800b928 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b924:	2301      	movs	r3, #1
 800b926:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b0c2      	sub	sp, #264	@ 0x108
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b942:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	4603      	mov	r3, r0
 800b94a:	817b      	strh	r3, [r7, #10]
 800b94c:	460b      	mov	r3, r1
 800b94e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d006      	beq.n	800b964 <SecureElementAesEncrypt+0x32>
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b964:	2302      	movs	r3, #2
 800b966:	e046      	b.n	800b9f6 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b968:	897b      	ldrh	r3, [r7, #10]
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	b29b      	uxth	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b974:	2305      	movs	r3, #5
 800b976:	e03e      	b.n	800b9f6 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b978:	f107 0314 	add.w	r3, r7, #20
 800b97c:	22f0      	movs	r2, #240	@ 0xf0
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f00a ff45 	bl	8016810 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b986:	f107 0210 	add.w	r2, r7, #16
 800b98a:	7a7b      	ldrb	r3, [r7, #9]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fd7e 	bl	800b490 <GetKeyByID>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b99a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d127      	bne.n	800b9f2 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	f107 0214 	add.w	r2, r7, #20
 800b9aa:	2110      	movs	r1, #16
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fb65 	bl	800b07c <lorawan_aes_set_key>

        uint8_t block = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800b9b8:	e018      	b.n	800b9ec <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b9ba:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	18d0      	adds	r0, r2, r3
 800b9c2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b9c6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b9ca:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f107 0214 	add.w	r2, r7, #20
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f7ff fc2e 	bl	800b238 <lorawan_aes_encrypt>
            block = block + 16;
 800b9dc:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b9e0:	3310      	adds	r3, #16
 800b9e2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800b9e6:	897b      	ldrh	r3, [r7, #10]
 800b9e8:	3b10      	subs	r3, #16
 800b9ea:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b9ec:	897b      	ldrh	r3, [r7, #10]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e3      	bne.n	800b9ba <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b9f2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba16:	2302      	movs	r3, #2
 800ba18:	e02e      	b.n	800ba78 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ba1a:	2306      	movs	r3, #6
 800ba1c:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800ba1e:	78bb      	ldrb	r3, [r7, #2]
 800ba20:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba22:	d104      	bne.n	800ba2e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	d001      	beq.n	800ba2e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	e024      	b.n	800ba78 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	f107 0310 	add.w	r3, r7, #16
 800ba36:	2200      	movs	r2, #0
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	605a      	str	r2, [r3, #4]
 800ba3c:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	78fa      	ldrb	r2, [r7, #3]
 800ba44:	2110      	movs	r1, #16
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff ff73 	bl	800b932 <SecureElementAesEncrypt>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ba50:	7ffb      	ldrb	r3, [r7, #31]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800ba56:	7ffb      	ldrb	r3, [r7, #31]
 800ba58:	e00e      	b.n	800ba78 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800ba5a:	f107 020c 	add.w	r2, r7, #12
 800ba5e:	78bb      	ldrb	r3, [r7, #2]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff feba 	bl	800b7dc <SecureElementSetKey>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ba6c:	7ffb      	ldrb	r3, [r7, #31]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800ba72:	7ffb      	ldrb	r3, [r7, #31]
 800ba74:	e000      	b.n	800ba78 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ba76:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607b      	str	r3, [r7, #4]
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <SecureElementProcessJoinAccept+0x24>
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <SecureElementProcessJoinAccept+0x24>
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800baa4:	2302      	movs	r3, #2
 800baa6:	e064      	b.n	800bb72 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800baa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800baac:	2b21      	cmp	r3, #33	@ 0x21
 800baae:	d901      	bls.n	800bab4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bab0:	2305      	movs	r3, #5
 800bab2:	e05e      	b.n	800bb72 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bab4:	2301      	movs	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800babc:	b29b      	uxth	r3, r3
 800babe:	461a      	mov	r2, r3
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bac4:	f00a fe69 	bl	801679a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	1c58      	adds	r0, r3, #1
 800bacc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b299      	uxth	r1, r3
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	3301      	adds	r3, #1
 800bada:	7dfa      	ldrb	r2, [r7, #23]
 800badc:	f7ff ff29 	bl	800b932 <SecureElementAesEncrypt>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bae6:	2307      	movs	r3, #7
 800bae8:	e043      	b.n	800bb72 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baec:	330b      	adds	r3, #11
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	09db      	lsrs	r3, r3, #7
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bafc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb00:	3b04      	subs	r3, #4
 800bb02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb04:	4413      	add	r3, r2
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bb0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb0e:	3b03      	subs	r3, #3
 800bb10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb12:	4413      	add	r3, r2
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bb1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb22:	3b02      	subs	r3, #2
 800bb24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb26:	4413      	add	r3, r2
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800bb32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb36:	3b01      	subs	r3, #1
 800bb38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb3a:	4413      	add	r3, r2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	061b      	lsls	r3, r3, #24
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10e      	bne.n	800bb6c <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bb4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	3b04      	subs	r3, #4
 800bb56:	b299      	uxth	r1, r3
 800bb58:	2301      	movs	r3, #1
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb5e:	f7ff feb9 	bl	800b8d4 <SecureElementVerifyAesCmac>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e002      	b.n	800bb72 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	e000      	b.n	800bb72 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e007      	b.n	800bb9e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800bb8e:	4b06      	ldr	r3, [pc, #24]	@ (800bba8 <SecureElementSetDevEui+0x2c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2208      	movs	r2, #8
 800bb94:	6879      	ldr	r1, [r7, #4]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f00a fdff 	bl	801679a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	200004b8 	.word	0x200004b8

0800bbac <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800bbb0:	4b02      	ldr	r3, [pc, #8]	@ (800bbbc <SecureElementGetDevEui+0x10>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr
 800bbbc:	200004b8 	.word	0x200004b8

0800bbc0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbce:	2302      	movs	r3, #2
 800bbd0:	e008      	b.n	800bbe4 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800bbd2:	4b06      	ldr	r3, [pc, #24]	@ (800bbec <SecureElementSetJoinEui+0x2c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	2208      	movs	r2, #8
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f00a fddc 	bl	801679a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	200004b8 	.word	0x200004b8

0800bbf0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800bbf4:	4b03      	ldr	r3, [pc, #12]	@ (800bc04 <SecureElementGetJoinEui+0x14>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3308      	adds	r3, #8
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bc80      	pop	{r7}
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	200004b8 	.word	0x200004b8

0800bc08 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bc12:	4a23      	ldr	r2, [pc, #140]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bc18:	4b22      	ldr	r3, [pc, #136]	@ (800bca4 <LmHandlerInit+0x9c>)
 800bc1a:	4a23      	ldr	r2, [pc, #140]	@ (800bca8 <LmHandlerInit+0xa0>)
 800bc1c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bc1e:	4b21      	ldr	r3, [pc, #132]	@ (800bca4 <LmHandlerInit+0x9c>)
 800bc20:	4a22      	ldr	r2, [pc, #136]	@ (800bcac <LmHandlerInit+0xa4>)
 800bc22:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bc24:	4b1f      	ldr	r3, [pc, #124]	@ (800bca4 <LmHandlerInit+0x9c>)
 800bc26:	4a22      	ldr	r2, [pc, #136]	@ (800bcb0 <LmHandlerInit+0xa8>)
 800bc28:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bc2a:	4b1e      	ldr	r3, [pc, #120]	@ (800bca4 <LmHandlerInit+0x9c>)
 800bc2c:	4a21      	ldr	r2, [pc, #132]	@ (800bcb4 <LmHandlerInit+0xac>)
 800bc2e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bc30:	4b1b      	ldr	r3, [pc, #108]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a20      	ldr	r2, [pc, #128]	@ (800bcb8 <LmHandlerInit+0xb0>)
 800bc38:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bc3a:	4b19      	ldr	r3, [pc, #100]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb8 <LmHandlerInit+0xb0>)
 800bc42:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bc44:	4b16      	ldr	r3, [pc, #88]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <LmHandlerInit+0xb0>)
 800bc4c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb8 <LmHandlerInit+0xb0>)
 800bc50:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <LmHandlerInit+0xb4>)
 800bc52:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bc54:	4b12      	ldr	r3, [pc, #72]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	4a17      	ldr	r2, [pc, #92]	@ (800bcb8 <LmHandlerInit+0xb0>)
 800bc5c:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800bc5e:	4a18      	ldr	r2, [pc, #96]	@ (800bcc0 <LmHandlerInit+0xb8>)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800bc64:	4b0e      	ldr	r3, [pc, #56]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc6a:	4a15      	ldr	r2, [pc, #84]	@ (800bcc0 <LmHandlerInit+0xb8>)
 800bc6c:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800bc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc74:	4a12      	ldr	r2, [pc, #72]	@ (800bcc0 <LmHandlerInit+0xb8>)
 800bc76:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800bc78:	4b09      	ldr	r3, [pc, #36]	@ (800bca0 <LmHandlerInit+0x98>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc7e:	4a10      	ldr	r2, [pc, #64]	@ (800bcc0 <LmHandlerInit+0xb8>)
 800bc80:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800bc82:	490f      	ldr	r1, [pc, #60]	@ (800bcc0 <LmHandlerInit+0xb8>)
 800bc84:	2000      	movs	r0, #0
 800bc86:	f000 fd87 	bl	800c798 <LmHandlerPackageRegister>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bc90:	f04f 33ff 	mov.w	r3, #4294967295
 800bc94:	e000      	b.n	800bc98 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	200004f4 	.word	0x200004f4
 800bca4:	200004f8 	.word	0x200004f8
 800bca8:	0800c4a5 	.word	0x0800c4a5
 800bcac:	0800c50d 	.word	0x0800c50d
 800bcb0:	0800c5d9 	.word	0x0800c5d9
 800bcb4:	0800c6f1 	.word	0x0800c6f1
 800bcb8:	20000508 	.word	0x20000508
 800bcbc:	0800cb69 	.word	0x0800cb69
 800bcc0:	200004bc 	.word	0x200004bc

0800bcc4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b094      	sub	sp, #80	@ 0x50
 800bcc8:	af04      	add	r7, sp, #16
 800bcca:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800bccc:	2214      	movs	r2, #20
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	4891      	ldr	r0, [pc, #580]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bcd2:	f00e f867 	bl	8019da4 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800bcd6:	4b91      	ldr	r3, [pc, #580]	@ (800bf1c <LmHandlerConfigure+0x258>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bcdc:	f7fe fb0c 	bl	800a2f8 <LoraInfo_GetPtr>
 800bce0:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800bce2:	4b8d      	ldr	r3, [pc, #564]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	2301      	movs	r3, #1
 800bcea:	4093      	lsls	r3, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d107      	bne.n	800bd08 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800bcf8:	4b89      	ldr	r3, [pc, #548]	@ (800bf20 <LmHandlerConfigure+0x25c>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	2000      	movs	r0, #0
 800bd00:	f00f f89a 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800bd08:	4b83      	ldr	r3, [pc, #524]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4985      	ldr	r1, [pc, #532]	@ (800bf24 <LmHandlerConfigure+0x260>)
 800bd10:	4885      	ldr	r0, [pc, #532]	@ (800bf28 <LmHandlerConfigure+0x264>)
 800bd12:	f004 fe95 	bl	8010a40 <LoRaMacInitialization>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd20:	e0f5      	b.n	800bf0e <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800bd22:	2327      	movs	r3, #39	@ 0x27
 800bd24:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bd26:	f107 0318 	add.w	r3, r7, #24
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f005 fbd8 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d103      	bne.n	800bd3e <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800bd36:	4b7d      	ldr	r3, [pc, #500]	@ (800bf2c <LmHandlerConfigure+0x268>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	e02a      	b.n	800bd94 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800bd3e:	2328      	movs	r3, #40	@ 0x28
 800bd40:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800bd42:	4b7b      	ldr	r3, [pc, #492]	@ (800bf30 <LmHandlerConfigure+0x26c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00c      	beq.n	800bd66 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bd4c:	f107 0318 	add.w	r3, r7, #24
 800bd50:	4618      	mov	r0, r3
 800bd52:	f005 fa1f 	bl	8011194 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800bd56:	4b76      	ldr	r3, [pc, #472]	@ (800bf30 <LmHandlerConfigure+0x26c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	f240 517c 	movw	r1, #1404	@ 0x57c
 800bd62:	4610      	mov	r0, r2
 800bd64:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800bd66:	2327      	movs	r3, #39	@ 0x27
 800bd68:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bd6a:	f107 0318 	add.w	r3, r7, #24
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f005 fbb6 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10c      	bne.n	800bd94 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bd7e:	f107 0318 	add.w	r3, r7, #24
 800bd82:	4618      	mov	r0, r3
 800bd84:	f005 fa06 	bl	8011194 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800bd88:	7f3b      	ldrb	r3, [r7, #28]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800bd8e:	4b67      	ldr	r3, [pc, #412]	@ (800bf2c <LmHandlerConfigure+0x268>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800bd94:	4b65      	ldr	r3, [pc, #404]	@ (800bf2c <LmHandlerConfigure+0x268>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d02a      	beq.n	800bdf2 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800bd9c:	4b64      	ldr	r3, [pc, #400]	@ (800bf30 <LmHandlerConfigure+0x26c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800bda6:	4b62      	ldr	r3, [pc, #392]	@ (800bf30 <LmHandlerConfigure+0x26c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	2000      	movs	r0, #0
 800bdae:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800bdb0:	2306      	movs	r3, #6
 800bdb2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800bdb4:	f107 0318 	add.w	r3, r7, #24
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f005 f9eb 	bl	8011194 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	4a5c      	ldr	r2, [pc, #368]	@ (800bf34 <LmHandlerConfigure+0x270>)
 800bdc2:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800bdc4:	2327      	movs	r3, #39	@ 0x27
 800bdc6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800bdc8:	f107 0318 	add.w	r3, r7, #24
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f005 f9e1 	bl	8011194 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bdd8:	4b4f      	ldr	r3, [pc, #316]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bdda:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800bde2:	4b4d      	ldr	r3, [pc, #308]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bde4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800bdec:	4b4a      	ldr	r3, [pc, #296]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bdee:	709a      	strb	r2, [r3, #2]
 800bdf0:	e019      	b.n	800be26 <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800bdf2:	2305      	movs	r3, #5
 800bdf4:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800bdfa:	f107 0318 	add.w	r3, r7, #24
 800bdfe:	4618      	mov	r0, r3
 800be00:	f005 fb6e 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800be04:	4b4a      	ldr	r3, [pc, #296]	@ (800bf30 <LmHandlerConfigure+0x26c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	4798      	blx	r3
 800be0c:	4603      	mov	r3, r0
 800be0e:	4a49      	ldr	r2, [pc, #292]	@ (800bf34 <LmHandlerConfigure+0x270>)
 800be10:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800be12:	2306      	movs	r3, #6
 800be14:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800be16:	4b47      	ldr	r3, [pc, #284]	@ (800bf34 <LmHandlerConfigure+0x270>)
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800be1c:	f107 0318 	add.w	r3, r7, #24
 800be20:	4618      	mov	r0, r3
 800be22:	f005 fb5d 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800be26:	2302      	movs	r3, #2
 800be28:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800be2a:	f107 0318 	add.w	r3, r7, #24
 800be2e:	4618      	mov	r0, r3
 800be30:	f005 f9b0 	bl	8011194 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	2208      	movs	r2, #8
 800be38:	4619      	mov	r1, r3
 800be3a:	483e      	ldr	r0, [pc, #248]	@ (800bf34 <LmHandlerConfigure+0x270>)
 800be3c:	f00a fcad 	bl	801679a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800be40:	2303      	movs	r3, #3
 800be42:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800be44:	f107 0318 	add.w	r3, r7, #24
 800be48:	4618      	mov	r0, r3
 800be4a:	f005 f9a3 	bl	8011194 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	2208      	movs	r2, #8
 800be52:	4619      	mov	r1, r3
 800be54:	4838      	ldr	r0, [pc, #224]	@ (800bf38 <LmHandlerConfigure+0x274>)
 800be56:	f00a fca0 	bl	801679a <memcpy1>

    SecureElementPrintKeys();
 800be5a:	f7ff fc1f 	bl	800b69c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800be5e:	4b37      	ldr	r3, [pc, #220]	@ (800bf3c <LmHandlerConfigure+0x278>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	4b36      	ldr	r3, [pc, #216]	@ (800bf40 <LmHandlerConfigure+0x27c>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	4619      	mov	r1, r3
 800be6a:	4b36      	ldr	r3, [pc, #216]	@ (800bf44 <LmHandlerConfigure+0x280>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	4b35      	ldr	r3, [pc, #212]	@ (800bf48 <LmHandlerConfigure+0x284>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	9303      	str	r3, [sp, #12]
 800be76:	9002      	str	r0, [sp, #8]
 800be78:	9101      	str	r1, [sp, #4]
 800be7a:	9200      	str	r2, [sp, #0]
 800be7c:	4b33      	ldr	r3, [pc, #204]	@ (800bf4c <LmHandlerConfigure+0x288>)
 800be7e:	2200      	movs	r2, #0
 800be80:	2100      	movs	r1, #0
 800be82:	2002      	movs	r0, #2
 800be84:	f00e ffd8 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800be88:	230f      	movs	r3, #15
 800be8a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800be8c:	2301      	movs	r3, #1
 800be8e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800be90:	f107 0318 	add.w	r3, r7, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f005 fb23 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800be9a:	2310      	movs	r3, #16
 800be9c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800be9e:	2300      	movs	r3, #0
 800bea0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bea2:	f107 0318 	add.w	r3, r7, #24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f005 fb1a 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800beac:	2304      	movs	r3, #4
 800beae:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800beb0:	4b19      	ldr	r3, [pc, #100]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800beb2:	789b      	ldrb	r3, [r3, #2]
 800beb4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800beb6:	f107 0318 	add.w	r3, r7, #24
 800beba:	4618      	mov	r0, r3
 800bebc:	f005 fb10 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800bec0:	2338      	movs	r3, #56	@ 0x38
 800bec2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800bec4:	4b14      	ldr	r3, [pc, #80]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800beca:	f107 0318 	add.w	r3, r7, #24
 800bece:	4618      	mov	r0, r3
 800bed0:	f005 fb06 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bed4:	230f      	movs	r3, #15
 800bed6:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800bed8:	4b0f      	ldr	r3, [pc, #60]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	f107 0210 	add.w	r2, r7, #16
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f008 f9b8 	bl	8014258 <RegionGetPhyParam>
 800bee8:	4603      	mov	r3, r0
 800beea:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	bf14      	ite	ne
 800bef2:	2301      	movne	r3, #1
 800bef4:	2300      	moveq	r3, #0
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	4b07      	ldr	r3, [pc, #28]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800befa:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800befc:	2014      	movs	r0, #20
 800befe:	f000 fab9 	bl	800c474 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800bf02:	4b05      	ldr	r3, [pc, #20]	@ (800bf18 <LmHandlerConfigure+0x254>)
 800bf04:	799b      	ldrb	r3, [r3, #6]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f006 f918 	bl	801213c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3740      	adds	r7, #64	@ 0x40
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200004e0 	.word	0x200004e0
 800bf1c:	20000520 	.word	0x20000520
 800bf20:	0801bb1c 	.word	0x0801bb1c
 800bf24:	20000508 	.word	0x20000508
 800bf28:	200004f8 	.word	0x200004f8
 800bf2c:	20000616 	.word	0x20000616
 800bf30:	200004f4 	.word	0x200004f4
 800bf34:	20000090 	.word	0x20000090
 800bf38:	20000098 	.word	0x20000098
 800bf3c:	200000a7 	.word	0x200000a7
 800bf40:	200000a6 	.word	0x200000a6
 800bf44:	200000a5 	.word	0x200000a5
 800bf48:	200000a4 	.word	0x200000a4
 800bf4c:	0801bb68 	.word	0x0801bb68

0800bf50 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800bf56:	f002 fd45 	bl	800e9e4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800bf5a:	f000 fd3b 	bl	800c9d4 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800bf5e:	f000 fd0f 	bl	800c980 <LmHandlerPackageIsTxPending>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d117      	bne.n	800bf98 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800bf68:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa0 <LmHandlerProcess+0x50>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d014      	beq.n	800bf9a <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800bf70:	2300      	movs	r3, #0
 800bf72:	703b      	strb	r3, [r7, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	707b      	strb	r3, [r7, #1]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800bf7c:	4b09      	ldr	r3, [pc, #36]	@ (800bfa4 <LmHandlerProcess+0x54>)
 800bf7e:	78d9      	ldrb	r1, [r3, #3]
 800bf80:	463b      	mov	r3, r7
 800bf82:	2200      	movs	r2, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 f8b7 	bl	800c0f8 <LmHandlerSend>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800bf90:	4b03      	ldr	r3, [pc, #12]	@ (800bfa0 <LmHandlerProcess+0x50>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	e000      	b.n	800bf9a <LmHandlerProcess+0x4a>
        return;
 800bf98:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20000520 	.word	0x20000520
 800bfa4:	200004e0 	.word	0x200004e0

0800bfa8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800bfac:	4b02      	ldr	r3, [pc, #8]	@ (800bfb8 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800bfae:	681b      	ldr	r3, [r3, #0]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bc80      	pop	{r7}
 800bfb6:	4770      	bx	lr
 800bfb8:	2000051c 	.word	0x2000051c

0800bfbc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b090      	sub	sp, #64	@ 0x40
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	71fb      	strb	r3, [r7, #7]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800bfd2:	4b36      	ldr	r3, [pc, #216]	@ (800c0ac <LmHandlerJoin+0xf0>)
 800bfd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d10b      	bne.n	800bffc <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800bfea:	4b31      	ldr	r3, [pc, #196]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800bfec:	2202      	movs	r2, #2
 800bfee:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800bff0:	4a2f      	ldr	r2, [pc, #188]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800bff2:	79bb      	ldrb	r3, [r7, #6]
 800bff4:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800bff6:	f004 ffdb 	bl	8010fb0 <LoRaMacStart>
 800bffa:	e041      	b.n	800c080 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c002:	4b2b      	ldr	r3, [pc, #172]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800c004:	2201      	movs	r2, #1
 800c006:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c008:	4b28      	ldr	r3, [pc, #160]	@ (800c0ac <LmHandlerJoin+0xf0>)
 800c00a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c00e:	4b28      	ldr	r3, [pc, #160]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800c010:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c012:	4b27      	ldr	r3, [pc, #156]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800c014:	2200      	movs	r2, #0
 800c016:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c018:	4a25      	ldr	r2, [pc, #148]	@ (800c0b0 <LmHandlerJoin+0xf4>)
 800c01a:	79bb      	ldrb	r3, [r7, #6]
 800c01c:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c01e:	4b25      	ldr	r3, [pc, #148]	@ (800c0b4 <LmHandlerJoin+0xf8>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f083 0301 	eor.w	r3, r3, #1
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01e      	beq.n	800c06a <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c02c:	231f      	movs	r3, #31
 800c02e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c030:	4b1e      	ldr	r3, [pc, #120]	@ (800c0ac <LmHandlerJoin+0xf0>)
 800c032:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c036:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c038:	f107 0308 	add.w	r3, r7, #8
 800c03c:	4618      	mov	r0, r3
 800c03e:	f005 fa4f 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c042:	2320      	movs	r3, #32
 800c044:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c046:	4b19      	ldr	r3, [pc, #100]	@ (800c0ac <LmHandlerJoin+0xf0>)
 800c048:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c04c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c04e:	f107 0308 	add.w	r3, r7, #8
 800c052:	4618      	mov	r0, r3
 800c054:	f005 fa44 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c058:	2329      	movs	r3, #41	@ 0x29
 800c05a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c05c:	4b16      	ldr	r3, [pc, #88]	@ (800c0b8 <LmHandlerJoin+0xfc>)
 800c05e:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	4618      	mov	r0, r3
 800c066:	f005 fa3b 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c06a:	f004 ffa1 	bl	8010fb0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c06e:	2301      	movs	r3, #1
 800c070:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c072:	2301      	movs	r3, #1
 800c074:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c076:	f107 0308 	add.w	r3, r7, #8
 800c07a:	4618      	mov	r0, r3
 800c07c:	f005 fa30 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c080:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b4 <LmHandlerJoin+0xf8>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f083 0301 	eor.w	r3, r3, #1
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d102      	bne.n	800c094 <LmHandlerJoin+0xd8>
 800c08e:	79bb      	ldrb	r3, [r7, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c098:	4618      	mov	r0, r3
 800c09a:	f005 fd91 	bl	8011bc0 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a0:	4a06      	ldr	r2, [pc, #24]	@ (800c0bc <LmHandlerJoin+0x100>)
 800c0a2:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c0a4:	bf00      	nop
 800c0a6:	3740      	adds	r7, #64	@ 0x40
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	200004e0 	.word	0x200004e0
 800c0b0:	200000a8 	.word	0x200000a8
 800c0b4:	20000616 	.word	0x20000616
 800c0b8:	01000400 	.word	0x01000400
 800c0bc:	2000051c 	.word	0x2000051c

0800c0c0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08a      	sub	sp, #40	@ 0x28
 800c0c4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c0ca:	463b      	mov	r3, r7
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f005 f861 	bl	8011194 <LoRaMacMibGetRequestConfirm>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c0e0:	793b      	ldrb	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e002      	b.n	800c0f0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c0ee:	2300      	movs	r3, #0
    }
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3728      	adds	r7, #40	@ 0x28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	@ 0x28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
 800c104:	4613      	mov	r3, r2
 800c106:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c108:	23ff      	movs	r3, #255	@ 0xff
 800c10a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c10e:	f002 f9c9 	bl	800e4a4 <LoRaMacIsBusy>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c118:	f06f 0301 	mvn.w	r3, #1
 800c11c:	e0a3      	b.n	800c266 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c11e:	f7ff ffcf 	bl	800c0c0 <LmHandlerJoinStatus>
 800c122:	4603      	mov	r3, r0
 800c124:	2b01      	cmp	r3, #1
 800c126:	d00a      	beq.n	800c13e <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c128:	4b51      	ldr	r3, [pc, #324]	@ (800c270 <LmHandlerSend+0x178>)
 800c12a:	799b      	ldrb	r3, [r3, #6]
 800c12c:	4a50      	ldr	r2, [pc, #320]	@ (800c270 <LmHandlerSend+0x178>)
 800c12e:	79d2      	ldrb	r2, [r2, #7]
 800c130:	4611      	mov	r1, r2
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff ff42 	bl	800bfbc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c138:	f06f 0302 	mvn.w	r3, #2
 800c13c:	e093      	b.n	800c266 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c13e:	4a4d      	ldr	r2, [pc, #308]	@ (800c274 <LmHandlerSend+0x17c>)
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c144:	78fb      	ldrb	r3, [r7, #3]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bf14      	ite	ne
 800c14a:	2301      	movne	r3, #1
 800c14c:	2300      	moveq	r3, #0
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c152:	4b49      	ldr	r3, [pc, #292]	@ (800c278 <LmHandlerSend+0x180>)
 800c154:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c158:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	785b      	ldrb	r3, [r3, #1]
 800c15e:	f107 020c 	add.w	r2, r7, #12
 800c162:	4611      	mov	r1, r2
 800c164:	4618      	mov	r0, r3
 800c166:	f004 ff85 	bl	8011074 <LoRaMacQueryTxPossible>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c170:	2300      	movs	r3, #0
 800c172:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c17c:	23f9      	movs	r3, #249	@ 0xf9
 800c17e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c182:	e008      	b.n	800c196 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	785b      	ldrb	r3, [r3, #1]
 800c18e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c196:	4b37      	ldr	r3, [pc, #220]	@ (800c274 <LmHandlerSend+0x17c>)
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	3310      	adds	r3, #16
 800c19c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1a0:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c1a4:	4b34      	ldr	r3, [pc, #208]	@ (800c278 <LmHandlerSend+0x180>)
 800c1a6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c1aa:	4b32      	ldr	r3, [pc, #200]	@ (800c274 <LmHandlerSend+0x17c>)
 800c1ac:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c1ae:	78ba      	ldrb	r2, [r7, #2]
 800c1b0:	f107 0310 	add.w	r3, r7, #16
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f005 fe88 	bl	8011ecc <LoRaMacMcpsRequest>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	4a2d      	ldr	r2, [pc, #180]	@ (800c27c <LmHandlerSend+0x184>)
 800c1c6:	6013      	str	r3, [r2, #0]

    switch (status)
 800c1c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c1cc:	2b11      	cmp	r3, #17
 800c1ce:	d843      	bhi.n	800c258 <LmHandlerSend+0x160>
 800c1d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d8 <LmHandlerSend+0xe0>)
 800c1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d6:	bf00      	nop
 800c1d8:	0800c221 	.word	0x0800c221
 800c1dc:	0800c239 	.word	0x0800c239
 800c1e0:	0800c259 	.word	0x0800c259
 800c1e4:	0800c259 	.word	0x0800c259
 800c1e8:	0800c259 	.word	0x0800c259
 800c1ec:	0800c259 	.word	0x0800c259
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c241 	.word	0x0800c241
 800c1f8:	0800c259 	.word	0x0800c259
 800c1fc:	0800c259 	.word	0x0800c259
 800c200:	0800c259 	.word	0x0800c259
 800c204:	0800c251 	.word	0x0800c251
 800c208:	0800c259 	.word	0x0800c259
 800c20c:	0800c259 	.word	0x0800c259
 800c210:	0800c239 	.word	0x0800c239
 800c214:	0800c239 	.word	0x0800c239
 800c218:	0800c239 	.word	0x0800c239
 800c21c:	0800c249 	.word	0x0800c249
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c220:	4b17      	ldr	r3, [pc, #92]	@ (800c280 <LmHandlerSend+0x188>)
 800c222:	2200      	movs	r2, #0
 800c224:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c226:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c22a:	f113 0f07 	cmn.w	r3, #7
 800c22e:	d017      	beq.n	800c260 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c230:	2300      	movs	r3, #0
 800c232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c236:	e013      	b.n	800c260 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c238:	23fe      	movs	r3, #254	@ 0xfe
 800c23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c23e:	e010      	b.n	800c262 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c240:	23fd      	movs	r3, #253	@ 0xfd
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c246:	e00c      	b.n	800c262 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c248:	23fb      	movs	r3, #251	@ 0xfb
 800c24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c24e:	e008      	b.n	800c262 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c250:	23fa      	movs	r3, #250	@ 0xfa
 800c252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c256:	e004      	b.n	800c262 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c258:	23ff      	movs	r3, #255	@ 0xff
 800c25a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c25e:	e000      	b.n	800c262 <LmHandlerSend+0x16a>
            break;
 800c260:	bf00      	nop
    }

    return lmhStatus;
 800c262:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c266:	4618      	mov	r0, r3
 800c268:	3728      	adds	r7, #40	@ 0x28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	200000a8 	.word	0x200000a8
 800c274:	200000b0 	.word	0x200000b0
 800c278:	200004e0 	.word	0x200004e0
 800c27c:	2000051c 	.word	0x2000051c
 800c280:	20000520 	.word	0x20000520

0800c284 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c28a:	2309      	movs	r3, #9
 800c28c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c28e:	463b      	mov	r3, r7
 800c290:	4618      	mov	r0, r3
 800c292:	f005 fc95 	bl	8011bc0 <LoRaMacMlmeRequest>
 800c296:	4603      	mov	r3, r0
 800c298:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	4a06      	ldr	r2, [pc, #24]	@ (800c2b8 <LmHandlerDeviceTimeReq+0x34>)
 800c29e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e001      	b.n	800c2ae <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c2aa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	2000051c 	.word	0x2000051c

0800c2bc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c2c6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bc80      	pop	{r7}
 800c2d2:	4770      	bx	lr

0800c2d4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08c      	sub	sp, #48	@ 0x30
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800c2e4:	f002 f8de 	bl	800e4a4 <LoRaMacIsBusy>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c2ee:	f06f 0301 	mvn.w	r3, #1
 800c2f2:	e071      	b.n	800c3d8 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c2f4:	f7ff fee4 	bl	800c0c0 <LmHandlerJoinStatus>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d002      	beq.n	800c304 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c2fe:	f06f 0302 	mvn.w	r3, #2
 800c302:	e069      	b.n	800c3d8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c304:	2300      	movs	r3, #0
 800c306:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c308:	f107 0308 	add.w	r3, r7, #8
 800c30c:	4618      	mov	r0, r3
 800c30e:	f004 ff41 	bl	8011194 <LoRaMacMibGetRequestConfirm>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
 800c31c:	e05c      	b.n	800c3d8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c31e:	7b3b      	ldrb	r3, [r7, #12]
 800c320:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c324:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d052      	beq.n	800c3d4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d028      	beq.n	800c386 <LmHandlerRequestClass+0xb2>
 800c334:	2b02      	cmp	r3, #2
 800c336:	dc48      	bgt.n	800c3ca <LmHandlerRequestClass+0xf6>
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <LmHandlerRequestClass+0x6e>
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d01e      	beq.n	800c37e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c340:	e043      	b.n	800c3ca <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800c342:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c346:	2b00      	cmp	r3, #0
 800c348:	d041      	beq.n	800c3ce <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c34e:	f107 0308 	add.w	r3, r7, #8
 800c352:	4618      	mov	r0, r3
 800c354:	f005 f8c4 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10b      	bne.n	800c376 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c35e:	4b20      	ldr	r3, [pc, #128]	@ (800c3e0 <LmHandlerRequestClass+0x10c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c364:	2b00      	cmp	r3, #0
 800c366:	d032      	beq.n	800c3ce <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c368:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e0 <LmHandlerRequestClass+0x10c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c36e:	79fa      	ldrb	r2, [r7, #7]
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
            break;
 800c374:	e02b      	b.n	800c3ce <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c376:	23ff      	movs	r3, #255	@ 0xff
 800c378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c37c:	e027      	b.n	800c3ce <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c37e:	23ff      	movs	r3, #255	@ 0xff
 800c380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c384:	e026      	b.n	800c3d4 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800c386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c38e:	23ff      	movs	r3, #255	@ 0xff
 800c390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c394:	e01d      	b.n	800c3d2 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c39a:	f107 0308 	add.w	r3, r7, #8
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f005 f89e 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c3e0 <LmHandlerRequestClass+0x10c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00e      	beq.n	800c3d2 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e0 <LmHandlerRequestClass+0x10c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ba:	79fa      	ldrb	r2, [r7, #7]
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4798      	blx	r3
            break;
 800c3c0:	e007      	b.n	800c3d2 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c3c2:	23ff      	movs	r3, #255	@ 0xff
 800c3c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c3c8:	e003      	b.n	800c3d2 <LmHandlerRequestClass+0xfe>
            break;
 800c3ca:	bf00      	nop
 800c3cc:	e002      	b.n	800c3d4 <LmHandlerRequestClass+0x100>
            break;
 800c3ce:	bf00      	nop
 800c3d0:	e000      	b.n	800c3d4 <LmHandlerRequestClass+0x100>
            break;
 800c3d2:	bf00      	nop
        }
    }
    return errorStatus;
 800c3d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3730      	adds	r7, #48	@ 0x30
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	200004f4 	.word	0x200004f4

0800c3e4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b08c      	sub	sp, #48	@ 0x30
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f6:	e010      	b.n	800c41a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c3fc:	f107 030c 	add.w	r3, r7, #12
 800c400:	4618      	mov	r0, r3
 800c402:	f004 fec7 	bl	8011194 <LoRaMacMibGetRequestConfirm>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c40c:	f04f 33ff 	mov.w	r3, #4294967295
 800c410:	e003      	b.n	800c41a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c412:	7c3a      	ldrb	r2, [r7, #16]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3730      	adds	r7, #48	@ 0x30
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08c      	sub	sp, #48	@ 0x30
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d102      	bne.n	800c438 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c432:	f04f 33ff 	mov.w	r3, #4294967295
 800c436:	e016      	b.n	800c466 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c438:	2320      	movs	r3, #32
 800c43a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c43c:	f107 030c 	add.w	r3, r7, #12
 800c440:	4618      	mov	r0, r3
 800c442:	f004 fea7 	bl	8011194 <LoRaMacMibGetRequestConfirm>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c44c:	f04f 33ff 	mov.w	r3, #4294967295
 800c450:	e009      	b.n	800c466 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c452:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f993 2000 	ldrsb.w	r2, [r3]
 800c460:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <LmHandlerGetTxDatarate+0x4c>)
 800c462:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3730      	adds	r7, #48	@ 0x30
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200004e0 	.word	0x200004e0

0800c474 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08c      	sub	sp, #48	@ 0x30
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c47c:	2323      	movs	r3, #35	@ 0x23
 800c47e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c484:	f107 030c 	add.w	r3, r7, #12
 800c488:	4618      	mov	r0, r3
 800c48a:	f005 f829 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c494:	f04f 33ff 	mov.w	r3, #4294967295
 800c498:	e000      	b.n	800c49c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3730      	adds	r7, #48	@ 0x30
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c4ac:	4b15      	ldr	r3, [pc, #84]	@ (800c504 <McpsConfirm+0x60>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	785a      	ldrb	r2, [r3, #1]
 800c4b6:	4b13      	ldr	r3, [pc, #76]	@ (800c504 <McpsConfirm+0x60>)
 800c4b8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	789b      	ldrb	r3, [r3, #2]
 800c4be:	b25a      	sxtb	r2, r3
 800c4c0:	4b10      	ldr	r3, [pc, #64]	@ (800c504 <McpsConfirm+0x60>)
 800c4c2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c504 <McpsConfirm+0x60>)
 800c4ca:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c504 <McpsConfirm+0x60>)
 800c4d4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	4b09      	ldr	r3, [pc, #36]	@ (800c504 <McpsConfirm+0x60>)
 800c4de:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4b07      	ldr	r3, [pc, #28]	@ (800c504 <McpsConfirm+0x60>)
 800c4e8:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c4ea:	4b07      	ldr	r3, [pc, #28]	@ (800c508 <McpsConfirm+0x64>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f0:	4804      	ldr	r0, [pc, #16]	@ (800c504 <McpsConfirm+0x60>)
 800c4f2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c4f4:	6879      	ldr	r1, [r7, #4]
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	f000 f9c6 	bl	800c888 <LmHandlerPackagesNotify>
}
 800c4fc:	bf00      	nop
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	200000b0 	.word	0x200000b0
 800c508:	200004f4 	.word	0x200004f4

0800c50c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c51a:	4b2c      	ldr	r3, [pc, #176]	@ (800c5cc <McpsIndication+0xc0>)
 800c51c:	2201      	movs	r2, #1
 800c51e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	785a      	ldrb	r2, [r3, #1]
 800c524:	4b29      	ldr	r3, [pc, #164]	@ (800c5cc <McpsIndication+0xc0>)
 800c526:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c528:	4b28      	ldr	r3, [pc, #160]	@ (800c5cc <McpsIndication+0xc0>)
 800c52a:	785b      	ldrb	r3, [r3, #1]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d149      	bne.n	800c5c4 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	791b      	ldrb	r3, [r3, #4]
 800c534:	b25a      	sxtb	r2, r3
 800c536:	4b25      	ldr	r3, [pc, #148]	@ (800c5cc <McpsIndication+0xc0>)
 800c538:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c540:	b25a      	sxtb	r2, r3
 800c542:	4b22      	ldr	r3, [pc, #136]	@ (800c5cc <McpsIndication+0xc0>)
 800c544:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c54c:	4b1f      	ldr	r3, [pc, #124]	@ (800c5cc <McpsIndication+0xc0>)
 800c54e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	78da      	ldrb	r2, [r3, #3]
 800c554:	4b1d      	ldr	r3, [pc, #116]	@ (800c5cc <McpsIndication+0xc0>)
 800c556:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5cc <McpsIndication+0xc0>)
 800c55e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	78db      	ldrb	r3, [r3, #3]
 800c564:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	7b1b      	ldrb	r3, [r3, #12]
 800c56a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c572:	4b17      	ldr	r3, [pc, #92]	@ (800c5d0 <McpsIndication+0xc4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c578:	f107 0210 	add.w	r2, r7, #16
 800c57c:	4913      	ldr	r1, [pc, #76]	@ (800c5cc <McpsIndication+0xc0>)
 800c57e:	4610      	mov	r0, r2
 800c580:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c582:	4b13      	ldr	r3, [pc, #76]	@ (800c5d0 <McpsIndication+0xc4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <McpsIndication+0x90>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7e1b      	ldrb	r3, [r3, #24]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c594:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d0 <McpsIndication+0xc4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f000 f972 	bl	800c888 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c5a4:	f107 030f 	add.w	r3, r7, #15
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff ff1b 	bl	800c3e4 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	795b      	ldrb	r3, [r3, #5]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d107      	bne.n	800c5c6 <McpsIndication+0xba>
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d104      	bne.n	800c5c6 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800c5bc:	4b05      	ldr	r3, [pc, #20]	@ (800c5d4 <McpsIndication+0xc8>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	e000      	b.n	800c5c6 <McpsIndication+0xba>
        return;
 800c5c4:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200000cc 	.word	0x200000cc
 800c5d0:	200004f4 	.word	0x200004f4
 800c5d4:	20000520 	.word	0x20000520

0800c5d8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08c      	sub	sp, #48	@ 0x30
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c5e0:	4b3c      	ldr	r3, [pc, #240]	@ (800c6d4 <MlmeConfirm+0xfc>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	785a      	ldrb	r2, [r3, #1]
 800c5ea:	4b3a      	ldr	r3, [pc, #232]	@ (800c6d4 <MlmeConfirm+0xfc>)
 800c5ec:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c5ee:	4b3a      	ldr	r3, [pc, #232]	@ (800c6d8 <MlmeConfirm+0x100>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	4837      	ldr	r0, [pc, #220]	@ (800c6d4 <MlmeConfirm+0xfc>)
 800c5f6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c5f8:	6879      	ldr	r1, [r7, #4]
 800c5fa:	2002      	movs	r0, #2
 800c5fc:	f000 f944 	bl	800c888 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	3b01      	subs	r3, #1
 800c606:	2b0b      	cmp	r3, #11
 800c608:	d85c      	bhi.n	800c6c4 <MlmeConfirm+0xec>
 800c60a:	a201      	add	r2, pc, #4	@ (adr r2, 800c610 <MlmeConfirm+0x38>)
 800c60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c610:	0800c641 	.word	0x0800c641
 800c614:	0800c6c5 	.word	0x0800c6c5
 800c618:	0800c6c5 	.word	0x0800c6c5
 800c61c:	0800c693 	.word	0x0800c693
 800c620:	0800c6c5 	.word	0x0800c6c5
 800c624:	0800c6c5 	.word	0x0800c6c5
 800c628:	0800c6c5 	.word	0x0800c6c5
 800c62c:	0800c6c5 	.word	0x0800c6c5
 800c630:	0800c6c5 	.word	0x0800c6c5
 800c634:	0800c6c5 	.word	0x0800c6c5
 800c638:	0800c6ab 	.word	0x0800c6ab
 800c63c:	0800c6c5 	.word	0x0800c6c5
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800c640:	2306      	movs	r3, #6
 800c642:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c644:	f107 030c 	add.w	r3, r7, #12
 800c648:	4618      	mov	r0, r3
 800c64a:	f004 fda3 	bl	8011194 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	4a22      	ldr	r2, [pc, #136]	@ (800c6dc <MlmeConfirm+0x104>)
 800c652:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c654:	4822      	ldr	r0, [pc, #136]	@ (800c6e0 <MlmeConfirm+0x108>)
 800c656:	f7ff fee5 	bl	800c424 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d108      	bne.n	800c674 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c662:	4b20      	ldr	r3, [pc, #128]	@ (800c6e4 <MlmeConfirm+0x10c>)
 800c664:	2200      	movs	r2, #0
 800c666:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c668:	4b1f      	ldr	r3, [pc, #124]	@ (800c6e8 <MlmeConfirm+0x110>)
 800c66a:	785b      	ldrb	r3, [r3, #1]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff fe31 	bl	800c2d4 <LmHandlerRequestClass>
 800c672:	e002      	b.n	800c67a <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c674:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e4 <MlmeConfirm+0x10c>)
 800c676:	22ff      	movs	r2, #255	@ 0xff
 800c678:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <MlmeConfirm+0x100>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c680:	4818      	ldr	r0, [pc, #96]	@ (800c6e4 <MlmeConfirm+0x10c>)
 800c682:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d11d      	bne.n	800c6c8 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800c68c:	f7ff f894 	bl	800b7b8 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800c690:	e01a      	b.n	800c6c8 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800c692:	4b16      	ldr	r3, [pc, #88]	@ (800c6ec <MlmeConfirm+0x114>)
 800c694:	2201      	movs	r2, #1
 800c696:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7a1a      	ldrb	r2, [r3, #8]
 800c69c:	4b13      	ldr	r3, [pc, #76]	@ (800c6ec <MlmeConfirm+0x114>)
 800c69e:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7a5a      	ldrb	r2, [r3, #9]
 800c6a4:	4b11      	ldr	r3, [pc, #68]	@ (800c6ec <MlmeConfirm+0x114>)
 800c6a6:	74da      	strb	r2, [r3, #19]
        }
        break;
 800c6a8:	e00f      	b.n	800c6ca <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	785b      	ldrb	r3, [r3, #1]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d105      	bne.n	800c6be <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <MlmeConfirm+0x110>)
 800c6b4:	7b1b      	ldrb	r3, [r3, #12]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fe00 	bl	800c2bc <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800c6bc:	e005      	b.n	800c6ca <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800c6be:	f7ff fde1 	bl	800c284 <LmHandlerDeviceTimeReq>
        break;
 800c6c2:	e002      	b.n	800c6ca <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c6c4:	bf00      	nop
 800c6c6:	e000      	b.n	800c6ca <MlmeConfirm+0xf2>
        break;
 800c6c8:	bf00      	nop
    }
}
 800c6ca:	bf00      	nop
 800c6cc:	3730      	adds	r7, #48	@ 0x30
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200000b0 	.word	0x200000b0
 800c6d8:	200004f4 	.word	0x200004f4
 800c6dc:	20000090 	.word	0x20000090
 800c6e0:	200000ac 	.word	0x200000ac
 800c6e4:	200000a8 	.word	0x200000a8
 800c6e8:	200004e0 	.word	0x200004e0
 800c6ec:	200000cc 	.word	0x200000cc

0800c6f0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c6fa:	4b24      	ldr	r3, [pc, #144]	@ (800c78c <MlmeIndication+0x9c>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	785a      	ldrb	r2, [r3, #1]
 800c704:	4b21      	ldr	r3, [pc, #132]	@ (800c78c <MlmeIndication+0x9c>)
 800c706:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	789b      	ldrb	r3, [r3, #2]
 800c70c:	b25a      	sxtb	r2, r3
 800c70e:	4b1f      	ldr	r3, [pc, #124]	@ (800c78c <MlmeIndication+0x9c>)
 800c710:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c718:	b25a      	sxtb	r2, r3
 800c71a:	4b1c      	ldr	r3, [pc, #112]	@ (800c78c <MlmeIndication+0x9c>)
 800c71c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c724:	4b19      	ldr	r3, [pc, #100]	@ (800c78c <MlmeIndication+0x9c>)
 800c726:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	78da      	ldrb	r2, [r3, #3]
 800c72c:	4b17      	ldr	r3, [pc, #92]	@ (800c78c <MlmeIndication+0x9c>)
 800c72e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4a15      	ldr	r2, [pc, #84]	@ (800c78c <MlmeIndication+0x9c>)
 800c736:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b0a      	cmp	r3, #10
 800c73e:	d009      	beq.n	800c754 <MlmeIndication+0x64>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b0e      	cmp	r3, #14
 800c746:	d005      	beq.n	800c754 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c748:	4b11      	ldr	r3, [pc, #68]	@ (800c790 <MlmeIndication+0xa0>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c74e:	490f      	ldr	r1, [pc, #60]	@ (800c78c <MlmeIndication+0x9c>)
 800c750:	2000      	movs	r0, #0
 800c752:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	2003      	movs	r0, #3
 800c758:	f000 f896 	bl	800c888 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b0e      	cmp	r3, #14
 800c762:	d00a      	beq.n	800c77a <MlmeIndication+0x8a>
 800c764:	2b0e      	cmp	r3, #14
 800c766:	dc0a      	bgt.n	800c77e <MlmeIndication+0x8e>
 800c768:	2b06      	cmp	r3, #6
 800c76a:	d002      	beq.n	800c772 <MlmeIndication+0x82>
 800c76c:	2b0a      	cmp	r3, #10
 800c76e:	d008      	beq.n	800c782 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c770:	e005      	b.n	800c77e <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800c772:	4b08      	ldr	r3, [pc, #32]	@ (800c794 <MlmeIndication+0xa4>)
 800c774:	2201      	movs	r2, #1
 800c776:	701a      	strb	r2, [r3, #0]
        break;
 800c778:	e004      	b.n	800c784 <MlmeIndication+0x94>
        break;
 800c77a:	bf00      	nop
 800c77c:	e002      	b.n	800c784 <MlmeIndication+0x94>
        break;
 800c77e:	bf00      	nop
 800c780:	e000      	b.n	800c784 <MlmeIndication+0x94>
        break;
 800c782:	bf00      	nop
    }
}
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200000cc 	.word	0x200000cc
 800c790:	200004f4 	.word	0x200004f4
 800c794:	20000520 	.word	0x20000520

0800c798 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800c7ae:	f000 fa1d 	bl	800cbec <LmhpCompliancePackageFactory>
 800c7b2:	60f8      	str	r0, [r7, #12]
            break;
 800c7b4:	e000      	b.n	800c7b8 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800c7b6:	bf00      	nop
        }
    }
    if( package != NULL )
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d035      	beq.n	800c82a <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	491d      	ldr	r1, [pc, #116]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d0:	4a1a      	ldr	r2, [pc, #104]	@ (800c83c <LmHandlerPackageRegister+0xa4>)
 800c7d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800c7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c840 <LmHandlerPackageRegister+0xa8>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	4917      	ldr	r1, [pc, #92]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c7dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c7e2:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800c7e4:	4b16      	ldr	r3, [pc, #88]	@ (800c840 <LmHandlerPackageRegister+0xa8>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	4913      	ldr	r1, [pc, #76]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c7ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c7f2:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c7f4:	79fb      	ldrb	r3, [r7, #7]
 800c7f6:	4a10      	ldr	r2, [pc, #64]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7fc:	4a11      	ldr	r2, [pc, #68]	@ (800c844 <LmHandlerPackageRegister+0xac>)
 800c7fe:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c800:	4b0f      	ldr	r3, [pc, #60]	@ (800c840 <LmHandlerPackageRegister+0xa8>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	490c      	ldr	r1, [pc, #48]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c80c:	6992      	ldr	r2, [r2, #24]
 800c80e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	4a09      	ldr	r2, [pc, #36]	@ (800c838 <LmHandlerPackageRegister+0xa0>)
 800c814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	4a0b      	ldr	r2, [pc, #44]	@ (800c848 <LmHandlerPackageRegister+0xb0>)
 800c81c:	6851      	ldr	r1, [r2, #4]
 800c81e:	4a0a      	ldr	r2, [pc, #40]	@ (800c848 <LmHandlerPackageRegister+0xb0>)
 800c820:	7852      	ldrb	r2, [r2, #1]
 800c822:	6838      	ldr	r0, [r7, #0]
 800c824:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c826:	2300      	movs	r3, #0
 800c828:	e001      	b.n	800c82e <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c82a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	200004cc 	.word	0x200004cc
 800c83c:	0800bfbd 	.word	0x0800bfbd
 800c840:	200004f4 	.word	0x200004f4
 800c844:	0800c285 	.word	0x0800c285
 800c848:	200000e0 	.word	0x200000e0

0800c84c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	4603      	mov	r3, r0
 800c854:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d80e      	bhi.n	800c87a <LmHandlerPackageIsInitialized+0x2e>
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	4a09      	ldr	r2, [pc, #36]	@ (800c884 <LmHandlerPackageIsInitialized+0x38>)
 800c860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d007      	beq.n	800c87a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	4a05      	ldr	r2, [pc, #20]	@ (800c884 <LmHandlerPackageIsInitialized+0x38>)
 800c86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	4798      	blx	r3
 800c876:	4603      	mov	r3, r0
 800c878:	e000      	b.n	800c87c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c87a:	2300      	movs	r3, #0
    }
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	200004cc 	.word	0x200004cc

0800c888 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	6039      	str	r1, [r7, #0]
 800c892:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
 800c898:	e067      	b.n	800c96a <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800c89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c89e:	4a37      	ldr	r2, [pc, #220]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d05a      	beq.n	800c95e <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d84e      	bhi.n	800c94c <LmHandlerPackagesNotify+0xc4>
 800c8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b4 <LmHandlerPackagesNotify+0x2c>)
 800c8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b4:	0800c8c5 	.word	0x0800c8c5
 800c8b8:	0800c8e7 	.word	0x0800c8e7
 800c8bc:	0800c909 	.word	0x0800c909
 800c8c0:	0800c92b 	.word	0x0800c92b
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d03d      	beq.n	800c950 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800c8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8d8:	4a28      	ldr	r2, [pc, #160]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	6838      	ldr	r0, [r7, #0]
 800c8e2:	4798      	blx	r3
                    }
                    break;
 800c8e4:	e034      	b.n	800c950 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800c8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ea:	4a24      	ldr	r2, [pc, #144]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d02e      	beq.n	800c954 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800c8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8fa:	4a20      	ldr	r2, [pc, #128]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	6838      	ldr	r0, [r7, #0]
 800c904:	4798      	blx	r3
                    }
                    break;
 800c906:	e025      	b.n	800c954 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c90c:	4a1b      	ldr	r2, [pc, #108]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c912:	6a1b      	ldr	r3, [r3, #32]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01f      	beq.n	800c958 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800c918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c91c:	4a17      	ldr	r2, [pc, #92]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	6838      	ldr	r0, [r7, #0]
 800c926:	4798      	blx	r3
                    }
                    break;
 800c928:	e016      	b.n	800c958 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c92e:	4a13      	ldr	r2, [pc, #76]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c936:	2b00      	cmp	r3, #0
 800c938:	d010      	beq.n	800c95c <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c93e:	4a0f      	ldr	r2, [pc, #60]	@ (800c97c <LmHandlerPackagesNotify+0xf4>)
 800c940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c946:	6838      	ldr	r0, [r7, #0]
 800c948:	4798      	blx	r3
                    }
                    break;
 800c94a:	e007      	b.n	800c95c <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800c94c:	bf00      	nop
 800c94e:	e006      	b.n	800c95e <LmHandlerPackagesNotify+0xd6>
                    break;
 800c950:	bf00      	nop
 800c952:	e004      	b.n	800c95e <LmHandlerPackagesNotify+0xd6>
                    break;
 800c954:	bf00      	nop
 800c956:	e002      	b.n	800c95e <LmHandlerPackagesNotify+0xd6>
                    break;
 800c958:	bf00      	nop
 800c95a:	e000      	b.n	800c95e <LmHandlerPackagesNotify+0xd6>
                    break;
 800c95c:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	3301      	adds	r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	73fb      	strb	r3, [r7, #15]
 800c96a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c96e:	2b04      	cmp	r3, #4
 800c970:	dd93      	ble.n	800c89a <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800c972:	bf00      	nop
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	200004cc 	.word	0x200004cc

0800c980 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c986:	2300      	movs	r3, #0
 800c988:	71fb      	strb	r3, [r7, #7]
 800c98a:	e018      	b.n	800c9be <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800c98c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c990:	4a0f      	ldr	r2, [pc, #60]	@ (800c9d0 <LmHandlerPackageIsTxPending+0x50>)
 800c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00b      	beq.n	800c9b2 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800c99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c99e:	4a0c      	ldr	r2, [pc, #48]	@ (800c9d0 <LmHandlerPackageIsTxPending+0x50>)
 800c9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	4798      	blx	r3
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e00a      	b.n	800c9c8 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	71fb      	strb	r3, [r7, #7]
 800c9be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	dde2      	ble.n	800c98c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	200004cc 	.word	0x200004cc

0800c9d4 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c9da:	2300      	movs	r3, #0
 800c9dc:	71fb      	strb	r3, [r7, #7]
 800c9de:	e022      	b.n	800ca26 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c9e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9e4:	4a14      	ldr	r2, [pc, #80]	@ (800ca38 <LmHandlerPackagesProcess+0x64>)
 800c9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d015      	beq.n	800ca1a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c9ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9f2:	4a11      	ldr	r2, [pc, #68]	@ (800ca38 <LmHandlerPackagesProcess+0x64>)
 800c9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9f8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00d      	beq.n	800ca1a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7ff ff23 	bl	800c84c <LmHandlerPackageIsInitialized>
 800ca06:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ca0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca10:	4a09      	ldr	r2, [pc, #36]	@ (800ca38 <LmHandlerPackagesProcess+0x64>)
 800ca12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ca1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	3301      	adds	r3, #1
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	71fb      	strb	r3, [r7, #7]
 800ca26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca2a:	2b04      	cmp	r3, #4
 800ca2c:	ddd8      	ble.n	800c9e0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ca2e:	bf00      	nop
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	200004cc 	.word	0x200004cc

0800ca3c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4603      	mov	r3, r0
 800ca44:	6039      	str	r1, [r7, #0]
 800ca46:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca52:	e00e      	b.n	800ca72 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <LmHandlerGetVersion+0x24>
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d004      	beq.n	800ca68 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800ca5e:	e007      	b.n	800ca70 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	4a06      	ldr	r2, [pc, #24]	@ (800ca7c <LmHandlerGetVersion+0x40>)
 800ca64:	601a      	str	r2, [r3, #0]
            break;
 800ca66:	e003      	b.n	800ca70 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	4a05      	ldr	r2, [pc, #20]	@ (800ca80 <LmHandlerGetVersion+0x44>)
 800ca6c:	601a      	str	r2, [r3, #0]
            break;
 800ca6e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bc80      	pop	{r7}
 800ca7a:	4770      	bx	lr
 800ca7c:	01000400 	.word	0x01000400
 800ca80:	02010001 	.word	0x02010001

0800ca84 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800ca88:	f005 fb76 	bl	8012178 <LoRaMacDeInitialization>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca92:	2300      	movs	r3, #0
 800ca94:	e001      	b.n	800ca9a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca96:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800caa2:	f004 faaf 	bl	8011004 <LoRaMacHalt>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800caac:	2300      	movs	r3, #0
 800caae:	e001      	b.n	800cab4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cab0:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08e      	sub	sp, #56	@ 0x38
 800cabc:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cabe:	2300      	movs	r3, #0
 800cac0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800cac8:	f7ff ffe9 	bl	800ca9e <LmHandlerHalt>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800cad2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d12f      	bne.n	800cb3a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cada:	f000 f859 	bl	800cb90 <NvmDataMgmtStoreBegin>
 800cade:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800cae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae2:	f113 0f02 	cmn.w	r3, #2
 800cae6:	d103      	bne.n	800caf0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cae8:	23f8      	movs	r3, #248	@ 0xf8
 800caea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800caee:	e01c      	b.n	800cb2a <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d104      	bne.n	800cb00 <LmHandlerNvmDataStore+0x48>
 800caf6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb64 <LmHandlerNvmDataStore+0xac>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d103      	bne.n	800cb08 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cb00:	23ff      	movs	r3, #255	@ 0xff
 800cb02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cb06:	e010      	b.n	800cb2a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800cb08:	2327      	movs	r3, #39	@ 0x27
 800cb0a:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800cb0c:	1d3b      	adds	r3, r7, #4
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f004 fb40 	bl	8011194 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cb18:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800cb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800cb1e:	4b11      	ldr	r3, [pc, #68]	@ (800cb64 <LmHandlerNvmDataStore+0xac>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	695b      	ldr	r3, [r3, #20]
 800cb24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb28:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cb2a:	f000 f847 	bl	800cbbc <NvmDataMgmtStoreEnd>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cb34:	23ff      	movs	r3, #255	@ 0xff
 800cb36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800cb3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d109      	bne.n	800cb56 <LmHandlerNvmDataStore+0x9e>
 800cb42:	4b08      	ldr	r3, [pc, #32]	@ (800cb64 <LmHandlerNvmDataStore+0xac>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d004      	beq.n	800cb56 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800cb4c:	4b05      	ldr	r3, [pc, #20]	@ (800cb64 <LmHandlerNvmDataStore+0xac>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	2001      	movs	r0, #1
 800cb54:	4798      	blx	r3
    }

    return lmhStatus;
 800cb56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3738      	adds	r7, #56	@ 0x38
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200004f4 	.word	0x200004f4

0800cb68 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800cb72:	4b06      	ldr	r3, [pc, #24]	@ (800cb8c <NvmDataMgmtEvent+0x24>)
 800cb74:	881a      	ldrh	r2, [r3, #0]
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	4b03      	ldr	r3, [pc, #12]	@ (800cb8c <NvmDataMgmtEvent+0x24>)
 800cb7e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bc80      	pop	{r7}
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	20000618 	.word	0x20000618

0800cb90 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800cb94:	4b08      	ldr	r3, [pc, #32]	@ (800cbb8 <NvmDataMgmtStoreBegin+0x28>)
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d102      	bne.n	800cba2 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800cb9c:	f06f 0301 	mvn.w	r3, #1
 800cba0:	e008      	b.n	800cbb4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800cba2:	f004 fa13 	bl	8010fcc <LoRaMacStop>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800cbac:	f06f 0302 	mvn.w	r3, #2
 800cbb0:	e000      	b.n	800cbb4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800cbb2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000618 	.word	0x20000618

0800cbbc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cbc0:	4b03      	ldr	r3, [pc, #12]	@ (800cbd0 <NvmDataMgmtStoreEnd+0x14>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800cbc6:	f004 f9f3 	bl	8010fb0 <LoRaMacStart>
    return NVM_DATA_OK;
 800cbca:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20000618 	.word	0x20000618

0800cbd4 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800cbd8:	2220      	movs	r2, #32
 800cbda:	2100      	movs	r1, #0
 800cbdc:	4802      	ldr	r0, [pc, #8]	@ (800cbe8 <ClassBStatusReset+0x14>)
 800cbde:	f009 fe17 	bl	8016810 <memset1>
}
 800cbe2:	bf00      	nop
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20000630 	.word	0x20000630

0800cbec <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800cbf0:	4b02      	ldr	r3, [pc, #8]	@ (800cbfc <LmhpCompliancePackageFactory+0x10>)
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bc80      	pop	{r7}
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	200000e8 	.word	0x200000e8

0800cc00 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d018      	beq.n	800cc46 <LmhpComplianceInit+0x46>
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d015      	beq.n	800cc46 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800cc1a:	4a19      	ldr	r2, [pc, #100]	@ (800cc80 <LmhpComplianceInit+0x80>)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cc20:	4a18      	ldr	r2, [pc, #96]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cc26:	4a17      	ldr	r2, [pc, #92]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800cc2c:	4b15      	ldr	r3, [pc, #84]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc2e:	2201      	movs	r2, #1
 800cc30:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cc32:	2300      	movs	r3, #0
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	4b14      	ldr	r3, [pc, #80]	@ (800cc88 <LmhpComplianceInit+0x88>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f04f 31ff 	mov.w	r1, #4294967295
 800cc3e:	4813      	ldr	r0, [pc, #76]	@ (800cc8c <LmhpComplianceInit+0x8c>)
 800cc40:	f00d fe4c 	bl	801a8dc <UTIL_TIMER_Create>
 800cc44:	e005      	b.n	800cc52 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800cc46:	4b0e      	ldr	r3, [pc, #56]	@ (800cc80 <LmhpComplianceInit+0x80>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800cc52:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800cc58:	f7ff ffbc 	bl	800cbd4 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800cc5c:	4b09      	ldr	r3, [pc, #36]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800cc62:	4b08      	ldr	r3, [pc, #32]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800cc68:	4b06      	ldr	r3, [pc, #24]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800cc70:	4b04      	ldr	r3, [pc, #16]	@ (800cc84 <LmhpComplianceInit+0x84>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20000654 	.word	0x20000654
 800cc84:	2000061c 	.word	0x2000061c
 800cc88:	0800d575 	.word	0x0800d575
 800cc8c:	20000658 	.word	0x20000658

0800cc90 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cc90:	b480      	push	{r7}
 800cc92:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cc94:	4b02      	ldr	r3, [pc, #8]	@ (800cca0 <LmhpComplianceIsInitialized+0x10>)
 800cc96:	781b      	ldrb	r3, [r3, #0]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bc80      	pop	{r7}
 800cc9e:	4770      	bx	lr
 800cca0:	2000061c 	.word	0x2000061c

0800cca4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800cca8:	4b02      	ldr	r3, [pc, #8]	@ (800ccb4 <LmhpComplianceIsTxPending+0x10>)
 800ccaa:	785b      	ldrb	r3, [r3, #1]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bc80      	pop	{r7}
 800ccb2:	4770      	bx	lr
 800ccb4:	2000061c 	.word	0x2000061c

0800ccb8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ccb8:	b590      	push	{r4, r7, lr}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ccbe:	4b33      	ldr	r3, [pc, #204]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03f      	beq.n	800cd46 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ccc6:	f00d ffc7 	bl	801ac58 <UTIL_TIMER_GetCurrentTime>
 800ccca:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800cccc:	4b2f      	ldr	r3, [pc, #188]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800ccce:	685c      	ldr	r4, [r3, #4]
 800ccd0:	f7ff f96a 	bl	800bfa8 <LmHandlerGetDutyCycleWaitTime>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	4423      	add	r3, r4
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d942      	bls.n	800cd64 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ccde:	4b2b      	ldr	r3, [pc, #172]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cce0:	7a9b      	ldrb	r3, [r3, #10]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d03e      	beq.n	800cd64 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800cce6:	23e0      	movs	r3, #224	@ 0xe0
 800cce8:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ccea:	4b28      	ldr	r3, [pc, #160]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800ccec:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800ccee:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ccf0:	4b26      	ldr	r3, [pc, #152]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800ccf2:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800ccf4:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ccf6:	23ff      	movs	r3, #255	@ 0xff
 800ccf8:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ccfa:	4b24      	ldr	r3, [pc, #144]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800ccfc:	7a19      	ldrb	r1, [r3, #8]
 800ccfe:	463b      	mov	r3, r7
 800cd00:	2201      	movs	r2, #1
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff f9f8 	bl	800c0f8 <LmHandlerSend>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800cd0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd10:	f113 0f02 	cmn.w	r3, #2
 800cd14:	d004      	beq.n	800cd20 <LmhpComplianceProcess+0x68>
 800cd16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd1a:	f113 0f06 	cmn.w	r3, #6
 800cd1e:	d108      	bne.n	800cd32 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800cd20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cd24:	481a      	ldr	r0, [pc, #104]	@ (800cd90 <LmhpComplianceProcess+0xd8>)
 800cd26:	f00d feed 	bl	801ab04 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800cd2a:	4819      	ldr	r0, [pc, #100]	@ (800cd90 <LmhpComplianceProcess+0xd8>)
 800cd2c:	f00d fe0c 	bl	801a948 <UTIL_TIMER_Start>
 800cd30:	e005      	b.n	800cd3e <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800cd32:	4b16      	ldr	r3, [pc, #88]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800cd38:	4b14      	ldr	r3, [pc, #80]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800cd3e:	4a13      	ldr	r2, [pc, #76]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6053      	str	r3, [r2, #4]
 800cd44:	e00e      	b.n	800cd64 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800cd46:	4b11      	ldr	r3, [pc, #68]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d009      	beq.n	800cd64 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800cd50:	4b0e      	ldr	r3, [pc, #56]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800cd58:	4b0c      	ldr	r3, [pc, #48]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd5a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff fab8 	bl	800c2d4 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800cd64:	4b09      	ldr	r3, [pc, #36]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800cd6e:	4b07      	ldr	r3, [pc, #28]	@ (800cd8c <LmhpComplianceProcess+0xd4>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800cd76:	4b07      	ldr	r3, [pc, #28]	@ (800cd94 <LmhpComplianceProcess+0xdc>)
 800cd78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800cd7e:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <LmhpComplianceProcess+0xdc>)
 800cd80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd82:	4798      	blx	r3
        }
    }
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd90      	pop	{r4, r7, pc}
 800cd8c:	2000061c 	.word	0x2000061c
 800cd90:	20000658 	.word	0x20000658
 800cd94:	200000e8 	.word	0x200000e8

0800cd98 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800cd98:	b5b0      	push	{r4, r5, r7, lr}
 800cd9a:	b0a4      	sub	sp, #144	@ 0x90
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800cda6:	4bce      	ldr	r3, [pc, #824]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	f083 0301 	eor.w	r3, r3, #1
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f040 83b5 	bne.w	800d520 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	78db      	ldrb	r3, [r3, #3]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d103      	bne.n	800cdc6 <LmhpComplianceOnMcpsIndication+0x2e>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7b9b      	ldrb	r3, [r3, #14]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d005      	beq.n	800cdd2 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800cdc6:	4bc6      	ldr	r3, [pc, #792]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800cdc8:	8a1b      	ldrh	r3, [r3, #16]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	4bc4      	ldr	r3, [pc, #784]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800cdd0:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7b5b      	ldrb	r3, [r3, #13]
 800cdd6:	f083 0301 	eor.w	r3, r3, #1
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f040 83a1 	bne.w	800d524 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	78db      	ldrb	r3, [r3, #3]
 800cde6:	2be0      	cmp	r3, #224	@ 0xe0
 800cde8:	f040 839e 	bne.w	800d528 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800cdec:	4bbc      	ldr	r3, [pc, #752]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cdfa:	1c59      	adds	r1, r3, #1
 800cdfc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ce00:	4413      	add	r3, r2
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce06:	f200 836e 	bhi.w	800d4e6 <LmhpComplianceOnMcpsIndication+0x74e>
 800ce0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce10 <LmhpComplianceOnMcpsIndication+0x78>)
 800ce0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce10:	0800d011 	.word	0x0800d011
 800ce14:	0800d055 	.word	0x0800d055
 800ce18:	0800d05f 	.word	0x0800d05f
 800ce1c:	0800d06b 	.word	0x0800d06b
 800ce20:	0800d08d 	.word	0x0800d08d
 800ce24:	0800d0bb 	.word	0x0800d0bb
 800ce28:	0800d0e9 	.word	0x0800d0e9
 800ce2c:	0800d147 	.word	0x0800d147
 800ce30:	0800d19f 	.word	0x0800d19f
 800ce34:	0800d20b 	.word	0x0800d20b
 800ce38:	0800d25b 	.word	0x0800d25b
 800ce3c:	0800d4e7 	.word	0x0800d4e7
 800ce40:	0800d4e7 	.word	0x0800d4e7
 800ce44:	0800d4e7 	.word	0x0800d4e7
 800ce48:	0800d4e7 	.word	0x0800d4e7
 800ce4c:	0800d4e7 	.word	0x0800d4e7
 800ce50:	0800d4e7 	.word	0x0800d4e7
 800ce54:	0800d4e7 	.word	0x0800d4e7
 800ce58:	0800d4e7 	.word	0x0800d4e7
 800ce5c:	0800d4e7 	.word	0x0800d4e7
 800ce60:	0800d4e7 	.word	0x0800d4e7
 800ce64:	0800d4e7 	.word	0x0800d4e7
 800ce68:	0800d4e7 	.word	0x0800d4e7
 800ce6c:	0800d4e7 	.word	0x0800d4e7
 800ce70:	0800d4e7 	.word	0x0800d4e7
 800ce74:	0800d4e7 	.word	0x0800d4e7
 800ce78:	0800d4e7 	.word	0x0800d4e7
 800ce7c:	0800d4e7 	.word	0x0800d4e7
 800ce80:	0800d4e7 	.word	0x0800d4e7
 800ce84:	0800d4e7 	.word	0x0800d4e7
 800ce88:	0800d4e7 	.word	0x0800d4e7
 800ce8c:	0800d4e7 	.word	0x0800d4e7
 800ce90:	0800d263 	.word	0x0800d263
 800ce94:	0800d275 	.word	0x0800d275
 800ce98:	0800d27d 	.word	0x0800d27d
 800ce9c:	0800d4e7 	.word	0x0800d4e7
 800cea0:	0800d4e7 	.word	0x0800d4e7
 800cea4:	0800d4e7 	.word	0x0800d4e7
 800cea8:	0800d4e7 	.word	0x0800d4e7
 800ceac:	0800d4e7 	.word	0x0800d4e7
 800ceb0:	0800d4e7 	.word	0x0800d4e7
 800ceb4:	0800d4e7 	.word	0x0800d4e7
 800ceb8:	0800d4e7 	.word	0x0800d4e7
 800cebc:	0800d4e7 	.word	0x0800d4e7
 800cec0:	0800d4e7 	.word	0x0800d4e7
 800cec4:	0800d4e7 	.word	0x0800d4e7
 800cec8:	0800d4e7 	.word	0x0800d4e7
 800cecc:	0800d4e7 	.word	0x0800d4e7
 800ced0:	0800d4e7 	.word	0x0800d4e7
 800ced4:	0800d4e7 	.word	0x0800d4e7
 800ced8:	0800d4e7 	.word	0x0800d4e7
 800cedc:	0800d4e7 	.word	0x0800d4e7
 800cee0:	0800d4e7 	.word	0x0800d4e7
 800cee4:	0800d4e7 	.word	0x0800d4e7
 800cee8:	0800d4e7 	.word	0x0800d4e7
 800ceec:	0800d4e7 	.word	0x0800d4e7
 800cef0:	0800d4e7 	.word	0x0800d4e7
 800cef4:	0800d4e7 	.word	0x0800d4e7
 800cef8:	0800d4e7 	.word	0x0800d4e7
 800cefc:	0800d4e7 	.word	0x0800d4e7
 800cf00:	0800d4e7 	.word	0x0800d4e7
 800cf04:	0800d4e7 	.word	0x0800d4e7
 800cf08:	0800d4e7 	.word	0x0800d4e7
 800cf0c:	0800d4e7 	.word	0x0800d4e7
 800cf10:	0800d4e7 	.word	0x0800d4e7
 800cf14:	0800d4e7 	.word	0x0800d4e7
 800cf18:	0800d4e7 	.word	0x0800d4e7
 800cf1c:	0800d4e7 	.word	0x0800d4e7
 800cf20:	0800d4e7 	.word	0x0800d4e7
 800cf24:	0800d4e7 	.word	0x0800d4e7
 800cf28:	0800d4e7 	.word	0x0800d4e7
 800cf2c:	0800d4e7 	.word	0x0800d4e7
 800cf30:	0800d4e7 	.word	0x0800d4e7
 800cf34:	0800d4e7 	.word	0x0800d4e7
 800cf38:	0800d4e7 	.word	0x0800d4e7
 800cf3c:	0800d4e7 	.word	0x0800d4e7
 800cf40:	0800d4e7 	.word	0x0800d4e7
 800cf44:	0800d4e7 	.word	0x0800d4e7
 800cf48:	0800d4e7 	.word	0x0800d4e7
 800cf4c:	0800d4e7 	.word	0x0800d4e7
 800cf50:	0800d4e7 	.word	0x0800d4e7
 800cf54:	0800d4e7 	.word	0x0800d4e7
 800cf58:	0800d4e7 	.word	0x0800d4e7
 800cf5c:	0800d4e7 	.word	0x0800d4e7
 800cf60:	0800d4e7 	.word	0x0800d4e7
 800cf64:	0800d4e7 	.word	0x0800d4e7
 800cf68:	0800d4e7 	.word	0x0800d4e7
 800cf6c:	0800d4e7 	.word	0x0800d4e7
 800cf70:	0800d4e7 	.word	0x0800d4e7
 800cf74:	0800d4e7 	.word	0x0800d4e7
 800cf78:	0800d4e7 	.word	0x0800d4e7
 800cf7c:	0800d4e7 	.word	0x0800d4e7
 800cf80:	0800d4e7 	.word	0x0800d4e7
 800cf84:	0800d4e7 	.word	0x0800d4e7
 800cf88:	0800d4e7 	.word	0x0800d4e7
 800cf8c:	0800d4e7 	.word	0x0800d4e7
 800cf90:	0800d4e7 	.word	0x0800d4e7
 800cf94:	0800d4e7 	.word	0x0800d4e7
 800cf98:	0800d4e7 	.word	0x0800d4e7
 800cf9c:	0800d4e7 	.word	0x0800d4e7
 800cfa0:	0800d4e7 	.word	0x0800d4e7
 800cfa4:	0800d4e7 	.word	0x0800d4e7
 800cfa8:	0800d4e7 	.word	0x0800d4e7
 800cfac:	0800d4e7 	.word	0x0800d4e7
 800cfb0:	0800d4e7 	.word	0x0800d4e7
 800cfb4:	0800d4e7 	.word	0x0800d4e7
 800cfb8:	0800d4e7 	.word	0x0800d4e7
 800cfbc:	0800d4e7 	.word	0x0800d4e7
 800cfc0:	0800d4e7 	.word	0x0800d4e7
 800cfc4:	0800d4e7 	.word	0x0800d4e7
 800cfc8:	0800d4e7 	.word	0x0800d4e7
 800cfcc:	0800d4e7 	.word	0x0800d4e7
 800cfd0:	0800d4e7 	.word	0x0800d4e7
 800cfd4:	0800d4e7 	.word	0x0800d4e7
 800cfd8:	0800d4e7 	.word	0x0800d4e7
 800cfdc:	0800d4e7 	.word	0x0800d4e7
 800cfe0:	0800d4e7 	.word	0x0800d4e7
 800cfe4:	0800d4e7 	.word	0x0800d4e7
 800cfe8:	0800d4e7 	.word	0x0800d4e7
 800cfec:	0800d4e7 	.word	0x0800d4e7
 800cff0:	0800d4e7 	.word	0x0800d4e7
 800cff4:	0800d4e7 	.word	0x0800d4e7
 800cff8:	0800d4e7 	.word	0x0800d4e7
 800cffc:	0800d4e7 	.word	0x0800d4e7
 800d000:	0800d4e7 	.word	0x0800d4e7
 800d004:	0800d2af 	.word	0x0800d2af
 800d008:	0800d35f 	.word	0x0800d35f
 800d00c:	0800d391 	.word	0x0800d391
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d010:	4b33      	ldr	r3, [pc, #204]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d012:	68da      	ldr	r2, [r3, #12]
 800d014:	4b32      	ldr	r3, [pc, #200]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d016:	7a9b      	ldrb	r3, [r3, #10]
 800d018:	1c59      	adds	r1, r3, #1
 800d01a:	b2c8      	uxtb	r0, r1
 800d01c:	4930      	ldr	r1, [pc, #192]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d01e:	7288      	strb	r0, [r1, #10]
 800d020:	4413      	add	r3, r2
 800d022:	2200      	movs	r2, #0
 800d024:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d026:	4b2e      	ldr	r3, [pc, #184]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d028:	68da      	ldr	r2, [r3, #12]
 800d02a:	4b2d      	ldr	r3, [pc, #180]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d02c:	7a9b      	ldrb	r3, [r3, #10]
 800d02e:	1c59      	adds	r1, r3, #1
 800d030:	b2c8      	uxtb	r0, r1
 800d032:	492b      	ldr	r1, [pc, #172]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d034:	7288      	strb	r0, [r1, #10]
 800d036:	4413      	add	r3, r2
 800d038:	2206      	movs	r2, #6
 800d03a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d03c:	4b28      	ldr	r3, [pc, #160]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	4b27      	ldr	r3, [pc, #156]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d042:	7a9b      	ldrb	r3, [r3, #10]
 800d044:	1c59      	adds	r1, r3, #1
 800d046:	b2c8      	uxtb	r0, r1
 800d048:	4925      	ldr	r1, [pc, #148]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d04a:	7288      	strb	r0, [r1, #10]
 800d04c:	4413      	add	r3, r2
 800d04e:	2201      	movs	r2, #1
 800d050:	701a      	strb	r2, [r3, #0]
        break;
 800d052:	e251      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d054:	4b22      	ldr	r3, [pc, #136]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d05c:	e24c      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d05e:	4b21      	ldr	r3, [pc, #132]	@ (800d0e4 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d062:	2101      	movs	r1, #1
 800d064:	2002      	movs	r0, #2
 800d066:	4798      	blx	r3
        break;
 800d068:	e246      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689a      	ldr	r2, [r3, #8]
 800d06e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d072:	1c59      	adds	r1, r3, #1
 800d074:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d078:	4413      	add	r3, r2
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	4b18      	ldr	r3, [pc, #96]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d07e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d082:	4b17      	ldr	r3, [pc, #92]	@ (800d0e0 <LmhpComplianceOnMcpsIndication+0x348>)
 800d084:	2201      	movs	r2, #1
 800d086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d08a:	e235      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d08c:	2304      	movs	r3, #4
 800d08e:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	689a      	ldr	r2, [r3, #8]
 800d094:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d098:	1c59      	adds	r1, r3, #1
 800d09a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d09e:	4413      	add	r3, r2
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bf14      	ite	ne
 800d0a6:	2301      	movne	r3, #1
 800d0a8:	2300      	moveq	r3, #0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f004 fa14 	bl	80114e0 <LoRaMacMibSetRequestConfirm>
        break;
 800d0b8:	e21e      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	689a      	ldr	r2, [r3, #8]
 800d0be:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0c2:	1c59      	adds	r1, r3, #1
 800d0c4:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d0c8:	4413      	add	r3, r2
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	bf14      	ite	ne
 800d0d0:	2301      	movne	r3, #1
 800d0d2:	2300      	moveq	r3, #0
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f005 f830 	bl	801213c <LoRaMacTestSetDutyCycleOn>
        break;
 800d0dc:	e20c      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
 800d0de:	bf00      	nop
 800d0e0:	2000061c 	.word	0x2000061c
 800d0e4:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d0e8:	4ba5      	ldr	r3, [pc, #660]	@ (800d380 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d0ea:	f107 040c 	add.w	r4, r7, #12
 800d0ee:	461d      	mov	r5, r3
 800d0f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d0fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	689a      	ldr	r2, [r3, #8]
 800d104:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d108:	1c59      	adds	r1, r3, #1
 800d10a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d10e:	4413      	add	r3, r2
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d116:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d11a:	2b0a      	cmp	r3, #10
 800d11c:	f200 81e5 	bhi.w	800d4ea <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d120:	4b98      	ldr	r3, [pc, #608]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 81df 	beq.w	800d4ea <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d12c:	4b95      	ldr	r3, [pc, #596]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	3390      	adds	r3, #144	@ 0x90
 800d13a:	443b      	add	r3, r7
 800d13c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d140:	4618      	mov	r0, r3
 800d142:	4790      	blx	r2
            }
        }
        break;
 800d144:	e1d1      	b.n	800d4ea <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	689a      	ldr	r2, [r3, #8]
 800d14a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d14e:	1c59      	adds	r1, r3, #1
 800d150:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d154:	4413      	add	r3, r2
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d15c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d160:	2b01      	cmp	r3, #1
 800d162:	d004      	beq.n	800d16e <LmhpComplianceOnMcpsIndication+0x3d6>
 800d164:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d168:	2b02      	cmp	r3, #2
 800d16a:	f040 81c0 	bne.w	800d4ee <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d16e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d172:	2b01      	cmp	r3, #1
 800d174:	bf14      	ite	ne
 800d176:	2301      	movne	r3, #1
 800d178:	2300      	moveq	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	4b82      	ldr	r3, [pc, #520]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d180:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d182:	4b80      	ldr	r3, [pc, #512]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 81b0 	beq.w	800d4ee <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d18e:	4b7d      	ldr	r3, [pc, #500]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	4a7c      	ldr	r2, [pc, #496]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d196:	7a12      	ldrb	r2, [r2, #8]
 800d198:	4610      	mov	r0, r2
 800d19a:	4798      	blx	r3
            }
        }
        break;
 800d19c:	e1a7      	b.n	800d4ee <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d19e:	4b7a      	ldr	r3, [pc, #488]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	4b79      	ldr	r3, [pc, #484]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1a4:	7a9b      	ldrb	r3, [r3, #10]
 800d1a6:	1c59      	adds	r1, r3, #1
 800d1a8:	b2c8      	uxtb	r0, r1
 800d1aa:	4977      	ldr	r1, [pc, #476]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1ac:	7288      	strb	r0, [r1, #10]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	2208      	movs	r2, #8
 800d1b2:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d1ba:	e019      	b.n	800d1f0 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689a      	ldr	r2, [r3, #8]
 800d1c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d1c4:	1c59      	adds	r1, r3, #1
 800d1c6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d1ca:	4413      	add	r3, r2
 800d1cc:	781a      	ldrb	r2, [r3, #0]
 800d1ce:	4b6e      	ldr	r3, [pc, #440]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1d0:	68d9      	ldr	r1, [r3, #12]
 800d1d2:	4b6d      	ldr	r3, [pc, #436]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1d4:	7a9b      	ldrb	r3, [r3, #10]
 800d1d6:	1c58      	adds	r0, r3, #1
 800d1d8:	b2c4      	uxtb	r4, r0
 800d1da:	486b      	ldr	r0, [pc, #428]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1dc:	7284      	strb	r4, [r0, #10]
 800d1de:	440b      	add	r3, r1
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	b2d2      	uxtb	r2, r2
 800d1e4:	701a      	strb	r2, [r3, #0]
             i++ )
 800d1e6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d1f0:	4b65      	ldr	r3, [pc, #404]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1f2:	7a5a      	ldrb	r2, [r3, #9]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7b1b      	ldrb	r3, [r3, #12]
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	bf28      	it	cs
 800d1fc:	4613      	movcs	r3, r2
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d204:	429a      	cmp	r2, r3
 800d206:	d3d9      	bcc.n	800d1bc <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d208:	e176      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d20a:	4b5f      	ldr	r3, [pc, #380]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	4b5e      	ldr	r3, [pc, #376]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d210:	7a9b      	ldrb	r3, [r3, #10]
 800d212:	1c59      	adds	r1, r3, #1
 800d214:	b2c8      	uxtb	r0, r1
 800d216:	495c      	ldr	r1, [pc, #368]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d218:	7288      	strb	r0, [r1, #10]
 800d21a:	4413      	add	r3, r2
 800d21c:	2209      	movs	r2, #9
 800d21e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d220:	4b59      	ldr	r3, [pc, #356]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d222:	8a18      	ldrh	r0, [r3, #16]
 800d224:	4b58      	ldr	r3, [pc, #352]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d226:	68da      	ldr	r2, [r3, #12]
 800d228:	4b57      	ldr	r3, [pc, #348]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d22a:	7a9b      	ldrb	r3, [r3, #10]
 800d22c:	1c59      	adds	r1, r3, #1
 800d22e:	b2cc      	uxtb	r4, r1
 800d230:	4955      	ldr	r1, [pc, #340]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d232:	728c      	strb	r4, [r1, #10]
 800d234:	4413      	add	r3, r2
 800d236:	b2c2      	uxtb	r2, r0
 800d238:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d23a:	4b53      	ldr	r3, [pc, #332]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d23c:	8a1b      	ldrh	r3, [r3, #16]
 800d23e:	0a1b      	lsrs	r3, r3, #8
 800d240:	b298      	uxth	r0, r3
 800d242:	4b51      	ldr	r3, [pc, #324]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d244:	68da      	ldr	r2, [r3, #12]
 800d246:	4b50      	ldr	r3, [pc, #320]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d248:	7a9b      	ldrb	r3, [r3, #10]
 800d24a:	1c59      	adds	r1, r3, #1
 800d24c:	b2cc      	uxtb	r4, r1
 800d24e:	494e      	ldr	r1, [pc, #312]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d250:	728c      	strb	r4, [r1, #10]
 800d252:	4413      	add	r3, r2
 800d254:	b2c2      	uxtb	r2, r0
 800d256:	701a      	strb	r2, [r3, #0]
        break;
 800d258:	e14e      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d25a:	4b4b      	ldr	r3, [pc, #300]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	821a      	strh	r2, [r3, #16]
        break;
 800d260:	e14a      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d262:	2304      	movs	r3, #4
 800d264:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d268:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d26c:	4618      	mov	r0, r3
 800d26e:	f004 fca7 	bl	8011bc0 <LoRaMacMlmeRequest>
        break;
 800d272:	e141      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d274:	4b45      	ldr	r3, [pc, #276]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d278:	4798      	blx	r3
        break;
 800d27a:	e13d      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	689a      	ldr	r2, [r3, #8]
 800d280:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d284:	1c59      	adds	r1, r3, #1
 800d286:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d28a:	4413      	add	r3, r2
 800d28c:	781a      	ldrb	r2, [r3, #0]
 800d28e:	4b3e      	ldr	r3, [pc, #248]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d290:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d292:	4b3c      	ldr	r3, [pc, #240]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 812a 	beq.w	800d4f2 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d29e:	4b39      	ldr	r3, [pc, #228]	@ (800d384 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	4a38      	ldr	r2, [pc, #224]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d2a6:	7d52      	ldrb	r2, [r2, #21]
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	4798      	blx	r3
        }
        break;
 800d2ac:	e121      	b.n	800d4f2 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7b1b      	ldrb	r3, [r3, #12]
 800d2b2:	2b07      	cmp	r3, #7
 800d2b4:	f040 811f 	bne.w	800d4f6 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800d2b8:	2305      	movs	r3, #5
 800d2ba:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	b21a      	sxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6899      	ldr	r1, [r3, #8]
 800d2d0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	440b      	add	r3, r1
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	021b      	lsls	r3, r3, #8
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800d2e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800d2e8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	689a      	ldr	r2, [r3, #8]
 800d2f6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d2fa:	4413      	add	r3, r2
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	4619      	mov	r1, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	689a      	ldr	r2, [r3, #8]
 800d304:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d308:	3301      	adds	r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	021b      	lsls	r3, r3, #8
 800d310:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6899      	ldr	r1, [r3, #8]
 800d318:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d31c:	3302      	adds	r3, #2
 800d31e:	440b      	add	r3, r1
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d324:	4313      	orrs	r3, r2
 800d326:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d328:	2364      	movs	r3, #100	@ 0x64
 800d32a:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800d32e:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800d330:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d334:	3303      	adds	r3, #3
 800d336:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689a      	ldr	r2, [r3, #8]
 800d33e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d342:	1c59      	adds	r1, r3, #1
 800d344:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d348:	4413      	add	r3, r2
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b25b      	sxtb	r3, r3
 800d34e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800d352:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d356:	4618      	mov	r0, r3
 800d358:	f004 fc32 	bl	8011bc0 <LoRaMacMlmeRequest>
        }
        break;
 800d35c:	e0cb      	b.n	800d4f6 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d35e:	2339      	movs	r3, #57	@ 0x39
 800d360:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800d364:	2300      	movs	r3, #0
 800d366:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d36a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d36e:	4618      	mov	r0, r3
 800d370:	f004 f8b6 	bl	80114e0 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800d374:	4b04      	ldr	r3, [pc, #16]	@ (800d388 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d37c:	e0bc      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
 800d37e:	bf00      	nop
 800d380:	0801bb94 	.word	0x0801bb94
 800d384:	20000654 	.word	0x20000654
 800d388:	2000061c 	.word	0x2000061c
 800d38c:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800d390:	232a      	movs	r3, #42	@ 0x2a
 800d392:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800d394:	f107 030c 	add.w	r3, r7, #12
 800d398:	4618      	mov	r0, r3
 800d39a:	f003 fefb 	bl	8011194 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d3a6:	4b62      	ldr	r3, [pc, #392]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	4b61      	ldr	r3, [pc, #388]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3ac:	7a9b      	ldrb	r3, [r3, #10]
 800d3ae:	1c59      	adds	r1, r3, #1
 800d3b0:	b2c8      	uxtb	r0, r1
 800d3b2:	495f      	ldr	r1, [pc, #380]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3b4:	7288      	strb	r0, [r1, #10]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	227f      	movs	r2, #127	@ 0x7f
 800d3ba:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d3bc:	4b5d      	ldr	r3, [pc, #372]	@ (800d534 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	4b5b      	ldr	r3, [pc, #364]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3c2:	68d9      	ldr	r1, [r3, #12]
 800d3c4:	4b5a      	ldr	r3, [pc, #360]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3c6:	7a9b      	ldrb	r3, [r3, #10]
 800d3c8:	1c58      	adds	r0, r3, #1
 800d3ca:	b2c4      	uxtb	r4, r0
 800d3cc:	4858      	ldr	r0, [pc, #352]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3ce:	7284      	strb	r4, [r0, #10]
 800d3d0:	440b      	add	r3, r1
 800d3d2:	78d2      	ldrb	r2, [r2, #3]
 800d3d4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d3d6:	4b57      	ldr	r3, [pc, #348]	@ (800d534 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	4b55      	ldr	r3, [pc, #340]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3dc:	68d9      	ldr	r1, [r3, #12]
 800d3de:	4b54      	ldr	r3, [pc, #336]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3e0:	7a9b      	ldrb	r3, [r3, #10]
 800d3e2:	1c58      	adds	r0, r3, #1
 800d3e4:	b2c4      	uxtb	r4, r0
 800d3e6:	4852      	ldr	r0, [pc, #328]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3e8:	7284      	strb	r4, [r0, #10]
 800d3ea:	440b      	add	r3, r1
 800d3ec:	7892      	ldrb	r2, [r2, #2]
 800d3ee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d3f0:	4b50      	ldr	r3, [pc, #320]	@ (800d534 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	4b4e      	ldr	r3, [pc, #312]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3f6:	68d9      	ldr	r1, [r3, #12]
 800d3f8:	4b4d      	ldr	r3, [pc, #308]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d3fa:	7a9b      	ldrb	r3, [r3, #10]
 800d3fc:	1c58      	adds	r0, r3, #1
 800d3fe:	b2c4      	uxtb	r4, r0
 800d400:	484b      	ldr	r0, [pc, #300]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d402:	7284      	strb	r4, [r0, #10]
 800d404:	440b      	add	r3, r1
 800d406:	7852      	ldrb	r2, [r2, #1]
 800d408:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d40a:	4b4a      	ldr	r3, [pc, #296]	@ (800d534 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	4b48      	ldr	r3, [pc, #288]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d410:	68d9      	ldr	r1, [r3, #12]
 800d412:	4b47      	ldr	r3, [pc, #284]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d414:	7a9b      	ldrb	r3, [r3, #10]
 800d416:	1c58      	adds	r0, r3, #1
 800d418:	b2c4      	uxtb	r4, r0
 800d41a:	4845      	ldr	r0, [pc, #276]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d41c:	7284      	strb	r4, [r0, #10]
 800d41e:	440b      	add	r3, r1
 800d420:	7812      	ldrb	r2, [r2, #0]
 800d422:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d424:	4b42      	ldr	r3, [pc, #264]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	4b41      	ldr	r3, [pc, #260]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d42a:	7a9b      	ldrb	r3, [r3, #10]
 800d42c:	1c59      	adds	r1, r3, #1
 800d42e:	b2c8      	uxtb	r0, r1
 800d430:	493f      	ldr	r1, [pc, #252]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d432:	7288      	strb	r0, [r1, #10]
 800d434:	4413      	add	r3, r2
 800d436:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d43a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d43c:	4b3c      	ldr	r3, [pc, #240]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d43e:	68da      	ldr	r2, [r3, #12]
 800d440:	4b3b      	ldr	r3, [pc, #236]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d442:	7a9b      	ldrb	r3, [r3, #10]
 800d444:	1c59      	adds	r1, r3, #1
 800d446:	b2c8      	uxtb	r0, r1
 800d448:	4939      	ldr	r1, [pc, #228]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d44a:	7288      	strb	r0, [r1, #10]
 800d44c:	4413      	add	r3, r2
 800d44e:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800d452:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d454:	4b36      	ldr	r3, [pc, #216]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d456:	68da      	ldr	r2, [r3, #12]
 800d458:	4b35      	ldr	r3, [pc, #212]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d45a:	7a9b      	ldrb	r3, [r3, #10]
 800d45c:	1c59      	adds	r1, r3, #1
 800d45e:	b2c8      	uxtb	r0, r1
 800d460:	4933      	ldr	r1, [pc, #204]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d462:	7288      	strb	r0, [r1, #10]
 800d464:	4413      	add	r3, r2
 800d466:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800d46a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d46c:	4b30      	ldr	r3, [pc, #192]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	4b2f      	ldr	r3, [pc, #188]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d472:	7a9b      	ldrb	r3, [r3, #10]
 800d474:	1c59      	adds	r1, r3, #1
 800d476:	b2c8      	uxtb	r0, r1
 800d478:	492d      	ldr	r1, [pc, #180]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d47a:	7288      	strb	r0, [r1, #10]
 800d47c:	4413      	add	r3, r2
 800d47e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800d482:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d484:	4b2a      	ldr	r3, [pc, #168]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	4b29      	ldr	r3, [pc, #164]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d48a:	7a9b      	ldrb	r3, [r3, #10]
 800d48c:	1c59      	adds	r1, r3, #1
 800d48e:	b2c8      	uxtb	r0, r1
 800d490:	4927      	ldr	r1, [pc, #156]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d492:	7288      	strb	r0, [r1, #10]
 800d494:	4413      	add	r3, r2
 800d496:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800d49a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d49c:	4b24      	ldr	r3, [pc, #144]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	4b23      	ldr	r3, [pc, #140]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4a2:	7a9b      	ldrb	r3, [r3, #10]
 800d4a4:	1c59      	adds	r1, r3, #1
 800d4a6:	b2c8      	uxtb	r0, r1
 800d4a8:	4921      	ldr	r1, [pc, #132]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4aa:	7288      	strb	r0, [r1, #10]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800d4b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d4b4:	4b1e      	ldr	r3, [pc, #120]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4ba:	7a9b      	ldrb	r3, [r3, #10]
 800d4bc:	1c59      	adds	r1, r3, #1
 800d4be:	b2c8      	uxtb	r0, r1
 800d4c0:	491b      	ldr	r1, [pc, #108]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4c2:	7288      	strb	r0, [r1, #10]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d4ca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d4cc:	4b18      	ldr	r3, [pc, #96]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4ce:	68da      	ldr	r2, [r3, #12]
 800d4d0:	4b17      	ldr	r3, [pc, #92]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4d2:	7a9b      	ldrb	r3, [r3, #10]
 800d4d4:	1c59      	adds	r1, r3, #1
 800d4d6:	b2c8      	uxtb	r0, r1
 800d4d8:	4915      	ldr	r1, [pc, #84]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4da:	7288      	strb	r0, [r1, #10]
 800d4dc:	4413      	add	r3, r2
 800d4de:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d4e2:	701a      	strb	r2, [r3, #0]
        break;
 800d4e4:	e008      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800d4e6:	bf00      	nop
 800d4e8:	e006      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d4ea:	bf00      	nop
 800d4ec:	e004      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d4ee:	bf00      	nop
 800d4f0:	e002      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d4f2:	bf00      	nop
 800d4f4:	e000      	b.n	800d4f8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d4f6:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d4fa:	7a9b      	ldrb	r3, [r3, #10]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d008      	beq.n	800d512 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800d500:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d504:	480c      	ldr	r0, [pc, #48]	@ (800d538 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d506:	f00d fafd 	bl	801ab04 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800d50a:	480b      	ldr	r0, [pc, #44]	@ (800d538 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d50c:	f00d fa1c 	bl	801a948 <UTIL_TIMER_Start>
 800d510:	e00b      	b.n	800d52a <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800d512:	4809      	ldr	r0, [pc, #36]	@ (800d538 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d514:	f00d fa86 	bl	801aa24 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d518:	4b05      	ldr	r3, [pc, #20]	@ (800d530 <LmhpComplianceOnMcpsIndication+0x798>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	705a      	strb	r2, [r3, #1]
 800d51e:	e004      	b.n	800d52a <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d520:	bf00      	nop
 800d522:	e002      	b.n	800d52a <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d524:	bf00      	nop
 800d526:	e000      	b.n	800d52a <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d528:	bf00      	nop
    }
}
 800d52a:	3790      	adds	r7, #144	@ 0x90
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bdb0      	pop	{r4, r5, r7, pc}
 800d530:	2000061c 	.word	0x2000061c
 800d534:	20000654 	.word	0x20000654
 800d538:	20000658 	.word	0x20000658

0800d53c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800d544:	bf00      	nop
    }
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bc80      	pop	{r7}
 800d54e:	4770      	bx	lr

0800d550 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d558:	4b05      	ldr	r3, [pc, #20]	@ (800d570 <LmhpComplianceOnMlmeIndication+0x20>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f083 0301 	eor.w	r3, r3, #1
 800d560:	b2db      	uxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
    {
        return;
 800d564:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	bc80      	pop	{r7}
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	2000061c 	.word	0x2000061c

0800d574 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800d57c:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <OnProcessTimer+0x1c>)
 800d57e:	2201      	movs	r2, #1
 800d580:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800d582:	4b04      	ldr	r3, [pc, #16]	@ (800d594 <OnProcessTimer+0x20>)
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	4798      	blx	r3
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	2000061c 	.word	0x2000061c
 800d594:	200000e8 	.word	0x200000e8

0800d598 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d598:	b590      	push	{r4, r7, lr}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d59e:	f00d fb5b 	bl	801ac58 <UTIL_TIMER_GetCurrentTime>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4a16      	ldr	r2, [pc, #88]	@ (800d600 <OnRadioTxDone+0x68>)
 800d5a6:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d5a8:	4c16      	ldr	r4, [pc, #88]	@ (800d604 <OnRadioTxDone+0x6c>)
 800d5aa:	463b      	mov	r3, r7
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f00c fcd3 	bl	8019f58 <SysTimeGet>
 800d5b2:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5bc:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d5c0:	4a11      	ldr	r2, [pc, #68]	@ (800d608 <OnRadioTxDone+0x70>)
 800d5c2:	7813      	ldrb	r3, [r2, #0]
 800d5c4:	f043 0320 	orr.w	r3, r3, #32
 800d5c8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d604 <OnRadioTxDone+0x6c>)
 800d5cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00a      	beq.n	800d5ea <OnRadioTxDone+0x52>
 800d5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d604 <OnRadioTxDone+0x6c>)
 800d5d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5e0:	4b08      	ldr	r3, [pc, #32]	@ (800d604 <OnRadioTxDone+0x6c>)
 800d5e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d5ea:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <OnRadioTxDone+0x74>)
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	2002      	movs	r0, #2
 800d5f2:	f00d fc21 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800d5f6:	bf00      	nop
 800d5f8:	370c      	adds	r7, #12
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd90      	pop	{r4, r7, pc}
 800d5fe:	bf00      	nop
 800d600:	2000171c 	.word	0x2000171c
 800d604:	20000670 	.word	0x20000670
 800d608:	20001718 	.word	0x20001718
 800d60c:	0801bbc0 	.word	0x0801bbc0

0800d610 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	4608      	mov	r0, r1
 800d61a:	4611      	mov	r1, r2
 800d61c:	461a      	mov	r2, r3
 800d61e:	4603      	mov	r3, r0
 800d620:	817b      	strh	r3, [r7, #10]
 800d622:	460b      	mov	r3, r1
 800d624:	813b      	strh	r3, [r7, #8]
 800d626:	4613      	mov	r3, r2
 800d628:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d62a:	f00d fb15 	bl	801ac58 <UTIL_TIMER_GetCurrentTime>
 800d62e:	4603      	mov	r3, r0
 800d630:	4a18      	ldr	r2, [pc, #96]	@ (800d694 <OnRadioRxDone+0x84>)
 800d632:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d634:	4a17      	ldr	r2, [pc, #92]	@ (800d694 <OnRadioRxDone+0x84>)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d63a:	4a16      	ldr	r2, [pc, #88]	@ (800d694 <OnRadioRxDone+0x84>)
 800d63c:	897b      	ldrh	r3, [r7, #10]
 800d63e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d640:	4a14      	ldr	r2, [pc, #80]	@ (800d694 <OnRadioRxDone+0x84>)
 800d642:	893b      	ldrh	r3, [r7, #8]
 800d644:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d646:	4a13      	ldr	r2, [pc, #76]	@ (800d694 <OnRadioRxDone+0x84>)
 800d648:	79fb      	ldrb	r3, [r7, #7]
 800d64a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d64c:	4a12      	ldr	r2, [pc, #72]	@ (800d698 <OnRadioRxDone+0x88>)
 800d64e:	7813      	ldrb	r3, [r2, #0]
 800d650:	f043 0310 	orr.w	r3, r3, #16
 800d654:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d656:	4a10      	ldr	r2, [pc, #64]	@ (800d698 <OnRadioRxDone+0x88>)
 800d658:	7813      	ldrb	r3, [r2, #0]
 800d65a:	f043 0301 	orr.w	r3, r3, #1
 800d65e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d660:	4b0e      	ldr	r3, [pc, #56]	@ (800d69c <OnRadioRxDone+0x8c>)
 800d662:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <OnRadioRxDone+0x70>
 800d66a:	4b0c      	ldr	r3, [pc, #48]	@ (800d69c <OnRadioRxDone+0x8c>)
 800d66c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d004      	beq.n	800d680 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d676:	4b09      	ldr	r3, [pc, #36]	@ (800d69c <OnRadioRxDone+0x8c>)
 800d678:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d680:	4b07      	ldr	r3, [pc, #28]	@ (800d6a0 <OnRadioRxDone+0x90>)
 800d682:	2201      	movs	r2, #1
 800d684:	2100      	movs	r1, #0
 800d686:	2002      	movs	r0, #2
 800d688:	f00d fbd6 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800d68c:	bf00      	nop
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20001720 	.word	0x20001720
 800d698:	20001718 	.word	0x20001718
 800d69c:	20000670 	.word	0x20000670
 800d6a0:	0801bbd0 	.word	0x0801bbd0

0800d6a4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d6a8:	4a0e      	ldr	r2, [pc, #56]	@ (800d6e4 <OnRadioTxTimeout+0x40>)
 800d6aa:	7813      	ldrb	r3, [r2, #0]
 800d6ac:	f043 0308 	orr.w	r3, r3, #8
 800d6b0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e8 <OnRadioTxTimeout+0x44>)
 800d6b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <OnRadioTxTimeout+0x2e>
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e8 <OnRadioTxTimeout+0x44>)
 800d6be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6c8:	4b07      	ldr	r3, [pc, #28]	@ (800d6e8 <OnRadioTxTimeout+0x44>)
 800d6ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d6d2:	4b06      	ldr	r3, [pc, #24]	@ (800d6ec <OnRadioTxTimeout+0x48>)
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	2002      	movs	r0, #2
 800d6da:	f00d fbad 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800d6de:	bf00      	nop
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	20001718 	.word	0x20001718
 800d6e8:	20000670 	.word	0x20000670
 800d6ec:	0801bbe0 	.word	0x0801bbe0

0800d6f0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d6f4:	4a0b      	ldr	r2, [pc, #44]	@ (800d724 <OnRadioRxError+0x34>)
 800d6f6:	7813      	ldrb	r3, [r2, #0]
 800d6f8:	f043 0304 	orr.w	r3, r3, #4
 800d6fc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d728 <OnRadioRxError+0x38>)
 800d700:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <OnRadioRxError+0x2e>
 800d708:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <OnRadioRxError+0x38>)
 800d70a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d004      	beq.n	800d71e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d714:	4b04      	ldr	r3, [pc, #16]	@ (800d728 <OnRadioRxError+0x38>)
 800d716:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	4798      	blx	r3
    }
}
 800d71e:	bf00      	nop
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20001718 	.word	0x20001718
 800d728:	20000670 	.word	0x20000670

0800d72c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d730:	4a0e      	ldr	r2, [pc, #56]	@ (800d76c <OnRadioRxTimeout+0x40>)
 800d732:	7813      	ldrb	r3, [r2, #0]
 800d734:	f043 0302 	orr.w	r3, r3, #2
 800d738:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d73a:	4b0d      	ldr	r3, [pc, #52]	@ (800d770 <OnRadioRxTimeout+0x44>)
 800d73c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00a      	beq.n	800d75a <OnRadioRxTimeout+0x2e>
 800d744:	4b0a      	ldr	r3, [pc, #40]	@ (800d770 <OnRadioRxTimeout+0x44>)
 800d746:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d004      	beq.n	800d75a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d750:	4b07      	ldr	r3, [pc, #28]	@ (800d770 <OnRadioRxTimeout+0x44>)
 800d752:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d75a:	4b06      	ldr	r3, [pc, #24]	@ (800d774 <OnRadioRxTimeout+0x48>)
 800d75c:	2201      	movs	r2, #1
 800d75e:	2100      	movs	r1, #0
 800d760:	2002      	movs	r0, #2
 800d762:	f00d fb69 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 800d766:	bf00      	nop
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20001718 	.word	0x20001718
 800d770:	20000670 	.word	0x20000670
 800d774:	0801bbf0 	.word	0x0801bbf0

0800d778 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d77c:	4b08      	ldr	r3, [pc, #32]	@ (800d7a0 <UpdateRxSlotIdleState+0x28>)
 800d77e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d782:	2b02      	cmp	r3, #2
 800d784:	d004      	beq.n	800d790 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d786:	4b07      	ldr	r3, [pc, #28]	@ (800d7a4 <UpdateRxSlotIdleState+0x2c>)
 800d788:	2206      	movs	r2, #6
 800d78a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d78e:	e003      	b.n	800d798 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d790:	4b04      	ldr	r3, [pc, #16]	@ (800d7a4 <UpdateRxSlotIdleState+0x2c>)
 800d792:	2202      	movs	r2, #2
 800d794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800d798:	bf00      	nop
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bc80      	pop	{r7}
 800d79e:	4770      	bx	lr
 800d7a0:	20000b90 	.word	0x20000b90
 800d7a4:	20000670 	.word	0x20000670

0800d7a8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08e      	sub	sp, #56	@ 0x38
 800d7ac:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d7ae:	4b3e      	ldr	r3, [pc, #248]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d7b0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d002      	beq.n	800d7be <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d7b8:	4b3c      	ldr	r3, [pc, #240]	@ (800d8ac <ProcessRadioTxDone+0x104>)
 800d7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7bc:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d7be:	4b3c      	ldr	r3, [pc, #240]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d7c0:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	483b      	ldr	r0, [pc, #236]	@ (800d8b4 <ProcessRadioTxDone+0x10c>)
 800d7c8:	f00d f99c 	bl	801ab04 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d7cc:	4839      	ldr	r0, [pc, #228]	@ (800d8b4 <ProcessRadioTxDone+0x10c>)
 800d7ce:	f00d f8bb 	bl	801a948 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d7d2:	4b37      	ldr	r3, [pc, #220]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d7d4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800d7d8:	4619      	mov	r1, r3
 800d7da:	4837      	ldr	r0, [pc, #220]	@ (800d8b8 <ProcessRadioTxDone+0x110>)
 800d7dc:	f00d f992 	bl	801ab04 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d7e0:	4835      	ldr	r0, [pc, #212]	@ (800d8b8 <ProcessRadioTxDone+0x110>)
 800d7e2:	f00d f8b1 	bl	801a948 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800d7e6:	4b32      	ldr	r3, [pc, #200]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d7e8:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01a      	beq.n	800d826 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800d7f0:	2315      	movs	r3, #21
 800d7f2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d7f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d7f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d7fc:	f107 0220 	add.w	r2, r7, #32
 800d800:	4611      	mov	r1, r2
 800d802:	4618      	mov	r0, r3
 800d804:	f006 fd28 	bl	8014258 <RegionGetPhyParam>
 800d808:	4603      	mov	r3, r0
 800d80a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d80c:	4b28      	ldr	r3, [pc, #160]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d80e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	4413      	add	r3, r2
 800d816:	4619      	mov	r1, r3
 800d818:	4828      	ldr	r0, [pc, #160]	@ (800d8bc <ProcessRadioTxDone+0x114>)
 800d81a:	f00d f973 	bl	801ab04 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800d81e:	4827      	ldr	r0, [pc, #156]	@ (800d8bc <ProcessRadioTxDone+0x114>)
 800d820:	f00d f892 	bl	801a948 <UTIL_TIMER_Start>
 800d824:	e003      	b.n	800d82e <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d826:	4b22      	ldr	r3, [pc, #136]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d82e:	4b24      	ldr	r3, [pc, #144]	@ (800d8c0 <ProcessRadioTxDone+0x118>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d834:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d836:	4b1e      	ldr	r3, [pc, #120]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d838:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800d83c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d83e:	4b20      	ldr	r3, [pc, #128]	@ (800d8c0 <ProcessRadioTxDone+0x118>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d848:	4618      	mov	r0, r3
 800d84a:	f00c fbbd 	bl	8019fc8 <SysTimeGetMcuTime>
 800d84e:	4638      	mov	r0, r7
 800d850:	4b15      	ldr	r3, [pc, #84]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d852:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800d856:	9200      	str	r2, [sp, #0]
 800d858:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800d85c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d860:	ca06      	ldmia	r2, {r1, r2}
 800d862:	f00c fb12 	bl	8019e8a <SysTimeSub>
 800d866:	f107 0314 	add.w	r3, r7, #20
 800d86a:	463a      	mov	r2, r7
 800d86c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d870:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d874:	4b0e      	ldr	r3, [pc, #56]	@ (800d8b0 <ProcessRadioTxDone+0x108>)
 800d876:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800d87a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d87c:	2301      	movs	r3, #1
 800d87e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d880:	4b09      	ldr	r3, [pc, #36]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d882:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d88a:	2300      	movs	r3, #0
 800d88c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d88e:	4b06      	ldr	r3, [pc, #24]	@ (800d8a8 <ProcessRadioTxDone+0x100>)
 800d890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d894:	f107 0208 	add.w	r2, r7, #8
 800d898:	4611      	mov	r1, r2
 800d89a:	4618      	mov	r0, r3
 800d89c:	f006 fcf4 	bl	8014288 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800d8a0:	bf00      	nop
 800d8a2:	3730      	adds	r7, #48	@ 0x30
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	20000b90 	.word	0x20000b90
 800d8ac:	0801c298 	.word	0x0801c298
 800d8b0:	20000670 	.word	0x20000670
 800d8b4:	200009f0 	.word	0x200009f0
 800d8b8:	20000a08 	.word	0x20000a08
 800d8bc:	20000a74 	.word	0x20000a74
 800d8c0:	2000171c 	.word	0x2000171c

0800d8c4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d8c8:	4b10      	ldr	r3, [pc, #64]	@ (800d90c <PrepareRxDoneAbort+0x48>)
 800d8ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d8ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8d2:	4a0e      	ldr	r2, [pc, #56]	@ (800d90c <PrepareRxDoneAbort+0x48>)
 800d8d4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800d8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d90c <PrepareRxDoneAbort+0x48>)
 800d8da:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f001 f99c 	bl	800ec20 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d8e8:	4a08      	ldr	r2, [pc, #32]	@ (800d90c <PrepareRxDoneAbort+0x48>)
 800d8ea:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800d8ee:	f043 0302 	orr.w	r3, r3, #2
 800d8f2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d8f6:	4a05      	ldr	r2, [pc, #20]	@ (800d90c <PrepareRxDoneAbort+0x48>)
 800d8f8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800d8fc:	f043 0320 	orr.w	r3, r3, #32
 800d900:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800d904:	f7ff ff38 	bl	800d778 <UpdateRxSlotIdleState>
}
 800d908:	bf00      	nop
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	20000670 	.word	0x20000670

0800d910 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b0a7      	sub	sp, #156	@ 0x9c
 800d914:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d916:	2312      	movs	r3, #18
 800d918:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d91c:	4bbd      	ldr	r3, [pc, #756]	@ (800dc14 <ProcessRadioRxDone+0x304>)
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800d924:	4bbb      	ldr	r3, [pc, #748]	@ (800dc14 <ProcessRadioRxDone+0x304>)
 800d926:	891b      	ldrh	r3, [r3, #8]
 800d928:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800d92c:	4bb9      	ldr	r3, [pc, #740]	@ (800dc14 <ProcessRadioRxDone+0x304>)
 800d92e:	895b      	ldrh	r3, [r3, #10]
 800d930:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800d934:	4bb7      	ldr	r3, [pc, #732]	@ (800dc14 <ProcessRadioRxDone+0x304>)
 800d936:	7b1b      	ldrb	r3, [r3, #12]
 800d938:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800d93c:	2300      	movs	r3, #0
 800d93e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d946:	4bb4      	ldr	r3, [pc, #720]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800d948:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d94c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d956:	2301      	movs	r3, #1
 800d958:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800d95c:	4aaf      	ldr	r2, [pc, #700]	@ (800dc1c <ProcessRadioRxDone+0x30c>)
 800d95e:	7813      	ldrb	r3, [r2, #0]
 800d960:	f36f 0300 	bfc	r3, #0, #1
 800d964:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d966:	4bae      	ldr	r3, [pc, #696]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800d96e:	4aac      	ldr	r2, [pc, #688]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d970:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800d974:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800d978:	4aa9      	ldr	r2, [pc, #676]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d97a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d97e:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d982:	4ba7      	ldr	r3, [pc, #668]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d984:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800d988:	4ba5      	ldr	r3, [pc, #660]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d98a:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800d98e:	4ba4      	ldr	r3, [pc, #656]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800d996:	4ba2      	ldr	r3, [pc, #648]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800d99e:	4ba0      	ldr	r3, [pc, #640]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800d9a6:	4b9e      	ldr	r3, [pc, #632]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800d9ae:	4b9c      	ldr	r3, [pc, #624]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800d9b6:	4b9a      	ldr	r3, [pc, #616]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800d9be:	4b98      	ldr	r3, [pc, #608]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d9c6:	4b96      	ldr	r3, [pc, #600]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d9ce:	4b94      	ldr	r3, [pc, #592]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800d9d6:	4b92      	ldr	r3, [pc, #584]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d9de:	4b90      	ldr	r3, [pc, #576]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800d9e6:	4b8e      	ldr	r3, [pc, #568]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d9ee:	4b8d      	ldr	r3, [pc, #564]	@ (800dc24 <ProcessRadioRxDone+0x314>)
 800d9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f2:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800d9f4:	4b8a      	ldr	r3, [pc, #552]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800d9f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d102      	bne.n	800da04 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800d9fe:	488a      	ldr	r0, [pc, #552]	@ (800dc28 <ProcessRadioRxDone+0x318>)
 800da00:	f00d f810 	bl	801aa24 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800da04:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800da08:	4619      	mov	r1, r3
 800da0a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800da0e:	f004 fcdb 	bl	80123c8 <LoRaMacClassBRxBeacon>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800da18:	4a81      	ldr	r2, [pc, #516]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800da1a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800da1e:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800da22:	4a7f      	ldr	r2, [pc, #508]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800da24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da28:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800da2c:	f000 bc22 	b.w	800e274 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800da30:	4b79      	ldr	r3, [pc, #484]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800da32:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800da36:	2b01      	cmp	r3, #1
 800da38:	d11e      	bne.n	800da78 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800da3a:	f004 fcd8 	bl	80123ee <LoRaMacClassBIsPingExpected>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da44:	2000      	movs	r0, #0
 800da46:	f004 fc89 	bl	801235c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800da4a:	2000      	movs	r0, #0
 800da4c:	f004 fcaa 	bl	80123a4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800da50:	4b73      	ldr	r3, [pc, #460]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800da52:	2204      	movs	r2, #4
 800da54:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800da58:	e00e      	b.n	800da78 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800da5a:	f004 fccf 	bl	80123fc <LoRaMacClassBIsMulticastExpected>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d009      	beq.n	800da78 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da64:	2000      	movs	r0, #0
 800da66:	f004 fc83 	bl	8012370 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800da6a:	2000      	movs	r0, #0
 800da6c:	f004 fca3 	bl	80123b6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800da70:	4b6b      	ldr	r3, [pc, #428]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800da72:	2205      	movs	r2, #5
 800da74:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800da78:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800da7c:	1c5a      	adds	r2, r3, #1
 800da7e:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800da82:	461a      	mov	r2, r3
 800da84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da88:	4413      	add	r3, r2
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800da90:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800da94:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	2b06      	cmp	r3, #6
 800da9e:	f200 83bd 	bhi.w	800e21c <ProcessRadioRxDone+0x90c>
 800daa2:	a201      	add	r2, pc, #4	@ (adr r2, 800daa8 <ProcessRadioRxDone+0x198>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800dac5 	.word	0x0800dac5
 800daac:	0800e21d 	.word	0x0800e21d
 800dab0:	0800dc59 	.word	0x0800dc59
 800dab4:	0800e21d 	.word	0x0800e21d
 800dab8:	0800dc51 	.word	0x0800dc51
 800dabc:	0800e21d 	.word	0x0800e21d
 800dac0:	0800e1af 	.word	0x0800e1af
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dac4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dac8:	2b10      	cmp	r3, #16
 800daca:	d806      	bhi.n	800dada <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dacc:	4b54      	ldr	r3, [pc, #336]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dad4:	f7ff fef6 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dad8:	e3cc      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800dada:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dade:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800dae0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dae8:	4b4b      	ldr	r3, [pc, #300]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800daea:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d006      	beq.n	800db00 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800daf2:	4b4b      	ldr	r3, [pc, #300]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dafa:	f7ff fee3 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dafe:	e3b9      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800db00:	f7fe f876 	bl	800bbf0 <SecureElementGetJoinEui>
 800db04:	4601      	mov	r1, r0
 800db06:	f107 030c 	add.w	r3, r7, #12
 800db0a:	461a      	mov	r2, r3
 800db0c:	20ff      	movs	r0, #255	@ 0xff
 800db0e:	f005 fe2d 	bl	801376c <LoRaMacCryptoHandleJoinAccept>
 800db12:	4603      	mov	r3, r0
 800db14:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800db18:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 8085 	bne.w	800dc2c <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800db22:	7d7b      	ldrb	r3, [r7, #21]
 800db24:	461a      	mov	r2, r3
 800db26:	4b3c      	ldr	r3, [pc, #240]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db28:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800db2c:	4b3a      	ldr	r3, [pc, #232]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db2e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800db32:	7dbb      	ldrb	r3, [r7, #22]
 800db34:	021b      	lsls	r3, r3, #8
 800db36:	4313      	orrs	r3, r2
 800db38:	4a37      	ldr	r2, [pc, #220]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db3a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800db3e:	4b36      	ldr	r3, [pc, #216]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db40:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	041b      	lsls	r3, r3, #16
 800db48:	4313      	orrs	r3, r2
 800db4a:	4a33      	ldr	r2, [pc, #204]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db4c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	4a31      	ldr	r2, [pc, #196]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800db58:	7f3b      	ldrb	r3, [r7, #28]
 800db5a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	461a      	mov	r2, r3
 800db62:	4b2d      	ldr	r3, [pc, #180]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db64:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800db68:	7f3b      	ldrb	r3, [r7, #28]
 800db6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	461a      	mov	r2, r3
 800db72:	4b29      	ldr	r3, [pc, #164]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db74:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800db78:	7f3b      	ldrb	r3, [r7, #28]
 800db7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	461a      	mov	r2, r3
 800db82:	4b25      	ldr	r3, [pc, #148]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db84:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800db88:	7f7b      	ldrb	r3, [r7, #29]
 800db8a:	461a      	mov	r2, r3
 800db8c:	4b22      	ldr	r3, [pc, #136]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db8e:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800db90:	4b21      	ldr	r3, [pc, #132]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db94:	2b00      	cmp	r3, #0
 800db96:	d102      	bne.n	800db9e <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800db98:	4b1f      	ldr	r3, [pc, #124]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800db9e:	4b1e      	ldr	r3, [pc, #120]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dba6:	fb02 f303 	mul.w	r3, r2, r3
 800dbaa:	4a1b      	ldr	r2, [pc, #108]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbac:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dbae:	4b1a      	ldr	r3, [pc, #104]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbb2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800dbb6:	4a18      	ldr	r2, [pc, #96]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbb8:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800dbba:	4b17      	ldr	r3, [pc, #92]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800dbc2:	f107 030c 	add.w	r3, r7, #12
 800dbc6:	3312      	adds	r3, #18
 800dbc8:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800dbca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	3b11      	subs	r3, #17
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800dbd8:	4b11      	ldr	r3, [pc, #68]	@ (800dc20 <ProcessRadioRxDone+0x310>)
 800dbda:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800dbde:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800dbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dbe8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800dbec:	4611      	mov	r1, r2
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f006 fb84 	bl	80142fc <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dbf4:	4b08      	ldr	r3, [pc, #32]	@ (800dc18 <ProcessRadioRxDone+0x308>)
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	f005 f8dd 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d01b      	beq.n	800dc40 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800dc08:	2101      	movs	r1, #1
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	f005 f84a 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>
 800dc10:	e016      	b.n	800dc40 <ProcessRadioRxDone+0x330>
 800dc12:	bf00      	nop
 800dc14:	20001720 	.word	0x20001720
 800dc18:	20000b90 	.word	0x20000b90
 800dc1c:	20001718 	.word	0x20001718
 800dc20:	20000670 	.word	0x20000670
 800dc24:	0801c298 	.word	0x0801c298
 800dc28:	20000a08 	.word	0x20000a08
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	f005 f8c5 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dc38:	2101      	movs	r1, #1
 800dc3a:	2007      	movs	r0, #7
 800dc3c:	f005 f832 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800dc40:	4ab9      	ldr	r2, [pc, #740]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dc42:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800dc46:	f043 0308 	orr.w	r3, r3, #8
 800dc4a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800dc4e:	e2ec      	b.n	800e22a <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800dc50:	4bb5      	ldr	r3, [pc, #724]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc58:	4bb4      	ldr	r3, [pc, #720]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800dc5a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800dc5e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800dc62:	4bb1      	ldr	r3, [pc, #708]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dc64:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800dc68:	b25b      	sxtb	r3, r3
 800dc6a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800dc6e:	230d      	movs	r3, #13
 800dc70:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800dc74:	4bad      	ldr	r3, [pc, #692]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800dc76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800dc7e:	230e      	movs	r3, #14
 800dc80:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc84:	4ba9      	ldr	r3, [pc, #676]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800dc86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc8a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800dc8e:	4611      	mov	r1, r2
 800dc90:	4618      	mov	r0, r3
 800dc92:	f006 fae1 	bl	8014258 <RegionGetPhyParam>
 800dc96:	4603      	mov	r3, r0
 800dc98:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800dc9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dc9e:	3b0d      	subs	r3, #13
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	b21b      	sxth	r3, r3
 800dca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dca8:	b21a      	sxth	r2, r3
 800dcaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcac:	b21b      	sxth	r3, r3
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	dc03      	bgt.n	800dcba <ProcessRadioRxDone+0x3aa>
 800dcb2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dcb6:	2b0b      	cmp	r3, #11
 800dcb8:	d806      	bhi.n	800dcc8 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcba:	4b9b      	ldr	r3, [pc, #620]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dcc2:	f7ff fdff 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dcc6:	e2d5      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800dcc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dccc:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800dcce:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dcd8:	4b95      	ldr	r3, [pc, #596]	@ (800df30 <ProcessRadioRxDone+0x620>)
 800dcda:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dcdc:	23ff      	movs	r3, #255	@ 0xff
 800dcde:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dce2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dce6:	4618      	mov	r0, r3
 800dce8:	f006 f83d 	bl	8013d66 <LoRaMacParserData>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d006      	beq.n	800dd00 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcf2:	4b8d      	ldr	r3, [pc, #564]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dcfa:	f7ff fde3 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dcfe:	e2b9      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dd00:	4b8a      	ldr	r3, [pc, #552]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800dd02:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d132      	bne.n	800dd70 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800dd0a:	f004 fb70 	bl	80123ee <LoRaMacClassBIsPingExpected>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d014      	beq.n	800dd3e <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd14:	2000      	movs	r0, #0
 800dd16:	f004 fb21 	bl	801235c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	f004 fb42 	bl	80123a4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dd20:	4b81      	ldr	r3, [pc, #516]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dd22:	2204      	movs	r2, #4
 800dd24:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dd28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd2a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800dd2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	4619      	mov	r1, r3
 800dd36:	4610      	mov	r0, r2
 800dd38:	f004 fbe2 	bl	8012500 <LoRaMacClassBSetFPendingBit>
 800dd3c:	e018      	b.n	800dd70 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd3e:	f004 fb5d 	bl	80123fc <LoRaMacClassBIsMulticastExpected>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d013      	beq.n	800dd70 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f004 fb11 	bl	8012370 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dd4e:	2000      	movs	r0, #0
 800dd50:	f004 fb31 	bl	80123b6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dd54:	4b74      	ldr	r3, [pc, #464]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dd56:	2205      	movs	r2, #5
 800dd58:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dd5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd5e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800dd62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	f004 fbc8 	bl	8012500 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dd70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd72:	4a6d      	ldr	r2, [pc, #436]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dd74:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dd78:	1dba      	adds	r2, r7, #6
 800dd7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f002 fd1f 	bl	80107c4 <DetermineFrameType>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd8c:	4b66      	ldr	r3, [pc, #408]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dd94:	f7ff fd96 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dd98:	e26c      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dda4:	2300      	movs	r3, #0
 800dda6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800ddaa:	e049      	b.n	800de40 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ddac:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ddb0:	4a5e      	ldr	r2, [pc, #376]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800ddb2:	212c      	movs	r1, #44	@ 0x2c
 800ddb4:	fb01 f303 	mul.w	r3, r1, r3
 800ddb8:	4413      	add	r3, r2
 800ddba:	33dc      	adds	r3, #220	@ 0xdc
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d138      	bne.n	800de36 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ddc4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ddc8:	4a58      	ldr	r2, [pc, #352]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800ddca:	212c      	movs	r1, #44	@ 0x2c
 800ddcc:	fb01 f303 	mul.w	r3, r1, r3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	33da      	adds	r3, #218	@ 0xda
 800ddd4:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d02d      	beq.n	800de36 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800ddda:	2301      	movs	r3, #1
 800dddc:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dde0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800dde4:	4a51      	ldr	r2, [pc, #324]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800dde6:	212c      	movs	r1, #44	@ 0x2c
 800dde8:	fb01 f303 	mul.w	r3, r1, r3
 800ddec:	4413      	add	r3, r2
 800ddee:	33db      	adds	r3, #219	@ 0xdb
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ddf6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ddfa:	4a4c      	ldr	r2, [pc, #304]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800ddfc:	212c      	movs	r1, #44	@ 0x2c
 800ddfe:	fb01 f303 	mul.w	r3, r1, r3
 800de02:	4413      	add	r3, r2
 800de04:	33f8      	adds	r3, #248	@ 0xf8
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800de0c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800de10:	4a46      	ldr	r2, [pc, #280]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800de12:	212c      	movs	r1, #44	@ 0x2c
 800de14:	fb01 f303 	mul.w	r3, r1, r3
 800de18:	4413      	add	r3, r2
 800de1a:	33dc      	adds	r3, #220	@ 0xdc
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800de22:	4b42      	ldr	r3, [pc, #264]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800de24:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d10e      	bne.n	800de4a <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800de2c:	4b3e      	ldr	r3, [pc, #248]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800de2e:	2203      	movs	r2, #3
 800de30:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800de34:	e009      	b.n	800de4a <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800de36:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800de3a:	3301      	adds	r3, #1
 800de3c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800de40:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0b1      	beq.n	800ddac <ProcessRadioRxDone+0x49c>
 800de48:	e000      	b.n	800de4c <ProcessRadioRxDone+0x53c>
                    break;
 800de4a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800de4c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800de50:	2b01      	cmp	r3, #1
 800de52:	d117      	bne.n	800de84 <ProcessRadioRxDone+0x574>
 800de54:	79bb      	ldrb	r3, [r7, #6]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d10d      	bne.n	800de76 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800de5a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800de5e:	f003 0320 	and.w	r3, r3, #32
 800de62:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800de64:	2b00      	cmp	r3, #0
 800de66:	d106      	bne.n	800de76 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800de68:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800de6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de70:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800de72:	2b00      	cmp	r3, #0
 800de74:	d006      	beq.n	800de84 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de76:	4b2c      	ldr	r3, [pc, #176]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800de7e:	f7ff fd21 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800de82:	e1f7      	b.n	800e274 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800de84:	79b9      	ldrb	r1, [r7, #6]
 800de86:	4c29      	ldr	r4, [pc, #164]	@ (800df2c <ProcessRadioRxDone+0x61c>)
 800de88:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800de8c:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	1dfb      	adds	r3, r7, #7
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800de9e:	f000 fee7 	bl	800ec70 <GetFCntDown>
 800dea2:	4603      	mov	r3, r0
 800dea4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dea8:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800deac:	2b00      	cmp	r3, #0
 800deae:	d017      	beq.n	800dee0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800deb0:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800deb4:	2b07      	cmp	r3, #7
 800deb6:	d104      	bne.n	800dec2 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800deb8:	4b1b      	ldr	r3, [pc, #108]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800deba:	2208      	movs	r2, #8
 800debc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800dec0:	e003      	b.n	800deca <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dec2:	4b19      	ldr	r3, [pc, #100]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dec4:	2201      	movs	r2, #1
 800dec6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	4a16      	ldr	r2, [pc, #88]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800dece:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	4a14      	ldr	r2, [pc, #80]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800ded6:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800deda:	f7ff fcf3 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800dede:	e1c9      	b.n	800e274 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dee0:	79fa      	ldrb	r2, [r7, #7]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800dee8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	460b      	mov	r3, r1
 800def0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800def4:	f005 fd86 	bl	8013a04 <LoRaMacCryptoUnsecureMessage>
 800def8:	4603      	mov	r3, r0
 800defa:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800defe:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800df02:	2b00      	cmp	r3, #0
 800df04:	d016      	beq.n	800df34 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800df06:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d104      	bne.n	800df18 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800df0e:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800df10:	220a      	movs	r2, #10
 800df12:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800df16:	e003      	b.n	800df20 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800df18:	4b03      	ldr	r3, [pc, #12]	@ (800df28 <ProcessRadioRxDone+0x618>)
 800df1a:	220b      	movs	r2, #11
 800df1c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800df20:	f7ff fcd0 	bl	800d8c4 <PrepareRxDoneAbort>
                return;
 800df24:	e1a6      	b.n	800e274 <ProcessRadioRxDone+0x964>
 800df26:	bf00      	nop
 800df28:	20000670 	.word	0x20000670
 800df2c:	20000b90 	.word	0x20000b90
 800df30:	200008a8 	.word	0x200008a8
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800df34:	4bb5      	ldr	r3, [pc, #724]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df36:	2200      	movs	r2, #0
 800df38:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800df3c:	4ab3      	ldr	r2, [pc, #716]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df3e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800df42:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800df46:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800df4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	461a      	mov	r2, r3
 800df52:	4bae      	ldr	r3, [pc, #696]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df54:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800df58:	4bac      	ldr	r3, [pc, #688]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800df60:	4baa      	ldr	r3, [pc, #680]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	4aa8      	ldr	r2, [pc, #672]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df6c:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4aa6      	ldr	r2, [pc, #664]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df74:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800df78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800df7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	bf14      	ite	ne
 800df86:	2301      	movne	r3, #1
 800df88:	2300      	moveq	r3, #0
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	4b9f      	ldr	r3, [pc, #636]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df8e:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800df92:	4b9e      	ldr	r3, [pc, #632]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800df9a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800df9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	bf14      	ite	ne
 800dfa8:	2301      	movne	r3, #1
 800dfaa:	2300      	moveq	r3, #0
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	4b97      	ldr	r3, [pc, #604]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800dfb0:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dfb4:	4b95      	ldr	r3, [pc, #596]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800dfb6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d004      	beq.n	800dfc8 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800dfbe:	4b93      	ldr	r3, [pc, #588]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800dfc0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d106      	bne.n	800dfd6 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800dfc8:	4b91      	ldr	r3, [pc, #580]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800dfce:	4b90      	ldr	r3, [pc, #576]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800dfd6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d104      	bne.n	800dfe8 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800dfde:	4b8b      	ldr	r3, [pc, #556]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800dfe6:	e034      	b.n	800e052 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800dfe8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800dfec:	f023 031f 	bic.w	r3, r3, #31
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	2ba0      	cmp	r3, #160	@ 0xa0
 800dff4:	d125      	bne.n	800e042 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800dff6:	4b86      	ldr	r3, [pc, #536]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800dffe:	4b84      	ldr	r3, [pc, #528]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800e000:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e00a:	4a81      	ldr	r2, [pc, #516]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800e00c:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e00e:	4b7f      	ldr	r3, [pc, #508]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e010:	2201      	movs	r2, #1
 800e012:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e016:	4b7d      	ldr	r3, [pc, #500]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e018:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d018      	beq.n	800e052 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e020:	4b7a      	ldr	r3, [pc, #488]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e022:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e026:	2b01      	cmp	r3, #1
 800e028:	d013      	beq.n	800e052 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e02a:	4b79      	ldr	r3, [pc, #484]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800e02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e030:	4a76      	ldr	r2, [pc, #472]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e032:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e036:	4b77      	ldr	r3, [pc, #476]	@ (800e214 <ProcessRadioRxDone+0x904>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a74      	ldr	r2, [pc, #464]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e03c:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e040:	e007      	b.n	800e052 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e042:	4b73      	ldr	r3, [pc, #460]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800e044:	2200      	movs	r2, #0
 800e046:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e04a:	4b70      	ldr	r3, [pc, #448]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e052:	4b6e      	ldr	r3, [pc, #440]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e054:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e058:	4a6c      	ldr	r2, [pc, #432]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e05a:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e05e:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e062:	4618      	mov	r0, r3
 800e064:	f001 ff96 	bl	800ff94 <RemoveMacCommands>

            switch( fType )
 800e068:	79bb      	ldrb	r3, [r7, #6]
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d873      	bhi.n	800e156 <ProcessRadioRxDone+0x846>
 800e06e:	a201      	add	r2, pc, #4	@ (adr r2, 800e074 <ProcessRadioRxDone+0x764>)
 800e070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e074:	0800e085 	.word	0x0800e085
 800e078:	0800e0d5 	.word	0x0800e0d5
 800e07c:	0800e10b 	.word	0x0800e10b
 800e080:	0800e131 	.word	0x0800e131
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e084:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e088:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	461c      	mov	r4, r3
 800e090:	4b5e      	ldr	r3, [pc, #376]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e092:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e096:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e09a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e09e:	f102 0010 	add.w	r0, r2, #16
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4622      	mov	r2, r4
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	f000 ff45 	bl	800ef38 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e0ae:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e0b2:	4b56      	ldr	r3, [pc, #344]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e0b4:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e0b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0ba:	4a54      	ldr	r2, [pc, #336]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e0bc:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e0c0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e0c4:	4b51      	ldr	r3, [pc, #324]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e0c6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e0ca:	4b50      	ldr	r3, [pc, #320]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e0d2:	e047      	b.n	800e164 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e0d4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e0d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	461c      	mov	r4, r3
 800e0e0:	4b4a      	ldr	r3, [pc, #296]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e0e2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e0e6:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e0ea:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e0ee:	f102 0010 	add.w	r0, r2, #16
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	f000 ff1d 	bl	800ef38 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e0fe:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e102:	4b42      	ldr	r3, [pc, #264]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e104:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e108:	e02c      	b.n	800e164 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e10a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e10c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e110:	4b3e      	ldr	r3, [pc, #248]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e112:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e116:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	460b      	mov	r3, r1
 800e11e:	2100      	movs	r1, #0
 800e120:	f000 ff0a 	bl	800ef38 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e124:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e128:	4b38      	ldr	r3, [pc, #224]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e12a:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e12e:	e019      	b.n	800e164 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e130:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e134:	4b35      	ldr	r3, [pc, #212]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e136:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e13a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e13c:	4a33      	ldr	r2, [pc, #204]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e13e:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e142:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e146:	4b31      	ldr	r3, [pc, #196]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e148:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e14c:	4b2f      	ldr	r3, [pc, #188]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e154:	e006      	b.n	800e164 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e156:	4b2d      	ldr	r3, [pc, #180]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800e15e:	f7ff fbb1 	bl	800d8c4 <PrepareRxDoneAbort>
                    break;
 800e162:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e164:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e168:	2be0      	cmp	r3, #224	@ 0xe0
 800e16a:	d118      	bne.n	800e19e <ProcessRadioRxDone+0x88e>
 800e16c:	4b28      	ldr	r3, [pc, #160]	@ (800e210 <ProcessRadioRxDone+0x900>)
 800e16e:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800e172:	f083 0301 	eor.w	r3, r3, #1
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d010      	beq.n	800e19e <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e17c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e180:	4b22      	ldr	r3, [pc, #136]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e182:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e186:	4b21      	ldr	r3, [pc, #132]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e188:	2200      	movs	r2, #0
 800e18a:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e18e:	4b1f      	ldr	r3, [pc, #124]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800e196:	4b1d      	ldr	r3, [pc, #116]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e19e:	4a1b      	ldr	r2, [pc, #108]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1a0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e1a4:	f043 0302 	orr.w	r3, r3, #2
 800e1a8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800e1ac:	e03d      	b.n	800e22a <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e1ae:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e1b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e1b6:	18d1      	adds	r1, r2, r3
 800e1b8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	4813      	ldr	r0, [pc, #76]	@ (800e218 <ProcessRadioRxDone+0x908>)
 800e1ca:	f008 fae6 	bl	801679a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1d0:	2203      	movs	r2, #3
 800e1d2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e1de:	4b0b      	ldr	r3, [pc, #44]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e218 <ProcessRadioRxDone+0x908>)
 800e1e2:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e1e6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	4b05      	ldr	r3, [pc, #20]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1f6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e1fa:	4a04      	ldr	r2, [pc, #16]	@ (800e20c <ProcessRadioRxDone+0x8fc>)
 800e1fc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e200:	f043 0302 	orr.w	r3, r3, #2
 800e204:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e208:	e00f      	b.n	800e22a <ProcessRadioRxDone+0x91a>
 800e20a:	bf00      	nop
 800e20c:	20000670 	.word	0x20000670
 800e210:	20000b90 	.word	0x20000b90
 800e214:	20001720 	.word	0x20001720
 800e218:	200008a8 	.word	0x200008a8
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e21c:	4b17      	ldr	r3, [pc, #92]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800e224:	f7ff fb4e 	bl	800d8c4 <PrepareRxDoneAbort>
            break;
 800e228:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e22a:	4b14      	ldr	r3, [pc, #80]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e22c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e234:	4b11      	ldr	r3, [pc, #68]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e236:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d10c      	bne.n	800e258 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e23e:	4b0f      	ldr	r3, [pc, #60]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e240:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e244:	2b00      	cmp	r3, #0
 800e246:	d007      	beq.n	800e258 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e248:	4b0c      	ldr	r3, [pc, #48]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e24a:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d002      	beq.n	800e258 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e252:	2000      	movs	r0, #0
 800e254:	f000 fce4 	bl	800ec20 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e258:	4b08      	ldr	r3, [pc, #32]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e25a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d006      	beq.n	800e270 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e262:	4a06      	ldr	r2, [pc, #24]	@ (800e27c <ProcessRadioRxDone+0x96c>)
 800e264:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e268:	f043 0320 	orr.w	r3, r3, #32
 800e26c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e270:	f7ff fa82 	bl	800d778 <UpdateRxSlotIdleState>
}
 800e274:	3794      	adds	r7, #148	@ 0x94
 800e276:	46bd      	mov	sp, r7
 800e278:	bd90      	pop	{r4, r7, pc}
 800e27a:	bf00      	nop
 800e27c:	20000670 	.word	0x20000670

0800e280 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e284:	4b11      	ldr	r3, [pc, #68]	@ (800e2cc <ProcessRadioTxTimeout+0x4c>)
 800e286:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d002      	beq.n	800e294 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e28e:	4b10      	ldr	r3, [pc, #64]	@ (800e2d0 <ProcessRadioTxTimeout+0x50>)
 800e290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e292:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e294:	f7ff fa70 	bl	800d778 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e298:	4b0e      	ldr	r3, [pc, #56]	@ (800e2d4 <ProcessRadioTxTimeout+0x54>)
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e2a0:	2002      	movs	r0, #2
 800e2a2:	f004 fd57 	bl	8012d54 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d4 <ProcessRadioTxTimeout+0x54>)
 800e2a8:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d003      	beq.n	800e2b8 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800e2b0:	4b08      	ldr	r3, [pc, #32]	@ (800e2d4 <ProcessRadioTxTimeout+0x54>)
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e2b8:	4a06      	ldr	r2, [pc, #24]	@ (800e2d4 <ProcessRadioTxTimeout+0x54>)
 800e2ba:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e2be:	f043 0320 	orr.w	r3, r3, #32
 800e2c2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800e2c6:	bf00      	nop
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20000b90 	.word	0x20000b90
 800e2d0:	0801c298 	.word	0x0801c298
 800e2d4:	20000670 	.word	0x20000670

0800e2d8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	460a      	mov	r2, r1
 800e2e2:	71fb      	strb	r3, [r7, #7]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e2ec:	4b3d      	ldr	r3, [pc, #244]	@ (800e3e4 <HandleRadioRxErrorTimeout+0x10c>)
 800e2ee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	d002      	beq.n	800e2fc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800e3e8 <HandleRadioRxErrorTimeout+0x110>)
 800e2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2fa:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e2fc:	f004 f870 	bl	80123e0 <LoRaMacClassBIsBeaconExpected>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d007      	beq.n	800e316 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e306:	2002      	movs	r0, #2
 800e308:	f004 f81e 	bl	8012348 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e30c:	2000      	movs	r0, #0
 800e30e:	f004 f840 	bl	8012392 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e312:	2301      	movs	r3, #1
 800e314:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e316:	4b33      	ldr	r3, [pc, #204]	@ (800e3e4 <HandleRadioRxErrorTimeout+0x10c>)
 800e318:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d119      	bne.n	800e354 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e320:	f004 f865 	bl	80123ee <LoRaMacClassBIsPingExpected>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d007      	beq.n	800e33a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e32a:	2000      	movs	r0, #0
 800e32c:	f004 f816 	bl	801235c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e330:	2000      	movs	r0, #0
 800e332:	f004 f837 	bl	80123a4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e336:	2301      	movs	r3, #1
 800e338:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e33a:	f004 f85f 	bl	80123fc <LoRaMacClassBIsMulticastExpected>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e344:	2000      	movs	r0, #0
 800e346:	f004 f813 	bl	8012370 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e34a:	2000      	movs	r0, #0
 800e34c:	f004 f833 	bl	80123b6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e350:	2301      	movs	r3, #1
 800e352:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	f083 0301 	eor.w	r3, r3, #1
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d03b      	beq.n	800e3d8 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e360:	4b22      	ldr	r3, [pc, #136]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e362:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e366:	2b00      	cmp	r3, #0
 800e368:	d122      	bne.n	800e3b0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e36a:	4b20      	ldr	r3, [pc, #128]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e36c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e374:	4a1d      	ldr	r2, [pc, #116]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e376:	79fb      	ldrb	r3, [r7, #7]
 800e378:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e37c:	79fb      	ldrb	r3, [r7, #7]
 800e37e:	4618      	mov	r0, r3
 800e380:	f004 fce8 	bl	8012d54 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e384:	4b17      	ldr	r3, [pc, #92]	@ (800e3e4 <HandleRadioRxErrorTimeout+0x10c>)
 800e386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e388:	4618      	mov	r0, r3
 800e38a:	f00c fc77 	bl	801ac7c <UTIL_TIMER_GetElapsedTime>
 800e38e:	4602      	mov	r2, r0
 800e390:	4b16      	ldr	r3, [pc, #88]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e392:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e396:	429a      	cmp	r2, r3
 800e398:	d31e      	bcc.n	800e3d8 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e39a:	4815      	ldr	r0, [pc, #84]	@ (800e3f0 <HandleRadioRxErrorTimeout+0x118>)
 800e39c:	f00c fb42 	bl	801aa24 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e3a0:	4a12      	ldr	r2, [pc, #72]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e3a2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e3a6:	f043 0320 	orr.w	r3, r3, #32
 800e3aa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800e3ae:	e013      	b.n	800e3d8 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e3b2:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e3ba:	4a0c      	ldr	r2, [pc, #48]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e3bc:	79bb      	ldrb	r3, [r7, #6]
 800e3be:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e3c2:	79bb      	ldrb	r3, [r7, #6]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f004 fcc5 	bl	8012d54 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e3ca:	4a08      	ldr	r2, [pc, #32]	@ (800e3ec <HandleRadioRxErrorTimeout+0x114>)
 800e3cc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e3d0:	f043 0320 	orr.w	r3, r3, #32
 800e3d4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e3d8:	f7ff f9ce 	bl	800d778 <UpdateRxSlotIdleState>
}
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	20000b90 	.word	0x20000b90
 800e3e8:	0801c298 	.word	0x0801c298
 800e3ec:	20000670 	.word	0x20000670
 800e3f0:	20000a08 	.word	0x20000a08

0800e3f4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e3f8:	2106      	movs	r1, #6
 800e3fa:	2005      	movs	r0, #5
 800e3fc:	f7ff ff6c 	bl	800e2d8 <HandleRadioRxErrorTimeout>
}
 800e400:	bf00      	nop
 800e402:	bd80      	pop	{r7, pc}

0800e404 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e408:	2104      	movs	r1, #4
 800e40a:	2003      	movs	r0, #3
 800e40c:	f7ff ff64 	bl	800e2d8 <HandleRadioRxErrorTimeout>
}
 800e410:	bf00      	nop
 800e412:	bd80      	pop	{r7, pc}

0800e414 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e41a:	f3ef 8310 	mrs	r3, PRIMASK
 800e41e:	607b      	str	r3, [r7, #4]
  return(result);
 800e420:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e424:	b672      	cpsid	i
}
 800e426:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e428:	4b1d      	ldr	r3, [pc, #116]	@ (800e4a0 <LoRaMacHandleIrqEvents+0x8c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e42e:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a0 <LoRaMacHandleIrqEvents+0x8c>)
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	f383 8810 	msr	PRIMASK, r3
}
 800e43e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d027      	beq.n	800e496 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e446:	783b      	ldrb	r3, [r7, #0]
 800e448:	f003 0320 	and.w	r3, r3, #32
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e452:	f7ff f9a9 	bl	800d7a8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e456:	783b      	ldrb	r3, [r7, #0]
 800e458:	f003 0310 	and.w	r3, r3, #16
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e462:	f7ff fa55 	bl	800d910 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e466:	783b      	ldrb	r3, [r7, #0]
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d001      	beq.n	800e476 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e472:	f7ff ff05 	bl	800e280 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e476:	783b      	ldrb	r3, [r7, #0]
 800e478:	f003 0304 	and.w	r3, r3, #4
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e482:	f7ff ffb7 	bl	800e3f4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e486:	783b      	ldrb	r3, [r7, #0]
 800e488:	f003 0302 	and.w	r3, r3, #2
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e492:	f7ff ffb7 	bl	800e404 <ProcessRadioRxTimeout>
        }
    }
}
 800e496:	bf00      	nop
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	20001718 	.word	0x20001718

0800e4a4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e4dc <LoRaMacIsBusy+0x38>)
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <LoRaMacIsBusy+0x16>
    {
        return true;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e00c      	b.n	800e4d4 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e4ba:	4b09      	ldr	r3, [pc, #36]	@ (800e4e0 <LoRaMacIsBusy+0x3c>)
 800e4bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e4c4:	4b06      	ldr	r3, [pc, #24]	@ (800e4e0 <LoRaMacIsBusy+0x3c>)
 800e4c6:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d101      	bne.n	800e4d2 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e000      	b.n	800e4d4 <LoRaMacIsBusy+0x30>
    }
    return true;
 800e4d2:	2301      	movs	r3, #1
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bc80      	pop	{r7}
 800e4da:	4770      	bx	lr
 800e4dc:	20001718 	.word	0x20001718
 800e4e0:	20000670 	.word	0x20000670

0800e4e4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e4ee:	4a04      	ldr	r2, [pc, #16]	@ (800e500 <LoRaMacEnableRequests+0x1c>)
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800e4f6:	bf00      	nop
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bc80      	pop	{r7}
 800e4fe:	4770      	bx	lr
 800e500:	20000670 	.word	0x20000670

0800e504 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e50a:	4b2c      	ldr	r3, [pc, #176]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e50c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e510:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e512:	4b2a      	ldr	r3, [pc, #168]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e514:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d14a      	bne.n	800e5b2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e51c:	4b27      	ldr	r3, [pc, #156]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e51e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	b2db      	uxtb	r3, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d006      	beq.n	800e53a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e52c:	4a23      	ldr	r2, [pc, #140]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e52e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e532:	f36f 0300 	bfc	r3, #0, #1
 800e536:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e53a:	4b20      	ldr	r3, [pc, #128]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e53c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d006      	beq.n	800e558 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e54a:	4a1c      	ldr	r2, [pc, #112]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e54c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e550:	f36f 0382 	bfc	r3, #2, #1
 800e554:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e558:	2001      	movs	r0, #1
 800e55a:	f7ff ffc3 	bl	800e4e4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e55e:	793b      	ldrb	r3, [r7, #4]
 800e560:	f003 0301 	and.w	r3, r3, #1
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d005      	beq.n	800e576 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e56a:	4b14      	ldr	r3, [pc, #80]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e56c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4813      	ldr	r0, [pc, #76]	@ (800e5c0 <LoRaMacHandleRequestEvents+0xbc>)
 800e574:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e576:	793b      	ldrb	r3, [r7, #4]
 800e578:	f003 0304 	and.w	r3, r3, #4
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00e      	beq.n	800e5a0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e582:	4810      	ldr	r0, [pc, #64]	@ (800e5c4 <LoRaMacHandleRequestEvents+0xc0>)
 800e584:	f004 fc34 	bl	8012df0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e588:	f004 fc7e 	bl	8012e88 <LoRaMacConfirmQueueGetCnt>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d006      	beq.n	800e5a0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e592:	4a0a      	ldr	r2, [pc, #40]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e594:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e598:	f043 0304 	orr.w	r3, r3, #4
 800e59c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e5a0:	f003 ff4a 	bl	8012438 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e5a4:	4a05      	ldr	r2, [pc, #20]	@ (800e5bc <LoRaMacHandleRequestEvents+0xb8>)
 800e5a6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e5aa:	f36f 1345 	bfc	r3, #5, #1
 800e5ae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800e5b2:	bf00      	nop
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000670 	.word	0x20000670
 800e5c0:	20000ab4 	.word	0x20000ab4
 800e5c4:	20000ac8 	.word	0x20000ac8

0800e5c8 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e5ce:	4b07      	ldr	r3, [pc, #28]	@ (800e5ec <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e5d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d105      	bne.n	800e5e4 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e5dc:	1dfb      	adds	r3, r7, #7
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f004 f9ec 	bl	80129bc <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e5e4:	bf00      	nop
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20000670 	.word	0x20000670

0800e5f0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e5f4:	4b16      	ldr	r3, [pc, #88]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e5f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e5fa:	f003 0308 	and.w	r3, r3, #8
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00d      	beq.n	800e620 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e604:	4a12      	ldr	r2, [pc, #72]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e606:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e60a:	f36f 03c3 	bfc	r3, #3, #1
 800e60e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e612:	4b0f      	ldr	r3, [pc, #60]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e614:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	490e      	ldr	r1, [pc, #56]	@ (800e654 <LoRaMacHandleIndicationEvents+0x64>)
 800e61c:	480e      	ldr	r0, [pc, #56]	@ (800e658 <LoRaMacHandleIndicationEvents+0x68>)
 800e61e:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e620:	4b0b      	ldr	r3, [pc, #44]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e622:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e626:	f003 0302 	and.w	r3, r3, #2
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00d      	beq.n	800e64c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e630:	4a07      	ldr	r2, [pc, #28]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e632:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e636:	f36f 0341 	bfc	r3, #1, #1
 800e63a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e63e:	4b04      	ldr	r3, [pc, #16]	@ (800e650 <LoRaMacHandleIndicationEvents+0x60>)
 800e640:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	4903      	ldr	r1, [pc, #12]	@ (800e654 <LoRaMacHandleIndicationEvents+0x64>)
 800e648:	4804      	ldr	r0, [pc, #16]	@ (800e65c <LoRaMacHandleIndicationEvents+0x6c>)
 800e64a:	4798      	blx	r3
    }
}
 800e64c:	bf00      	nop
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20000670 	.word	0x20000670
 800e654:	20000b00 	.word	0x20000b00
 800e658:	20000adc 	.word	0x20000adc
 800e65c:	20000a94 	.word	0x20000a94

0800e660 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e666:	4b2a      	ldr	r3, [pc, #168]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e668:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e66c:	f003 0301 	and.w	r3, r3, #1
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d048      	beq.n	800e708 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800e676:	2300      	movs	r3, #0
 800e678:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e67a:	2300      	movs	r3, #0
 800e67c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e67e:	4b24      	ldr	r3, [pc, #144]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e680:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e688:	4b21      	ldr	r3, [pc, #132]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e68a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d104      	bne.n	800e69c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e692:	f002 f8f9 	bl	8010888 <CheckRetransUnconfirmedUplink>
 800e696:	4603      	mov	r3, r0
 800e698:	71fb      	strb	r3, [r7, #7]
 800e69a:	e010      	b.n	800e6be <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e69c:	4b1c      	ldr	r3, [pc, #112]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e69e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d10b      	bne.n	800e6be <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e6a8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d004      	beq.n	800e6ba <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e6b0:	f002 f916 	bl	80108e0 <CheckRetransConfirmedUplink>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	71fb      	strb	r3, [r7, #7]
 800e6b8:	e001      	b.n	800e6be <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00d      	beq.n	800e6e0 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e6c4:	4813      	ldr	r0, [pc, #76]	@ (800e714 <LoRaMacHandleMcpsRequest+0xb4>)
 800e6c6:	f00c f9ad 	bl	801aa24 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e6ca:	4b11      	ldr	r3, [pc, #68]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e6cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6d0:	f023 0320 	bic.w	r3, r3, #32
 800e6d4:	4a0e      	ldr	r2, [pc, #56]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e6d6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e6da:	f002 f93b 	bl	8010954 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e6de:	e013      	b.n	800e708 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800e6e0:	79bb      	ldrb	r3, [r7, #6]
 800e6e2:	f083 0301 	eor.w	r3, r3, #1
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00d      	beq.n	800e708 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e6ec:	4a08      	ldr	r2, [pc, #32]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e6ee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e6f2:	f36f 1345 	bfc	r3, #5, #1
 800e6f6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800e6fa:	4b05      	ldr	r3, [pc, #20]	@ (800e710 <LoRaMacHandleMcpsRequest+0xb0>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800e702:	2000      	movs	r0, #0
 800e704:	f000 f9c8 	bl	800ea98 <OnTxDelayedTimerEvent>
}
 800e708:	bf00      	nop
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20000670 	.word	0x20000670
 800e714:	200009d8 	.word	0x200009d8

0800e718 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e71c:	4b18      	ldr	r3, [pc, #96]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e71e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e722:	f003 0304 	and.w	r3, r3, #4
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d026      	beq.n	800e77a <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e72c:	2001      	movs	r0, #1
 800e72e:	f004 fb45 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d012      	beq.n	800e75e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e738:	2001      	movs	r0, #1
 800e73a:	f004 fae1 	bl	8012d00 <LoRaMacConfirmQueueGetStatus>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d103      	bne.n	800e74c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e744:	4b0e      	ldr	r3, [pc, #56]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e746:	2200      	movs	r2, #0
 800e748:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e74c:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e74e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e752:	f023 0302 	bic.w	r3, r3, #2
 800e756:	4a0a      	ldr	r2, [pc, #40]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e758:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e75c:	e00d      	b.n	800e77a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800e75e:	2005      	movs	r0, #5
 800e760:	f004 fb2c 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d007      	beq.n	800e77a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e76a:	4b05      	ldr	r3, [pc, #20]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e76c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e770:	f023 0302 	bic.w	r3, r3, #2
 800e774:	4a02      	ldr	r2, [pc, #8]	@ (800e780 <LoRaMacHandleMlmeRequest+0x68>)
 800e776:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800e77a:	bf00      	nop
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20000670 	.word	0x20000670

0800e784 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e788:	200b      	movs	r0, #11
 800e78a:	f004 fb17 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d019      	beq.n	800e7c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e794:	4b0e      	ldr	r3, [pc, #56]	@ (800e7d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e796:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e79a:	f003 0301 	and.w	r3, r3, #1
 800e79e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d111      	bne.n	800e7c8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e7a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7aa:	f003 0304 	and.w	r3, r3, #4
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e7b4:	4b06      	ldr	r3, [pc, #24]	@ (800e7d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e7b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e7ba:	f023 0302 	bic.w	r3, r3, #2
 800e7be:	4a04      	ldr	r2, [pc, #16]	@ (800e7d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e7c0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e000      	b.n	800e7ca <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20000670 	.word	0x20000670

0800e7d4 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	4603      	mov	r3, r0
 800e7dc:	71fb      	strb	r3, [r7, #7]
 800e7de:	460b      	mov	r3, r1
 800e7e0:	71bb      	strb	r3, [r7, #6]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00a      	beq.n	800e802 <CheckForMinimumAbpDatarate+0x2e>
 800e7ec:	79bb      	ldrb	r3, [r7, #6]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d107      	bne.n	800e802 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800e7f2:	797b      	ldrb	r3, [r7, #5]
 800e7f4:	f083 0301 	eor.w	r3, r3, #1
 800e7f8:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d001      	beq.n	800e802 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e000      	b.n	800e804 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	bc80      	pop	{r7}
 800e80c:	4770      	bx	lr
	...

0800e810 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e810:	b480      	push	{r7}
 800e812:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e814:	4b0d      	ldr	r3, [pc, #52]	@ (800e84c <LoRaMacCheckForRxAbort+0x3c>)
 800e816:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00f      	beq.n	800e842 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e822:	4b0a      	ldr	r3, [pc, #40]	@ (800e84c <LoRaMacCheckForRxAbort+0x3c>)
 800e824:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e82c:	4a07      	ldr	r2, [pc, #28]	@ (800e84c <LoRaMacCheckForRxAbort+0x3c>)
 800e82e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e832:	4b06      	ldr	r3, [pc, #24]	@ (800e84c <LoRaMacCheckForRxAbort+0x3c>)
 800e834:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e838:	f023 0302 	bic.w	r3, r3, #2
 800e83c:	4a03      	ldr	r2, [pc, #12]	@ (800e84c <LoRaMacCheckForRxAbort+0x3c>)
 800e83e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800e842:	bf00      	nop
 800e844:	46bd      	mov	sp, r7
 800e846:	bc80      	pop	{r7}
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	20000670 	.word	0x20000670

0800e850 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e85c:	2300      	movs	r3, #0
 800e85e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e860:	4b50      	ldr	r3, [pc, #320]	@ (800e9a4 <LoRaMacHandleNvm+0x154>)
 800e862:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e866:	2b00      	cmp	r3, #0
 800e868:	f040 8098 	bne.w	800e99c <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2124      	movs	r1, #36	@ 0x24
 800e870:	4618      	mov	r0, r3
 800e872:	f007 ffe7 	bl	8016844 <Crc32>
 800e876:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d006      	beq.n	800e890 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e888:	89fb      	ldrh	r3, [r7, #14]
 800e88a:	f043 0301 	orr.w	r3, r3, #1
 800e88e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	3328      	adds	r3, #40	@ 0x28
 800e894:	2114      	movs	r1, #20
 800e896:	4618      	mov	r0, r3
 800e898:	f007 ffd4 	bl	8016844 <Crc32>
 800e89c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d006      	beq.n	800e8b6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e8ae:	89fb      	ldrh	r3, [r7, #14]
 800e8b0:	f043 0302 	orr.w	r3, r3, #2
 800e8b4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	3340      	adds	r3, #64	@ 0x40
 800e8ba:	21e0      	movs	r1, #224	@ 0xe0
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f007 ffc1 	bl	8016844 <Crc32>
 800e8c2:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d007      	beq.n	800e8e0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e8d8:	89fb      	ldrh	r3, [r7, #14]
 800e8da:	f043 0304 	orr.w	r3, r3, #4
 800e8de:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e8e6:	21bc      	movs	r1, #188	@ 0xbc
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f007 ffab 	bl	8016844 <Crc32>
 800e8ee:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d007      	beq.n	800e90c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e904:	89fb      	ldrh	r3, [r7, #14]
 800e906:	f043 0308 	orr.w	r3, r3, #8
 800e90a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e912:	2100      	movs	r1, #0
 800e914:	4618      	mov	r0, r3
 800e916:	f007 ff95 	bl	8016844 <Crc32>
 800e91a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	429a      	cmp	r2, r3
 800e926:	d007      	beq.n	800e938 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e930:	89fb      	ldrh	r3, [r7, #14]
 800e932:	f043 0310 	orr.w	r3, r3, #16
 800e936:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e93e:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800e942:	4618      	mov	r0, r3
 800e944:	f007 ff7e 	bl	8016844 <Crc32>
 800e948:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	429a      	cmp	r2, r3
 800e954:	d007      	beq.n	800e966 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e95e:	89fb      	ldrh	r3, [r7, #14]
 800e960:	f043 0320 	orr.w	r3, r3, #32
 800e964:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800e96c:	2114      	movs	r1, #20
 800e96e:	4618      	mov	r0, r3
 800e970:	f007 ff68 	bl	8016844 <Crc32>
 800e974:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d007      	beq.n	800e992 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e98a:	89fb      	ldrh	r3, [r7, #14]
 800e98c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e990:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e992:	89fb      	ldrh	r3, [r7, #14]
 800e994:	4618      	mov	r0, r3
 800e996:	f002 f819 	bl	80109cc <CallNvmDataChangeCallback>
 800e99a:	e000      	b.n	800e99e <LoRaMacHandleNvm+0x14e>
        return;
 800e99c:	bf00      	nop
}
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20000670 	.word	0x20000670

0800e9a8 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00d      	beq.n	800e9d4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800e9b8:	6838      	ldr	r0, [r7, #0]
 800e9ba:	f00c f95f 	bl	801ac7c <UTIL_TIMER_GetElapsedTime>
 800e9be:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d905      	bls.n	800e9d4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800e9c8:	4b05      	ldr	r3, [pc, #20]	@ (800e9e0 <LoRaMacHandleResponseTimeout+0x38>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e000      	b.n	800e9d6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	20000b90 	.word	0x20000b90

0800e9e4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e9ee:	f7ff fd11 	bl	800e414 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e9f2:	f003 fd90 	bl	8012516 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e9f6:	4b26      	ldr	r3, [pc, #152]	@ (800ea90 <LoRaMacProcess+0xac>)
 800e9f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d025      	beq.n	800ea52 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ea06:	2000      	movs	r0, #0
 800ea08:	f7ff fd6c 	bl	800e4e4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ea0c:	f7ff ff00 	bl	800e810 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ea10:	f001 fffa 	bl	8010a08 <IsRequestPending>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d006      	beq.n	800ea28 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ea1a:	f7ff feb3 	bl	800e784 <LoRaMacCheckForBeaconAcquisition>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	461a      	mov	r2, r3
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d103      	bne.n	800ea36 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800ea2e:	f7ff fe73 	bl	800e718 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ea32:	f7ff fe15 	bl	800e660 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ea36:	f7ff fd65 	bl	800e504 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ea3a:	f7ff fdc5 	bl	800e5c8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ea3e:	2001      	movs	r0, #1
 800ea40:	f7ff fd50 	bl	800e4e4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ea44:	4a12      	ldr	r2, [pc, #72]	@ (800ea90 <LoRaMacProcess+0xac>)
 800ea46:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ea4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea4e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800ea52:	f7ff fdcd 	bl	800e5f0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ea56:	4b0e      	ldr	r3, [pc, #56]	@ (800ea90 <LoRaMacProcess+0xac>)
 800ea58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d101      	bne.n	800ea64 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ea60:	f001 fbee 	bl	8010240 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ea64:	4b0a      	ldr	r3, [pc, #40]	@ (800ea90 <LoRaMacProcess+0xac>)
 800ea66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ea6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d009      	beq.n	800ea88 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ea74:	4a06      	ldr	r2, [pc, #24]	@ (800ea90 <LoRaMacProcess+0xac>)
 800ea76:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ea7a:	f36f 1386 	bfc	r3, #6, #1
 800ea7e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800ea82:	4804      	ldr	r0, [pc, #16]	@ (800ea94 <LoRaMacProcess+0xb0>)
 800ea84:	f7ff fee4 	bl	800e850 <LoRaMacHandleNvm>
    }
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20000670 	.word	0x20000670
 800ea94:	20000b90 	.word	0x20000b90

0800ea98 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800eaa0:	481e      	ldr	r0, [pc, #120]	@ (800eb1c <OnTxDelayedTimerEvent+0x84>)
 800eaa2:	f00b ffbf 	bl	801aa24 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800eaa6:	4b1e      	ldr	r3, [pc, #120]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eaa8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eaac:	f023 0320 	bic.w	r3, r3, #32
 800eab0:	4a1b      	ldr	r2, [pc, #108]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eab2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800eab6:	4b1b      	ldr	r3, [pc, #108]	@ (800eb24 <OnTxDelayedTimerEvent+0x8c>)
 800eab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eabc:	4a18      	ldr	r2, [pc, #96]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eabe:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800eac2:	4611      	mov	r1, r2
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff ff6f 	bl	800e9a8 <LoRaMacHandleResponseTimeout>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d11e      	bne.n	800eb0e <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ead0:	2001      	movs	r0, #1
 800ead2:	f001 f93b 	bl	800fd4c <ScheduleTx>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01a      	beq.n	800eb12 <OnTxDelayedTimerEvent+0x7a>
 800eadc:	2b0b      	cmp	r3, #11
 800eade:	d018      	beq.n	800eb12 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eae0:	4b10      	ldr	r3, [pc, #64]	@ (800eb24 <OnTxDelayedTimerEvent+0x8c>)
 800eae2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	4b0d      	ldr	r3, [pc, #52]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eaea:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800eaee:	4b0c      	ldr	r3, [pc, #48]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eaf0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800eaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eaf6:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800eafa:	4b09      	ldr	r3, [pc, #36]	@ (800eb20 <OnTxDelayedTimerEvent+0x88>)
 800eafc:	2209      	movs	r2, #9
 800eafe:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800eb02:	2009      	movs	r0, #9
 800eb04:	f004 f926 	bl	8012d54 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800eb08:	f001 ff24 	bl	8010954 <StopRetransmission>
            break;
 800eb0c:	e002      	b.n	800eb14 <OnTxDelayedTimerEvent+0x7c>
        return;
 800eb0e:	bf00      	nop
 800eb10:	e000      	b.n	800eb14 <OnTxDelayedTimerEvent+0x7c>
            break;
 800eb12:	bf00      	nop
        }
    }
}
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	200009d8 	.word	0x200009d8
 800eb20:	20000670 	.word	0x20000670
 800eb24:	20000b90 	.word	0x20000b90

0800eb28 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800eb30:	4b17      	ldr	r3, [pc, #92]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb32:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800eb36:	4b16      	ldr	r3, [pc, #88]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb38:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800eb3c:	4b15      	ldr	r3, [pc, #84]	@ (800eb94 <OnRxWindow1TimerEvent+0x6c>)
 800eb3e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800eb42:	b25a      	sxtb	r2, r3
 800eb44:	4b12      	ldr	r3, [pc, #72]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb46:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb4a:	4b12      	ldr	r3, [pc, #72]	@ (800eb94 <OnRxWindow1TimerEvent+0x6c>)
 800eb4c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800eb50:	4b0f      	ldr	r3, [pc, #60]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb52:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eb56:	4b0f      	ldr	r3, [pc, #60]	@ (800eb94 <OnRxWindow1TimerEvent+0x6c>)
 800eb58:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800eb5c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb5e:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800eb62:	4b0b      	ldr	r3, [pc, #44]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800eb6a:	4b09      	ldr	r3, [pc, #36]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800eb72:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <OnRxWindow1TimerEvent+0x6c>)
 800eb74:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800eb78:	4b05      	ldr	r3, [pc, #20]	@ (800eb90 <OnRxWindow1TimerEvent+0x68>)
 800eb7a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800eb7e:	4906      	ldr	r1, [pc, #24]	@ (800eb98 <OnRxWindow1TimerEvent+0x70>)
 800eb80:	4806      	ldr	r0, [pc, #24]	@ (800eb9c <OnRxWindow1TimerEvent+0x74>)
 800eb82:	f001 fb29 	bl	80101d8 <RxWindowSetup>
}
 800eb86:	bf00      	nop
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20000670 	.word	0x20000670
 800eb94:	20000b90 	.word	0x20000b90
 800eb98:	20000a28 	.word	0x20000a28
 800eb9c:	200009f0 	.word	0x200009f0

0800eba0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eba8:	4b19      	ldr	r3, [pc, #100]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d029      	beq.n	800ec06 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ebb2:	4b17      	ldr	r3, [pc, #92]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebb4:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800ebb8:	4b15      	ldr	r3, [pc, #84]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebba:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ebbe:	4b15      	ldr	r3, [pc, #84]	@ (800ec14 <OnRxWindow2TimerEvent+0x74>)
 800ebc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebc2:	4a13      	ldr	r2, [pc, #76]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebc4:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ebc8:	4b12      	ldr	r3, [pc, #72]	@ (800ec14 <OnRxWindow2TimerEvent+0x74>)
 800ebca:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800ebce:	4b10      	ldr	r3, [pc, #64]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebd0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ebd4:	4b0f      	ldr	r3, [pc, #60]	@ (800ec14 <OnRxWindow2TimerEvent+0x74>)
 800ebd6:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ebda:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebdc:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ebe0:	4b0b      	ldr	r3, [pc, #44]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ebe8:	4b09      	ldr	r3, [pc, #36]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ebf0:	4b08      	ldr	r3, [pc, #32]	@ (800ec14 <OnRxWindow2TimerEvent+0x74>)
 800ebf2:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800ebf6:	4b06      	ldr	r3, [pc, #24]	@ (800ec10 <OnRxWindow2TimerEvent+0x70>)
 800ebf8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ebfc:	4906      	ldr	r1, [pc, #24]	@ (800ec18 <OnRxWindow2TimerEvent+0x78>)
 800ebfe:	4807      	ldr	r0, [pc, #28]	@ (800ec1c <OnRxWindow2TimerEvent+0x7c>)
 800ec00:	f001 faea 	bl	80101d8 <RxWindowSetup>
 800ec04:	e000      	b.n	800ec08 <OnRxWindow2TimerEvent+0x68>
        return;
 800ec06:	bf00      	nop
}
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000670 	.word	0x20000670
 800ec14:	20000b90 	.word	0x20000b90
 800ec18:	20000a40 	.word	0x20000a40
 800ec1c:	20000a08 	.word	0x20000a08

0800ec20 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800ec28:	480f      	ldr	r0, [pc, #60]	@ (800ec68 <OnRetransmitTimeoutTimerEvent+0x48>)
 800ec2a:	f00b fefb 	bl	801aa24 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ec2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec6c <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ec30:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d003      	beq.n	800ec40 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800ec38:	4b0c      	ldr	r3, [pc, #48]	@ (800ec6c <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ec40:	4b0a      	ldr	r3, [pc, #40]	@ (800ec6c <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ec42:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <OnRetransmitTimeoutTimerEvent+0x40>
 800ec4a:	4b08      	ldr	r3, [pc, #32]	@ (800ec6c <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ec4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d004      	beq.n	800ec60 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ec56:	4b05      	ldr	r3, [pc, #20]	@ (800ec6c <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ec58:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	4798      	blx	r3
    }
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20000a74 	.word	0x20000a74
 800ec6c:	20000670 	.word	0x20000670

0800ec70 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60ba      	str	r2, [r7, #8]
 800ec78:	607b      	str	r3, [r7, #4]
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
 800ec7e:	460b      	mov	r3, r1
 800ec80:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d005      	beq.n	800ec94 <GetFCntDown+0x24>
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d002      	beq.n	800ec94 <GetFCntDown+0x24>
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d101      	bne.n	800ec98 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ec94:	2309      	movs	r3, #9
 800ec96:	e028      	b.n	800ecea <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d016      	beq.n	800eccc <GetFCntDown+0x5c>
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d118      	bne.n	800ecd4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800eca2:	79bb      	ldrb	r3, [r7, #6]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d10d      	bne.n	800ecc4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eca8:	7bbb      	ldrb	r3, [r7, #14]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d002      	beq.n	800ecb4 <GetFCntDown+0x44>
 800ecae:	7bbb      	ldrb	r3, [r7, #14]
 800ecb0:	2b03      	cmp	r3, #3
 800ecb2:	d103      	bne.n	800ecbc <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ecba:	e00d      	b.n	800ecd8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	701a      	strb	r2, [r3, #0]
            break;
 800ecc2:	e009      	b.n	800ecd8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	2203      	movs	r2, #3
 800ecc8:	701a      	strb	r2, [r3, #0]
            break;
 800ecca:	e005      	b.n	800ecd8 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	2204      	movs	r2, #4
 800ecd0:	701a      	strb	r2, [r3, #0]
            break;
 800ecd2:	e001      	b.n	800ecd8 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ecd4:	2305      	movs	r3, #5
 800ecd6:	e008      	b.n	800ecea <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	7818      	ldrb	r0, [r3, #0]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	89db      	ldrh	r3, [r3, #14]
 800ece0:	69fa      	ldr	r2, [r7, #28]
 800ece2:	4619      	mov	r1, r3
 800ece4:	f004 fc60 	bl	80135a8 <LoRaMacCryptoGetFCntDown>
 800ece8:	4603      	mov	r3, r0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
	...

0800ecf4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ecf4:	b5b0      	push	{r4, r5, r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ed02:	4b62      	ldr	r3, [pc, #392]	@ (800ee8c <SwitchClass+0x198>)
 800ed04:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	f000 80a7 	beq.w	800ee5c <SwitchClass+0x168>
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	f300 80b6 	bgt.w	800ee80 <SwitchClass+0x18c>
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <SwitchClass+0x2c>
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	f000 8091 	beq.w	800ee40 <SwitchClass+0x14c>
 800ed1e:	e0af      	b.n	800ee80 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d107      	bne.n	800ed36 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ed26:	4b59      	ldr	r3, [pc, #356]	@ (800ee8c <SwitchClass+0x198>)
 800ed28:	4a58      	ldr	r2, [pc, #352]	@ (800ee8c <SwitchClass+0x198>)
 800ed2a:	336c      	adds	r3, #108	@ 0x6c
 800ed2c:	3264      	adds	r2, #100	@ 0x64
 800ed2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed32:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d10c      	bne.n	800ed56 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f003 fb80 	bl	8012444 <LoRaMacClassBSwitchClass>
 800ed44:	4603      	mov	r3, r0
 800ed46:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d103      	bne.n	800ed56 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ed4e:	4a4f      	ldr	r2, [pc, #316]	@ (800ee8c <SwitchClass+0x198>)
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800ed56:	79fb      	ldrb	r3, [r7, #7]
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	f040 808c 	bne.w	800ee76 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ed5e:	4a4b      	ldr	r2, [pc, #300]	@ (800ee8c <SwitchClass+0x198>)
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ed66:	4a4a      	ldr	r2, [pc, #296]	@ (800ee90 <SwitchClass+0x19c>)
 800ed68:	4b49      	ldr	r3, [pc, #292]	@ (800ee90 <SwitchClass+0x19c>)
 800ed6a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800ed6e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800ed72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed76:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed7a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ed7e:	4b44      	ldr	r3, [pc, #272]	@ (800ee90 <SwitchClass+0x19c>)
 800ed80:	2202      	movs	r2, #2
 800ed82:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed86:	2300      	movs	r3, #0
 800ed88:	73bb      	strb	r3, [r7, #14]
 800ed8a:	e049      	b.n	800ee20 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ed8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed90:	4a3e      	ldr	r2, [pc, #248]	@ (800ee8c <SwitchClass+0x198>)
 800ed92:	212c      	movs	r1, #44	@ 0x2c
 800ed94:	fb01 f303 	mul.w	r3, r1, r3
 800ed98:	4413      	add	r3, r2
 800ed9a:	33da      	adds	r3, #218	@ 0xda
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d038      	beq.n	800ee14 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800eda2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda6:	4a39      	ldr	r2, [pc, #228]	@ (800ee8c <SwitchClass+0x198>)
 800eda8:	212c      	movs	r1, #44	@ 0x2c
 800edaa:	fb01 f303 	mul.w	r3, r1, r3
 800edae:	4413      	add	r3, r2
 800edb0:	33f0      	adds	r3, #240	@ 0xf0
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a35      	ldr	r2, [pc, #212]	@ (800ee8c <SwitchClass+0x198>)
 800edb6:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800edb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edbc:	4a33      	ldr	r2, [pc, #204]	@ (800ee8c <SwitchClass+0x198>)
 800edbe:	212c      	movs	r1, #44	@ 0x2c
 800edc0:	fb01 f303 	mul.w	r3, r1, r3
 800edc4:	4413      	add	r3, r2
 800edc6:	33f4      	adds	r3, #244	@ 0xf4
 800edc8:	f993 3000 	ldrsb.w	r3, [r3]
 800edcc:	b2da      	uxtb	r2, r3
 800edce:	4b2f      	ldr	r3, [pc, #188]	@ (800ee8c <SwitchClass+0x198>)
 800edd0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800edd4:	4b2e      	ldr	r3, [pc, #184]	@ (800ee90 <SwitchClass+0x19c>)
 800edd6:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800edda:	4b2d      	ldr	r3, [pc, #180]	@ (800ee90 <SwitchClass+0x19c>)
 800eddc:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ede0:	4b2a      	ldr	r3, [pc, #168]	@ (800ee8c <SwitchClass+0x198>)
 800ede2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ede4:	4a2a      	ldr	r2, [pc, #168]	@ (800ee90 <SwitchClass+0x19c>)
 800ede6:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800edea:	4b28      	ldr	r3, [pc, #160]	@ (800ee8c <SwitchClass+0x198>)
 800edec:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800edf0:	4b27      	ldr	r3, [pc, #156]	@ (800ee90 <SwitchClass+0x19c>)
 800edf2:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800edf6:	4b25      	ldr	r3, [pc, #148]	@ (800ee8c <SwitchClass+0x198>)
 800edf8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800edfc:	4b24      	ldr	r3, [pc, #144]	@ (800ee90 <SwitchClass+0x19c>)
 800edfe:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ee02:	4b23      	ldr	r3, [pc, #140]	@ (800ee90 <SwitchClass+0x19c>)
 800ee04:	2203      	movs	r2, #3
 800ee06:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ee0a:	4b21      	ldr	r3, [pc, #132]	@ (800ee90 <SwitchClass+0x19c>)
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800ee12:	e009      	b.n	800ee28 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	73bb      	strb	r3, [r7, #14]
 800ee20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	ddb1      	ble.n	800ed8c <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ee28:	4b19      	ldr	r3, [pc, #100]	@ (800ee90 <SwitchClass+0x19c>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ee30:	4b18      	ldr	r3, [pc, #96]	@ (800ee94 <SwitchClass+0x1a0>)
 800ee32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee34:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ee36:	f001 fa03 	bl	8010240 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ee3e:	e01a      	b.n	800ee76 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f003 fafe 	bl	8012444 <LoRaMacClassBSwitchClass>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d113      	bne.n	800ee7a <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee52:	4a0e      	ldr	r2, [pc, #56]	@ (800ee8c <SwitchClass+0x198>)
 800ee54:	79fb      	ldrb	r3, [r7, #7]
 800ee56:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800ee5a:	e00e      	b.n	800ee7a <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10d      	bne.n	800ee7e <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee62:	4a0a      	ldr	r2, [pc, #40]	@ (800ee8c <SwitchClass+0x198>)
 800ee64:	79fb      	ldrb	r3, [r7, #7]
 800ee66:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ee6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee94 <SwitchClass+0x1a0>)
 800ee6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee6e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ee74:	e003      	b.n	800ee7e <SwitchClass+0x18a>
            break;
 800ee76:	bf00      	nop
 800ee78:	e002      	b.n	800ee80 <SwitchClass+0x18c>
            break;
 800ee7a:	bf00      	nop
 800ee7c:	e000      	b.n	800ee80 <SwitchClass+0x18c>
            break;
 800ee7e:	bf00      	nop
        }
    }

    return status;
 800ee80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bdb0      	pop	{r4, r5, r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	20000b90 	.word	0x20000b90
 800ee90:	20000670 	.word	0x20000670
 800ee94:	0801c298 	.word	0x0801c298

0800ee98 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eea2:	4b10      	ldr	r3, [pc, #64]	@ (800eee4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eea4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800eea8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800eeaa:	79fb      	ldrb	r3, [r7, #7]
 800eeac:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eeae:	230d      	movs	r3, #13
 800eeb0:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800eee4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eeb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eebc:	230e      	movs	r3, #14
 800eebe:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eec0:	4b08      	ldr	r3, [pc, #32]	@ (800eee4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eec6:	f107 0210 	add.w	r2, r7, #16
 800eeca:	4611      	mov	r1, r2
 800eecc:	4618      	mov	r0, r3
 800eece:	f005 f9c3 	bl	8014258 <RegionGetPhyParam>
 800eed2:	4603      	mov	r3, r0
 800eed4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	b2db      	uxtb	r3, r3
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3718      	adds	r7, #24
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	20000b90 	.word	0x20000b90

0800eee8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	4603      	mov	r3, r0
 800eef0:	71fb      	strb	r3, [r7, #7]
 800eef2:	460b      	mov	r3, r1
 800eef4:	71bb      	strb	r3, [r7, #6]
 800eef6:	4613      	mov	r3, r2
 800eef8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ef02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff ffc6 	bl	800ee98 <GetMaxAppPayloadWithoutFOptsLength>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ef10:	79fb      	ldrb	r3, [r7, #7]
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	797b      	ldrb	r3, [r7, #5]
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	4413      	add	r3, r2
 800ef1a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ef1c:	89ba      	ldrh	r2, [r7, #12]
 800ef1e:	89fb      	ldrh	r3, [r7, #14]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d804      	bhi.n	800ef2e <ValidatePayloadLength+0x46>
 800ef24:	89bb      	ldrh	r3, [r7, #12]
 800ef26:	2bff      	cmp	r3, #255	@ 0xff
 800ef28:	d801      	bhi.n	800ef2e <ValidatePayloadLength+0x46>
    {
        return true;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	e000      	b.n	800ef30 <ValidatePayloadLength+0x48>
    }
    return false;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ef38:	b590      	push	{r4, r7, lr}
 800ef3a:	b0a5      	sub	sp, #148	@ 0x94
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	4608      	mov	r0, r1
 800ef42:	4611      	mov	r1, r2
 800ef44:	461a      	mov	r2, r3
 800ef46:	4603      	mov	r3, r0
 800ef48:	70fb      	strb	r3, [r7, #3]
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	70bb      	strb	r3, [r7, #2]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ef52:	2300      	movs	r3, #0
 800ef54:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800ef64:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 84b9 	beq.w	800f8e0 <ProcessMacCommands+0x9a8>
 800ef6e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	f040 84ba 	bne.w	800f8ec <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800ef78:	f000 bcb2 	b.w	800f8e0 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ef7c:	78fb      	ldrb	r3, [r7, #3]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	4413      	add	r3, r2
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f003 fd41 	bl	8012a0c <LoRaMacCommandsGetCmdSize>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	78fb      	ldrb	r3, [r7, #3]
 800ef90:	441a      	add	r2, r3
 800ef92:	78bb      	ldrb	r3, [r7, #2]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	f300 84ab 	bgt.w	800f8f0 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ef9a:	78fb      	ldrb	r3, [r7, #3]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	70fa      	strb	r2, [r7, #3]
 800efa0:	461a      	mov	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4413      	add	r3, r2
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	3b02      	subs	r3, #2
 800efaa:	2b11      	cmp	r3, #17
 800efac:	f200 84a2 	bhi.w	800f8f4 <ProcessMacCommands+0x9bc>
 800efb0:	a201      	add	r2, pc, #4	@ (adr r2, 800efb8 <ProcessMacCommands+0x80>)
 800efb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb6:	bf00      	nop
 800efb8:	0800f001 	.word	0x0800f001
 800efbc:	0800f043 	.word	0x0800f043
 800efc0:	0800f1bf 	.word	0x0800f1bf
 800efc4:	0800f1fd 	.word	0x0800f1fd
 800efc8:	0800f2f5 	.word	0x0800f2f5
 800efcc:	0800f345 	.word	0x0800f345
 800efd0:	0800f401 	.word	0x0800f401
 800efd4:	0800f457 	.word	0x0800f457
 800efd8:	0800f53b 	.word	0x0800f53b
 800efdc:	0800f8f5 	.word	0x0800f8f5
 800efe0:	0800f8f5 	.word	0x0800f8f5
 800efe4:	0800f5e5 	.word	0x0800f5e5
 800efe8:	0800f8f5 	.word	0x0800f8f5
 800efec:	0800f8f5 	.word	0x0800f8f5
 800eff0:	0800f705 	.word	0x0800f705
 800eff4:	0800f739 	.word	0x0800f739
 800eff8:	0800f7c9 	.word	0x0800f7c9
 800effc:	0800f841 	.word	0x0800f841
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f000:	2004      	movs	r0, #4
 800f002:	f003 fedb 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f000 845c 	beq.w	800f8c6 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f00e:	2104      	movs	r1, #4
 800f010:	2000      	movs	r0, #0
 800f012:	f003 fe47 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f016:	78fb      	ldrb	r3, [r7, #3]
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	70fa      	strb	r2, [r7, #3]
 800f01c:	461a      	mov	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4413      	add	r3, r2
 800f022:	781a      	ldrb	r2, [r3, #0]
 800f024:	4bb0      	ldr	r3, [pc, #704]	@ (800f2e8 <ProcessMacCommands+0x3b0>)
 800f026:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	70fa      	strb	r2, [r7, #3]
 800f030:	461a      	mov	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4413      	add	r3, r2
 800f036:	781a      	ldrb	r2, [r3, #0]
 800f038:	4bab      	ldr	r3, [pc, #684]	@ (800f2e8 <ProcessMacCommands+0x3b0>)
 800f03a:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f03e:	f000 bc42 	b.w	800f8c6 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f042:	2300      	movs	r3, #0
 800f044:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f05a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f05e:	f083 0301 	eor.w	r3, r3, #1
 800f062:	b2db      	uxtb	r3, r3
 800f064:	2b00      	cmp	r3, #0
 800f066:	f000 80a6 	beq.w	800f1b6 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f06a:	2301      	movs	r3, #1
 800f06c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	3b01      	subs	r3, #1
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	4413      	add	r3, r2
 800f078:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f07a:	4b9c      	ldr	r3, [pc, #624]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f07c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f080:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f084:	4b99      	ldr	r3, [pc, #612]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f086:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f08a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f08e:	4b97      	ldr	r3, [pc, #604]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f090:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f094:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f098:	4b94      	ldr	r3, [pc, #592]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f09a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f09e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f0a2:	4b92      	ldr	r3, [pc, #584]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f0a4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f0a8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f0ac:	4b8f      	ldr	r3, [pc, #572]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f0ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f0b2:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f0b4:	4b8d      	ldr	r3, [pc, #564]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f0b6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d008      	beq.n	800f0d0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f0be:	78ba      	ldrb	r2, [r7, #2]
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f0ce:	e002      	b.n	800f0d6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f0d0:	2305      	movs	r3, #5
 800f0d2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f0d6:	4b85      	ldr	r3, [pc, #532]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f0d8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f0dc:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f0e0:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f0e4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f0e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f0ec:	9301      	str	r3, [sp, #4]
 800f0ee:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	f005 f96c 	bl	80143d2 <RegionLinkAdrReq>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f100:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f104:	f003 0307 	and.w	r3, r3, #7
 800f108:	2b07      	cmp	r3, #7
 800f10a:	d119      	bne.n	800f140 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f10c:	4b77      	ldr	r3, [pc, #476]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f10e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f112:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f116:	429a      	cmp	r2, r3
 800f118:	da03      	bge.n	800f122 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f11a:	4b74      	ldr	r3, [pc, #464]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f122:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f126:	4b71      	ldr	r3, [pc, #452]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f128:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f12c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f130:	4b6e      	ldr	r3, [pc, #440]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f132:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f136:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f13a:	4b6c      	ldr	r3, [pc, #432]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f13c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f140:	2300      	movs	r3, #0
 800f142:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f146:	e00b      	b.n	800f160 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f148:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f14c:	2201      	movs	r2, #1
 800f14e:	4619      	mov	r1, r3
 800f150:	2003      	movs	r0, #3
 800f152:	f003 fb0b 	bl	801276c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f156:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f15a:	3301      	adds	r3, #1
 800f15c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f160:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f164:	4a62      	ldr	r2, [pc, #392]	@ (800f2f0 <ProcessMacCommands+0x3b8>)
 800f166:	fba2 2303 	umull	r2, r3, r2, r3
 800f16a:	089b      	lsrs	r3, r3, #2
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f172:	429a      	cmp	r2, r3
 800f174:	d3e8      	bcc.n	800f148 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f176:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f17a:	78fb      	ldrb	r3, [r7, #3]
 800f17c:	4413      	add	r3, r2
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	3b01      	subs	r3, #1
 800f182:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f184:	78fa      	ldrb	r2, [r7, #3]
 800f186:	78bb      	ldrb	r3, [r7, #2]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d20a      	bcs.n	800f1a2 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f18c:	78fb      	ldrb	r3, [r7, #3]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	70fa      	strb	r2, [r7, #3]
 800f192:	461a      	mov	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4413      	add	r3, r2
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	f43f af68 	beq.w	800f070 <ProcessMacCommands+0x138>
 800f1a0:	e000      	b.n	800f1a4 <ProcessMacCommands+0x26c>
                            break;
 800f1a2:	bf00      	nop

                    if( macIndex < commandsSize )
 800f1a4:	78fa      	ldrb	r2, [r7, #3]
 800f1a6:	78bb      	ldrb	r3, [r7, #2]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	f080 838e 	bcs.w	800f8ca <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f1ae:	78fb      	ldrb	r3, [r7, #3]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f1b4:	e389      	b.n	800f8ca <ProcessMacCommands+0x992>
                    macIndex += 4;
 800f1b6:	78fb      	ldrb	r3, [r7, #3]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	70fb      	strb	r3, [r7, #3]
                break;
 800f1bc:	e385      	b.n	800f8ca <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f1be:	78fb      	ldrb	r3, [r7, #3]
 800f1c0:	1c5a      	adds	r2, r3, #1
 800f1c2:	70fa      	strb	r2, [r7, #3]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 030f 	and.w	r3, r3, #15
 800f1d0:	b2da      	uxtb	r2, r3
 800f1d2:	4b46      	ldr	r3, [pc, #280]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f1d4:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f1d8:	4b44      	ldr	r3, [pc, #272]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f1da:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800f1de:	461a      	mov	r2, r3
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	4093      	lsls	r3, r2
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	4b41      	ldr	r3, [pc, #260]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f1e8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f1ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	2004      	movs	r0, #4
 800f1f6:	f003 fab9 	bl	801276c <LoRaMacCommandsAddCmd>
                break;
 800f1fa:	e371      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f1fc:	2307      	movs	r3, #7
 800f1fe:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f202:	78fb      	ldrb	r3, [r7, #3]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	4413      	add	r3, r2
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	091b      	lsrs	r3, r3, #4
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	b25b      	sxtb	r3, r3
 800f210:	f003 0307 	and.w	r3, r3, #7
 800f214:	b25b      	sxtb	r3, r3
 800f216:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f21a:	78fb      	ldrb	r3, [r7, #3]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	4413      	add	r3, r2
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	b25b      	sxtb	r3, r3
 800f224:	f003 030f 	and.w	r3, r3, #15
 800f228:	b25b      	sxtb	r3, r3
 800f22a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f22e:	78fb      	ldrb	r3, [r7, #3]
 800f230:	3301      	adds	r3, #1
 800f232:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	70fa      	strb	r2, [r7, #3]
 800f23a:	461a      	mov	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4413      	add	r3, r2
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	1c5a      	adds	r2, r3, #1
 800f248:	70fa      	strb	r2, [r7, #3]
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	021a      	lsls	r2, r3, #8
 800f254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f256:	4313      	orrs	r3, r2
 800f258:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f25a:	78fb      	ldrb	r3, [r7, #3]
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	70fa      	strb	r2, [r7, #3]
 800f260:	461a      	mov	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4413      	add	r3, r2
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	041a      	lsls	r2, r3, #16
 800f26a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f26c:	4313      	orrs	r3, r2
 800f26e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800f270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f272:	2264      	movs	r2, #100	@ 0x64
 800f274:	fb02 f303 	mul.w	r3, r2, r3
 800f278:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f27a:	4b1c      	ldr	r3, [pc, #112]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f27c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f280:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f284:	4611      	mov	r1, r2
 800f286:	4618      	mov	r0, r3
 800f288:	f005 f8bd 	bl	8014406 <RegionRxParamSetupReq>
 800f28c:	4603      	mov	r3, r0
 800f28e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f292:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f296:	f003 0307 	and.w	r3, r3, #7
 800f29a:	2b07      	cmp	r3, #7
 800f29c:	d117      	bne.n	800f2ce <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f29e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f2a2:	b2da      	uxtb	r2, r3
 800f2a4:	4b11      	ldr	r3, [pc, #68]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f2a6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f2aa:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f2b2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f2b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f2ba:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2be:	4a0b      	ldr	r2, [pc, #44]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f2c0:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f2c2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800f2c6:	b2da      	uxtb	r2, r3
 800f2c8:	4b08      	ldr	r3, [pc, #32]	@ (800f2ec <ProcessMacCommands+0x3b4>)
 800f2ca:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800f2ce:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f2d2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f2d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f2da:	2201      	movs	r2, #1
 800f2dc:	4619      	mov	r1, r3
 800f2de:	2005      	movs	r0, #5
 800f2e0:	f003 fa44 	bl	801276c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f2e4:	e2fc      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
 800f2e6:	bf00      	nop
 800f2e8:	20000670 	.word	0x20000670
 800f2ec:	20000b90 	.word	0x20000b90
 800f2f0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f2f4:	23ff      	movs	r3, #255	@ 0xff
 800f2f6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f2fa:	4bb7      	ldr	r3, [pc, #732]	@ (800f5d8 <ProcessMacCommands+0x6a0>)
 800f2fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00d      	beq.n	800f320 <ProcessMacCommands+0x3e8>
 800f304:	4bb4      	ldr	r3, [pc, #720]	@ (800f5d8 <ProcessMacCommands+0x6a0>)
 800f306:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d007      	beq.n	800f320 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f310:	4bb1      	ldr	r3, [pc, #708]	@ (800f5d8 <ProcessMacCommands+0x6a0>)
 800f312:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4798      	blx	r3
 800f31a:	4603      	mov	r3, r0
 800f31c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f320:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f324:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f328:	787b      	ldrb	r3, [r7, #1]
 800f32a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f334:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f338:	2202      	movs	r2, #2
 800f33a:	4619      	mov	r1, r3
 800f33c:	2006      	movs	r0, #6
 800f33e:	f003 fa15 	bl	801276c <LoRaMacCommandsAddCmd>
                break;
 800f342:	e2cd      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f344:	2303      	movs	r3, #3
 800f346:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f34a:	78fb      	ldrb	r3, [r7, #3]
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	70fa      	strb	r2, [r7, #3]
 800f350:	461a      	mov	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4413      	add	r3, r2
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	b25b      	sxtb	r3, r3
 800f35a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f35e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f362:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	70fa      	strb	r2, [r7, #3]
 800f36a:	461a      	mov	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4413      	add	r3, r2
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f374:	78fb      	ldrb	r3, [r7, #3]
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	70fa      	strb	r2, [r7, #3]
 800f37a:	461a      	mov	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4413      	add	r3, r2
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	021a      	lsls	r2, r3, #8
 800f384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f386:	4313      	orrs	r3, r2
 800f388:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f38a:	78fb      	ldrb	r3, [r7, #3]
 800f38c:	1c5a      	adds	r2, r3, #1
 800f38e:	70fa      	strb	r2, [r7, #3]
 800f390:	461a      	mov	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4413      	add	r3, r2
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	041a      	lsls	r2, r3, #16
 800f39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f39c:	4313      	orrs	r3, r2
 800f39e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a2:	2264      	movs	r2, #100	@ 0x64
 800f3a4:	fb02 f303 	mul.w	r3, r2, r3
 800f3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f3ae:	78fb      	ldrb	r3, [r7, #3]
 800f3b0:	1c5a      	adds	r2, r3, #1
 800f3b2:	70fa      	strb	r2, [r7, #3]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	b25b      	sxtb	r3, r3
 800f3be:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f3c2:	4b86      	ldr	r3, [pc, #536]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f3c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f3c8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f005 f82c 	bl	801442c <RegionNewChannelReq>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f3dc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f3e0:	b25b      	sxtb	r3, r3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f2c0 8273 	blt.w	800f8ce <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800f3e8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f3ec:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f3f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	2007      	movs	r0, #7
 800f3fa:	f003 f9b7 	bl	801276c <LoRaMacCommandsAddCmd>
                }
                break;
 800f3fe:	e266      	b.n	800f8ce <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	70fa      	strb	r2, [r7, #3]
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4413      	add	r3, r2
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	f003 030f 	and.w	r3, r3, #15
 800f412:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f416:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d104      	bne.n	800f428 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f41e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f422:	3301      	adds	r3, #1
 800f424:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f428:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f42c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f430:	fb02 f303 	mul.w	r3, r2, r3
 800f434:	461a      	mov	r2, r3
 800f436:	4b69      	ldr	r3, [pc, #420]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f438:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f43a:	4b68      	ldr	r3, [pc, #416]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f43e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f442:	4a66      	ldr	r2, [pc, #408]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f444:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f446:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f44a:	2200      	movs	r2, #0
 800f44c:	4619      	mov	r1, r3
 800f44e:	2008      	movs	r0, #8
 800f450:	f003 f98c 	bl	801276c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f454:	e244      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	70fa      	strb	r2, [r7, #3]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f468:	2300      	movs	r3, #0
 800f46a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f474:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f478:	f003 0320 	and.w	r3, r3, #32
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d002      	beq.n	800f486 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f480:	2301      	movs	r3, #1
 800f482:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f486:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f48a:	f003 0310 	and.w	r3, r3, #16
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d002      	beq.n	800f498 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f492:	2301      	movs	r3, #1
 800f494:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f498:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f49c:	f003 030f 	and.w	r3, r3, #15
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f4a6:	4b4d      	ldr	r3, [pc, #308]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4ac:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f004 ffcd 	bl	8014452 <RegionTxParamSetupReq>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4be:	f000 8208 	beq.w	800f8d2 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f4c2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f4c6:	4b45      	ldr	r3, [pc, #276]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4c8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f4cc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f4d0:	4b42      	ldr	r3, [pc, #264]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4d2:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f4d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f4da:	461a      	mov	r2, r3
 800f4dc:	4b40      	ldr	r3, [pc, #256]	@ (800f5e0 <ProcessMacCommands+0x6a8>)
 800f4de:	5c9b      	ldrb	r3, [r3, r2]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7f1 fa27 	bl	8000934 <__aeabi_ui2f>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	4a3c      	ldr	r2, [pc, #240]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4ea:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f4ec:	2302      	movs	r3, #2
 800f4ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f4f2:	4b3a      	ldr	r3, [pc, #232]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4f4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f4f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f4fc:	4b37      	ldr	r3, [pc, #220]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f4fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f502:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f506:	4611      	mov	r1, r2
 800f508:	4618      	mov	r0, r3
 800f50a:	f004 fea5 	bl	8014258 <RegionGetPhyParam>
 800f50e:	4603      	mov	r3, r0
 800f510:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f514:	b25a      	sxtb	r2, r3
 800f516:	4b31      	ldr	r3, [pc, #196]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f518:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f51c:	4293      	cmp	r3, r2
 800f51e:	bfb8      	it	lt
 800f520:	4613      	movlt	r3, r2
 800f522:	b25a      	sxtb	r2, r3
 800f524:	4b2d      	ldr	r3, [pc, #180]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f52a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f52e:	2200      	movs	r2, #0
 800f530:	4619      	mov	r1, r3
 800f532:	2009      	movs	r0, #9
 800f534:	f003 f91a 	bl	801276c <LoRaMacCommandsAddCmd>
                }
                break;
 800f538:	e1cb      	b.n	800f8d2 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f53a:	2303      	movs	r3, #3
 800f53c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	70fa      	strb	r2, [r7, #3]
 800f546:	461a      	mov	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4413      	add	r3, r2
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f552:	78fb      	ldrb	r3, [r7, #3]
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	70fa      	strb	r2, [r7, #3]
 800f558:	461a      	mov	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4413      	add	r3, r2
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f562:	78fb      	ldrb	r3, [r7, #3]
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	70fa      	strb	r2, [r7, #3]
 800f568:	461a      	mov	r2, r3
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4413      	add	r3, r2
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	021a      	lsls	r2, r3, #8
 800f572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f574:	4313      	orrs	r3, r2
 800f576:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	1c5a      	adds	r2, r3, #1
 800f57c:	70fa      	strb	r2, [r7, #3]
 800f57e:	461a      	mov	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4413      	add	r3, r2
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	041a      	lsls	r2, r3, #16
 800f588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58a:	4313      	orrs	r3, r2
 800f58c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f590:	2264      	movs	r2, #100	@ 0x64
 800f592:	fb02 f303 	mul.w	r3, r2, r3
 800f596:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f598:	4b10      	ldr	r3, [pc, #64]	@ (800f5dc <ProcessMacCommands+0x6a4>)
 800f59a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f59e:	f107 0220 	add.w	r2, r7, #32
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f004 ff67 	bl	8014478 <RegionDlChannelReq>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f5b2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f5b6:	b25b      	sxtb	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f2c0 818c 	blt.w	800f8d6 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800f5be:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f5c2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f5c6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	200a      	movs	r0, #10
 800f5d0:	f003 f8cc 	bl	801276c <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f5d4:	e17f      	b.n	800f8d6 <ProcessMacCommands+0x99e>
 800f5d6:	bf00      	nop
 800f5d8:	20000670 	.word	0x20000670
 800f5dc:	20000b90 	.word	0x20000b90
 800f5e0:	0801c1c8 	.word	0x0801c1c8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f5e4:	2009      	movs	r0, #9
 800f5e6:	f003 fbe9 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f000 8084 	beq.w	800f6fa <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f5f2:	2109      	movs	r1, #9
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f003 fb55 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f5fa:	f107 0318 	add.w	r3, r7, #24
 800f5fe:	2200      	movs	r2, #0
 800f600:	601a      	str	r2, [r3, #0]
 800f602:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f604:	f107 0310 	add.w	r3, r7, #16
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f60e:	f107 0308 	add.w	r3, r7, #8
 800f612:	2200      	movs	r2, #0
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f618:	78fb      	ldrb	r3, [r7, #3]
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	70fa      	strb	r2, [r7, #3]
 800f61e:	461a      	mov	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f628:	78fb      	ldrb	r3, [r7, #3]
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	70fa      	strb	r2, [r7, #3]
 800f62e:	461a      	mov	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4413      	add	r3, r2
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	021a      	lsls	r2, r3, #8
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f63e:	78fb      	ldrb	r3, [r7, #3]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	70fa      	strb	r2, [r7, #3]
 800f644:	461a      	mov	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4413      	add	r3, r2
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	041a      	lsls	r2, r3, #16
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	4313      	orrs	r3, r2
 800f652:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f654:	78fb      	ldrb	r3, [r7, #3]
 800f656:	1c5a      	adds	r2, r3, #1
 800f658:	70fa      	strb	r2, [r7, #3]
 800f65a:	461a      	mov	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4413      	add	r3, r2
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	061a      	lsls	r2, r3, #24
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	4313      	orrs	r3, r2
 800f668:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f66a:	78fb      	ldrb	r3, [r7, #3]
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	70fa      	strb	r2, [r7, #3]
 800f670:	461a      	mov	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4413      	add	r3, r2
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	b21b      	sxth	r3, r3
 800f67a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f67c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f680:	461a      	mov	r2, r3
 800f682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f686:	fb02 f303 	mul.w	r3, r2, r3
 800f68a:	121b      	asrs	r3, r3, #8
 800f68c:	b21b      	sxth	r3, r3
 800f68e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f690:	f107 0310 	add.w	r3, r7, #16
 800f694:	f107 0218 	add.w	r2, r7, #24
 800f698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f69c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	4b96      	ldr	r3, [pc, #600]	@ (800f8fc <ProcessMacCommands+0x9c4>)
 800f6a4:	4413      	add	r3, r2
 800f6a6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f6a8:	f107 0308 	add.w	r3, r7, #8
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f00a fc53 	bl	8019f58 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f6b2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f6b6:	4b92      	ldr	r3, [pc, #584]	@ (800f900 <ProcessMacCommands+0x9c8>)
 800f6b8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f6bc:	9200      	str	r2, [sp, #0]
 800f6be:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f6c2:	f107 0210 	add.w	r2, r7, #16
 800f6c6:	ca06      	ldmia	r2, {r1, r2}
 800f6c8:	f00a fbdf 	bl	8019e8a <SysTimeSub>
 800f6cc:	f107 0010 	add.w	r0, r7, #16
 800f6d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d6:	f107 0208 	add.w	r2, r7, #8
 800f6da:	ca06      	ldmia	r2, {r1, r2}
 800f6dc:	f00a fb9c 	bl	8019e18 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f6e0:	f107 0310 	add.w	r3, r7, #16
 800f6e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f6e8:	f00a fc08 	bl	8019efc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f6ec:	f002 fee8 	bl	80124c0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f6f0:	4b83      	ldr	r3, [pc, #524]	@ (800f900 <ProcessMacCommands+0x9c8>)
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f6f8:	e0f2      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f6fa:	4b81      	ldr	r3, [pc, #516]	@ (800f900 <ProcessMacCommands+0x9c8>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 800f702:	e0ed      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f704:	200c      	movs	r0, #12
 800f706:	f003 fb59 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 80e4 	beq.w	800f8da <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f712:	210c      	movs	r1, #12
 800f714:	2000      	movs	r0, #0
 800f716:	f003 fac5 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f71a:	4b79      	ldr	r3, [pc, #484]	@ (800f900 <ProcessMacCommands+0x9c8>)
 800f71c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f720:	2b04      	cmp	r3, #4
 800f722:	f000 80da 	beq.w	800f8da <ProcessMacCommands+0x9a2>
 800f726:	4b76      	ldr	r3, [pc, #472]	@ (800f900 <ProcessMacCommands+0x9c8>)
 800f728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f72c:	2b05      	cmp	r3, #5
 800f72e:	f000 80d4 	beq.w	800f8da <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f732:	f002 fea6 	bl	8012482 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f736:	e0d0      	b.n	800f8da <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f738:	2303      	movs	r3, #3
 800f73a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f742:	78fb      	ldrb	r3, [r7, #3]
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	70fa      	strb	r2, [r7, #3]
 800f748:	461a      	mov	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4413      	add	r3, r2
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f752:	78fb      	ldrb	r3, [r7, #3]
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	70fa      	strb	r2, [r7, #3]
 800f758:	461a      	mov	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4413      	add	r3, r2
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	021b      	lsls	r3, r3, #8
 800f762:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f764:	4313      	orrs	r3, r2
 800f766:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f768:	78fb      	ldrb	r3, [r7, #3]
 800f76a:	1c5a      	adds	r2, r3, #1
 800f76c:	70fa      	strb	r2, [r7, #3]
 800f76e:	461a      	mov	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4413      	add	r3, r2
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	041b      	lsls	r3, r3, #16
 800f778:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f77a:	4313      	orrs	r3, r2
 800f77c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800f77e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f780:	2264      	movs	r2, #100	@ 0x64
 800f782:	fb02 f303 	mul.w	r3, r2, r3
 800f786:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f788:	78fb      	ldrb	r3, [r7, #3]
 800f78a:	1c5a      	adds	r2, r3, #1
 800f78c:	70fa      	strb	r2, [r7, #3]
 800f78e:	461a      	mov	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4413      	add	r3, r2
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 030f 	and.w	r3, r3, #15
 800f79a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f79e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f7a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f002 fe72 	bl	801248e <LoRaMacClassBPingSlotChannelReq>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800f7b0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f7b4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800f7b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f7bc:	2201      	movs	r2, #1
 800f7be:	4619      	mov	r1, r3
 800f7c0:	2011      	movs	r0, #17
 800f7c2:	f002 ffd3 	bl	801276c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800f7c6:	e08b      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f7c8:	200d      	movs	r0, #13
 800f7ca:	f003 faf7 	bl	8012dbc <LoRaMacConfirmQueueIsCmdActive>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 8084 	beq.w	800f8de <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f7d6:	210d      	movs	r1, #13
 800f7d8:	2000      	movs	r0, #0
 800f7da:	f003 fa63 	bl	8012ca4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f7ea:	78fb      	ldrb	r3, [r7, #3]
 800f7ec:	1c5a      	adds	r2, r3, #1
 800f7ee:	70fa      	strb	r2, [r7, #3]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f7fc:	78fb      	ldrb	r3, [r7, #3]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	70fa      	strb	r2, [r7, #3]
 800f802:	461a      	mov	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4413      	add	r3, r2
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	021b      	lsls	r3, r3, #8
 800f80c:	b21a      	sxth	r2, r3
 800f80e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800f812:	4313      	orrs	r3, r2
 800f814:	b21b      	sxth	r3, r3
 800f816:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f81a:	78fb      	ldrb	r3, [r7, #3]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	70fa      	strb	r2, [r7, #3]
 800f820:	461a      	mov	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4413      	add	r3, r2
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f82c:	4b35      	ldr	r3, [pc, #212]	@ (800f904 <ProcessMacCommands+0x9cc>)
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800f834:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800f838:	4618      	mov	r0, r3
 800f83a:	f002 fe34 	bl	80124a6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f83e:	e04e      	b.n	800f8de <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f840:	2300      	movs	r3, #0
 800f842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f846:	78fb      	ldrb	r3, [r7, #3]
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	70fa      	strb	r2, [r7, #3]
 800f84c:	461a      	mov	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4413      	add	r3, r2
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f858:	78fb      	ldrb	r3, [r7, #3]
 800f85a:	1c5a      	adds	r2, r3, #1
 800f85c:	70fa      	strb	r2, [r7, #3]
 800f85e:	461a      	mov	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4413      	add	r3, r2
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f86c:	4313      	orrs	r3, r2
 800f86e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f872:	78fb      	ldrb	r3, [r7, #3]
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	70fa      	strb	r2, [r7, #3]
 800f878:	461a      	mov	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4413      	add	r3, r2
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	041b      	lsls	r3, r3, #16
 800f882:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f886:	4313      	orrs	r3, r2
 800f888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800f88c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f890:	2264      	movs	r2, #100	@ 0x64
 800f892:	fb02 f303 	mul.w	r3, r2, r3
 800f896:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f89a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800f89e:	f002 fe15 	bl	80124cc <LoRaMacClassBBeaconFreqReq>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800f8ae:	e002      	b.n	800f8b6 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f8b6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4619      	mov	r1, r3
 800f8be:	2013      	movs	r0, #19
 800f8c0:	f002 ff54 	bl	801276c <LoRaMacCommandsAddCmd>
                }
                break;
 800f8c4:	e00c      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8c6:	bf00      	nop
 800f8c8:	e00a      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8ca:	bf00      	nop
 800f8cc:	e008      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8ce:	bf00      	nop
 800f8d0:	e006      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8d2:	bf00      	nop
 800f8d4:	e004      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8d6:	bf00      	nop
 800f8d8:	e002      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8da:	bf00      	nop
 800f8dc:	e000      	b.n	800f8e0 <ProcessMacCommands+0x9a8>
                break;
 800f8de:	bf00      	nop
    while( macIndex < commandsSize )
 800f8e0:	78fa      	ldrb	r2, [r7, #3]
 800f8e2:	78bb      	ldrb	r3, [r7, #2]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	f4ff ab49 	bcc.w	800ef7c <ProcessMacCommands+0x44>
 800f8ea:	e004      	b.n	800f8f6 <ProcessMacCommands+0x9be>
        return;
 800f8ec:	bf00      	nop
 800f8ee:	e002      	b.n	800f8f6 <ProcessMacCommands+0x9be>
            return;
 800f8f0:	bf00      	nop
 800f8f2:	e000      	b.n	800f8f6 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f8f4:	bf00      	nop
        }
    }
}
 800f8f6:	378c      	adds	r7, #140	@ 0x8c
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd90      	pop	{r4, r7, pc}
 800f8fc:	12d53d80 	.word	0x12d53d80
 800f900:	20000670 	.word	0x20000670
 800f904:	20001720 	.word	0x20001720

0800f908 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08e      	sub	sp, #56	@ 0x38
 800f90c:	af02      	add	r7, sp, #8
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	607a      	str	r2, [r7, #4]
 800f912:	461a      	mov	r2, r3
 800f914:	460b      	mov	r3, r1
 800f916:	72fb      	strb	r3, [r7, #11]
 800f918:	4613      	mov	r3, r2
 800f91a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f91c:	2303      	movs	r3, #3
 800f91e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f922:	4b66      	ldr	r3, [pc, #408]	@ (800fabc <Send+0x1b4>)
 800f924:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f928:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f92c:	4b63      	ldr	r3, [pc, #396]	@ (800fabc <Send+0x1b4>)
 800f92e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f932:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f936:	4b61      	ldr	r3, [pc, #388]	@ (800fabc <Send+0x1b4>)
 800f938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f93c:	4b5f      	ldr	r3, [pc, #380]	@ (800fabc <Send+0x1b4>)
 800f93e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f946:	2307      	movs	r3, #7
 800f948:	e0b4      	b.n	800fab4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f94a:	4b5c      	ldr	r3, [pc, #368]	@ (800fabc <Send+0x1b4>)
 800f94c:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800f950:	2b00      	cmp	r3, #0
 800f952:	d102      	bne.n	800f95a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f954:	4b59      	ldr	r3, [pc, #356]	@ (800fabc <Send+0x1b4>)
 800f956:	2200      	movs	r2, #0
 800f958:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f960:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f964:	f36f 0303 	bfc	r3, #0, #4
 800f968:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f96c:	4b53      	ldr	r3, [pc, #332]	@ (800fabc <Send+0x1b4>)
 800f96e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800f972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f976:	f362 13c7 	bfi	r3, r2, #7, #1
 800f97a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f97e:	4b4f      	ldr	r3, [pc, #316]	@ (800fabc <Send+0x1b4>)
 800f980:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f984:	2b01      	cmp	r3, #1
 800f986:	d106      	bne.n	800f996 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f988:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f98c:	f043 0310 	orr.w	r3, r3, #16
 800f990:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800f994:	e005      	b.n	800f9a2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f996:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f99a:	f36f 1304 	bfc	r3, #4, #1
 800f99e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f9a2:	4b46      	ldr	r3, [pc, #280]	@ (800fabc <Send+0x1b4>)
 800f9a4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d005      	beq.n	800f9b8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f9ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f9b0:	f043 0320 	orr.w	r3, r3, #32
 800f9b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f9bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f9c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	bf14      	ite	ne
 800f9ca:	2301      	movne	r3, #1
 800f9cc:	2300      	moveq	r3, #0
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f9d2:	4b3a      	ldr	r3, [pc, #232]	@ (800fabc <Send+0x1b4>)
 800f9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d6:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f9d8:	4b39      	ldr	r3, [pc, #228]	@ (800fac0 <Send+0x1b8>)
 800f9da:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800f9de:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f9e0:	4b37      	ldr	r3, [pc, #220]	@ (800fac0 <Send+0x1b8>)
 800f9e2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 800f9e6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9e8:	4b34      	ldr	r3, [pc, #208]	@ (800fabc <Send+0x1b4>)
 800f9ea:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f9ee:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9f2:	4b32      	ldr	r3, [pc, #200]	@ (800fabc <Send+0x1b4>)
 800f9f4:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f9f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f9fc:	4b2f      	ldr	r3, [pc, #188]	@ (800fabc <Send+0x1b4>)
 800f9fe:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fa02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa06:	4b2d      	ldr	r3, [pc, #180]	@ (800fabc <Send+0x1b4>)
 800fa08:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fa0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa10:	4b2a      	ldr	r3, [pc, #168]	@ (800fabc <Send+0x1b4>)
 800fa12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fa16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fa1a:	f107 0014 	add.w	r0, r7, #20
 800fa1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	4b27      	ldr	r3, [pc, #156]	@ (800fac4 <Send+0x1bc>)
 800fa26:	4a28      	ldr	r2, [pc, #160]	@ (800fac8 <Send+0x1c0>)
 800fa28:	4928      	ldr	r1, [pc, #160]	@ (800facc <Send+0x1c4>)
 800fa2a:	f002 fbc9 	bl	80121c0 <LoRaMacAdrCalcNext>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	461a      	mov	r2, r3
 800fa32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa36:	f362 1386 	bfi	r3, r2, #6, #1
 800fa3a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fa3e:	7afa      	ldrb	r2, [r7, #11]
 800fa40:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fa44:	893b      	ldrh	r3, [r7, #8]
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f000 fc42 	bl	80102d4 <PrepareFrame>
 800fa50:	4603      	mov	r3, r0
 800fa52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fa56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <Send+0x15e>
 800fa5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa62:	2b0a      	cmp	r3, #10
 800fa64:	d107      	bne.n	800fa76 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fa66:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 f96e 	bl	800fd4c <ScheduleTx>
 800fa70:	4603      	mov	r3, r0
 800fa72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fa76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00a      	beq.n	800fa94 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fa7e:	4a0f      	ldr	r2, [pc, #60]	@ (800fabc <Send+0x1b4>)
 800fa80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fa84:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fa88:	4a0c      	ldr	r2, [pc, #48]	@ (800fabc <Send+0x1b4>)
 800fa8a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fa8e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800fa92:	e00d      	b.n	800fab0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fa94:	4b09      	ldr	r3, [pc, #36]	@ (800fabc <Send+0x1b4>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9e:	4a07      	ldr	r2, [pc, #28]	@ (800fabc <Send+0x1b4>)
 800faa0:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800faa2:	f002 fedb 	bl	801285c <LoRaMacCommandsRemoveNoneStickyCmds>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800faac:	2313      	movs	r3, #19
 800faae:	e001      	b.n	800fab4 <Send+0x1ac>
        }
    }
    return status;
 800fab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3730      	adds	r7, #48	@ 0x30
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	20000b90 	.word	0x20000b90
 800fac0:	20000670 	.word	0x20000670
 800fac4:	20000bf0 	.word	0x20000bf0
 800fac8:	20000bc8 	.word	0x20000bc8
 800facc:	20000bc9 	.word	0x20000bc9

0800fad0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fae2:	2301      	movs	r3, #1
 800fae4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fae6:	79fb      	ldrb	r3, [r7, #7]
 800fae8:	2bff      	cmp	r3, #255	@ 0xff
 800faea:	d129      	bne.n	800fb40 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800faec:	2000      	movs	r0, #0
 800faee:	f7ff f901 	bl	800ecf4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800faf2:	4b1a      	ldr	r3, [pc, #104]	@ (800fb5c <SendReJoinReq+0x8c>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fafa:	4b18      	ldr	r3, [pc, #96]	@ (800fb5c <SendReJoinReq+0x8c>)
 800fafc:	4a18      	ldr	r2, [pc, #96]	@ (800fb60 <SendReJoinReq+0x90>)
 800fafe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb02:	4b16      	ldr	r3, [pc, #88]	@ (800fb5c <SendReJoinReq+0x8c>)
 800fb04:	22ff      	movs	r2, #255	@ 0xff
 800fb06:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb0a:	7b3b      	ldrb	r3, [r7, #12]
 800fb0c:	f36f 1347 	bfc	r3, #5, #3
 800fb10:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb12:	7b3a      	ldrb	r2, [r7, #12]
 800fb14:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <SendReJoinReq+0x8c>)
 800fb16:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fb1a:	f7fc f869 	bl	800bbf0 <SecureElementGetJoinEui>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2208      	movs	r2, #8
 800fb22:	4619      	mov	r1, r3
 800fb24:	480f      	ldr	r0, [pc, #60]	@ (800fb64 <SendReJoinReq+0x94>)
 800fb26:	f006 fe38 	bl	801679a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fb2a:	f7fc f83f 	bl	800bbac <SecureElementGetDevEui>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2208      	movs	r2, #8
 800fb32:	4619      	mov	r1, r3
 800fb34:	480c      	ldr	r0, [pc, #48]	@ (800fb68 <SendReJoinReq+0x98>)
 800fb36:	f006 fe30 	bl	801679a <memcpy1>

            allowDelayedTx = false;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	73fb      	strb	r3, [r7, #15]

            break;
 800fb3e:	e002      	b.n	800fb46 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fb40:	2302      	movs	r3, #2
 800fb42:	73bb      	strb	r3, [r7, #14]
            break;
 800fb44:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 f8ff 	bl	800fd4c <ScheduleTx>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73bb      	strb	r3, [r7, #14]
    return status;
 800fb52:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20000670 	.word	0x20000670
 800fb60:	20000672 	.word	0x20000672
 800fb64:	2000077e 	.word	0x2000077e
 800fb68:	20000786 	.word	0x20000786

0800fb6c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fb70:	f002 fc36 	bl	80123e0 <LoRaMacClassBIsBeaconExpected>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fb7a:	230e      	movs	r3, #14
 800fb7c:	e013      	b.n	800fba6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800fbac <CheckForClassBCollision+0x40>)
 800fb80:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d10d      	bne.n	800fba4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fb88:	f002 fc31 	bl	80123ee <LoRaMacClassBIsPingExpected>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fb92:	230f      	movs	r3, #15
 800fb94:	e007      	b.n	800fba6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fb96:	f002 fc31 	bl	80123fc <LoRaMacClassBIsMulticastExpected>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fba0:	230f      	movs	r3, #15
 800fba2:	e000      	b.n	800fba6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	20000b90 	.word	0x20000b90

0800fbb0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fbb0:	b590      	push	{r4, r7, lr}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fbb6:	4b2d      	ldr	r3, [pc, #180]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbb8:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fbbc:	4b2b      	ldr	r3, [pc, #172]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbbe:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fbc2:	4b2a      	ldr	r3, [pc, #168]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbc4:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 800fbc8:	4b28      	ldr	r3, [pc, #160]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbca:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fbce:	4b27      	ldr	r3, [pc, #156]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbd0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fbd4:	b25b      	sxtb	r3, r3
 800fbd6:	f004 fc94 	bl	8014502 <RegionApplyDrOffset>
 800fbda:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fbdc:	b259      	sxtb	r1, r3
 800fbde:	4b23      	ldr	r3, [pc, #140]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbe0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800fbe4:	4b21      	ldr	r3, [pc, #132]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe8:	4821      	ldr	r0, [pc, #132]	@ (800fc70 <ComputeRxWindowParameters+0xc0>)
 800fbea:	9000      	str	r0, [sp, #0]
 800fbec:	4620      	mov	r0, r4
 800fbee:	f004 fbaa 	bl	8014346 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbf4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fbf8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fbfa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fbfe:	b259      	sxtb	r1, r3
 800fc00:	4b1a      	ldr	r3, [pc, #104]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc02:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800fc06:	4b19      	ldr	r3, [pc, #100]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc0a:	4c1a      	ldr	r4, [pc, #104]	@ (800fc74 <ComputeRxWindowParameters+0xc4>)
 800fc0c:	9400      	str	r4, [sp, #0]
 800fc0e:	f004 fb9a 	bl	8014346 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc12:	4b16      	ldr	r3, [pc, #88]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc16:	4a18      	ldr	r2, [pc, #96]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc18:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fc1c:	4413      	add	r3, r2
 800fc1e:	4a16      	ldr	r2, [pc, #88]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc20:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc24:	4b11      	ldr	r3, [pc, #68]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc28:	4a13      	ldr	r2, [pc, #76]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc2a:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800fc2e:	4413      	add	r3, r2
 800fc30:	4a11      	ldr	r2, [pc, #68]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc32:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc36:	4b0d      	ldr	r3, [pc, #52]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc38:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d111      	bne.n	800fc64 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc40:	4b0a      	ldr	r3, [pc, #40]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc44:	4a0c      	ldr	r2, [pc, #48]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc46:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fc4a:	4413      	add	r3, r2
 800fc4c:	4a0a      	ldr	r2, [pc, #40]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc4e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc52:	4b06      	ldr	r3, [pc, #24]	@ (800fc6c <ComputeRxWindowParameters+0xbc>)
 800fc54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc56:	4a08      	ldr	r2, [pc, #32]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc58:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800fc5c:	4413      	add	r3, r2
 800fc5e:	4a06      	ldr	r2, [pc, #24]	@ (800fc78 <ComputeRxWindowParameters+0xc8>)
 800fc60:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800fc64:	bf00      	nop
 800fc66:	3704      	adds	r7, #4
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd90      	pop	{r4, r7, pc}
 800fc6c:	20000b90 	.word	0x20000b90
 800fc70:	20000a28 	.word	0x20000a28
 800fc74:	20000a40 	.word	0x20000a40
 800fc78:	20000670 	.word	0x20000670

0800fc7c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fc86:	4b13      	ldr	r3, [pc, #76]	@ (800fcd4 <VerifyTxFrame+0x58>)
 800fc88:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d01b      	beq.n	800fcc8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fc90:	1d3b      	adds	r3, r7, #4
 800fc92:	4618      	mov	r0, r3
 800fc94:	f002 fe28 	bl	80128e8 <LoRaMacCommandsGetSizeSerializedCmds>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fc9e:	2313      	movs	r3, #19
 800fca0:	e013      	b.n	800fcca <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fca2:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd8 <VerifyTxFrame+0x5c>)
 800fca4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fca8:	4a0a      	ldr	r2, [pc, #40]	@ (800fcd4 <VerifyTxFrame+0x58>)
 800fcaa:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff f918 	bl	800eee8 <ValidatePayloadLength>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f083 0301 	eor.w	r3, r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fcc4:	2308      	movs	r3, #8
 800fcc6:	e000      	b.n	800fcca <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000b90 	.word	0x20000b90
 800fcd8:	20000670 	.word	0x20000670

0800fcdc <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fce2:	4b18      	ldr	r3, [pc, #96]	@ (800fd44 <SerializeTxFrame+0x68>)
 800fce4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d002      	beq.n	800fcf2 <SerializeTxFrame+0x16>
 800fcec:	2b04      	cmp	r3, #4
 800fcee:	d011      	beq.n	800fd14 <SerializeTxFrame+0x38>
 800fcf0:	e021      	b.n	800fd36 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fcf2:	4815      	ldr	r0, [pc, #84]	@ (800fd48 <SerializeTxFrame+0x6c>)
 800fcf4:	f004 f929 	bl	8013f4a <LoRaMacSerializerJoinRequest>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd02:	2311      	movs	r3, #17
 800fd04:	e01a      	b.n	800fd3c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd06:	4b0f      	ldr	r3, [pc, #60]	@ (800fd44 <SerializeTxFrame+0x68>)
 800fd08:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd44 <SerializeTxFrame+0x68>)
 800fd10:	801a      	strh	r2, [r3, #0]
            break;
 800fd12:	e012      	b.n	800fd3a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd14:	480c      	ldr	r0, [pc, #48]	@ (800fd48 <SerializeTxFrame+0x6c>)
 800fd16:	f004 f99a 	bl	801404e <LoRaMacSerializerData>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd1e:	79fb      	ldrb	r3, [r7, #7]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd24:	2311      	movs	r3, #17
 800fd26:	e009      	b.n	800fd3c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd28:	4b06      	ldr	r3, [pc, #24]	@ (800fd44 <SerializeTxFrame+0x68>)
 800fd2a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4b04      	ldr	r3, [pc, #16]	@ (800fd44 <SerializeTxFrame+0x68>)
 800fd32:	801a      	strh	r2, [r3, #0]
            break;
 800fd34:	e001      	b.n	800fd3a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd36:	2303      	movs	r3, #3
 800fd38:	e000      	b.n	800fd3c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	20000670 	.word	0x20000670
 800fd48:	20000778 	.word	0x20000778

0800fd4c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b090      	sub	sp, #64	@ 0x40
 800fd50:	af02      	add	r7, sp, #8
 800fd52:	4603      	mov	r3, r0
 800fd54:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fd56:	2303      	movs	r3, #3
 800fd58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fd5c:	f7ff ff06 	bl	800fb6c <CheckForClassBCollision>
 800fd60:	4603      	mov	r3, r0
 800fd62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fd66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <ScheduleTx+0x28>
    {
        return status;
 800fd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd72:	e08f      	b.n	800fe94 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fd74:	f000 f8f4 	bl	800ff60 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fd78:	f7ff ffb0 	bl	800fcdc <SerializeTxFrame>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fd82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d002      	beq.n	800fd90 <ScheduleTx+0x44>
    {
        return status;
 800fd8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd8e:	e081      	b.n	800fe94 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fd90:	4b42      	ldr	r3, [pc, #264]	@ (800fe9c <ScheduleTx+0x150>)
 800fd92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd94:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fd96:	4b41      	ldr	r3, [pc, #260]	@ (800fe9c <ScheduleTx+0x150>)
 800fd98:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fd9c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fd9e:	4b3f      	ldr	r3, [pc, #252]	@ (800fe9c <ScheduleTx+0x150>)
 800fda0:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800fda4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fda6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f00a f90c 	bl	8019fc8 <SysTimeGetMcuTime>
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	4b3a      	ldr	r3, [pc, #232]	@ (800fe9c <ScheduleTx+0x150>)
 800fdb4:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800fdb8:	9200      	str	r2, [sp, #0]
 800fdba:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800fdbe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fdc2:	ca06      	ldmia	r2, {r1, r2}
 800fdc4:	f00a f861 	bl	8019e8a <SysTimeSub>
 800fdc8:	f107 0320 	add.w	r3, r7, #32
 800fdcc:	463a      	mov	r2, r7
 800fdce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdd2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fdd6:	4b31      	ldr	r3, [pc, #196]	@ (800fe9c <ScheduleTx+0x150>)
 800fdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdda:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fddc:	2300      	movs	r3, #0
 800fdde:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800fde2:	2301      	movs	r3, #1
 800fde4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fde6:	4b2e      	ldr	r3, [pc, #184]	@ (800fea0 <ScheduleTx+0x154>)
 800fde8:	881b      	ldrh	r3, [r3, #0]
 800fdea:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fdec:	4b2b      	ldr	r3, [pc, #172]	@ (800fe9c <ScheduleTx+0x150>)
 800fdee:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d104      	bne.n	800fe00 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe00:	4b26      	ldr	r3, [pc, #152]	@ (800fe9c <ScheduleTx+0x150>)
 800fe02:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fe06:	f107 0114 	add.w	r1, r7, #20
 800fe0a:	4b26      	ldr	r3, [pc, #152]	@ (800fea4 <ScheduleTx+0x158>)
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	4b26      	ldr	r3, [pc, #152]	@ (800fea8 <ScheduleTx+0x15c>)
 800fe10:	4a26      	ldr	r2, [pc, #152]	@ (800feac <ScheduleTx+0x160>)
 800fe12:	f004 fb5e 	bl	80144d2 <RegionNextChannel>
 800fe16:	4603      	mov	r3, r0
 800fe18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800fe1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d022      	beq.n	800fe6a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fe24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe28:	2b0b      	cmp	r3, #11
 800fe2a:	d11b      	bne.n	800fe64 <ScheduleTx+0x118>
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d018      	beq.n	800fe64 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fe32:	4b1b      	ldr	r3, [pc, #108]	@ (800fea0 <ScheduleTx+0x154>)
 800fe34:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d011      	beq.n	800fe60 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fe3c:	4b18      	ldr	r3, [pc, #96]	@ (800fea0 <ScheduleTx+0x154>)
 800fe3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe42:	f043 0320 	orr.w	r3, r3, #32
 800fe46:	4a16      	ldr	r2, [pc, #88]	@ (800fea0 <ScheduleTx+0x154>)
 800fe48:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fe4c:	4b14      	ldr	r3, [pc, #80]	@ (800fea0 <ScheduleTx+0x154>)
 800fe4e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800fe52:	4619      	mov	r1, r3
 800fe54:	4816      	ldr	r0, [pc, #88]	@ (800feb0 <ScheduleTx+0x164>)
 800fe56:	f00a fe55 	bl	801ab04 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fe5a:	4815      	ldr	r0, [pc, #84]	@ (800feb0 <ScheduleTx+0x164>)
 800fe5c:	f00a fd74 	bl	801a948 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e017      	b.n	800fe94 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fe64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe68:	e014      	b.n	800fe94 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fe6a:	f7ff fea1 	bl	800fbb0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fe6e:	f7ff ff05 	bl	800fc7c <VerifyTxFrame>
 800fe72:	4603      	mov	r3, r0
 800fe74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fe78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <ScheduleTx+0x13a>
    {
        return status;
 800fe80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe84:	e006      	b.n	800fe94 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fe86:	4b06      	ldr	r3, [pc, #24]	@ (800fea0 <ScheduleTx+0x154>)
 800fe88:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 fb3b 	bl	8010508 <SendFrameOnChannel>
 800fe92:	4603      	mov	r3, r0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3738      	adds	r7, #56	@ 0x38
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	20000b90 	.word	0x20000b90
 800fea0:	20000670 	.word	0x20000670
 800fea4:	20000bc0 	.word	0x20000bc0
 800fea8:	20000b08 	.word	0x20000b08
 800feac:	20000a8f 	.word	0x20000a8f
 800feb0:	200009d8 	.word	0x200009d8

0800feb4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	4603      	mov	r3, r0
 800febc:	460a      	mov	r2, r1
 800febe:	71fb      	strb	r3, [r7, #7]
 800fec0:	4613      	mov	r3, r2
 800fec2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fec4:	2312      	movs	r3, #18
 800fec6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fec8:	2300      	movs	r3, #0
 800feca:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fecc:	4b22      	ldr	r3, [pc, #136]	@ (800ff58 <SecureFrame+0xa4>)
 800fece:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d002      	beq.n	800fedc <SecureFrame+0x28>
 800fed6:	2b04      	cmp	r3, #4
 800fed8:	d011      	beq.n	800fefe <SecureFrame+0x4a>
 800feda:	e036      	b.n	800ff4a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fedc:	481f      	ldr	r0, [pc, #124]	@ (800ff5c <SecureFrame+0xa8>)
 800fede:	f003 fc07 	bl	80136f0 <LoRaMacCryptoPrepareJoinRequest>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800feec:	2311      	movs	r3, #17
 800feee:	e02f      	b.n	800ff50 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fef0:	4b19      	ldr	r3, [pc, #100]	@ (800ff58 <SecureFrame+0xa4>)
 800fef2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fef6:	461a      	mov	r2, r3
 800fef8:	4b17      	ldr	r3, [pc, #92]	@ (800ff58 <SecureFrame+0xa4>)
 800fefa:	801a      	strh	r2, [r3, #0]
            break;
 800fefc:	e027      	b.n	800ff4e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fefe:	f107 0308 	add.w	r3, r7, #8
 800ff02:	4618      	mov	r0, r3
 800ff04:	f003 fb38 	bl	8013578 <LoRaMacCryptoGetFCntUp>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff0e:	2312      	movs	r3, #18
 800ff10:	e01e      	b.n	800ff50 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800ff12:	4b11      	ldr	r3, [pc, #68]	@ (800ff58 <SecureFrame+0xa4>)
 800ff14:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d002      	beq.n	800ff22 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ff22:	68b8      	ldr	r0, [r7, #8]
 800ff24:	79ba      	ldrb	r2, [r7, #6]
 800ff26:	79f9      	ldrb	r1, [r7, #7]
 800ff28:	4b0c      	ldr	r3, [pc, #48]	@ (800ff5c <SecureFrame+0xa8>)
 800ff2a:	f003 fcf3 	bl	8013914 <LoRaMacCryptoSecureMessage>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff32:	7bfb      	ldrb	r3, [r7, #15]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff38:	2311      	movs	r3, #17
 800ff3a:	e009      	b.n	800ff50 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ff3c:	4b06      	ldr	r3, [pc, #24]	@ (800ff58 <SecureFrame+0xa4>)
 800ff3e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ff42:	461a      	mov	r2, r3
 800ff44:	4b04      	ldr	r3, [pc, #16]	@ (800ff58 <SecureFrame+0xa4>)
 800ff46:	801a      	strh	r2, [r3, #0]
            break;
 800ff48:	e001      	b.n	800ff4e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff4a:	2303      	movs	r3, #3
 800ff4c:	e000      	b.n	800ff50 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20000670 	.word	0x20000670
 800ff5c:	20000778 	.word	0x20000778

0800ff60 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ff60:	b480      	push	{r7}
 800ff62:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ff64:	4b09      	ldr	r3, [pc, #36]	@ (800ff8c <CalculateBackOff+0x2c>)
 800ff66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10a      	bne.n	800ff82 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ff6c:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <CalculateBackOff+0x2c>)
 800ff6e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800ff72:	3b01      	subs	r3, #1
 800ff74:	4a06      	ldr	r2, [pc, #24]	@ (800ff90 <CalculateBackOff+0x30>)
 800ff76:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 800ff7a:	fb02 f303 	mul.w	r3, r2, r3
 800ff7e:	4a03      	ldr	r2, [pc, #12]	@ (800ff8c <CalculateBackOff+0x2c>)
 800ff80:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800ff82:	bf00      	nop
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bc80      	pop	{r7}
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	20000b90 	.word	0x20000b90
 800ff90:	20000670 	.word	0x20000670

0800ff94 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	7139      	strb	r1, [r7, #4]
 800ff9e:	71fb      	strb	r3, [r7, #7]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800ffa4:	79fb      	ldrb	r3, [r7, #7]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d002      	beq.n	800ffb0 <RemoveMacCommands+0x1c>
 800ffaa:	79fb      	ldrb	r3, [r7, #7]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d10d      	bne.n	800ffcc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800ffb0:	79bb      	ldrb	r3, [r7, #6]
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d108      	bne.n	800ffc8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800ffb6:	793b      	ldrb	r3, [r7, #4]
 800ffb8:	f003 0320 	and.w	r3, r3, #32
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d004      	beq.n	800ffcc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800ffc2:	f002 fc6f 	bl	80128a4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800ffc6:	e001      	b.n	800ffcc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800ffc8:	f002 fc6c 	bl	80128a4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800ffcc:	bf00      	nop
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 800ffd4:	b5b0      	push	{r4, r5, r7, lr}
 800ffd6:	b090      	sub	sp, #64	@ 0x40
 800ffd8:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800ffda:	4b70      	ldr	r3, [pc, #448]	@ (801019c <ResetMacParameters+0x1c8>)
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800ffe2:	4b6e      	ldr	r3, [pc, #440]	@ (801019c <ResetMacParameters+0x1c8>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800ffe8:	4b6d      	ldr	r3, [pc, #436]	@ (80101a0 <ResetMacParameters+0x1cc>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800fff0:	4b6b      	ldr	r3, [pc, #428]	@ (80101a0 <ResetMacParameters+0x1cc>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800fff8:	4b69      	ldr	r3, [pc, #420]	@ (80101a0 <ResetMacParameters+0x1cc>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010000:	4b66      	ldr	r3, [pc, #408]	@ (801019c <ResetMacParameters+0x1c8>)
 8010002:	2200      	movs	r2, #0
 8010004:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010008:	4b64      	ldr	r3, [pc, #400]	@ (801019c <ResetMacParameters+0x1c8>)
 801000a:	2201      	movs	r2, #1
 801000c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010010:	4b62      	ldr	r3, [pc, #392]	@ (801019c <ResetMacParameters+0x1c8>)
 8010012:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8010016:	4b61      	ldr	r3, [pc, #388]	@ (801019c <ResetMacParameters+0x1c8>)
 8010018:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801001c:	4b5f      	ldr	r3, [pc, #380]	@ (801019c <ResetMacParameters+0x1c8>)
 801001e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8010022:	4b5e      	ldr	r3, [pc, #376]	@ (801019c <ResetMacParameters+0x1c8>)
 8010024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010028:	4b5c      	ldr	r3, [pc, #368]	@ (801019c <ResetMacParameters+0x1c8>)
 801002a:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 801002e:	4b5b      	ldr	r3, [pc, #364]	@ (801019c <ResetMacParameters+0x1c8>)
 8010030:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010034:	4b59      	ldr	r3, [pc, #356]	@ (801019c <ResetMacParameters+0x1c8>)
 8010036:	4a59      	ldr	r2, [pc, #356]	@ (801019c <ResetMacParameters+0x1c8>)
 8010038:	3364      	adds	r3, #100	@ 0x64
 801003a:	32a8      	adds	r2, #168	@ 0xa8
 801003c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010040:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010044:	4b55      	ldr	r3, [pc, #340]	@ (801019c <ResetMacParameters+0x1c8>)
 8010046:	4a55      	ldr	r2, [pc, #340]	@ (801019c <ResetMacParameters+0x1c8>)
 8010048:	336c      	adds	r3, #108	@ 0x6c
 801004a:	32b0      	adds	r2, #176	@ 0xb0
 801004c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010050:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010054:	4b51      	ldr	r3, [pc, #324]	@ (801019c <ResetMacParameters+0x1c8>)
 8010056:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 801005a:	4b50      	ldr	r3, [pc, #320]	@ (801019c <ResetMacParameters+0x1c8>)
 801005c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010060:	4b4e      	ldr	r3, [pc, #312]	@ (801019c <ResetMacParameters+0x1c8>)
 8010062:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8010066:	4b4d      	ldr	r3, [pc, #308]	@ (801019c <ResetMacParameters+0x1c8>)
 8010068:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801006c:	4b4b      	ldr	r3, [pc, #300]	@ (801019c <ResetMacParameters+0x1c8>)
 801006e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010072:	4a4a      	ldr	r2, [pc, #296]	@ (801019c <ResetMacParameters+0x1c8>)
 8010074:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010076:	4b49      	ldr	r3, [pc, #292]	@ (801019c <ResetMacParameters+0x1c8>)
 8010078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801007c:	4a47      	ldr	r2, [pc, #284]	@ (801019c <ResetMacParameters+0x1c8>)
 801007e:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010080:	4b47      	ldr	r3, [pc, #284]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010082:	2200      	movs	r2, #0
 8010084:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010088:	4b44      	ldr	r3, [pc, #272]	@ (801019c <ResetMacParameters+0x1c8>)
 801008a:	2200      	movs	r2, #0
 801008c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010090:	4b42      	ldr	r3, [pc, #264]	@ (801019c <ResetMacParameters+0x1c8>)
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010098:	4b40      	ldr	r3, [pc, #256]	@ (801019c <ResetMacParameters+0x1c8>)
 801009a:	2200      	movs	r2, #0
 801009c:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80100a0:	2301      	movs	r3, #1
 80100a2:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80100a4:	4b3f      	ldr	r3, [pc, #252]	@ (80101a4 <ResetMacParameters+0x1d0>)
 80100a6:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80100a8:	4b3f      	ldr	r3, [pc, #252]	@ (80101a8 <ResetMacParameters+0x1d4>)
 80100aa:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80100ac:	4b3f      	ldr	r3, [pc, #252]	@ (80101ac <ResetMacParameters+0x1d8>)
 80100ae:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80100b0:	4b3a      	ldr	r3, [pc, #232]	@ (801019c <ResetMacParameters+0x1c8>)
 80100b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80100b6:	1d3a      	adds	r2, r7, #4
 80100b8:	4611      	mov	r1, r2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f004 f8f5 	bl	80142aa <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80100c0:	4b37      	ldr	r3, [pc, #220]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80100c8:	4b35      	ldr	r3, [pc, #212]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100ca:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80100ce:	4b34      	ldr	r3, [pc, #208]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100d0:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80100d4:	4b31      	ldr	r3, [pc, #196]	@ (801019c <ResetMacParameters+0x1c8>)
 80100d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100d8:	4a31      	ldr	r2, [pc, #196]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100da:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80100de:	4b2f      	ldr	r3, [pc, #188]	@ (801019c <ResetMacParameters+0x1c8>)
 80100e0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80100e4:	4b2e      	ldr	r3, [pc, #184]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100e6:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80100ea:	4b2c      	ldr	r3, [pc, #176]	@ (801019c <ResetMacParameters+0x1c8>)
 80100ec:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80100f0:	4b2b      	ldr	r3, [pc, #172]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100f2:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80100f6:	4b2a      	ldr	r3, [pc, #168]	@ (80101a0 <ResetMacParameters+0x1cc>)
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80100fe:	4b28      	ldr	r3, [pc, #160]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010100:	2201      	movs	r2, #1
 8010102:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010106:	4b25      	ldr	r3, [pc, #148]	@ (801019c <ResetMacParameters+0x1c8>)
 8010108:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 801010c:	4b24      	ldr	r3, [pc, #144]	@ (80101a0 <ResetMacParameters+0x1cc>)
 801010e:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010112:	4a23      	ldr	r2, [pc, #140]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010114:	4b22      	ldr	r3, [pc, #136]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010116:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801011a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 801011e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010122:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010126:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801012a:	4b1d      	ldr	r3, [pc, #116]	@ (80101a0 <ResetMacParameters+0x1cc>)
 801012c:	2201      	movs	r2, #1
 801012e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010132:	4b1b      	ldr	r3, [pc, #108]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010134:	2202      	movs	r2, #2
 8010136:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801013a:	2300      	movs	r3, #0
 801013c:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010142:	4b17      	ldr	r3, [pc, #92]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010144:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010148:	2b00      	cmp	r3, #0
 801014a:	d009      	beq.n	8010160 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801014c:	4b14      	ldr	r3, [pc, #80]	@ (80101a0 <ResetMacParameters+0x1cc>)
 801014e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010156:	4b12      	ldr	r3, [pc, #72]	@ (80101a0 <ResetMacParameters+0x1cc>)
 8010158:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010160:	4b13      	ldr	r3, [pc, #76]	@ (80101b0 <ResetMacParameters+0x1dc>)
 8010162:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010164:	4b13      	ldr	r3, [pc, #76]	@ (80101b4 <ResetMacParameters+0x1e0>)
 8010166:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010168:	4b13      	ldr	r3, [pc, #76]	@ (80101b8 <ResetMacParameters+0x1e4>)
 801016a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801016c:	4b13      	ldr	r3, [pc, #76]	@ (80101bc <ResetMacParameters+0x1e8>)
 801016e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010170:	4b13      	ldr	r3, [pc, #76]	@ (80101c0 <ResetMacParameters+0x1ec>)
 8010172:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010174:	4b13      	ldr	r3, [pc, #76]	@ (80101c4 <ResetMacParameters+0x1f0>)
 8010176:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010178:	4b13      	ldr	r3, [pc, #76]	@ (80101c8 <ResetMacParameters+0x1f4>)
 801017a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801017c:	4b13      	ldr	r3, [pc, #76]	@ (80101cc <ResetMacParameters+0x1f8>)
 801017e:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010180:	4b13      	ldr	r3, [pc, #76]	@ (80101d0 <ResetMacParameters+0x1fc>)
 8010182:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010184:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010188:	f107 0314 	add.w	r3, r7, #20
 801018c:	4a11      	ldr	r2, [pc, #68]	@ (80101d4 <ResetMacParameters+0x200>)
 801018e:	4618      	mov	r0, r3
 8010190:	f002 f8cf 	bl	8012332 <LoRaMacClassBInit>
}
 8010194:	bf00      	nop
 8010196:	3740      	adds	r7, #64	@ 0x40
 8010198:	46bd      	mov	sp, r7
 801019a:	bdb0      	pop	{r4, r5, r7, pc}
 801019c:	20000b90 	.word	0x20000b90
 80101a0:	20000670 	.word	0x20000670
 80101a4:	20000d74 	.word	0x20000d74
 80101a8:	20000d78 	.word	0x20000d78
 80101ac:	20001688 	.word	0x20001688
 80101b0:	20000adc 	.word	0x20000adc
 80101b4:	20000a94 	.word	0x20000a94
 80101b8:	20000ac8 	.word	0x20000ac8
 80101bc:	20000b05 	.word	0x20000b05
 80101c0:	20000c64 	.word	0x20000c64
 80101c4:	20000bd0 	.word	0x20000bd0
 80101c8:	20000bd4 	.word	0x20000bd4
 80101cc:	20000c68 	.word	0x20000c68
 80101d0:	20000cac 	.word	0x20000cac
 80101d4:	200010f4 	.word	0x200010f4

080101d8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f00a fc1e 	bl	801aa24 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80101e8:	4b11      	ldr	r3, [pc, #68]	@ (8010230 <RxWindowSetup+0x58>)
 80101ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ec:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80101ee:	4b11      	ldr	r3, [pc, #68]	@ (8010234 <RxWindowSetup+0x5c>)
 80101f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80101f4:	4a10      	ldr	r2, [pc, #64]	@ (8010238 <RxWindowSetup+0x60>)
 80101f6:	6839      	ldr	r1, [r7, #0]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f004 f8be 	bl	801437a <RegionRxConfig>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d010      	beq.n	8010226 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010204:	4b0d      	ldr	r3, [pc, #52]	@ (801023c <RxWindowSetup+0x64>)
 8010206:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 801020a:	4b0c      	ldr	r3, [pc, #48]	@ (801023c <RxWindowSetup+0x64>)
 801020c:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010210:	4b07      	ldr	r3, [pc, #28]	@ (8010230 <RxWindowSetup+0x58>)
 8010212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010214:	4a07      	ldr	r2, [pc, #28]	@ (8010234 <RxWindowSetup+0x5c>)
 8010216:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010218:	4610      	mov	r0, r2
 801021a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	7cda      	ldrb	r2, [r3, #19]
 8010220:	4b06      	ldr	r3, [pc, #24]	@ (801023c <RxWindowSetup+0x64>)
 8010222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010226:	bf00      	nop
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	0801c298 	.word	0x0801c298
 8010234:	20000b90 	.word	0x20000b90
 8010238:	20000a98 	.word	0x20000a98
 801023c:	20000670 	.word	0x20000670

08010240 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010240:	b590      	push	{r4, r7, lr}
 8010242:	b083      	sub	sp, #12
 8010244:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010246:	4b1e      	ldr	r3, [pc, #120]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 8010248:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801024c:	4b1c      	ldr	r3, [pc, #112]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 801024e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010252:	b259      	sxtb	r1, r3
 8010254:	4b1a      	ldr	r3, [pc, #104]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 8010256:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801025a:	4b19      	ldr	r3, [pc, #100]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 801025c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801025e:	4c19      	ldr	r4, [pc, #100]	@ (80102c4 <OpenContinuousRxCWindow+0x84>)
 8010260:	9400      	str	r4, [sp, #0]
 8010262:	f004 f870 	bl	8014346 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010266:	4b18      	ldr	r3, [pc, #96]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 8010268:	2202      	movs	r2, #2
 801026a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801026e:	4b14      	ldr	r3, [pc, #80]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 8010270:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010274:	4b14      	ldr	r3, [pc, #80]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 8010276:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801027a:	4b13      	ldr	r3, [pc, #76]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 801027c:	2201      	movs	r2, #1
 801027e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010282:	4b0f      	ldr	r3, [pc, #60]	@ (80102c0 <OpenContinuousRxCWindow+0x80>)
 8010284:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010288:	4a10      	ldr	r2, [pc, #64]	@ (80102cc <OpenContinuousRxCWindow+0x8c>)
 801028a:	490e      	ldr	r1, [pc, #56]	@ (80102c4 <OpenContinuousRxCWindow+0x84>)
 801028c:	4618      	mov	r0, r3
 801028e:	f004 f874 	bl	801437a <RegionRxConfig>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d00f      	beq.n	80102b8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010298:	4b0b      	ldr	r3, [pc, #44]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 801029a:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 801029e:	4b0a      	ldr	r3, [pc, #40]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 80102a0:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80102a4:	4b0a      	ldr	r3, [pc, #40]	@ (80102d0 <OpenContinuousRxCWindow+0x90>)
 80102a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102a8:	2000      	movs	r0, #0
 80102aa:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102ac:	4b06      	ldr	r3, [pc, #24]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 80102ae:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 80102b2:	4b05      	ldr	r3, [pc, #20]	@ (80102c8 <OpenContinuousRxCWindow+0x88>)
 80102b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80102b8:	bf00      	nop
 80102ba:	3704      	adds	r7, #4
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd90      	pop	{r4, r7, pc}
 80102c0:	20000b90 	.word	0x20000b90
 80102c4:	20000a58 	.word	0x20000a58
 80102c8:	20000670 	.word	0x20000670
 80102cc:	20000a98 	.word	0x20000a98
 80102d0:	0801c298 	.word	0x0801c298

080102d4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b088      	sub	sp, #32
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	603b      	str	r3, [r7, #0]
 80102e0:	4613      	mov	r3, r2
 80102e2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80102e4:	4b81      	ldr	r3, [pc, #516]	@ (80104ec <PrepareFrame+0x218>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80102ea:	4b80      	ldr	r3, [pc, #512]	@ (80104ec <PrepareFrame+0x218>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010304:	2300      	movs	r3, #0
 8010306:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010308:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801030a:	461a      	mov	r2, r3
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	4878      	ldr	r0, [pc, #480]	@ (80104f0 <PrepareFrame+0x21c>)
 8010310:	f006 fa43 	bl	801679a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010314:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010316:	b2da      	uxtb	r2, r3
 8010318:	4b74      	ldr	r3, [pc, #464]	@ (80104ec <PrepareFrame+0x218>)
 801031a:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	781a      	ldrb	r2, [r3, #0]
 8010322:	4b72      	ldr	r3, [pc, #456]	@ (80104ec <PrepareFrame+0x218>)
 8010324:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b07      	cmp	r3, #7
 8010332:	f000 80b9 	beq.w	80104a8 <PrepareFrame+0x1d4>
 8010336:	2b07      	cmp	r3, #7
 8010338:	f300 80ce 	bgt.w	80104d8 <PrepareFrame+0x204>
 801033c:	2b02      	cmp	r3, #2
 801033e:	d006      	beq.n	801034e <PrepareFrame+0x7a>
 8010340:	2b04      	cmp	r3, #4
 8010342:	f040 80c9 	bne.w	80104d8 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010346:	4b69      	ldr	r3, [pc, #420]	@ (80104ec <PrepareFrame+0x218>)
 8010348:	2201      	movs	r2, #1
 801034a:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801034e:	4b67      	ldr	r3, [pc, #412]	@ (80104ec <PrepareFrame+0x218>)
 8010350:	2204      	movs	r2, #4
 8010352:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010356:	4b65      	ldr	r3, [pc, #404]	@ (80104ec <PrepareFrame+0x218>)
 8010358:	4a66      	ldr	r2, [pc, #408]	@ (80104f4 <PrepareFrame+0x220>)
 801035a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801035e:	4b63      	ldr	r3, [pc, #396]	@ (80104ec <PrepareFrame+0x218>)
 8010360:	22ff      	movs	r2, #255	@ 0xff
 8010362:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	781a      	ldrb	r2, [r3, #0]
 801036a:	4b60      	ldr	r3, [pc, #384]	@ (80104ec <PrepareFrame+0x218>)
 801036c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010370:	4a5e      	ldr	r2, [pc, #376]	@ (80104ec <PrepareFrame+0x218>)
 8010372:	79fb      	ldrb	r3, [r7, #7]
 8010374:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010378:	4b5f      	ldr	r3, [pc, #380]	@ (80104f8 <PrepareFrame+0x224>)
 801037a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801037e:	4a5b      	ldr	r2, [pc, #364]	@ (80104ec <PrepareFrame+0x218>)
 8010380:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	781a      	ldrb	r2, [r3, #0]
 8010388:	4b58      	ldr	r3, [pc, #352]	@ (80104ec <PrepareFrame+0x218>)
 801038a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801038e:	4b57      	ldr	r3, [pc, #348]	@ (80104ec <PrepareFrame+0x218>)
 8010390:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010394:	4b55      	ldr	r3, [pc, #340]	@ (80104ec <PrepareFrame+0x218>)
 8010396:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801039a:	4b54      	ldr	r3, [pc, #336]	@ (80104ec <PrepareFrame+0x218>)
 801039c:	4a54      	ldr	r2, [pc, #336]	@ (80104f0 <PrepareFrame+0x21c>)
 801039e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103a2:	f107 0318 	add.w	r3, r7, #24
 80103a6:	4618      	mov	r0, r3
 80103a8:	f003 f8e6 	bl	8013578 <LoRaMacCryptoGetFCntUp>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103b2:	2312      	movs	r3, #18
 80103b4:	e096      	b.n	80104e4 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	4b4c      	ldr	r3, [pc, #304]	@ (80104ec <PrepareFrame+0x218>)
 80103bc:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 80103c0:	4b4a      	ldr	r3, [pc, #296]	@ (80104ec <PrepareFrame+0x218>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80103c8:	4b48      	ldr	r3, [pc, #288]	@ (80104ec <PrepareFrame+0x218>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	4a46      	ldr	r2, [pc, #280]	@ (80104ec <PrepareFrame+0x218>)
 80103d4:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80103d8:	f107 0314 	add.w	r3, r7, #20
 80103dc:	4618      	mov	r0, r3
 80103de:	f002 fa83 	bl	80128e8 <LoRaMacCommandsGetSizeSerializedCmds>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d001      	beq.n	80103ec <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103e8:	2313      	movs	r3, #19
 80103ea:	e07b      	b.n	80104e4 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d074      	beq.n	80104dc <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80103f2:	4b41      	ldr	r3, [pc, #260]	@ (80104f8 <PrepareFrame+0x224>)
 80103f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fe fd4d 	bl	800ee98 <GetMaxAppPayloadWithoutFOptsLength>
 80103fe:	4603      	mov	r3, r0
 8010400:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010402:	4b3a      	ldr	r3, [pc, #232]	@ (80104ec <PrepareFrame+0x218>)
 8010404:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01d      	beq.n	8010448 <PrepareFrame+0x174>
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b0f      	cmp	r3, #15
 8010410:	d81a      	bhi.n	8010448 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010412:	f107 0314 	add.w	r3, r7, #20
 8010416:	4a39      	ldr	r2, [pc, #228]	@ (80104fc <PrepareFrame+0x228>)
 8010418:	4619      	mov	r1, r3
 801041a:	200f      	movs	r0, #15
 801041c:	f002 fa7a 	bl	8012914 <LoRaMacCommandsSerializeCmds>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010426:	2313      	movs	r3, #19
 8010428:	e05c      	b.n	80104e4 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	f003 030f 	and.w	r3, r3, #15
 8010430:	b2d9      	uxtb	r1, r3
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	7813      	ldrb	r3, [r2, #0]
 8010436:	f361 0303 	bfi	r3, r1, #0, #4
 801043a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	781a      	ldrb	r2, [r3, #0]
 8010440:	4b2a      	ldr	r3, [pc, #168]	@ (80104ec <PrepareFrame+0x218>)
 8010442:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010446:	e049      	b.n	80104dc <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010448:	4b28      	ldr	r3, [pc, #160]	@ (80104ec <PrepareFrame+0x218>)
 801044a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801044e:	2b00      	cmp	r3, #0
 8010450:	d010      	beq.n	8010474 <PrepareFrame+0x1a0>
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	2b0f      	cmp	r3, #15
 8010456:	d90d      	bls.n	8010474 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010458:	7ffb      	ldrb	r3, [r7, #31]
 801045a:	f107 0114 	add.w	r1, r7, #20
 801045e:	4a28      	ldr	r2, [pc, #160]	@ (8010500 <PrepareFrame+0x22c>)
 8010460:	4618      	mov	r0, r3
 8010462:	f002 fa57 	bl	8012914 <LoRaMacCommandsSerializeCmds>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801046c:	2313      	movs	r3, #19
 801046e:	e039      	b.n	80104e4 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010470:	230a      	movs	r3, #10
 8010472:	e037      	b.n	80104e4 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010474:	7ffb      	ldrb	r3, [r7, #31]
 8010476:	f107 0114 	add.w	r1, r7, #20
 801047a:	4a21      	ldr	r2, [pc, #132]	@ (8010500 <PrepareFrame+0x22c>)
 801047c:	4618      	mov	r0, r3
 801047e:	f002 fa49 	bl	8012914 <LoRaMacCommandsSerializeCmds>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010488:	2313      	movs	r3, #19
 801048a:	e02b      	b.n	80104e4 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801048c:	4b17      	ldr	r3, [pc, #92]	@ (80104ec <PrepareFrame+0x218>)
 801048e:	2200      	movs	r2, #0
 8010490:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010494:	4b15      	ldr	r3, [pc, #84]	@ (80104ec <PrepareFrame+0x218>)
 8010496:	4a1a      	ldr	r2, [pc, #104]	@ (8010500 <PrepareFrame+0x22c>)
 8010498:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	b2da      	uxtb	r2, r3
 80104a0:	4b12      	ldr	r3, [pc, #72]	@ (80104ec <PrepareFrame+0x218>)
 80104a2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80104a6:	e019      	b.n	80104dc <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d018      	beq.n	80104e0 <PrepareFrame+0x20c>
 80104ae:	4b0f      	ldr	r3, [pc, #60]	@ (80104ec <PrepareFrame+0x218>)
 80104b0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d013      	beq.n	80104e0 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80104b8:	4812      	ldr	r0, [pc, #72]	@ (8010504 <PrepareFrame+0x230>)
 80104ba:	4b0c      	ldr	r3, [pc, #48]	@ (80104ec <PrepareFrame+0x218>)
 80104bc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80104c0:	461a      	mov	r2, r3
 80104c2:	6839      	ldr	r1, [r7, #0]
 80104c4:	f006 f969 	bl	801679a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80104c8:	4b08      	ldr	r3, [pc, #32]	@ (80104ec <PrepareFrame+0x218>)
 80104ca:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80104ce:	3301      	adds	r3, #1
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <PrepareFrame+0x218>)
 80104d4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80104d6:	e003      	b.n	80104e0 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104d8:	2302      	movs	r3, #2
 80104da:	e003      	b.n	80104e4 <PrepareFrame+0x210>
            break;
 80104dc:	bf00      	nop
 80104de:	e000      	b.n	80104e2 <PrepareFrame+0x20e>
            break;
 80104e0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3720      	adds	r7, #32
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	20000670 	.word	0x20000670
 80104f0:	200007a8 	.word	0x200007a8
 80104f4:	20000672 	.word	0x20000672
 80104f8:	20000b90 	.word	0x20000b90
 80104fc:	20000788 	.word	0x20000788
 8010500:	20000b10 	.word	0x20000b10
 8010504:	20000673 	.word	0x20000673

08010508 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08a      	sub	sp, #40	@ 0x28
 801050c:	af00      	add	r7, sp, #0
 801050e:	4603      	mov	r3, r0
 8010510:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010512:	2303      	movs	r3, #3
 8010514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010520:	4b4a      	ldr	r3, [pc, #296]	@ (801064c <SendFrameOnChannel+0x144>)
 8010522:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010526:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010528:	4b48      	ldr	r3, [pc, #288]	@ (801064c <SendFrameOnChannel+0x144>)
 801052a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801052e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010530:	4b46      	ldr	r3, [pc, #280]	@ (801064c <SendFrameOnChannel+0x144>)
 8010532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010534:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010536:	4b45      	ldr	r3, [pc, #276]	@ (801064c <SendFrameOnChannel+0x144>)
 8010538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801053a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801053c:	4b44      	ldr	r3, [pc, #272]	@ (8010650 <SendFrameOnChannel+0x148>)
 801053e:	881b      	ldrh	r3, [r3, #0]
 8010540:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010542:	4b42      	ldr	r3, [pc, #264]	@ (801064c <SendFrameOnChannel+0x144>)
 8010544:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010548:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801054a:	4b40      	ldr	r3, [pc, #256]	@ (801064c <SendFrameOnChannel+0x144>)
 801054c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010550:	f107 020f 	add.w	r2, r7, #15
 8010554:	f107 0110 	add.w	r1, r7, #16
 8010558:	4b3e      	ldr	r3, [pc, #248]	@ (8010654 <SendFrameOnChannel+0x14c>)
 801055a:	f003 ff23 	bl	80143a4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801055e:	4b3c      	ldr	r3, [pc, #240]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010566:	4b39      	ldr	r3, [pc, #228]	@ (801064c <SendFrameOnChannel+0x144>)
 8010568:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801056c:	b2da      	uxtb	r2, r3
 801056e:	4b38      	ldr	r3, [pc, #224]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010570:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010574:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010578:	4b35      	ldr	r3, [pc, #212]	@ (8010650 <SendFrameOnChannel+0x148>)
 801057a:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 801057e:	79fb      	ldrb	r3, [r7, #7]
 8010580:	4a33      	ldr	r2, [pc, #204]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010582:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010586:	4b32      	ldr	r3, [pc, #200]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010588:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 801058c:	4a30      	ldr	r2, [pc, #192]	@ (8010650 <SendFrameOnChannel+0x148>)
 801058e:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010592:	4b2f      	ldr	r3, [pc, #188]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010594:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010598:	4a2d      	ldr	r2, [pc, #180]	@ (8010650 <SendFrameOnChannel+0x148>)
 801059a:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801059e:	f001 ff34 	bl	801240a <LoRaMacClassBIsBeaconModeActive>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105a8:	4b29      	ldr	r3, [pc, #164]	@ (8010650 <SendFrameOnChannel+0x148>)
 80105aa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80105ae:	4618      	mov	r0, r3
 80105b0:	f001 ff96 	bl	80124e0 <LoRaMacClassBIsUplinkCollision>
 80105b4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105b6:	6a3b      	ldr	r3, [r7, #32]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d001      	beq.n	80105c0 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80105bc:	2310      	movs	r3, #16
 80105be:	e040      	b.n	8010642 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105c0:	4b22      	ldr	r3, [pc, #136]	@ (801064c <SendFrameOnChannel+0x144>)
 80105c2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d101      	bne.n	80105ce <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80105ca:	f001 ff93 	bl	80124f4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80105ce:	f001 ff2d 	bl	801242c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80105d2:	4b1e      	ldr	r3, [pc, #120]	@ (801064c <SendFrameOnChannel+0x144>)
 80105d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	4a1d      	ldr	r2, [pc, #116]	@ (8010650 <SendFrameOnChannel+0x148>)
 80105dc:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 80105e0:	4611      	mov	r1, r2
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7ff fc66 	bl	800feb4 <SecureFrame>
 80105e8:	4603      	mov	r3, r0
 80105ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80105ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d002      	beq.n	80105fc <SendFrameOnChannel+0xf4>
    {
        return status;
 80105f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105fa:	e022      	b.n	8010642 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80105fc:	4b14      	ldr	r3, [pc, #80]	@ (8010650 <SendFrameOnChannel+0x148>)
 80105fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010602:	f043 0302 	orr.w	r3, r3, #2
 8010606:	4a12      	ldr	r2, [pc, #72]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010608:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 801060c:	4b10      	ldr	r3, [pc, #64]	@ (8010650 <SendFrameOnChannel+0x148>)
 801060e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010612:	3301      	adds	r3, #1
 8010614:	b2da      	uxtb	r2, r3
 8010616:	4b0e      	ldr	r3, [pc, #56]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010618:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801061c:	4b0c      	ldr	r3, [pc, #48]	@ (8010650 <SendFrameOnChannel+0x148>)
 801061e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010622:	4b0b      	ldr	r3, [pc, #44]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010624:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010628:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <SendFrameOnChannel+0x148>)
 801062a:	2200      	movs	r2, #0
 801062c:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010630:	4b09      	ldr	r3, [pc, #36]	@ (8010658 <SendFrameOnChannel+0x150>)
 8010632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010634:	4a06      	ldr	r2, [pc, #24]	@ (8010650 <SendFrameOnChannel+0x148>)
 8010636:	8812      	ldrh	r2, [r2, #0]
 8010638:	b2d2      	uxtb	r2, r2
 801063a:	4611      	mov	r1, r2
 801063c:	4807      	ldr	r0, [pc, #28]	@ (801065c <SendFrameOnChannel+0x154>)
 801063e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3728      	adds	r7, #40	@ 0x28
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	20000b90 	.word	0x20000b90
 8010650:	20000670 	.word	0x20000670
 8010654:	20000a90 	.word	0x20000a90
 8010658:	0801c298 	.word	0x0801c298
 801065c:	20000672 	.word	0x20000672

08010660 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	4603      	mov	r3, r0
 8010668:	6039      	str	r1, [r7, #0]
 801066a:	80fb      	strh	r3, [r7, #6]
 801066c:	4613      	mov	r3, r2
 801066e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010670:	4b09      	ldr	r3, [pc, #36]	@ (8010698 <SetTxContinuousWave+0x38>)
 8010672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010674:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010678:	88fa      	ldrh	r2, [r7, #6]
 801067a:	6838      	ldr	r0, [r7, #0]
 801067c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801067e:	4b07      	ldr	r3, [pc, #28]	@ (801069c <SetTxContinuousWave+0x3c>)
 8010680:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010684:	f043 0302 	orr.w	r3, r3, #2
 8010688:	4a04      	ldr	r2, [pc, #16]	@ (801069c <SetTxContinuousWave+0x3c>)
 801068a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	0801c298 	.word	0x0801c298
 801069c:	20000670 	.word	0x20000670

080106a0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80106aa:	4b3e      	ldr	r3, [pc, #248]	@ (80107a4 <RestoreNvmData+0x104>)
 80106ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d001      	beq.n	80106b8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e071      	b.n	801079c <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80106b8:	2124      	movs	r1, #36	@ 0x24
 80106ba:	483b      	ldr	r0, [pc, #236]	@ (80107a8 <RestoreNvmData+0x108>)
 80106bc:	f006 f8c2 	bl	8016844 <Crc32>
 80106c0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80106c2:	4b39      	ldr	r3, [pc, #228]	@ (80107a8 <RestoreNvmData+0x108>)
 80106c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d001      	beq.n	80106d0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80106cc:	2317      	movs	r3, #23
 80106ce:	e065      	b.n	801079c <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80106d0:	2114      	movs	r1, #20
 80106d2:	4836      	ldr	r0, [pc, #216]	@ (80107ac <RestoreNvmData+0x10c>)
 80106d4:	f006 f8b6 	bl	8016844 <Crc32>
 80106d8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80106da:	4b33      	ldr	r3, [pc, #204]	@ (80107a8 <RestoreNvmData+0x108>)
 80106dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d001      	beq.n	80106e8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80106e4:	2317      	movs	r3, #23
 80106e6:	e059      	b.n	801079c <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80106e8:	21e0      	movs	r1, #224	@ 0xe0
 80106ea:	4831      	ldr	r0, [pc, #196]	@ (80107b0 <RestoreNvmData+0x110>)
 80106ec:	f006 f8aa 	bl	8016844 <Crc32>
 80106f0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80106f2:	4b2d      	ldr	r3, [pc, #180]	@ (80107a8 <RestoreNvmData+0x108>)
 80106f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d001      	beq.n	8010702 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80106fe:	2317      	movs	r3, #23
 8010700:	e04c      	b.n	801079c <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010702:	21bc      	movs	r1, #188	@ 0xbc
 8010704:	482b      	ldr	r0, [pc, #172]	@ (80107b4 <RestoreNvmData+0x114>)
 8010706:	f006 f89d 	bl	8016844 <Crc32>
 801070a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801070c:	4b26      	ldr	r3, [pc, #152]	@ (80107a8 <RestoreNvmData+0x108>)
 801070e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d001      	beq.n	801071c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010718:	2317      	movs	r3, #23
 801071a:	e03f      	b.n	801079c <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801071c:	2100      	movs	r1, #0
 801071e:	4826      	ldr	r0, [pc, #152]	@ (80107b8 <RestoreNvmData+0x118>)
 8010720:	f006 f890 	bl	8016844 <Crc32>
 8010724:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010726:	4b20      	ldr	r3, [pc, #128]	@ (80107a8 <RestoreNvmData+0x108>)
 8010728:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	429a      	cmp	r2, r3
 8010730:	d001      	beq.n	8010736 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010732:	2317      	movs	r3, #23
 8010734:	e032      	b.n	801079c <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010736:	2114      	movs	r1, #20
 8010738:	4820      	ldr	r0, [pc, #128]	@ (80107bc <RestoreNvmData+0x11c>)
 801073a:	f006 f883 	bl	8016844 <Crc32>
 801073e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010740:	4b19      	ldr	r3, [pc, #100]	@ (80107a8 <RestoreNvmData+0x108>)
 8010742:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	429a      	cmp	r2, r3
 801074a:	d001      	beq.n	8010750 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801074c:	2317      	movs	r3, #23
 801074e:	e025      	b.n	801079c <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010750:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010754:	4914      	ldr	r1, [pc, #80]	@ (80107a8 <RestoreNvmData+0x108>)
 8010756:	481a      	ldr	r0, [pc, #104]	@ (80107c0 <RestoreNvmData+0x120>)
 8010758:	f006 f81f 	bl	801679a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801075c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010760:	2100      	movs	r1, #0
 8010762:	4811      	ldr	r0, [pc, #68]	@ (80107a8 <RestoreNvmData+0x108>)
 8010764:	f006 f854 	bl	8016810 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010768:	4b0e      	ldr	r3, [pc, #56]	@ (80107a4 <RestoreNvmData+0x104>)
 801076a:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801076e:	4b0d      	ldr	r3, [pc, #52]	@ (80107a4 <RestoreNvmData+0x104>)
 8010770:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010774:	4b12      	ldr	r3, [pc, #72]	@ (80107c0 <RestoreNvmData+0x120>)
 8010776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010778:	4a0a      	ldr	r2, [pc, #40]	@ (80107a4 <RestoreNvmData+0x104>)
 801077a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801077e:	4b10      	ldr	r3, [pc, #64]	@ (80107c0 <RestoreNvmData+0x120>)
 8010780:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010784:	4b07      	ldr	r3, [pc, #28]	@ (80107a4 <RestoreNvmData+0x104>)
 8010786:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801078a:	4b06      	ldr	r3, [pc, #24]	@ (80107a4 <RestoreNvmData+0x104>)
 801078c:	2201      	movs	r2, #1
 801078e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010792:	4b04      	ldr	r3, [pc, #16]	@ (80107a4 <RestoreNvmData+0x104>)
 8010794:	2202      	movs	r2, #2
 8010796:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	20000670 	.word	0x20000670
 80107a8:	2000110c 	.word	0x2000110c
 80107ac:	20001134 	.word	0x20001134
 80107b0:	2000114c 	.word	0x2000114c
 80107b4:	20001230 	.word	0x20001230
 80107b8:	200012f0 	.word	0x200012f0
 80107bc:	20001670 	.word	0x20001670
 80107c0:	20000b90 	.word	0x20000b90

080107c4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d002      	beq.n	80107da <DetermineFrameType+0x16>
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107da:	2303      	movs	r3, #3
 80107dc:	e03b      	b.n	8010856 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	7b1b      	ldrb	r3, [r3, #12]
 80107e2:	f003 030f 	and.w	r3, r3, #15
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d008      	beq.n	80107fe <DetermineFrameType+0x3a>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2200      	movs	r2, #0
 80107fa:	701a      	strb	r2, [r3, #0]
 80107fc:	e02a      	b.n	8010854 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010804:	2b00      	cmp	r3, #0
 8010806:	d103      	bne.n	8010810 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	2201      	movs	r2, #1
 801080c:	701a      	strb	r2, [r3, #0]
 801080e:	e021      	b.n	8010854 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	7b1b      	ldrb	r3, [r3, #12]
 8010814:	f003 030f 	and.w	r3, r3, #15
 8010818:	b2db      	uxtb	r3, r3
 801081a:	2b00      	cmp	r3, #0
 801081c:	d108      	bne.n	8010830 <DetermineFrameType+0x6c>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d103      	bne.n	8010830 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	2202      	movs	r2, #2
 801082c:	701a      	strb	r2, [r3, #0]
 801082e:	e011      	b.n	8010854 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	7b1b      	ldrb	r3, [r3, #12]
 8010834:	f003 030f 	and.w	r3, r3, #15
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d108      	bne.n	8010850 <DetermineFrameType+0x8c>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d003      	beq.n	8010850 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2203      	movs	r2, #3
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	e001      	b.n	8010854 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010850:	2318      	movs	r3, #24
 8010852:	e000      	b.n	8010856 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010854:	2300      	movs	r3, #0
}
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	bc80      	pop	{r7}
 801085e:	4770      	bx	lr

08010860 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	460a      	mov	r2, r1
 801086a:	71fb      	strb	r3, [r7, #7]
 801086c:	4613      	mov	r3, r2
 801086e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	79bb      	ldrb	r3, [r7, #6]
 8010874:	429a      	cmp	r2, r3
 8010876:	d301      	bcc.n	801087c <CheckRetrans+0x1c>
    {
        return true;
 8010878:	2301      	movs	r3, #1
 801087a:	e000      	b.n	801087e <CheckRetrans+0x1e>
    }
    return false;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	370c      	adds	r7, #12
 8010882:	46bd      	mov	sp, r7
 8010884:	bc80      	pop	{r7}
 8010886:	4770      	bx	lr

08010888 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801088c:	4b12      	ldr	r3, [pc, #72]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 801088e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010892:	4a12      	ldr	r2, [pc, #72]	@ (80108dc <CheckRetransUnconfirmedUplink+0x54>)
 8010894:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8010898:	4611      	mov	r1, r2
 801089a:	4618      	mov	r0, r3
 801089c:	f7ff ffe0 	bl	8010860 <CheckRetrans>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d001      	beq.n	80108aa <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80108a6:	2301      	movs	r3, #1
 80108a8:	e014      	b.n	80108d4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80108aa:	4b0b      	ldr	r3, [pc, #44]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 80108ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80108b0:	f003 0302 	and.w	r3, r3, #2
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00b      	beq.n	80108d2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80108ba:	4b07      	ldr	r3, [pc, #28]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 80108bc:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d004      	beq.n	80108ce <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80108c4:	4b04      	ldr	r3, [pc, #16]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 80108c6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	20000670 	.word	0x20000670
 80108dc:	20000b90 	.word	0x20000b90

080108e0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80108e4:	4b10      	ldr	r3, [pc, #64]	@ (8010928 <CheckRetransConfirmedUplink+0x48>)
 80108e6:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80108ea:	4a10      	ldr	r2, [pc, #64]	@ (801092c <CheckRetransConfirmedUplink+0x4c>)
 80108ec:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80108f0:	4611      	mov	r1, r2
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff ffb4 	bl	8010860 <CheckRetrans>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80108fe:	2301      	movs	r3, #1
 8010900:	e00f      	b.n	8010922 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010902:	4b09      	ldr	r3, [pc, #36]	@ (8010928 <CheckRetransConfirmedUplink+0x48>)
 8010904:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010908:	f003 0302 	and.w	r3, r3, #2
 801090c:	b2db      	uxtb	r3, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d006      	beq.n	8010920 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010912:	4b05      	ldr	r3, [pc, #20]	@ (8010928 <CheckRetransConfirmedUplink+0x48>)
 8010914:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801091c:	2301      	movs	r3, #1
 801091e:	e000      	b.n	8010922 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	20000670 	.word	0x20000670
 801092c:	20000b90 	.word	0x20000b90

08010930 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801093e:	d002      	beq.n	8010946 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3301      	adds	r3, #1
 8010944:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010946:	687b      	ldr	r3, [r7, #4]
}
 8010948:	4618      	mov	r0, r3
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	bc80      	pop	{r7}
 8010950:	4770      	bx	lr
	...

08010954 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010958:	4b1a      	ldr	r3, [pc, #104]	@ (80109c4 <StopRetransmission+0x70>)
 801095a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801095e:	f003 0302 	and.w	r3, r3, #2
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d009      	beq.n	801097c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010968:	4b16      	ldr	r3, [pc, #88]	@ (80109c4 <StopRetransmission+0x70>)
 801096a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801096e:	2b00      	cmp	r3, #0
 8010970:	d011      	beq.n	8010996 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010972:	4b14      	ldr	r3, [pc, #80]	@ (80109c4 <StopRetransmission+0x70>)
 8010974:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010978:	2b01      	cmp	r3, #1
 801097a:	d00c      	beq.n	8010996 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801097c:	4b12      	ldr	r3, [pc, #72]	@ (80109c8 <StopRetransmission+0x74>)
 801097e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010982:	2b00      	cmp	r3, #0
 8010984:	d007      	beq.n	8010996 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010986:	4b10      	ldr	r3, [pc, #64]	@ (80109c8 <StopRetransmission+0x74>)
 8010988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801098a:	4618      	mov	r0, r3
 801098c:	f7ff ffd0 	bl	8010930 <IncreaseAdrAckCounter>
 8010990:	4603      	mov	r3, r0
 8010992:	4a0d      	ldr	r2, [pc, #52]	@ (80109c8 <StopRetransmission+0x74>)
 8010994:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010996:	4b0b      	ldr	r3, [pc, #44]	@ (80109c4 <StopRetransmission+0x70>)
 8010998:	2200      	movs	r2, #0
 801099a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 801099e:	4b09      	ldr	r3, [pc, #36]	@ (80109c4 <StopRetransmission+0x70>)
 80109a0:	2200      	movs	r2, #0
 80109a2:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80109a6:	4b07      	ldr	r3, [pc, #28]	@ (80109c4 <StopRetransmission+0x70>)
 80109a8:	2200      	movs	r2, #0
 80109aa:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109ae:	4b05      	ldr	r3, [pc, #20]	@ (80109c4 <StopRetransmission+0x70>)
 80109b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80109b4:	f023 0302 	bic.w	r3, r3, #2
 80109b8:	4a02      	ldr	r2, [pc, #8]	@ (80109c4 <StopRetransmission+0x70>)
 80109ba:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80109be:	2301      	movs	r3, #1
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	20000670 	.word	0x20000670
 80109c8:	20000b90 	.word	0x20000b90

080109cc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80109d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010a04 <CallNvmDataChangeCallback+0x38>)
 80109d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00c      	beq.n	80109fa <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80109e0:	4b08      	ldr	r3, [pc, #32]	@ (8010a04 <CallNvmDataChangeCallback+0x38>)
 80109e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109e6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80109ec:	4b05      	ldr	r3, [pc, #20]	@ (8010a04 <CallNvmDataChangeCallback+0x38>)
 80109ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	88fa      	ldrh	r2, [r7, #6]
 80109f6:	4610      	mov	r0, r2
 80109f8:	4798      	blx	r3
    }
}
 80109fa:	bf00      	nop
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000670 	.word	0x20000670

08010a08 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010a08:	b480      	push	{r7}
 8010a0a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8010a3c <IsRequestPending+0x34>)
 8010a0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010a12:	f003 0304 	and.w	r3, r3, #4
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d107      	bne.n	8010a2c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010a1c:	4b07      	ldr	r3, [pc, #28]	@ (8010a3c <IsRequestPending+0x34>)
 8010a1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010a22:	f003 0301 	and.w	r3, r3, #1
 8010a26:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <IsRequestPending+0x28>
    {
        return 1;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e000      	b.n	8010a32 <IsRequestPending+0x2a>
    }
    return 0;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bc80      	pop	{r7}
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	20000670 	.word	0x20000670

08010a40 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010a40:	b590      	push	{r4, r7, lr}
 8010a42:	b091      	sub	sp, #68	@ 0x44
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	6178      	str	r0, [r7, #20]
 8010a48:	6139      	str	r1, [r7, #16]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d002      	beq.n	8010a5a <LoRaMacInitialization+0x1a>
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a5a:	2303      	movs	r3, #3
 8010a5c:	e27c      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00b      	beq.n	8010a7e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d007      	beq.n	8010a7e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d003      	beq.n	8010a7e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d101      	bne.n	8010a82 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	e26a      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f003 fbd7 	bl	8014238 <RegionIsActive>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	f083 0301 	eor.w	r3, r3, #1
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010a96:	2309      	movs	r3, #9
 8010a98:	e25e      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	f002 f884 	bl	8012ba8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010aa0:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	48c7      	ldr	r0, [pc, #796]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010aa8:	f005 feb2 	bl	8016810 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010aac:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	48c5      	ldr	r0, [pc, #788]	@ (8010dc8 <LoRaMacInitialization+0x388>)
 8010ab4:	f005 feac 	bl	8016810 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010ab8:	4ac2      	ldr	r2, [pc, #776]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010aba:	7bfb      	ldrb	r3, [r7, #15]
 8010abc:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010ac0:	4bc0      	ldr	r3, [pc, #768]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010ac8:	4bbe      	ldr	r3, [pc, #760]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010ad0:	4bbc      	ldr	r3, [pc, #752]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010ad2:	4abe      	ldr	r2, [pc, #760]	@ (8010dcc <LoRaMacInitialization+0x38c>)
 8010ad4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010ade:	4bbc      	ldr	r3, [pc, #752]	@ (8010dd0 <LoRaMacInitialization+0x390>)
 8010ae0:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010ae2:	4bbc      	ldr	r3, [pc, #752]	@ (8010dd4 <LoRaMacInitialization+0x394>)
 8010ae4:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010ae6:	4bbc      	ldr	r3, [pc, #752]	@ (8010dd8 <LoRaMacInitialization+0x398>)
 8010ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010aea:	4bb6      	ldr	r3, [pc, #728]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010aec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010af0:	f107 021c 	add.w	r2, r7, #28
 8010af4:	4611      	mov	r1, r2
 8010af6:	4618      	mov	r0, r3
 8010af8:	f003 fbd7 	bl	80142aa <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010afc:	230f      	movs	r3, #15
 8010afe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b02:	4bb0      	ldr	r3, [pc, #704]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b08:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f003 fba2 	bl	8014258 <RegionGetPhyParam>
 8010b14:	4603      	mov	r3, r0
 8010b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	bf14      	ite	ne
 8010b1e:	2301      	movne	r3, #1
 8010b20:	2300      	moveq	r3, #0
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	4ba7      	ldr	r3, [pc, #668]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b26:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010b2a:	230a      	movs	r3, #10
 8010b2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b30:	4ba4      	ldr	r3, [pc, #656]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b36:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f003 fb8b 	bl	8014258 <RegionGetPhyParam>
 8010b42:	4603      	mov	r3, r0
 8010b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b48:	b25a      	sxtb	r2, r3
 8010b4a:	4b9e      	ldr	r3, [pc, #632]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b4c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010b50:	2306      	movs	r3, #6
 8010b52:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b56:	4b9b      	ldr	r3, [pc, #620]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b5c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b60:	4611      	mov	r1, r2
 8010b62:	4618      	mov	r0, r3
 8010b64:	f003 fb78 	bl	8014258 <RegionGetPhyParam>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6e:	b25a      	sxtb	r2, r3
 8010b70:	4b94      	ldr	r3, [pc, #592]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b72:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010b76:	2310      	movs	r3, #16
 8010b78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b7c:	4b91      	ldr	r3, [pc, #580]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010b86:	4611      	mov	r1, r2
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f003 fb65 	bl	8014258 <RegionGetPhyParam>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b94:	4a8b      	ldr	r2, [pc, #556]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010b96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010b9a:	2311      	movs	r3, #17
 8010b9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ba0:	4b88      	ldr	r3, [pc, #544]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ba6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010baa:	4611      	mov	r1, r2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f003 fb53 	bl	8014258 <RegionGetPhyParam>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb8:	4a82      	ldr	r2, [pc, #520]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010bbe:	2312      	movs	r3, #18
 8010bc0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bc4:	4b7f      	ldr	r3, [pc, #508]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010bca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f003 fb41 	bl	8014258 <RegionGetPhyParam>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bdc:	4a79      	ldr	r2, [pc, #484]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010bde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010be2:	2313      	movs	r3, #19
 8010be4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010be8:	4b76      	ldr	r3, [pc, #472]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010bee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010bf2:	4611      	mov	r1, r2
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f003 fb2f 	bl	8014258 <RegionGetPhyParam>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c00:	4a70      	ldr	r2, [pc, #448]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010c06:	2314      	movs	r3, #20
 8010c08:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f003 fb1d 	bl	8014258 <RegionGetPhyParam>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c24:	4a67      	ldr	r2, [pc, #412]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c26:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010c2a:	2316      	movs	r3, #22
 8010c2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c30:	4b64      	ldr	r3, [pc, #400]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c36:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010c3a:	4611      	mov	r1, r2
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f003 fb0b 	bl	8014258 <RegionGetPhyParam>
 8010c42:	4603      	mov	r3, r0
 8010c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c4c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010c50:	2317      	movs	r3, #23
 8010c52:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c56:	4b5b      	ldr	r3, [pc, #364]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c5c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f003 faf8 	bl	8014258 <RegionGetPhyParam>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c6e:	4a55      	ldr	r2, [pc, #340]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c70:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c76:	4a53      	ldr	r2, [pc, #332]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c78:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010c7c:	2318      	movs	r3, #24
 8010c7e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c82:	4b50      	ldr	r3, [pc, #320]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c88:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f003 fae2 	bl	8014258 <RegionGetPhyParam>
 8010c94:	4603      	mov	r3, r0
 8010c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	4b49      	ldr	r3, [pc, #292]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010c9e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	4b47      	ldr	r3, [pc, #284]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010ca8:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010cac:	231d      	movs	r3, #29
 8010cae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cb2:	4b44      	ldr	r3, [pc, #272]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010cb8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010cbc:	4611      	mov	r1, r2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f003 faca 	bl	8014258 <RegionGetPhyParam>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010cce:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010cd2:	231e      	movs	r3, #30
 8010cd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010cde:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f003 fab7 	bl	8014258 <RegionGetPhyParam>
 8010cea:	4603      	mov	r3, r0
 8010cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	4b34      	ldr	r3, [pc, #208]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010cf4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010cf8:	231f      	movs	r3, #31
 8010cfa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cfe:	4b31      	ldr	r3, [pc, #196]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d04:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d08:	4611      	mov	r1, r2
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f003 faa4 	bl	8014258 <RegionGetPhyParam>
 8010d10:	4603      	mov	r3, r0
 8010d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d16:	4a2b      	ldr	r2, [pc, #172]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d18:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010d1c:	2320      	movs	r3, #32
 8010d1e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d22:	4b28      	ldr	r3, [pc, #160]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d28:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d2c:	4611      	mov	r1, r2
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f003 fa92 	bl	8014258 <RegionGetPhyParam>
 8010d34:	4603      	mov	r3, r0
 8010d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3a:	4a22      	ldr	r2, [pc, #136]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010d40:	230b      	movs	r3, #11
 8010d42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d46:	4b1f      	ldr	r3, [pc, #124]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d4c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d50:	4611      	mov	r1, r2
 8010d52:	4618      	mov	r0, r3
 8010d54:	f003 fa80 	bl	8014258 <RegionGetPhyParam>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	4b19      	ldr	r3, [pc, #100]	@ (8010dc8 <LoRaMacInitialization+0x388>)
 8010d62:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010d66:	230c      	movs	r3, #12
 8010d68:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d6c:	4b15      	ldr	r3, [pc, #84]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d72:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d76:	4611      	mov	r1, r2
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f003 fa6d 	bl	8014258 <RegionGetPhyParam>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8010d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	4b10      	ldr	r3, [pc, #64]	@ (8010dc8 <LoRaMacInitialization+0x388>)
 8010d88:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010d94:	4b0b      	ldr	r3, [pc, #44]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d96:	220a      	movs	r2, #10
 8010d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010d9c:	4b09      	ldr	r3, [pc, #36]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010d9e:	2206      	movs	r2, #6
 8010da0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010da4:	4b07      	ldr	r3, [pc, #28]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010daa:	4a06      	ldr	r2, [pc, #24]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010dac:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010dae:	4b05      	ldr	r3, [pc, #20]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010db0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010db4:	4b03      	ldr	r3, [pc, #12]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010db6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010dba:	4b02      	ldr	r3, [pc, #8]	@ (8010dc4 <LoRaMacInitialization+0x384>)
 8010dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010dc0:	e00c      	b.n	8010ddc <LoRaMacInitialization+0x39c>
 8010dc2:	bf00      	nop
 8010dc4:	20000b90 	.word	0x20000b90
 8010dc8:	20000670 	.word	0x20000670
 8010dcc:	01000400 	.word	0x01000400
 8010dd0:	20000d74 	.word	0x20000d74
 8010dd4:	20000d78 	.word	0x20000d78
 8010dd8:	20001688 	.word	0x20001688
 8010ddc:	4a60      	ldr	r2, [pc, #384]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010de0:	4b5f      	ldr	r3, [pc, #380]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010de6:	4a5e      	ldr	r2, [pc, #376]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010de8:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010dea:	4b5d      	ldr	r3, [pc, #372]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010df0:	4a5b      	ldr	r2, [pc, #364]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010df2:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010df4:	4b5a      	ldr	r3, [pc, #360]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010dfa:	4a59      	ldr	r2, [pc, #356]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010dfc:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010dfe:	4b58      	ldr	r3, [pc, #352]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e04:	4a56      	ldr	r2, [pc, #344]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e06:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010e08:	4b55      	ldr	r3, [pc, #340]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e0a:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8010e0e:	4b54      	ldr	r3, [pc, #336]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e10:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8010e14:	4b52      	ldr	r3, [pc, #328]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e16:	2201      	movs	r2, #1
 8010e18:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010e1c:	4a51      	ldr	r2, [pc, #324]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8010e24:	f7ff f8d6 	bl	800ffd4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010e28:	4b4d      	ldr	r3, [pc, #308]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 8010e30:	4a4c      	ldr	r2, [pc, #304]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8010e38:	4b4a      	ldr	r3, [pc, #296]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8010e40:	4b48      	ldr	r3, [pc, #288]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010e42:	2201      	movs	r2, #1
 8010e44:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010e48:	4b45      	ldr	r3, [pc, #276]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010e4e:	4b44      	ldr	r3, [pc, #272]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010e54:	2300      	movs	r3, #0
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	4b43      	ldr	r3, [pc, #268]	@ (8010f68 <LoRaMacInitialization+0x528>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8010e60:	4842      	ldr	r0, [pc, #264]	@ (8010f6c <LoRaMacInitialization+0x52c>)
 8010e62:	f009 fd3b 	bl	801a8dc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010e66:	2300      	movs	r3, #0
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	4b41      	ldr	r3, [pc, #260]	@ (8010f70 <LoRaMacInitialization+0x530>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8010e72:	4840      	ldr	r0, [pc, #256]	@ (8010f74 <LoRaMacInitialization+0x534>)
 8010e74:	f009 fd32 	bl	801a8dc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010e78:	2300      	movs	r3, #0
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8010f78 <LoRaMacInitialization+0x538>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f04f 31ff 	mov.w	r1, #4294967295
 8010e84:	483d      	ldr	r0, [pc, #244]	@ (8010f7c <LoRaMacInitialization+0x53c>)
 8010e86:	f009 fd29 	bl	801a8dc <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8010f80 <LoRaMacInitialization+0x540>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	f04f 31ff 	mov.w	r1, #4294967295
 8010e96:	483b      	ldr	r0, [pc, #236]	@ (8010f84 <LoRaMacInitialization+0x544>)
 8010e98:	f009 fd20 	bl	801a8dc <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010e9c:	4c30      	ldr	r4, [pc, #192]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010e9e:	463b      	mov	r3, r7
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f009 f891 	bl	8019fc8 <SysTimeGetMcuTime>
 8010ea6:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8010eaa:	463a      	mov	r2, r7
 8010eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eb0:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8010eb4:	4b34      	ldr	r3, [pc, #208]	@ (8010f88 <LoRaMacInitialization+0x548>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010eba:	4b2a      	ldr	r3, [pc, #168]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010ebc:	4a33      	ldr	r2, [pc, #204]	@ (8010f8c <LoRaMacInitialization+0x54c>)
 8010ebe:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010ec2:	4b28      	ldr	r3, [pc, #160]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010ec4:	4a32      	ldr	r2, [pc, #200]	@ (8010f90 <LoRaMacInitialization+0x550>)
 8010ec6:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010eca:	4b26      	ldr	r3, [pc, #152]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010ecc:	4a31      	ldr	r2, [pc, #196]	@ (8010f94 <LoRaMacInitialization+0x554>)
 8010ece:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010ed2:	4b24      	ldr	r3, [pc, #144]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010ed4:	4a30      	ldr	r2, [pc, #192]	@ (8010f98 <LoRaMacInitialization+0x558>)
 8010ed6:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010eda:	4b22      	ldr	r3, [pc, #136]	@ (8010f64 <LoRaMacInitialization+0x524>)
 8010edc:	4a2f      	ldr	r2, [pc, #188]	@ (8010f9c <LoRaMacInitialization+0x55c>)
 8010ede:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8010fa0 <LoRaMacInitialization+0x560>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	482f      	ldr	r0, [pc, #188]	@ (8010fa4 <LoRaMacInitialization+0x564>)
 8010ee8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	4619      	mov	r1, r3
 8010ef0:	482d      	ldr	r0, [pc, #180]	@ (8010fa8 <LoRaMacInitialization+0x568>)
 8010ef2:	f7fa fb85 	bl	800b600 <SecureElementInit>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010efc:	2311      	movs	r3, #17
 8010efe:	e02b      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010f00:	4817      	ldr	r0, [pc, #92]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010f02:	f002 fafd 	bl	8013500 <LoRaMacCryptoInit>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f0c:	2311      	movs	r3, #17
 8010f0e:	e023      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010f10:	f001 fc1c 	bl	801274c <LoRaMacCommandsInit>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f1a:	2313      	movs	r3, #19
 8010f1c:	e01c      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010f1e:	4823      	ldr	r0, [pc, #140]	@ (8010fac <LoRaMacInitialization+0x56c>)
 8010f20:	f002 fb8e 	bl	8013640 <LoRaMacCryptoSetMulticastReference>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f2a:	2311      	movs	r3, #17
 8010f2c:	e014      	b.n	8010f58 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8010fa0 <LoRaMacInitialization+0x560>)
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	4798      	blx	r3
 8010f34:	4603      	mov	r3, r0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f005 fc0a 	bl	8016750 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010f3c:	4b18      	ldr	r3, [pc, #96]	@ (8010fa0 <LoRaMacInitialization+0x560>)
 8010f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f40:	4a07      	ldr	r2, [pc, #28]	@ (8010f60 <LoRaMacInitialization+0x520>)
 8010f42:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8010f46:	4610      	mov	r0, r2
 8010f48:	4798      	blx	r3
    Radio.Sleep( );
 8010f4a:	4b15      	ldr	r3, [pc, #84]	@ (8010fa0 <LoRaMacInitialization+0x560>)
 8010f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f4e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010f50:	2001      	movs	r0, #1
 8010f52:	f7fd fac7 	bl	800e4e4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	373c      	adds	r7, #60	@ 0x3c
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd90      	pop	{r4, r7, pc}
 8010f60:	20000b90 	.word	0x20000b90
 8010f64:	20000670 	.word	0x20000670
 8010f68:	0800ea99 	.word	0x0800ea99
 8010f6c:	200009d8 	.word	0x200009d8
 8010f70:	0800eb29 	.word	0x0800eb29
 8010f74:	200009f0 	.word	0x200009f0
 8010f78:	0800eba1 	.word	0x0800eba1
 8010f7c:	20000a08 	.word	0x20000a08
 8010f80:	0800ec21 	.word	0x0800ec21
 8010f84:	20000a74 	.word	0x20000a74
 8010f88:	20001718 	.word	0x20001718
 8010f8c:	0800d599 	.word	0x0800d599
 8010f90:	0800d611 	.word	0x0800d611
 8010f94:	0800d6f1 	.word	0x0800d6f1
 8010f98:	0800d6a5 	.word	0x0800d6a5
 8010f9c:	0800d72d 	.word	0x0800d72d
 8010fa0:	0801c298 	.word	0x0801c298
 8010fa4:	200009bc 	.word	0x200009bc
 8010fa8:	20000cb4 	.word	0x20000cb4
 8010fac:	20000c68 	.word	0x20000c68

08010fb0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010fb4:	4b04      	ldr	r3, [pc, #16]	@ (8010fc8 <LoRaMacStart+0x18>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bc80      	pop	{r7}
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	20000670 	.word	0x20000670

08010fcc <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010fd0:	f7fd fa68 	bl	800e4a4 <LoRaMacIsBusy>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	f083 0301 	eor.w	r3, r3, #1
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d005      	beq.n	8010fec <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8010fe0:	4b07      	ldr	r3, [pc, #28]	@ (8011000 <LoRaMacStop+0x34>)
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	e007      	b.n	8010ffc <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010fec:	4b04      	ldr	r3, [pc, #16]	@ (8011000 <LoRaMacStop+0x34>)
 8010fee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d101      	bne.n	8010ffa <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	e000      	b.n	8010ffc <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8010ffa:	2301      	movs	r3, #1
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20000670 	.word	0x20000670

08011004 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011008:	4812      	ldr	r0, [pc, #72]	@ (8011054 <LoRaMacHalt+0x50>)
 801100a:	f009 fd0b 	bl	801aa24 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801100e:	4812      	ldr	r0, [pc, #72]	@ (8011058 <LoRaMacHalt+0x54>)
 8011010:	f009 fd08 	bl	801aa24 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011014:	4811      	ldr	r0, [pc, #68]	@ (801105c <LoRaMacHalt+0x58>)
 8011016:	f009 fd05 	bl	801aa24 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801101a:	4811      	ldr	r0, [pc, #68]	@ (8011060 <LoRaMacHalt+0x5c>)
 801101c:	f009 fd02 	bl	801aa24 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011020:	f001 fa04 	bl	801242c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011024:	4b0f      	ldr	r3, [pc, #60]	@ (8011064 <LoRaMacHalt+0x60>)
 8011026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011028:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801102a:	4b0f      	ldr	r3, [pc, #60]	@ (8011068 <LoRaMacHalt+0x64>)
 801102c:	2200      	movs	r2, #0
 801102e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 8011032:	480e      	ldr	r0, [pc, #56]	@ (801106c <LoRaMacHalt+0x68>)
 8011034:	f7fd fc0c 	bl	800e850 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011038:	f240 527c 	movw	r2, #1404	@ 0x57c
 801103c:	490b      	ldr	r1, [pc, #44]	@ (801106c <LoRaMacHalt+0x68>)
 801103e:	480c      	ldr	r0, [pc, #48]	@ (8011070 <LoRaMacHalt+0x6c>)
 8011040:	f005 fbab 	bl	801679a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011044:	4b08      	ldr	r3, [pc, #32]	@ (8011068 <LoRaMacHalt+0x64>)
 8011046:	2201      	movs	r2, #1
 8011048:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801104c:	2300      	movs	r3, #0
}
 801104e:	4618      	mov	r0, r3
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	200009d8 	.word	0x200009d8
 8011058:	200009f0 	.word	0x200009f0
 801105c:	20000a08 	.word	0x20000a08
 8011060:	20000a74 	.word	0x20000a74
 8011064:	0801c298 	.word	0x0801c298
 8011068:	20000670 	.word	0x20000670
 801106c:	20000b90 	.word	0x20000b90
 8011070:	2000110c 	.word	0x2000110c

08011074 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011074:	b590      	push	{r4, r7, lr}
 8011076:	b08d      	sub	sp, #52	@ 0x34
 8011078:	af02      	add	r7, sp, #8
 801107a:	4603      	mov	r3, r0
 801107c:	6039      	str	r1, [r7, #0]
 801107e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011080:	4b42      	ldr	r3, [pc, #264]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 8011082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011084:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011086:	4b41      	ldr	r3, [pc, #260]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 8011088:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 801108c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801108e:	4b3f      	ldr	r3, [pc, #252]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 8011090:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011094:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011096:	4b3e      	ldr	r3, [pc, #248]	@ (8011190 <LoRaMacQueryTxPossible+0x11c>)
 8011098:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801109c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d101      	bne.n	80110ac <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80110a8:	2303      	movs	r3, #3
 80110aa:	e06b      	b.n	8011184 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80110ac:	2300      	movs	r3, #0
 80110ae:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80110b0:	4b36      	ldr	r3, [pc, #216]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110b2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80110b6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80110b8:	4b34      	ldr	r3, [pc, #208]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110bc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80110be:	4b34      	ldr	r3, [pc, #208]	@ (8011190 <LoRaMacQueryTxPossible+0x11c>)
 80110c0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80110c4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80110c6:	4b32      	ldr	r3, [pc, #200]	@ (8011190 <LoRaMacQueryTxPossible+0x11c>)
 80110c8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80110cc:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80110ce:	4b2f      	ldr	r3, [pc, #188]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80110d4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80110d8:	4b2c      	ldr	r3, [pc, #176]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110da:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80110de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80110e2:	4b2b      	ldr	r3, [pc, #172]	@ (8011190 <LoRaMacQueryTxPossible+0x11c>)
 80110e4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80110e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80110ec:	4b27      	ldr	r3, [pc, #156]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110ee:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80110f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80110f6:	4b25      	ldr	r3, [pc, #148]	@ (801118c <LoRaMacQueryTxPossible+0x118>)
 80110f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80110fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011100:	f107 040d 	add.w	r4, r7, #13
 8011104:	f107 020e 	add.w	r2, r7, #14
 8011108:	f107 010f 	add.w	r1, r7, #15
 801110c:	f107 0014 	add.w	r0, r7, #20
 8011110:	f107 0310 	add.w	r3, r7, #16
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	4623      	mov	r3, r4
 8011118:	f001 f852 	bl	80121c0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011120:	4618      	mov	r0, r3
 8011122:	f7fd feb9 	bl	800ee98 <GetMaxAppPayloadWithoutFOptsLength>
 8011126:	4603      	mov	r3, r0
 8011128:	461a      	mov	r2, r3
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801112e:	f107 0308 	add.w	r3, r7, #8
 8011132:	4618      	mov	r0, r3
 8011134:	f001 fbd8 	bl	80128e8 <LoRaMacCommandsGetSizeSerializedCmds>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801113e:	2313      	movs	r3, #19
 8011140:	e020      	b.n	8011184 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b0f      	cmp	r3, #15
 8011146:	d819      	bhi.n	801117c <LoRaMacQueryTxPossible+0x108>
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	785b      	ldrb	r3, [r3, #1]
 801114c:	461a      	mov	r2, r3
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	429a      	cmp	r2, r3
 8011152:	d313      	bcc.n	801117c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	785a      	ldrb	r2, [r3, #1]
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	b2db      	uxtb	r3, r3
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	b2da      	uxtb	r2, r3
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	785b      	ldrb	r3, [r3, #1]
 8011168:	4619      	mov	r1, r3
 801116a:	79fa      	ldrb	r2, [r7, #7]
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	4413      	add	r3, r2
 8011170:	4299      	cmp	r1, r3
 8011172:	d301      	bcc.n	8011178 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	e005      	b.n	8011184 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011178:	2308      	movs	r3, #8
 801117a:	e003      	b.n	8011184 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	2200      	movs	r2, #0
 8011180:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011182:	2308      	movs	r3, #8
    }
}
 8011184:	4618      	mov	r0, r3
 8011186:	372c      	adds	r7, #44	@ 0x2c
 8011188:	46bd      	mov	sp, r7
 801118a:	bd90      	pop	{r4, r7, pc}
 801118c:	20000b90 	.word	0x20000b90
 8011190:	20000670 	.word	0x20000670

08011194 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011194:	b590      	push	{r4, r7, lr}
 8011196:	b087      	sub	sp, #28
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801119c:	2300      	movs	r3, #0
 801119e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80111a6:	2303      	movs	r3, #3
 80111a8:	e191      	b.n	80114ce <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	2b39      	cmp	r3, #57	@ 0x39
 80111b0:	f200 8186 	bhi.w	80114c0 <LoRaMacMibGetRequestConfirm+0x32c>
 80111b4:	a201      	add	r2, pc, #4	@ (adr r2, 80111bc <LoRaMacMibGetRequestConfirm+0x28>)
 80111b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ba:	bf00      	nop
 80111bc:	080112a5 	.word	0x080112a5
 80111c0:	080112b1 	.word	0x080112b1
 80111c4:	080112bd 	.word	0x080112bd
 80111c8:	080112c9 	.word	0x080112c9
 80111cc:	080112d5 	.word	0x080112d5
 80111d0:	080112e1 	.word	0x080112e1
 80111d4:	080112ed 	.word	0x080112ed
 80111d8:	080114c1 	.word	0x080114c1
 80111dc:	080114c1 	.word	0x080114c1
 80111e0:	080114c1 	.word	0x080114c1
 80111e4:	080114c1 	.word	0x080114c1
 80111e8:	080114c1 	.word	0x080114c1
 80111ec:	080114c1 	.word	0x080114c1
 80111f0:	080114c1 	.word	0x080114c1
 80111f4:	080114c1 	.word	0x080114c1
 80111f8:	080112f9 	.word	0x080112f9
 80111fc:	08011305 	.word	0x08011305
 8011200:	08011311 	.word	0x08011311
 8011204:	08011333 	.word	0x08011333
 8011208:	08011345 	.word	0x08011345
 801120c:	08011357 	.word	0x08011357
 8011210:	08011369 	.word	0x08011369
 8011214:	0801139d 	.word	0x0801139d
 8011218:	0801137b 	.word	0x0801137b
 801121c:	080113bf 	.word	0x080113bf
 8011220:	080113cb 	.word	0x080113cb
 8011224:	080113d5 	.word	0x080113d5
 8011228:	080113df 	.word	0x080113df
 801122c:	080113e9 	.word	0x080113e9
 8011230:	080113f3 	.word	0x080113f3
 8011234:	080113fd 	.word	0x080113fd
 8011238:	08011429 	.word	0x08011429
 801123c:	08011435 	.word	0x08011435
 8011240:	0801144d 	.word	0x0801144d
 8011244:	08011441 	.word	0x08011441
 8011248:	08011459 	.word	0x08011459
 801124c:	08011463 	.word	0x08011463
 8011250:	0801146f 	.word	0x0801146f
 8011254:	08011489 	.word	0x08011489
 8011258:	08011479 	.word	0x08011479
 801125c:	08011481 	.word	0x08011481
 8011260:	080114c1 	.word	0x080114c1
 8011264:	08011495 	.word	0x08011495
 8011268:	080114c1 	.word	0x080114c1
 801126c:	080114c1 	.word	0x080114c1
 8011270:	080114c1 	.word	0x080114c1
 8011274:	080114c1 	.word	0x080114c1
 8011278:	080114c1 	.word	0x080114c1
 801127c:	080114c1 	.word	0x080114c1
 8011280:	080114c1 	.word	0x080114c1
 8011284:	080114c1 	.word	0x080114c1
 8011288:	080114c1 	.word	0x080114c1
 801128c:	080114c1 	.word	0x080114c1
 8011290:	080114c1 	.word	0x080114c1
 8011294:	080114c1 	.word	0x080114c1
 8011298:	080114c1 	.word	0x080114c1
 801129c:	080114a9 	.word	0x080114a9
 80112a0:	080114b5 	.word	0x080114b5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80112a4:	4b8c      	ldr	r3, [pc, #560]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112a6:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	711a      	strb	r2, [r3, #4]
            break;
 80112ae:	e10d      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80112b0:	4b89      	ldr	r3, [pc, #548]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112b2:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	711a      	strb	r2, [r3, #4]
            break;
 80112ba:	e107      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80112bc:	f7fa fc76 	bl	800bbac <SecureElementGetDevEui>
 80112c0:	4602      	mov	r2, r0
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	605a      	str	r2, [r3, #4]
            break;
 80112c6:	e101      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80112c8:	f7fa fc92 	bl	800bbf0 <SecureElementGetJoinEui>
 80112cc:	4602      	mov	r2, r0
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]
            break;
 80112d2:	e0fb      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80112d4:	4b80      	ldr	r3, [pc, #512]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112d6:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	711a      	strb	r2, [r3, #4]
            break;
 80112de:	e0f5      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80112e0:	4b7d      	ldr	r3, [pc, #500]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112e2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	605a      	str	r2, [r3, #4]
            break;
 80112ea:	e0ef      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80112ec:	4b7a      	ldr	r3, [pc, #488]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	605a      	str	r2, [r3, #4]
            break;
 80112f6:	e0e9      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80112f8:	4b77      	ldr	r3, [pc, #476]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80112fa:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	711a      	strb	r2, [r3, #4]
            break;
 8011302:	e0e3      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011304:	4b74      	ldr	r3, [pc, #464]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011306:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	711a      	strb	r2, [r3, #4]
            break;
 801130e:	e0dd      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011310:	231c      	movs	r3, #28
 8011312:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011314:	4b70      	ldr	r3, [pc, #448]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801131a:	f107 0210 	add.w	r2, r7, #16
 801131e:	4611      	mov	r1, r2
 8011320:	4618      	mov	r0, r3
 8011322:	f002 ff99 	bl	8014258 <RegionGetPhyParam>
 8011326:	4603      	mov	r3, r0
 8011328:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	605a      	str	r2, [r3, #4]
            break;
 8011330:	e0cc      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4a68      	ldr	r2, [pc, #416]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011336:	3304      	adds	r3, #4
 8011338:	3264      	adds	r2, #100	@ 0x64
 801133a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801133e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011342:	e0c3      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a64      	ldr	r2, [pc, #400]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011348:	3304      	adds	r3, #4
 801134a:	32a8      	adds	r2, #168	@ 0xa8
 801134c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011350:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011354:	e0ba      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4a5f      	ldr	r2, [pc, #380]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801135a:	3304      	adds	r3, #4
 801135c:	326c      	adds	r2, #108	@ 0x6c
 801135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011362:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011366:	e0b1      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4a5b      	ldr	r2, [pc, #364]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801136c:	3304      	adds	r3, #4
 801136e:	32b0      	adds	r2, #176	@ 0xb0
 8011370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011374:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011378:	e0a8      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801137a:	231a      	movs	r3, #26
 801137c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801137e:	4b56      	ldr	r3, [pc, #344]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011384:	f107 0210 	add.w	r2, r7, #16
 8011388:	4611      	mov	r1, r2
 801138a:	4618      	mov	r0, r3
 801138c:	f002 ff64 	bl	8014258 <RegionGetPhyParam>
 8011390:	4603      	mov	r3, r0
 8011392:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	605a      	str	r2, [r3, #4]
            break;
 801139a:	e097      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801139c:	2319      	movs	r3, #25
 801139e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113a0:	4b4d      	ldr	r3, [pc, #308]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113a6:	f107 0210 	add.w	r2, r7, #16
 80113aa:	4611      	mov	r1, r2
 80113ac:	4618      	mov	r0, r3
 80113ae:	f002 ff53 	bl	8014258 <RegionGetPhyParam>
 80113b2:	4603      	mov	r3, r0
 80113b4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	605a      	str	r2, [r3, #4]
            break;
 80113bc:	e086      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80113be:	4b46      	ldr	r3, [pc, #280]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113c0:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	711a      	strb	r2, [r3, #4]
            break;
 80113c8:	e080      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80113ca:	4b43      	ldr	r3, [pc, #268]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	605a      	str	r2, [r3, #4]
            break;
 80113d2:	e07b      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80113d4:	4b40      	ldr	r3, [pc, #256]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	605a      	str	r2, [r3, #4]
            break;
 80113dc:	e076      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80113de:	4b3e      	ldr	r3, [pc, #248]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	605a      	str	r2, [r3, #4]
            break;
 80113e6:	e071      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80113e8:	4b3b      	ldr	r3, [pc, #236]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	605a      	str	r2, [r3, #4]
            break;
 80113f0:	e06c      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80113f2:	4b39      	ldr	r3, [pc, #228]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80113f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	605a      	str	r2, [r3, #4]
            break;
 80113fa:	e067      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80113fc:	2302      	movs	r3, #2
 80113fe:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011400:	4b35      	ldr	r3, [pc, #212]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011402:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011406:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011408:	4b33      	ldr	r3, [pc, #204]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801140a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801140e:	f107 0210 	add.w	r2, r7, #16
 8011412:	4611      	mov	r1, r2
 8011414:	4618      	mov	r0, r3
 8011416:	f002 ff1f 	bl	8014258 <RegionGetPhyParam>
 801141a:	4603      	mov	r3, r0
 801141c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	b25a      	sxtb	r2, r3
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	711a      	strb	r2, [r3, #4]
            break;
 8011426:	e051      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011428:	4b2b      	ldr	r3, [pc, #172]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801142a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	711a      	strb	r2, [r3, #4]
            break;
 8011432:	e04b      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011434:	4b28      	ldr	r3, [pc, #160]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011436:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	711a      	strb	r2, [r3, #4]
            break;
 801143e:	e045      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011440:	4b25      	ldr	r3, [pc, #148]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011442:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	711a      	strb	r2, [r3, #4]
            break;
 801144a:	e03f      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801144c:	4b22      	ldr	r3, [pc, #136]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801144e:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	711a      	strb	r2, [r3, #4]
            break;
 8011456:	e039      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011458:	4b1f      	ldr	r3, [pc, #124]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801145a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	605a      	str	r2, [r3, #4]
            break;
 8011460:	e034      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011462:	4b1d      	ldr	r3, [pc, #116]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011464:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	711a      	strb	r2, [r3, #4]
            break;
 801146c:	e02e      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801146e:	4b1a      	ldr	r3, [pc, #104]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011470:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	605a      	str	r2, [r3, #4]
            break;
 8011476:	e029      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a17      	ldr	r2, [pc, #92]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801147c:	605a      	str	r2, [r3, #4]
            break;
 801147e:	e025      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a16      	ldr	r2, [pc, #88]	@ (80114dc <LoRaMacMibGetRequestConfirm+0x348>)
 8011484:	605a      	str	r2, [r3, #4]
            break;
 8011486:	e021      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011488:	4b13      	ldr	r3, [pc, #76]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 801148a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	605a      	str	r2, [r3, #4]
            break;
 8011492:	e01b      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4a10      	ldr	r2, [pc, #64]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 8011498:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 801149c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801149e:	687c      	ldr	r4, [r7, #4]
 80114a0:	f003 f850 	bl	8014544 <RegionGetVersion>
 80114a4:	60a0      	str	r0, [r4, #8]
            break;
 80114a6:	e011      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80114a8:	4b0b      	ldr	r3, [pc, #44]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80114aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	605a      	str	r2, [r3, #4]
            break;
 80114b2:	e00b      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80114b4:	4b08      	ldr	r3, [pc, #32]	@ (80114d8 <LoRaMacMibGetRequestConfirm+0x344>)
 80114b6:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	711a      	strb	r2, [r3, #4]
            break;
 80114be:	e005      	b.n	80114cc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 ffca 	bl	801245a <LoRaMacClassBMibGetRequestConfirm>
 80114c6:	4603      	mov	r3, r0
 80114c8:	75fb      	strb	r3, [r7, #23]
            break;
 80114ca:	bf00      	nop
        }
    }
    return status;
 80114cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	371c      	adds	r7, #28
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd90      	pop	{r4, r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20000b90 	.word	0x20000b90
 80114dc:	2000110c 	.word	0x2000110c

080114e0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80114f2:	2303      	movs	r3, #3
 80114f4:	e35c      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80114f6:	4bb9      	ldr	r3, [pc, #740]	@ (80117dc <LoRaMacMibSetRequestConfirm+0x2fc>)
 80114f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80114fc:	f003 0302 	and.w	r3, r3, #2
 8011500:	2b00      	cmp	r3, #0
 8011502:	d001      	beq.n	8011508 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011504:	2301      	movs	r3, #1
 8011506:	e353      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	2b39      	cmp	r3, #57	@ 0x39
 801150e:	f200 8323 	bhi.w	8011b58 <LoRaMacMibSetRequestConfirm+0x678>
 8011512:	a201      	add	r2, pc, #4	@ (adr r2, 8011518 <LoRaMacMibSetRequestConfirm+0x38>)
 8011514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011518:	08011601 	.word	0x08011601
 801151c:	08011611 	.word	0x08011611
 8011520:	0801162b 	.word	0x0801162b
 8011524:	08011643 	.word	0x08011643
 8011528:	0801165b 	.word	0x0801165b
 801152c:	08011667 	.word	0x08011667
 8011530:	08011673 	.word	0x08011673
 8011534:	0801167f 	.word	0x0801167f
 8011538:	080116a5 	.word	0x080116a5
 801153c:	080116cb 	.word	0x080116cb
 8011540:	080116f1 	.word	0x080116f1
 8011544:	08011717 	.word	0x08011717
 8011548:	0801173d 	.word	0x0801173d
 801154c:	08011763 	.word	0x08011763
 8011550:	08011789 	.word	0x08011789
 8011554:	080117af 	.word	0x080117af
 8011558:	080117cf 	.word	0x080117cf
 801155c:	08011b59 	.word	0x08011b59
 8011560:	080117e9 	.word	0x080117e9
 8011564:	08011859 	.word	0x08011859
 8011568:	08011899 	.word	0x08011899
 801156c:	080118fb 	.word	0x080118fb
 8011570:	0801196b 	.word	0x0801196b
 8011574:	0801193b 	.word	0x0801193b
 8011578:	0801199b 	.word	0x0801199b
 801157c:	080119bd 	.word	0x080119bd
 8011580:	080119c7 	.word	0x080119c7
 8011584:	080119d1 	.word	0x080119d1
 8011588:	080119db 	.word	0x080119db
 801158c:	080119e5 	.word	0x080119e5
 8011590:	08011b59 	.word	0x08011b59
 8011594:	080119ef 	.word	0x080119ef
 8011598:	08011a21 	.word	0x08011a21
 801159c:	08011a8d 	.word	0x08011a8d
 80115a0:	08011a5b 	.word	0x08011a5b
 80115a4:	08011ac9 	.word	0x08011ac9
 80115a8:	08011adf 	.word	0x08011adf
 80115ac:	08011af7 	.word	0x08011af7
 80115b0:	08011b01 	.word	0x08011b01
 80115b4:	08011b0d 	.word	0x08011b0d
 80115b8:	08011b59 	.word	0x08011b59
 80115bc:	08011b17 	.word	0x08011b17
 80115c0:	08011b59 	.word	0x08011b59
 80115c4:	08011b59 	.word	0x08011b59
 80115c8:	08011b59 	.word	0x08011b59
 80115cc:	08011b59 	.word	0x08011b59
 80115d0:	08011b59 	.word	0x08011b59
 80115d4:	08011b59 	.word	0x08011b59
 80115d8:	08011b59 	.word	0x08011b59
 80115dc:	08011b59 	.word	0x08011b59
 80115e0:	08011b59 	.word	0x08011b59
 80115e4:	08011b59 	.word	0x08011b59
 80115e8:	08011b59 	.word	0x08011b59
 80115ec:	08011b59 	.word	0x08011b59
 80115f0:	08011b59 	.word	0x08011b59
 80115f4:	08011b59 	.word	0x08011b59
 80115f8:	08011b41 	.word	0x08011b41
 80115fc:	08011b4d 	.word	0x08011b4d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	791b      	ldrb	r3, [r3, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	f7fd fb75 	bl	800ecf4 <SwitchClass>
 801160a:	4603      	mov	r3, r0
 801160c:	75fb      	strb	r3, [r7, #23]
            break;
 801160e:	e2c4      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	791b      	ldrb	r3, [r3, #4]
 8011614:	2b02      	cmp	r3, #2
 8011616:	d005      	beq.n	8011624 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	791a      	ldrb	r2, [r3, #4]
 801161c:	4b70      	ldr	r3, [pc, #448]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 801161e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011622:	e2ba      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011624:	2303      	movs	r3, #3
 8011626:	75fb      	strb	r3, [r7, #23]
            break;
 8011628:	e2b7      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	f7fa faa4 	bl	800bb7c <SecureElementSetDevEui>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	f000 8294 	beq.w	8011b64 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801163c:	2303      	movs	r3, #3
 801163e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011640:	e290      	b.n	8011b64 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	4618      	mov	r0, r3
 8011648:	f7fa faba 	bl	800bbc0 <SecureElementSetJoinEui>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 828a 	beq.w	8011b68 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011654:	2303      	movs	r3, #3
 8011656:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011658:	e286      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	791a      	ldrb	r2, [r3, #4]
 801165e:	4b60      	ldr	r3, [pc, #384]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 8011660:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011664:	e299      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	4a5d      	ldr	r2, [pc, #372]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 801166c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8011670:	e293      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	4a5a      	ldr	r2, [pc, #360]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 8011678:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 801167c:	e28d      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00b      	beq.n	801169e <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	4619      	mov	r1, r3
 801168c:	2000      	movs	r0, #0
 801168e:	f001 ffff 	bl	8013690 <LoRaMacCryptoSetKey>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 8269 	beq.w	8011b6c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801169a:	2311      	movs	r3, #17
 801169c:	e288      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801169e:	2303      	movs	r3, #3
 80116a0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116a2:	e263      	b.n	8011b6c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00b      	beq.n	80116c4 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	4619      	mov	r1, r3
 80116b2:	2001      	movs	r0, #1
 80116b4:	f001 ffec 	bl	8013690 <LoRaMacCryptoSetKey>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f000 8258 	beq.w	8011b70 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116c0:	2311      	movs	r3, #17
 80116c2:	e275      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116c4:	2303      	movs	r3, #3
 80116c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116c8:	e252      	b.n	8011b70 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00b      	beq.n	80116ea <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	4619      	mov	r1, r3
 80116d8:	2002      	movs	r0, #2
 80116da:	f001 ffd9 	bl	8013690 <LoRaMacCryptoSetKey>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8247 	beq.w	8011b74 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116e6:	2311      	movs	r3, #17
 80116e8:	e262      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116ea:	2303      	movs	r3, #3
 80116ec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116ee:	e241      	b.n	8011b74 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d00b      	beq.n	8011710 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	4619      	mov	r1, r3
 80116fe:	2003      	movs	r0, #3
 8011700:	f001 ffc6 	bl	8013690 <LoRaMacCryptoSetKey>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	f000 8236 	beq.w	8011b78 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801170c:	2311      	movs	r3, #17
 801170e:	e24f      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011710:	2303      	movs	r3, #3
 8011712:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011714:	e230      	b.n	8011b78 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d00b      	beq.n	8011736 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	4619      	mov	r1, r3
 8011724:	207f      	movs	r0, #127	@ 0x7f
 8011726:	f001 ffb3 	bl	8013690 <LoRaMacCryptoSetKey>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 8225 	beq.w	8011b7c <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011732:	2311      	movs	r3, #17
 8011734:	e23c      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011736:	2303      	movs	r3, #3
 8011738:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801173a:	e21f      	b.n	8011b7c <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00b      	beq.n	801175c <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	4619      	mov	r1, r3
 801174a:	2080      	movs	r0, #128	@ 0x80
 801174c:	f001 ffa0 	bl	8013690 <LoRaMacCryptoSetKey>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 8214 	beq.w	8011b80 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011758:	2311      	movs	r3, #17
 801175a:	e229      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801175c:	2303      	movs	r3, #3
 801175e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011760:	e20e      	b.n	8011b80 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00b      	beq.n	8011782 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	4619      	mov	r1, r3
 8011770:	2081      	movs	r0, #129	@ 0x81
 8011772:	f001 ff8d 	bl	8013690 <LoRaMacCryptoSetKey>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	f000 8203 	beq.w	8011b84 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801177e:	2311      	movs	r3, #17
 8011780:	e216      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011782:	2303      	movs	r3, #3
 8011784:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011786:	e1fd      	b.n	8011b84 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d00b      	beq.n	80117a8 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	4619      	mov	r1, r3
 8011796:	2082      	movs	r0, #130	@ 0x82
 8011798:	f001 ff7a 	bl	8013690 <LoRaMacCryptoSetKey>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 81f2 	beq.w	8011b88 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117a4:	2311      	movs	r3, #17
 80117a6:	e203      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117a8:	2303      	movs	r3, #3
 80117aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117ac:	e1ec      	b.n	8011b88 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	791a      	ldrb	r2, [r3, #4]
 80117b2:	4b0b      	ldr	r3, [pc, #44]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 80117b4:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80117b8:	4b0a      	ldr	r3, [pc, #40]	@ (80117e4 <LoRaMacMibSetRequestConfirm+0x304>)
 80117ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117bc:	4a08      	ldr	r2, [pc, #32]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 80117be:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80117c2:	4610      	mov	r0, r2
 80117c4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80117c6:	4b07      	ldr	r3, [pc, #28]	@ (80117e4 <LoRaMacMibSetRequestConfirm+0x304>)
 80117c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ca:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80117cc:	e1e5      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	791a      	ldrb	r2, [r3, #4]
 80117d2:	4b03      	ldr	r3, [pc, #12]	@ (80117e0 <LoRaMacMibSetRequestConfirm+0x300>)
 80117d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80117d8:	e1df      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
 80117da:	bf00      	nop
 80117dc:	20000670 	.word	0x20000670
 80117e0:	20000b90 	.word	0x20000b90
 80117e4:	0801c298 	.word	0x0801c298
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	7a1b      	ldrb	r3, [r3, #8]
 80117ec:	b25b      	sxtb	r3, r3
 80117ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117f0:	4bb3      	ldr	r3, [pc, #716]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80117f2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80117f6:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80117f8:	4bb1      	ldr	r3, [pc, #708]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80117fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117fe:	f107 0108 	add.w	r1, r7, #8
 8011802:	2207      	movs	r2, #7
 8011804:	4618      	mov	r0, r3
 8011806:	f002 fd62 	bl	80142ce <RegionVerify>
 801180a:	4603      	mov	r3, r0
 801180c:	f083 0301 	eor.w	r3, r3, #1
 8011810:	b2db      	uxtb	r3, r3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d002      	beq.n	801181c <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011816:	2303      	movs	r3, #3
 8011818:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801181a:	e1be      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011822:	4ba7      	ldr	r3, [pc, #668]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011828:	f107 0108 	add.w	r1, r7, #8
 801182c:	2200      	movs	r2, #0
 801182e:	4618      	mov	r0, r3
 8011830:	f002 fd4d 	bl	80142ce <RegionVerify>
 8011834:	4603      	mov	r3, r0
 8011836:	f083 0301 	eor.w	r3, r3, #1
 801183a:	b2db      	uxtb	r3, r3
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011840:	2303      	movs	r3, #3
 8011842:	75fb      	strb	r3, [r7, #23]
            break;
 8011844:	e1a9      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011846:	4b9e      	ldr	r3, [pc, #632]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011848:	687a      	ldr	r2, [r7, #4]
 801184a:	3364      	adds	r3, #100	@ 0x64
 801184c:	3204      	adds	r2, #4
 801184e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011852:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011856:	e1a0      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	7a1b      	ldrb	r3, [r3, #8]
 801185c:	b25b      	sxtb	r3, r3
 801185e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011860:	4b97      	ldr	r3, [pc, #604]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011862:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011866:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011868:	4b95      	ldr	r3, [pc, #596]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801186a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801186e:	f107 0108 	add.w	r1, r7, #8
 8011872:	2207      	movs	r2, #7
 8011874:	4618      	mov	r0, r3
 8011876:	f002 fd2a 	bl	80142ce <RegionVerify>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d008      	beq.n	8011892 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011880:	4b8f      	ldr	r3, [pc, #572]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	33a8      	adds	r3, #168	@ 0xa8
 8011886:	3204      	adds	r2, #4
 8011888:	e892 0003 	ldmia.w	r2, {r0, r1}
 801188c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011890:	e183      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011892:	2303      	movs	r3, #3
 8011894:	75fb      	strb	r3, [r7, #23]
            break;
 8011896:	e180      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	7a1b      	ldrb	r3, [r3, #8]
 801189c:	b25b      	sxtb	r3, r3
 801189e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118a0:	4b87      	ldr	r3, [pc, #540]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80118a2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80118a6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80118a8:	4b85      	ldr	r3, [pc, #532]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80118aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118ae:	f107 0108 	add.w	r1, r7, #8
 80118b2:	2207      	movs	r2, #7
 80118b4:	4618      	mov	r0, r3
 80118b6:	f002 fd0a 	bl	80142ce <RegionVerify>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d019      	beq.n	80118f4 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80118c0:	4b7f      	ldr	r3, [pc, #508]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	336c      	adds	r3, #108	@ 0x6c
 80118c6:	3204      	adds	r2, #4
 80118c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118cc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80118d0:	4b7b      	ldr	r3, [pc, #492]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80118d2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	f040 8158 	bne.w	8011b8c <LoRaMacMibSetRequestConfirm+0x6ac>
 80118dc:	4b78      	ldr	r3, [pc, #480]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80118de:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 8152 	beq.w	8011b8c <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80118e8:	4b76      	ldr	r3, [pc, #472]	@ (8011ac4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80118ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ec:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80118ee:	f7fe fca7 	bl	8010240 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118f2:	e14b      	b.n	8011b8c <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118f4:	2303      	movs	r3, #3
 80118f6:	75fb      	strb	r3, [r7, #23]
            break;
 80118f8:	e148      	b.n	8011b8c <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	7a1b      	ldrb	r3, [r3, #8]
 80118fe:	b25b      	sxtb	r3, r3
 8011900:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011902:	4b6f      	ldr	r3, [pc, #444]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011904:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011908:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801190a:	4b6d      	ldr	r3, [pc, #436]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801190c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011910:	f107 0108 	add.w	r1, r7, #8
 8011914:	2207      	movs	r2, #7
 8011916:	4618      	mov	r0, r3
 8011918:	f002 fcd9 	bl	80142ce <RegionVerify>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d008      	beq.n	8011934 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011922:	4b67      	ldr	r3, [pc, #412]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	33b0      	adds	r3, #176	@ 0xb0
 8011928:	3204      	adds	r2, #4
 801192a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801192e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011932:	e132      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011934:	2303      	movs	r3, #3
 8011936:	75fb      	strb	r3, [r7, #23]
            break;
 8011938:	e12f      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011940:	2301      	movs	r3, #1
 8011942:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011944:	4b5e      	ldr	r3, [pc, #376]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801194a:	f107 020c 	add.w	r2, r7, #12
 801194e:	4611      	mov	r1, r2
 8011950:	4618      	mov	r0, r3
 8011952:	f002 fce5 	bl	8014320 <RegionChanMaskSet>
 8011956:	4603      	mov	r3, r0
 8011958:	f083 0301 	eor.w	r3, r3, #1
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	f000 8116 	beq.w	8011b90 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011964:	2303      	movs	r3, #3
 8011966:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011968:	e112      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011970:	2300      	movs	r3, #0
 8011972:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011974:	4b52      	ldr	r3, [pc, #328]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801197a:	f107 020c 	add.w	r2, r7, #12
 801197e:	4611      	mov	r1, r2
 8011980:	4618      	mov	r0, r3
 8011982:	f002 fccd 	bl	8014320 <RegionChanMaskSet>
 8011986:	4603      	mov	r3, r0
 8011988:	f083 0301 	eor.w	r3, r3, #1
 801198c:	b2db      	uxtb	r3, r3
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 8100 	beq.w	8011b94 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011994:	2303      	movs	r3, #3
 8011996:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011998:	e0fc      	b.n	8011b94 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	791b      	ldrb	r3, [r3, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d009      	beq.n	80119b6 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80119a6:	2b0f      	cmp	r3, #15
 80119a8:	d805      	bhi.n	80119b6 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	791a      	ldrb	r2, [r3, #4]
 80119ae:	4b44      	ldr	r3, [pc, #272]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119b4:	e0f1      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119b6:	2303      	movs	r3, #3
 80119b8:	75fb      	strb	r3, [r7, #23]
            break;
 80119ba:	e0ee      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	4a3f      	ldr	r2, [pc, #252]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 80119c4:	e0e9      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	4a3d      	ldr	r2, [pc, #244]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119cc:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 80119ce:	e0e4      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	4a3a      	ldr	r2, [pc, #232]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119d6:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80119d8:	e0df      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	4a38      	ldr	r2, [pc, #224]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119e0:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80119e2:	e0da      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	4a35      	ldr	r2, [pc, #212]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80119ec:	e0d5      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119f4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80119f6:	4b32      	ldr	r3, [pc, #200]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80119f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80119fc:	f107 0108 	add.w	r1, r7, #8
 8011a00:	2206      	movs	r2, #6
 8011a02:	4618      	mov	r0, r3
 8011a04:	f002 fc63 	bl	80142ce <RegionVerify>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d005      	beq.n	8011a1a <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011a0e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a12:	4b2b      	ldr	r3, [pc, #172]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a14:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a18:	e0bf      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a1a:	2303      	movs	r3, #3
 8011a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a1e:	e0bc      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a26:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a28:	4b25      	ldr	r3, [pc, #148]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a2a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011a2e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011a30:	4b23      	ldr	r3, [pc, #140]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a36:	f107 0108 	add.w	r1, r7, #8
 8011a3a:	2205      	movs	r2, #5
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f002 fc46 	bl	80142ce <RegionVerify>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d005      	beq.n	8011a54 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011a48:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a52:	e0a2      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a54:	2303      	movs	r3, #3
 8011a56:	75fb      	strb	r3, [r7, #23]
            break;
 8011a58:	e09f      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a60:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011a62:	4b17      	ldr	r3, [pc, #92]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a68:	f107 0108 	add.w	r1, r7, #8
 8011a6c:	220a      	movs	r2, #10
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f002 fc2d 	bl	80142ce <RegionVerify>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d005      	beq.n	8011a86 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011a7a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a7e:	4b10      	ldr	r3, [pc, #64]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a80:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a84:	e089      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a86:	2303      	movs	r3, #3
 8011a88:	75fb      	strb	r3, [r7, #23]
            break;
 8011a8a:	e086      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a92:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011a94:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a9a:	f107 0108 	add.w	r1, r7, #8
 8011a9e:	2209      	movs	r2, #9
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f002 fc14 	bl	80142ce <RegionVerify>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d005      	beq.n	8011ab8 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011aac:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011ab0:	4b03      	ldr	r3, [pc, #12]	@ (8011ac0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ab6:	e070      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	75fb      	strb	r3, [r7, #23]
            break;
 8011abc:	e06d      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
 8011abe:	bf00      	nop
 8011ac0:	20000b90 	.word	0x20000b90
 8011ac4:	0801c298 	.word	0x0801c298
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	4a3a      	ldr	r2, [pc, #232]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ace:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8011ad2:	4b39      	ldr	r3, [pc, #228]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ad8:	4a37      	ldr	r2, [pc, #220]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ada:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8011adc:	e05d      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	791a      	ldrb	r2, [r3, #4]
 8011ae2:	4b35      	ldr	r3, [pc, #212]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ae4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8011ae8:	4b33      	ldr	r3, [pc, #204]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011aea:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011aee:	4b32      	ldr	r3, [pc, #200]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011af0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8011af4:	e051      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	4a2f      	ldr	r2, [pc, #188]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011afc:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8011afe:	e04c      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	4a2c      	ldr	r2, [pc, #176]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011b06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 8011b0a:	e046      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011b0c:	f7fe fdc8 	bl	80106a0 <RestoreNvmData>
 8011b10:	4603      	mov	r3, r0
 8011b12:	75fb      	strb	r3, [r7, #23]
            break;
 8011b14:	e041      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	799b      	ldrb	r3, [r3, #6]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d80d      	bhi.n	8011b3a <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011b1e:	4a26      	ldr	r2, [pc, #152]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6858      	ldr	r0, [r3, #4]
 8011b2c:	f001 fd14 	bl	8013558 <LoRaMacCryptoSetLrWanVersion>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d030      	beq.n	8011b98 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b36:	2311      	movs	r3, #17
 8011b38:	e03a      	b.n	8011bb0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b3e:	e02b      	b.n	8011b98 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	4a1c      	ldr	r2, [pc, #112]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011b46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011b4a:	e026      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	791a      	ldrb	r2, [r3, #4]
 8011b50:	4b19      	ldr	r3, [pc, #100]	@ (8011bb8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011b52:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8011b56:	e020      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fc88 	bl	801246e <LoRaMacMibClassBSetRequestConfirm>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	75fb      	strb	r3, [r7, #23]
            break;
 8011b62:	e01a      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b64:	bf00      	nop
 8011b66:	e018      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b68:	bf00      	nop
 8011b6a:	e016      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b6c:	bf00      	nop
 8011b6e:	e014      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b70:	bf00      	nop
 8011b72:	e012      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b74:	bf00      	nop
 8011b76:	e010      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b78:	bf00      	nop
 8011b7a:	e00e      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b7c:	bf00      	nop
 8011b7e:	e00c      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b80:	bf00      	nop
 8011b82:	e00a      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b84:	bf00      	nop
 8011b86:	e008      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b88:	bf00      	nop
 8011b8a:	e006      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b8c:	bf00      	nop
 8011b8e:	e004      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b90:	bf00      	nop
 8011b92:	e002      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b94:	bf00      	nop
 8011b96:	e000      	b.n	8011b9a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011b98:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8011b9a:	7dfb      	ldrb	r3, [r7, #23]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011ba0:	4a06      	ldr	r2, [pc, #24]	@ (8011bbc <LoRaMacMibSetRequestConfirm+0x6dc>)
 8011ba2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011baa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	20000b90 	.word	0x20000b90
 8011bbc:	20000670 	.word	0x20000670

08011bc0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b08a      	sub	sp, #40	@ 0x28
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011bc8:	2302      	movs	r3, #2
 8011bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011bce:	2300      	movs	r3, #0
 8011bd0:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d101      	bne.n	8011bdc <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bd8:	2303      	movs	r3, #3
 8011bda:	e16c      	b.n	8011eb6 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011be2:	f7fc fc5f 	bl	800e4a4 <LoRaMacIsBusy>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d001      	beq.n	8011bf0 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8011bec:	2301      	movs	r3, #1
 8011bee:	e162      	b.n	8011eb6 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011bf0:	f001 f956 	bl	8012ea0 <LoRaMacConfirmQueueIsFull>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d001      	beq.n	8011bfe <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e15b      	b.n	8011eb6 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bfe:	f001 f943 	bl	8012e88 <LoRaMacConfirmQueueGetCnt>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d104      	bne.n	8011c12 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011c08:	2214      	movs	r2, #20
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	48ac      	ldr	r0, [pc, #688]	@ (8011ec0 <LoRaMacMlmeRequest+0x300>)
 8011c0e:	f004 fdff 	bl	8016810 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c12:	4bac      	ldr	r3, [pc, #688]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011c14:	2201      	movs	r2, #1
 8011c16:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011c1a:	4aaa      	ldr	r2, [pc, #680]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011c1c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011c20:	f043 0304 	orr.w	r3, r3, #4
 8011c24:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c30:	2301      	movs	r3, #1
 8011c32:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011c36:	2300      	movs	r3, #0
 8011c38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	3b01      	subs	r3, #1
 8011c48:	2b0c      	cmp	r3, #12
 8011c4a:	f200 8108 	bhi.w	8011e5e <LoRaMacMlmeRequest+0x29e>
 8011c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c54 <LoRaMacMlmeRequest+0x94>)
 8011c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c54:	08011c89 	.word	0x08011c89
 8011c58:	08011e5f 	.word	0x08011e5f
 8011c5c:	08011e5f 	.word	0x08011e5f
 8011c60:	08011d5f 	.word	0x08011d5f
 8011c64:	08011d81 	.word	0x08011d81
 8011c68:	08011e5f 	.word	0x08011e5f
 8011c6c:	08011e5f 	.word	0x08011e5f
 8011c70:	08011e5f 	.word	0x08011e5f
 8011c74:	08011d9f 	.word	0x08011d9f
 8011c78:	08011e5f 	.word	0x08011e5f
 8011c7c:	08011e2d 	.word	0x08011e2d
 8011c80:	08011dc1 	.word	0x08011dc1
 8011c84:	08011e0b 	.word	0x08011e0b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011c88:	4b8e      	ldr	r3, [pc, #568]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011c8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011c8e:	f003 0320 	and.w	r3, r3, #32
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8011c96:	2301      	movs	r3, #1
 8011c98:	e10d      	b.n	8011eb6 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	791b      	ldrb	r3, [r3, #4]
 8011c9e:	2b02      	cmp	r3, #2
 8011ca0:	d12e      	bne.n	8011d00 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8011ca2:	f7fe f997 	bl	800ffd4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011ca6:	4b88      	ldr	r3, [pc, #544]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011ca8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	795b      	ldrb	r3, [r3, #5]
 8011cb0:	b25b      	sxtb	r3, r3
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	f002 fbf2 	bl	801449e <RegionAlternateDr>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	4b82      	ldr	r3, [pc, #520]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011cc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011cc4:	2307      	movs	r3, #7
 8011cc6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8011cca:	20ff      	movs	r0, #255	@ 0xff
 8011ccc:	f7fd ff00 	bl	800fad0 <SendReJoinReq>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8011cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f000 80c1 	beq.w	8011e62 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011ce0:	4b79      	ldr	r3, [pc, #484]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011ce2:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	795b      	ldrb	r3, [r3, #5]
 8011cea:	b25b      	sxtb	r3, r3
 8011cec:	2201      	movs	r2, #1
 8011cee:	4619      	mov	r1, r3
 8011cf0:	f002 fbd5 	bl	801449e <RegionAlternateDr>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	4b73      	ldr	r3, [pc, #460]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011cfa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011cfe:	e0b0      	b.n	8011e62 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	791b      	ldrb	r3, [r3, #4]
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	f040 80ac 	bne.w	8011e62 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011d12:	2302      	movs	r3, #2
 8011d14:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011d16:	4b6c      	ldr	r3, [pc, #432]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011d18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d1c:	f107 020c 	add.w	r2, r7, #12
 8011d20:	4611      	mov	r1, r2
 8011d22:	4618      	mov	r0, r3
 8011d24:	f002 fac1 	bl	80142aa <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	791a      	ldrb	r2, [r3, #4]
 8011d2c:	4b66      	ldr	r3, [pc, #408]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011d2e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011d32:	2300      	movs	r3, #0
 8011d34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8011d3e:	4b61      	ldr	r3, [pc, #388]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011d40:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011d48:	4a5e      	ldr	r2, [pc, #376]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011d4a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011d4e:	f043 0320 	orr.w	r3, r3, #32
 8011d52:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011d5c:	e081      	b.n	8011e62 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d64:	f107 031c 	add.w	r3, r7, #28
 8011d68:	2200      	movs	r2, #0
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	2002      	movs	r0, #2
 8011d6e:	f000 fcfd 	bl	801276c <LoRaMacCommandsAddCmd>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d076      	beq.n	8011e66 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d78:	2313      	movs	r3, #19
 8011d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8011d7e:	e072      	b.n	8011e66 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	8898      	ldrh	r0, [r3, #4]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6899      	ldr	r1, [r3, #8]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	461a      	mov	r2, r3
 8011d92:	f7fe fc65 	bl	8010660 <SetTxContinuousWave>
 8011d96:	4603      	mov	r3, r0
 8011d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011d9c:	e06a      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011da4:	f107 031c 	add.w	r3, r7, #28
 8011da8:	2200      	movs	r2, #0
 8011daa:	4619      	mov	r1, r3
 8011dac:	200d      	movs	r0, #13
 8011dae:	f000 fcdd 	bl	801276c <LoRaMacCommandsAddCmd>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d058      	beq.n	8011e6a <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011db8:	2313      	movs	r3, #19
 8011dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8011dbe:	e054      	b.n	8011e6a <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011dc0:	4b41      	ldr	r3, [pc, #260]	@ (8011ec8 <LoRaMacMlmeRequest+0x308>)
 8011dc2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d151      	bne.n	8011e6e <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	791b      	ldrb	r3, [r3, #4]
 8011dce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	791b      	ldrb	r3, [r3, #4]
 8011dd6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f000 fb1b 	bl	8012418 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011de2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011de6:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8011de8:	2300      	movs	r3, #0
 8011dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011dee:	f107 031c 	add.w	r3, r7, #28
 8011df2:	2201      	movs	r2, #1
 8011df4:	4619      	mov	r1, r3
 8011df6:	2010      	movs	r0, #16
 8011df8:	f000 fcb8 	bl	801276c <LoRaMacCommandsAddCmd>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d035      	beq.n	8011e6e <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e02:	2313      	movs	r3, #19
 8011e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8011e08:	e031      	b.n	8011e6e <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011e10:	f107 031c 	add.w	r3, r7, #28
 8011e14:	2200      	movs	r2, #0
 8011e16:	4619      	mov	r1, r3
 8011e18:	2012      	movs	r0, #18
 8011e1a:	f000 fca7 	bl	801276c <LoRaMacCommandsAddCmd>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d026      	beq.n	8011e72 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e24:	2313      	movs	r3, #19
 8011e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8011e2a:	e022      	b.n	8011e72 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011e32:	f000 faa7 	bl	8012384 <LoRaMacClassBIsAcquisitionInProgress>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f083 0301 	eor.w	r3, r3, #1
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d009      	beq.n	8011e56 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011e42:	2000      	movs	r0, #0
 8011e44:	f000 fa80 	bl	8012348 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011e48:	2000      	movs	r0, #0
 8011e4a:	f000 faa2 	bl	8012392 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011e54:	e00e      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8011e56:	2301      	movs	r3, #1
 8011e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011e5c:	e00a      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8011e5e:	bf00      	nop
 8011e60:	e008      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
            break;
 8011e62:	bf00      	nop
 8011e64:	e006      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
            break;
 8011e66:	bf00      	nop
 8011e68:	e004      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
            break;
 8011e6a:	bf00      	nop
 8011e6c:	e002      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
            break;
 8011e6e:	bf00      	nop
 8011e70:	e000      	b.n	8011e74 <LoRaMacMlmeRequest+0x2b4>
            break;
 8011e72:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011e74:	4b13      	ldr	r3, [pc, #76]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011e76:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d010      	beq.n	8011ea8 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011e86:	f000 ffff 	bl	8012e88 <LoRaMacConfirmQueueGetCnt>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d110      	bne.n	8011eb2 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8011e90:	4b0c      	ldr	r3, [pc, #48]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011e92:	2200      	movs	r2, #0
 8011e94:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011e98:	4a0a      	ldr	r2, [pc, #40]	@ (8011ec4 <LoRaMacMlmeRequest+0x304>)
 8011e9a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011e9e:	f36f 0382 	bfc	r3, #2, #1
 8011ea2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8011ea6:	e004      	b.n	8011eb2 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011ea8:	f107 0320 	add.w	r3, r7, #32
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 fe9d 	bl	8012bec <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3728      	adds	r7, #40	@ 0x28
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	20000ac8 	.word	0x20000ac8
 8011ec4:	20000670 	.word	0x20000670
 8011ec8:	20000b90 	.word	0x20000b90

08011ecc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011ecc:	b5b0      	push	{r4, r5, r7, lr}
 8011ece:	b092      	sub	sp, #72	@ 0x48
 8011ed0:	af02      	add	r7, sp, #8
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ed8:	2302      	movs	r3, #2
 8011eda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d101      	bne.n	8011efe <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011efa:	2303      	movs	r3, #3
 8011efc:	e113      	b.n	8012126 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8011f04:	f7fc face 	bl	800e4a4 <LoRaMacIsBusy>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d001      	beq.n	8011f12 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	e109      	b.n	8012126 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f107 040c 	add.w	r4, r7, #12
 8011f18:	461d      	mov	r5, r3
 8011f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f1e:	682b      	ldr	r3, [r5, #0]
 8011f20:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011f28:	2214      	movs	r2, #20
 8011f2a:	2100      	movs	r1, #0
 8011f2c:	4880      	ldr	r0, [pc, #512]	@ (8012130 <LoRaMacMcpsRequest+0x264>)
 8011f2e:	f004 fc6f 	bl	8016810 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f32:	4b80      	ldr	r3, [pc, #512]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 8011f34:	2201      	movs	r2, #1
 8011f36:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8011f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8011f3c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011f40:	2b02      	cmp	r3, #2
 8011f42:	d111      	bne.n	8011f68 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8011f44:	4b7c      	ldr	r3, [pc, #496]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8011f46:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8011f4a:	2b02      	cmp	r3, #2
 8011f4c:	d10c      	bne.n	8011f68 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8011f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8011f50:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8011f54:	f083 0301 	eor.w	r3, r3, #1
 8011f58:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d004      	beq.n	8011f68 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8011f5e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d101      	bne.n	8011f68 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8011f64:	2301      	movs	r3, #1
 8011f66:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8011f68:	7b3b      	ldrb	r3, [r7, #12]
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d030      	beq.n	8011fd0 <LoRaMacMcpsRequest+0x104>
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	dc3f      	bgt.n	8011ff2 <LoRaMacMcpsRequest+0x126>
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d002      	beq.n	8011f7c <LoRaMacMcpsRequest+0xb0>
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d015      	beq.n	8011fa6 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011f7a:	e03a      	b.n	8011ff2 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011f82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011f86:	2202      	movs	r2, #2
 8011f88:	f362 1347 	bfi	r3, r2, #5, #3
 8011f8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8011f90:	7c3b      	ldrb	r3, [r7, #16]
 8011f92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8011f9a:	8b3b      	ldrh	r3, [r7, #24]
 8011f9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8011f9e:	7ebb      	ldrb	r3, [r7, #26]
 8011fa0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8011fa4:	e026      	b.n	8011ff4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011fac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011fb0:	2204      	movs	r2, #4
 8011fb2:	f362 1347 	bfi	r3, r2, #5, #3
 8011fb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8011fba:	7c3b      	ldrb	r3, [r7, #16]
 8011fbc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8011fc4:	8b3b      	ldrh	r3, [r7, #24]
 8011fc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8011fc8:	7ebb      	ldrb	r3, [r7, #26]
 8011fca:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8011fce:	e011      	b.n	8011ff4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011fda:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8011fde:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8011fe6:	8abb      	ldrh	r3, [r7, #20]
 8011fe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8011fea:	7dbb      	ldrb	r3, [r7, #22]
 8011fec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8011ff0:	e000      	b.n	8011ff4 <LoRaMacMcpsRequest+0x128>
            break;
 8011ff2:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8011ffc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012000:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012004:	4b4c      	ldr	r3, [pc, #304]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8012006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801200a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f002 f921 	bl	8014258 <RegionGetPhyParam>
 8012016:	4603      	mov	r3, r0
 8012018:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801201a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801201c:	b25b      	sxtb	r3, r3
 801201e:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8012022:	4293      	cmp	r3, r2
 8012024:	bfb8      	it	lt
 8012026:	4613      	movlt	r3, r2
 8012028:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801202c:	4b42      	ldr	r3, [pc, #264]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 801202e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012032:	4a41      	ldr	r2, [pc, #260]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8012034:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012038:	4a3f      	ldr	r2, [pc, #252]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 801203a:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801203e:	4618      	mov	r0, r3
 8012040:	f7fc fbc8 	bl	800e7d4 <CheckForMinimumAbpDatarate>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d002      	beq.n	8012050 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801204c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012050:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012054:	2b00      	cmp	r3, #0
 8012056:	d05f      	beq.n	8012118 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012058:	4b37      	ldr	r3, [pc, #220]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 801205a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801205e:	f083 0301 	eor.w	r3, r3, #1
 8012062:	b2db      	uxtb	r3, r3
 8012064:	2b00      	cmp	r3, #0
 8012066:	d10e      	bne.n	8012086 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012068:	4b33      	ldr	r3, [pc, #204]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 801206a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801206e:	4a32      	ldr	r2, [pc, #200]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8012070:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012074:	4a30      	ldr	r2, [pc, #192]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8012076:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801207a:	4618      	mov	r0, r3
 801207c:	f7fc fbaa 	bl	800e7d4 <CheckForMinimumAbpDatarate>
 8012080:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012082:	2b00      	cmp	r3, #0
 8012084:	d01c      	beq.n	80120c0 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012086:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801208a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801208e:	4b2a      	ldr	r3, [pc, #168]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 8012090:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012098:	4b27      	ldr	r3, [pc, #156]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 801209a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801209e:	f107 0120 	add.w	r1, r7, #32
 80120a2:	2205      	movs	r2, #5
 80120a4:	4618      	mov	r0, r3
 80120a6:	f002 f912 	bl	80142ce <RegionVerify>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d005      	beq.n	80120bc <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80120b0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80120b4:	4b20      	ldr	r3, [pc, #128]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 80120b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80120ba:	e001      	b.n	80120c0 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80120bc:	2303      	movs	r3, #3
 80120be:	e032      	b.n	8012126 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80120c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012138 <LoRaMacMcpsRequest+0x26c>)
 80120c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120c6:	4a1b      	ldr	r2, [pc, #108]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 80120c8:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 80120cc:	4611      	mov	r1, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fc fc6a 	bl	800e9a8 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80120d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80120d6:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80120da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80120de:	78fb      	ldrb	r3, [r7, #3]
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	4613      	mov	r3, r2
 80120e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120e6:	f7fd fc0f 	bl	800f908 <Send>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80120f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10b      	bne.n	8012110 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80120f8:	7b3a      	ldrb	r2, [r7, #12]
 80120fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 80120fc:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012100:	4a0c      	ldr	r2, [pc, #48]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 8012102:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012106:	f043 0301 	orr.w	r3, r3, #1
 801210a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 801210e:	e003      	b.n	8012118 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012110:	4b08      	ldr	r3, [pc, #32]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 8012112:	2200      	movs	r2, #0
 8012114:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012118:	4b06      	ldr	r3, [pc, #24]	@ (8012134 <LoRaMacMcpsRequest+0x268>)
 801211a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	611a      	str	r2, [r3, #16]

    return status;
 8012122:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012126:	4618      	mov	r0, r3
 8012128:	3740      	adds	r7, #64	@ 0x40
 801212a:	46bd      	mov	sp, r7
 801212c:	bdb0      	pop	{r4, r5, r7, pc}
 801212e:	bf00      	nop
 8012130:	20000ab4 	.word	0x20000ab4
 8012134:	20000670 	.word	0x20000670
 8012138:	20000b90 	.word	0x20000b90

0801213c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	4603      	mov	r3, r0
 8012144:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012146:	79fb      	ldrb	r3, [r7, #7]
 8012148:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801214a:	4b0a      	ldr	r3, [pc, #40]	@ (8012174 <LoRaMacTestSetDutyCycleOn+0x38>)
 801214c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012150:	f107 010c 	add.w	r1, r7, #12
 8012154:	220f      	movs	r2, #15
 8012156:	4618      	mov	r0, r3
 8012158:	f002 f8b9 	bl	80142ce <RegionVerify>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d003      	beq.n	801216a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012162:	4a04      	ldr	r2, [pc, #16]	@ (8012174 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 801216a:	bf00      	nop
 801216c:	3710      	adds	r7, #16
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	20000b90 	.word	0x20000b90

08012178 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801217c:	f7fe ff26 	bl	8010fcc <LoRaMacStop>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d111      	bne.n	80121aa <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012186:	480a      	ldr	r0, [pc, #40]	@ (80121b0 <LoRaMacDeInitialization+0x38>)
 8012188:	f008 fc4c 	bl	801aa24 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801218c:	4809      	ldr	r0, [pc, #36]	@ (80121b4 <LoRaMacDeInitialization+0x3c>)
 801218e:	f008 fc49 	bl	801aa24 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012192:	4809      	ldr	r0, [pc, #36]	@ (80121b8 <LoRaMacDeInitialization+0x40>)
 8012194:	f008 fc46 	bl	801aa24 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012198:	f000 f948 	bl	801242c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801219c:	f7fd ff1a 	bl	800ffd4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80121a0:	4b06      	ldr	r3, [pc, #24]	@ (80121bc <LoRaMacDeInitialization+0x44>)
 80121a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80121a6:	2300      	movs	r3, #0
 80121a8:	e000      	b.n	80121ac <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80121aa:	2301      	movs	r3, #1
    }
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	200009d8 	.word	0x200009d8
 80121b4:	200009f0 	.word	0x200009f0
 80121b8:	20000a08 	.word	0x20000a08
 80121bc:	0801c298 	.word	0x0801c298

080121c0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b08c      	sub	sp, #48	@ 0x30
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
 80121cc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80121ce:	2300      	movs	r3, #0
 80121d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	7b1b      	ldrb	r3, [r3, #12]
 80121d8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	7b5b      	ldrb	r3, [r3, #13]
 80121e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	7b9b      	ldrb	r3, [r3, #14]
 80121e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685a      	ldr	r2, [r3, #4]
 80121f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	785b      	ldrb	r3, [r3, #1]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f000 8088 	beq.w	801230e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80121fe:	2302      	movs	r3, #2
 8012200:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	7bdb      	ldrb	r3, [r3, #15]
 8012208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	7c1b      	ldrb	r3, [r3, #16]
 8012210:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012214:	4611      	mov	r1, r2
 8012216:	4618      	mov	r0, r3
 8012218:	f002 f81e 	bl	8014258 <RegionGetPhyParam>
 801221c:	4603      	mov	r3, r0
 801221e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012226:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801222a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 801222e:	4293      	cmp	r3, r2
 8012230:	bfb8      	it	lt
 8012232:	4613      	movlt	r3, r2
 8012234:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	8912      	ldrh	r2, [r2, #8]
 8012240:	4293      	cmp	r3, r2
 8012242:	d302      	bcc.n	801224a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012244:	2301      	movs	r3, #1
 8012246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	8912      	ldrh	r2, [r2, #8]
 8012252:	4611      	mov	r1, r2
 8012254:	68fa      	ldr	r2, [r7, #12]
 8012256:	8952      	ldrh	r2, [r2, #10]
 8012258:	440a      	add	r2, r1
 801225a:	4293      	cmp	r3, r2
 801225c:	d30f      	bcc.n	801227e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801225e:	230a      	movs	r3, #10
 8012260:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	7c1b      	ldrb	r3, [r3, #16]
 8012268:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801226c:	4611      	mov	r1, r2
 801226e:	4618      	mov	r0, r3
 8012270:	f001 fff2 	bl	8014258 <RegionGetPhyParam>
 8012274:	4603      	mov	r3, r0
 8012276:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	68fa      	ldr	r2, [r7, #12]
 8012284:	8912      	ldrh	r2, [r2, #8]
 8012286:	4611      	mov	r1, r2
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	8952      	ldrh	r2, [r2, #10]
 801228c:	0052      	lsls	r2, r2, #1
 801228e:	440a      	add	r2, r1
 8012290:	4293      	cmp	r3, r2
 8012292:	d33c      	bcc.n	801230e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	8912      	ldrh	r2, [r2, #8]
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	68fa      	ldr	r2, [r7, #12]
 80122a0:	8952      	ldrh	r2, [r2, #10]
 80122a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80122a6:	fb01 f202 	mul.w	r2, r1, r2
 80122aa:	1a9b      	subs	r3, r3, r2
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d12e      	bne.n	801230e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80122b0:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80122b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d110      	bne.n	80122de <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d009      	beq.n	80122d8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80122c4:	2302      	movs	r3, #2
 80122c6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	7c1b      	ldrb	r3, [r3, #16]
 80122cc:	f107 0210 	add.w	r2, r7, #16
 80122d0:	4611      	mov	r1, r2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f001 ffe9 	bl	80142aa <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80122d8:	2301      	movs	r3, #1
 80122da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80122de:	2321      	movs	r3, #33	@ 0x21
 80122e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80122e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80122e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	7bdb      	ldrb	r3, [r3, #15]
 80122f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	7c1b      	ldrb	r3, [r3, #16]
 80122f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80122fc:	4611      	mov	r1, r2
 80122fe:	4618      	mov	r0, r3
 8012300:	f001 ffaa 	bl	8014258 <RegionGetPhyParam>
 8012304:	4603      	mov	r3, r0
 8012306:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012314:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 801231c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012324:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801232a:	4618      	mov	r0, r3
 801232c:	3730      	adds	r7, #48	@ 0x30
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012332:	b480      	push	{r7}
 8012334:	b085      	sub	sp, #20
 8012336:	af00      	add	r7, sp, #0
 8012338:	60f8      	str	r0, [r7, #12]
 801233a:	60b9      	str	r1, [r7, #8]
 801233c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801233e:	bf00      	nop
 8012340:	3714      	adds	r7, #20
 8012342:	46bd      	mov	sp, r7
 8012344:	bc80      	pop	{r7}
 8012346:	4770      	bx	lr

08012348 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012352:	bf00      	nop
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	bc80      	pop	{r7}
 801235a:	4770      	bx	lr

0801235c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	4603      	mov	r3, r0
 8012364:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012366:	bf00      	nop
 8012368:	370c      	adds	r7, #12
 801236a:	46bd      	mov	sp, r7
 801236c:	bc80      	pop	{r7}
 801236e:	4770      	bx	lr

08012370 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801237a:	bf00      	nop
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	bc80      	pop	{r7}
 8012382:	4770      	bx	lr

08012384 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012384:	b480      	push	{r7}
 8012386:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012388:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801238a:	4618      	mov	r0, r3
 801238c:	46bd      	mov	sp, r7
 801238e:	bc80      	pop	{r7}
 8012390:	4770      	bx	lr

08012392 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012392:	b480      	push	{r7}
 8012394:	b083      	sub	sp, #12
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801239a:	bf00      	nop
 801239c:	370c      	adds	r7, #12
 801239e:	46bd      	mov	sp, r7
 80123a0:	bc80      	pop	{r7}
 80123a2:	4770      	bx	lr

080123a4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80123a4:	b480      	push	{r7}
 80123a6:	b083      	sub	sp, #12
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123ac:	bf00      	nop
 80123ae:	370c      	adds	r7, #12
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bc80      	pop	{r7}
 80123b4:	4770      	bx	lr

080123b6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80123b6:	b480      	push	{r7}
 80123b8:	b083      	sub	sp, #12
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123be:	bf00      	nop
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bc80      	pop	{r7}
 80123c6:	4770      	bx	lr

080123c8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80123c8:	b480      	push	{r7}
 80123ca:	b083      	sub	sp, #12
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	460b      	mov	r3, r1
 80123d2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80123d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	370c      	adds	r7, #12
 80123da:	46bd      	mov	sp, r7
 80123dc:	bc80      	pop	{r7}
 80123de:	4770      	bx	lr

080123e0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80123e0:	b480      	push	{r7}
 80123e2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80123e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bc80      	pop	{r7}
 80123ec:	4770      	bx	lr

080123ee <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80123ee:	b480      	push	{r7}
 80123f0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80123f2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bc80      	pop	{r7}
 80123fa:	4770      	bx	lr

080123fc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80123fc:	b480      	push	{r7}
 80123fe:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012400:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012402:	4618      	mov	r0, r3
 8012404:	46bd      	mov	sp, r7
 8012406:	bc80      	pop	{r7}
 8012408:	4770      	bx	lr

0801240a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801240a:	b480      	push	{r7}
 801240c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801240e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012410:	4618      	mov	r0, r3
 8012412:	46bd      	mov	sp, r7
 8012414:	bc80      	pop	{r7}
 8012416:	4770      	bx	lr

08012418 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012422:	bf00      	nop
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	bc80      	pop	{r7}
 801242a:	4770      	bx	lr

0801242c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801242c:	b480      	push	{r7}
 801242e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012430:	bf00      	nop
 8012432:	46bd      	mov	sp, r7
 8012434:	bc80      	pop	{r7}
 8012436:	4770      	bx	lr

08012438 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012438:	b480      	push	{r7}
 801243a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801243c:	bf00      	nop
 801243e:	46bd      	mov	sp, r7
 8012440:	bc80      	pop	{r7}
 8012442:	4770      	bx	lr

08012444 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	4603      	mov	r3, r0
 801244c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801244e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012450:	4618      	mov	r0, r3
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	bc80      	pop	{r7}
 8012458:	4770      	bx	lr

0801245a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012462:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012464:	4618      	mov	r0, r3
 8012466:	370c      	adds	r7, #12
 8012468:	46bd      	mov	sp, r7
 801246a:	bc80      	pop	{r7}
 801246c:	4770      	bx	lr

0801246e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801246e:	b480      	push	{r7}
 8012470:	b083      	sub	sp, #12
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012476:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	bc80      	pop	{r7}
 8012480:	4770      	bx	lr

08012482 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012482:	b480      	push	{r7}
 8012484:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012486:	bf00      	nop
 8012488:	46bd      	mov	sp, r7
 801248a:	bc80      	pop	{r7}
 801248c:	4770      	bx	lr

0801248e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801248e:	b480      	push	{r7}
 8012490:	b083      	sub	sp, #12
 8012492:	af00      	add	r7, sp, #0
 8012494:	4603      	mov	r3, r0
 8012496:	6039      	str	r1, [r7, #0]
 8012498:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801249a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801249c:	4618      	mov	r0, r3
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bc80      	pop	{r7}
 80124a4:	4770      	bx	lr

080124a6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80124a6:	b480      	push	{r7}
 80124a8:	b083      	sub	sp, #12
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	4603      	mov	r3, r0
 80124ae:	603a      	str	r2, [r7, #0]
 80124b0:	80fb      	strh	r3, [r7, #6]
 80124b2:	460b      	mov	r3, r1
 80124b4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124b6:	bf00      	nop
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bc80      	pop	{r7}
 80124be:	4770      	bx	lr

080124c0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80124c0:	b480      	push	{r7}
 80124c2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124c4:	bf00      	nop
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bc80      	pop	{r7}
 80124ca:	4770      	bx	lr

080124cc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80124d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	bc80      	pop	{r7}
 80124de:	4770      	bx	lr

080124e0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80124e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	370c      	adds	r7, #12
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bc80      	pop	{r7}
 80124f2:	4770      	bx	lr

080124f4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80124f4:	b480      	push	{r7}
 80124f6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124f8:	bf00      	nop
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bc80      	pop	{r7}
 80124fe:	4770      	bx	lr

08012500 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	460b      	mov	r3, r1
 801250a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801250c:	bf00      	nop
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	bc80      	pop	{r7}
 8012514:	4770      	bx	lr

08012516 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012516:	b480      	push	{r7}
 8012518:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801251a:	bf00      	nop
 801251c:	46bd      	mov	sp, r7
 801251e:	bc80      	pop	{r7}
 8012520:	4770      	bx	lr

08012522 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012522:	b480      	push	{r7}
 8012524:	b085      	sub	sp, #20
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801252e:	2300      	movs	r3, #0
 8012530:	81fb      	strh	r3, [r7, #14]
 8012532:	e00a      	b.n	801254a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012534:	89fb      	ldrh	r3, [r7, #14]
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	4413      	add	r3, r2
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <IsSlotFree+0x22>
        {
            return false;
 8012540:	2300      	movs	r3, #0
 8012542:	e006      	b.n	8012552 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012544:	89fb      	ldrh	r3, [r7, #14]
 8012546:	3301      	adds	r3, #1
 8012548:	81fb      	strh	r3, [r7, #14]
 801254a:	89fb      	ldrh	r3, [r7, #14]
 801254c:	2b0f      	cmp	r3, #15
 801254e:	d9f1      	bls.n	8012534 <IsSlotFree+0x12>
        }
    }
    return true;
 8012550:	2301      	movs	r3, #1
}
 8012552:	4618      	mov	r0, r3
 8012554:	3714      	adds	r7, #20
 8012556:	46bd      	mov	sp, r7
 8012558:	bc80      	pop	{r7}
 801255a:	4770      	bx	lr

0801255c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012562:	2300      	movs	r3, #0
 8012564:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012566:	e007      	b.n	8012578 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012568:	79fb      	ldrb	r3, [r7, #7]
 801256a:	3301      	adds	r3, #1
 801256c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801256e:	79fb      	ldrb	r3, [r7, #7]
 8012570:	2b20      	cmp	r3, #32
 8012572:	d101      	bne.n	8012578 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012574:	2300      	movs	r3, #0
 8012576:	e012      	b.n	801259e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	011b      	lsls	r3, r3, #4
 801257c:	3308      	adds	r3, #8
 801257e:	4a0a      	ldr	r2, [pc, #40]	@ (80125a8 <MallocNewMacCommandSlot+0x4c>)
 8012580:	4413      	add	r3, r2
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff ffcd 	bl	8012522 <IsSlotFree>
 8012588:	4603      	mov	r3, r0
 801258a:	f083 0301 	eor.w	r3, r3, #1
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1e9      	bne.n	8012568 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012594:	79fb      	ldrb	r3, [r7, #7]
 8012596:	011b      	lsls	r3, r3, #4
 8012598:	3308      	adds	r3, #8
 801259a:	4a03      	ldr	r2, [pc, #12]	@ (80125a8 <MallocNewMacCommandSlot+0x4c>)
 801259c:	4413      	add	r3, r2
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	20001730 	.word	0x20001730

080125ac <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d101      	bne.n	80125be <FreeMacCommandSlot+0x12>
    {
        return false;
 80125ba:	2300      	movs	r3, #0
 80125bc:	e005      	b.n	80125ca <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80125be:	2210      	movs	r2, #16
 80125c0:	2100      	movs	r1, #0
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f004 f924 	bl	8016810 <memset1>

    return true;
 80125c8:	2301      	movs	r3, #1
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3708      	adds	r7, #8
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80125d2:	b480      	push	{r7}
 80125d4:	b083      	sub	sp, #12
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d101      	bne.n	80125e4 <LinkedListInit+0x12>
    {
        return false;
 80125e0:	2300      	movs	r3, #0
 80125e2:	e006      	b.n	80125f2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	605a      	str	r2, [r3, #4]

    return true;
 80125f0:	2301      	movs	r3, #1
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bc80      	pop	{r7}
 80125fa:	4770      	bx	lr

080125fc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d002      	beq.n	8012612 <LinkedListAdd+0x16>
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d101      	bne.n	8012616 <LinkedListAdd+0x1a>
    {
        return false;
 8012612:	2300      	movs	r3, #0
 8012614:	e015      	b.n	8012642 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d102      	bne.n	8012624 <LinkedListAdd+0x28>
    {
        list->First = element;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	683a      	ldr	r2, [r7, #0]
 8012622:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d003      	beq.n	8012634 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	683a      	ldr	r2, [r7, #0]
 8012632:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	2200      	movs	r2, #0
 8012638:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	683a      	ldr	r2, [r7, #0]
 801263e:	605a      	str	r2, [r3, #4]

    return true;
 8012640:	2301      	movs	r3, #1
}
 8012642:	4618      	mov	r0, r3
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	bc80      	pop	{r7}
 801264a:	4770      	bx	lr

0801264c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d002      	beq.n	8012662 <LinkedListGetPrevious+0x16>
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012662:	2300      	movs	r3, #0
 8012664:	e016      	b.n	8012694 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	429a      	cmp	r2, r3
 8012672:	d00c      	beq.n	801268e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012674:	e002      	b.n	801267c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d007      	beq.n	8012692 <LinkedListGetPrevious+0x46>
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	683a      	ldr	r2, [r7, #0]
 8012688:	429a      	cmp	r2, r3
 801268a:	d1f4      	bne.n	8012676 <LinkedListGetPrevious+0x2a>
 801268c:	e001      	b.n	8012692 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012692:	68fb      	ldr	r3, [r7, #12]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	bc80      	pop	{r7}
 801269c:	4770      	bx	lr

0801269e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b084      	sub	sp, #16
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
 80126a6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d002      	beq.n	80126b4 <LinkedListRemove+0x16>
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d101      	bne.n	80126b8 <LinkedListRemove+0x1a>
    {
        return false;
 80126b4:	2300      	movs	r3, #0
 80126b6:	e020      	b.n	80126fa <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80126b8:	6839      	ldr	r1, [r7, #0]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff ffc6 	bl	801264c <LinkedListGetPrevious>
 80126c0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	683a      	ldr	r2, [r7, #0]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d103      	bne.n	80126d4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	683a      	ldr	r2, [r7, #0]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d102      	bne.n	80126e4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d003      	beq.n	80126f2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]

    return true;
 80126f8:	2301      	movs	r3, #1
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
	...

08012704 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801270e:	79fb      	ldrb	r3, [r7, #7]
 8012710:	2b11      	cmp	r3, #17
 8012712:	bf8c      	ite	hi
 8012714:	2201      	movhi	r2, #1
 8012716:	2200      	movls	r2, #0
 8012718:	b2d2      	uxtb	r2, r2
 801271a:	2a00      	cmp	r2, #0
 801271c:	d10d      	bne.n	801273a <IsSticky+0x36>
 801271e:	4a0a      	ldr	r2, [pc, #40]	@ (8012748 <IsSticky+0x44>)
 8012720:	fa22 f303 	lsr.w	r3, r2, r3
 8012724:	f003 0301 	and.w	r3, r3, #1
 8012728:	2b00      	cmp	r3, #0
 801272a:	bf14      	ite	ne
 801272c:	2301      	movne	r3, #1
 801272e:	2300      	moveq	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012736:	2301      	movs	r3, #1
 8012738:	e000      	b.n	801273c <IsSticky+0x38>
        default:
            return false;
 801273a:	2300      	movs	r3, #0
    }
}
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	bc80      	pop	{r7}
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	00020720 	.word	0x00020720

0801274c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012750:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8012754:	2100      	movs	r1, #0
 8012756:	4804      	ldr	r0, [pc, #16]	@ (8012768 <LoRaMacCommandsInit+0x1c>)
 8012758:	f004 f85a 	bl	8016810 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801275c:	4802      	ldr	r0, [pc, #8]	@ (8012768 <LoRaMacCommandsInit+0x1c>)
 801275e:	f7ff ff38 	bl	80125d2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012762:	2300      	movs	r3, #0
}
 8012764:	4618      	mov	r0, r3
 8012766:	bd80      	pop	{r7, pc}
 8012768:	20001730 	.word	0x20001730

0801276c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
 8012778:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d101      	bne.n	8012784 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012780:	2301      	movs	r3, #1
 8012782:	e033      	b.n	80127ec <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012784:	f7ff feea 	bl	801255c <MallocNewMacCommandSlot>
 8012788:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d101      	bne.n	8012794 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012790:	2302      	movs	r3, #2
 8012792:	e02b      	b.n	80127ec <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012794:	6979      	ldr	r1, [r7, #20]
 8012796:	4817      	ldr	r0, [pc, #92]	@ (80127f4 <LoRaMacCommandsAddCmd+0x88>)
 8012798:	f7ff ff30 	bl	80125fc <LinkedListAdd>
 801279c:	4603      	mov	r3, r0
 801279e:	f083 0301 	eor.w	r3, r3, #1
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d001      	beq.n	80127ac <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80127a8:	2305      	movs	r3, #5
 80127aa:	e01f      	b.n	80127ec <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	7bfa      	ldrb	r2, [r7, #15]
 80127b0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	3305      	adds	r3, #5
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	b292      	uxth	r2, r2
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f003 ffe9 	bl	801679a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80127c8:	7bfb      	ldrb	r3, [r7, #15]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff ff9a 	bl	8012704 <IsSticky>
 80127d0:	4603      	mov	r3, r0
 80127d2:	461a      	mov	r2, r3
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80127d8:	4b06      	ldr	r3, [pc, #24]	@ (80127f4 <LoRaMacCommandsAddCmd+0x88>)
 80127da:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4413      	add	r3, r2
 80127e2:	3301      	adds	r3, #1
 80127e4:	4a03      	ldr	r2, [pc, #12]	@ (80127f4 <LoRaMacCommandsAddCmd+0x88>)
 80127e6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	20001730 	.word	0x20001730

080127f8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d101      	bne.n	801280a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012806:	2301      	movs	r3, #1
 8012808:	e021      	b.n	801284e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801280a:	6879      	ldr	r1, [r7, #4]
 801280c:	4812      	ldr	r0, [pc, #72]	@ (8012858 <LoRaMacCommandsRemoveCmd+0x60>)
 801280e:	f7ff ff46 	bl	801269e <LinkedListRemove>
 8012812:	4603      	mov	r3, r0
 8012814:	f083 0301 	eor.w	r3, r3, #1
 8012818:	b2db      	uxtb	r3, r3
 801281a:	2b00      	cmp	r3, #0
 801281c:	d001      	beq.n	8012822 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801281e:	2303      	movs	r3, #3
 8012820:	e015      	b.n	801284e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012822:	4b0d      	ldr	r3, [pc, #52]	@ (8012858 <LoRaMacCommandsRemoveCmd+0x60>)
 8012824:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	689b      	ldr	r3, [r3, #8]
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	3b01      	subs	r3, #1
 8012830:	4a09      	ldr	r2, [pc, #36]	@ (8012858 <LoRaMacCommandsRemoveCmd+0x60>)
 8012832:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7ff feb8 	bl	80125ac <FreeMacCommandSlot>
 801283c:	4603      	mov	r3, r0
 801283e:	f083 0301 	eor.w	r3, r3, #1
 8012842:	b2db      	uxtb	r3, r3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012848:	2305      	movs	r3, #5
 801284a:	e000      	b.n	801284e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	3708      	adds	r7, #8
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	20001730 	.word	0x20001730

0801285c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012862:	4b0f      	ldr	r3, [pc, #60]	@ (80128a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012868:	e012      	b.n	8012890 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	7b1b      	ldrb	r3, [r3, #12]
 801286e:	f083 0301 	eor.w	r3, r3, #1
 8012872:	b2db      	uxtb	r3, r3
 8012874:	2b00      	cmp	r3, #0
 8012876:	d008      	beq.n	801288a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff ffba 	bl	80127f8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	607b      	str	r3, [r7, #4]
 8012888:	e002      	b.n	8012890 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1e9      	bne.n	801286a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012896:	2300      	movs	r3, #0
}
 8012898:	4618      	mov	r0, r3
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20001730 	.word	0x20001730

080128a4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80128aa:	4b0e      	ldr	r3, [pc, #56]	@ (80128e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80128b0:	e00f      	b.n	80128d2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	791b      	ldrb	r3, [r3, #4]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff ff21 	bl	8012704 <IsSticky>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff ff95 	bl	80127f8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d1ec      	bne.n	80128b2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	20001730 	.word	0x20001730

080128e8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80128f6:	2301      	movs	r3, #1
 80128f8:	e005      	b.n	8012906 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80128fa:	4b05      	ldr	r3, [pc, #20]	@ (8012910 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80128fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	bc80      	pop	{r7}
 801290e:	4770      	bx	lr
 8012910:	20001730 	.word	0x20001730

08012914 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b088      	sub	sp, #32
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	60b9      	str	r1, [r7, #8]
 801291e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012920:	4b25      	ldr	r3, [pc, #148]	@ (80129b8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012926:	2300      	movs	r3, #0
 8012928:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <LoRaMacCommandsSerializeCmds+0x22>
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d126      	bne.n	8012984 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012936:	2301      	movs	r3, #1
 8012938:	e039      	b.n	80129ae <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801293a:	7efb      	ldrb	r3, [r7, #27]
 801293c:	68fa      	ldr	r2, [r7, #12]
 801293e:	1ad2      	subs	r2, r2, r3
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	3301      	adds	r3, #1
 8012946:	429a      	cmp	r2, r3
 8012948:	d320      	bcc.n	801298c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801294a:	7efb      	ldrb	r3, [r7, #27]
 801294c:	1c5a      	adds	r2, r3, #1
 801294e:	76fa      	strb	r2, [r7, #27]
 8012950:	461a      	mov	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4413      	add	r3, r2
 8012956:	69fa      	ldr	r2, [r7, #28]
 8012958:	7912      	ldrb	r2, [r2, #4]
 801295a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801295c:	7efb      	ldrb	r3, [r7, #27]
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	18d0      	adds	r0, r2, r3
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	1d59      	adds	r1, r3, #5
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	b29b      	uxth	r3, r3
 801296c:	461a      	mov	r2, r3
 801296e:	f003 ff14 	bl	801679a <memcpy1>
            itr += curElement->PayloadSize;
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	b2da      	uxtb	r2, r3
 8012978:	7efb      	ldrb	r3, [r7, #27]
 801297a:	4413      	add	r3, r2
 801297c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801297e:	69fb      	ldr	r3, [r7, #28]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d1d7      	bne.n	801293a <LoRaMacCommandsSerializeCmds+0x26>
 801298a:	e009      	b.n	80129a0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801298c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801298e:	e007      	b.n	80129a0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012996:	69f8      	ldr	r0, [r7, #28]
 8012998:	f7ff ff2e 	bl	80127f8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1f4      	bne.n	8012990 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80129a6:	68b8      	ldr	r0, [r7, #8]
 80129a8:	f7ff ff9e 	bl	80128e8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3720      	adds	r7, #32
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	20001730 	.word	0x20001730

080129bc <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80129bc:	b480      	push	{r7}
 80129be:	b085      	sub	sp, #20
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d101      	bne.n	80129ce <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80129ca:	2301      	movs	r3, #1
 80129cc:	e016      	b.n	80129fc <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80129ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012a08 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80129da:	e00b      	b.n	80129f4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	7b1b      	ldrb	r3, [r3, #12]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d004      	beq.n	80129ee <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80129ea:	2300      	movs	r3, #0
 80129ec:	e006      	b.n	80129fc <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d1f0      	bne.n	80129dc <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80129fa:	2300      	movs	r3, #0
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3714      	adds	r7, #20
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bc80      	pop	{r7}
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	20001730 	.word	0x20001730

08012a0c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b085      	sub	sp, #20
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	4603      	mov	r3, r0
 8012a14:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	3b02      	subs	r3, #2
 8012a1e:	2b11      	cmp	r3, #17
 8012a20:	d850      	bhi.n	8012ac4 <LoRaMacCommandsGetCmdSize+0xb8>
 8012a22:	a201      	add	r2, pc, #4	@ (adr r2, 8012a28 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a28:	08012a71 	.word	0x08012a71
 8012a2c:	08012a77 	.word	0x08012a77
 8012a30:	08012a7d 	.word	0x08012a7d
 8012a34:	08012a83 	.word	0x08012a83
 8012a38:	08012a89 	.word	0x08012a89
 8012a3c:	08012a8f 	.word	0x08012a8f
 8012a40:	08012a95 	.word	0x08012a95
 8012a44:	08012a9b 	.word	0x08012a9b
 8012a48:	08012aa1 	.word	0x08012aa1
 8012a4c:	08012ac5 	.word	0x08012ac5
 8012a50:	08012ac5 	.word	0x08012ac5
 8012a54:	08012aa7 	.word	0x08012aa7
 8012a58:	08012ac5 	.word	0x08012ac5
 8012a5c:	08012ac5 	.word	0x08012ac5
 8012a60:	08012aad 	.word	0x08012aad
 8012a64:	08012ab3 	.word	0x08012ab3
 8012a68:	08012ab9 	.word	0x08012ab9
 8012a6c:	08012abf 	.word	0x08012abf
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012a70:	2303      	movs	r3, #3
 8012a72:	73fb      	strb	r3, [r7, #15]
            break;
 8012a74:	e027      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012a76:	2305      	movs	r3, #5
 8012a78:	73fb      	strb	r3, [r7, #15]
            break;
 8012a7a:	e024      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012a7c:	2302      	movs	r3, #2
 8012a7e:	73fb      	strb	r3, [r7, #15]
            break;
 8012a80:	e021      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012a82:	2305      	movs	r3, #5
 8012a84:	73fb      	strb	r3, [r7, #15]
            break;
 8012a86:	e01e      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	73fb      	strb	r3, [r7, #15]
            break;
 8012a8c:	e01b      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012a8e:	2306      	movs	r3, #6
 8012a90:	73fb      	strb	r3, [r7, #15]
            break;
 8012a92:	e018      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012a94:	2302      	movs	r3, #2
 8012a96:	73fb      	strb	r3, [r7, #15]
            break;
 8012a98:	e015      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012a9a:	2302      	movs	r3, #2
 8012a9c:	73fb      	strb	r3, [r7, #15]
            break;
 8012a9e:	e012      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012aa0:	2305      	movs	r3, #5
 8012aa2:	73fb      	strb	r3, [r7, #15]
            break;
 8012aa4:	e00f      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012aa6:	2306      	movs	r3, #6
 8012aa8:	73fb      	strb	r3, [r7, #15]
            break;
 8012aaa:	e00c      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012aac:	2301      	movs	r3, #1
 8012aae:	73fb      	strb	r3, [r7, #15]
            break;
 8012ab0:	e009      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012ab2:	2305      	movs	r3, #5
 8012ab4:	73fb      	strb	r3, [r7, #15]
            break;
 8012ab6:	e006      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012ab8:	2304      	movs	r3, #4
 8012aba:	73fb      	strb	r3, [r7, #15]
            break;
 8012abc:	e003      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012abe:	2304      	movs	r3, #4
 8012ac0:	73fb      	strb	r3, [r7, #15]
            break;
 8012ac2:	e000      	b.n	8012ac6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012ac4:	bf00      	nop
        }
    }
    return cidSize;
 8012ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3714      	adds	r7, #20
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bc80      	pop	{r7}
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop

08012ad4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4a07      	ldr	r2, [pc, #28]	@ (8012afc <IncreaseBufferPointer+0x28>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d102      	bne.n	8012aea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012ae4:	4b06      	ldr	r3, [pc, #24]	@ (8012b00 <IncreaseBufferPointer+0x2c>)
 8012ae6:	607b      	str	r3, [r7, #4]
 8012ae8:	e002      	b.n	8012af0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3304      	adds	r3, #4
 8012aee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012af0:	687b      	ldr	r3, [r7, #4]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bc80      	pop	{r7}
 8012afa:	4770      	bx	lr
 8012afc:	20001958 	.word	0x20001958
 8012b00:	20001948 	.word	0x20001948

08012b04 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <IsListEmpty+0x14>
    {
        return true;
 8012b14:	2301      	movs	r3, #1
 8012b16:	e000      	b.n	8012b1a <IsListEmpty+0x16>
    }
    return false;
 8012b18:	2300      	movs	r3, #0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bc80      	pop	{r7}
 8012b22:	4770      	bx	lr

08012b24 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	2b04      	cmp	r3, #4
 8012b32:	d901      	bls.n	8012b38 <IsListFull+0x14>
    {
        return true;
 8012b34:	2301      	movs	r3, #1
 8012b36:	e000      	b.n	8012b3a <IsListFull+0x16>
    }
    return false;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	370c      	adds	r7, #12
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bc80      	pop	{r7}
 8012b42:	4770      	bx	lr

08012b44 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
 8012b50:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012b56:	4b13      	ldr	r3, [pc, #76]	@ (8012ba4 <GetElement+0x60>)
 8012b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7ff ffd1 	bl	8012b04 <IsListEmpty>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <GetElement+0x28>
    {
        return NULL;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e017      	b.n	8012b9c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	74fb      	strb	r3, [r7, #19]
 8012b70:	e00d      	b.n	8012b8e <GetElement+0x4a>
    {
        if( element->Request == request )
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	7bfa      	ldrb	r2, [r7, #15]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d101      	bne.n	8012b80 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	e00d      	b.n	8012b9c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012b80:	6978      	ldr	r0, [r7, #20]
 8012b82:	f7ff ffa7 	bl	8012ad4 <IncreaseBufferPointer>
 8012b86:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012b88:	7cfb      	ldrb	r3, [r7, #19]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	74fb      	strb	r3, [r7, #19]
 8012b8e:	4b05      	ldr	r3, [pc, #20]	@ (8012ba4 <GetElement+0x60>)
 8012b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b94:	7cfa      	ldrb	r2, [r7, #19]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d3eb      	bcc.n	8012b72 <GetElement+0x2e>
    }

    return NULL;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3718      	adds	r7, #24
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	2000193c 	.word	0x2000193c

08012ba8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8012be4 <LoRaMacConfirmQueueInit+0x3c>)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8012be4 <LoRaMacConfirmQueueInit+0x3c>)
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012bbe:	4b09      	ldr	r3, [pc, #36]	@ (8012be4 <LoRaMacConfirmQueueInit+0x3c>)
 8012bc0:	4a09      	ldr	r2, [pc, #36]	@ (8012be8 <LoRaMacConfirmQueueInit+0x40>)
 8012bc2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012bc4:	4b07      	ldr	r3, [pc, #28]	@ (8012be4 <LoRaMacConfirmQueueInit+0x3c>)
 8012bc6:	4a08      	ldr	r2, [pc, #32]	@ (8012be8 <LoRaMacConfirmQueueInit+0x40>)
 8012bc8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012bca:	2214      	movs	r2, #20
 8012bcc:	21ff      	movs	r1, #255	@ 0xff
 8012bce:	4806      	ldr	r0, [pc, #24]	@ (8012be8 <LoRaMacConfirmQueueInit+0x40>)
 8012bd0:	f003 fe1e 	bl	8016810 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bd4:	4b03      	ldr	r3, [pc, #12]	@ (8012be4 <LoRaMacConfirmQueueInit+0x3c>)
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012bdc:	bf00      	nop
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	2000193c 	.word	0x2000193c
 8012be8:	20001948 	.word	0x20001948

08012bec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012bf4:	4b19      	ldr	r3, [pc, #100]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7ff ff92 	bl	8012b24 <IsListFull>
 8012c00:	4603      	mov	r3, r0
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d001      	beq.n	8012c0a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012c06:	2300      	movs	r3, #0
 8012c08:	e024      	b.n	8012c54 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012c0a:	4b14      	ldr	r3, [pc, #80]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c0c:	689b      	ldr	r3, [r3, #8]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	7812      	ldrb	r2, [r2, #0]
 8012c12:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012c14:	4b11      	ldr	r3, [pc, #68]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	7852      	ldrb	r2, [r2, #1]
 8012c1c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	687a      	ldr	r2, [r7, #4]
 8012c24:	78d2      	ldrb	r2, [r2, #3]
 8012c26:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012c28:	4b0c      	ldr	r3, [pc, #48]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c2a:	689b      	ldr	r3, [r3, #8]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	7892      	ldrb	r2, [r2, #2]
 8012c30:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012c32:	4b0a      	ldr	r3, [pc, #40]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	4b07      	ldr	r3, [pc, #28]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c3e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012c42:	4b06      	ldr	r3, [pc, #24]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff ff44 	bl	8012ad4 <IncreaseBufferPointer>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	4a03      	ldr	r2, [pc, #12]	@ (8012c5c <LoRaMacConfirmQueueAdd+0x70>)
 8012c50:	6093      	str	r3, [r2, #8]

    return true;
 8012c52:	2301      	movs	r3, #1
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	2000193c 	.word	0x2000193c

08012c60 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012c64:	4b0e      	ldr	r3, [pc, #56]	@ (8012ca0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff ff4a 	bl	8012b04 <IsListEmpty>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d001      	beq.n	8012c7a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012c76:	2300      	movs	r3, #0
 8012c78:	e010      	b.n	8012c9c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012c7a:	4b09      	ldr	r3, [pc, #36]	@ (8012ca0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c80:	3b01      	subs	r3, #1
 8012c82:	b2da      	uxtb	r2, r3
 8012c84:	4b06      	ldr	r3, [pc, #24]	@ (8012ca0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012c86:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012c8a:	4b05      	ldr	r3, [pc, #20]	@ (8012ca0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff ff20 	bl	8012ad4 <IncreaseBufferPointer>
 8012c94:	4603      	mov	r3, r0
 8012c96:	4a02      	ldr	r2, [pc, #8]	@ (8012ca0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012c98:	6053      	str	r3, [r2, #4]

    return true;
 8012c9a:	2301      	movs	r3, #1
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	2000193c 	.word	0x2000193c

08012ca4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	460a      	mov	r2, r1
 8012cae:	71fb      	strb	r3, [r7, #7]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012cb8:	4b10      	ldr	r3, [pc, #64]	@ (8012cfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7ff ff20 	bl	8012b04 <IsListEmpty>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	f083 0301 	eor.w	r3, r3, #1
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d011      	beq.n	8012cf4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012cfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012cd2:	6859      	ldr	r1, [r3, #4]
 8012cd4:	4b09      	ldr	r3, [pc, #36]	@ (8012cfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012cd6:	689a      	ldr	r2, [r3, #8]
 8012cd8:	79bb      	ldrb	r3, [r7, #6]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff ff32 	bl	8012b44 <GetElement>
 8012ce0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d005      	beq.n	8012cf4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	79fa      	ldrb	r2, [r7, #7]
 8012cec:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012cf4:	bf00      	nop
 8012cf6:	3710      	adds	r7, #16
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	2000193c 	.word	0x2000193c

08012d00 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012d0e:	4b10      	ldr	r3, [pc, #64]	@ (8012d50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7ff fef5 	bl	8012b04 <IsListEmpty>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	f083 0301 	eor.w	r3, r3, #1
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00e      	beq.n	8012d44 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012d26:	4b0a      	ldr	r3, [pc, #40]	@ (8012d50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012d28:	6859      	ldr	r1, [r3, #4]
 8012d2a:	4b09      	ldr	r3, [pc, #36]	@ (8012d50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012d2c:	689a      	ldr	r2, [r3, #8]
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7ff ff07 	bl	8012b44 <GetElement>
 8012d36:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d002      	beq.n	8012d44 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	785b      	ldrb	r3, [r3, #1]
 8012d42:	e000      	b.n	8012d46 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012d44:	2301      	movs	r3, #1
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	2000193c 	.word	0x2000193c

08012d54 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012d5e:	4b16      	ldr	r3, [pc, #88]	@ (8012db8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012d60:	685b      	ldr	r3, [r3, #4]
 8012d62:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012d64:	4a14      	ldr	r2, [pc, #80]	@ (8012db8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012d66:	79fb      	ldrb	r3, [r7, #7]
 8012d68:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012d6c:	4b12      	ldr	r3, [pc, #72]	@ (8012db8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7ff fec6 	bl	8012b04 <IsListEmpty>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	f083 0301 	eor.w	r3, r3, #1
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d015      	beq.n	8012db0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	79fa      	ldrb	r2, [r7, #7]
 8012d88:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	78db      	ldrb	r3, [r3, #3]
 8012d8e:	f083 0301 	eor.w	r3, r3, #1
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f7ff fe98 	bl	8012ad4 <IncreaseBufferPointer>
 8012da4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012da6:	4b04      	ldr	r3, [pc, #16]	@ (8012db8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d1e9      	bne.n	8012d84 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012db0:	bf00      	nop
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	2000193c 	.word	0x2000193c

08012dbc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012dc6:	4b09      	ldr	r3, [pc, #36]	@ (8012dec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012dc8:	6859      	ldr	r1, [r3, #4]
 8012dca:	4b08      	ldr	r3, [pc, #32]	@ (8012dec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012dcc:	689a      	ldr	r2, [r3, #8]
 8012dce:	79fb      	ldrb	r3, [r7, #7]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7ff feb7 	bl	8012b44 <GetElement>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e000      	b.n	8012de2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3708      	adds	r7, #8
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	2000193c 	.word	0x2000193c

08012df0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012df8:	4b22      	ldr	r3, [pc, #136]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dfe:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012e00:	2300      	movs	r3, #0
 8012e02:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012e04:	2300      	movs	r3, #0
 8012e06:	73fb      	strb	r3, [r7, #15]
 8012e08:	e032      	b.n	8012e70 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	781a      	ldrb	r2, [r3, #0]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012e14:	4b1b      	ldr	r3, [pc, #108]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	785a      	ldrb	r2, [r3, #1]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012e1e:	4b19      	ldr	r3, [pc, #100]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	789b      	ldrb	r3, [r3, #2]
 8012e24:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012e26:	7b7b      	ldrb	r3, [r7, #13]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d005      	beq.n	8012e38 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012e2c:	4b15      	ldr	r3, [pc, #84]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	689b      	ldr	r3, [r3, #8]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	4798      	blx	r3
 8012e36:	e00b      	b.n	8012e50 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012e38:	4b12      	ldr	r3, [pc, #72]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012e40:	4b10      	ldr	r3, [pc, #64]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	785b      	ldrb	r3, [r3, #1]
 8012e46:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012e48:	4b0e      	ldr	r3, [pc, #56]	@ (8012e84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	78db      	ldrb	r3, [r3, #3]
 8012e4e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012e50:	f7ff ff06 	bl	8012c60 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012e54:	7b7b      	ldrb	r3, [r7, #13]
 8012e56:	f083 0301 	eor.w	r3, r3, #1
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d004      	beq.n	8012e6a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012e60:	f107 0308 	add.w	r3, r7, #8
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7ff fec1 	bl	8012bec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	73fb      	strb	r3, [r7, #15]
 8012e70:	7bfa      	ldrb	r2, [r7, #15]
 8012e72:	7bbb      	ldrb	r3, [r7, #14]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d3c8      	bcc.n	8012e0a <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012e78:	bf00      	nop
 8012e7a:	bf00      	nop
 8012e7c:	3710      	adds	r7, #16
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	2000193c 	.word	0x2000193c

08012e88 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012e88:	b480      	push	{r7}
 8012e8a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012e8c:	4b03      	ldr	r3, [pc, #12]	@ (8012e9c <LoRaMacConfirmQueueGetCnt+0x14>)
 8012e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bc80      	pop	{r7}
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	2000193c 	.word	0x2000193c

08012ea0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ea4:	4b06      	ldr	r3, [pc, #24]	@ (8012ec0 <LoRaMacConfirmQueueIsFull+0x20>)
 8012ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff fe3a 	bl	8012b24 <IsListFull>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e000      	b.n	8012ebc <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012eba:	2300      	movs	r3, #0
    }
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	2000193c 	.word	0x2000193c

08012ec4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b08e      	sub	sp, #56	@ 0x38
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	607b      	str	r3, [r7, #4]
 8012ece:	460b      	mov	r3, r1
 8012ed0:	817b      	strh	r3, [r7, #10]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012edc:	2309      	movs	r3, #9
 8012ede:	e086      	b.n	8012fee <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8012eea:	2300      	movs	r3, #0
 8012eec:	623b      	str	r3, [r7, #32]
 8012eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	605a      	str	r2, [r3, #4]
 8012ef8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012efa:	2300      	movs	r3, #0
 8012efc:	613b      	str	r3, [r7, #16]
 8012efe:	f107 0314 	add.w	r3, r7, #20
 8012f02:	2200      	movs	r2, #0
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	605a      	str	r2, [r3, #4]
 8012f08:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012f0e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8012f12:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	0a1b      	lsrs	r3, r3, #8
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	0c1b      	lsrs	r3, r3, #16
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	0e1b      	lsrs	r3, r3, #24
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f3a:	0a1b      	lsrs	r3, r3, #8
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f42:	0c1b      	lsrs	r3, r3, #16
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f4a:	0e1b      	lsrs	r3, r3, #24
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012f50:	e048      	b.n	8012fe4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012f52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012f58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012f5e:	f107 0320 	add.w	r3, r7, #32
 8012f62:	7a7a      	ldrb	r2, [r7, #9]
 8012f64:	f107 0010 	add.w	r0, r7, #16
 8012f68:	2110      	movs	r1, #16
 8012f6a:	f7f8 fce2 	bl	800b932 <SecureElementAesEncrypt>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d001      	beq.n	8012f78 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f74:	230e      	movs	r3, #14
 8012f76:	e03a      	b.n	8012fee <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012f78:	2300      	movs	r3, #0
 8012f7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012f7e:	e01e      	b.n	8012fbe <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012f80:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012f88:	4413      	add	r3, r2
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	7819      	ldrb	r1, [r3, #0]
 8012f92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012f96:	3338      	adds	r3, #56	@ 0x38
 8012f98:	443b      	add	r3, r7
 8012f9a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012f9e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8012fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012fa6:	4403      	add	r3, r0
 8012fa8:	4618      	mov	r0, r3
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	4403      	add	r3, r0
 8012fae:	404a      	eors	r2, r1
 8012fb0:	b2d2      	uxtb	r2, r2
 8012fb2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012fb8:	3301      	adds	r3, #1
 8012fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012fc2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012fc6:	2a10      	cmp	r2, #16
 8012fc8:	bfa8      	it	ge
 8012fca:	2210      	movge	r2, #16
 8012fcc:	b212      	sxth	r2, r2
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	dbd6      	blt.n	8012f80 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012fd2:	897b      	ldrh	r3, [r7, #10]
 8012fd4:	3b10      	subs	r3, #16
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012fda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012fde:	3310      	adds	r3, #16
 8012fe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8012fe4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	dcb2      	bgt.n	8012f52 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3738      	adds	r7, #56	@ 0x38
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012ff6:	b490      	push	{r4, r7}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	4608      	mov	r0, r1
 8013000:	4611      	mov	r1, r2
 8013002:	461a      	mov	r2, r3
 8013004:	4623      	mov	r3, r4
 8013006:	80fb      	strh	r3, [r7, #6]
 8013008:	4603      	mov	r3, r0
 801300a:	717b      	strb	r3, [r7, #5]
 801300c:	460b      	mov	r3, r1
 801300e:	713b      	strb	r3, [r7, #4]
 8013010:	4613      	mov	r3, r2
 8013012:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801301a:	2309      	movs	r3, #9
 801301c:	e04e      	b.n	80130bc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	2249      	movs	r2, #73	@ 0x49
 8013022:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	3301      	adds	r3, #1
 8013028:	2200      	movs	r2, #0
 801302a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	3302      	adds	r3, #2
 8013030:	2200      	movs	r2, #0
 8013032:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	3303      	adds	r3, #3
 8013038:	2200      	movs	r2, #0
 801303a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	3304      	adds	r3, #4
 8013040:	2200      	movs	r2, #0
 8013042:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013044:	69bb      	ldr	r3, [r7, #24]
 8013046:	3305      	adds	r3, #5
 8013048:	78fa      	ldrb	r2, [r7, #3]
 801304a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801304c:	69bb      	ldr	r3, [r7, #24]
 801304e:	3306      	adds	r3, #6
 8013050:	693a      	ldr	r2, [r7, #16]
 8013052:	b2d2      	uxtb	r2, r2
 8013054:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	0a1a      	lsrs	r2, r3, #8
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	3307      	adds	r3, #7
 801305e:	b2d2      	uxtb	r2, r2
 8013060:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	0c1a      	lsrs	r2, r3, #16
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	3308      	adds	r3, #8
 801306a:	b2d2      	uxtb	r2, r2
 801306c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	0e1a      	lsrs	r2, r3, #24
 8013072:	69bb      	ldr	r3, [r7, #24]
 8013074:	3309      	adds	r3, #9
 8013076:	b2d2      	uxtb	r2, r2
 8013078:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801307a:	69bb      	ldr	r3, [r7, #24]
 801307c:	330a      	adds	r3, #10
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	b2d2      	uxtb	r2, r2
 8013082:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	0a1a      	lsrs	r2, r3, #8
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	330b      	adds	r3, #11
 801308c:	b2d2      	uxtb	r2, r2
 801308e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	0c1a      	lsrs	r2, r3, #16
 8013094:	69bb      	ldr	r3, [r7, #24]
 8013096:	330c      	adds	r3, #12
 8013098:	b2d2      	uxtb	r2, r2
 801309a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	0e1a      	lsrs	r2, r3, #24
 80130a0:	69bb      	ldr	r3, [r7, #24]
 80130a2:	330d      	adds	r3, #13
 80130a4:	b2d2      	uxtb	r2, r2
 80130a6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80130a8:	69bb      	ldr	r3, [r7, #24]
 80130aa:	330e      	adds	r3, #14
 80130ac:	2200      	movs	r2, #0
 80130ae:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	330f      	adds	r3, #15
 80130b4:	88fa      	ldrh	r2, [r7, #6]
 80130b6:	b2d2      	uxtb	r2, r2
 80130b8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bc90      	pop	{r4, r7}
 80130c4:	4770      	bx	lr

080130c6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80130c6:	b590      	push	{r4, r7, lr}
 80130c8:	b08b      	sub	sp, #44	@ 0x2c
 80130ca:	af04      	add	r7, sp, #16
 80130cc:	6078      	str	r0, [r7, #4]
 80130ce:	4608      	mov	r0, r1
 80130d0:	4611      	mov	r1, r2
 80130d2:	461a      	mov	r2, r3
 80130d4:	4603      	mov	r3, r0
 80130d6:	807b      	strh	r3, [r7, #2]
 80130d8:	460b      	mov	r3, r1
 80130da:	707b      	strb	r3, [r7, #1]
 80130dc:	4613      	mov	r3, r2
 80130de:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <ComputeCmacB0+0x26>
 80130e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130ec:	2309      	movs	r3, #9
 80130ee:	e024      	b.n	801313a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80130f0:	887b      	ldrh	r3, [r7, #2]
 80130f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80130f6:	d901      	bls.n	80130fc <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80130f8:	230d      	movs	r3, #13
 80130fa:	e01e      	b.n	801313a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80130fc:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013100:	783a      	ldrb	r2, [r7, #0]
 8013102:	7879      	ldrb	r1, [r7, #1]
 8013104:	8878      	ldrh	r0, [r7, #2]
 8013106:	f107 0308 	add.w	r3, r7, #8
 801310a:	9302      	str	r3, [sp, #8]
 801310c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801310e:	9301      	str	r3, [sp, #4]
 8013110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	4623      	mov	r3, r4
 8013116:	f7ff ff6e 	bl	8012ff6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801311a:	7879      	ldrb	r1, [r7, #1]
 801311c:	887a      	ldrh	r2, [r7, #2]
 801311e:	f107 0008 	add.w	r0, r7, #8
 8013122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013124:	9300      	str	r3, [sp, #0]
 8013126:	460b      	mov	r3, r1
 8013128:	6879      	ldr	r1, [r7, #4]
 801312a:	f7f8 fbb5 	bl	800b898 <SecureElementComputeAesCmac>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d001      	beq.n	8013138 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013134:	230e      	movs	r3, #14
 8013136:	e000      	b.n	801313a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013138:	2300      	movs	r3, #0
}
 801313a:	4618      	mov	r0, r3
 801313c:	371c      	adds	r7, #28
 801313e:	46bd      	mov	sp, r7
 8013140:	bd90      	pop	{r4, r7, pc}

08013142 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013142:	b590      	push	{r4, r7, lr}
 8013144:	b0cd      	sub	sp, #308	@ 0x134
 8013146:	af04      	add	r7, sp, #16
 8013148:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801314c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013150:	6020      	str	r0, [r4, #0]
 8013152:	460c      	mov	r4, r1
 8013154:	4610      	mov	r0, r2
 8013156:	4619      	mov	r1, r3
 8013158:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801315c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013160:	4622      	mov	r2, r4
 8013162:	801a      	strh	r2, [r3, #0]
 8013164:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013168:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801316c:	4602      	mov	r2, r0
 801316e:	701a      	strb	r2, [r3, #0]
 8013170:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013178:	460a      	mov	r2, r1
 801317a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801317c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013180:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801318a:	2309      	movs	r3, #9
 801318c:	e063      	b.n	8013256 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801318e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013192:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801319c:	d901      	bls.n	80131a2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801319e:	230d      	movs	r3, #13
 80131a0:	e059      	b.n	8013256 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80131a2:	f107 030c 	add.w	r3, r7, #12
 80131a6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80131aa:	2100      	movs	r1, #0
 80131ac:	4618      	mov	r0, r3
 80131ae:	f003 fb2f 	bl	8016810 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80131b2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80131b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80131ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80131be:	781a      	ldrb	r2, [r3, #0]
 80131c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80131c4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80131c8:	7819      	ldrb	r1, [r3, #0]
 80131ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80131ce:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80131d2:	8818      	ldrh	r0, [r3, #0]
 80131d4:	f107 030c 	add.w	r3, r7, #12
 80131d8:	9302      	str	r3, [sp, #8]
 80131da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	4623      	mov	r3, r4
 80131e8:	f7ff ff05 	bl	8012ff6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80131ec:	f107 030c 	add.w	r3, r7, #12
 80131f0:	3310      	adds	r3, #16
 80131f2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80131f6:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80131fa:	8812      	ldrh	r2, [r2, #0]
 80131fc:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013200:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013204:	6809      	ldr	r1, [r1, #0]
 8013206:	4618      	mov	r0, r3
 8013208:	f003 fac7 	bl	801679a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801320c:	2306      	movs	r3, #6
 801320e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013212:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013216:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801321a:	881b      	ldrh	r3, [r3, #0]
 801321c:	3310      	adds	r3, #16
 801321e:	b299      	uxth	r1, r3
 8013220:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013224:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	f107 000c 	add.w	r0, r7, #12
 801322e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013232:	f7f8 fb4f 	bl	800b8d4 <SecureElementVerifyAesCmac>
 8013236:	4603      	mov	r3, r0
 8013238:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801323c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013240:	2b00      	cmp	r3, #0
 8013242:	d101      	bne.n	8013248 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013244:	2300      	movs	r3, #0
 8013246:	e006      	b.n	8013256 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801324c:	2b01      	cmp	r3, #1
 801324e:	d101      	bne.n	8013254 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013250:	2301      	movs	r3, #1
 8013252:	e000      	b.n	8013256 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013254:	230e      	movs	r3, #14
}
 8013256:	4618      	mov	r0, r3
 8013258:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801325c:	46bd      	mov	sp, r7
 801325e:	bd90      	pop	{r4, r7, pc}

08013260 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013260:	b480      	push	{r7}
 8013262:	b085      	sub	sp, #20
 8013264:	af00      	add	r7, sp, #0
 8013266:	4603      	mov	r3, r0
 8013268:	6039      	str	r1, [r7, #0]
 801326a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]
 8013270:	e011      	b.n	8013296 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013272:	7bfb      	ldrb	r3, [r7, #15]
 8013274:	4a0c      	ldr	r2, [pc, #48]	@ (80132a8 <GetKeyAddrItem+0x48>)
 8013276:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801327a:	79fa      	ldrb	r2, [r7, #7]
 801327c:	429a      	cmp	r2, r3
 801327e:	d107      	bne.n	8013290 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013280:	7bfb      	ldrb	r3, [r7, #15]
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	4a08      	ldr	r2, [pc, #32]	@ (80132a8 <GetKeyAddrItem+0x48>)
 8013286:	441a      	add	r2, r3
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801328c:	2300      	movs	r3, #0
 801328e:	e006      	b.n	801329e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013290:	7bfb      	ldrb	r3, [r7, #15]
 8013292:	3301      	adds	r3, #1
 8013294:	73fb      	strb	r3, [r7, #15]
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d9ea      	bls.n	8013272 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801329c:	230b      	movs	r3, #11
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bc80      	pop	{r7}
 80132a6:	4770      	bx	lr
 80132a8:	20000120 	.word	0x20000120

080132ac <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b088      	sub	sp, #32
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	60b9      	str	r1, [r7, #8]
 80132b4:	607a      	str	r2, [r7, #4]
 80132b6:	461a      	mov	r2, r3
 80132b8:	4603      	mov	r3, r0
 80132ba:	73fb      	strb	r3, [r7, #15]
 80132bc:	4613      	mov	r3, r2
 80132be:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80132c0:	2300      	movs	r3, #0
 80132c2:	613b      	str	r3, [r7, #16]
 80132c4:	f107 0314 	add.w	r3, r7, #20
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
 80132cc:	605a      	str	r2, [r3, #4]
 80132ce:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80132d0:	7bfb      	ldrb	r3, [r7, #15]
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d002      	beq.n	80132dc <DeriveSessionKey10x+0x30>
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d003      	beq.n	80132e2 <DeriveSessionKey10x+0x36>
 80132da:	e005      	b.n	80132e8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80132dc:	2301      	movs	r3, #1
 80132de:	743b      	strb	r3, [r7, #16]
            break;
 80132e0:	e004      	b.n	80132ec <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80132e2:	2302      	movs	r3, #2
 80132e4:	743b      	strb	r3, [r7, #16]
            break;
 80132e6:	e001      	b.n	80132ec <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80132e8:	230a      	movs	r3, #10
 80132ea:	e02a      	b.n	8013342 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	0a1b      	lsrs	r3, r3, #8
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	0c1b      	lsrs	r3, r3, #16
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	b2db      	uxtb	r3, r3
 8013306:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	0a1b      	lsrs	r3, r3, #8
 801330c:	b2db      	uxtb	r3, r3
 801330e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	0c1b      	lsrs	r3, r3, #16
 8013314:	b2db      	uxtb	r3, r3
 8013316:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013318:	89bb      	ldrh	r3, [r7, #12]
 801331a:	b2db      	uxtb	r3, r3
 801331c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801331e:	89bb      	ldrh	r3, [r7, #12]
 8013320:	0a1b      	lsrs	r3, r3, #8
 8013322:	b29b      	uxth	r3, r3
 8013324:	b2db      	uxtb	r3, r3
 8013326:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013328:	7bfa      	ldrb	r2, [r7, #15]
 801332a:	f107 0310 	add.w	r3, r7, #16
 801332e:	2101      	movs	r1, #1
 8013330:	4618      	mov	r0, r3
 8013332:	f7f8 fb65 	bl	800ba00 <SecureElementDeriveAndStoreKey>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d001      	beq.n	8013340 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801333c:	230e      	movs	r3, #14
 801333e:	e000      	b.n	8013342 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013340:	2300      	movs	r3, #0
}
 8013342:	4618      	mov	r0, r3
 8013344:	3720      	adds	r7, #32
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
	...

0801334c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
 8013352:	4603      	mov	r3, r0
 8013354:	6039      	str	r1, [r7, #0]
 8013356:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d101      	bne.n	8013362 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801335e:	2309      	movs	r3, #9
 8013360:	e03b      	b.n	80133da <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	3b01      	subs	r3, #1
 8013366:	2b03      	cmp	r3, #3
 8013368:	d834      	bhi.n	80133d4 <GetLastFcntDown+0x88>
 801336a:	a201      	add	r2, pc, #4	@ (adr r2, 8013370 <GetLastFcntDown+0x24>)
 801336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013370:	08013381 	.word	0x08013381
 8013374:	08013399 	.word	0x08013399
 8013378:	080133b1 	.word	0x080133b1
 801337c:	080133c9 	.word	0x080133c9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013380:	4b18      	ldr	r3, [pc, #96]	@ (80133e4 <GetLastFcntDown+0x98>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	691a      	ldr	r2, [r3, #16]
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801338a:	4b16      	ldr	r3, [pc, #88]	@ (80133e4 <GetLastFcntDown+0x98>)
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	4b15      	ldr	r3, [pc, #84]	@ (80133e4 <GetLastFcntDown+0x98>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	6912      	ldr	r2, [r2, #16]
 8013394:	621a      	str	r2, [r3, #32]
            break;
 8013396:	e01f      	b.n	80133d8 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013398:	4b12      	ldr	r3, [pc, #72]	@ (80133e4 <GetLastFcntDown+0x98>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	695a      	ldr	r2, [r3, #20]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80133a2:	4b10      	ldr	r3, [pc, #64]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	4b0f      	ldr	r3, [pc, #60]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	6952      	ldr	r2, [r2, #20]
 80133ac:	621a      	str	r2, [r3, #32]
            break;
 80133ae:	e013      	b.n	80133d8 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80133b0:	4b0c      	ldr	r3, [pc, #48]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	699a      	ldr	r2, [r3, #24]
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80133ba:	4b0a      	ldr	r3, [pc, #40]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	4b09      	ldr	r3, [pc, #36]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	6992      	ldr	r2, [r2, #24]
 80133c4:	621a      	str	r2, [r3, #32]
            break;
 80133c6:	e007      	b.n	80133d8 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80133c8:	4b06      	ldr	r3, [pc, #24]	@ (80133e4 <GetLastFcntDown+0x98>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	69da      	ldr	r2, [r3, #28]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	601a      	str	r2, [r3, #0]
            break;
 80133d2:	e001      	b.n	80133d8 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80133d4:	2305      	movs	r3, #5
 80133d6:	e000      	b.n	80133da <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80133d8:	2300      	movs	r3, #0
}
 80133da:	4618      	mov	r0, r3
 80133dc:	370c      	adds	r7, #12
 80133de:	46bd      	mov	sp, r7
 80133e0:	bc80      	pop	{r7}
 80133e2:	4770      	bx	lr
 80133e4:	20001960 	.word	0x20001960

080133e8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	4603      	mov	r3, r0
 80133f0:	6039      	str	r1, [r7, #0]
 80133f2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80133f4:	2300      	movs	r3, #0
 80133f6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80133f8:	f107 020c 	add.w	r2, r7, #12
 80133fc:	79fb      	ldrb	r3, [r7, #7]
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f7ff ffa3 	bl	801334c <GetLastFcntDown>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d001      	beq.n	8013410 <CheckFCntDown+0x28>
    {
        return false;
 801340c:	2300      	movs	r3, #0
 801340e:	e00a      	b.n	8013426 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d803      	bhi.n	8013420 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013418:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341e:	d101      	bne.n	8013424 <CheckFCntDown+0x3c>
    {
        return true;
 8013420:	2301      	movs	r3, #1
 8013422:	e000      	b.n	8013426 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013424:	2300      	movs	r3, #0
    }
}
 8013426:	4618      	mov	r0, r3
 8013428:	3710      	adds	r7, #16
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
	...

08013430 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013430:	b480      	push	{r7}
 8013432:	b083      	sub	sp, #12
 8013434:	af00      	add	r7, sp, #0
 8013436:	4603      	mov	r3, r0
 8013438:	6039      	str	r1, [r7, #0]
 801343a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801343c:	79fb      	ldrb	r3, [r7, #7]
 801343e:	3b01      	subs	r3, #1
 8013440:	2b03      	cmp	r3, #3
 8013442:	d81f      	bhi.n	8013484 <UpdateFCntDown+0x54>
 8013444:	a201      	add	r2, pc, #4	@ (adr r2, 801344c <UpdateFCntDown+0x1c>)
 8013446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801344a:	bf00      	nop
 801344c:	0801345d 	.word	0x0801345d
 8013450:	08013467 	.word	0x08013467
 8013454:	08013471 	.word	0x08013471
 8013458:	0801347b 	.word	0x0801347b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801345c:	4b0c      	ldr	r3, [pc, #48]	@ (8013490 <UpdateFCntDown+0x60>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	611a      	str	r2, [r3, #16]
            break;
 8013464:	e00f      	b.n	8013486 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013466:	4b0a      	ldr	r3, [pc, #40]	@ (8013490 <UpdateFCntDown+0x60>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	615a      	str	r2, [r3, #20]
            break;
 801346e:	e00a      	b.n	8013486 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013470:	4b07      	ldr	r3, [pc, #28]	@ (8013490 <UpdateFCntDown+0x60>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	619a      	str	r2, [r3, #24]
            break;
 8013478:	e005      	b.n	8013486 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801347a:	4b05      	ldr	r3, [pc, #20]	@ (8013490 <UpdateFCntDown+0x60>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	61da      	str	r2, [r3, #28]
            break;
 8013482:	e000      	b.n	8013486 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013484:	bf00      	nop
    }
}
 8013486:	bf00      	nop
 8013488:	370c      	adds	r7, #12
 801348a:	46bd      	mov	sp, r7
 801348c:	bc80      	pop	{r7}
 801348e:	4770      	bx	lr
 8013490:	20001960 	.word	0x20001960

08013494 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801349a:	4b18      	ldr	r3, [pc, #96]	@ (80134fc <ResetFCnts+0x68>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	2200      	movs	r2, #0
 80134a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134a2:	4b16      	ldr	r3, [pc, #88]	@ (80134fc <ResetFCnts+0x68>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	f04f 32ff 	mov.w	r2, #4294967295
 80134aa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134ac:	4b13      	ldr	r3, [pc, #76]	@ (80134fc <ResetFCnts+0x68>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f04f 32ff 	mov.w	r2, #4294967295
 80134b4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80134b6:	4b11      	ldr	r3, [pc, #68]	@ (80134fc <ResetFCnts+0x68>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f04f 32ff 	mov.w	r2, #4294967295
 80134be:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80134c0:	4b0e      	ldr	r3, [pc, #56]	@ (80134fc <ResetFCnts+0x68>)
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	4b0d      	ldr	r3, [pc, #52]	@ (80134fc <ResetFCnts+0x68>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	6992      	ldr	r2, [r2, #24]
 80134ca:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134cc:	2300      	movs	r3, #0
 80134ce:	607b      	str	r3, [r7, #4]
 80134d0:	e00b      	b.n	80134ea <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80134d2:	4b0a      	ldr	r3, [pc, #40]	@ (80134fc <ResetFCnts+0x68>)
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	3306      	adds	r3, #6
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4413      	add	r3, r2
 80134de:	f04f 32ff 	mov.w	r2, #4294967295
 80134e2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	3301      	adds	r3, #1
 80134e8:	607b      	str	r3, [r7, #4]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	ddf0      	ble.n	80134d2 <ResetFCnts+0x3e>
    }
}
 80134f0:	bf00      	nop
 80134f2:	bf00      	nop
 80134f4:	370c      	adds	r7, #12
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bc80      	pop	{r7}
 80134fa:	4770      	bx	lr
 80134fc:	20001960 	.word	0x20001960

08013500 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d101      	bne.n	8013512 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801350e:	2308      	movs	r3, #8
 8013510:	e01c      	b.n	801354c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013512:	4a10      	ldr	r2, [pc, #64]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013518:	4b0e      	ldr	r3, [pc, #56]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2228      	movs	r2, #40	@ 0x28
 801351e:	2100      	movs	r1, #0
 8013520:	4618      	mov	r0, r3
 8013522:	f003 f975 	bl	8016810 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013526:	4b0b      	ldr	r3, [pc, #44]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2201      	movs	r2, #1
 801352c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801352e:	4b09      	ldr	r3, [pc, #36]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2201      	movs	r2, #1
 8013534:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013536:	4b07      	ldr	r3, [pc, #28]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	2201      	movs	r2, #1
 801353c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801353e:	4b05      	ldr	r3, [pc, #20]	@ (8013554 <LoRaMacCryptoInit+0x54>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2200      	movs	r2, #0
 8013544:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013546:	f7ff ffa5 	bl	8013494 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	20001960 	.word	0x20001960

08013558 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013558:	b480      	push	{r7}
 801355a:	b083      	sub	sp, #12
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013560:	4b04      	ldr	r3, [pc, #16]	@ (8013574 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013568:	2300      	movs	r3, #0
}
 801356a:	4618      	mov	r0, r3
 801356c:	370c      	adds	r7, #12
 801356e:	46bd      	mov	sp, r7
 8013570:	bc80      	pop	{r7}
 8013572:	4770      	bx	lr
 8013574:	20001960 	.word	0x20001960

08013578 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d101      	bne.n	801358a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013586:	2309      	movs	r3, #9
 8013588:	e006      	b.n	8013598 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801358a:	4b06      	ldr	r3, [pc, #24]	@ (80135a4 <LoRaMacCryptoGetFCntUp+0x2c>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013596:	2300      	movs	r3, #0
}
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	bc80      	pop	{r7}
 80135a0:	4770      	bx	lr
 80135a2:	bf00      	nop
 80135a4:	20001960 	.word	0x20001960

080135a8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b088      	sub	sp, #32
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	4603      	mov	r3, r0
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
 80135b4:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80135b6:	2300      	movs	r3, #0
 80135b8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80135ba:	2300      	movs	r3, #0
 80135bc:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80135be:	2312      	movs	r3, #18
 80135c0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d101      	bne.n	80135cc <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135c8:	2309      	movs	r3, #9
 80135ca:	e035      	b.n	8013638 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80135cc:	f107 0214 	add.w	r2, r7, #20
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
 80135d2:	4611      	mov	r1, r2
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff feb9 	bl	801334c <GetLastFcntDown>
 80135da:	4603      	mov	r3, r0
 80135dc:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80135de:	7efb      	ldrb	r3, [r7, #27]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d001      	beq.n	80135e8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80135e4:	7efb      	ldrb	r3, [r7, #27]
 80135e6:	e027      	b.n	8013638 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ee:	d103      	bne.n	80135f8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	601a      	str	r2, [r3, #0]
 80135f6:	e01e      	b.n	8013636 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	1ad3      	subs	r3, r2, r3
 8013600:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	2b00      	cmp	r3, #0
 8013606:	dd05      	ble.n	8013614 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013608:	697a      	ldr	r2, [r7, #20]
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	441a      	add	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	601a      	str	r2, [r3, #0]
 8013612:	e010      	b.n	8013636 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d104      	bne.n	8013624 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801361a:	697a      	ldr	r2, [r7, #20]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013620:	2307      	movs	r3, #7
 8013622:	e009      	b.n	8013638 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	0c1b      	lsrs	r3, r3, #16
 8013628:	041b      	lsls	r3, r3, #16
 801362a:	68ba      	ldr	r2, [r7, #8]
 801362c:	4413      	add	r3, r2
 801362e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3720      	adds	r7, #32
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013640:	b480      	push	{r7}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d101      	bne.n	8013652 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801364e:	2309      	movs	r3, #9
 8013650:	e017      	b.n	8013682 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013652:	2300      	movs	r3, #0
 8013654:	60fb      	str	r3, [r7, #12]
 8013656:	e010      	b.n	801367a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013658:	4b0c      	ldr	r3, [pc, #48]	@ (801368c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801365a:	6819      	ldr	r1, [r3, #0]
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	222c      	movs	r2, #44	@ 0x2c
 8013660:	fb02 f303 	mul.w	r3, r2, r3
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	4413      	add	r3, r2
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	3206      	adds	r2, #6
 801366c:	0092      	lsls	r2, r2, #2
 801366e:	440a      	add	r2, r1
 8013670:	3204      	adds	r2, #4
 8013672:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	3301      	adds	r3, #1
 8013678:	60fb      	str	r3, [r7, #12]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	ddeb      	ble.n	8013658 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3714      	adds	r7, #20
 8013686:	46bd      	mov	sp, r7
 8013688:	bc80      	pop	{r7}
 801368a:	4770      	bx	lr
 801368c:	20001960 	.word	0x20001960

08013690 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	6039      	str	r1, [r7, #0]
 801369a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801369c:	79fb      	ldrb	r3, [r7, #7]
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f8 f89b 	bl	800b7dc <SecureElementSetKey>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d001      	beq.n	80136b0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136ac:	230e      	movs	r3, #14
 80136ae:	e018      	b.n	80136e2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80136b0:	79fb      	ldrb	r3, [r7, #7]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d114      	bne.n	80136e0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80136b6:	4b0d      	ldr	r3, [pc, #52]	@ (80136ec <LoRaMacCryptoSetKey+0x5c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	789b      	ldrb	r3, [r3, #2]
 80136bc:	79fa      	ldrb	r2, [r7, #7]
 80136be:	4611      	mov	r1, r2
 80136c0:	4618      	mov	r0, r3
 80136c2:	f000 fa37 	bl	8013b34 <LoRaMacCryptoDeriveMcRootKey>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d001      	beq.n	80136d0 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136cc:	230e      	movs	r3, #14
 80136ce:	e008      	b.n	80136e2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80136d0:	2004      	movs	r0, #4
 80136d2:	f000 fa5a 	bl	8013b8a <LoRaMacCryptoDeriveMcKEKey>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d001      	beq.n	80136e0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136dc:	230e      	movs	r3, #14
 80136de:	e000      	b.n	80136e2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	20001960 	.word	0x20001960

080136f0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af02      	add	r7, sp, #8
 80136f6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d101      	bne.n	8013702 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136fe:	2309      	movs	r3, #9
 8013700:	e02d      	b.n	801375e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013702:	2301      	movs	r3, #1
 8013704:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013706:	4b18      	ldr	r3, [pc, #96]	@ (8013768 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	889a      	ldrh	r2, [r3, #4]
 801370c:	3201      	adds	r2, #1
 801370e:	b292      	uxth	r2, r2
 8013710:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013712:	4b15      	ldr	r3, [pc, #84]	@ (8013768 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	889a      	ldrh	r2, [r3, #4]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 fc14 	bl	8013f4a <LoRaMacSerializerJoinRequest>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013728:	2310      	movs	r3, #16
 801372a:	e018      	b.n	801375e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6819      	ldr	r1, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	3318      	adds	r3, #24
 8013734:	7bfa      	ldrb	r2, [r7, #15]
 8013736:	9300      	str	r3, [sp, #0]
 8013738:	4613      	mov	r3, r2
 801373a:	2213      	movs	r2, #19
 801373c:	2000      	movs	r0, #0
 801373e:	f7f8 f8ab 	bl	800b898 <SecureElementComputeAesCmac>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d001      	beq.n	801374c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013748:	230e      	movs	r3, #14
 801374a:	e008      	b.n	801375e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f000 fbfc 	bl	8013f4a <LoRaMacSerializerJoinRequest>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	d001      	beq.n	801375c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013758:	2310      	movs	r3, #16
 801375a:	e000      	b.n	801375e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	20001960 	.word	0x20001960

0801376c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801376c:	b590      	push	{r4, r7, lr}
 801376e:	b097      	sub	sp, #92	@ 0x5c
 8013770:	af04      	add	r7, sp, #16
 8013772:	4603      	mov	r3, r0
 8013774:	60b9      	str	r1, [r7, #8]
 8013776:	607a      	str	r2, [r7, #4]
 8013778:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d002      	beq.n	8013786 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013786:	2309      	movs	r3, #9
 8013788:	e0bd      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801378a:	2312      	movs	r3, #18
 801378c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013790:	2300      	movs	r3, #0
 8013792:	61bb      	str	r3, [r7, #24]
 8013794:	f107 031c 	add.w	r3, r7, #28
 8013798:	221d      	movs	r2, #29
 801379a:	2100      	movs	r1, #0
 801379c:	4618      	mov	r0, r3
 801379e:	f007 fdc3 	bl	801b328 <memset>
    uint8_t versionMinor         = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80137a6:	4b5a      	ldr	r3, [pc, #360]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	889b      	ldrh	r3, [r3, #4]
 80137ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681c      	ldr	r4, [r3, #0]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	791b      	ldrb	r3, [r3, #4]
 80137b8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80137bc:	7bf8      	ldrb	r0, [r7, #15]
 80137be:	f107 0217 	add.w	r2, r7, #23
 80137c2:	9202      	str	r2, [sp, #8]
 80137c4:	f107 0218 	add.w	r2, r7, #24
 80137c8:	9201      	str	r2, [sp, #4]
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	4623      	mov	r3, r4
 80137ce:	460a      	mov	r2, r1
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	f7f8 f955 	bl	800ba80 <SecureElementProcessJoinAccept>
 80137d6:	4603      	mov	r3, r0
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80137dc:	230e      	movs	r3, #14
 80137de:	e092      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6818      	ldr	r0, [r3, #0]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	791b      	ldrb	r3, [r3, #4]
 80137e8:	461a      	mov	r2, r3
 80137ea:	f107 0318 	add.w	r3, r7, #24
 80137ee:	4619      	mov	r1, r3
 80137f0:	f002 ffd3 	bl	801679a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 f9eb 	bl	8013bd0 <LoRaMacParserJoinAccept>
 80137fa:	4603      	mov	r3, r0
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013800:	230f      	movs	r3, #15
 8013802:	e080      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	799b      	ldrb	r3, [r3, #6]
 8013808:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	79db      	ldrb	r3, [r3, #7]
 801380e:	021b      	lsls	r3, r3, #8
 8013810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013812:	4313      	orrs	r3, r2
 8013814:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	7a1b      	ldrb	r3, [r3, #8]
 801381a:	041b      	lsls	r3, r3, #16
 801381c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801381e:	4313      	orrs	r3, r2
 8013820:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013822:	4b3b      	ldr	r3, [pc, #236]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801382a:	429a      	cmp	r2, r3
 801382c:	d010      	beq.n	8013850 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801382e:	4b38      	ldr	r3, [pc, #224]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013834:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013836:	7dfb      	ldrb	r3, [r7, #23]
 8013838:	2100      	movs	r1, #0
 801383a:	4618      	mov	r0, r3
 801383c:	f000 f97a 	bl	8013b34 <LoRaMacCryptoDeriveMcRootKey>
 8013840:	4603      	mov	r3, r0
 8013842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013846:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801384a:	2b00      	cmp	r3, #0
 801384c:	d005      	beq.n	801385a <LoRaMacCryptoHandleJoinAccept+0xee>
 801384e:	e001      	b.n	8013854 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013850:	2303      	movs	r3, #3
 8013852:	e058      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013854:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013858:	e055      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801385a:	2004      	movs	r0, #4
 801385c:	f000 f995 	bl	8013b8a <LoRaMacCryptoDeriveMcKEKey>
 8013860:	4603      	mov	r3, r0
 8013862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013866:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801386a:	2b00      	cmp	r3, #0
 801386c:	d002      	beq.n	8013874 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801386e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013872:	e048      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	7a5b      	ldrb	r3, [r3, #9]
 8013878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	7a9b      	ldrb	r3, [r3, #10]
 801387e:	021b      	lsls	r3, r3, #8
 8013880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013882:	4313      	orrs	r3, r2
 8013884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	7adb      	ldrb	r3, [r3, #11]
 801388a:	041b      	lsls	r3, r3, #16
 801388c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801388e:	4313      	orrs	r3, r2
 8013890:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013896:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801389a:	2003      	movs	r0, #3
 801389c:	f7ff fd06 	bl	80132ac <DeriveSessionKey10x>
 80138a0:	4603      	mov	r3, r0
 80138a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d002      	beq.n	80138b4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80138ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80138b2:	e028      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80138b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80138b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80138ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80138bc:	2002      	movs	r0, #2
 80138be:	f7ff fcf5 	bl	80132ac <DeriveSessionKey10x>
 80138c2:	4603      	mov	r3, r0
 80138c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d002      	beq.n	80138d6 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80138d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80138d4:	e017      	b.n	8013906 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80138d6:	4b0e      	ldr	r3, [pc, #56]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	7dfa      	ldrb	r2, [r7, #23]
 80138dc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80138de:	4b0c      	ldr	r3, [pc, #48]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2200      	movs	r2, #0
 80138e4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80138e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f04f 32ff 	mov.w	r2, #4294967295
 80138ee:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80138f0:	4b07      	ldr	r3, [pc, #28]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f04f 32ff 	mov.w	r2, #4294967295
 80138f8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80138fa:	4b05      	ldr	r3, [pc, #20]	@ (8013910 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013902:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013904:	2300      	movs	r3, #0
}
 8013906:	4618      	mov	r0, r3
 8013908:	374c      	adds	r7, #76	@ 0x4c
 801390a:	46bd      	mov	sp, r7
 801390c:	bd90      	pop	{r4, r7, pc}
 801390e:	bf00      	nop
 8013910:	20001960 	.word	0x20001960

08013914 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013914:	b590      	push	{r4, r7, lr}
 8013916:	b08b      	sub	sp, #44	@ 0x2c
 8013918:	af04      	add	r7, sp, #16
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	607b      	str	r3, [r7, #4]
 801391e:	460b      	mov	r3, r1
 8013920:	72fb      	strb	r3, [r7, #11]
 8013922:	4613      	mov	r3, r2
 8013924:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013926:	2312      	movs	r3, #18
 8013928:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801392a:	2303      	movs	r3, #3
 801392c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013934:	2309      	movs	r3, #9
 8013936:	e05e      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013938:	4b31      	ldr	r3, [pc, #196]	@ (8013a00 <LoRaMacCryptoSecureMessage+0xec>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	68db      	ldr	r3, [r3, #12]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	429a      	cmp	r2, r3
 8013942:	d201      	bcs.n	8013948 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013944:	2306      	movs	r3, #6
 8013946:	e056      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d101      	bne.n	8013956 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013952:	2302      	movs	r3, #2
 8013954:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013956:	4b2a      	ldr	r3, [pc, #168]	@ (8013a00 <LoRaMacCryptoSecureMessage+0xec>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	429a      	cmp	r2, r3
 8013960:	d916      	bls.n	8013990 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801396c:	b219      	sxth	r1, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	689c      	ldr	r4, [r3, #8]
 8013972:	7dfa      	ldrb	r2, [r7, #23]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	2300      	movs	r3, #0
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	4623      	mov	r3, r4
 801397e:	f7ff faa1 	bl	8012ec4 <PayloadEncrypt>
 8013982:	4603      	mov	r3, r0
 8013984:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013986:	7dbb      	ldrb	r3, [r7, #22]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801398c:	7dbb      	ldrb	r3, [r7, #22]
 801398e:	e032      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 fb5c 	bl	801404e <LoRaMacSerializerData>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801399c:	2310      	movs	r3, #16
 801399e:	e02a      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80139a0:	2302      	movs	r3, #2
 80139a2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6818      	ldr	r0, [r3, #0]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	791b      	ldrb	r3, [r3, #4]
 80139ac:	3b04      	subs	r3, #4
 80139ae:	b299      	uxth	r1, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	689b      	ldr	r3, [r3, #8]
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	322c      	adds	r2, #44	@ 0x2c
 80139b8:	7dfc      	ldrb	r4, [r7, #23]
 80139ba:	9203      	str	r2, [sp, #12]
 80139bc:	68fa      	ldr	r2, [r7, #12]
 80139be:	9202      	str	r2, [sp, #8]
 80139c0:	9301      	str	r3, [sp, #4]
 80139c2:	2300      	movs	r3, #0
 80139c4:	9300      	str	r3, [sp, #0]
 80139c6:	2300      	movs	r3, #0
 80139c8:	4622      	mov	r2, r4
 80139ca:	f7ff fb7c 	bl	80130c6 <ComputeCmacB0>
 80139ce:	4603      	mov	r3, r0
 80139d0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80139d2:	7dbb      	ldrb	r3, [r7, #22]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80139d8:	7dbb      	ldrb	r3, [r7, #22]
 80139da:	e00c      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 fb36 	bl	801404e <LoRaMacSerializerData>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139e8:	2310      	movs	r3, #16
 80139ea:	e004      	b.n	80139f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80139ec:	4b04      	ldr	r3, [pc, #16]	@ (8013a00 <LoRaMacCryptoSecureMessage+0xec>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	68fa      	ldr	r2, [r7, #12]
 80139f2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80139f4:	2300      	movs	r3, #0
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	371c      	adds	r7, #28
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd90      	pop	{r4, r7, pc}
 80139fe:	bf00      	nop
 8013a00:	20001960 	.word	0x20001960

08013a04 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013a04:	b590      	push	{r4, r7, lr}
 8013a06:	b08b      	sub	sp, #44	@ 0x2c
 8013a08:	af04      	add	r7, sp, #16
 8013a0a:	60b9      	str	r1, [r7, #8]
 8013a0c:	607b      	str	r3, [r7, #4]
 8013a0e:	4603      	mov	r3, r0
 8013a10:	73fb      	strb	r3, [r7, #15]
 8013a12:	4613      	mov	r3, r2
 8013a14:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a1c:	2309      	movs	r3, #9
 8013a1e:	e083      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013a20:	7bbb      	ldrb	r3, [r7, #14]
 8013a22:	6879      	ldr	r1, [r7, #4]
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff fcdf 	bl	80133e8 <CheckFCntDown>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	f083 0301 	eor.w	r3, r3, #1
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d001      	beq.n	8013a3a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013a36:	2306      	movs	r3, #6
 8013a38:	e076      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013a3a:	2312      	movs	r3, #18
 8013a3c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013a3e:	2303      	movs	r3, #3
 8013a40:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013a42:	2302      	movs	r3, #2
 8013a44:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a48:	f000 f98d 	bl	8013d66 <LoRaMacParserData>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d001      	beq.n	8013a56 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013a52:	230f      	movs	r3, #15
 8013a54:	e068      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013a56:	f107 0210 	add.w	r2, r7, #16
 8013a5a:	7bfb      	ldrb	r3, [r7, #15]
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff fbfe 	bl	8013260 <GetKeyAddrItem>
 8013a64:	4603      	mov	r3, r0
 8013a66:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a68:	7d7b      	ldrb	r3, [r7, #21]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013a6e:	7d7b      	ldrb	r3, [r7, #21]
 8013a70:	e05a      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	785b      	ldrb	r3, [r3, #1]
 8013a76:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	789b      	ldrb	r3, [r3, #2]
 8013a7c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a80:	689b      	ldr	r3, [r3, #8]
 8013a82:	68ba      	ldr	r2, [r7, #8]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d001      	beq.n	8013a8c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013a88:	2302      	movs	r3, #2
 8013a8a:	e04d      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a8e:	7b1b      	ldrb	r3, [r3, #12]
 8013a90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	bf14      	ite	ne
 8013a9a:	2301      	movne	r3, #1
 8013a9c:	2300      	moveq	r3, #0
 8013a9e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013aa0:	4b23      	ldr	r3, [pc, #140]	@ (8013b30 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	789b      	ldrb	r3, [r3, #2]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d101      	bne.n	8013aae <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab0:	6818      	ldr	r0, [r3, #0]
 8013ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab4:	791b      	ldrb	r3, [r3, #4]
 8013ab6:	3b04      	subs	r3, #4
 8013ab8:	b299      	uxth	r1, r3
 8013aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013abe:	7dbc      	ldrb	r4, [r7, #22]
 8013ac0:	7d3a      	ldrb	r2, [r7, #20]
 8013ac2:	9303      	str	r3, [sp, #12]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	9302      	str	r3, [sp, #8]
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	9301      	str	r3, [sp, #4]
 8013acc:	2301      	movs	r3, #1
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	4623      	mov	r3, r4
 8013ad2:	f7ff fb36 	bl	8013142 <VerifyCmacB0>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ada:	7d7b      	ldrb	r3, [r7, #21]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d001      	beq.n	8013ae4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013ae0:	7d7b      	ldrb	r3, [r7, #21]
 8013ae2:	e021      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d101      	bne.n	8013af2 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013aee:	2302      	movs	r3, #2
 8013af0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013afc:	b219      	sxth	r1, r3
 8013afe:	7dfa      	ldrb	r2, [r7, #23]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	2301      	movs	r3, #1
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	f7ff f9db 	bl	8012ec4 <PayloadEncrypt>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b12:	7d7b      	ldrb	r3, [r7, #21]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013b18:	7d7b      	ldrb	r3, [r7, #21]
 8013b1a:	e005      	b.n	8013b28 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
 8013b1e:	6879      	ldr	r1, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ff fc85 	bl	8013430 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	371c      	adds	r7, #28
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd90      	pop	{r4, r7, pc}
 8013b30:	20001960 	.word	0x20001960

08013b34 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b086      	sub	sp, #24
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	460a      	mov	r2, r1
 8013b3e:	71fb      	strb	r3, [r7, #7]
 8013b40:	4613      	mov	r3, r2
 8013b42:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013b44:	79bb      	ldrb	r3, [r7, #6]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013b4a:	230a      	movs	r3, #10
 8013b4c:	e019      	b.n	8013b82 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60bb      	str	r3, [r7, #8]
 8013b52:	f107 030c 	add.w	r3, r7, #12
 8013b56:	2200      	movs	r2, #0
 8013b58:	601a      	str	r2, [r3, #0]
 8013b5a:	605a      	str	r2, [r3, #4]
 8013b5c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013b5e:	79fb      	ldrb	r3, [r7, #7]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d101      	bne.n	8013b68 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013b64:	2320      	movs	r3, #32
 8013b66:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013b68:	79b9      	ldrb	r1, [r7, #6]
 8013b6a:	f107 0308 	add.w	r3, r7, #8
 8013b6e:	2204      	movs	r2, #4
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7f7 ff45 	bl	800ba00 <SecureElementDeriveAndStoreKey>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b7c:	230e      	movs	r3, #14
 8013b7e:	e000      	b.n	8013b82 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b80:	2300      	movs	r3, #0
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3718      	adds	r7, #24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}

08013b8a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013b8a:	b580      	push	{r7, lr}
 8013b8c:	b086      	sub	sp, #24
 8013b8e:	af00      	add	r7, sp, #0
 8013b90:	4603      	mov	r3, r0
 8013b92:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013b94:	79fb      	ldrb	r3, [r7, #7]
 8013b96:	2b04      	cmp	r3, #4
 8013b98:	d001      	beq.n	8013b9e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013b9a:	230a      	movs	r3, #10
 8013b9c:	e014      	b.n	8013bc8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	60bb      	str	r3, [r7, #8]
 8013ba2:	f107 030c 	add.w	r3, r7, #12
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	605a      	str	r2, [r3, #4]
 8013bac:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013bae:	79f9      	ldrb	r1, [r7, #7]
 8013bb0:	f107 0308 	add.w	r3, r7, #8
 8013bb4:	227f      	movs	r2, #127	@ 0x7f
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f7 ff22 	bl	800ba00 <SecureElementDeriveAndStoreKey>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d001      	beq.n	8013bc6 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013bc2:	230e      	movs	r3, #14
 8013bc4:	e000      	b.n	8013bc8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013bc6:	2300      	movs	r3, #0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d003      	beq.n	8013be6 <LoRaMacParserJoinAccept+0x16>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d101      	bne.n	8013bea <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013be6:	2302      	movs	r3, #2
 8013be8:	e0b9      	b.n	8013d5e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	89fb      	ldrh	r3, [r7, #14]
 8013bf4:	1c59      	adds	r1, r3, #1
 8013bf6:	81f9      	strh	r1, [r7, #14]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781a      	ldrb	r2, [r3, #0]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	1d98      	adds	r0, r3, #6
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	89fb      	ldrh	r3, [r7, #14]
 8013c0a:	4413      	add	r3, r2
 8013c0c:	2203      	movs	r2, #3
 8013c0e:	4619      	mov	r1, r3
 8013c10:	f002 fdc3 	bl	801679a <memcpy1>
    bufItr = bufItr + 3;
 8013c14:	89fb      	ldrh	r3, [r7, #14]
 8013c16:	3303      	adds	r3, #3
 8013c18:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f103 0009 	add.w	r0, r3, #9
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	89fb      	ldrh	r3, [r7, #14]
 8013c26:	4413      	add	r3, r2
 8013c28:	2203      	movs	r2, #3
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	f002 fdb5 	bl	801679a <memcpy1>
    bufItr = bufItr + 3;
 8013c30:	89fb      	ldrh	r3, [r7, #14]
 8013c32:	3303      	adds	r3, #3
 8013c34:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	89fb      	ldrh	r3, [r7, #14]
 8013c3c:	1c59      	adds	r1, r3, #1
 8013c3e:	81f9      	strh	r1, [r7, #14]
 8013c40:	4413      	add	r3, r2
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	461a      	mov	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681a      	ldr	r2, [r3, #0]
 8013c4e:	89fb      	ldrh	r3, [r7, #14]
 8013c50:	1c59      	adds	r1, r3, #1
 8013c52:	81f9      	strh	r1, [r7, #14]
 8013c54:	4413      	add	r3, r2
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	021a      	lsls	r2, r3, #8
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	431a      	orrs	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	89fb      	ldrh	r3, [r7, #14]
 8013c6a:	1c59      	adds	r1, r3, #1
 8013c6c:	81f9      	strh	r1, [r7, #14]
 8013c6e:	4413      	add	r3, r2
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	041a      	lsls	r2, r3, #16
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	431a      	orrs	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	89fb      	ldrh	r3, [r7, #14]
 8013c84:	1c59      	adds	r1, r3, #1
 8013c86:	81f9      	strh	r1, [r7, #14]
 8013c88:	4413      	add	r3, r2
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	061a      	lsls	r2, r3, #24
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	431a      	orrs	r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	89fb      	ldrh	r3, [r7, #14]
 8013c9e:	1c59      	adds	r1, r3, #1
 8013ca0:	81f9      	strh	r1, [r7, #14]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	781a      	ldrb	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	89fb      	ldrh	r3, [r7, #14]
 8013cb0:	1c59      	adds	r1, r3, #1
 8013cb2:	81f9      	strh	r1, [r7, #14]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	781a      	ldrb	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	791b      	ldrb	r3, [r3, #4]
 8013cc0:	1f1a      	subs	r2, r3, #4
 8013cc2:	89fb      	ldrh	r3, [r7, #14]
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	2b10      	cmp	r3, #16
 8013cc8:	d10e      	bne.n	8013ce8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f103 0012 	add.w	r0, r3, #18
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	89fb      	ldrh	r3, [r7, #14]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	2210      	movs	r2, #16
 8013cda:	4619      	mov	r1, r3
 8013cdc:	f002 fd5d 	bl	801679a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013ce0:	89fb      	ldrh	r3, [r7, #14]
 8013ce2:	3310      	adds	r3, #16
 8013ce4:	81fb      	strh	r3, [r7, #14]
 8013ce6:	e008      	b.n	8013cfa <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	791b      	ldrb	r3, [r3, #4]
 8013cec:	1f1a      	subs	r2, r3, #4
 8013cee:	89fb      	ldrh	r3, [r7, #14]
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	dd01      	ble.n	8013cfa <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e031      	b.n	8013d5e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	89fb      	ldrh	r3, [r7, #14]
 8013d00:	1c59      	adds	r1, r3, #1
 8013d02:	81f9      	strh	r1, [r7, #14]
 8013d04:	4413      	add	r3, r2
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	461a      	mov	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	89fb      	ldrh	r3, [r7, #14]
 8013d14:	1c59      	adds	r1, r3, #1
 8013d16:	81f9      	strh	r1, [r7, #14]
 8013d18:	4413      	add	r3, r2
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	021a      	lsls	r2, r3, #8
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d22:	431a      	orrs	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	89fb      	ldrh	r3, [r7, #14]
 8013d2e:	1c59      	adds	r1, r3, #1
 8013d30:	81f9      	strh	r1, [r7, #14]
 8013d32:	4413      	add	r3, r2
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	041a      	lsls	r2, r3, #16
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d3c:	431a      	orrs	r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	89fb      	ldrh	r3, [r7, #14]
 8013d48:	1c59      	adds	r1, r3, #1
 8013d4a:	81f9      	strh	r1, [r7, #14]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	061a      	lsls	r2, r3, #24
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d56:	431a      	orrs	r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013d5c:	2300      	movs	r3, #0
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b084      	sub	sp, #16
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d003      	beq.n	8013d7c <LoRaMacParserData+0x16>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d101      	bne.n	8013d80 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013d7c:	2302      	movs	r3, #2
 8013d7e:	e0e0      	b.n	8013f42 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8013d80:	2300      	movs	r3, #0
 8013d82:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	89fb      	ldrh	r3, [r7, #14]
 8013d8a:	1c59      	adds	r1, r3, #1
 8013d8c:	81f9      	strh	r1, [r7, #14]
 8013d8e:	4413      	add	r3, r2
 8013d90:	781a      	ldrb	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	89fb      	ldrh	r3, [r7, #14]
 8013d9c:	1c59      	adds	r1, r3, #1
 8013d9e:	81f9      	strh	r1, [r7, #14]
 8013da0:	4413      	add	r3, r2
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	461a      	mov	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	89fb      	ldrh	r3, [r7, #14]
 8013db0:	1c59      	adds	r1, r3, #1
 8013db2:	81f9      	strh	r1, [r7, #14]
 8013db4:	4413      	add	r3, r2
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	021a      	lsls	r2, r3, #8
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	689b      	ldr	r3, [r3, #8]
 8013dbe:	431a      	orrs	r2, r3
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	89fb      	ldrh	r3, [r7, #14]
 8013dca:	1c59      	adds	r1, r3, #1
 8013dcc:	81f9      	strh	r1, [r7, #14]
 8013dce:	4413      	add	r3, r2
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	041a      	lsls	r2, r3, #16
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	689b      	ldr	r3, [r3, #8]
 8013dd8:	431a      	orrs	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681a      	ldr	r2, [r3, #0]
 8013de2:	89fb      	ldrh	r3, [r7, #14]
 8013de4:	1c59      	adds	r1, r3, #1
 8013de6:	81f9      	strh	r1, [r7, #14]
 8013de8:	4413      	add	r3, r2
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	061a      	lsls	r2, r3, #24
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	431a      	orrs	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	89fb      	ldrh	r3, [r7, #14]
 8013dfe:	1c59      	adds	r1, r3, #1
 8013e00:	81f9      	strh	r1, [r7, #14]
 8013e02:	4413      	add	r3, r2
 8013e04:	781a      	ldrb	r2, [r3, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	89fb      	ldrh	r3, [r7, #14]
 8013e10:	1c59      	adds	r1, r3, #1
 8013e12:	81f9      	strh	r1, [r7, #14]
 8013e14:	4413      	add	r3, r2
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	461a      	mov	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	89fb      	ldrh	r3, [r7, #14]
 8013e24:	1c59      	adds	r1, r3, #1
 8013e26:	81f9      	strh	r1, [r7, #14]
 8013e28:	4413      	add	r3, r2
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	0219      	lsls	r1, r3, #8
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	89db      	ldrh	r3, [r3, #14]
 8013e32:	b21a      	sxth	r2, r3
 8013e34:	b20b      	sxth	r3, r1
 8013e36:	4313      	orrs	r3, r2
 8013e38:	b21b      	sxth	r3, r3
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f103 0010 	add.w	r0, r3, #16
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	89fb      	ldrh	r3, [r7, #14]
 8013e4c:	18d1      	adds	r1, r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	7b1b      	ldrb	r3, [r3, #12]
 8013e52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	461a      	mov	r2, r3
 8013e5a:	f002 fc9e 	bl	801679a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7b1b      	ldrb	r3, [r3, #12]
 8013e62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	461a      	mov	r2, r3
 8013e6a:	89fb      	ldrh	r3, [r7, #14]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2200      	movs	r2, #0
 8013e74:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	791b      	ldrb	r3, [r3, #4]
 8013e84:	461a      	mov	r2, r3
 8013e86:	89fb      	ldrh	r3, [r7, #14]
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	2b04      	cmp	r3, #4
 8013e8c:	dd27      	ble.n	8013ede <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	89fb      	ldrh	r3, [r7, #14]
 8013e94:	1c59      	adds	r1, r3, #1
 8013e96:	81f9      	strh	r1, [r7, #14]
 8013e98:	4413      	add	r3, r2
 8013e9a:	781a      	ldrb	r2, [r3, #0]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	791a      	ldrb	r2, [r3, #4]
 8013ea6:	89fb      	ldrh	r3, [r7, #14]
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	3b04      	subs	r3, #4
 8013eb0:	b2da      	uxtb	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	89fb      	ldrh	r3, [r7, #14]
 8013ec2:	18d1      	adds	r1, r2, r3
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013eca:	461a      	mov	r2, r3
 8013ecc:	f002 fc65 	bl	801679a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	89fb      	ldrh	r3, [r7, #14]
 8013eda:	4413      	add	r3, r2
 8013edc:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	791b      	ldrb	r3, [r3, #4]
 8013ee6:	3b04      	subs	r3, #4
 8013ee8:	4413      	add	r3, r2
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	461a      	mov	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	791b      	ldrb	r3, [r3, #4]
 8013efe:	3b03      	subs	r3, #3
 8013f00:	440b      	add	r3, r1
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	021b      	lsls	r3, r3, #8
 8013f06:	431a      	orrs	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6819      	ldr	r1, [r3, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	791b      	ldrb	r3, [r3, #4]
 8013f18:	3b02      	subs	r3, #2
 8013f1a:	440b      	add	r3, r1
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	041b      	lsls	r3, r3, #16
 8013f20:	431a      	orrs	r2, r3
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6819      	ldr	r1, [r3, #0]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	791b      	ldrb	r3, [r3, #4]
 8013f32:	3b01      	subs	r3, #1
 8013f34:	440b      	add	r3, r1
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	061b      	lsls	r3, r3, #24
 8013f3a:	431a      	orrs	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b084      	sub	sp, #16
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d003      	beq.n	8013f60 <LoRaMacSerializerJoinRequest+0x16>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d101      	bne.n	8013f64 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013f60:	2301      	movs	r3, #1
 8013f62:	e070      	b.n	8014046 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013f64:	2300      	movs	r3, #0
 8013f66:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	791b      	ldrb	r3, [r3, #4]
 8013f6c:	2b16      	cmp	r3, #22
 8013f6e:	d801      	bhi.n	8013f74 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f70:	2302      	movs	r3, #2
 8013f72:	e068      	b.n	8014046 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	89fb      	ldrh	r3, [r7, #14]
 8013f7a:	1c59      	adds	r1, r3, #1
 8013f7c:	81f9      	strh	r1, [r7, #14]
 8013f7e:	4413      	add	r3, r2
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	7952      	ldrb	r2, [r2, #5]
 8013f84:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	89fb      	ldrh	r3, [r7, #14]
 8013f8c:	18d0      	adds	r0, r2, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	3306      	adds	r3, #6
 8013f92:	2208      	movs	r2, #8
 8013f94:	4619      	mov	r1, r3
 8013f96:	f002 fc1b 	bl	80167d0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013f9a:	89fb      	ldrh	r3, [r7, #14]
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	89fb      	ldrh	r3, [r7, #14]
 8013fa6:	18d0      	adds	r0, r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	330e      	adds	r3, #14
 8013fac:	2208      	movs	r2, #8
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f002 fc0e 	bl	80167d0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013fb4:	89fb      	ldrh	r3, [r7, #14]
 8013fb6:	3308      	adds	r3, #8
 8013fb8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	8ad9      	ldrh	r1, [r3, #22]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	89fb      	ldrh	r3, [r7, #14]
 8013fc4:	1c58      	adds	r0, r3, #1
 8013fc6:	81f8      	strh	r0, [r7, #14]
 8013fc8:	4413      	add	r3, r2
 8013fca:	b2ca      	uxtb	r2, r1
 8013fcc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	8adb      	ldrh	r3, [r3, #22]
 8013fd2:	0a1b      	lsrs	r3, r3, #8
 8013fd4:	b299      	uxth	r1, r3
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681a      	ldr	r2, [r3, #0]
 8013fda:	89fb      	ldrh	r3, [r7, #14]
 8013fdc:	1c58      	adds	r0, r3, #1
 8013fde:	81f8      	strh	r0, [r7, #14]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	b2ca      	uxtb	r2, r1
 8013fe4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6999      	ldr	r1, [r3, #24]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	89fb      	ldrh	r3, [r7, #14]
 8013ff0:	1c58      	adds	r0, r3, #1
 8013ff2:	81f8      	strh	r0, [r7, #14]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	b2ca      	uxtb	r2, r1
 8013ff8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	0a19      	lsrs	r1, r3, #8
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	89fb      	ldrh	r3, [r7, #14]
 8014006:	1c58      	adds	r0, r3, #1
 8014008:	81f8      	strh	r0, [r7, #14]
 801400a:	4413      	add	r3, r2
 801400c:	b2ca      	uxtb	r2, r1
 801400e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	699b      	ldr	r3, [r3, #24]
 8014014:	0c19      	lsrs	r1, r3, #16
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	89fb      	ldrh	r3, [r7, #14]
 801401c:	1c58      	adds	r0, r3, #1
 801401e:	81f8      	strh	r0, [r7, #14]
 8014020:	4413      	add	r3, r2
 8014022:	b2ca      	uxtb	r2, r1
 8014024:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	699b      	ldr	r3, [r3, #24]
 801402a:	0e19      	lsrs	r1, r3, #24
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	89fb      	ldrh	r3, [r7, #14]
 8014032:	1c58      	adds	r0, r3, #1
 8014034:	81f8      	strh	r0, [r7, #14]
 8014036:	4413      	add	r3, r2
 8014038:	b2ca      	uxtb	r2, r1
 801403a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801403c:	89fb      	ldrh	r3, [r7, #14]
 801403e:	b2da      	uxtb	r2, r3
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014044:	2300      	movs	r3, #0
}
 8014046:	4618      	mov	r0, r3
 8014048:	3710      	adds	r7, #16
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801404e:	b580      	push	{r7, lr}
 8014050:	b084      	sub	sp, #16
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d003      	beq.n	8014064 <LoRaMacSerializerData+0x16>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d101      	bne.n	8014068 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014064:	2301      	movs	r3, #1
 8014066:	e0e3      	b.n	8014230 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014068:	2300      	movs	r3, #0
 801406a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801406c:	2308      	movs	r3, #8
 801406e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	7b1b      	ldrb	r3, [r3, #12]
 8014074:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014078:	b2db      	uxtb	r3, r3
 801407a:	461a      	mov	r2, r3
 801407c:	89bb      	ldrh	r3, [r7, #12]
 801407e:	4413      	add	r3, r2
 8014080:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014088:	2b00      	cmp	r3, #0
 801408a:	d002      	beq.n	8014092 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801408c:	89bb      	ldrh	r3, [r7, #12]
 801408e:	3301      	adds	r3, #1
 8014090:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014098:	461a      	mov	r2, r3
 801409a:	89bb      	ldrh	r3, [r7, #12]
 801409c:	4413      	add	r3, r2
 801409e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80140a0:	89bb      	ldrh	r3, [r7, #12]
 80140a2:	3304      	adds	r3, #4
 80140a4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	791b      	ldrb	r3, [r3, #4]
 80140aa:	461a      	mov	r2, r3
 80140ac:	89bb      	ldrh	r3, [r7, #12]
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d901      	bls.n	80140b6 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80140b2:	2302      	movs	r3, #2
 80140b4:	e0bc      	b.n	8014230 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	1c59      	adds	r1, r3, #1
 80140be:	81f9      	strh	r1, [r7, #14]
 80140c0:	4413      	add	r3, r2
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	7952      	ldrb	r2, [r2, #5]
 80140c6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6899      	ldr	r1, [r3, #8]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	89fb      	ldrh	r3, [r7, #14]
 80140d2:	1c58      	adds	r0, r3, #1
 80140d4:	81f8      	strh	r0, [r7, #14]
 80140d6:	4413      	add	r3, r2
 80140d8:	b2ca      	uxtb	r2, r1
 80140da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	689b      	ldr	r3, [r3, #8]
 80140e0:	0a19      	lsrs	r1, r3, #8
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	89fb      	ldrh	r3, [r7, #14]
 80140e8:	1c58      	adds	r0, r3, #1
 80140ea:	81f8      	strh	r0, [r7, #14]
 80140ec:	4413      	add	r3, r2
 80140ee:	b2ca      	uxtb	r2, r1
 80140f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	689b      	ldr	r3, [r3, #8]
 80140f6:	0c19      	lsrs	r1, r3, #16
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	89fb      	ldrh	r3, [r7, #14]
 80140fe:	1c58      	adds	r0, r3, #1
 8014100:	81f8      	strh	r0, [r7, #14]
 8014102:	4413      	add	r3, r2
 8014104:	b2ca      	uxtb	r2, r1
 8014106:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	689b      	ldr	r3, [r3, #8]
 801410c:	0e19      	lsrs	r1, r3, #24
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	89fb      	ldrh	r3, [r7, #14]
 8014114:	1c58      	adds	r0, r3, #1
 8014116:	81f8      	strh	r0, [r7, #14]
 8014118:	4413      	add	r3, r2
 801411a:	b2ca      	uxtb	r2, r1
 801411c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	89fb      	ldrh	r3, [r7, #14]
 8014124:	1c59      	adds	r1, r3, #1
 8014126:	81f9      	strh	r1, [r7, #14]
 8014128:	4413      	add	r3, r2
 801412a:	687a      	ldr	r2, [r7, #4]
 801412c:	7b12      	ldrb	r2, [r2, #12]
 801412e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	89d9      	ldrh	r1, [r3, #14]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	89fb      	ldrh	r3, [r7, #14]
 801413a:	1c58      	adds	r0, r3, #1
 801413c:	81f8      	strh	r0, [r7, #14]
 801413e:	4413      	add	r3, r2
 8014140:	b2ca      	uxtb	r2, r1
 8014142:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	89db      	ldrh	r3, [r3, #14]
 8014148:	0a1b      	lsrs	r3, r3, #8
 801414a:	b299      	uxth	r1, r3
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	89fb      	ldrh	r3, [r7, #14]
 8014152:	1c58      	adds	r0, r3, #1
 8014154:	81f8      	strh	r0, [r7, #14]
 8014156:	4413      	add	r3, r2
 8014158:	b2ca      	uxtb	r2, r1
 801415a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	89fb      	ldrh	r3, [r7, #14]
 8014162:	18d0      	adds	r0, r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f103 0110 	add.w	r1, r3, #16
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	7b1b      	ldrb	r3, [r3, #12]
 801416e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014172:	b2db      	uxtb	r3, r3
 8014174:	461a      	mov	r2, r3
 8014176:	f002 fb10 	bl	801679a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	7b1b      	ldrb	r3, [r3, #12]
 801417e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014182:	b2db      	uxtb	r3, r3
 8014184:	461a      	mov	r2, r3
 8014186:	89fb      	ldrh	r3, [r7, #14]
 8014188:	4413      	add	r3, r2
 801418a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014192:	2b00      	cmp	r3, #0
 8014194:	d009      	beq.n	80141aa <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	89fb      	ldrh	r3, [r7, #14]
 801419c:	1c59      	adds	r1, r3, #1
 801419e:	81f9      	strh	r1, [r7, #14]
 80141a0:	4413      	add	r3, r2
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80141a8:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	89fb      	ldrh	r3, [r7, #14]
 80141b0:	18d0      	adds	r0, r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141bc:	461a      	mov	r2, r3
 80141be:	f002 faec 	bl	801679a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141c8:	461a      	mov	r2, r3
 80141ca:	89fb      	ldrh	r3, [r7, #14]
 80141cc:	4413      	add	r3, r2
 80141ce:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	89fb      	ldrh	r3, [r7, #14]
 80141da:	1c58      	adds	r0, r3, #1
 80141dc:	81f8      	strh	r0, [r7, #14]
 80141de:	4413      	add	r3, r2
 80141e0:	b2ca      	uxtb	r2, r1
 80141e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e8:	0a19      	lsrs	r1, r3, #8
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	89fb      	ldrh	r3, [r7, #14]
 80141f0:	1c58      	adds	r0, r3, #1
 80141f2:	81f8      	strh	r0, [r7, #14]
 80141f4:	4413      	add	r3, r2
 80141f6:	b2ca      	uxtb	r2, r1
 80141f8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141fe:	0c19      	lsrs	r1, r3, #16
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	89fb      	ldrh	r3, [r7, #14]
 8014206:	1c58      	adds	r0, r3, #1
 8014208:	81f8      	strh	r0, [r7, #14]
 801420a:	4413      	add	r3, r2
 801420c:	b2ca      	uxtb	r2, r1
 801420e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014214:	0e19      	lsrs	r1, r3, #24
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	89fb      	ldrh	r3, [r7, #14]
 801421c:	1c58      	adds	r0, r3, #1
 801421e:	81f8      	strh	r0, [r7, #14]
 8014220:	4413      	add	r3, r2
 8014222:	b2ca      	uxtb	r2, r1
 8014224:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014226:	89fb      	ldrh	r3, [r7, #14]
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801422e:	2300      	movs	r3, #0
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	4603      	mov	r3, r0
 8014240:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014242:	79fb      	ldrb	r3, [r7, #7]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d101      	bne.n	801424c <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014248:	2301      	movs	r3, #1
 801424a:	e000      	b.n	801424e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801424c:	2300      	movs	r3, #0
        }
    }
}
 801424e:	4618      	mov	r0, r3
 8014250:	370c      	adds	r7, #12
 8014252:	46bd      	mov	sp, r7
 8014254:	bc80      	pop	{r7}
 8014256:	4770      	bx	lr

08014258 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	4603      	mov	r3, r0
 8014260:	6039      	str	r1, [r7, #0]
 8014262:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014264:	2300      	movs	r3, #0
 8014266:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014268:	79fb      	ldrb	r3, [r7, #7]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d105      	bne.n	801427a <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 801426e:	6838      	ldr	r0, [r7, #0]
 8014270:	f000 f9ec 	bl	801464c <RegionAS923GetPhyParam>
 8014274:	4603      	mov	r3, r0
 8014276:	60fb      	str	r3, [r7, #12]
 8014278:	e001      	b.n	801427e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	4603      	mov	r3, r0
 8014290:	6039      	str	r1, [r7, #0]
 8014292:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014294:	79fb      	ldrb	r3, [r7, #7]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d103      	bne.n	80142a2 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 801429a:	6838      	ldr	r0, [r7, #0]
 801429c:	f000 fb4c 	bl	8014938 <RegionAS923SetBandTxDone>
 80142a0:	e000      	b.n	80142a4 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80142a2:	bf00      	nop
        }
    }
}
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}

080142aa <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80142aa:	b580      	push	{r7, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	4603      	mov	r3, r0
 80142b2:	6039      	str	r1, [r7, #0]
 80142b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d103      	bne.n	80142c4 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 80142bc:	6838      	ldr	r0, [r7, #0]
 80142be:	f000 fb67 	bl	8014990 <RegionAS923InitDefaults>
 80142c2:	e000      	b.n	80142c6 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80142c4:	bf00      	nop
        }
    }
}
 80142c6:	bf00      	nop
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b082      	sub	sp, #8
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	4603      	mov	r3, r0
 80142d6:	6039      	str	r1, [r7, #0]
 80142d8:	71fb      	strb	r3, [r7, #7]
 80142da:	4613      	mov	r3, r2
 80142dc:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d106      	bne.n	80142f2 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 80142e4:	79bb      	ldrb	r3, [r7, #6]
 80142e6:	4619      	mov	r1, r3
 80142e8:	6838      	ldr	r0, [r7, #0]
 80142ea:	f000 fbe3 	bl	8014ab4 <RegionAS923Verify>
 80142ee:	4603      	mov	r3, r0
 80142f0:	e000      	b.n	80142f4 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80142f2:	2300      	movs	r3, #0
        }
    }
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3708      	adds	r7, #8
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}

080142fc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	4603      	mov	r3, r0
 8014304:	6039      	str	r1, [r7, #0]
 8014306:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014308:	79fb      	ldrb	r3, [r7, #7]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d103      	bne.n	8014316 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 801430e:	6838      	ldr	r0, [r7, #0]
 8014310:	f000 fc6e 	bl	8014bf0 <RegionAS923ApplyCFList>
 8014314:	e000      	b.n	8014318 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014316:	bf00      	nop
        }
    }
}
 8014318:	bf00      	nop
 801431a:	3708      	adds	r7, #8
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	4603      	mov	r3, r0
 8014328:	6039      	str	r1, [r7, #0]
 801432a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801432c:	79fb      	ldrb	r3, [r7, #7]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d104      	bne.n	801433c <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014332:	6838      	ldr	r0, [r7, #0]
 8014334:	f000 fcd0 	bl	8014cd8 <RegionAS923ChanMaskSet>
 8014338:	4603      	mov	r3, r0
 801433a:	e000      	b.n	801433e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801433c:	2300      	movs	r3, #0
        }
    }
}
 801433e:	4618      	mov	r0, r3
 8014340:	3708      	adds	r7, #8
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014346:	b580      	push	{r7, lr}
 8014348:	b082      	sub	sp, #8
 801434a:	af00      	add	r7, sp, #0
 801434c:	603b      	str	r3, [r7, #0]
 801434e:	4603      	mov	r3, r0
 8014350:	71fb      	strb	r3, [r7, #7]
 8014352:	460b      	mov	r3, r1
 8014354:	71bb      	strb	r3, [r7, #6]
 8014356:	4613      	mov	r3, r2
 8014358:	717b      	strb	r3, [r7, #5]
    switch( region )
 801435a:	79fb      	ldrb	r3, [r7, #7]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d107      	bne.n	8014370 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014360:	7979      	ldrb	r1, [r7, #5]
 8014362:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	f000 fcdf 	bl	8014d2c <RegionAS923ComputeRxWindowParameters>
 801436e:	e000      	b.n	8014372 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014370:	bf00      	nop
        }
    }
}
 8014372:	bf00      	nop
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}

0801437a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801437a:	b580      	push	{r7, lr}
 801437c:	b084      	sub	sp, #16
 801437e:	af00      	add	r7, sp, #0
 8014380:	4603      	mov	r3, r0
 8014382:	60b9      	str	r1, [r7, #8]
 8014384:	607a      	str	r2, [r7, #4]
 8014386:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014388:	7bfb      	ldrb	r3, [r7, #15]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d105      	bne.n	801439a <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 801438e:	6879      	ldr	r1, [r7, #4]
 8014390:	68b8      	ldr	r0, [r7, #8]
 8014392:	f000 fd25 	bl	8014de0 <RegionAS923RxConfig>
 8014396:	4603      	mov	r3, r0
 8014398:	e000      	b.n	801439c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801439a:	2300      	movs	r3, #0
        }
    }
}
 801439c:	4618      	mov	r0, r3
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60b9      	str	r1, [r7, #8]
 80143ac:	607a      	str	r2, [r7, #4]
 80143ae:	603b      	str	r3, [r7, #0]
 80143b0:	4603      	mov	r3, r0
 80143b2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d106      	bne.n	80143c8 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	6879      	ldr	r1, [r7, #4]
 80143be:	68b8      	ldr	r0, [r7, #8]
 80143c0:	f000 fdde 	bl	8014f80 <RegionAS923TxConfig>
 80143c4:	4603      	mov	r3, r0
 80143c6:	e000      	b.n	80143ca <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80143c8:	2300      	movs	r3, #0
        }
    }
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b086      	sub	sp, #24
 80143d6:	af02      	add	r7, sp, #8
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
 80143dc:	603b      	str	r3, [r7, #0]
 80143de:	4603      	mov	r3, r0
 80143e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80143e2:	7bfb      	ldrb	r3, [r7, #15]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	9300      	str	r3, [sp, #0]
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	6879      	ldr	r1, [r7, #4]
 80143f2:	68b8      	ldr	r0, [r7, #8]
 80143f4:	f000 fe94 	bl	8015120 <RegionAS923LinkAdrReq>
 80143f8:	4603      	mov	r3, r0
 80143fa:	e000      	b.n	80143fe <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80143fc:	2300      	movs	r3, #0
        }
    }
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	4603      	mov	r3, r0
 801440e:	6039      	str	r1, [r7, #0]
 8014410:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014412:	79fb      	ldrb	r3, [r7, #7]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d104      	bne.n	8014422 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8014418:	6838      	ldr	r0, [r7, #0]
 801441a:	f000 ffa3 	bl	8015364 <RegionAS923RxParamSetupReq>
 801441e:	4603      	mov	r3, r0
 8014420:	e000      	b.n	8014424 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014422:	2300      	movs	r3, #0
        }
    }
}
 8014424:	4618      	mov	r0, r3
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	6039      	str	r1, [r7, #0]
 8014436:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014438:	79fb      	ldrb	r3, [r7, #7]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d104      	bne.n	8014448 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 801443e:	6838      	ldr	r0, [r7, #0]
 8014440:	f000 ffc8 	bl	80153d4 <RegionAS923NewChannelReq>
 8014444:	4603      	mov	r3, r0
 8014446:	e000      	b.n	801444a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014448:	2300      	movs	r3, #0
        }
    }
}
 801444a:	4618      	mov	r0, r3
 801444c:	3708      	adds	r7, #8
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}

08014452 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014452:	b580      	push	{r7, lr}
 8014454:	b082      	sub	sp, #8
 8014456:	af00      	add	r7, sp, #0
 8014458:	4603      	mov	r3, r0
 801445a:	6039      	str	r1, [r7, #0]
 801445c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801445e:	79fb      	ldrb	r3, [r7, #7]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d104      	bne.n	801446e <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014464:	6838      	ldr	r0, [r7, #0]
 8014466:	f001 f813 	bl	8015490 <RegionAS923TxParamSetupReq>
 801446a:	4603      	mov	r3, r0
 801446c:	e000      	b.n	8014470 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801446e:	2300      	movs	r3, #0
        }
    }
}
 8014470:	4618      	mov	r0, r3
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	4603      	mov	r3, r0
 8014480:	6039      	str	r1, [r7, #0]
 8014482:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014484:	79fb      	ldrb	r3, [r7, #7]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d104      	bne.n	8014494 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 801448a:	6838      	ldr	r0, [r7, #0]
 801448c:	f001 f80a 	bl	80154a4 <RegionAS923DlChannelReq>
 8014490:	4603      	mov	r3, r0
 8014492:	e000      	b.n	8014496 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014494:	2300      	movs	r3, #0
        }
    }
}
 8014496:	4618      	mov	r0, r3
 8014498:	3708      	adds	r7, #8
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}

0801449e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b082      	sub	sp, #8
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	4603      	mov	r3, r0
 80144a6:	71fb      	strb	r3, [r7, #7]
 80144a8:	460b      	mov	r3, r1
 80144aa:	71bb      	strb	r3, [r7, #6]
 80144ac:	4613      	mov	r3, r2
 80144ae:	717b      	strb	r3, [r7, #5]
    switch( region )
 80144b0:	79fb      	ldrb	r3, [r7, #7]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d108      	bne.n	80144c8 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 80144b6:	797a      	ldrb	r2, [r7, #5]
 80144b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144bc:	4611      	mov	r1, r2
 80144be:	4618      	mov	r0, r3
 80144c0:	f001 f830 	bl	8015524 <RegionAS923AlternateDr>
 80144c4:	4603      	mov	r3, r0
 80144c6:	e000      	b.n	80144ca <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80144c8:	2300      	movs	r3, #0
        }
    }
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b084      	sub	sp, #16
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]
 80144dc:	603b      	str	r3, [r7, #0]
 80144de:	4603      	mov	r3, r0
 80144e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80144e2:	7bfb      	ldrb	r3, [r7, #15]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d107      	bne.n	80144f8 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	683a      	ldr	r2, [r7, #0]
 80144ec:	6879      	ldr	r1, [r7, #4]
 80144ee:	68b8      	ldr	r0, [r7, #8]
 80144f0:	f001 f826 	bl	8015540 <RegionAS923NextChannel>
 80144f4:	4603      	mov	r3, r0
 80144f6:	e000      	b.n	80144fa <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80144f8:	2309      	movs	r3, #9
        }
    }
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014502:	b590      	push	{r4, r7, lr}
 8014504:	b083      	sub	sp, #12
 8014506:	af00      	add	r7, sp, #0
 8014508:	4604      	mov	r4, r0
 801450a:	4608      	mov	r0, r1
 801450c:	4611      	mov	r1, r2
 801450e:	461a      	mov	r2, r3
 8014510:	4623      	mov	r3, r4
 8014512:	71fb      	strb	r3, [r7, #7]
 8014514:	4603      	mov	r3, r0
 8014516:	71bb      	strb	r3, [r7, #6]
 8014518:	460b      	mov	r3, r1
 801451a:	717b      	strb	r3, [r7, #5]
 801451c:	4613      	mov	r3, r2
 801451e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014520:	79fb      	ldrb	r3, [r7, #7]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d109      	bne.n	801453a <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014526:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801452a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801452e:	79bb      	ldrb	r3, [r7, #6]
 8014530:	4618      	mov	r0, r3
 8014532:	f001 f979 	bl	8015828 <RegionAS923ApplyDrOffset>
 8014536:	4603      	mov	r3, r0
 8014538:	e000      	b.n	801453c <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801453a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801453c:	4618      	mov	r0, r3
 801453e:	370c      	adds	r7, #12
 8014540:	46bd      	mov	sp, r7
 8014542:	bd90      	pop	{r4, r7, pc}

08014544 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014544:	b480      	push	{r7}
 8014546:	b083      	sub	sp, #12
 8014548:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801454a:	4b04      	ldr	r3, [pc, #16]	@ (801455c <RegionGetVersion+0x18>)
 801454c:	607b      	str	r3, [r7, #4]

    return version;
 801454e:	687b      	ldr	r3, [r7, #4]
}
 8014550:	4618      	mov	r0, r3
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	bc80      	pop	{r7}
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop
 801455c:	02010001 	.word	0x02010001

08014560 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014568:	4b0d      	ldr	r3, [pc, #52]	@ (80145a0 <VerifyRfFreq+0x40>)
 801456a:	6a1b      	ldr	r3, [r3, #32]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	4798      	blx	r3
 8014570:	4603      	mov	r3, r0
 8014572:	f083 0301 	eor.w	r3, r3, #1
 8014576:	b2db      	uxtb	r3, r3
 8014578:	2b00      	cmp	r3, #0
 801457a:	d001      	beq.n	8014580 <VerifyRfFreq+0x20>
    {
        return false;
 801457c:	2300      	movs	r3, #0
 801457e:	e00a      	b.n	8014596 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4a08      	ldr	r2, [pc, #32]	@ (80145a4 <VerifyRfFreq+0x44>)
 8014584:	4293      	cmp	r3, r2
 8014586:	d903      	bls.n	8014590 <VerifyRfFreq+0x30>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4a07      	ldr	r2, [pc, #28]	@ (80145a8 <VerifyRfFreq+0x48>)
 801458c:	4293      	cmp	r3, r2
 801458e:	d901      	bls.n	8014594 <VerifyRfFreq+0x34>
    {
        return false;
 8014590:	2300      	movs	r3, #0
 8014592:	e000      	b.n	8014596 <VerifyRfFreq+0x36>
    }
    return true;
 8014594:	2301      	movs	r3, #1
}
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	0801c298 	.word	0x0801c298
 80145a4:	3689cabf 	.word	0x3689cabf
 80145a8:	37502800 	.word	0x37502800

080145ac <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80145ac:	b590      	push	{r4, r7, lr}
 80145ae:	b08b      	sub	sp, #44	@ 0x2c
 80145b0:	af04      	add	r7, sp, #16
 80145b2:	4603      	mov	r3, r0
 80145b4:	460a      	mov	r2, r1
 80145b6:	71fb      	strb	r3, [r7, #7]
 80145b8:	4613      	mov	r3, r2
 80145ba:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 80145bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80145c0:	4a1f      	ldr	r2, [pc, #124]	@ (8014640 <GetTimeOnAir+0x94>)
 80145c2:	5cd3      	ldrb	r3, [r2, r3]
 80145c4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 80145c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80145ca:	491e      	ldr	r1, [pc, #120]	@ (8014644 <GetTimeOnAir+0x98>)
 80145cc:	4618      	mov	r0, r3
 80145ce:	f002 f835 	bl	801663c <RegionCommonGetBandwidth>
 80145d2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80145d4:	2300      	movs	r3, #0
 80145d6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80145d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80145dc:	2b07      	cmp	r3, #7
 80145de:	d118      	bne.n	8014612 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80145e0:	4b19      	ldr	r3, [pc, #100]	@ (8014648 <GetTimeOnAir+0x9c>)
 80145e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80145e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80145ec:	fb02 f303 	mul.w	r3, r2, r3
 80145f0:	4619      	mov	r1, r3
 80145f2:	88bb      	ldrh	r3, [r7, #4]
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	2201      	movs	r2, #1
 80145f8:	9203      	str	r2, [sp, #12]
 80145fa:	9302      	str	r3, [sp, #8]
 80145fc:	2300      	movs	r3, #0
 80145fe:	9301      	str	r3, [sp, #4]
 8014600:	2305      	movs	r3, #5
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	2300      	movs	r3, #0
 8014606:	460a      	mov	r2, r1
 8014608:	68f9      	ldr	r1, [r7, #12]
 801460a:	2000      	movs	r0, #0
 801460c:	47a0      	blx	r4
 801460e:	6178      	str	r0, [r7, #20]
 8014610:	e011      	b.n	8014636 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014612:	4b0d      	ldr	r3, [pc, #52]	@ (8014648 <GetTimeOnAir+0x9c>)
 8014614:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014616:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801461a:	88bb      	ldrh	r3, [r7, #4]
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2101      	movs	r1, #1
 8014620:	9103      	str	r1, [sp, #12]
 8014622:	9302      	str	r3, [sp, #8]
 8014624:	2300      	movs	r3, #0
 8014626:	9301      	str	r3, [sp, #4]
 8014628:	2308      	movs	r3, #8
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	2301      	movs	r3, #1
 801462e:	68f9      	ldr	r1, [r7, #12]
 8014630:	2001      	movs	r0, #1
 8014632:	47a0      	blx	r4
 8014634:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014636:	697b      	ldr	r3, [r7, #20]
}
 8014638:	4618      	mov	r0, r3
 801463a:	371c      	adds	r7, #28
 801463c:	46bd      	mov	sp, r7
 801463e:	bd90      	pop	{r4, r7, pc}
 8014640:	0801c1d8 	.word	0x0801c1d8
 8014644:	0801c1e0 	.word	0x0801c1e0
 8014648:	0801c298 	.word	0x0801c298

0801464c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b088      	sub	sp, #32
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014654:	2300      	movs	r3, #0
 8014656:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	3b01      	subs	r3, #1
 801465e:	2b37      	cmp	r3, #55	@ 0x37
 8014660:	f200 814e 	bhi.w	8014900 <RegionAS923GetPhyParam+0x2b4>
 8014664:	a201      	add	r2, pc, #4	@ (adr r2, 801466c <RegionAS923GetPhyParam+0x20>)
 8014666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801466a:	bf00      	nop
 801466c:	0801474d 	.word	0x0801474d
 8014670:	08014761 	.word	0x08014761
 8014674:	08014901 	.word	0x08014901
 8014678:	08014901 	.word	0x08014901
 801467c:	08014901 	.word	0x08014901
 8014680:	08014775 	.word	0x08014775
 8014684:	08014901 	.word	0x08014901
 8014688:	080147bb 	.word	0x080147bb
 801468c:	08014901 	.word	0x08014901
 8014690:	080147c1 	.word	0x080147c1
 8014694:	080147c7 	.word	0x080147c7
 8014698:	080147cd 	.word	0x080147cd
 801469c:	080147d3 	.word	0x080147d3
 80146a0:	080147fb 	.word	0x080147fb
 80146a4:	08014823 	.word	0x08014823
 80146a8:	08014829 	.word	0x08014829
 80146ac:	08014831 	.word	0x08014831
 80146b0:	08014839 	.word	0x08014839
 80146b4:	08014841 	.word	0x08014841
 80146b8:	08014849 	.word	0x08014849
 80146bc:	08014851 	.word	0x08014851
 80146c0:	08014865 	.word	0x08014865
 80146c4:	0801486b 	.word	0x0801486b
 80146c8:	08014871 	.word	0x08014871
 80146cc:	08014877 	.word	0x08014877
 80146d0:	08014883 	.word	0x08014883
 80146d4:	0801488f 	.word	0x0801488f
 80146d8:	08014895 	.word	0x08014895
 80146dc:	0801489d 	.word	0x0801489d
 80146e0:	080148a3 	.word	0x080148a3
 80146e4:	080148a9 	.word	0x080148a9
 80146e8:	080148b1 	.word	0x080148b1
 80146ec:	0801477b 	.word	0x0801477b
 80146f0:	08014901 	.word	0x08014901
 80146f4:	08014901 	.word	0x08014901
 80146f8:	08014901 	.word	0x08014901
 80146fc:	08014901 	.word	0x08014901
 8014700:	08014901 	.word	0x08014901
 8014704:	08014901 	.word	0x08014901
 8014708:	08014901 	.word	0x08014901
 801470c:	08014901 	.word	0x08014901
 8014710:	08014901 	.word	0x08014901
 8014714:	08014901 	.word	0x08014901
 8014718:	08014901 	.word	0x08014901
 801471c:	08014901 	.word	0x08014901
 8014720:	08014901 	.word	0x08014901
 8014724:	080148b7 	.word	0x080148b7
 8014728:	080148bd 	.word	0x080148bd
 801472c:	080148cb 	.word	0x080148cb
 8014730:	08014901 	.word	0x08014901
 8014734:	08014901 	.word	0x08014901
 8014738:	080148d1 	.word	0x080148d1
 801473c:	080148d7 	.word	0x080148d7
 8014740:	08014901 	.word	0x08014901
 8014744:	080148dd 	.word	0x080148dd
 8014748:	080148ed 	.word	0x080148ed
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	78db      	ldrb	r3, [r3, #3]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d102      	bne.n	801475a <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8014754:	2300      	movs	r3, #0
 8014756:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014758:	e0d3      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801475a:	2302      	movs	r3, #2
 801475c:	61bb      	str	r3, [r7, #24]
            break;
 801475e:	e0d0      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	789b      	ldrb	r3, [r3, #2]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d102      	bne.n	801476e <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8014768:	2300      	movs	r3, #0
 801476a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 801476c:	e0c9      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801476e:	2302      	movs	r3, #2
 8014770:	61bb      	str	r3, [r7, #24]
            break;
 8014772:	e0c6      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8014774:	2302      	movs	r3, #2
 8014776:	61bb      	str	r3, [r7, #24]
            break;
 8014778:	e0c3      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014780:	733b      	strb	r3, [r7, #12]
 8014782:	2307      	movs	r3, #7
 8014784:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	789b      	ldrb	r3, [r3, #2]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d101      	bne.n	8014792 <RegionAS923GetPhyParam+0x146>
 801478e:	2300      	movs	r3, #0
 8014790:	e000      	b.n	8014794 <RegionAS923GetPhyParam+0x148>
 8014792:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014794:	73bb      	strb	r3, [r7, #14]
 8014796:	2310      	movs	r3, #16
 8014798:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801479a:	4b5d      	ldr	r3, [pc, #372]	@ (8014910 <RegionAS923GetPhyParam+0x2c4>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80147a2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80147a4:	4b5a      	ldr	r3, [pc, #360]	@ (8014910 <RegionAS923GetPhyParam+0x2c4>)
 80147a6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80147a8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80147aa:	f107 030c 	add.w	r3, r7, #12
 80147ae:	4618      	mov	r0, r3
 80147b0:	f001 fef1 	bl	8016596 <RegionCommonGetNextLowerTxDr>
 80147b4:	4603      	mov	r3, r0
 80147b6:	61bb      	str	r3, [r7, #24]
            break;
 80147b8:	e0a3      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 80147ba:	2300      	movs	r3, #0
 80147bc:	61bb      	str	r3, [r7, #24]
            break;
 80147be:	e0a0      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 80147c0:	2300      	movs	r3, #0
 80147c2:	61bb      	str	r3, [r7, #24]
            break;
 80147c4:	e09d      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80147c6:	2340      	movs	r3, #64	@ 0x40
 80147c8:	61bb      	str	r3, [r7, #24]
            break;
 80147ca:	e09a      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80147cc:	2320      	movs	r3, #32
 80147ce:	61bb      	str	r3, [r7, #24]
            break;
 80147d0:	e097      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	789b      	ldrb	r3, [r3, #2]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d107      	bne.n	80147ea <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147e0:	461a      	mov	r2, r3
 80147e2:	4b4c      	ldr	r3, [pc, #304]	@ (8014914 <RegionAS923GetPhyParam+0x2c8>)
 80147e4:	5c9b      	ldrb	r3, [r3, r2]
 80147e6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80147e8:	e08b      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147f0:	461a      	mov	r2, r3
 80147f2:	4b49      	ldr	r3, [pc, #292]	@ (8014918 <RegionAS923GetPhyParam+0x2cc>)
 80147f4:	5c9b      	ldrb	r3, [r3, r2]
 80147f6:	61bb      	str	r3, [r7, #24]
            break;
 80147f8:	e083      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	789b      	ldrb	r3, [r3, #2]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d107      	bne.n	8014812 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014808:	461a      	mov	r2, r3
 801480a:	4b44      	ldr	r3, [pc, #272]	@ (801491c <RegionAS923GetPhyParam+0x2d0>)
 801480c:	5c9b      	ldrb	r3, [r3, r2]
 801480e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014810:	e077      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014818:	461a      	mov	r2, r3
 801481a:	4b3f      	ldr	r3, [pc, #252]	@ (8014918 <RegionAS923GetPhyParam+0x2cc>)
 801481c:	5c9b      	ldrb	r3, [r3, r2]
 801481e:	61bb      	str	r3, [r7, #24]
            break;
 8014820:	e06f      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8014822:	2300      	movs	r3, #0
 8014824:	61bb      	str	r3, [r7, #24]
            break;
 8014826:	e06c      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8014828:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801482c:	61bb      	str	r3, [r7, #24]
            break;
 801482e:	e068      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014834:	61bb      	str	r3, [r7, #24]
            break;
 8014836:	e064      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014838:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801483c:	61bb      	str	r3, [r7, #24]
            break;
 801483e:	e060      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014840:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014844:	61bb      	str	r3, [r7, #24]
            break;
 8014846:	e05c      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014848:	f241 7370 	movw	r3, #6000	@ 0x1770
 801484c:	61bb      	str	r3, [r7, #24]
            break;
 801484e:	e058      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014854:	4832      	ldr	r0, [pc, #200]	@ (8014920 <RegionAS923GetPhyParam+0x2d4>)
 8014856:	f001 ff89 	bl	801676c <randr>
 801485a:	4603      	mov	r3, r0
 801485c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014860:	61bb      	str	r3, [r7, #24]
            break;
 8014862:	e04e      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014864:	2300      	movs	r3, #0
 8014866:	61bb      	str	r3, [r7, #24]
            break;
 8014868:	e04b      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 801486a:	4b2e      	ldr	r3, [pc, #184]	@ (8014924 <RegionAS923GetPhyParam+0x2d8>)
 801486c:	61bb      	str	r3, [r7, #24]
            break;
 801486e:	e048      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8014870:	2302      	movs	r3, #2
 8014872:	61bb      	str	r3, [r7, #24]
            break;
 8014874:	e045      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014876:	4b26      	ldr	r3, [pc, #152]	@ (8014910 <RegionAS923GetPhyParam+0x2c4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801487e:	61bb      	str	r3, [r7, #24]
            break;
 8014880:	e03f      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014882:	4b23      	ldr	r3, [pc, #140]	@ (8014910 <RegionAS923GetPhyParam+0x2c4>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801488a:	61bb      	str	r3, [r7, #24]
            break;
 801488c:	e039      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801488e:	2310      	movs	r3, #16
 8014890:	61bb      	str	r3, [r7, #24]
            break;
 8014892:	e036      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014894:	4b1e      	ldr	r3, [pc, #120]	@ (8014910 <RegionAS923GetPhyParam+0x2c4>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	61bb      	str	r3, [r7, #24]
            break;
 801489a:	e032      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 801489c:	2301      	movs	r3, #1
 801489e:	61bb      	str	r3, [r7, #24]
            break;
 80148a0:	e02f      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 80148a2:	2300      	movs	r3, #0
 80148a4:	61bb      	str	r3, [r7, #24]
            break;
 80148a6:	e02c      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 80148a8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80148ac:	61bb      	str	r3, [r7, #24]
            break;
 80148ae:	e028      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80148b0:	4b1d      	ldr	r3, [pc, #116]	@ (8014928 <RegionAS923GetPhyParam+0x2dc>)
 80148b2:	61bb      	str	r3, [r7, #24]
            break;
 80148b4:	e025      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80148b6:	4b1d      	ldr	r3, [pc, #116]	@ (801492c <RegionAS923GetPhyParam+0x2e0>)
 80148b8:	61bb      	str	r3, [r7, #24]
            break;
 80148ba:	e022      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80148bc:	2311      	movs	r3, #17
 80148be:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80148c0:	2301      	movs	r3, #1
 80148c2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 80148c4:	2300      	movs	r3, #0
 80148c6:	76bb      	strb	r3, [r7, #26]
            break;
 80148c8:	e01b      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80148ca:	2303      	movs	r3, #3
 80148cc:	61bb      	str	r3, [r7, #24]
            break;
 80148ce:	e018      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80148d0:	4b16      	ldr	r3, [pc, #88]	@ (801492c <RegionAS923GetPhyParam+0x2e0>)
 80148d2:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 80148d4:	e015      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80148d6:	2303      	movs	r3, #3
 80148d8:	61bb      	str	r3, [r7, #24]
            break;
 80148da:	e012      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148e2:	461a      	mov	r2, r3
 80148e4:	4b12      	ldr	r3, [pc, #72]	@ (8014930 <RegionAS923GetPhyParam+0x2e4>)
 80148e6:	5c9b      	ldrb	r3, [r3, r2]
 80148e8:	61bb      	str	r3, [r7, #24]
            break;
 80148ea:	e00a      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148f2:	4910      	ldr	r1, [pc, #64]	@ (8014934 <RegionAS923GetPhyParam+0x2e8>)
 80148f4:	4618      	mov	r0, r3
 80148f6:	f001 fea1 	bl	801663c <RegionCommonGetBandwidth>
 80148fa:	4603      	mov	r3, r0
 80148fc:	61bb      	str	r3, [r7, #24]
            break;
 80148fe:	e000      	b.n	8014902 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 8014900:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	61fb      	str	r3, [r7, #28]
 8014906:	69fb      	ldr	r3, [r7, #28]
}
 8014908:	4618      	mov	r0, r3
 801490a:	3720      	adds	r7, #32
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	20001964 	.word	0x20001964
 8014914:	0801c200 	.word	0x0801c200
 8014918:	0801c210 	.word	0x0801c210
 801491c:	0801c208 	.word	0x0801c208
 8014920:	fffffc18 	.word	0xfffffc18
 8014924:	3706ea00 	.word	0x3706ea00
 8014928:	4009999a 	.word	0x4009999a
 801492c:	3709f740 	.word	0x3709f740
 8014930:	0801c1d8 	.word	0x0801c1d8
 8014934:	0801c1e0 	.word	0x0801c1e0

08014938 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014938:	b590      	push	{r4, r7, lr}
 801493a:	b085      	sub	sp, #20
 801493c:	af02      	add	r7, sp, #8
 801493e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014940:	4b11      	ldr	r3, [pc, #68]	@ (8014988 <RegionAS923SetBandTxDone+0x50>)
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	4b11      	ldr	r3, [pc, #68]	@ (801498c <RegionAS923SetBandTxDone+0x54>)
 8014946:	6819      	ldr	r1, [r3, #0]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	4618      	mov	r0, r3
 801494e:	4603      	mov	r3, r0
 8014950:	005b      	lsls	r3, r3, #1
 8014952:	4403      	add	r3, r0
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	440b      	add	r3, r1
 8014958:	3309      	adds	r3, #9
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	4619      	mov	r1, r3
 801495e:	460b      	mov	r3, r1
 8014960:	005b      	lsls	r3, r3, #1
 8014962:	440b      	add	r3, r1
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	18d0      	adds	r0, r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6899      	ldr	r1, [r3, #8]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	785c      	ldrb	r4, [r3, #1]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	691a      	ldr	r2, [r3, #16]
 8014974:	9200      	str	r2, [sp, #0]
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	4622      	mov	r2, r4
 801497a:	f001 f9e5 	bl	8015d48 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801497e:	bf00      	nop
 8014980:	370c      	adds	r7, #12
 8014982:	46bd      	mov	sp, r7
 8014984:	bd90      	pop	{r4, r7, pc}
 8014986:	bf00      	nop
 8014988:	20001968 	.word	0x20001968
 801498c:	20001964 	.word	0x20001964

08014990 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b08e      	sub	sp, #56	@ 0x38
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8014998:	2364      	movs	r3, #100	@ 0x64
 801499a:	843b      	strh	r3, [r7, #32]
 801499c:	2300      	movs	r3, #0
 801499e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80149a2:	2300      	movs	r3, #0
 80149a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80149a6:	2300      	movs	r3, #0
 80149a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80149aa:	2300      	movs	r3, #0
 80149ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80149ae:	2300      	movs	r3, #0
 80149b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80149b2:	2300      	movs	r3, #0
 80149b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	7b1b      	ldrb	r3, [r3, #12]
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d05e      	beq.n	8014a7e <RegionAS923InitDefaults+0xee>
 80149c0:	2b02      	cmp	r3, #2
 80149c2:	dc6b      	bgt.n	8014a9c <RegionAS923InitDefaults+0x10c>
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d002      	beq.n	80149ce <RegionAS923InitDefaults+0x3e>
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	d043      	beq.n	8014a54 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80149cc:	e066      	b.n	8014a9c <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d063      	beq.n	8014a9e <RegionAS923InitDefaults+0x10e>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d05f      	beq.n	8014a9e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	4a30      	ldr	r2, [pc, #192]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 80149e4:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	689b      	ldr	r3, [r3, #8]
 80149ea:	4a2f      	ldr	r2, [pc, #188]	@ (8014aa8 <RegionAS923InitDefaults+0x118>)
 80149ec:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80149ee:	4b2e      	ldr	r3, [pc, #184]	@ (8014aa8 <RegionAS923InitDefaults+0x118>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	f107 0120 	add.w	r1, r7, #32
 80149f6:	2218      	movs	r2, #24
 80149f8:	4618      	mov	r0, r3
 80149fa:	f001 fece 	bl	801679a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80149fe:	4b29      	ldr	r3, [pc, #164]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	4a2a      	ldr	r2, [pc, #168]	@ (8014aac <RegionAS923InitDefaults+0x11c>)
 8014a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8014a0a:	4b26      	ldr	r3, [pc, #152]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	4a28      	ldr	r2, [pc, #160]	@ (8014ab0 <RegionAS923InitDefaults+0x120>)
 8014a10:	330c      	adds	r3, #12
 8014a12:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014a18:	4b22      	ldr	r3, [pc, #136]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a1a:	681a      	ldr	r2, [r3, #0]
 8014a1c:	4b21      	ldr	r3, [pc, #132]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	6812      	ldr	r2, [r2, #0]
 8014a22:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014a24:	4b1f      	ldr	r3, [pc, #124]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	4b1e      	ldr	r3, [pc, #120]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	68d2      	ldr	r2, [r2, #12]
 8014a2e:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8014a30:	4b1c      	ldr	r3, [pc, #112]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2203      	movs	r2, #3
 8014a36:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014a42:	4b18      	ldr	r3, [pc, #96]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	f001 f955 	bl	8015cfc <RegionCommonChanMaskCopy>
 8014a52:	e024      	b.n	8014a9e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014a54:	4b13      	ldr	r3, [pc, #76]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014a5c:	4b11      	ldr	r3, [pc, #68]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2200      	movs	r2, #0
 8014a62:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014a64:	4b0f      	ldr	r3, [pc, #60]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014a74:	2201      	movs	r2, #1
 8014a76:	4619      	mov	r1, r3
 8014a78:	f001 f940 	bl	8015cfc <RegionCommonChanMaskCopy>
            break;
 8014a7c:	e00f      	b.n	8014a9e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014a7e:	4b09      	ldr	r3, [pc, #36]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8014a86:	4b07      	ldr	r3, [pc, #28]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8014a8e:	4b05      	ldr	r3, [pc, #20]	@ (8014aa4 <RegionAS923InitDefaults+0x114>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	430a      	orrs	r2, r1
 8014a94:	b292      	uxth	r2, r2
 8014a96:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8014a9a:	e000      	b.n	8014a9e <RegionAS923InitDefaults+0x10e>
            break;
 8014a9c:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014a9e:	3738      	adds	r7, #56	@ 0x38
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	20001964 	.word	0x20001964
 8014aa8:	20001968 	.word	0x20001968
 8014aac:	0801bc00 	.word	0x0801bc00
 8014ab0:	0801bc0c 	.word	0x0801bc0c

08014ab4 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	460b      	mov	r3, r1
 8014abe:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8014ac0:	78fb      	ldrb	r3, [r7, #3]
 8014ac2:	2b0f      	cmp	r3, #15
 8014ac4:	f200 808f 	bhi.w	8014be6 <RegionAS923Verify+0x132>
 8014ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8014ad0 <RegionAS923Verify+0x1c>)
 8014aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ace:	bf00      	nop
 8014ad0:	08014b11 	.word	0x08014b11
 8014ad4:	08014be7 	.word	0x08014be7
 8014ad8:	08014be7 	.word	0x08014be7
 8014adc:	08014be7 	.word	0x08014be7
 8014ae0:	08014be7 	.word	0x08014be7
 8014ae4:	08014b1f 	.word	0x08014b1f
 8014ae8:	08014b63 	.word	0x08014b63
 8014aec:	08014b81 	.word	0x08014b81
 8014af0:	08014be7 	.word	0x08014be7
 8014af4:	08014bc5 	.word	0x08014bc5
 8014af8:	08014bc5 	.word	0x08014bc5
 8014afc:	08014be7 	.word	0x08014be7
 8014b00:	08014be7 	.word	0x08014be7
 8014b04:	08014be7 	.word	0x08014be7
 8014b08:	08014be7 	.word	0x08014be7
 8014b0c:	08014be3 	.word	0x08014be3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7ff fd23 	bl	8014560 <VerifyRfFreq>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	e064      	b.n	8014be8 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	789b      	ldrb	r3, [r3, #2]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d10e      	bne.n	8014b44 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f993 3000 	ldrsb.w	r3, [r3]
 8014b2c:	2207      	movs	r2, #7
 8014b2e:	2100      	movs	r1, #0
 8014b30:	4618      	mov	r0, r3
 8014b32:	f001 f866 	bl	8015c02 <RegionCommonValueInRange>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	bf14      	ite	ne
 8014b3c:	2301      	movne	r3, #1
 8014b3e:	2300      	moveq	r3, #0
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	e051      	b.n	8014be8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f993 3000 	ldrsb.w	r3, [r3]
 8014b4a:	2207      	movs	r2, #7
 8014b4c:	2102      	movs	r1, #2
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f001 f857 	bl	8015c02 <RegionCommonValueInRange>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	bf14      	ite	ne
 8014b5a:	2301      	movne	r3, #1
 8014b5c:	2300      	moveq	r3, #0
 8014b5e:	b2db      	uxtb	r3, r3
 8014b60:	e042      	b.n	8014be8 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	f993 3000 	ldrsb.w	r3, [r3]
 8014b68:	2205      	movs	r2, #5
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f001 f848 	bl	8015c02 <RegionCommonValueInRange>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	bf14      	ite	ne
 8014b78:	2301      	movne	r3, #1
 8014b7a:	2300      	moveq	r3, #0
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	e033      	b.n	8014be8 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	785b      	ldrb	r3, [r3, #1]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10e      	bne.n	8014ba6 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014b8e:	2207      	movs	r2, #7
 8014b90:	2100      	movs	r1, #0
 8014b92:	4618      	mov	r0, r3
 8014b94:	f001 f835 	bl	8015c02 <RegionCommonValueInRange>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	bf14      	ite	ne
 8014b9e:	2301      	movne	r3, #1
 8014ba0:	2300      	moveq	r3, #0
 8014ba2:	b2db      	uxtb	r3, r3
 8014ba4:	e020      	b.n	8014be8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8014bac:	2207      	movs	r2, #7
 8014bae:	2102      	movs	r1, #2
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f001 f826 	bl	8015c02 <RegionCommonValueInRange>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	bf14      	ite	ne
 8014bbc:	2301      	movne	r3, #1
 8014bbe:	2300      	moveq	r3, #0
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	e011      	b.n	8014be8 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8014bca:	2207      	movs	r2, #7
 8014bcc:	2100      	movs	r1, #0
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f001 f817 	bl	8015c02 <RegionCommonValueInRange>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	bf14      	ite	ne
 8014bda:	2301      	movne	r3, #1
 8014bdc:	2300      	moveq	r3, #0
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	e002      	b.n	8014be8 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8014be2:	2300      	movs	r3, #0
 8014be4:	e000      	b.n	8014be8 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8014be6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b08a      	sub	sp, #40	@ 0x28
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014bf8:	2350      	movs	r3, #80	@ 0x50
 8014bfa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	7a1b      	ldrb	r3, [r3, #8]
 8014c02:	2b10      	cmp	r3, #16
 8014c04:	d162      	bne.n	8014ccc <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	330f      	adds	r3, #15
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d15e      	bne.n	8014cd0 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014c12:	2300      	movs	r3, #0
 8014c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c18:	2302      	movs	r3, #2
 8014c1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014c1e:	e050      	b.n	8014cc2 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8014c20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c24:	2b06      	cmp	r3, #6
 8014c26:	d824      	bhi.n	8014c72 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	685a      	ldr	r2, [r3, #4]
 8014c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c30:	4413      	add	r3, r2
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014c36:	69ba      	ldr	r2, [r7, #24]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6859      	ldr	r1, [r3, #4]
 8014c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c40:	3301      	adds	r3, #1
 8014c42:	440b      	add	r3, r1
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	021b      	lsls	r3, r3, #8
 8014c48:	4313      	orrs	r3, r2
 8014c4a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014c4c:	69ba      	ldr	r2, [r7, #24]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6859      	ldr	r1, [r3, #4]
 8014c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c56:	3302      	adds	r3, #2
 8014c58:	440b      	add	r3, r1
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	041b      	lsls	r3, r3, #16
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	2264      	movs	r2, #100	@ 0x64
 8014c66:	fb02 f303 	mul.w	r3, r2, r3
 8014c6a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	61fb      	str	r3, [r7, #28]
 8014c70:	e006      	b.n	8014c80 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014c72:	2300      	movs	r3, #0
 8014c74:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00b      	beq.n	8014c9e <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014c86:	f107 0318 	add.w	r3, r7, #24
 8014c8a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014c90:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8014c92:	f107 0310 	add.w	r3, r7, #16
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 fd00 	bl	801569c <RegionAS923ChannelAdd>
 8014c9c:	e007      	b.n	8014cae <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ca2:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8014ca4:	f107 030c 	add.w	r3, r7, #12
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f000 fd93 	bl	80157d4 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014cb2:	3303      	adds	r3, #3
 8014cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014cc6:	2b0f      	cmp	r3, #15
 8014cc8:	d9aa      	bls.n	8014c20 <RegionAS923ApplyCFList+0x30>
 8014cca:	e002      	b.n	8014cd2 <RegionAS923ApplyCFList+0xe2>
        return;
 8014ccc:	bf00      	nop
 8014cce:	e000      	b.n	8014cd2 <RegionAS923ApplyCFList+0xe2>
        return;
 8014cd0:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014cd2:	3728      	adds	r7, #40	@ 0x28
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	791b      	ldrb	r3, [r3, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <RegionAS923ChanMaskSet+0x16>
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d00b      	beq.n	8014d04 <RegionAS923ChanMaskSet+0x2c>
 8014cec:	e015      	b.n	8014d1a <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014cee:	4b0e      	ldr	r3, [pc, #56]	@ (8014d28 <RegionAS923ChanMaskSet+0x50>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	2201      	movs	r2, #1
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	f000 fffd 	bl	8015cfc <RegionCommonChanMaskCopy>
            break;
 8014d02:	e00c      	b.n	8014d1e <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014d04:	4b08      	ldr	r3, [pc, #32]	@ (8014d28 <RegionAS923ChanMaskSet+0x50>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2201      	movs	r2, #1
 8014d12:	4619      	mov	r1, r3
 8014d14:	f000 fff2 	bl	8015cfc <RegionCommonChanMaskCopy>
            break;
 8014d18:	e001      	b.n	8014d1e <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	e000      	b.n	8014d20 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8014d1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	20001964 	.word	0x20001964

08014d2c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b088      	sub	sp, #32
 8014d30:	af02      	add	r7, sp, #8
 8014d32:	60ba      	str	r2, [r7, #8]
 8014d34:	607b      	str	r3, [r7, #4]
 8014d36:	4603      	mov	r3, r0
 8014d38:	73fb      	strb	r3, [r7, #15]
 8014d3a:	460b      	mov	r3, r1
 8014d3c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8014d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d46:	2b07      	cmp	r3, #7
 8014d48:	bfa8      	it	ge
 8014d4a:	2307      	movge	r3, #7
 8014d4c:	b25a      	sxtb	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d58:	491e      	ldr	r1, [pc, #120]	@ (8014dd4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f001 fc6e 	bl	801663c <RegionCommonGetBandwidth>
 8014d60:	4603      	mov	r3, r0
 8014d62:	b2da      	uxtb	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d6e:	2b07      	cmp	r3, #7
 8014d70:	d10a      	bne.n	8014d88 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d78:	461a      	mov	r2, r3
 8014d7a:	4b17      	ldr	r3, [pc, #92]	@ (8014dd8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014d7c:	5c9b      	ldrb	r3, [r3, r2]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f001 f9f0 	bl	8016164 <RegionCommonComputeSymbolTimeFsk>
 8014d84:	6178      	str	r0, [r7, #20]
 8014d86:	e011      	b.n	8014dac <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	4b11      	ldr	r3, [pc, #68]	@ (8014dd8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014d92:	5c9a      	ldrb	r2, [r3, r2]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8014dd4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014d9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014da2:	4619      	mov	r1, r3
 8014da4:	4610      	mov	r0, r2
 8014da6:	f001 f9c7 	bl	8016138 <RegionCommonComputeSymbolTimeLoRa>
 8014daa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014dac:	4b0b      	ldr	r3, [pc, #44]	@ (8014ddc <RegionAS923ComputeRxWindowParameters+0xb0>)
 8014dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014db0:	4798      	blx	r3
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	3308      	adds	r3, #8
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	320c      	adds	r2, #12
 8014dba:	7bb9      	ldrb	r1, [r7, #14]
 8014dbc:	9201      	str	r2, [sp, #4]
 8014dbe:	9300      	str	r3, [sp, #0]
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	68ba      	ldr	r2, [r7, #8]
 8014dc4:	6978      	ldr	r0, [r7, #20]
 8014dc6:	f001 f9dd 	bl	8016184 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8014dca:	bf00      	nop
 8014dcc:	3718      	adds	r7, #24
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	0801c1e0 	.word	0x0801c1e0
 8014dd8:	0801c1d8 	.word	0x0801c1d8
 8014ddc:	0801c298 	.word	0x0801c298

08014de0 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014de0:	b5b0      	push	{r4, r5, r7, lr}
 8014de2:	b090      	sub	sp, #64	@ 0x40
 8014de4:	af0a      	add	r7, sp, #40	@ 0x28
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	785b      	ldrb	r3, [r3, #1]
 8014dee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014df0:	2300      	movs	r3, #0
 8014df2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014df4:	2300      	movs	r3, #0
 8014df6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8014f68 <RegionAS923RxConfig+0x188>)
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	4798      	blx	r3
 8014e04:	4603      	mov	r3, r0
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d001      	beq.n	8014e0e <RegionAS923RxConfig+0x2e>
    {
        return false;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	e0a8      	b.n	8014f60 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	7cdb      	ldrb	r3, [r3, #19]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d126      	bne.n	8014e64 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014e16:	4b55      	ldr	r3, [pc, #340]	@ (8014f6c <RegionAS923RxConfig+0x18c>)
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	4619      	mov	r1, r3
 8014e20:	460b      	mov	r3, r1
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	440b      	add	r3, r1
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4413      	add	r3, r2
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8014f6c <RegionAS923RxConfig+0x18c>)
 8014e30:	681a      	ldr	r2, [r3, #0]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	4619      	mov	r1, r3
 8014e38:	460b      	mov	r3, r1
 8014e3a:	005b      	lsls	r3, r3, #1
 8014e3c:	440b      	add	r3, r1
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	4413      	add	r3, r2
 8014e42:	3304      	adds	r3, #4
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d00c      	beq.n	8014e64 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014e4a:	4b48      	ldr	r3, [pc, #288]	@ (8014f6c <RegionAS923RxConfig+0x18c>)
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	4619      	mov	r1, r3
 8014e54:	460b      	mov	r3, r1
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	440b      	add	r3, r1
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4413      	add	r3, r2
 8014e5e:	3304      	adds	r3, #4
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8014e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e68:	4a41      	ldr	r2, [pc, #260]	@ (8014f70 <RegionAS923RxConfig+0x190>)
 8014e6a:	5cd3      	ldrb	r3, [r2, r3]
 8014e6c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8014f68 <RegionAS923RxConfig+0x188>)
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	6938      	ldr	r0, [r7, #16]
 8014e74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e7a:	2b07      	cmp	r3, #7
 8014e7c:	d128      	bne.n	8014ed0 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014e82:	4b39      	ldr	r3, [pc, #228]	@ (8014f68 <RegionAS923RxConfig+0x188>)
 8014e84:	699c      	ldr	r4, [r3, #24]
 8014e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014e8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014e8e:	fb02 f303 	mul.w	r3, r2, r3
 8014e92:	4619      	mov	r1, r3
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	7c92      	ldrb	r2, [r2, #18]
 8014e9e:	7df8      	ldrb	r0, [r7, #23]
 8014ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	9208      	str	r2, [sp, #32]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	9207      	str	r2, [sp, #28]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	9206      	str	r2, [sp, #24]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	9205      	str	r2, [sp, #20]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	9204      	str	r2, [sp, #16]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	9203      	str	r2, [sp, #12]
 8014eba:	9302      	str	r3, [sp, #8]
 8014ebc:	2305      	movs	r3, #5
 8014ebe:	9301      	str	r3, [sp, #4]
 8014ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8014f74 <RegionAS923RxConfig+0x194>)
 8014ec2:	9300      	str	r3, [sp, #0]
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	460a      	mov	r2, r1
 8014ec8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014ecc:	47a0      	blx	r4
 8014ece:	e024      	b.n	8014f1a <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014ed4:	4b24      	ldr	r3, [pc, #144]	@ (8014f68 <RegionAS923RxConfig+0x188>)
 8014ed6:	699c      	ldr	r4, [r3, #24]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	789b      	ldrb	r3, [r3, #2]
 8014edc:	461d      	mov	r5, r3
 8014ede:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	689b      	ldr	r3, [r3, #8]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	7c92      	ldrb	r2, [r2, #18]
 8014eec:	7df8      	ldrb	r0, [r7, #23]
 8014eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	9208      	str	r2, [sp, #32]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	9207      	str	r2, [sp, #28]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	9206      	str	r2, [sp, #24]
 8014efc:	2200      	movs	r2, #0
 8014efe:	9205      	str	r2, [sp, #20]
 8014f00:	2200      	movs	r2, #0
 8014f02:	9204      	str	r2, [sp, #16]
 8014f04:	2200      	movs	r2, #0
 8014f06:	9203      	str	r2, [sp, #12]
 8014f08:	9302      	str	r3, [sp, #8]
 8014f0a:	2308      	movs	r3, #8
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	2300      	movs	r3, #0
 8014f10:	9300      	str	r3, [sp, #0]
 8014f12:	2301      	movs	r3, #1
 8014f14:	460a      	mov	r2, r1
 8014f16:	4629      	mov	r1, r5
 8014f18:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	7c5b      	ldrb	r3, [r3, #17]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d005      	beq.n	8014f2e <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8014f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f26:	4a14      	ldr	r2, [pc, #80]	@ (8014f78 <RegionAS923RxConfig+0x198>)
 8014f28:	5cd3      	ldrb	r3, [r2, r3]
 8014f2a:	75bb      	strb	r3, [r7, #22]
 8014f2c:	e004      	b.n	8014f38 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8014f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f32:	4a12      	ldr	r2, [pc, #72]	@ (8014f7c <RegionAS923RxConfig+0x19c>)
 8014f34:	5cd3      	ldrb	r3, [r2, r3]
 8014f36:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014f38:	4b0b      	ldr	r3, [pc, #44]	@ (8014f68 <RegionAS923RxConfig+0x188>)
 8014f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f3c:	7dba      	ldrb	r2, [r7, #22]
 8014f3e:	320d      	adds	r2, #13
 8014f40:	b2d1      	uxtb	r1, r2
 8014f42:	7dfa      	ldrb	r2, [r7, #23]
 8014f44:	4610      	mov	r0, r2
 8014f46:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	7cdb      	ldrb	r3, [r3, #19]
 8014f4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014f50:	6939      	ldr	r1, [r7, #16]
 8014f52:	4618      	mov	r0, r3
 8014f54:	f001 fb90 	bl	8016678 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	7bfa      	ldrb	r2, [r7, #15]
 8014f5c:	701a      	strb	r2, [r3, #0]
    return true;
 8014f5e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3718      	adds	r7, #24
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bdb0      	pop	{r4, r5, r7, pc}
 8014f68:	0801c298 	.word	0x0801c298
 8014f6c:	20001964 	.word	0x20001964
 8014f70:	0801c1d8 	.word	0x0801c1d8
 8014f74:	00014585 	.word	0x00014585
 8014f78:	0801c208 	.word	0x0801c208
 8014f7c:	0801c200 	.word	0x0801c200

08014f80 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014f80:	b590      	push	{r4, r7, lr}
 8014f82:	b093      	sub	sp, #76	@ 0x4c
 8014f84:	af0a      	add	r7, sp, #40	@ 0x28
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f92:	461a      	mov	r2, r3
 8014f94:	4b5d      	ldr	r3, [pc, #372]	@ (801510c <RegionAS923TxConfig+0x18c>)
 8014f96:	5c9b      	ldrb	r3, [r3, r2]
 8014f98:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8015110 <RegionAS923TxConfig+0x190>)
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8015114 <RegionAS923TxConfig+0x194>)
 8014fa6:	6819      	ldr	r1, [r3, #0]
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	461c      	mov	r4, r3
 8014fae:	4623      	mov	r3, r4
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4423      	add	r3, r4
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	440b      	add	r3, r1
 8014fb8:	3309      	adds	r3, #9
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	005b      	lsls	r3, r3, #1
 8014fc2:	440b      	add	r3, r1
 8014fc4:	00db      	lsls	r3, r3, #3
 8014fc6:	4413      	add	r3, r2
 8014fc8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014fcc:	4619      	mov	r1, r3
 8014fce:	f001 fb20 	bl	8016612 <RegionCommonLimitTxPower>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014fdc:	494e      	ldr	r1, [pc, #312]	@ (8015118 <RegionAS923TxConfig+0x198>)
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f001 fb2c 	bl	801663c <RegionCommonGetBandwidth>
 8014fe4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6859      	ldr	r1, [r3, #4]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	689a      	ldr	r2, [r3, #8]
 8014ff2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f001 f97c 	bl	80162f4 <RegionCommonComputeTxPower>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015000:	4b46      	ldr	r3, [pc, #280]	@ (801511c <RegionAS923TxConfig+0x19c>)
 8015002:	68da      	ldr	r2, [r3, #12]
 8015004:	4b43      	ldr	r3, [pc, #268]	@ (8015114 <RegionAS923TxConfig+0x194>)
 8015006:	6819      	ldr	r1, [r3, #0]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	4618      	mov	r0, r3
 801500e:	4603      	mov	r3, r0
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	4403      	add	r3, r0
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	440b      	add	r3, r1
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	4618      	mov	r0, r3
 801501c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015024:	2b07      	cmp	r3, #7
 8015026:	d124      	bne.n	8015072 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015028:	2300      	movs	r3, #0
 801502a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801502c:	4b3b      	ldr	r3, [pc, #236]	@ (801511c <RegionAS923TxConfig+0x19c>)
 801502e:	69dc      	ldr	r4, [r3, #28]
 8015030:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015034:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015038:	fb02 f303 	mul.w	r3, r2, r3
 801503c:	461a      	mov	r2, r3
 801503e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015042:	7ff8      	ldrb	r0, [r7, #31]
 8015044:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8015048:	9308      	str	r3, [sp, #32]
 801504a:	2300      	movs	r3, #0
 801504c:	9307      	str	r3, [sp, #28]
 801504e:	2300      	movs	r3, #0
 8015050:	9306      	str	r3, [sp, #24]
 8015052:	2300      	movs	r3, #0
 8015054:	9305      	str	r3, [sp, #20]
 8015056:	2301      	movs	r3, #1
 8015058:	9304      	str	r3, [sp, #16]
 801505a:	2300      	movs	r3, #0
 801505c:	9303      	str	r3, [sp, #12]
 801505e:	2305      	movs	r3, #5
 8015060:	9302      	str	r3, [sp, #8]
 8015062:	2300      	movs	r3, #0
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	9200      	str	r2, [sp, #0]
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801506e:	47a0      	blx	r4
 8015070:	e01d      	b.n	80150ae <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8015072:	2301      	movs	r3, #1
 8015074:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015076:	4b29      	ldr	r3, [pc, #164]	@ (801511c <RegionAS923TxConfig+0x19c>)
 8015078:	69dc      	ldr	r4, [r3, #28]
 801507a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801507e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015082:	7ff8      	ldrb	r0, [r7, #31]
 8015084:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015088:	9208      	str	r2, [sp, #32]
 801508a:	2200      	movs	r2, #0
 801508c:	9207      	str	r2, [sp, #28]
 801508e:	2200      	movs	r2, #0
 8015090:	9206      	str	r2, [sp, #24]
 8015092:	2200      	movs	r2, #0
 8015094:	9205      	str	r2, [sp, #20]
 8015096:	2201      	movs	r2, #1
 8015098:	9204      	str	r2, [sp, #16]
 801509a:	2200      	movs	r2, #0
 801509c:	9203      	str	r2, [sp, #12]
 801509e:	2208      	movs	r2, #8
 80150a0:	9202      	str	r2, [sp, #8]
 80150a2:	2201      	movs	r2, #1
 80150a4:	9201      	str	r2, [sp, #4]
 80150a6:	9300      	str	r3, [sp, #0]
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	2200      	movs	r2, #0
 80150ac:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80150ae:	4b19      	ldr	r3, [pc, #100]	@ (8015114 <RegionAS923TxConfig+0x194>)
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	4619      	mov	r1, r3
 80150b8:	460b      	mov	r3, r1
 80150ba:	005b      	lsls	r3, r3, #1
 80150bc:	440b      	add	r3, r1
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	4413      	add	r3, r2
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150ca:	4619      	mov	r1, r3
 80150cc:	4610      	mov	r0, r2
 80150ce:	f001 fb05 	bl	80166dc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	899b      	ldrh	r3, [r3, #12]
 80150dc:	4619      	mov	r1, r3
 80150de:	4610      	mov	r0, r2
 80150e0:	f7ff fa64 	bl	80145ac <GetTimeOnAir>
 80150e4:	4602      	mov	r2, r0
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80150ea:	4b0c      	ldr	r3, [pc, #48]	@ (801511c <RegionAS923TxConfig+0x19c>)
 80150ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	8992      	ldrh	r2, [r2, #12]
 80150f2:	b2d1      	uxtb	r1, r2
 80150f4:	7ffa      	ldrb	r2, [r7, #31]
 80150f6:	4610      	mov	r0, r2
 80150f8:	4798      	blx	r3

    *txPower = txPowerLimited;
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	7f7a      	ldrb	r2, [r7, #29]
 80150fe:	701a      	strb	r2, [r3, #0]
    return true;
 8015100:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015102:	4618      	mov	r0, r3
 8015104:	3724      	adds	r7, #36	@ 0x24
 8015106:	46bd      	mov	sp, r7
 8015108:	bd90      	pop	{r4, r7, pc}
 801510a:	bf00      	nop
 801510c:	0801c1d8 	.word	0x0801c1d8
 8015110:	20001968 	.word	0x20001968
 8015114:	20001964 	.word	0x20001964
 8015118:	0801c1e0 	.word	0x0801c1e0
 801511c:	0801c298 	.word	0x0801c298

08015120 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015120:	b590      	push	{r4, r7, lr}
 8015122:	b093      	sub	sp, #76	@ 0x4c
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
 801512c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801512e:	2307      	movs	r3, #7
 8015130:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015134:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015138:	2200      	movs	r2, #0
 801513a:	601a      	str	r2, [r3, #0]
 801513c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801514e:	e085      	b.n	801525c <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	685a      	ldr	r2, [r3, #4]
 8015154:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015158:	4413      	add	r3, r2
 801515a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801515e:	4611      	mov	r1, r2
 8015160:	4618      	mov	r0, r3
 8015162:	f000 ff0f 	bl	8015f84 <RegionCommonParseLinkAdrReq>
 8015166:	4603      	mov	r3, r0
 8015168:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801516c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015170:	2b00      	cmp	r3, #0
 8015172:	d07b      	beq.n	801526c <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015174:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015178:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801517c:	4413      	add	r3, r2
 801517e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015182:	2307      	movs	r3, #7
 8015184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801518c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801518e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015192:	2b00      	cmp	r3, #0
 8015194:	d109      	bne.n	80151aa <RegionAS923LinkAdrReq+0x8a>
 8015196:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015198:	2b00      	cmp	r3, #0
 801519a:	d106      	bne.n	80151aa <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801519c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80151a0:	f023 0301 	bic.w	r3, r3, #1
 80151a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80151a8:	e058      	b.n	801525c <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80151aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d003      	beq.n	80151ba <RegionAS923LinkAdrReq+0x9a>
 80151b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80151b6:	2b05      	cmp	r3, #5
 80151b8:	d903      	bls.n	80151c2 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80151ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80151be:	2b06      	cmp	r3, #6
 80151c0:	d906      	bls.n	80151d0 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80151c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80151c6:	f023 0301 	bic.w	r3, r3, #1
 80151ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80151ce:	e045      	b.n	801525c <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80151d0:	2300      	movs	r3, #0
 80151d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80151d6:	e03d      	b.n	8015254 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80151d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80151dc:	2b06      	cmp	r3, #6
 80151de:	d118      	bne.n	8015212 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80151e0:	4b5f      	ldr	r3, [pc, #380]	@ (8015360 <RegionAS923LinkAdrReq+0x240>)
 80151e2:	6819      	ldr	r1, [r3, #0]
 80151e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	440b      	add	r3, r1
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d028      	beq.n	801524a <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80151f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80151fc:	2201      	movs	r2, #1
 80151fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015202:	b21a      	sxth	r2, r3
 8015204:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015206:	b21b      	sxth	r3, r3
 8015208:	4313      	orrs	r3, r2
 801520a:	b21b      	sxth	r3, r3
 801520c:	b29b      	uxth	r3, r3
 801520e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015210:	e01b      	b.n	801524a <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015212:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015214:	461a      	mov	r2, r3
 8015216:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801521a:	fa42 f303 	asr.w	r3, r2, r3
 801521e:	f003 0301 	and.w	r3, r3, #1
 8015222:	2b00      	cmp	r3, #0
 8015224:	d011      	beq.n	801524a <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015226:	4b4e      	ldr	r3, [pc, #312]	@ (8015360 <RegionAS923LinkAdrReq+0x240>)
 8015228:	6819      	ldr	r1, [r3, #0]
 801522a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801522e:	4613      	mov	r3, r2
 8015230:	005b      	lsls	r3, r3, #1
 8015232:	4413      	add	r3, r2
 8015234:	009b      	lsls	r3, r3, #2
 8015236:	440b      	add	r3, r1
 8015238:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801523a:	2b00      	cmp	r3, #0
 801523c:	d105      	bne.n	801524a <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801523e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015242:	f023 0301 	bic.w	r3, r3, #1
 8015246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801524a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801524e:	3301      	adds	r3, #1
 8015250:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015254:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015258:	2b0f      	cmp	r3, #15
 801525a:	d9bd      	bls.n	80151d8 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	7a1b      	ldrb	r3, [r3, #8]
 8015260:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015264:	429a      	cmp	r2, r3
 8015266:	f4ff af73 	bcc.w	8015150 <RegionAS923LinkAdrReq+0x30>
 801526a:	e000      	b.n	801526e <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801526c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801526e:	2302      	movs	r3, #2
 8015270:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	7a5b      	ldrb	r3, [r3, #9]
 8015278:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801527c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015280:	4618      	mov	r0, r3
 8015282:	f7ff f9e3 	bl	801464c <RegionAS923GetPhyParam>
 8015286:	4603      	mov	r3, r0
 8015288:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801528a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801528e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	7a9b      	ldrb	r3, [r3, #10]
 8015294:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015296:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801529a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801529c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80152a0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80152a2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80152a6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80152ae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152b6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	7b5b      	ldrb	r3, [r3, #13]
 80152bc:	b25b      	sxtb	r3, r3
 80152be:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 80152c0:	2310      	movs	r3, #16
 80152c2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80152c4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80152c8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80152ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152cc:	b25b      	sxtb	r3, r3
 80152ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80152d2:	2307      	movs	r3, #7
 80152d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80152d8:	4b21      	ldr	r3, [pc, #132]	@ (8015360 <RegionAS923LinkAdrReq+0x240>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80152de:	2307      	movs	r3, #7
 80152e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80152e4:	2300      	movs	r3, #0
 80152e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80152f0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80152f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80152f8:	1c9a      	adds	r2, r3, #2
 80152fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80152fe:	1c59      	adds	r1, r3, #1
 8015300:	f107 0010 	add.w	r0, r7, #16
 8015304:	4623      	mov	r3, r4
 8015306:	f000 fe8e 	bl	8016026 <RegionCommonLinkAdrReqVerifyParams>
 801530a:	4603      	mov	r3, r0
 801530c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015310:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015314:	2b07      	cmp	r3, #7
 8015316:	d10d      	bne.n	8015334 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015318:	4b11      	ldr	r3, [pc, #68]	@ (8015360 <RegionAS923LinkAdrReq+0x240>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015320:	220c      	movs	r2, #12
 8015322:	2100      	movs	r1, #0
 8015324:	4618      	mov	r0, r3
 8015326:	f001 fa73 	bl	8016810 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801532a:	4b0d      	ldr	r3, [pc, #52]	@ (8015360 <RegionAS923LinkAdrReq+0x240>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015330:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015334:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801533c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015344:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801534c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801534e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015352:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015354:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015358:	4618      	mov	r0, r3
 801535a:	374c      	adds	r7, #76	@ 0x4c
 801535c:	46bd      	mov	sp, r7
 801535e:	bd90      	pop	{r4, r7, pc}
 8015360:	20001964 	.word	0x20001964

08015364 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801536c:	2307      	movs	r3, #7
 801536e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	4618      	mov	r0, r3
 8015376:	f7ff f8f3 	bl	8014560 <VerifyRfFreq>
 801537a:	4603      	mov	r3, r0
 801537c:	f083 0301 	eor.w	r3, r3, #1
 8015380:	b2db      	uxtb	r3, r3
 8015382:	2b00      	cmp	r3, #0
 8015384:	d003      	beq.n	801538e <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015386:	7bfb      	ldrb	r3, [r7, #15]
 8015388:	f023 0301 	bic.w	r3, r3, #1
 801538c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f993 3000 	ldrsb.w	r3, [r3]
 8015394:	2207      	movs	r2, #7
 8015396:	2100      	movs	r1, #0
 8015398:	4618      	mov	r0, r3
 801539a:	f000 fc32 	bl	8015c02 <RegionCommonValueInRange>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d103      	bne.n	80153ac <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80153a4:	7bfb      	ldrb	r3, [r7, #15]
 80153a6:	f023 0302 	bic.w	r3, r3, #2
 80153aa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153b2:	2207      	movs	r2, #7
 80153b4:	2100      	movs	r1, #0
 80153b6:	4618      	mov	r0, r3
 80153b8:	f000 fc23 	bl	8015c02 <RegionCommonValueInRange>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d103      	bne.n	80153ca <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80153c2:	7bfb      	ldrb	r3, [r7, #15]
 80153c4:	f023 0304 	bic.w	r3, r3, #4
 80153c8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 80153ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3710      	adds	r7, #16
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80153dc:	2303      	movs	r3, #3
 80153de:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d114      	bne.n	8015414 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80153f4:	f107 0308 	add.w	r3, r7, #8
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 f9eb 	bl	80157d4 <RegionAS923ChannelsRemove>
 80153fe:	4603      	mov	r3, r0
 8015400:	f083 0301 	eor.w	r3, r3, #1
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d03b      	beq.n	8015482 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 801540a:	7dfb      	ldrb	r3, [r7, #23]
 801540c:	f023 0303 	bic.w	r3, r3, #3
 8015410:	75fb      	strb	r3, [r7, #23]
 8015412:	e036      	b.n	8015482 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015420:	b2db      	uxtb	r3, r3
 8015422:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015424:	f107 030c 	add.w	r3, r7, #12
 8015428:	4618      	mov	r0, r3
 801542a:	f000 f937 	bl	801569c <RegionAS923ChannelAdd>
 801542e:	4603      	mov	r3, r0
 8015430:	2b06      	cmp	r3, #6
 8015432:	d820      	bhi.n	8015476 <RegionAS923NewChannelReq+0xa2>
 8015434:	a201      	add	r2, pc, #4	@ (adr r2, 801543c <RegionAS923NewChannelReq+0x68>)
 8015436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543a:	bf00      	nop
 801543c:	08015481 	.word	0x08015481
 8015440:	08015477 	.word	0x08015477
 8015444:	08015477 	.word	0x08015477
 8015448:	08015477 	.word	0x08015477
 801544c:	08015459 	.word	0x08015459
 8015450:	08015463 	.word	0x08015463
 8015454:	0801546d 	.word	0x0801546d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	f023 0301 	bic.w	r3, r3, #1
 801545e:	75fb      	strb	r3, [r7, #23]
                break;
 8015460:	e00f      	b.n	8015482 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015462:	7dfb      	ldrb	r3, [r7, #23]
 8015464:	f023 0302 	bic.w	r3, r3, #2
 8015468:	75fb      	strb	r3, [r7, #23]
                break;
 801546a:	e00a      	b.n	8015482 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801546c:	7dfb      	ldrb	r3, [r7, #23]
 801546e:	f023 0303 	bic.w	r3, r3, #3
 8015472:	75fb      	strb	r3, [r7, #23]
                break;
 8015474:	e005      	b.n	8015482 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	f023 0303 	bic.w	r3, r3, #3
 801547c:	75fb      	strb	r3, [r7, #23]
                break;
 801547e:	e000      	b.n	8015482 <RegionAS923NewChannelReq+0xae>
                break;
 8015480:	bf00      	nop
            }
        }
    }

    return status;
 8015482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3718      	adds	r7, #24
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop

08015490 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015490:	b480      	push	{r7}
 8015492:	b083      	sub	sp, #12
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	370c      	adds	r7, #12
 801549e:	46bd      	mov	sp, r7
 80154a0:	bc80      	pop	{r7}
 80154a2:	4770      	bx	lr

080154a4 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80154ac:	2303      	movs	r3, #3
 80154ae:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7ff f853 	bl	8014560 <VerifyRfFreq>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f083 0301 	eor.w	r3, r3, #1
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d003      	beq.n	80154ce <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 80154c6:	7bfb      	ldrb	r3, [r7, #15]
 80154c8:	f023 0301 	bic.w	r3, r3, #1
 80154cc:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80154ce:	4b14      	ldr	r3, [pc, #80]	@ (8015520 <RegionAS923DlChannelReq+0x7c>)
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	4619      	mov	r1, r3
 80154d8:	460b      	mov	r3, r1
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	440b      	add	r3, r1
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	4413      	add	r3, r2
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d103      	bne.n	80154f0 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
 80154ea:	f023 0302 	bic.w	r3, r3, #2
 80154ee:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
 80154f2:	2b03      	cmp	r3, #3
 80154f4:	d10d      	bne.n	8015512 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80154f6:	4b0a      	ldr	r3, [pc, #40]	@ (8015520 <RegionAS923DlChannelReq+0x7c>)
 80154f8:	6819      	ldr	r1, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	4618      	mov	r0, r3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	685a      	ldr	r2, [r3, #4]
 8015504:	4603      	mov	r3, r0
 8015506:	005b      	lsls	r3, r3, #1
 8015508:	4403      	add	r3, r0
 801550a:	009b      	lsls	r3, r3, #2
 801550c:	440b      	add	r3, r1
 801550e:	3304      	adds	r3, #4
 8015510:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8015512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	20001964 	.word	0x20001964

08015524 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	4603      	mov	r3, r0
 801552c:	460a      	mov	r2, r1
 801552e:	71fb      	strb	r3, [r7, #7]
 8015530:	4613      	mov	r3, r2
 8015532:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015534:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015536:	4618      	mov	r0, r3
 8015538:	370c      	adds	r7, #12
 801553a:	46bd      	mov	sp, r7
 801553c:	bc80      	pop	{r7}
 801553e:	4770      	bx	lr

08015540 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b09a      	sub	sp, #104	@ 0x68
 8015544:	af02      	add	r7, sp, #8
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
 801554c:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 801554e:	2300      	movs	r3, #0
 8015550:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015554:	2300      	movs	r3, #0
 8015556:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801555a:	2300      	movs	r3, #0
 801555c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801555e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015562:	2200      	movs	r2, #0
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	605a      	str	r2, [r3, #4]
 8015568:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801556a:	230c      	movs	r3, #12
 801556c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015570:	2303      	movs	r3, #3
 8015572:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015574:	4b47      	ldr	r3, [pc, #284]	@ (8015694 <RegionAS923NextChannel+0x154>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801557c:	2201      	movs	r2, #1
 801557e:	2100      	movs	r1, #0
 8015580:	4618      	mov	r0, r3
 8015582:	f000 fb8f 	bl	8015ca4 <RegionCommonCountChannels>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	d10a      	bne.n	80155a2 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801558c:	4b41      	ldr	r3, [pc, #260]	@ (8015694 <RegionAS923NextChannel+0x154>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015594:	4b3f      	ldr	r3, [pc, #252]	@ (8015694 <RegionAS923NextChannel+0x154>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	f042 0203 	orr.w	r2, r2, #3
 801559c:	b292      	uxth	r2, r2
 801559e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	7a5b      	ldrb	r3, [r3, #9]
 80155a6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80155b2:	4b38      	ldr	r3, [pc, #224]	@ (8015694 <RegionAS923NextChannel+0x154>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80155ba:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80155bc:	4b35      	ldr	r3, [pc, #212]	@ (8015694 <RegionAS923NextChannel+0x154>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80155c2:	4b35      	ldr	r3, [pc, #212]	@ (8015698 <RegionAS923NextChannel+0x158>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80155c8:	2310      	movs	r3, #16
 80155ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80155cc:	f107 0312 	add.w	r3, r7, #18
 80155d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	7a9b      	ldrb	r3, [r3, #10]
 80155e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80155e6:	2301      	movs	r3, #1
 80155e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80155ec:	68fa      	ldr	r2, [r7, #12]
 80155ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80155f2:	320c      	adds	r2, #12
 80155f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80155f8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	7d1b      	ldrb	r3, [r3, #20]
 8015600:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	8adb      	ldrh	r3, [r3, #22]
 801560e:	4619      	mov	r1, r3
 8015610:	4610      	mov	r0, r2
 8015612:	f7fe ffcb 	bl	80145ac <GetTimeOnAir>
 8015616:	4603      	mov	r3, r0
 8015618:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801561a:	f107 0314 	add.w	r3, r7, #20
 801561e:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015620:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015624:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015628:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	9301      	str	r3, [sp, #4]
 8015630:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	460b      	mov	r3, r1
 8015638:	6839      	ldr	r1, [r7, #0]
 801563a:	f000 ff4a 	bl	80164d2 <RegionCommonIdentifyChannels>
 801563e:	4603      	mov	r3, r0
 8015640:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015644:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10e      	bne.n	801566a <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801564c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015650:	3b01      	subs	r3, #1
 8015652:	4619      	mov	r1, r3
 8015654:	2000      	movs	r0, #0
 8015656:	f001 f889 	bl	801676c <randr>
 801565a:	4603      	mov	r3, r0
 801565c:	3360      	adds	r3, #96	@ 0x60
 801565e:	443b      	add	r3, r7
 8015660:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	701a      	strb	r2, [r3, #0]
 8015668:	e00e      	b.n	8015688 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801566a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801566e:	2b0c      	cmp	r3, #12
 8015670:	d10a      	bne.n	8015688 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015672:	4b08      	ldr	r3, [pc, #32]	@ (8015694 <RegionAS923NextChannel+0x154>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801567a:	4b06      	ldr	r3, [pc, #24]	@ (8015694 <RegionAS923NextChannel+0x154>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f042 0203 	orr.w	r2, r2, #3
 8015682:	b292      	uxth	r2, r2
 8015684:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8015688:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 801568c:	4618      	mov	r0, r3
 801568e:	3760      	adds	r7, #96	@ 0x60
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	20001964 	.word	0x20001964
 8015698:	20001968 	.word	0x20001968

0801569c <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b084      	sub	sp, #16
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 80156a4:	2300      	movs	r3, #0
 80156a6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80156a8:	2300      	movs	r3, #0
 80156aa:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	791b      	ldrb	r3, [r3, #4]
 80156b0:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80156b2:	7b7b      	ldrb	r3, [r7, #13]
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	d801      	bhi.n	80156bc <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80156b8:	2306      	movs	r3, #6
 80156ba:	e085      	b.n	80157c8 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80156bc:	7b7b      	ldrb	r3, [r7, #13]
 80156be:	2b0f      	cmp	r3, #15
 80156c0:	d901      	bls.n	80156c6 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80156c2:	2303      	movs	r3, #3
 80156c4:	e080      	b.n	80157c8 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	7a1b      	ldrb	r3, [r3, #8]
 80156cc:	f343 0303 	sbfx	r3, r3, #0, #4
 80156d0:	b25b      	sxtb	r3, r3
 80156d2:	2207      	movs	r2, #7
 80156d4:	2100      	movs	r1, #0
 80156d6:	4618      	mov	r0, r3
 80156d8:	f000 fa93 	bl	8015c02 <RegionCommonValueInRange>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d101      	bne.n	80156e6 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80156e2:	2301      	movs	r3, #1
 80156e4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	7a1b      	ldrb	r3, [r3, #8]
 80156ec:	f343 1303 	sbfx	r3, r3, #4, #4
 80156f0:	b25b      	sxtb	r3, r3
 80156f2:	2207      	movs	r2, #7
 80156f4:	2100      	movs	r1, #0
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 fa83 	bl	8015c02 <RegionCommonValueInRange>
 80156fc:	4603      	mov	r3, r0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d101      	bne.n	8015706 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8015702:	2301      	movs	r3, #1
 8015704:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	7a1b      	ldrb	r3, [r3, #8]
 801570c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015710:	b25a      	sxtb	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	7a1b      	ldrb	r3, [r3, #8]
 8015718:	f343 1303 	sbfx	r3, r3, #4, #4
 801571c:	b25b      	sxtb	r3, r3
 801571e:	429a      	cmp	r2, r3
 8015720:	dd01      	ble.n	8015726 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8015722:	2301      	movs	r3, #1
 8015724:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015726:	7bbb      	ldrb	r3, [r7, #14]
 8015728:	f083 0301 	eor.w	r3, r3, #1
 801572c:	b2db      	uxtb	r3, r3
 801572e:	2b00      	cmp	r3, #0
 8015730:	d00d      	beq.n	801574e <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	4618      	mov	r0, r3
 801573a:	f7fe ff11 	bl	8014560 <VerifyRfFreq>
 801573e:	4603      	mov	r3, r0
 8015740:	f083 0301 	eor.w	r3, r3, #1
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b00      	cmp	r3, #0
 8015748:	d001      	beq.n	801574e <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801574a:	2301      	movs	r3, #1
 801574c:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801574e:	7bfb      	ldrb	r3, [r7, #15]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d004      	beq.n	801575e <RegionAS923ChannelAdd+0xc2>
 8015754:	7bbb      	ldrb	r3, [r7, #14]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801575a:	2306      	movs	r3, #6
 801575c:	e034      	b.n	80157c8 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 801575e:	7bfb      	ldrb	r3, [r7, #15]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d001      	beq.n	8015768 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015764:	2305      	movs	r3, #5
 8015766:	e02f      	b.n	80157c8 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8015768:	7bbb      	ldrb	r3, [r7, #14]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d001      	beq.n	8015772 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801576e:	2304      	movs	r3, #4
 8015770:	e02a      	b.n	80157c8 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015772:	4b17      	ldr	r3, [pc, #92]	@ (80157d0 <RegionAS923ChannelAdd+0x134>)
 8015774:	6819      	ldr	r1, [r3, #0]
 8015776:	7b7a      	ldrb	r2, [r7, #13]
 8015778:	4613      	mov	r3, r2
 801577a:	005b      	lsls	r3, r3, #1
 801577c:	4413      	add	r3, r2
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	18c8      	adds	r0, r1, r3
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	220c      	movs	r2, #12
 8015788:	4619      	mov	r1, r3
 801578a:	f001 f806 	bl	801679a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801578e:	4b10      	ldr	r3, [pc, #64]	@ (80157d0 <RegionAS923ChannelAdd+0x134>)
 8015790:	6819      	ldr	r1, [r3, #0]
 8015792:	7b7a      	ldrb	r2, [r7, #13]
 8015794:	4613      	mov	r3, r2
 8015796:	005b      	lsls	r3, r3, #1
 8015798:	4413      	add	r3, r2
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	440b      	add	r3, r1
 801579e:	3309      	adds	r3, #9
 80157a0:	2200      	movs	r2, #0
 80157a2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80157a4:	4b0a      	ldr	r3, [pc, #40]	@ (80157d0 <RegionAS923ChannelAdd+0x134>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80157ac:	b21a      	sxth	r2, r3
 80157ae:	7b7b      	ldrb	r3, [r7, #13]
 80157b0:	2101      	movs	r1, #1
 80157b2:	fa01 f303 	lsl.w	r3, r1, r3
 80157b6:	b21b      	sxth	r3, r3
 80157b8:	4313      	orrs	r3, r2
 80157ba:	b21a      	sxth	r2, r3
 80157bc:	4b04      	ldr	r3, [pc, #16]	@ (80157d0 <RegionAS923ChannelAdd+0x134>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	b292      	uxth	r2, r2
 80157c2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80157c6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	20001964 	.word	0x20001964

080157d4 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b086      	sub	sp, #24
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	781b      	ldrb	r3, [r3, #0]
 80157e0:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80157e2:	7dfb      	ldrb	r3, [r7, #23]
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d801      	bhi.n	80157ec <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80157e8:	2300      	movs	r3, #0
 80157ea:	e016      	b.n	801581a <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80157ec:	4b0d      	ldr	r3, [pc, #52]	@ (8015824 <RegionAS923ChannelsRemove+0x50>)
 80157ee:	6819      	ldr	r1, [r3, #0]
 80157f0:	7dfa      	ldrb	r2, [r7, #23]
 80157f2:	4613      	mov	r3, r2
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	4413      	add	r3, r2
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	440b      	add	r3, r1
 80157fc:	461a      	mov	r2, r3
 80157fe:	2300      	movs	r3, #0
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	6053      	str	r3, [r2, #4]
 8015804:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8015806:	4b07      	ldr	r3, [pc, #28]	@ (8015824 <RegionAS923ChannelsRemove+0x50>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801580e:	7df9      	ldrb	r1, [r7, #23]
 8015810:	2210      	movs	r2, #16
 8015812:	4618      	mov	r0, r3
 8015814:	f000 fa12 	bl	8015c3c <RegionCommonChanDisable>
 8015818:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 801581a:	4618      	mov	r0, r3
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	20001964 	.word	0x20001964

08015828 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015828:	b480      	push	{r7}
 801582a:	b085      	sub	sp, #20
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	71fb      	strb	r3, [r7, #7]
 8015832:	460b      	mov	r3, r1
 8015834:	71bb      	strb	r3, [r7, #6]
 8015836:	4613      	mov	r3, r2
 8015838:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 801583a:	79fb      	ldrb	r3, [r7, #7]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d10a      	bne.n	8015856 <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8015840:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015844:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015848:	490b      	ldr	r1, [pc, #44]	@ (8015878 <RegionAS923ApplyDrOffset+0x50>)
 801584a:	00d2      	lsls	r2, r2, #3
 801584c:	440a      	add	r2, r1
 801584e:	4413      	add	r3, r2
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	73fb      	strb	r3, [r7, #15]
 8015854:	e009      	b.n	801586a <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8015856:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801585a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801585e:	4907      	ldr	r1, [pc, #28]	@ (801587c <RegionAS923ApplyDrOffset+0x54>)
 8015860:	00d2      	lsls	r2, r2, #3
 8015862:	440a      	add	r2, r1
 8015864:	4413      	add	r3, r2
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 801586a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 801586c:	4618      	mov	r0, r3
 801586e:	3714      	adds	r7, #20
 8015870:	46bd      	mov	sp, r7
 8015872:	bc80      	pop	{r7}
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop
 8015878:	0801c218 	.word	0x0801c218
 801587c:	0801c258 	.word	0x0801c258

08015880 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015880:	b480      	push	{r7}
 8015882:	b087      	sub	sp, #28
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	4608      	mov	r0, r1
 801588a:	4639      	mov	r1, r7
 801588c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015890:	4603      	mov	r3, r0
 8015892:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	881b      	ldrh	r3, [r3, #0]
 8015898:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801589a:	7afb      	ldrb	r3, [r7, #11]
 801589c:	f083 0301 	eor.w	r3, r3, #1
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d01b      	beq.n	80158de <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80158a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80158aa:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80158b2:	d202      	bcs.n	80158ba <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80158b4:	2364      	movs	r3, #100	@ 0x64
 80158b6:	82bb      	strh	r3, [r7, #20]
 80158b8:	e00b      	b.n	80158d2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80158c0:	4293      	cmp	r3, r2
 80158c2:	d803      	bhi.n	80158cc <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80158c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80158c8:	82bb      	strh	r3, [r7, #20]
 80158ca:	e002      	b.n	80158d2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80158cc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80158d0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80158d2:	8aba      	ldrh	r2, [r7, #20]
 80158d4:	8afb      	ldrh	r3, [r7, #22]
 80158d6:	4293      	cmp	r3, r2
 80158d8:	bf38      	it	cc
 80158da:	4613      	movcc	r3, r2
 80158dc:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80158de:	8afb      	ldrh	r3, [r7, #22]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d101      	bne.n	80158e8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80158e4:	2301      	movs	r3, #1
 80158e6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80158e8:	8afb      	ldrh	r3, [r7, #22]
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	371c      	adds	r7, #28
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bc80      	pop	{r7}
 80158f2:	4770      	bx	lr

080158f4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08e      	sub	sp, #56	@ 0x38
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	4608      	mov	r0, r1
 80158fe:	4639      	mov	r1, r7
 8015900:	e881 000c 	stmia.w	r1, {r2, r3}
 8015904:	4603      	mov	r3, r0
 8015906:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	881b      	ldrh	r3, [r3, #0]
 801590c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801590e:	4b4b      	ldr	r3, [pc, #300]	@ (8015a3c <SetMaxTimeCredits+0x148>)
 8015910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015912:	463b      	mov	r3, r7
 8015914:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015918:	f004 fb76 	bl	801a008 <SysTimeToMs>
 801591c:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 801591e:	f107 0314 	add.w	r3, r7, #20
 8015922:	2200      	movs	r2, #0
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015928:	7af9      	ldrb	r1, [r7, #11]
 801592a:	463b      	mov	r3, r7
 801592c:	cb0c      	ldmia	r3, {r2, r3}
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	f7ff ffa6 	bl	8015880 <GetDutyCycle>
 8015934:	4603      	mov	r3, r0
 8015936:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8015938:	7afb      	ldrb	r3, [r7, #11]
 801593a:	f083 0301 	eor.w	r3, r3, #1
 801593e:	b2db      	uxtb	r3, r3
 8015940:	2b00      	cmp	r3, #0
 8015942:	d062      	beq.n	8015a0a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015944:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015946:	2b64      	cmp	r3, #100	@ 0x64
 8015948:	d105      	bne.n	8015956 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801594a:	4b3c      	ldr	r3, [pc, #240]	@ (8015a3c <SetMaxTimeCredits+0x148>)
 801594c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015952:	609a      	str	r2, [r3, #8]
 8015954:	e00b      	b.n	801596e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015956:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801595c:	d105      	bne.n	801596a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801595e:	4b38      	ldr	r3, [pc, #224]	@ (8015a40 <SetMaxTimeCredits+0x14c>)
 8015960:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015966:	609a      	str	r2, [r3, #8]
 8015968:	e001      	b.n	801596e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801596a:	4b36      	ldr	r3, [pc, #216]	@ (8015a44 <SetMaxTimeCredits+0x150>)
 801596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	689a      	ldr	r2, [r3, #8]
 8015972:	f107 031c 	add.w	r3, r7, #28
 8015976:	4611      	mov	r1, r2
 8015978:	4618      	mov	r0, r3
 801597a:	f004 fb6d 	bl	801a058 <SysTimeFromMs>
 801597e:	f107 0014 	add.w	r0, r7, #20
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	463a      	mov	r2, r7
 801598a:	ca06      	ldmia	r2, {r1, r2}
 801598c:	f004 fa7d 	bl	8019e8a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015990:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015994:	f083 0301 	eor.w	r3, r3, #1
 8015998:	b2db      	uxtb	r3, r3
 801599a:	2b00      	cmp	r3, #0
 801599c:	d006      	beq.n	80159ac <SetMaxTimeCredits+0xb8>
 801599e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80159a2:	f083 0301 	eor.w	r3, r3, #1
 80159a6:	b2db      	uxtb	r3, r3
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d108      	bne.n	80159be <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80159b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d103      	bne.n	80159be <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80159b6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80159b8:	4a23      	ldr	r2, [pc, #140]	@ (8015a48 <SetMaxTimeCredits+0x154>)
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d92f      	bls.n	8015a1e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159c2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	4a21      	ldr	r2, [pc, #132]	@ (8015a4c <SetMaxTimeCredits+0x158>)
 80159c8:	4293      	cmp	r3, r2
 80159ca:	d928      	bls.n	8015a1e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80159d2:	3b30      	subs	r3, #48	@ 0x30
 80159d4:	4a1e      	ldr	r2, [pc, #120]	@ (8015a50 <SetMaxTimeCredits+0x15c>)
 80159d6:	fba2 2303 	umull	r2, r3, r2, r3
 80159da:	0c1b      	lsrs	r3, r3, #16
 80159dc:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	4a1c      	ldr	r2, [pc, #112]	@ (8015a54 <SetMaxTimeCredits+0x160>)
 80159e2:	fb02 f303 	mul.w	r3, r2, r3
 80159e6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80159ee:	3330      	adds	r3, #48	@ 0x30
 80159f0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80159f2:	2300      	movs	r3, #0
 80159f4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80159f6:	f107 0314 	add.w	r3, r7, #20
 80159fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159fe:	f004 fb03 	bl	801a008 <SysTimeToMs>
 8015a02:	4602      	mov	r2, r0
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	609a      	str	r2, [r3, #8]
 8015a08:	e009      	b.n	8015a1e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015a0a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015a0e:	f083 0301 	eor.w	r3, r3, #1
 8015a12:	b2db      	uxtb	r3, r3
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d002      	beq.n	8015a1e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a1c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d102      	bne.n	8015a2c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a2a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015a30:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015a32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3730      	adds	r7, #48	@ 0x30
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	001b7740 	.word	0x001b7740
 8015a40:	0112a880 	.word	0x0112a880
 8015a44:	02932e00 	.word	0x02932e00
 8015a48:	0001517f 	.word	0x0001517f
 8015a4c:	0001ec2f 	.word	0x0001ec2f
 8015a50:	c22e4507 	.word	0xc22e4507
 8015a54:	00015180 	.word	0x00015180

08015a58 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af02      	add	r7, sp, #8
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	4608      	mov	r0, r1
 8015a62:	4611      	mov	r1, r2
 8015a64:	461a      	mov	r2, r3
 8015a66:	4603      	mov	r3, r0
 8015a68:	70fb      	strb	r3, [r7, #3]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	70bb      	strb	r3, [r7, #2]
 8015a6e:	4613      	mov	r3, r2
 8015a70:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015a72:	78f9      	ldrb	r1, [r7, #3]
 8015a74:	787b      	ldrb	r3, [r7, #1]
 8015a76:	9301      	str	r3, [sp, #4]
 8015a78:	78bb      	ldrb	r3, [r7, #2]
 8015a7a:	9300      	str	r3, [sp, #0]
 8015a7c:	f107 0318 	add.w	r3, r7, #24
 8015a80:	cb0c      	ldmia	r3, {r2, r3}
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7ff ff36 	bl	80158f4 <SetMaxTimeCredits>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015a8c:	78fb      	ldrb	r3, [r7, #3]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d00a      	beq.n	8015aa8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	685b      	ldr	r3, [r3, #4]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f005 f8f0 	bl	801ac7c <UTIL_TIMER_GetElapsedTime>
 8015a9c:	4602      	mov	r2, r0
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	441a      	add	r2, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	68da      	ldr	r2, [r3, #12]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d903      	bls.n	8015abc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	691a      	ldr	r2, [r3, #16]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6a3a      	ldr	r2, [r7, #32]
 8015ac0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3710      	adds	r7, #16
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015acc:	b480      	push	{r7}
 8015ace:	b085      	sub	sp, #20
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	460a      	mov	r2, r1
 8015ad6:	80fb      	strh	r3, [r7, #6]
 8015ad8:	4613      	mov	r3, r2
 8015ada:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015adc:	2300      	movs	r3, #0
 8015ade:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	73bb      	strb	r3, [r7, #14]
 8015ae4:	e011      	b.n	8015b0a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015ae6:	88fa      	ldrh	r2, [r7, #6]
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	2101      	movs	r1, #1
 8015aec:	fa01 f303 	lsl.w	r3, r1, r3
 8015af0:	401a      	ands	r2, r3
 8015af2:	7bbb      	ldrb	r3, [r7, #14]
 8015af4:	2101      	movs	r1, #1
 8015af6:	fa01 f303 	lsl.w	r3, r1, r3
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d102      	bne.n	8015b04 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015afe:	7bfb      	ldrb	r3, [r7, #15]
 8015b00:	3301      	adds	r3, #1
 8015b02:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015b04:	7bbb      	ldrb	r3, [r7, #14]
 8015b06:	3301      	adds	r3, #1
 8015b08:	73bb      	strb	r3, [r7, #14]
 8015b0a:	7bba      	ldrb	r2, [r7, #14]
 8015b0c:	797b      	ldrb	r3, [r7, #5]
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d3e9      	bcc.n	8015ae6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3714      	adds	r7, #20
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bc80      	pop	{r7}
 8015b1c:	4770      	bx	lr

08015b1e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b084      	sub	sp, #16
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6039      	str	r1, [r7, #0]
 8015b26:	4611      	mov	r1, r2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	71fb      	strb	r3, [r7, #7]
 8015b2e:	460b      	mov	r3, r1
 8015b30:	71bb      	strb	r3, [r7, #6]
 8015b32:	4613      	mov	r3, r2
 8015b34:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015b36:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015b3a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015b3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f000 f85d 	bl	8015c02 <RegionCommonValueInRange>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d101      	bne.n	8015b52 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e053      	b.n	8015bfa <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015b52:	2300      	movs	r3, #0
 8015b54:	73fb      	strb	r3, [r7, #15]
 8015b56:	2300      	movs	r3, #0
 8015b58:	73bb      	strb	r3, [r7, #14]
 8015b5a:	e049      	b.n	8015bf0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	737b      	strb	r3, [r7, #13]
 8015b60:	e03d      	b.n	8015bde <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015b62:	7bbb      	ldrb	r3, [r7, #14]
 8015b64:	005b      	lsls	r3, r3, #1
 8015b66:	683a      	ldr	r2, [r7, #0]
 8015b68:	4413      	add	r3, r2
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	7b7b      	ldrb	r3, [r7, #13]
 8015b70:	fa42 f303 	asr.w	r3, r2, r3
 8015b74:	f003 0301 	and.w	r3, r3, #1
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d02d      	beq.n	8015bd8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b7c:	7bfa      	ldrb	r2, [r7, #15]
 8015b7e:	7b7b      	ldrb	r3, [r7, #13]
 8015b80:	4413      	add	r3, r2
 8015b82:	461a      	mov	r2, r3
 8015b84:	4613      	mov	r3, r2
 8015b86:	005b      	lsls	r3, r3, #1
 8015b88:	4413      	add	r3, r2
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	461a      	mov	r2, r3
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	4413      	add	r3, r2
 8015b92:	7a1b      	ldrb	r3, [r3, #8]
 8015b94:	f343 0303 	sbfx	r3, r3, #0, #4
 8015b98:	b25b      	sxtb	r3, r3
 8015b9a:	f003 030f 	and.w	r3, r3, #15
 8015b9e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015ba0:	7bfa      	ldrb	r2, [r7, #15]
 8015ba2:	7b7b      	ldrb	r3, [r7, #13]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	4613      	mov	r3, r2
 8015baa:	005b      	lsls	r3, r3, #1
 8015bac:	4413      	add	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	7a1b      	ldrb	r3, [r3, #8]
 8015bb8:	f343 1303 	sbfx	r3, r3, #4, #4
 8015bbc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015bbe:	f003 030f 	and.w	r3, r3, #15
 8015bc2:	b25a      	sxtb	r2, r3
 8015bc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 f81a 	bl	8015c02 <RegionCommonValueInRange>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b01      	cmp	r3, #1
 8015bd2:	d101      	bne.n	8015bd8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e010      	b.n	8015bfa <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015bd8:	7b7b      	ldrb	r3, [r7, #13]
 8015bda:	3301      	adds	r3, #1
 8015bdc:	737b      	strb	r3, [r7, #13]
 8015bde:	7b7b      	ldrb	r3, [r7, #13]
 8015be0:	2b0f      	cmp	r3, #15
 8015be2:	d9be      	bls.n	8015b62 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015be4:	7bfb      	ldrb	r3, [r7, #15]
 8015be6:	3310      	adds	r3, #16
 8015be8:	73fb      	strb	r3, [r7, #15]
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	3301      	adds	r3, #1
 8015bee:	73bb      	strb	r3, [r7, #14]
 8015bf0:	7bfa      	ldrb	r2, [r7, #15]
 8015bf2:	79fb      	ldrb	r3, [r7, #7]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d3b1      	bcc.n	8015b5c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015bf8:	2300      	movs	r3, #0
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015c02:	b480      	push	{r7}
 8015c04:	b083      	sub	sp, #12
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	4603      	mov	r3, r0
 8015c0a:	71fb      	strb	r3, [r7, #7]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	71bb      	strb	r3, [r7, #6]
 8015c10:	4613      	mov	r3, r2
 8015c12:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015c14:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	db07      	blt.n	8015c30 <RegionCommonValueInRange+0x2e>
 8015c20:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c24:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	dc01      	bgt.n	8015c30 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	e000      	b.n	8015c32 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	370c      	adds	r7, #12
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bc80      	pop	{r7}
 8015c3a:	4770      	bx	lr

08015c3c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	460b      	mov	r3, r1
 8015c46:	70fb      	strb	r3, [r7, #3]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015c4c:	78fb      	ldrb	r3, [r7, #3]
 8015c4e:	091b      	lsrs	r3, r3, #4
 8015c50:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015c52:	78bb      	ldrb	r3, [r7, #2]
 8015c54:	091b      	lsrs	r3, r3, #4
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	7bfa      	ldrb	r2, [r7, #15]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d803      	bhi.n	8015c66 <RegionCommonChanDisable+0x2a>
 8015c5e:	78fa      	ldrb	r2, [r7, #3]
 8015c60:	78bb      	ldrb	r3, [r7, #2]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d301      	bcc.n	8015c6a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015c66:	2300      	movs	r3, #0
 8015c68:	e017      	b.n	8015c9a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015c6a:	7bfb      	ldrb	r3, [r7, #15]
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	4413      	add	r3, r2
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	b21a      	sxth	r2, r3
 8015c76:	78fb      	ldrb	r3, [r7, #3]
 8015c78:	f003 030f 	and.w	r3, r3, #15
 8015c7c:	2101      	movs	r1, #1
 8015c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8015c82:	b21b      	sxth	r3, r3
 8015c84:	43db      	mvns	r3, r3
 8015c86:	b21b      	sxth	r3, r3
 8015c88:	4013      	ands	r3, r2
 8015c8a:	b219      	sxth	r1, r3
 8015c8c:	7bfb      	ldrb	r3, [r7, #15]
 8015c8e:	005b      	lsls	r3, r3, #1
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	4413      	add	r3, r2
 8015c94:	b28a      	uxth	r2, r1
 8015c96:	801a      	strh	r2, [r3, #0]

    return true;
 8015c98:	2301      	movs	r3, #1
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3714      	adds	r7, #20
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bc80      	pop	{r7}
 8015ca2:	4770      	bx	lr

08015ca4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	460b      	mov	r3, r1
 8015cae:	70fb      	strb	r3, [r7, #3]
 8015cb0:	4613      	mov	r3, r2
 8015cb2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d101      	bne.n	8015cc2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	e018      	b.n	8015cf4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015cc2:	78fb      	ldrb	r3, [r7, #3]
 8015cc4:	73bb      	strb	r3, [r7, #14]
 8015cc6:	e010      	b.n	8015cea <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015cc8:	7bbb      	ldrb	r3, [r7, #14]
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	4413      	add	r3, r2
 8015cd0:	881b      	ldrh	r3, [r3, #0]
 8015cd2:	2110      	movs	r1, #16
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7ff fef9 	bl	8015acc <CountChannels>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	461a      	mov	r2, r3
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ce4:	7bbb      	ldrb	r3, [r7, #14]
 8015ce6:	3301      	adds	r3, #1
 8015ce8:	73bb      	strb	r3, [r7, #14]
 8015cea:	7bba      	ldrb	r2, [r7, #14]
 8015cec:	78bb      	ldrb	r3, [r7, #2]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d3ea      	bcc.n	8015cc8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3710      	adds	r7, #16
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b087      	sub	sp, #28
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	4613      	mov	r3, r2
 8015d08:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d016      	beq.n	8015d3e <RegionCommonChanMaskCopy+0x42>
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d013      	beq.n	8015d3e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015d16:	2300      	movs	r3, #0
 8015d18:	75fb      	strb	r3, [r7, #23]
 8015d1a:	e00c      	b.n	8015d36 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015d1c:	7dfb      	ldrb	r3, [r7, #23]
 8015d1e:	005b      	lsls	r3, r3, #1
 8015d20:	68ba      	ldr	r2, [r7, #8]
 8015d22:	441a      	add	r2, r3
 8015d24:	7dfb      	ldrb	r3, [r7, #23]
 8015d26:	005b      	lsls	r3, r3, #1
 8015d28:	68f9      	ldr	r1, [r7, #12]
 8015d2a:	440b      	add	r3, r1
 8015d2c:	8812      	ldrh	r2, [r2, #0]
 8015d2e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015d30:	7dfb      	ldrb	r3, [r7, #23]
 8015d32:	3301      	adds	r3, #1
 8015d34:	75fb      	strb	r3, [r7, #23]
 8015d36:	7dfa      	ldrb	r2, [r7, #23]
 8015d38:	79fb      	ldrb	r3, [r7, #7]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d3ee      	bcc.n	8015d1c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015d3e:	bf00      	nop
 8015d40:	371c      	adds	r7, #28
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bc80      	pop	{r7}
 8015d46:	4770      	bx	lr

08015d48 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015d48:	b082      	sub	sp, #8
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b086      	sub	sp, #24
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	60f8      	str	r0, [r7, #12]
 8015d52:	60b9      	str	r1, [r7, #8]
 8015d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8015d56:	4613      	mov	r3, r2
 8015d58:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015d5a:	79f9      	ldrb	r1, [r7, #7]
 8015d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015d60:	cb0c      	ldmia	r3, {r2, r3}
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	f7ff fd8c 	bl	8015880 <GetDutyCycle>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	68da      	ldr	r2, [r3, #12]
 8015d70:	8afb      	ldrh	r3, [r7, #22]
 8015d72:	68b9      	ldr	r1, [r7, #8]
 8015d74:	fb01 f303 	mul.w	r3, r1, r3
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d909      	bls.n	8015d90 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	68da      	ldr	r2, [r3, #12]
 8015d80:	8afb      	ldrh	r3, [r7, #22]
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	fb01 f303 	mul.w	r3, r1, r3
 8015d88:	1ad2      	subs	r2, r2, r3
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015d8e:	e002      	b.n	8015d96 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2200      	movs	r2, #0
 8015d94:	60da      	str	r2, [r3, #12]
}
 8015d96:	bf00      	nop
 8015d98:	3718      	adds	r7, #24
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015da0:	b002      	add	sp, #8
 8015da2:	4770      	bx	lr

08015da4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015da6:	b08f      	sub	sp, #60	@ 0x3c
 8015da8:	af04      	add	r7, sp, #16
 8015daa:	6039      	str	r1, [r7, #0]
 8015dac:	4611      	mov	r1, r2
 8015dae:	461a      	mov	r2, r3
 8015db0:	4603      	mov	r3, r0
 8015db2:	71fb      	strb	r3, [r7, #7]
 8015db4:	460b      	mov	r3, r1
 8015db6:	71bb      	strb	r3, [r7, #6]
 8015db8:	4613      	mov	r3, r2
 8015dba:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015dc2:	f004 ff49 	bl	801ac58 <UTIL_TIMER_GetCurrentTime>
 8015dc6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015ddc:	e0ba      	b.n	8015f54 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015dde:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015de2:	4613      	mov	r3, r2
 8015de4:	005b      	lsls	r3, r3, #1
 8015de6:	4413      	add	r3, r2
 8015de8:	00db      	lsls	r3, r3, #3
 8015dea:	461a      	mov	r2, r3
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	189c      	adds	r4, r3, r2
 8015df0:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8015df4:	797a      	ldrb	r2, [r7, #5]
 8015df6:	79fd      	ldrb	r5, [r7, #7]
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	9302      	str	r3, [sp, #8]
 8015dfc:	46ec      	mov	ip, sp
 8015dfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015e02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e06:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e0a:	4633      	mov	r3, r6
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f7ff fe22 	bl	8015a58 <UpdateTimeCredits>
 8015e14:	4603      	mov	r3, r0
 8015e16:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015e18:	8afa      	ldrh	r2, [r7, #22]
 8015e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015e1c:	fb02 f303 	mul.w	r3, r2, r3
 8015e20:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015e22:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e26:	4613      	mov	r3, r2
 8015e28:	005b      	lsls	r3, r3, #1
 8015e2a:	4413      	add	r3, r2
 8015e2c:	00db      	lsls	r3, r3, #3
 8015e2e:	461a      	mov	r2, r3
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	4413      	add	r3, r2
 8015e34:	68db      	ldr	r3, [r3, #12]
 8015e36:	69ba      	ldr	r2, [r7, #24]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d308      	bcc.n	8015e4e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015e3c:	797b      	ldrb	r3, [r7, #5]
 8015e3e:	f083 0301 	eor.w	r3, r3, #1
 8015e42:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d013      	beq.n	8015e70 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015e48:	79fb      	ldrb	r3, [r7, #7]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d010      	beq.n	8015e70 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015e4e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e52:	4613      	mov	r3, r2
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4413      	add	r3, r2
 8015e58:	00db      	lsls	r3, r3, #3
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	4413      	add	r3, r2
 8015e60:	2201      	movs	r2, #1
 8015e62:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015e68:	3301      	adds	r3, #1
 8015e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015e6e:	e06c      	b.n	8015f4a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015e70:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e74:	4613      	mov	r3, r2
 8015e76:	005b      	lsls	r3, r3, #1
 8015e78:	4413      	add	r3, r2
 8015e7a:	00db      	lsls	r3, r3, #3
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	4413      	add	r3, r2
 8015e82:	2200      	movs	r2, #0
 8015e84:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015e86:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	4413      	add	r3, r2
 8015e90:	00db      	lsls	r3, r3, #3
 8015e92:	461a      	mov	r2, r3
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	4413      	add	r3, r2
 8015e98:	691b      	ldr	r3, [r3, #16]
 8015e9a:	69ba      	ldr	r2, [r7, #24]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d215      	bcs.n	8015ecc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015ea0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4413      	add	r3, r2
 8015eaa:	00db      	lsls	r3, r3, #3
 8015eac:	461a      	mov	r2, r3
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	4413      	add	r3, r2
 8015eb2:	68db      	ldr	r3, [r3, #12]
 8015eb4:	69ba      	ldr	r2, [r7, #24]
 8015eb6:	1ad3      	subs	r3, r2, r3
 8015eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	bf28      	it	cs
 8015ebe:	4613      	movcs	r3, r2
 8015ec0:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015ecc:	79fb      	ldrb	r3, [r7, #7]
 8015ece:	f083 0301 	eor.w	r3, r3, #1
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d038      	beq.n	8015f4a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015ed8:	2300      	movs	r3, #0
 8015eda:	60fb      	str	r3, [r7, #12]
 8015edc:	2300      	movs	r3, #0
 8015ede:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015ee0:	8afb      	ldrh	r3, [r7, #22]
 8015ee2:	2b64      	cmp	r3, #100	@ 0x64
 8015ee4:	d103      	bne.n	8015eee <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015ee6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8015eea:	60fb      	str	r3, [r7, #12]
 8015eec:	e009      	b.n	8015f02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015eee:	8afb      	ldrh	r3, [r7, #22]
 8015ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015ef4:	d103      	bne.n	8015efe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015ef6:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8015efa:	60fb      	str	r3, [r7, #12]
 8015efc:	e001      	b.n	8015f02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015efe:	4b1e      	ldr	r3, [pc, #120]	@ (8015f78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f00:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f04:	4a1c      	ldr	r2, [pc, #112]	@ (8015f78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f06:	4293      	cmp	r3, r2
 8015f08:	d90e      	bls.n	8015f28 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f0e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015f12:	3b30      	subs	r3, #48	@ 0x30
 8015f14:	4919      	ldr	r1, [pc, #100]	@ (8015f7c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015f16:	fba1 1303 	umull	r1, r3, r1, r3
 8015f1a:	0c1b      	lsrs	r3, r3, #16
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	4918      	ldr	r1, [pc, #96]	@ (8015f80 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015f20:	fb01 f303 	mul.w	r3, r1, r3
 8015f24:	4413      	add	r3, r2
 8015f26:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015f28:	f107 000c 	add.w	r0, r7, #12
 8015f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015f2e:	9300      	str	r3, [sp, #0]
 8015f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f32:	f107 020c 	add.w	r2, r7, #12
 8015f36:	ca06      	ldmia	r2, {r1, r2}
 8015f38:	f003 ffa7 	bl	8019e8a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015f3c:	f107 030c 	add.w	r3, r7, #12
 8015f40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f44:	f004 f860 	bl	801a008 <SysTimeToMs>
 8015f48:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015f4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015f4e:	3301      	adds	r3, #1
 8015f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015f54:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015f58:	79bb      	ldrb	r3, [r7, #6]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	f4ff af3f 	bcc.w	8015dde <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d102      	bne.n	8015f6e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015f68:	f04f 33ff 	mov.w	r3, #4294967295
 8015f6c:	e000      	b.n	8015f70 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	372c      	adds	r7, #44	@ 0x2c
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f78:	0001ec30 	.word	0x0001ec30
 8015f7c:	c22e4507 	.word	0xc22e4507
 8015f80:	00015180 	.word	0x00015180

08015f84 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015f84:	b480      	push	{r7}
 8015f86:	b085      	sub	sp, #20
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	d13f      	bne.n	801601a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	b25a      	sxtb	r2, r3
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fac:	f003 030f 	and.w	r3, r3, #15
 8015fb0:	b25a      	sxtb	r2, r3
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	091b      	lsrs	r3, r3, #4
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	b25a      	sxtb	r2, r3
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	3302      	adds	r3, #2
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	889b      	ldrh	r3, [r3, #4]
 8015fd8:	b21a      	sxth	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	3303      	adds	r3, #3
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	021b      	lsls	r3, r3, #8
 8015fe2:	b21b      	sxth	r3, r3
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	b21b      	sxth	r3, r3
 8015fe8:	b29a      	uxth	r2, r3
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	791a      	ldrb	r2, [r3, #4]
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	091b      	lsrs	r3, r3, #4
 8015ffc:	b2db      	uxtb	r3, r3
 8015ffe:	f003 0307 	and.w	r3, r3, #7
 8016002:	b2da      	uxtb	r2, r3
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	f003 030f 	and.w	r3, r3, #15
 8016010:	b2da      	uxtb	r2, r3
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016016:	2305      	movs	r3, #5
 8016018:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801601a:	7bfb      	ldrb	r3, [r7, #15]
}
 801601c:	4618      	mov	r0, r3
 801601e:	3714      	adds	r7, #20
 8016020:	46bd      	mov	sp, r7
 8016022:	bc80      	pop	{r7}
 8016024:	4770      	bx	lr

08016026 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016026:	b5b0      	push	{r4, r5, r7, lr}
 8016028:	b088      	sub	sp, #32
 801602a:	af02      	add	r7, sp, #8
 801602c:	60f8      	str	r0, [r7, #12]
 801602e:	60b9      	str	r1, [r7, #8]
 8016030:	607a      	str	r2, [r7, #4]
 8016032:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	791b      	ldrb	r3, [r3, #4]
 8016038:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	799b      	ldrb	r3, [r3, #6]
 801603e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	79db      	ldrb	r3, [r3, #7]
 8016044:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	7a1b      	ldrb	r3, [r3, #8]
 801604a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	795b      	ldrb	r3, [r3, #5]
 8016050:	f083 0301 	eor.w	r3, r3, #1
 8016054:	b2db      	uxtb	r3, r3
 8016056:	2b00      	cmp	r3, #0
 8016058:	d008      	beq.n	801606c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	7adb      	ldrb	r3, [r3, #11]
 801605e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	7a5b      	ldrb	r3, [r3, #9]
 8016064:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	7a9b      	ldrb	r3, [r3, #10]
 801606a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801606c:	7dfb      	ldrb	r3, [r7, #23]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d04a      	beq.n	8016108 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016072:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016076:	2b0f      	cmp	r3, #15
 8016078:	d103      	bne.n	8016082 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	7a5b      	ldrb	r3, [r3, #9]
 801607e:	75bb      	strb	r3, [r7, #22]
 8016080:	e01d      	b.n	80160be <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	7b18      	ldrb	r0, [r3, #12]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	6919      	ldr	r1, [r3, #16]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016096:	68fa      	ldr	r2, [r7, #12]
 8016098:	6992      	ldr	r2, [r2, #24]
 801609a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801609e:	9201      	str	r2, [sp, #4]
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	462b      	mov	r3, r5
 80160a4:	4622      	mov	r2, r4
 80160a6:	f7ff fd3a 	bl	8015b1e <RegionCommonChanVerifyDr>
 80160aa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80160ac:	f083 0301 	eor.w	r3, r3, #1
 80160b0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d003      	beq.n	80160be <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80160b6:	7dfb      	ldrb	r3, [r7, #23]
 80160b8:	f023 0302 	bic.w	r3, r3, #2
 80160bc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80160be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80160c2:	2b0f      	cmp	r3, #15
 80160c4:	d103      	bne.n	80160ce <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	7a9b      	ldrb	r3, [r3, #10]
 80160ca:	757b      	strb	r3, [r7, #21]
 80160cc:	e01c      	b.n	8016108 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80160da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7ff fd8f 	bl	8015c02 <RegionCommonValueInRange>
 80160e4:	4603      	mov	r3, r0
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d10e      	bne.n	8016108 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80160f0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	da03      	bge.n	8016100 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	7f5b      	ldrb	r3, [r3, #29]
 80160fc:	757b      	strb	r3, [r7, #21]
 80160fe:	e003      	b.n	8016108 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	f023 0304 	bic.w	r3, r3, #4
 8016106:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016108:	7dfb      	ldrb	r3, [r7, #23]
 801610a:	2b07      	cmp	r3, #7
 801610c:	d105      	bne.n	801611a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801610e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d101      	bne.n	801611a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016116:	2301      	movs	r3, #1
 8016118:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	7dba      	ldrb	r2, [r7, #22]
 801611e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	7d7a      	ldrb	r2, [r7, #21]
 8016124:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016126:	7d3a      	ldrb	r2, [r7, #20]
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	701a      	strb	r2, [r3, #0]

    return status;
 801612c:	7dfb      	ldrb	r3, [r7, #23]
}
 801612e:	4618      	mov	r0, r3
 8016130:	3718      	adds	r7, #24
 8016132:	46bd      	mov	sp, r7
 8016134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016138 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	4603      	mov	r3, r0
 8016140:	6039      	str	r1, [r7, #0]
 8016142:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016144:	79fb      	ldrb	r3, [r7, #7]
 8016146:	4a06      	ldr	r2, [pc, #24]	@ (8016160 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016148:	fa02 f303 	lsl.w	r3, r2, r3
 801614c:	461a      	mov	r2, r3
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016154:	4618      	mov	r0, r3
 8016156:	370c      	adds	r7, #12
 8016158:	46bd      	mov	sp, r7
 801615a:	bc80      	pop	{r7}
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop
 8016160:	000f4240 	.word	0x000f4240

08016164 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016164:	b480      	push	{r7}
 8016166:	b083      	sub	sp, #12
 8016168:	af00      	add	r7, sp, #0
 801616a:	4603      	mov	r3, r0
 801616c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801616e:	79fb      	ldrb	r3, [r7, #7]
 8016170:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016174:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016178:	4618      	mov	r0, r3
 801617a:	370c      	adds	r7, #12
 801617c:	46bd      	mov	sp, r7
 801617e:	bc80      	pop	{r7}
 8016180:	4770      	bx	lr
	...

08016184 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	607a      	str	r2, [r7, #4]
 801618e:	603b      	str	r3, [r7, #0]
 8016190:	460b      	mov	r3, r1
 8016192:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016194:	7afa      	ldrb	r2, [r7, #11]
 8016196:	7afb      	ldrb	r3, [r7, #11]
 8016198:	3b04      	subs	r3, #4
 801619a:	4619      	mov	r1, r3
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	fb03 f101 	mul.w	r1, r3, r1
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80161a8:	fb00 f303 	mul.w	r3, r0, r3
 80161ac:	440b      	add	r3, r1
 80161ae:	005b      	lsls	r3, r3, #1
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d013      	beq.n	80161dc <RegionCommonComputeRxWindowParameters+0x58>
 80161b4:	7afb      	ldrb	r3, [r7, #11]
 80161b6:	3b04      	subs	r3, #4
 80161b8:	4619      	mov	r1, r3
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	fb03 f101 	mul.w	r1, r3, r1
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80161c6:	fb00 f303 	mul.w	r3, r0, r3
 80161ca:	440b      	add	r3, r1
 80161cc:	0059      	lsls	r1, r3, #1
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	440b      	add	r3, r1
 80161d2:	1e59      	subs	r1, r3, #1
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80161da:	e00f      	b.n	80161fc <RegionCommonComputeRxWindowParameters+0x78>
 80161dc:	7afb      	ldrb	r3, [r7, #11]
 80161de:	3b04      	subs	r3, #4
 80161e0:	4619      	mov	r1, r3
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	fb03 f101 	mul.w	r1, r3, r1
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80161ee:	fb00 f303 	mul.w	r3, r0, r3
 80161f2:	440b      	add	r3, r1
 80161f4:	0059      	lsls	r1, r3, #1
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80161fc:	429a      	cmp	r2, r3
 80161fe:	bf38      	it	cc
 8016200:	461a      	movcc	r2, r3
 8016202:	69bb      	ldr	r3, [r7, #24]
 8016204:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	009b      	lsls	r3, r3, #2
 801620a:	4619      	mov	r1, r3
 801620c:	69bb      	ldr	r3, [r7, #24]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	68fa      	ldr	r2, [r7, #12]
 8016212:	fb02 f303 	mul.w	r3, r2, r3
 8016216:	2b00      	cmp	r3, #0
 8016218:	d007      	beq.n	801622a <RegionCommonComputeRxWindowParameters+0xa6>
 801621a:	69bb      	ldr	r3, [r7, #24]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	68fa      	ldr	r2, [r7, #12]
 8016220:	fb02 f303 	mul.w	r3, r2, r3
 8016224:	3301      	adds	r3, #1
 8016226:	085b      	lsrs	r3, r3, #1
 8016228:	e005      	b.n	8016236 <RegionCommonComputeRxWindowParameters+0xb2>
 801622a:	69bb      	ldr	r3, [r7, #24]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	68fa      	ldr	r2, [r7, #12]
 8016230:	fb02 f303 	mul.w	r3, r2, r3
 8016234:	085b      	lsrs	r3, r3, #1
 8016236:	1acb      	subs	r3, r1, r3
 8016238:	683a      	ldr	r2, [r7, #0]
 801623a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801623e:	fb01 f202 	mul.w	r2, r1, r2
 8016242:	1a9b      	subs	r3, r3, r2
 8016244:	2b00      	cmp	r3, #0
 8016246:	dd27      	ble.n	8016298 <RegionCommonComputeRxWindowParameters+0x114>
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4619      	mov	r1, r3
 801624e:	69bb      	ldr	r3, [r7, #24]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	68fa      	ldr	r2, [r7, #12]
 8016254:	fb02 f303 	mul.w	r3, r2, r3
 8016258:	2b00      	cmp	r3, #0
 801625a:	d007      	beq.n	801626c <RegionCommonComputeRxWindowParameters+0xe8>
 801625c:	69bb      	ldr	r3, [r7, #24]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	68fa      	ldr	r2, [r7, #12]
 8016262:	fb02 f303 	mul.w	r3, r2, r3
 8016266:	3301      	adds	r3, #1
 8016268:	085b      	lsrs	r3, r3, #1
 801626a:	e005      	b.n	8016278 <RegionCommonComputeRxWindowParameters+0xf4>
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	68fa      	ldr	r2, [r7, #12]
 8016272:	fb02 f303 	mul.w	r3, r2, r3
 8016276:	085b      	lsrs	r3, r3, #1
 8016278:	1acb      	subs	r3, r1, r3
 801627a:	683a      	ldr	r2, [r7, #0]
 801627c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016280:	fb01 f202 	mul.w	r2, r1, r2
 8016284:	1a9b      	subs	r3, r3, r2
 8016286:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801628a:	4a19      	ldr	r2, [pc, #100]	@ (80162f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801628c:	fb82 1203 	smull	r1, r2, r2, r3
 8016290:	1192      	asrs	r2, r2, #6
 8016292:	17db      	asrs	r3, r3, #31
 8016294:	1ad3      	subs	r3, r2, r3
 8016296:	e024      	b.n	80162e2 <RegionCommonComputeRxWindowParameters+0x15e>
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	4619      	mov	r1, r3
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	fb02 f303 	mul.w	r3, r2, r3
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d007      	beq.n	80162bc <RegionCommonComputeRxWindowParameters+0x138>
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	68fa      	ldr	r2, [r7, #12]
 80162b2:	fb02 f303 	mul.w	r3, r2, r3
 80162b6:	3301      	adds	r3, #1
 80162b8:	085b      	lsrs	r3, r3, #1
 80162ba:	e005      	b.n	80162c8 <RegionCommonComputeRxWindowParameters+0x144>
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	fb02 f303 	mul.w	r3, r2, r3
 80162c6:	085b      	lsrs	r3, r3, #1
 80162c8:	1acb      	subs	r3, r1, r3
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80162d0:	fb01 f202 	mul.w	r2, r1, r2
 80162d4:	1a9b      	subs	r3, r3, r2
 80162d6:	4a06      	ldr	r2, [pc, #24]	@ (80162f0 <RegionCommonComputeRxWindowParameters+0x16c>)
 80162d8:	fb82 1203 	smull	r1, r2, r2, r3
 80162dc:	1192      	asrs	r2, r2, #6
 80162de:	17db      	asrs	r3, r3, #31
 80162e0:	1ad3      	subs	r3, r2, r3
 80162e2:	69fa      	ldr	r2, [r7, #28]
 80162e4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80162e6:	bf00      	nop
 80162e8:	3714      	adds	r7, #20
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bc80      	pop	{r7}
 80162ee:	4770      	bx	lr
 80162f0:	10624dd3 	.word	0x10624dd3

080162f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	4603      	mov	r3, r0
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
 8016300:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016302:	2300      	movs	r3, #0
 8016304:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801630a:	005b      	lsls	r3, r3, #1
 801630c:	4618      	mov	r0, r3
 801630e:	f7ea fb11 	bl	8000934 <__aeabi_ui2f>
 8016312:	4603      	mov	r3, r0
 8016314:	4619      	mov	r1, r3
 8016316:	68b8      	ldr	r0, [r7, #8]
 8016318:	f7ea fa5a 	bl	80007d0 <__aeabi_fsub>
 801631c:	4603      	mov	r3, r0
 801631e:	6879      	ldr	r1, [r7, #4]
 8016320:	4618      	mov	r0, r3
 8016322:	f7ea fa55 	bl	80007d0 <__aeabi_fsub>
 8016326:	4603      	mov	r3, r0
 8016328:	4618      	mov	r0, r3
 801632a:	f7ea f945 	bl	80005b8 <__aeabi_f2d>
 801632e:	4602      	mov	r2, r0
 8016330:	460b      	mov	r3, r1
 8016332:	4610      	mov	r0, r2
 8016334:	4619      	mov	r1, r3
 8016336:	f005 f823 	bl	801b380 <floor>
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	4610      	mov	r0, r2
 8016340:	4619      	mov	r1, r3
 8016342:	f7ea fa19 	bl	8000778 <__aeabi_d2iz>
 8016346:	4603      	mov	r3, r0
 8016348:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801634a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801634e:	4618      	mov	r0, r3
 8016350:	3718      	adds	r7, #24
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016356:	b590      	push	{r4, r7, lr}
 8016358:	b087      	sub	sp, #28
 801635a:	af00      	add	r7, sp, #0
 801635c:	60f8      	str	r0, [r7, #12]
 801635e:	60b9      	str	r1, [r7, #8]
 8016360:	607a      	str	r2, [r7, #4]
 8016362:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016364:	2300      	movs	r3, #0
 8016366:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016368:	2300      	movs	r3, #0
 801636a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801636c:	2300      	movs	r3, #0
 801636e:	757b      	strb	r3, [r7, #21]
 8016370:	2300      	movs	r3, #0
 8016372:	753b      	strb	r3, [r7, #20]
 8016374:	e09c      	b.n	80164b0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016376:	2300      	movs	r3, #0
 8016378:	74fb      	strb	r3, [r7, #19]
 801637a:	e08f      	b.n	801649c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	685a      	ldr	r2, [r3, #4]
 8016380:	7d3b      	ldrb	r3, [r7, #20]
 8016382:	005b      	lsls	r3, r3, #1
 8016384:	4413      	add	r3, r2
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	461a      	mov	r2, r3
 801638a:	7cfb      	ldrb	r3, [r7, #19]
 801638c:	fa42 f303 	asr.w	r3, r2, r3
 8016390:	f003 0301 	and.w	r3, r3, #1
 8016394:	2b00      	cmp	r3, #0
 8016396:	d07e      	beq.n	8016496 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	689a      	ldr	r2, [r3, #8]
 801639c:	7d79      	ldrb	r1, [r7, #21]
 801639e:	7cfb      	ldrb	r3, [r7, #19]
 80163a0:	440b      	add	r3, r1
 80163a2:	4619      	mov	r1, r3
 80163a4:	460b      	mov	r3, r1
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	440b      	add	r3, r1
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	4413      	add	r3, r2
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d06b      	beq.n	801648c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	f083 0301 	eor.w	r3, r3, #1
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d011      	beq.n	80163e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d00d      	beq.n	80163e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	695a      	ldr	r2, [r3, #20]
 80163ce:	7d3b      	ldrb	r3, [r7, #20]
 80163d0:	005b      	lsls	r3, r3, #1
 80163d2:	4413      	add	r3, r2
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	461a      	mov	r2, r3
 80163d8:	7cfb      	ldrb	r3, [r7, #19]
 80163da:	fa42 f303 	asr.w	r3, r2, r3
 80163de:	f003 0301 	and.w	r3, r3, #1
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d054      	beq.n	8016490 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	785b      	ldrb	r3, [r3, #1]
 80163ea:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	689a      	ldr	r2, [r3, #8]
 80163f0:	7d79      	ldrb	r1, [r7, #21]
 80163f2:	7cfb      	ldrb	r3, [r7, #19]
 80163f4:	440b      	add	r3, r1
 80163f6:	4619      	mov	r1, r3
 80163f8:	460b      	mov	r3, r1
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	440b      	add	r3, r1
 80163fe:	009b      	lsls	r3, r3, #2
 8016400:	4413      	add	r3, r2
 8016402:	7a1b      	ldrb	r3, [r3, #8]
 8016404:	f343 0303 	sbfx	r3, r3, #0, #4
 8016408:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801640a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	689a      	ldr	r2, [r3, #8]
 8016410:	7d79      	ldrb	r1, [r7, #21]
 8016412:	7cfb      	ldrb	r3, [r7, #19]
 8016414:	440b      	add	r3, r1
 8016416:	4619      	mov	r1, r3
 8016418:	460b      	mov	r3, r1
 801641a:	005b      	lsls	r3, r3, #1
 801641c:	440b      	add	r3, r1
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	7a1b      	ldrb	r3, [r3, #8]
 8016424:	f343 1303 	sbfx	r3, r3, #4, #4
 8016428:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801642a:	461a      	mov	r2, r3
 801642c:	4621      	mov	r1, r4
 801642e:	f7ff fbe8 	bl	8015c02 <RegionCommonValueInRange>
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	d02d      	beq.n	8016494 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	68da      	ldr	r2, [r3, #12]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	6899      	ldr	r1, [r3, #8]
 8016440:	7d78      	ldrb	r0, [r7, #21]
 8016442:	7cfb      	ldrb	r3, [r7, #19]
 8016444:	4403      	add	r3, r0
 8016446:	4618      	mov	r0, r3
 8016448:	4603      	mov	r3, r0
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	4403      	add	r3, r0
 801644e:	009b      	lsls	r3, r3, #2
 8016450:	440b      	add	r3, r1
 8016452:	7a5b      	ldrb	r3, [r3, #9]
 8016454:	4619      	mov	r1, r3
 8016456:	460b      	mov	r3, r1
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	440b      	add	r3, r1
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	4413      	add	r3, r2
 8016460:	7d1b      	ldrb	r3, [r3, #20]
 8016462:	f083 0301 	eor.w	r3, r3, #1
 8016466:	b2db      	uxtb	r3, r3
 8016468:	2b00      	cmp	r3, #0
 801646a:	d003      	beq.n	8016474 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801646c:	7dbb      	ldrb	r3, [r7, #22]
 801646e:	3301      	adds	r3, #1
 8016470:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016472:	e010      	b.n	8016496 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016474:	7dfb      	ldrb	r3, [r7, #23]
 8016476:	1c5a      	adds	r2, r3, #1
 8016478:	75fa      	strb	r2, [r7, #23]
 801647a:	461a      	mov	r2, r3
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	4413      	add	r3, r2
 8016480:	7d79      	ldrb	r1, [r7, #21]
 8016482:	7cfa      	ldrb	r2, [r7, #19]
 8016484:	440a      	add	r2, r1
 8016486:	b2d2      	uxtb	r2, r2
 8016488:	701a      	strb	r2, [r3, #0]
 801648a:	e004      	b.n	8016496 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801648c:	bf00      	nop
 801648e:	e002      	b.n	8016496 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016490:	bf00      	nop
 8016492:	e000      	b.n	8016496 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016494:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016496:	7cfb      	ldrb	r3, [r7, #19]
 8016498:	3301      	adds	r3, #1
 801649a:	74fb      	strb	r3, [r7, #19]
 801649c:	7cfb      	ldrb	r3, [r7, #19]
 801649e:	2b0f      	cmp	r3, #15
 80164a0:	f67f af6c 	bls.w	801637c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80164a4:	7d7b      	ldrb	r3, [r7, #21]
 80164a6:	3310      	adds	r3, #16
 80164a8:	757b      	strb	r3, [r7, #21]
 80164aa:	7d3b      	ldrb	r3, [r7, #20]
 80164ac:	3301      	adds	r3, #1
 80164ae:	753b      	strb	r3, [r7, #20]
 80164b0:	7d7b      	ldrb	r3, [r7, #21]
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	8a1b      	ldrh	r3, [r3, #16]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	f4ff af5c 	bcc.w	8016376 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	7dfa      	ldrb	r2, [r7, #23]
 80164c2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	7dba      	ldrb	r2, [r7, #22]
 80164c8:	701a      	strb	r2, [r3, #0]
}
 80164ca:	bf00      	nop
 80164cc:	371c      	adds	r7, #28
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd90      	pop	{r4, r7, pc}

080164d2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80164d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164d4:	b08b      	sub	sp, #44	@ 0x2c
 80164d6:	af04      	add	r7, sp, #16
 80164d8:	60f8      	str	r0, [r7, #12]
 80164da:	60b9      	str	r1, [r7, #8]
 80164dc:	607a      	str	r2, [r7, #4]
 80164de:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	4618      	mov	r0, r3
 80164e6:	f004 fbc9 	bl	801ac7c <UTIL_TIMER_GetElapsedTime>
 80164ea:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	681a      	ldr	r2, [r3, #0]
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	1ad2      	subs	r2, r2, r3
 80164f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164f6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80164f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164fa:	2201      	movs	r2, #1
 80164fc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	2200      	movs	r2, #0
 8016502:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d004      	beq.n	8016516 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016510:	697a      	ldr	r2, [r7, #20]
 8016512:	429a      	cmp	r2, r3
 8016514:	d32b      	bcc.n	801656e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	2200      	movs	r2, #0
 801651a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	69db      	ldr	r3, [r3, #28]
 8016520:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016526:	68dd      	ldr	r5, [r3, #12]
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	7a5e      	ldrb	r6, [r3, #9]
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	7d1b      	ldrb	r3, [r3, #20]
 8016536:	68fa      	ldr	r2, [r7, #12]
 8016538:	6992      	ldr	r2, [r2, #24]
 801653a:	9203      	str	r2, [sp, #12]
 801653c:	68fa      	ldr	r2, [r7, #12]
 801653e:	f10d 0e04 	add.w	lr, sp, #4
 8016542:	320c      	adds	r2, #12
 8016544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016548:	e88e 0003 	stmia.w	lr, {r0, r1}
 801654c:	9300      	str	r3, [sp, #0]
 801654e:	4663      	mov	r3, ip
 8016550:	4632      	mov	r2, r6
 8016552:	4629      	mov	r1, r5
 8016554:	4620      	mov	r0, r4
 8016556:	f7ff fc25 	bl	8015da4 <RegionCommonUpdateBandTimeOff>
 801655a:	4602      	mov	r2, r0
 801655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801655e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	69d8      	ldr	r0, [r3, #28]
 8016564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016566:	683a      	ldr	r2, [r7, #0]
 8016568:	6879      	ldr	r1, [r7, #4]
 801656a:	f7ff fef4 	bl	8016356 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d004      	beq.n	8016580 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016578:	2200      	movs	r2, #0
 801657a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801657c:	2300      	movs	r3, #0
 801657e:	e006      	b.n	801658e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d001      	beq.n	801658c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016588:	230b      	movs	r3, #11
 801658a:	e000      	b.n	801658e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801658c:	230c      	movs	r3, #12
    }
}
 801658e:	4618      	mov	r0, r3
 8016590:	371c      	adds	r7, #28
 8016592:	46bd      	mov	sp, r7
 8016594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016596 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016596:	b5b0      	push	{r4, r5, r7, lr}
 8016598:	b086      	sub	sp, #24
 801659a:	af02      	add	r7, sp, #8
 801659c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f993 2000 	ldrsb.w	r2, [r3]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d103      	bne.n	80165bc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80165ba:	e026      	b.n	801660a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80165bc:	7bfb      	ldrb	r3, [r7, #15]
 80165be:	3b01      	subs	r3, #1
 80165c0:	b2db      	uxtb	r3, r3
 80165c2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80165ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80165ce:	429a      	cmp	r2, r3
 80165d0:	d019      	beq.n	8016606 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	78d8      	ldrb	r0, [r3, #3]
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6859      	ldr	r1, [r3, #4]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	6892      	ldr	r2, [r2, #8]
 80165ea:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80165ee:	9201      	str	r2, [sp, #4]
 80165f0:	9300      	str	r3, [sp, #0]
 80165f2:	462b      	mov	r3, r5
 80165f4:	4622      	mov	r2, r4
 80165f6:	f7ff fa92 	bl	8015b1e <RegionCommonChanVerifyDr>
 80165fa:	4603      	mov	r3, r0
 80165fc:	f083 0301 	eor.w	r3, r3, #1
 8016600:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016602:	2b00      	cmp	r3, #0
 8016604:	d1da      	bne.n	80165bc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016606:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801660a:	4618      	mov	r0, r3
 801660c:	3710      	adds	r7, #16
 801660e:	46bd      	mov	sp, r7
 8016610:	bdb0      	pop	{r4, r5, r7, pc}

08016612 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016612:	b480      	push	{r7}
 8016614:	b083      	sub	sp, #12
 8016616:	af00      	add	r7, sp, #0
 8016618:	4603      	mov	r3, r0
 801661a:	460a      	mov	r2, r1
 801661c:	71fb      	strb	r3, [r7, #7]
 801661e:	4613      	mov	r3, r2
 8016620:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016622:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801662a:	4293      	cmp	r3, r2
 801662c:	bfb8      	it	lt
 801662e:	4613      	movlt	r3, r2
 8016630:	b25b      	sxtb	r3, r3
}
 8016632:	4618      	mov	r0, r3
 8016634:	370c      	adds	r7, #12
 8016636:	46bd      	mov	sp, r7
 8016638:	bc80      	pop	{r7}
 801663a:	4770      	bx	lr

0801663c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801663c:	b480      	push	{r7}
 801663e:	b083      	sub	sp, #12
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	683a      	ldr	r2, [r7, #0]
 801664c:	4413      	add	r3, r2
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	4a07      	ldr	r2, [pc, #28]	@ (8016670 <RegionCommonGetBandwidth+0x34>)
 8016652:	4293      	cmp	r3, r2
 8016654:	d004      	beq.n	8016660 <RegionCommonGetBandwidth+0x24>
 8016656:	4a07      	ldr	r2, [pc, #28]	@ (8016674 <RegionCommonGetBandwidth+0x38>)
 8016658:	4293      	cmp	r3, r2
 801665a:	d003      	beq.n	8016664 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801665c:	2300      	movs	r3, #0
 801665e:	e002      	b.n	8016666 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016660:	2301      	movs	r3, #1
 8016662:	e000      	b.n	8016666 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016664:	2302      	movs	r3, #2
    }
}
 8016666:	4618      	mov	r0, r3
 8016668:	370c      	adds	r7, #12
 801666a:	46bd      	mov	sp, r7
 801666c:	bc80      	pop	{r7}
 801666e:	4770      	bx	lr
 8016670:	0003d090 	.word	0x0003d090
 8016674:	0007a120 	.word	0x0007a120

08016678 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b086      	sub	sp, #24
 801667c:	af04      	add	r7, sp, #16
 801667e:	4603      	mov	r3, r0
 8016680:	6039      	str	r1, [r7, #0]
 8016682:	71fb      	strb	r3, [r7, #7]
 8016684:	4613      	mov	r3, r2
 8016686:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016688:	79fb      	ldrb	r3, [r7, #7]
 801668a:	2b05      	cmp	r3, #5
 801668c:	d810      	bhi.n	80166b0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801668e:	79fb      	ldrb	r3, [r7, #7]
 8016690:	4a0f      	ldr	r2, [pc, #60]	@ (80166d0 <RegionCommonRxConfigPrint+0x58>)
 8016692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016696:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801669a:	9202      	str	r2, [sp, #8]
 801669c:	683a      	ldr	r2, [r7, #0]
 801669e:	9201      	str	r2, [sp, #4]
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	4b0c      	ldr	r3, [pc, #48]	@ (80166d4 <RegionCommonRxConfigPrint+0x5c>)
 80166a4:	2201      	movs	r2, #1
 80166a6:	2100      	movs	r1, #0
 80166a8:	2002      	movs	r0, #2
 80166aa:	f004 fbc5 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80166ae:	e00a      	b.n	80166c6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80166b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80166b4:	9301      	str	r3, [sp, #4]
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	4b07      	ldr	r3, [pc, #28]	@ (80166d8 <RegionCommonRxConfigPrint+0x60>)
 80166bc:	2201      	movs	r2, #1
 80166be:	2100      	movs	r1, #0
 80166c0:	2002      	movs	r0, #2
 80166c2:	f004 fbb9 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 80166c6:	bf00      	nop
 80166c8:	3708      	adds	r7, #8
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	20000128 	.word	0x20000128
 80166d4:	0801bc58 	.word	0x0801bc58
 80166d8:	0801bc78 	.word	0x0801bc78

080166dc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af02      	add	r7, sp, #8
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	460b      	mov	r3, r1
 80166e6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80166e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80166ec:	9301      	str	r3, [sp, #4]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	9300      	str	r3, [sp, #0]
 80166f2:	4b05      	ldr	r3, [pc, #20]	@ (8016708 <RegionCommonTxConfigPrint+0x2c>)
 80166f4:	2201      	movs	r2, #1
 80166f6:	2100      	movs	r1, #0
 80166f8:	2002      	movs	r0, #2
 80166fa:	f004 fb9d 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
}
 80166fe:	bf00      	nop
 8016700:	3708      	adds	r7, #8
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	0801bc94 	.word	0x0801bc94

0801670c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801670c:	b480      	push	{r7}
 801670e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016710:	4b0d      	ldr	r3, [pc, #52]	@ (8016748 <rand1+0x3c>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	4a0d      	ldr	r2, [pc, #52]	@ (801674c <rand1+0x40>)
 8016716:	fb02 f303 	mul.w	r3, r2, r3
 801671a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801671e:	3339      	adds	r3, #57	@ 0x39
 8016720:	4a09      	ldr	r2, [pc, #36]	@ (8016748 <rand1+0x3c>)
 8016722:	6013      	str	r3, [r2, #0]
 8016724:	4b08      	ldr	r3, [pc, #32]	@ (8016748 <rand1+0x3c>)
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	2303      	movs	r3, #3
 801672a:	fba3 1302 	umull	r1, r3, r3, r2
 801672e:	1ad1      	subs	r1, r2, r3
 8016730:	0849      	lsrs	r1, r1, #1
 8016732:	440b      	add	r3, r1
 8016734:	0f99      	lsrs	r1, r3, #30
 8016736:	460b      	mov	r3, r1
 8016738:	07db      	lsls	r3, r3, #31
 801673a:	1a5b      	subs	r3, r3, r1
 801673c:	1ad1      	subs	r1, r2, r3
 801673e:	460b      	mov	r3, r1
}
 8016740:	4618      	mov	r0, r3
 8016742:	46bd      	mov	sp, r7
 8016744:	bc80      	pop	{r7}
 8016746:	4770      	bx	lr
 8016748:	20000140 	.word	0x20000140
 801674c:	41c64e6d 	.word	0x41c64e6d

08016750 <srand1>:

void srand1( uint32_t seed )
{
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
    next = seed;
 8016758:	4a03      	ldr	r2, [pc, #12]	@ (8016768 <srand1+0x18>)
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6013      	str	r3, [r2, #0]
}
 801675e:	bf00      	nop
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	bc80      	pop	{r7}
 8016766:	4770      	bx	lr
 8016768:	20000140 	.word	0x20000140

0801676c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
 8016774:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016776:	f7ff ffc9 	bl	801670c <rand1>
 801677a:	4602      	mov	r2, r0
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	1acb      	subs	r3, r1, r3
 8016782:	3301      	adds	r3, #1
 8016784:	fb92 f1f3 	sdiv	r1, r2, r3
 8016788:	fb01 f303 	mul.w	r3, r1, r3
 801678c:	1ad2      	subs	r2, r2, r3
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	4413      	add	r3, r2
}
 8016792:	4618      	mov	r0, r3
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}

0801679a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801679a:	b480      	push	{r7}
 801679c:	b085      	sub	sp, #20
 801679e:	af00      	add	r7, sp, #0
 80167a0:	60f8      	str	r0, [r7, #12]
 80167a2:	60b9      	str	r1, [r7, #8]
 80167a4:	4613      	mov	r3, r2
 80167a6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80167a8:	e007      	b.n	80167ba <memcpy1+0x20>
    {
        *dst++ = *src++;
 80167aa:	68ba      	ldr	r2, [r7, #8]
 80167ac:	1c53      	adds	r3, r2, #1
 80167ae:	60bb      	str	r3, [r7, #8]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	1c59      	adds	r1, r3, #1
 80167b4:	60f9      	str	r1, [r7, #12]
 80167b6:	7812      	ldrb	r2, [r2, #0]
 80167b8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80167ba:	88fb      	ldrh	r3, [r7, #6]
 80167bc:	1e5a      	subs	r2, r3, #1
 80167be:	80fa      	strh	r2, [r7, #6]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d1f2      	bne.n	80167aa <memcpy1+0x10>
    }
}
 80167c4:	bf00      	nop
 80167c6:	bf00      	nop
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bc80      	pop	{r7}
 80167ce:	4770      	bx	lr

080167d0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	4613      	mov	r3, r2
 80167dc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80167de:	88fb      	ldrh	r3, [r7, #6]
 80167e0:	3b01      	subs	r3, #1
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	4413      	add	r3, r2
 80167e6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80167e8:	e007      	b.n	80167fa <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	1c53      	adds	r3, r2, #1
 80167ee:	60bb      	str	r3, [r7, #8]
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	1e59      	subs	r1, r3, #1
 80167f4:	60f9      	str	r1, [r7, #12]
 80167f6:	7812      	ldrb	r2, [r2, #0]
 80167f8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80167fa:	88fb      	ldrh	r3, [r7, #6]
 80167fc:	1e5a      	subs	r2, r3, #1
 80167fe:	80fa      	strh	r2, [r7, #6]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1f2      	bne.n	80167ea <memcpyr+0x1a>
    }
}
 8016804:	bf00      	nop
 8016806:	bf00      	nop
 8016808:	3714      	adds	r7, #20
 801680a:	46bd      	mov	sp, r7
 801680c:	bc80      	pop	{r7}
 801680e:	4770      	bx	lr

08016810 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016810:	b480      	push	{r7}
 8016812:	b083      	sub	sp, #12
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	460b      	mov	r3, r1
 801681a:	70fb      	strb	r3, [r7, #3]
 801681c:	4613      	mov	r3, r2
 801681e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016820:	e004      	b.n	801682c <memset1+0x1c>
    {
        *dst++ = value;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	1c5a      	adds	r2, r3, #1
 8016826:	607a      	str	r2, [r7, #4]
 8016828:	78fa      	ldrb	r2, [r7, #3]
 801682a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801682c:	883b      	ldrh	r3, [r7, #0]
 801682e:	1e5a      	subs	r2, r3, #1
 8016830:	803a      	strh	r2, [r7, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1f5      	bne.n	8016822 <memset1+0x12>
    }
}
 8016836:	bf00      	nop
 8016838:	bf00      	nop
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	bc80      	pop	{r7}
 8016840:	4770      	bx	lr
	...

08016844 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	460b      	mov	r3, r1
 801684e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016850:	f04f 33ff 	mov.w	r3, #4294967295
 8016854:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d101      	bne.n	8016860 <Crc32+0x1c>
    {
        return 0;
 801685c:	2300      	movs	r3, #0
 801685e:	e026      	b.n	80168ae <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016860:	2300      	movs	r3, #0
 8016862:	817b      	strh	r3, [r7, #10]
 8016864:	e01d      	b.n	80168a2 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016866:	897b      	ldrh	r3, [r7, #10]
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4413      	add	r3, r2
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	461a      	mov	r2, r3
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	4053      	eors	r3, r2
 8016874:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016876:	2300      	movs	r3, #0
 8016878:	813b      	strh	r3, [r7, #8]
 801687a:	e00c      	b.n	8016896 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	085a      	lsrs	r2, r3, #1
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	f003 0301 	and.w	r3, r3, #1
 8016886:	425b      	negs	r3, r3
 8016888:	490b      	ldr	r1, [pc, #44]	@ (80168b8 <Crc32+0x74>)
 801688a:	400b      	ands	r3, r1
 801688c:	4053      	eors	r3, r2
 801688e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016890:	893b      	ldrh	r3, [r7, #8]
 8016892:	3301      	adds	r3, #1
 8016894:	813b      	strh	r3, [r7, #8]
 8016896:	893b      	ldrh	r3, [r7, #8]
 8016898:	2b07      	cmp	r3, #7
 801689a:	d9ef      	bls.n	801687c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801689c:	897b      	ldrh	r3, [r7, #10]
 801689e:	3301      	adds	r3, #1
 80168a0:	817b      	strh	r3, [r7, #10]
 80168a2:	897a      	ldrh	r2, [r7, #10]
 80168a4:	887b      	ldrh	r3, [r7, #2]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d3dd      	bcc.n	8016866 <Crc32+0x22>
        }
    }

    return ~crc;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	43db      	mvns	r3, r3
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3714      	adds	r7, #20
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bc80      	pop	{r7}
 80168b6:	4770      	bx	lr
 80168b8:	edb88320 	.word	0xedb88320

080168bc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b084      	sub	sp, #16
 80168c0:	af02      	add	r7, sp, #8
 80168c2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80168c4:	4a24      	ldr	r2, [pc, #144]	@ (8016958 <RadioInit+0x9c>)
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80168ca:	4b24      	ldr	r3, [pc, #144]	@ (801695c <RadioInit+0xa0>)
 80168cc:	2200      	movs	r2, #0
 80168ce:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80168d0:	4b22      	ldr	r3, [pc, #136]	@ (801695c <RadioInit+0xa0>)
 80168d2:	2200      	movs	r2, #0
 80168d4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80168d6:	4b21      	ldr	r3, [pc, #132]	@ (801695c <RadioInit+0xa0>)
 80168d8:	2200      	movs	r2, #0
 80168da:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80168dc:	4b1f      	ldr	r3, [pc, #124]	@ (801695c <RadioInit+0xa0>)
 80168de:	2200      	movs	r2, #0
 80168e0:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80168e2:	481f      	ldr	r0, [pc, #124]	@ (8016960 <RadioInit+0xa4>)
 80168e4:	f001 ff88 	bl	80187f8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80168e8:	4b1c      	ldr	r3, [pc, #112]	@ (801695c <RadioInit+0xa0>)
 80168ea:	2200      	movs	r2, #0
 80168ec:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80168ee:	4b1b      	ldr	r3, [pc, #108]	@ (801695c <RadioInit+0xa0>)
 80168f0:	2200      	movs	r2, #0
 80168f2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80168f4:	f002 fa16 	bl	8018d24 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80168f8:	2100      	movs	r1, #0
 80168fa:	2000      	movs	r0, #0
 80168fc:	f002 fdde 	bl	80194bc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016900:	2204      	movs	r2, #4
 8016902:	2100      	movs	r1, #0
 8016904:	2001      	movs	r0, #1
 8016906:	f002 fb9b 	bl	8019040 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801690a:	2300      	movs	r3, #0
 801690c:	2200      	movs	r2, #0
 801690e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016912:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016916:	f002 facb 	bl	8018eb0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801691a:	f000 fe83 	bl	8017624 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801691e:	2300      	movs	r3, #0
 8016920:	9300      	str	r3, [sp, #0]
 8016922:	4b10      	ldr	r3, [pc, #64]	@ (8016964 <RadioInit+0xa8>)
 8016924:	2200      	movs	r2, #0
 8016926:	f04f 31ff 	mov.w	r1, #4294967295
 801692a:	480f      	ldr	r0, [pc, #60]	@ (8016968 <RadioInit+0xac>)
 801692c:	f003 ffd6 	bl	801a8dc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016930:	2300      	movs	r3, #0
 8016932:	9300      	str	r3, [sp, #0]
 8016934:	4b0d      	ldr	r3, [pc, #52]	@ (801696c <RadioInit+0xb0>)
 8016936:	2200      	movs	r2, #0
 8016938:	f04f 31ff 	mov.w	r1, #4294967295
 801693c:	480c      	ldr	r0, [pc, #48]	@ (8016970 <RadioInit+0xb4>)
 801693e:	f003 ffcd 	bl	801a8dc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016942:	4809      	ldr	r0, [pc, #36]	@ (8016968 <RadioInit+0xac>)
 8016944:	f004 f86e 	bl	801aa24 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016948:	4809      	ldr	r0, [pc, #36]	@ (8016970 <RadioInit+0xb4>)
 801694a:	f004 f86b 	bl	801aa24 <UTIL_TIMER_Stop>
}
 801694e:	bf00      	nop
 8016950:	3708      	adds	r7, #8
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	20001a6c 	.word	0x20001a6c
 801695c:	20001a70 	.word	0x20001a70
 8016960:	08017a0d 	.word	0x08017a0d
 8016964:	08017995 	.word	0x08017995
 8016968:	20001acc 	.word	0x20001acc
 801696c:	080179a9 	.word	0x080179a9
 8016970:	20001ae4 	.word	0x20001ae4

08016974 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016974:	b580      	push	{r7, lr}
 8016976:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016978:	f001 ff80 	bl	801887c <SUBGRF_GetOperatingMode>
 801697c:	4603      	mov	r3, r0
 801697e:	2b07      	cmp	r3, #7
 8016980:	d00a      	beq.n	8016998 <RadioGetStatus+0x24>
 8016982:	2b07      	cmp	r3, #7
 8016984:	dc0a      	bgt.n	801699c <RadioGetStatus+0x28>
 8016986:	2b04      	cmp	r3, #4
 8016988:	d002      	beq.n	8016990 <RadioGetStatus+0x1c>
 801698a:	2b05      	cmp	r3, #5
 801698c:	d002      	beq.n	8016994 <RadioGetStatus+0x20>
 801698e:	e005      	b.n	801699c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016990:	2302      	movs	r3, #2
 8016992:	e004      	b.n	801699e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016994:	2301      	movs	r3, #1
 8016996:	e002      	b.n	801699e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016998:	2303      	movs	r3, #3
 801699a:	e000      	b.n	801699e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801699c:	2300      	movs	r3, #0
    }
}
 801699e:	4618      	mov	r0, r3
 80169a0:	bd80      	pop	{r7, pc}
	...

080169a4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	4603      	mov	r3, r0
 80169ac:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80169ae:	4a2a      	ldr	r2, [pc, #168]	@ (8016a58 <RadioSetModem+0xb4>)
 80169b0:	79fb      	ldrb	r3, [r7, #7]
 80169b2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80169b4:	79fb      	ldrb	r3, [r7, #7]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f003 f943 	bl	8019c42 <RFW_SetRadioModem>
    switch( modem )
 80169bc:	79fb      	ldrb	r3, [r7, #7]
 80169be:	2b05      	cmp	r3, #5
 80169c0:	d80e      	bhi.n	80169e0 <RadioSetModem+0x3c>
 80169c2:	a201      	add	r2, pc, #4	@ (adr r2, 80169c8 <RadioSetModem+0x24>)
 80169c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169c8:	080169ef 	.word	0x080169ef
 80169cc:	080169fd 	.word	0x080169fd
 80169d0:	080169e1 	.word	0x080169e1
 80169d4:	08016a23 	.word	0x08016a23
 80169d8:	08016a31 	.word	0x08016a31
 80169dc:	08016a3f 	.word	0x08016a3f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80169e0:	2003      	movs	r0, #3
 80169e2:	f002 fb07 	bl	8018ff4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80169e6:	4b1c      	ldr	r3, [pc, #112]	@ (8016a58 <RadioSetModem+0xb4>)
 80169e8:	2200      	movs	r2, #0
 80169ea:	735a      	strb	r2, [r3, #13]
        break;
 80169ec:	e02f      	b.n	8016a4e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80169ee:	2000      	movs	r0, #0
 80169f0:	f002 fb00 	bl	8018ff4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80169f4:	4b18      	ldr	r3, [pc, #96]	@ (8016a58 <RadioSetModem+0xb4>)
 80169f6:	2200      	movs	r2, #0
 80169f8:	735a      	strb	r2, [r3, #13]
        break;
 80169fa:	e028      	b.n	8016a4e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80169fc:	2001      	movs	r0, #1
 80169fe:	f002 faf9 	bl	8018ff4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016a02:	4b15      	ldr	r3, [pc, #84]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a04:	7b5a      	ldrb	r2, [r3, #13]
 8016a06:	4b14      	ldr	r3, [pc, #80]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a08:	7b1b      	ldrb	r3, [r3, #12]
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	d01e      	beq.n	8016a4c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016a0e:	4b12      	ldr	r3, [pc, #72]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a10:	7b1a      	ldrb	r2, [r3, #12]
 8016a12:	4b11      	ldr	r3, [pc, #68]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a14:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016a16:	4b10      	ldr	r3, [pc, #64]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a18:	7b5b      	ldrb	r3, [r3, #13]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f000 ff84 	bl	8017928 <RadioSetPublicNetwork>
        }
        break;
 8016a20:	e014      	b.n	8016a4c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016a22:	2002      	movs	r0, #2
 8016a24:	f002 fae6 	bl	8018ff4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016a28:	4b0b      	ldr	r3, [pc, #44]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	735a      	strb	r2, [r3, #13]
        break;
 8016a2e:	e00e      	b.n	8016a4e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016a30:	2002      	movs	r0, #2
 8016a32:	f002 fadf 	bl	8018ff4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016a36:	4b08      	ldr	r3, [pc, #32]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a38:	2200      	movs	r2, #0
 8016a3a:	735a      	strb	r2, [r3, #13]
        break;
 8016a3c:	e007      	b.n	8016a4e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016a3e:	2000      	movs	r0, #0
 8016a40:	f002 fad8 	bl	8018ff4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016a44:	4b04      	ldr	r3, [pc, #16]	@ (8016a58 <RadioSetModem+0xb4>)
 8016a46:	2200      	movs	r2, #0
 8016a48:	735a      	strb	r2, [r3, #13]
        break;
 8016a4a:	e000      	b.n	8016a4e <RadioSetModem+0xaa>
        break;
 8016a4c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016a4e:	bf00      	nop
 8016a50:	3708      	adds	r7, #8
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}
 8016a56:	bf00      	nop
 8016a58:	20001a70 	.word	0x20001a70

08016a5c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f002 fa7f 	bl	8018f68 <SUBGRF_SetRfFrequency>
}
 8016a6a:	bf00      	nop
 8016a6c:	3708      	adds	r7, #8
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b090      	sub	sp, #64	@ 0x40
 8016a76:	af0a      	add	r7, sp, #40	@ 0x28
 8016a78:	60f8      	str	r0, [r7, #12]
 8016a7a:	60b9      	str	r1, [r7, #8]
 8016a7c:	603b      	str	r3, [r7, #0]
 8016a7e:	4613      	mov	r3, r2
 8016a80:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016a82:	2301      	movs	r3, #1
 8016a84:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016a86:	2300      	movs	r3, #0
 8016a88:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016a8e:	f000 fddc 	bl	801764a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016a92:	2000      	movs	r0, #0
 8016a94:	f7ff ff86 	bl	80169a4 <RadioSetModem>

    RadioSetChannel( freq );
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f7ff ffdf 	bl	8016a5c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	9308      	str	r3, [sp, #32]
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	9307      	str	r3, [sp, #28]
 8016aaa:	2300      	movs	r3, #0
 8016aac:	9306      	str	r3, [sp, #24]
 8016aae:	2300      	movs	r3, #0
 8016ab0:	9305      	str	r3, [sp, #20]
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	9304      	str	r3, [sp, #16]
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	9303      	str	r3, [sp, #12]
 8016aba:	2300      	movs	r3, #0
 8016abc:	9302      	str	r3, [sp, #8]
 8016abe:	2303      	movs	r3, #3
 8016ac0:	9301      	str	r3, [sp, #4]
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	9300      	str	r3, [sp, #0]
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016acc:	68b9      	ldr	r1, [r7, #8]
 8016ace:	2000      	movs	r0, #0
 8016ad0:	f000 f83c 	bl	8016b4c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016ad4:	2000      	movs	r0, #0
 8016ad6:	f000 fdbf 	bl	8017658 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016ada:	f000 ff53 	bl	8017984 <RadioGetWakeupTime>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7eb f879 	bl	8001bd8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016ae6:	f004 f8b7 	bl	801ac58 <UTIL_TIMER_GetCurrentTime>
 8016aea:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016aec:	e00d      	b.n	8016b0a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016aee:	2000      	movs	r0, #0
 8016af0:	f000 fe9a 	bl	8017828 <RadioRssi>
 8016af4:	4603      	mov	r3, r0
 8016af6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016af8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	dd02      	ble.n	8016b0a <RadioIsChannelFree+0x98>
        {
            status = false;
 8016b04:	2300      	movs	r3, #0
 8016b06:	75fb      	strb	r3, [r7, #23]
            break;
 8016b08:	e006      	b.n	8016b18 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016b0a:	6938      	ldr	r0, [r7, #16]
 8016b0c:	f004 f8b6 	bl	801ac7c <UTIL_TIMER_GetElapsedTime>
 8016b10:	4602      	mov	r2, r0
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	4293      	cmp	r3, r2
 8016b16:	d8ea      	bhi.n	8016aee <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016b18:	f000 fd97 	bl	801764a <RadioStandby>

    return status;
 8016b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3718      	adds	r7, #24
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b082      	sub	sp, #8
 8016b2a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016b30:	2300      	movs	r3, #0
 8016b32:	2200      	movs	r2, #0
 8016b34:	2100      	movs	r1, #0
 8016b36:	2000      	movs	r0, #0
 8016b38:	f002 f9ba 	bl	8018eb0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016b3c:	f001 ff6f 	bl	8018a1e <SUBGRF_GetRandom>
 8016b40:	6078      	str	r0, [r7, #4]

    return rnd;
 8016b42:	687b      	ldr	r3, [r7, #4]
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}

08016b4c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b08a      	sub	sp, #40	@ 0x28
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	60b9      	str	r1, [r7, #8]
 8016b54:	607a      	str	r2, [r7, #4]
 8016b56:	461a      	mov	r2, r3
 8016b58:	4603      	mov	r3, r0
 8016b5a:	73fb      	strb	r3, [r7, #15]
 8016b5c:	4613      	mov	r3, r2
 8016b5e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016b60:	4ab9      	ldr	r2, [pc, #740]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016b62:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016b66:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016b68:	f003 f829 	bl	8019bbe <RFW_DeInit>
    if( rxContinuous == true )
 8016b6c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d001      	beq.n	8016b78 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016b74:	2300      	movs	r3, #0
 8016b76:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016b78:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d004      	beq.n	8016b8a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016b80:	4ab2      	ldr	r2, [pc, #712]	@ (8016e4c <RadioSetRxConfig+0x300>)
 8016b82:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016b86:	7013      	strb	r3, [r2, #0]
 8016b88:	e002      	b.n	8016b90 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016b8a:	4bb0      	ldr	r3, [pc, #704]	@ (8016e4c <RadioSetRxConfig+0x300>)
 8016b8c:	22ff      	movs	r2, #255	@ 0xff
 8016b8e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016b90:	7bfb      	ldrb	r3, [r7, #15]
 8016b92:	2b05      	cmp	r3, #5
 8016b94:	d009      	beq.n	8016baa <RadioSetRxConfig+0x5e>
 8016b96:	2b05      	cmp	r3, #5
 8016b98:	f300 81ca 	bgt.w	8016f30 <RadioSetRxConfig+0x3e4>
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	f000 80bf 	beq.w	8016d20 <RadioSetRxConfig+0x1d4>
 8016ba2:	2b01      	cmp	r3, #1
 8016ba4:	f000 8124 	beq.w	8016df0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016ba8:	e1c2      	b.n	8016f30 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016baa:	2001      	movs	r0, #1
 8016bac:	f002 f87c 	bl	8018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016bb0:	4ba5      	ldr	r3, [pc, #660]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016bb8:	4aa3      	ldr	r2, [pc, #652]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016bbe:	4ba2      	ldr	r3, [pc, #648]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bc0:	2209      	movs	r2, #9
 8016bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016bc6:	4ba0      	ldr	r3, [pc, #640]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bc8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016bcc:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016bce:	68b8      	ldr	r0, [r7, #8]
 8016bd0:	f002 ff28 	bl	8019a24 <SUBGRF_GetFskBandwidthRegValue>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016bde:	4b9a      	ldr	r3, [pc, #616]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016be0:	2200      	movs	r2, #0
 8016be2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016be4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016be6:	00db      	lsls	r3, r3, #3
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	4b97      	ldr	r3, [pc, #604]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bec:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016bee:	4b96      	ldr	r3, [pc, #600]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016bf4:	4b94      	ldr	r3, [pc, #592]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bf6:	2210      	movs	r2, #16
 8016bf8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016bfa:	4b93      	ldr	r3, [pc, #588]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016c00:	4b91      	ldr	r3, [pc, #580]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016c02:	2200      	movs	r2, #0
 8016c04:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016c06:	4b91      	ldr	r3, [pc, #580]	@ (8016e4c <RadioSetRxConfig+0x300>)
 8016c08:	781a      	ldrb	r2, [r3, #0]
 8016c0a:	4b8f      	ldr	r3, [pc, #572]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016c0c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016c10:	2201      	movs	r2, #1
 8016c12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016c14:	4b8c      	ldr	r3, [pc, #560]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016c16:	2200      	movs	r2, #0
 8016c18:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016c1a:	2005      	movs	r0, #5
 8016c1c:	f7ff fec2 	bl	80169a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c20:	488b      	ldr	r0, [pc, #556]	@ (8016e50 <RadioSetRxConfig+0x304>)
 8016c22:	f002 fadb 	bl	80191dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c26:	488b      	ldr	r0, [pc, #556]	@ (8016e54 <RadioSetRxConfig+0x308>)
 8016c28:	f002 fbaa 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c2c:	4a8a      	ldr	r2, [pc, #552]	@ (8016e58 <RadioSetRxConfig+0x30c>)
 8016c2e:	f107 031c 	add.w	r3, r7, #28
 8016c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c36:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c3a:	f107 031c 	add.w	r3, r7, #28
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f001 fe6b 	bl	801891a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c44:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016c48:	f001 feb6 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016c4c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016c50:	f000 fe08 	bl	8017864 <RadioRead>
 8016c54:	4603      	mov	r3, r0
 8016c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016c5e:	f023 0310 	bic.w	r3, r3, #16
 8016c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016c70:	f000 fde6 	bl	8017840 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016c74:	2104      	movs	r1, #4
 8016c76:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016c7a:	f000 fde1 	bl	8017840 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016c7e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016c82:	f000 fdef 	bl	8017864 <RadioRead>
 8016c86:	4603      	mov	r3, r0
 8016c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016c90:	f023 031c 	bic.w	r3, r3, #28
 8016c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016c9c:	f043 0308 	orr.w	r3, r3, #8
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016ca8:	f000 fdca 	bl	8017840 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016cac:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016cb0:	f000 fdd8 	bl	8017864 <RadioRead>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016cbe:	f023 0318 	bic.w	r3, r3, #24
 8016cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016cca:	f043 0318 	orr.w	r3, r3, #24
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016cd6:	f000 fdb3 	bl	8017840 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016cda:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016cde:	f000 fdc1 	bl	8017864 <RadioRead>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016cf8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	4619      	mov	r1, r3
 8016d00:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016d04:	f000 fd9c 	bl	8017840 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016d08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016d0a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016d0e:	fb02 f303 	mul.w	r3, r2, r3
 8016d12:	461a      	mov	r2, r3
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d1a:	4a4b      	ldr	r2, [pc, #300]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d1c:	6093      	str	r3, [r2, #8]
            break;
 8016d1e:	e108      	b.n	8016f32 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016d20:	2000      	movs	r0, #0
 8016d22:	f001 ffc1 	bl	8018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016d26:	4b48      	ldr	r3, [pc, #288]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d28:	2200      	movs	r2, #0
 8016d2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016d2e:	4a46      	ldr	r2, [pc, #280]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016d34:	4b44      	ldr	r3, [pc, #272]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d36:	220b      	movs	r2, #11
 8016d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016d3c:	68b8      	ldr	r0, [r7, #8]
 8016d3e:	f002 fe71 	bl	8019a24 <SUBGRF_GetFskBandwidthRegValue>
 8016d42:	4603      	mov	r3, r0
 8016d44:	461a      	mov	r2, r3
 8016d46:	4b40      	ldr	r3, [pc, #256]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d4e:	2200      	movs	r2, #0
 8016d50:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016d52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016d54:	00db      	lsls	r3, r3, #3
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	4b3b      	ldr	r3, [pc, #236]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d5a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d5e:	2204      	movs	r2, #4
 8016d60:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016d62:	4b39      	ldr	r3, [pc, #228]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d64:	2218      	movs	r2, #24
 8016d66:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016d68:	4b37      	ldr	r3, [pc, #220]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016d6e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016d72:	f083 0301 	eor.w	r3, r3, #1
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	461a      	mov	r2, r3
 8016d7a:	4b33      	ldr	r3, [pc, #204]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d7c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016d7e:	4b33      	ldr	r3, [pc, #204]	@ (8016e4c <RadioSetRxConfig+0x300>)
 8016d80:	781a      	ldrb	r2, [r3, #0]
 8016d82:	4b31      	ldr	r3, [pc, #196]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d84:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016d86:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d003      	beq.n	8016d96 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d90:	22f2      	movs	r2, #242	@ 0xf2
 8016d92:	75da      	strb	r2, [r3, #23]
 8016d94:	e002      	b.n	8016d9c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016d96:	4b2c      	ldr	r3, [pc, #176]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d98:	2201      	movs	r2, #1
 8016d9a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016d9e:	2201      	movs	r2, #1
 8016da0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016da2:	f000 fc52 	bl	801764a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8016da6:	2000      	movs	r0, #0
 8016da8:	f7ff fdfc 	bl	80169a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016dac:	4828      	ldr	r0, [pc, #160]	@ (8016e50 <RadioSetRxConfig+0x304>)
 8016dae:	f002 fa15 	bl	80191dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016db2:	4828      	ldr	r0, [pc, #160]	@ (8016e54 <RadioSetRxConfig+0x308>)
 8016db4:	f002 fae4 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016db8:	4a28      	ldr	r2, [pc, #160]	@ (8016e5c <RadioSetRxConfig+0x310>)
 8016dba:	f107 0314 	add.w	r3, r7, #20
 8016dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8016dc6:	f107 0314 	add.w	r3, r7, #20
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f001 fda5 	bl	801891a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016dd0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016dd4:	f001 fdf0 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016dd8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016dda:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016dde:	fb02 f303 	mul.w	r3, r2, r3
 8016de2:	461a      	mov	r2, r3
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8016dea:	4a17      	ldr	r2, [pc, #92]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016dec:	6093      	str	r3, [r2, #8]
            break;
 8016dee:	e0a0      	b.n	8016f32 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016df0:	2000      	movs	r0, #0
 8016df2:	f001 ff59 	bl	8018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016df6:	4b14      	ldr	r3, [pc, #80]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016df8:	2201      	movs	r2, #1
 8016dfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	b2da      	uxtb	r2, r3
 8016e02:	4b11      	ldr	r3, [pc, #68]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016e08:	4a15      	ldr	r2, [pc, #84]	@ (8016e60 <RadioSetRxConfig+0x314>)
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	4413      	add	r3, r2
 8016e0e:	781a      	ldrb	r2, [r3, #0]
 8016e10:	4b0d      	ldr	r3, [pc, #52]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016e12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016e16:	4a0c      	ldr	r2, [pc, #48]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016e18:	7bbb      	ldrb	r3, [r7, #14]
 8016e1a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d105      	bne.n	8016e30 <RadioSetRxConfig+0x2e4>
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2b0b      	cmp	r3, #11
 8016e28:	d008      	beq.n	8016e3c <RadioSetRxConfig+0x2f0>
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	2b0c      	cmp	r3, #12
 8016e2e:	d005      	beq.n	8016e3c <RadioSetRxConfig+0x2f0>
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d116      	bne.n	8016e64 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b0c      	cmp	r3, #12
 8016e3a:	d113      	bne.n	8016e64 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016e3c:	4b02      	ldr	r3, [pc, #8]	@ (8016e48 <RadioSetRxConfig+0x2fc>)
 8016e3e:	2201      	movs	r2, #1
 8016e40:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016e44:	e012      	b.n	8016e6c <RadioSetRxConfig+0x320>
 8016e46:	bf00      	nop
 8016e48:	20001a70 	.word	0x20001a70
 8016e4c:	20000144 	.word	0x20000144
 8016e50:	20001aa8 	.word	0x20001aa8
 8016e54:	20001a7e 	.word	0x20001a7e
 8016e58:	0801bcb0 	.word	0x0801bcb0
 8016e5c:	0801bcb8 	.word	0x0801bcb8
 8016e60:	0801c31c 	.word	0x0801c31c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016e64:	4b35      	ldr	r3, [pc, #212]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016e6c:	4b33      	ldr	r3, [pc, #204]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e6e:	2201      	movs	r2, #1
 8016e70:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016e72:	4b32      	ldr	r3, [pc, #200]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016e78:	2b05      	cmp	r3, #5
 8016e7a:	d004      	beq.n	8016e86 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016e82:	2b06      	cmp	r3, #6
 8016e84:	d10a      	bne.n	8016e9c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8016e86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e88:	2b0b      	cmp	r3, #11
 8016e8a:	d803      	bhi.n	8016e94 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e8e:	220c      	movs	r2, #12
 8016e90:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016e92:	e006      	b.n	8016ea2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e94:	4a29      	ldr	r2, [pc, #164]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e98:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016e9a:	e002      	b.n	8016ea2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e9c:	4a27      	ldr	r2, [pc, #156]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016e9e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016ea0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016ea2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016ea6:	4b25      	ldr	r3, [pc, #148]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016ea8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016eaa:	4b25      	ldr	r3, [pc, #148]	@ (8016f40 <RadioSetRxConfig+0x3f4>)
 8016eac:	781a      	ldrb	r2, [r3, #0]
 8016eae:	4b23      	ldr	r3, [pc, #140]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016eb0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016eb2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8016eb6:	4b21      	ldr	r3, [pc, #132]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016eb8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016ebc:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8016ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016ec2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016ec6:	f000 fbc0 	bl	801764a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016eca:	2001      	movs	r0, #1
 8016ecc:	f7ff fd6a 	bl	80169a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ed0:	481c      	ldr	r0, [pc, #112]	@ (8016f44 <RadioSetRxConfig+0x3f8>)
 8016ed2:	f002 f983 	bl	80191dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ed6:	481c      	ldr	r0, [pc, #112]	@ (8016f48 <RadioSetRxConfig+0x3fc>)
 8016ed8:	f002 fa52 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016edc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f001 fef0 	bl	8018cc6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016ee6:	4b15      	ldr	r3, [pc, #84]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d10d      	bne.n	8016f0c <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016ef0:	f240 7036 	movw	r0, #1846	@ 0x736
 8016ef4:	f002 fba0 	bl	8019638 <SUBGRF_ReadRegister>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	f023 0304 	bic.w	r3, r3, #4
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	4619      	mov	r1, r3
 8016f02:	f240 7036 	movw	r0, #1846	@ 0x736
 8016f06:	f002 fb83 	bl	8019610 <SUBGRF_WriteRegister>
 8016f0a:	e00c      	b.n	8016f26 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016f0c:	f240 7036 	movw	r0, #1846	@ 0x736
 8016f10:	f002 fb92 	bl	8019638 <SUBGRF_ReadRegister>
 8016f14:	4603      	mov	r3, r0
 8016f16:	f043 0304 	orr.w	r3, r3, #4
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	f240 7036 	movw	r0, #1846	@ 0x736
 8016f22:	f002 fb75 	bl	8019610 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016f26:	4b05      	ldr	r3, [pc, #20]	@ (8016f3c <RadioSetRxConfig+0x3f0>)
 8016f28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f2c:	609a      	str	r2, [r3, #8]
            break;
 8016f2e:	e000      	b.n	8016f32 <RadioSetRxConfig+0x3e6>
            break;
 8016f30:	bf00      	nop
    }
}
 8016f32:	bf00      	nop
 8016f34:	3728      	adds	r7, #40	@ 0x28
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	20001a70 	.word	0x20001a70
 8016f40:	20000144 	.word	0x20000144
 8016f44:	20001aa8 	.word	0x20001aa8
 8016f48:	20001a7e 	.word	0x20001a7e

08016f4c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b086      	sub	sp, #24
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	60ba      	str	r2, [r7, #8]
 8016f54:	607b      	str	r3, [r7, #4]
 8016f56:	4603      	mov	r3, r0
 8016f58:	73fb      	strb	r3, [r7, #15]
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016f5e:	f002 fe2e 	bl	8019bbe <RFW_DeInit>
    switch( modem )
 8016f62:	7bfb      	ldrb	r3, [r7, #15]
 8016f64:	2b04      	cmp	r3, #4
 8016f66:	f000 80c7 	beq.w	80170f8 <RadioSetTxConfig+0x1ac>
 8016f6a:	2b04      	cmp	r3, #4
 8016f6c:	f300 80d6 	bgt.w	801711c <RadioSetTxConfig+0x1d0>
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d002      	beq.n	8016f7a <RadioSetTxConfig+0x2e>
 8016f74:	2b01      	cmp	r3, #1
 8016f76:	d059      	beq.n	801702c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8016f78:	e0d0      	b.n	801711c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016f7a:	4b74      	ldr	r3, [pc, #464]	@ (801714c <RadioSetTxConfig+0x200>)
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016f82:	4a72      	ldr	r2, [pc, #456]	@ (801714c <RadioSetTxConfig+0x200>)
 8016f84:	6a3b      	ldr	r3, [r7, #32]
 8016f86:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016f88:	4b70      	ldr	r3, [pc, #448]	@ (801714c <RadioSetTxConfig+0x200>)
 8016f8a:	220b      	movs	r2, #11
 8016f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f002 fd47 	bl	8019a24 <SUBGRF_GetFskBandwidthRegValue>
 8016f96:	4603      	mov	r3, r0
 8016f98:	461a      	mov	r2, r3
 8016f9a:	4b6c      	ldr	r3, [pc, #432]	@ (801714c <RadioSetTxConfig+0x200>)
 8016f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016fa0:	4a6a      	ldr	r2, [pc, #424]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016fa6:	4b69      	ldr	r3, [pc, #420]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fa8:	2200      	movs	r2, #0
 8016faa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016fac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016fae:	00db      	lsls	r3, r3, #3
 8016fb0:	b29a      	uxth	r2, r3
 8016fb2:	4b66      	ldr	r3, [pc, #408]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fb4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016fb6:	4b65      	ldr	r3, [pc, #404]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fb8:	2204      	movs	r2, #4
 8016fba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016fbc:	4b63      	ldr	r3, [pc, #396]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fbe:	2218      	movs	r2, #24
 8016fc0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016fc2:	4b62      	ldr	r3, [pc, #392]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016fcc:	f083 0301 	eor.w	r3, r3, #1
 8016fd0:	b2db      	uxtb	r3, r3
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4b5d      	ldr	r3, [pc, #372]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fd6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016fd8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d003      	beq.n	8016fe8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016fe0:	4b5a      	ldr	r3, [pc, #360]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fe2:	22f2      	movs	r2, #242	@ 0xf2
 8016fe4:	75da      	strb	r2, [r3, #23]
 8016fe6:	e002      	b.n	8016fee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016fe8:	4b58      	ldr	r3, [pc, #352]	@ (801714c <RadioSetTxConfig+0x200>)
 8016fea:	2201      	movs	r2, #1
 8016fec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016fee:	4b57      	ldr	r3, [pc, #348]	@ (801714c <RadioSetTxConfig+0x200>)
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016ff4:	f000 fb29 	bl	801764a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016ff8:	2000      	movs	r0, #0
 8016ffa:	f7ff fcd3 	bl	80169a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ffe:	4854      	ldr	r0, [pc, #336]	@ (8017150 <RadioSetTxConfig+0x204>)
 8017000:	f002 f8ec 	bl	80191dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017004:	4853      	ldr	r0, [pc, #332]	@ (8017154 <RadioSetTxConfig+0x208>)
 8017006:	f002 f9bb 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801700a:	4a53      	ldr	r2, [pc, #332]	@ (8017158 <RadioSetTxConfig+0x20c>)
 801700c:	f107 0310 	add.w	r3, r7, #16
 8017010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017014:	e883 0003 	stmia.w	r3, {r0, r1}
 8017018:	f107 0310 	add.w	r3, r7, #16
 801701c:	4618      	mov	r0, r3
 801701e:	f001 fc7c 	bl	801891a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017022:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017026:	f001 fcc7 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
            break;
 801702a:	e078      	b.n	801711e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801702c:	4b47      	ldr	r3, [pc, #284]	@ (801714c <RadioSetTxConfig+0x200>)
 801702e:	2201      	movs	r2, #1
 8017030:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017034:	6a3b      	ldr	r3, [r7, #32]
 8017036:	b2da      	uxtb	r2, r3
 8017038:	4b44      	ldr	r3, [pc, #272]	@ (801714c <RadioSetTxConfig+0x200>)
 801703a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801703e:	4a47      	ldr	r2, [pc, #284]	@ (801715c <RadioSetTxConfig+0x210>)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	4413      	add	r3, r2
 8017044:	781a      	ldrb	r2, [r3, #0]
 8017046:	4b41      	ldr	r3, [pc, #260]	@ (801714c <RadioSetTxConfig+0x200>)
 8017048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801704c:	4a3f      	ldr	r2, [pc, #252]	@ (801714c <RadioSetTxConfig+0x200>)
 801704e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017052:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d105      	bne.n	8017068 <RadioSetTxConfig+0x11c>
 801705c:	6a3b      	ldr	r3, [r7, #32]
 801705e:	2b0b      	cmp	r3, #11
 8017060:	d008      	beq.n	8017074 <RadioSetTxConfig+0x128>
 8017062:	6a3b      	ldr	r3, [r7, #32]
 8017064:	2b0c      	cmp	r3, #12
 8017066:	d005      	beq.n	8017074 <RadioSetTxConfig+0x128>
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	2b01      	cmp	r3, #1
 801706c:	d107      	bne.n	801707e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801706e:	6a3b      	ldr	r3, [r7, #32]
 8017070:	2b0c      	cmp	r3, #12
 8017072:	d104      	bne.n	801707e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017074:	4b35      	ldr	r3, [pc, #212]	@ (801714c <RadioSetTxConfig+0x200>)
 8017076:	2201      	movs	r2, #1
 8017078:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801707c:	e003      	b.n	8017086 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801707e:	4b33      	ldr	r3, [pc, #204]	@ (801714c <RadioSetTxConfig+0x200>)
 8017080:	2200      	movs	r2, #0
 8017082:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017086:	4b31      	ldr	r3, [pc, #196]	@ (801714c <RadioSetTxConfig+0x200>)
 8017088:	2201      	movs	r2, #1
 801708a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801708c:	4b2f      	ldr	r3, [pc, #188]	@ (801714c <RadioSetTxConfig+0x200>)
 801708e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017092:	2b05      	cmp	r3, #5
 8017094:	d004      	beq.n	80170a0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017096:	4b2d      	ldr	r3, [pc, #180]	@ (801714c <RadioSetTxConfig+0x200>)
 8017098:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801709c:	2b06      	cmp	r3, #6
 801709e:	d10a      	bne.n	80170b6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80170a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80170a2:	2b0b      	cmp	r3, #11
 80170a4:	d803      	bhi.n	80170ae <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80170a6:	4b29      	ldr	r3, [pc, #164]	@ (801714c <RadioSetTxConfig+0x200>)
 80170a8:	220c      	movs	r2, #12
 80170aa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80170ac:	e006      	b.n	80170bc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80170ae:	4a27      	ldr	r2, [pc, #156]	@ (801714c <RadioSetTxConfig+0x200>)
 80170b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80170b2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80170b4:	e002      	b.n	80170bc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80170b6:	4a25      	ldr	r2, [pc, #148]	@ (801714c <RadioSetTxConfig+0x200>)
 80170b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80170ba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80170bc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80170c0:	4b22      	ldr	r3, [pc, #136]	@ (801714c <RadioSetTxConfig+0x200>)
 80170c2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80170c4:	4b26      	ldr	r3, [pc, #152]	@ (8017160 <RadioSetTxConfig+0x214>)
 80170c6:	781a      	ldrb	r2, [r3, #0]
 80170c8:	4b20      	ldr	r3, [pc, #128]	@ (801714c <RadioSetTxConfig+0x200>)
 80170ca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80170cc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80170d0:	4b1e      	ldr	r3, [pc, #120]	@ (801714c <RadioSetTxConfig+0x200>)
 80170d2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80170d6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80170da:	4b1c      	ldr	r3, [pc, #112]	@ (801714c <RadioSetTxConfig+0x200>)
 80170dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80170e0:	f000 fab3 	bl	801764a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80170e4:	2001      	movs	r0, #1
 80170e6:	f7ff fc5d 	bl	80169a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80170ea:	4819      	ldr	r0, [pc, #100]	@ (8017150 <RadioSetTxConfig+0x204>)
 80170ec:	f002 f876 	bl	80191dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170f0:	4818      	ldr	r0, [pc, #96]	@ (8017154 <RadioSetTxConfig+0x208>)
 80170f2:	f002 f945 	bl	8019380 <SUBGRF_SetPacketParams>
            break;
 80170f6:	e012      	b.n	801711e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80170f8:	2004      	movs	r0, #4
 80170fa:	f7ff fc53 	bl	80169a4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80170fe:	4b13      	ldr	r3, [pc, #76]	@ (801714c <RadioSetTxConfig+0x200>)
 8017100:	2202      	movs	r2, #2
 8017102:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017106:	4a11      	ldr	r2, [pc, #68]	@ (801714c <RadioSetTxConfig+0x200>)
 8017108:	6a3b      	ldr	r3, [r7, #32]
 801710a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801710c:	4b0f      	ldr	r3, [pc, #60]	@ (801714c <RadioSetTxConfig+0x200>)
 801710e:	2216      	movs	r2, #22
 8017110:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017114:	480e      	ldr	r0, [pc, #56]	@ (8017150 <RadioSetTxConfig+0x204>)
 8017116:	f002 f861 	bl	80191dc <SUBGRF_SetModulationParams>
            break;
 801711a:	e000      	b.n	801711e <RadioSetTxConfig+0x1d2>
            break;
 801711c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801711e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017122:	4618      	mov	r0, r3
 8017124:	f002 fb90 	bl	8019848 <SUBGRF_SetRfTxPower>
 8017128:	4603      	mov	r3, r0
 801712a:	461a      	mov	r2, r3
 801712c:	4b07      	ldr	r3, [pc, #28]	@ (801714c <RadioSetTxConfig+0x200>)
 801712e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017132:	4b06      	ldr	r3, [pc, #24]	@ (801714c <RadioSetTxConfig+0x200>)
 8017134:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017138:	4618      	mov	r0, r3
 801713a:	f002 fd54 	bl	8019be6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801713e:	4a03      	ldr	r2, [pc, #12]	@ (801714c <RadioSetTxConfig+0x200>)
 8017140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017142:	6053      	str	r3, [r2, #4]
}
 8017144:	bf00      	nop
 8017146:	3718      	adds	r7, #24
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	20001a70 	.word	0x20001a70
 8017150:	20001aa8 	.word	0x20001aa8
 8017154:	20001a7e 	.word	0x20001a7e
 8017158:	0801bcb8 	.word	0x0801bcb8
 801715c:	0801c31c 	.word	0x0801c31c
 8017160:	20000144 	.word	0x20000144

08017164 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017164:	b480      	push	{r7}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
    return true;
 801716c:	2301      	movs	r3, #1
}
 801716e:	4618      	mov	r0, r3
 8017170:	370c      	adds	r7, #12
 8017172:	46bd      	mov	sp, r7
 8017174:	bc80      	pop	{r7}
 8017176:	4770      	bx	lr

08017178 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017178:	b480      	push	{r7}
 801717a:	b085      	sub	sp, #20
 801717c:	af00      	add	r7, sp, #0
 801717e:	4603      	mov	r3, r0
 8017180:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017182:	2300      	movs	r3, #0
 8017184:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017186:	79fb      	ldrb	r3, [r7, #7]
 8017188:	2b0a      	cmp	r3, #10
 801718a:	d83e      	bhi.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
 801718c:	a201      	add	r2, pc, #4	@ (adr r2, 8017194 <RadioGetLoRaBandwidthInHz+0x1c>)
 801718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017192:	bf00      	nop
 8017194:	080171c1 	.word	0x080171c1
 8017198:	080171d1 	.word	0x080171d1
 801719c:	080171e1 	.word	0x080171e1
 80171a0:	080171f1 	.word	0x080171f1
 80171a4:	080171f9 	.word	0x080171f9
 80171a8:	080171ff 	.word	0x080171ff
 80171ac:	08017205 	.word	0x08017205
 80171b0:	0801720b 	.word	0x0801720b
 80171b4:	080171c9 	.word	0x080171c9
 80171b8:	080171d9 	.word	0x080171d9
 80171bc:	080171e9 	.word	0x080171e9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80171c0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80171c4:	60fb      	str	r3, [r7, #12]
        break;
 80171c6:	e020      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80171c8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80171cc:	60fb      	str	r3, [r7, #12]
        break;
 80171ce:	e01c      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80171d0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80171d4:	60fb      	str	r3, [r7, #12]
        break;
 80171d6:	e018      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80171d8:	f245 1361 	movw	r3, #20833	@ 0x5161
 80171dc:	60fb      	str	r3, [r7, #12]
        break;
 80171de:	e014      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80171e0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80171e4:	60fb      	str	r3, [r7, #12]
        break;
 80171e6:	e010      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80171e8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80171ec:	60fb      	str	r3, [r7, #12]
        break;
 80171ee:	e00c      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80171f0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80171f4:	60fb      	str	r3, [r7, #12]
        break;
 80171f6:	e008      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80171f8:	4b07      	ldr	r3, [pc, #28]	@ (8017218 <RadioGetLoRaBandwidthInHz+0xa0>)
 80171fa:	60fb      	str	r3, [r7, #12]
        break;
 80171fc:	e005      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80171fe:	4b07      	ldr	r3, [pc, #28]	@ (801721c <RadioGetLoRaBandwidthInHz+0xa4>)
 8017200:	60fb      	str	r3, [r7, #12]
        break;
 8017202:	e002      	b.n	801720a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017204:	4b06      	ldr	r3, [pc, #24]	@ (8017220 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017206:	60fb      	str	r3, [r7, #12]
        break;
 8017208:	bf00      	nop
    }

    return bandwidthInHz;
 801720a:	68fb      	ldr	r3, [r7, #12]
}
 801720c:	4618      	mov	r0, r3
 801720e:	3714      	adds	r7, #20
 8017210:	46bd      	mov	sp, r7
 8017212:	bc80      	pop	{r7}
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	0001e848 	.word	0x0001e848
 801721c:	0003d090 	.word	0x0003d090
 8017220:	0007a120 	.word	0x0007a120

08017224 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017224:	b480      	push	{r7}
 8017226:	b083      	sub	sp, #12
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	4608      	mov	r0, r1
 801722e:	4611      	mov	r1, r2
 8017230:	461a      	mov	r2, r3
 8017232:	4603      	mov	r3, r0
 8017234:	70fb      	strb	r3, [r7, #3]
 8017236:	460b      	mov	r3, r1
 8017238:	803b      	strh	r3, [r7, #0]
 801723a:	4613      	mov	r3, r2
 801723c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801723e:	883b      	ldrh	r3, [r7, #0]
 8017240:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017242:	78ba      	ldrb	r2, [r7, #2]
 8017244:	f082 0201 	eor.w	r2, r2, #1
 8017248:	b2d2      	uxtb	r2, r2
 801724a:	2a00      	cmp	r2, #0
 801724c:	d001      	beq.n	8017252 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801724e:	2208      	movs	r2, #8
 8017250:	e000      	b.n	8017254 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017252:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017254:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017256:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801725a:	7c3b      	ldrb	r3, [r7, #16]
 801725c:	7d39      	ldrb	r1, [r7, #20]
 801725e:	2900      	cmp	r1, #0
 8017260:	d001      	beq.n	8017266 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017262:	2102      	movs	r1, #2
 8017264:	e000      	b.n	8017268 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017266:	2100      	movs	r1, #0
 8017268:	440b      	add	r3, r1
 801726a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801726c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801726e:	4618      	mov	r0, r3
 8017270:	370c      	adds	r7, #12
 8017272:	46bd      	mov	sp, r7
 8017274:	bc80      	pop	{r7}
 8017276:	4770      	bx	lr

08017278 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017278:	b480      	push	{r7}
 801727a:	b08b      	sub	sp, #44	@ 0x2c
 801727c:	af00      	add	r7, sp, #0
 801727e:	60f8      	str	r0, [r7, #12]
 8017280:	60b9      	str	r1, [r7, #8]
 8017282:	4611      	mov	r1, r2
 8017284:	461a      	mov	r2, r3
 8017286:	460b      	mov	r3, r1
 8017288:	71fb      	strb	r3, [r7, #7]
 801728a:	4613      	mov	r3, r2
 801728c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801728e:	79fb      	ldrb	r3, [r7, #7]
 8017290:	3304      	adds	r3, #4
 8017292:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017294:	2300      	movs	r3, #0
 8017296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	2b05      	cmp	r3, #5
 801729e:	d002      	beq.n	80172a6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	2b06      	cmp	r3, #6
 80172a4:	d104      	bne.n	80172b0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80172a6:	88bb      	ldrh	r3, [r7, #4]
 80172a8:	2b0b      	cmp	r3, #11
 80172aa:	d801      	bhi.n	80172b0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80172ac:	230c      	movs	r3, #12
 80172ae:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d105      	bne.n	80172c2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	2b0b      	cmp	r3, #11
 80172ba:	d008      	beq.n	80172ce <RadioGetLoRaTimeOnAirNumerator+0x56>
 80172bc:	68bb      	ldr	r3, [r7, #8]
 80172be:	2b0c      	cmp	r3, #12
 80172c0:	d005      	beq.n	80172ce <RadioGetLoRaTimeOnAirNumerator+0x56>
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d105      	bne.n	80172d4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	2b0c      	cmp	r3, #12
 80172cc:	d102      	bne.n	80172d4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80172ce:	2301      	movs	r3, #1
 80172d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80172d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80172d8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80172da:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80172de:	2a00      	cmp	r2, #0
 80172e0:	d001      	beq.n	80172e6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80172e2:	2210      	movs	r2, #16
 80172e4:	e000      	b.n	80172e8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80172e6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80172e8:	4413      	add	r3, r2
 80172ea:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80172f0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80172f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80172f6:	2a00      	cmp	r2, #0
 80172f8:	d001      	beq.n	80172fe <RadioGetLoRaTimeOnAirNumerator+0x86>
 80172fa:	2200      	movs	r2, #0
 80172fc:	e000      	b.n	8017300 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80172fe:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017300:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017302:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	2b06      	cmp	r3, #6
 8017308:	d803      	bhi.n	8017312 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	009b      	lsls	r3, r3, #2
 801730e:	623b      	str	r3, [r7, #32]
 8017310:	e00e      	b.n	8017330 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	3308      	adds	r3, #8
 8017316:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801731c:	2b00      	cmp	r3, #0
 801731e:	d004      	beq.n	801732a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	3b02      	subs	r3, #2
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	623b      	str	r3, [r7, #32]
 8017328:	e002      	b.n	8017330 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	2b00      	cmp	r3, #0
 8017334:	da01      	bge.n	801733a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801733a:	69fa      	ldr	r2, [r7, #28]
 801733c:	6a3b      	ldr	r3, [r7, #32]
 801733e:	4413      	add	r3, r2
 8017340:	1e5a      	subs	r2, r3, #1
 8017342:	6a3b      	ldr	r3, [r7, #32]
 8017344:	fb92 f3f3 	sdiv	r3, r2, r3
 8017348:	697a      	ldr	r2, [r7, #20]
 801734a:	fb03 f202 	mul.w	r2, r3, r2
 801734e:	88bb      	ldrh	r3, [r7, #4]
 8017350:	4413      	add	r3, r2
    int32_t intermediate =
 8017352:	330c      	adds	r3, #12
 8017354:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b06      	cmp	r3, #6
 801735a:	d802      	bhi.n	8017362 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801735c:	69bb      	ldr	r3, [r7, #24]
 801735e:	3302      	adds	r3, #2
 8017360:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017362:	69bb      	ldr	r3, [r7, #24]
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	1c5a      	adds	r2, r3, #1
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	3b02      	subs	r3, #2
 801736c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017370:	4618      	mov	r0, r3
 8017372:	372c      	adds	r7, #44	@ 0x2c
 8017374:	46bd      	mov	sp, r7
 8017376:	bc80      	pop	{r7}
 8017378:	4770      	bx	lr
	...

0801737c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08a      	sub	sp, #40	@ 0x28
 8017380:	af04      	add	r7, sp, #16
 8017382:	60b9      	str	r1, [r7, #8]
 8017384:	607a      	str	r2, [r7, #4]
 8017386:	461a      	mov	r2, r3
 8017388:	4603      	mov	r3, r0
 801738a:	73fb      	strb	r3, [r7, #15]
 801738c:	4613      	mov	r3, r2
 801738e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017390:	2300      	movs	r3, #0
 8017392:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017394:	2301      	movs	r3, #1
 8017396:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017398:	7bfb      	ldrb	r3, [r7, #15]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d002      	beq.n	80173a4 <RadioTimeOnAir+0x28>
 801739e:	2b01      	cmp	r3, #1
 80173a0:	d017      	beq.n	80173d2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80173a2:	e035      	b.n	8017410 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80173a4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80173a8:	8c3a      	ldrh	r2, [r7, #32]
 80173aa:	7bb9      	ldrb	r1, [r7, #14]
 80173ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80173b0:	9301      	str	r3, [sp, #4]
 80173b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	4603      	mov	r3, r0
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f7ff ff32 	bl	8017224 <RadioGetGfskTimeOnAirNumerator>
 80173c0:	4603      	mov	r3, r0
 80173c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80173c6:	fb02 f303 	mul.w	r3, r2, r3
 80173ca:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	613b      	str	r3, [r7, #16]
        break;
 80173d0:	e01e      	b.n	8017410 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80173d2:	8c39      	ldrh	r1, [r7, #32]
 80173d4:	7bba      	ldrb	r2, [r7, #14]
 80173d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80173da:	9302      	str	r3, [sp, #8]
 80173dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80173e0:	9301      	str	r3, [sp, #4]
 80173e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	460b      	mov	r3, r1
 80173ea:	6879      	ldr	r1, [r7, #4]
 80173ec:	68b8      	ldr	r0, [r7, #8]
 80173ee:	f7ff ff43 	bl	8017278 <RadioGetLoRaTimeOnAirNumerator>
 80173f2:	4603      	mov	r3, r0
 80173f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80173f8:	fb02 f303 	mul.w	r3, r2, r3
 80173fc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80173fe:	4a0a      	ldr	r2, [pc, #40]	@ (8017428 <RadioTimeOnAir+0xac>)
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	4413      	add	r3, r2
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	4618      	mov	r0, r3
 8017408:	f7ff feb6 	bl	8017178 <RadioGetLoRaBandwidthInHz>
 801740c:	6138      	str	r0, [r7, #16]
        break;
 801740e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017410:	697a      	ldr	r2, [r7, #20]
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	4413      	add	r3, r2
 8017416:	1e5a      	subs	r2, r3, #1
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801741e:	4618      	mov	r0, r3
 8017420:	3718      	adds	r7, #24
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
 8017426:	bf00      	nop
 8017428:	0801c31c 	.word	0x0801c31c

0801742c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	460b      	mov	r3, r1
 8017436:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017438:	2300      	movs	r3, #0
 801743a:	2200      	movs	r2, #0
 801743c:	f240 2101 	movw	r1, #513	@ 0x201
 8017440:	f240 2001 	movw	r0, #513	@ 0x201
 8017444:	f001 fd34 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017448:	4b71      	ldr	r3, [pc, #452]	@ (8017610 <RadioSend+0x1e4>)
 801744a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801744e:	2101      	movs	r1, #1
 8017450:	4618      	mov	r0, r3
 8017452:	f002 f9d1 	bl	80197f8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017456:	4b6e      	ldr	r3, [pc, #440]	@ (8017610 <RadioSend+0x1e4>)
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	2b01      	cmp	r3, #1
 801745c:	d112      	bne.n	8017484 <RadioSend+0x58>
 801745e:	4b6c      	ldr	r3, [pc, #432]	@ (8017610 <RadioSend+0x1e4>)
 8017460:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017464:	2b06      	cmp	r3, #6
 8017466:	d10d      	bne.n	8017484 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017468:	f640 0089 	movw	r0, #2185	@ 0x889
 801746c:	f002 f8e4 	bl	8019638 <SUBGRF_ReadRegister>
 8017470:	4603      	mov	r3, r0
 8017472:	f023 0304 	bic.w	r3, r3, #4
 8017476:	b2db      	uxtb	r3, r3
 8017478:	4619      	mov	r1, r3
 801747a:	f640 0089 	movw	r0, #2185	@ 0x889
 801747e:	f002 f8c7 	bl	8019610 <SUBGRF_WriteRegister>
 8017482:	e00c      	b.n	801749e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017484:	f640 0089 	movw	r0, #2185	@ 0x889
 8017488:	f002 f8d6 	bl	8019638 <SUBGRF_ReadRegister>
 801748c:	4603      	mov	r3, r0
 801748e:	f043 0304 	orr.w	r3, r3, #4
 8017492:	b2db      	uxtb	r3, r3
 8017494:	4619      	mov	r1, r3
 8017496:	f640 0089 	movw	r0, #2185	@ 0x889
 801749a:	f002 f8b9 	bl	8019610 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 801749e:	4b5c      	ldr	r3, [pc, #368]	@ (8017610 <RadioSend+0x1e4>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	2b04      	cmp	r3, #4
 80174a4:	f200 80a7 	bhi.w	80175f6 <RadioSend+0x1ca>
 80174a8:	a201      	add	r2, pc, #4	@ (adr r2, 80174b0 <RadioSend+0x84>)
 80174aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174ae:	bf00      	nop
 80174b0:	080174df 	.word	0x080174df
 80174b4:	080174c5 	.word	0x080174c5
 80174b8:	080174df 	.word	0x080174df
 80174bc:	0801753f 	.word	0x0801753f
 80174c0:	0801755f 	.word	0x0801755f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80174c4:	4a52      	ldr	r2, [pc, #328]	@ (8017610 <RadioSend+0x1e4>)
 80174c6:	78fb      	ldrb	r3, [r7, #3]
 80174c8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174ca:	4852      	ldr	r0, [pc, #328]	@ (8017614 <RadioSend+0x1e8>)
 80174cc:	f001 ff58 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80174d0:	78fb      	ldrb	r3, [r7, #3]
 80174d2:	2200      	movs	r2, #0
 80174d4:	4619      	mov	r1, r3
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f001 fa0c 	bl	80188f4 <SUBGRF_SendPayload>
            break;
 80174dc:	e08c      	b.n	80175f8 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80174de:	f002 fb74 	bl	8019bca <RFW_Is_Init>
 80174e2:	4603      	mov	r3, r0
 80174e4:	2b01      	cmp	r3, #1
 80174e6:	d11d      	bne.n	8017524 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80174e8:	f107 020d 	add.w	r2, r7, #13
 80174ec:	78fb      	ldrb	r3, [r7, #3]
 80174ee:	4619      	mov	r1, r3
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f002 fb82 	bl	8019bfa <RFW_TransmitInit>
 80174f6:	4603      	mov	r3, r0
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d10c      	bne.n	8017516 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80174fc:	7b7a      	ldrb	r2, [r7, #13]
 80174fe:	4b44      	ldr	r3, [pc, #272]	@ (8017610 <RadioSend+0x1e4>)
 8017500:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017502:	4844      	ldr	r0, [pc, #272]	@ (8017614 <RadioSend+0x1e8>)
 8017504:	f001 ff3c 	bl	8019380 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017508:	7b7b      	ldrb	r3, [r7, #13]
 801750a:	2200      	movs	r2, #0
 801750c:	4619      	mov	r1, r3
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f001 f9f0 	bl	80188f4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017514:	e070      	b.n	80175f8 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017516:	4b40      	ldr	r3, [pc, #256]	@ (8017618 <RadioSend+0x1ec>)
 8017518:	2201      	movs	r2, #1
 801751a:	2100      	movs	r1, #0
 801751c:	2002      	movs	r0, #2
 801751e:	f003 fc8b 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
 8017522:	e072      	b.n	801760a <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017524:	4a3a      	ldr	r2, [pc, #232]	@ (8017610 <RadioSend+0x1e4>)
 8017526:	78fb      	ldrb	r3, [r7, #3]
 8017528:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801752a:	483a      	ldr	r0, [pc, #232]	@ (8017614 <RadioSend+0x1e8>)
 801752c:	f001 ff28 	bl	8019380 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017530:	78fb      	ldrb	r3, [r7, #3]
 8017532:	2200      	movs	r2, #0
 8017534:	4619      	mov	r1, r3
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f001 f9dc 	bl	80188f4 <SUBGRF_SendPayload>
            break;
 801753c:	e05c      	b.n	80175f8 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801753e:	4b34      	ldr	r3, [pc, #208]	@ (8017610 <RadioSend+0x1e4>)
 8017540:	2202      	movs	r2, #2
 8017542:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017544:	4a32      	ldr	r2, [pc, #200]	@ (8017610 <RadioSend+0x1e4>)
 8017546:	78fb      	ldrb	r3, [r7, #3]
 8017548:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801754a:	4832      	ldr	r0, [pc, #200]	@ (8017614 <RadioSend+0x1e8>)
 801754c:	f001 ff18 	bl	8019380 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017550:	78fb      	ldrb	r3, [r7, #3]
 8017552:	2200      	movs	r2, #0
 8017554:	4619      	mov	r1, r3
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f001 f9cc 	bl	80188f4 <SUBGRF_SendPayload>
            break;
 801755c:	e04c      	b.n	80175f8 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801755e:	78fb      	ldrb	r3, [r7, #3]
 8017560:	461a      	mov	r2, r3
 8017562:	6879      	ldr	r1, [r7, #4]
 8017564:	482d      	ldr	r0, [pc, #180]	@ (801761c <RadioSend+0x1f0>)
 8017566:	f000 fcbc 	bl	8017ee2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801756a:	4b29      	ldr	r3, [pc, #164]	@ (8017610 <RadioSend+0x1e4>)
 801756c:	2202      	movs	r2, #2
 801756e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017570:	78fb      	ldrb	r3, [r7, #3]
 8017572:	3301      	adds	r3, #1
 8017574:	b2da      	uxtb	r2, r3
 8017576:	4b26      	ldr	r3, [pc, #152]	@ (8017610 <RadioSend+0x1e4>)
 8017578:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801757a:	4826      	ldr	r0, [pc, #152]	@ (8017614 <RadioSend+0x1e8>)
 801757c:	f001 ff00 	bl	8019380 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017580:	2100      	movs	r1, #0
 8017582:	20f1      	movs	r0, #241	@ 0xf1
 8017584:	f000 f95c 	bl	8017840 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017588:	2100      	movs	r1, #0
 801758a:	20f0      	movs	r0, #240	@ 0xf0
 801758c:	f000 f958 	bl	8017840 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017590:	4b1f      	ldr	r3, [pc, #124]	@ (8017610 <RadioSend+0x1e4>)
 8017592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017594:	2b64      	cmp	r3, #100	@ 0x64
 8017596:	d108      	bne.n	80175aa <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017598:	2170      	movs	r1, #112	@ 0x70
 801759a:	20f3      	movs	r0, #243	@ 0xf3
 801759c:	f000 f950 	bl	8017840 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80175a0:	211d      	movs	r1, #29
 80175a2:	20f2      	movs	r0, #242	@ 0xf2
 80175a4:	f000 f94c 	bl	8017840 <RadioWrite>
 80175a8:	e007      	b.n	80175ba <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80175aa:	21e1      	movs	r1, #225	@ 0xe1
 80175ac:	20f3      	movs	r0, #243	@ 0xf3
 80175ae:	f000 f947 	bl	8017840 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80175b2:	2104      	movs	r1, #4
 80175b4:	20f2      	movs	r0, #242	@ 0xf2
 80175b6:	f000 f943 	bl	8017840 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80175ba:	78fb      	ldrb	r3, [r7, #3]
 80175bc:	b29b      	uxth	r3, r3
 80175be:	00db      	lsls	r3, r3, #3
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	3302      	adds	r3, #2
 80175c4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80175c6:	89fb      	ldrh	r3, [r7, #14]
 80175c8:	0a1b      	lsrs	r3, r3, #8
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	b2db      	uxtb	r3, r3
 80175ce:	4619      	mov	r1, r3
 80175d0:	20f4      	movs	r0, #244	@ 0xf4
 80175d2:	f000 f935 	bl	8017840 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80175d6:	89fb      	ldrh	r3, [r7, #14]
 80175d8:	b2db      	uxtb	r3, r3
 80175da:	4619      	mov	r1, r3
 80175dc:	20f5      	movs	r0, #245	@ 0xf5
 80175de:	f000 f92f 	bl	8017840 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80175e2:	78fb      	ldrb	r3, [r7, #3]
 80175e4:	3301      	adds	r3, #1
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80175ec:	4619      	mov	r1, r3
 80175ee:	480b      	ldr	r0, [pc, #44]	@ (801761c <RadioSend+0x1f0>)
 80175f0:	f001 f980 	bl	80188f4 <SUBGRF_SendPayload>
            break;
 80175f4:	e000      	b.n	80175f8 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80175f6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80175f8:	4b05      	ldr	r3, [pc, #20]	@ (8017610 <RadioSend+0x1e4>)
 80175fa:	685b      	ldr	r3, [r3, #4]
 80175fc:	4619      	mov	r1, r3
 80175fe:	4808      	ldr	r0, [pc, #32]	@ (8017620 <RadioSend+0x1f4>)
 8017600:	f003 fa80 	bl	801ab04 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017604:	4806      	ldr	r0, [pc, #24]	@ (8017620 <RadioSend+0x1f4>)
 8017606:	f003 f99f 	bl	801a948 <UTIL_TIMER_Start>
}
 801760a:	3710      	adds	r7, #16
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}
 8017610:	20001a70 	.word	0x20001a70
 8017614:	20001a7e 	.word	0x20001a7e
 8017618:	0801bcc0 	.word	0x0801bcc0
 801761c:	2000196c 	.word	0x2000196c
 8017620:	20001acc 	.word	0x20001acc

08017624 <RadioSleep>:

static void RadioSleep( void )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801762a:	2300      	movs	r3, #0
 801762c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801762e:	793b      	ldrb	r3, [r7, #4]
 8017630:	f043 0304 	orr.w	r3, r3, #4
 8017634:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017636:	7938      	ldrb	r0, [r7, #4]
 8017638:	f001 fa38 	bl	8018aac <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801763c:	2002      	movs	r0, #2
 801763e:	f7ea facb 	bl	8001bd8 <HAL_Delay>
}
 8017642:	bf00      	nop
 8017644:	3708      	adds	r7, #8
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}

0801764a <RadioStandby>:

static void RadioStandby( void )
{
 801764a:	b580      	push	{r7, lr}
 801764c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801764e:	2000      	movs	r0, #0
 8017650:	f001 fa5e 	bl	8018b10 <SUBGRF_SetStandby>
}
 8017654:	bf00      	nop
 8017656:	bd80      	pop	{r7, pc}

08017658 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b082      	sub	sp, #8
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017660:	f002 fab3 	bl	8019bca <RFW_Is_Init>
 8017664:	4603      	mov	r3, r0
 8017666:	2b01      	cmp	r3, #1
 8017668:	d102      	bne.n	8017670 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801766a:	f002 fad6 	bl	8019c1a <RFW_ReceiveInit>
 801766e:	e007      	b.n	8017680 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017670:	2300      	movs	r3, #0
 8017672:	2200      	movs	r2, #0
 8017674:	f240 2162 	movw	r1, #610	@ 0x262
 8017678:	f240 2062 	movw	r0, #610	@ 0x262
 801767c:	f001 fc18 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d006      	beq.n	8017694 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017686:	6879      	ldr	r1, [r7, #4]
 8017688:	4811      	ldr	r0, [pc, #68]	@ (80176d0 <RadioRx+0x78>)
 801768a:	f003 fa3b 	bl	801ab04 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801768e:	4810      	ldr	r0, [pc, #64]	@ (80176d0 <RadioRx+0x78>)
 8017690:	f003 f95a 	bl	801a948 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017694:	4b0f      	ldr	r3, [pc, #60]	@ (80176d4 <RadioRx+0x7c>)
 8017696:	2200      	movs	r2, #0
 8017698:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801769a:	4b0e      	ldr	r3, [pc, #56]	@ (80176d4 <RadioRx+0x7c>)
 801769c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80176a0:	2100      	movs	r1, #0
 80176a2:	4618      	mov	r0, r3
 80176a4:	f002 f8a8 	bl	80197f8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80176a8:	4b0a      	ldr	r3, [pc, #40]	@ (80176d4 <RadioRx+0x7c>)
 80176aa:	785b      	ldrb	r3, [r3, #1]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d004      	beq.n	80176ba <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80176b0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80176b4:	f001 fa68 	bl	8018b88 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80176b8:	e005      	b.n	80176c6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80176ba:	4b06      	ldr	r3, [pc, #24]	@ (80176d4 <RadioRx+0x7c>)
 80176bc:	689b      	ldr	r3, [r3, #8]
 80176be:	019b      	lsls	r3, r3, #6
 80176c0:	4618      	mov	r0, r3
 80176c2:	f001 fa61 	bl	8018b88 <SUBGRF_SetRx>
}
 80176c6:	bf00      	nop
 80176c8:	3708      	adds	r7, #8
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	20001ae4 	.word	0x20001ae4
 80176d4:	20001a70 	.word	0x20001a70

080176d8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80176e0:	f002 fa73 	bl	8019bca <RFW_Is_Init>
 80176e4:	4603      	mov	r3, r0
 80176e6:	2b01      	cmp	r3, #1
 80176e8:	d102      	bne.n	80176f0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80176ea:	f002 fa96 	bl	8019c1a <RFW_ReceiveInit>
 80176ee:	e007      	b.n	8017700 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80176f0:	2300      	movs	r3, #0
 80176f2:	2200      	movs	r2, #0
 80176f4:	f240 2162 	movw	r1, #610	@ 0x262
 80176f8:	f240 2062 	movw	r0, #610	@ 0x262
 80176fc:	f001 fbd8 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d006      	beq.n	8017714 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017706:	6879      	ldr	r1, [r7, #4]
 8017708:	4811      	ldr	r0, [pc, #68]	@ (8017750 <RadioRxBoosted+0x78>)
 801770a:	f003 f9fb 	bl	801ab04 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801770e:	4810      	ldr	r0, [pc, #64]	@ (8017750 <RadioRxBoosted+0x78>)
 8017710:	f003 f91a 	bl	801a948 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017714:	4b0f      	ldr	r3, [pc, #60]	@ (8017754 <RadioRxBoosted+0x7c>)
 8017716:	2200      	movs	r2, #0
 8017718:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801771a:	4b0e      	ldr	r3, [pc, #56]	@ (8017754 <RadioRxBoosted+0x7c>)
 801771c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017720:	2100      	movs	r1, #0
 8017722:	4618      	mov	r0, r3
 8017724:	f002 f868 	bl	80197f8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017728:	4b0a      	ldr	r3, [pc, #40]	@ (8017754 <RadioRxBoosted+0x7c>)
 801772a:	785b      	ldrb	r3, [r3, #1]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d004      	beq.n	801773a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017730:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017734:	f001 fa48 	bl	8018bc8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017738:	e005      	b.n	8017746 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801773a:	4b06      	ldr	r3, [pc, #24]	@ (8017754 <RadioRxBoosted+0x7c>)
 801773c:	689b      	ldr	r3, [r3, #8]
 801773e:	019b      	lsls	r3, r3, #6
 8017740:	4618      	mov	r0, r3
 8017742:	f001 fa41 	bl	8018bc8 <SUBGRF_SetRxBoosted>
}
 8017746:	bf00      	nop
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop
 8017750:	20001ae4 	.word	0x20001ae4
 8017754:	20001a70 	.word	0x20001a70

08017758 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	005a      	lsls	r2, r3, #1
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	4413      	add	r3, r2
 801776a:	4a0c      	ldr	r2, [pc, #48]	@ (801779c <RadioSetRxDutyCycle+0x44>)
 801776c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801776e:	2300      	movs	r3, #0
 8017770:	2200      	movs	r2, #0
 8017772:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017776:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801777a:	f001 fb99 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801777e:	4b07      	ldr	r3, [pc, #28]	@ (801779c <RadioSetRxDutyCycle+0x44>)
 8017780:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017784:	2100      	movs	r1, #0
 8017786:	4618      	mov	r0, r3
 8017788:	f002 f836 	bl	80197f8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801778c:	6839      	ldr	r1, [r7, #0]
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f001 fa3e 	bl	8018c10 <SUBGRF_SetRxDutyCycle>
}
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	20001a70 	.word	0x20001a70

080177a0 <RadioStartCad>:

static void RadioStartCad( void )
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80177a4:	4b09      	ldr	r3, [pc, #36]	@ (80177cc <RadioStartCad+0x2c>)
 80177a6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80177aa:	2100      	movs	r1, #0
 80177ac:	4618      	mov	r0, r3
 80177ae:	f002 f823 	bl	80197f8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80177b2:	2300      	movs	r3, #0
 80177b4:	2200      	movs	r2, #0
 80177b6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80177ba:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80177be:	f001 fb77 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80177c2:	f001 fa51 	bl	8018c68 <SUBGRF_SetCad>
}
 80177c6:	bf00      	nop
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	20001a70 	.word	0x20001a70

080177d0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b084      	sub	sp, #16
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
 80177d8:	460b      	mov	r3, r1
 80177da:	70fb      	strb	r3, [r7, #3]
 80177dc:	4613      	mov	r3, r2
 80177de:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80177e0:	883b      	ldrh	r3, [r7, #0]
 80177e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80177e6:	fb02 f303 	mul.w	r3, r2, r3
 80177ea:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f001 fbbb 	bl	8018f68 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80177f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80177f6:	4618      	mov	r0, r3
 80177f8:	f002 f826 	bl	8019848 <SUBGRF_SetRfTxPower>
 80177fc:	4603      	mov	r3, r0
 80177fe:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017800:	7afb      	ldrb	r3, [r7, #11]
 8017802:	2101      	movs	r1, #1
 8017804:	4618      	mov	r0, r3
 8017806:	f001 fff7 	bl	80197f8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801780a:	f001 fa3b 	bl	8018c84 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801780e:	68f9      	ldr	r1, [r7, #12]
 8017810:	4804      	ldr	r0, [pc, #16]	@ (8017824 <RadioSetTxContinuousWave+0x54>)
 8017812:	f003 f977 	bl	801ab04 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017816:	4803      	ldr	r0, [pc, #12]	@ (8017824 <RadioSetTxContinuousWave+0x54>)
 8017818:	f003 f896 	bl	801a948 <UTIL_TIMER_Start>
}
 801781c:	bf00      	nop
 801781e:	3710      	adds	r7, #16
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	20001acc 	.word	0x20001acc

08017828 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	4603      	mov	r3, r0
 8017830:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017832:	f001 fe5a 	bl	80194ea <SUBGRF_GetRssiInst>
 8017836:	4603      	mov	r3, r0
}
 8017838:	4618      	mov	r0, r3
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	4603      	mov	r3, r0
 8017848:	460a      	mov	r2, r1
 801784a:	80fb      	strh	r3, [r7, #6]
 801784c:	4613      	mov	r3, r2
 801784e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017850:	797a      	ldrb	r2, [r7, #5]
 8017852:	88fb      	ldrh	r3, [r7, #6]
 8017854:	4611      	mov	r1, r2
 8017856:	4618      	mov	r0, r3
 8017858:	f001 feda 	bl	8019610 <SUBGRF_WriteRegister>
}
 801785c:	bf00      	nop
 801785e:	3708      	adds	r7, #8
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}

08017864 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	4603      	mov	r3, r0
 801786c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801786e:	88fb      	ldrh	r3, [r7, #6]
 8017870:	4618      	mov	r0, r3
 8017872:	f001 fee1 	bl	8019638 <SUBGRF_ReadRegister>
 8017876:	4603      	mov	r3, r0
}
 8017878:	4618      	mov	r0, r3
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	4603      	mov	r3, r0
 8017888:	6039      	str	r1, [r7, #0]
 801788a:	80fb      	strh	r3, [r7, #6]
 801788c:	4613      	mov	r3, r2
 801788e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017890:	797b      	ldrb	r3, [r7, #5]
 8017892:	b29a      	uxth	r2, r3
 8017894:	88fb      	ldrh	r3, [r7, #6]
 8017896:	6839      	ldr	r1, [r7, #0]
 8017898:	4618      	mov	r0, r3
 801789a:	f001 fee1 	bl	8019660 <SUBGRF_WriteRegisters>
}
 801789e:	bf00      	nop
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	4603      	mov	r3, r0
 80178ae:	6039      	str	r1, [r7, #0]
 80178b0:	80fb      	strh	r3, [r7, #6]
 80178b2:	4613      	mov	r3, r2
 80178b4:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80178b6:	797b      	ldrb	r3, [r7, #5]
 80178b8:	b29a      	uxth	r2, r3
 80178ba:	88fb      	ldrh	r3, [r7, #6]
 80178bc:	6839      	ldr	r1, [r7, #0]
 80178be:	4618      	mov	r0, r3
 80178c0:	f001 fef0 	bl	80196a4 <SUBGRF_ReadRegisters>
}
 80178c4:	bf00      	nop
 80178c6:	3708      	adds	r7, #8
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	4603      	mov	r3, r0
 80178d4:	460a      	mov	r2, r1
 80178d6:	71fb      	strb	r3, [r7, #7]
 80178d8:	4613      	mov	r3, r2
 80178da:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80178dc:	79fb      	ldrb	r3, [r7, #7]
 80178de:	2b01      	cmp	r3, #1
 80178e0:	d10a      	bne.n	80178f8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80178e2:	4a0e      	ldr	r2, [pc, #56]	@ (801791c <RadioSetMaxPayloadLength+0x50>)
 80178e4:	79bb      	ldrb	r3, [r7, #6]
 80178e6:	7013      	strb	r3, [r2, #0]
 80178e8:	4b0c      	ldr	r3, [pc, #48]	@ (801791c <RadioSetMaxPayloadLength+0x50>)
 80178ea:	781a      	ldrb	r2, [r3, #0]
 80178ec:	4b0c      	ldr	r3, [pc, #48]	@ (8017920 <RadioSetMaxPayloadLength+0x54>)
 80178ee:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178f0:	480c      	ldr	r0, [pc, #48]	@ (8017924 <RadioSetMaxPayloadLength+0x58>)
 80178f2:	f001 fd45 	bl	8019380 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80178f6:	e00d      	b.n	8017914 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80178f8:	4b09      	ldr	r3, [pc, #36]	@ (8017920 <RadioSetMaxPayloadLength+0x54>)
 80178fa:	7d5b      	ldrb	r3, [r3, #21]
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d109      	bne.n	8017914 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017900:	4a06      	ldr	r2, [pc, #24]	@ (801791c <RadioSetMaxPayloadLength+0x50>)
 8017902:	79bb      	ldrb	r3, [r7, #6]
 8017904:	7013      	strb	r3, [r2, #0]
 8017906:	4b05      	ldr	r3, [pc, #20]	@ (801791c <RadioSetMaxPayloadLength+0x50>)
 8017908:	781a      	ldrb	r2, [r3, #0]
 801790a:	4b05      	ldr	r3, [pc, #20]	@ (8017920 <RadioSetMaxPayloadLength+0x54>)
 801790c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801790e:	4805      	ldr	r0, [pc, #20]	@ (8017924 <RadioSetMaxPayloadLength+0x58>)
 8017910:	f001 fd36 	bl	8019380 <SUBGRF_SetPacketParams>
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}
 801791c:	20000144 	.word	0x20000144
 8017920:	20001a70 	.word	0x20001a70
 8017924:	20001a7e 	.word	0x20001a7e

08017928 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	4603      	mov	r3, r0
 8017930:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017932:	4a13      	ldr	r2, [pc, #76]	@ (8017980 <RadioSetPublicNetwork+0x58>)
 8017934:	79fb      	ldrb	r3, [r7, #7]
 8017936:	7313      	strb	r3, [r2, #12]
 8017938:	4b11      	ldr	r3, [pc, #68]	@ (8017980 <RadioSetPublicNetwork+0x58>)
 801793a:	7b1a      	ldrb	r2, [r3, #12]
 801793c:	4b10      	ldr	r3, [pc, #64]	@ (8017980 <RadioSetPublicNetwork+0x58>)
 801793e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017940:	2001      	movs	r0, #1
 8017942:	f7ff f82f 	bl	80169a4 <RadioSetModem>
    if( enable == true )
 8017946:	79fb      	ldrb	r3, [r7, #7]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d00a      	beq.n	8017962 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801794c:	2134      	movs	r1, #52	@ 0x34
 801794e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017952:	f001 fe5d 	bl	8019610 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017956:	2144      	movs	r1, #68	@ 0x44
 8017958:	f240 7041 	movw	r0, #1857	@ 0x741
 801795c:	f001 fe58 	bl	8019610 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017960:	e009      	b.n	8017976 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017962:	2114      	movs	r1, #20
 8017964:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017968:	f001 fe52 	bl	8019610 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801796c:	2124      	movs	r1, #36	@ 0x24
 801796e:	f240 7041 	movw	r0, #1857	@ 0x741
 8017972:	f001 fe4d 	bl	8019610 <SUBGRF_WriteRegister>
}
 8017976:	bf00      	nop
 8017978:	3708      	adds	r7, #8
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	20001a70 	.word	0x20001a70

08017984 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017984:	b580      	push	{r7, lr}
 8017986:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017988:	f001 ff92 	bl	80198b0 <SUBGRF_GetRadioWakeUpTime>
 801798c:	4603      	mov	r3, r0
 801798e:	3303      	adds	r3, #3
}
 8017990:	4618      	mov	r0, r3
 8017992:	bd80      	pop	{r7, pc}

08017994 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801799c:	f000 f80e 	bl	80179bc <RadioOnTxTimeoutProcess>
}
 80179a0:	bf00      	nop
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80179b0:	f000 f818 	bl	80179e4 <RadioOnRxTimeoutProcess>
}
 80179b4:	bf00      	nop
 80179b6:	3708      	adds	r7, #8
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80179c0:	4b07      	ldr	r3, [pc, #28]	@ (80179e0 <RadioOnTxTimeoutProcess+0x24>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d008      	beq.n	80179da <RadioOnTxTimeoutProcess+0x1e>
 80179c8:	4b05      	ldr	r3, [pc, #20]	@ (80179e0 <RadioOnTxTimeoutProcess+0x24>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d003      	beq.n	80179da <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80179d2:	4b03      	ldr	r3, [pc, #12]	@ (80179e0 <RadioOnTxTimeoutProcess+0x24>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	4798      	blx	r3
    }
}
 80179da:	bf00      	nop
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	20001a6c 	.word	0x20001a6c

080179e4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80179e8:	4b07      	ldr	r3, [pc, #28]	@ (8017a08 <RadioOnRxTimeoutProcess+0x24>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d008      	beq.n	8017a02 <RadioOnRxTimeoutProcess+0x1e>
 80179f0:	4b05      	ldr	r3, [pc, #20]	@ (8017a08 <RadioOnRxTimeoutProcess+0x24>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	68db      	ldr	r3, [r3, #12]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d003      	beq.n	8017a02 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80179fa:	4b03      	ldr	r3, [pc, #12]	@ (8017a08 <RadioOnRxTimeoutProcess+0x24>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	4798      	blx	r3
    }
}
 8017a02:	bf00      	nop
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	20001a6c 	.word	0x20001a6c

08017a0c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	4603      	mov	r3, r0
 8017a14:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017a16:	4a05      	ldr	r2, [pc, #20]	@ (8017a2c <RadioOnDioIrq+0x20>)
 8017a18:	88fb      	ldrh	r3, [r7, #6]
 8017a1a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017a1e:	f000 f807 	bl	8017a30 <RadioIrqProcess>
}
 8017a22:	bf00      	nop
 8017a24:	3708      	adds	r7, #8
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	20001a70 	.word	0x20001a70

08017a30 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017a30:	b5b0      	push	{r4, r5, r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017a40:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a48:	f000 810d 	beq.w	8017c66 <RadioIrqProcess+0x236>
 8017a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017a50:	f300 81e8 	bgt.w	8017e24 <RadioIrqProcess+0x3f4>
 8017a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017a58:	f000 80f1 	beq.w	8017c3e <RadioIrqProcess+0x20e>
 8017a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017a60:	f300 81e0 	bgt.w	8017e24 <RadioIrqProcess+0x3f4>
 8017a64:	2b80      	cmp	r3, #128	@ 0x80
 8017a66:	f000 80d6 	beq.w	8017c16 <RadioIrqProcess+0x1e6>
 8017a6a:	2b80      	cmp	r3, #128	@ 0x80
 8017a6c:	f300 81da 	bgt.w	8017e24 <RadioIrqProcess+0x3f4>
 8017a70:	2b20      	cmp	r3, #32
 8017a72:	dc49      	bgt.n	8017b08 <RadioIrqProcess+0xd8>
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	f340 81d5 	ble.w	8017e24 <RadioIrqProcess+0x3f4>
 8017a7a:	3b01      	subs	r3, #1
 8017a7c:	2b1f      	cmp	r3, #31
 8017a7e:	f200 81d1 	bhi.w	8017e24 <RadioIrqProcess+0x3f4>
 8017a82:	a201      	add	r2, pc, #4	@ (adr r2, 8017a88 <RadioIrqProcess+0x58>)
 8017a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a88:	08017b11 	.word	0x08017b11
 8017a8c:	08017b4b 	.word	0x08017b4b
 8017a90:	08017e25 	.word	0x08017e25
 8017a94:	08017d01 	.word	0x08017d01
 8017a98:	08017e25 	.word	0x08017e25
 8017a9c:	08017e25 	.word	0x08017e25
 8017aa0:	08017e25 	.word	0x08017e25
 8017aa4:	08017d7d 	.word	0x08017d7d
 8017aa8:	08017e25 	.word	0x08017e25
 8017aac:	08017e25 	.word	0x08017e25
 8017ab0:	08017e25 	.word	0x08017e25
 8017ab4:	08017e25 	.word	0x08017e25
 8017ab8:	08017e25 	.word	0x08017e25
 8017abc:	08017e25 	.word	0x08017e25
 8017ac0:	08017e25 	.word	0x08017e25
 8017ac4:	08017d99 	.word	0x08017d99
 8017ac8:	08017e25 	.word	0x08017e25
 8017acc:	08017e25 	.word	0x08017e25
 8017ad0:	08017e25 	.word	0x08017e25
 8017ad4:	08017e25 	.word	0x08017e25
 8017ad8:	08017e25 	.word	0x08017e25
 8017adc:	08017e25 	.word	0x08017e25
 8017ae0:	08017e25 	.word	0x08017e25
 8017ae4:	08017e25 	.word	0x08017e25
 8017ae8:	08017e25 	.word	0x08017e25
 8017aec:	08017e25 	.word	0x08017e25
 8017af0:	08017e25 	.word	0x08017e25
 8017af4:	08017e25 	.word	0x08017e25
 8017af8:	08017e25 	.word	0x08017e25
 8017afc:	08017e25 	.word	0x08017e25
 8017b00:	08017e25 	.word	0x08017e25
 8017b04:	08017da7 	.word	0x08017da7
 8017b08:	2b40      	cmp	r3, #64	@ 0x40
 8017b0a:	f000 816d 	beq.w	8017de8 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017b0e:	e189      	b.n	8017e24 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017b10:	4874      	ldr	r0, [pc, #464]	@ (8017ce4 <RadioIrqProcess+0x2b4>)
 8017b12:	f002 ff87 	bl	801aa24 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017b16:	2000      	movs	r0, #0
 8017b18:	f000 fffa 	bl	8018b10 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017b1c:	f002 f85c 	bl	8019bd8 <RFW_Is_LongPacketModeEnabled>
 8017b20:	4603      	mov	r3, r0
 8017b22:	2b01      	cmp	r3, #1
 8017b24:	d101      	bne.n	8017b2a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017b26:	f002 f880 	bl	8019c2a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	f000 817a 	beq.w	8017e28 <RadioIrqProcess+0x3f8>
 8017b34:	4b6c      	ldr	r3, [pc, #432]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 8174 	beq.w	8017e28 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017b40:	4b69      	ldr	r3, [pc, #420]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4798      	blx	r3
        break;
 8017b48:	e16e      	b.n	8017e28 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017b4a:	4868      	ldr	r0, [pc, #416]	@ (8017cec <RadioIrqProcess+0x2bc>)
 8017b4c:	f002 ff6a 	bl	801aa24 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017b50:	4b63      	ldr	r3, [pc, #396]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017b52:	785b      	ldrb	r3, [r3, #1]
 8017b54:	f083 0301 	eor.w	r3, r3, #1
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d014      	beq.n	8017b88 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017b5e:	2000      	movs	r0, #0
 8017b60:	f000 ffd6 	bl	8018b10 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017b64:	2100      	movs	r1, #0
 8017b66:	f640 1002 	movw	r0, #2306	@ 0x902
 8017b6a:	f001 fd51 	bl	8019610 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017b6e:	f640 1044 	movw	r0, #2372	@ 0x944
 8017b72:	f001 fd61 	bl	8019638 <SUBGRF_ReadRegister>
 8017b76:	4603      	mov	r3, r0
 8017b78:	f043 0302 	orr.w	r3, r3, #2
 8017b7c:	b2db      	uxtb	r3, r3
 8017b7e:	4619      	mov	r1, r3
 8017b80:	f640 1044 	movw	r0, #2372	@ 0x944
 8017b84:	f001 fd44 	bl	8019610 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017b88:	1dfb      	adds	r3, r7, #7
 8017b8a:	22ff      	movs	r2, #255	@ 0xff
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	4858      	ldr	r0, [pc, #352]	@ (8017cf0 <RadioIrqProcess+0x2c0>)
 8017b90:	f000 fe8e 	bl	80188b0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017b94:	4857      	ldr	r0, [pc, #348]	@ (8017cf4 <RadioIrqProcess+0x2c4>)
 8017b96:	f001 fce9 	bl	801956c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017b9a:	4b53      	ldr	r3, [pc, #332]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	f000 8144 	beq.w	8017e2c <RadioIrqProcess+0x3fc>
 8017ba4:	4b50      	ldr	r3, [pc, #320]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	689b      	ldr	r3, [r3, #8]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	f000 813e 	beq.w	8017e2c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017bb6:	2b01      	cmp	r3, #1
 8017bb8:	d10e      	bne.n	8017bd8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017bba:	4b4b      	ldr	r3, [pc, #300]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	689c      	ldr	r4, [r3, #8]
 8017bc0:	79fb      	ldrb	r3, [r7, #7]
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	4b46      	ldr	r3, [pc, #280]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017bc6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017bca:	461a      	mov	r2, r3
 8017bcc:	4b44      	ldr	r3, [pc, #272]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017bce:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017bd2:	4847      	ldr	r0, [pc, #284]	@ (8017cf0 <RadioIrqProcess+0x2c0>)
 8017bd4:	47a0      	blx	r4
                break;
 8017bd6:	e01d      	b.n	8017c14 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017bd8:	4b41      	ldr	r3, [pc, #260]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bdc:	463a      	mov	r2, r7
 8017bde:	4611      	mov	r1, r2
 8017be0:	4618      	mov	r0, r3
 8017be2:	f001 ff47 	bl	8019a74 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017be6:	4b40      	ldr	r3, [pc, #256]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	689c      	ldr	r4, [r3, #8]
 8017bec:	79fb      	ldrb	r3, [r7, #7]
 8017bee:	4619      	mov	r1, r3
 8017bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8017ce0 <RadioIrqProcess+0x2b0>)
 8017bf2:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8017cf8 <RadioIrqProcess+0x2c8>)
 8017c00:	fb82 5203 	smull	r5, r2, r2, r3
 8017c04:	1192      	asrs	r2, r2, #6
 8017c06:	17db      	asrs	r3, r3, #31
 8017c08:	1ad3      	subs	r3, r2, r3
 8017c0a:	b25b      	sxtb	r3, r3
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	4838      	ldr	r0, [pc, #224]	@ (8017cf0 <RadioIrqProcess+0x2c0>)
 8017c10:	47a0      	blx	r4
                break;
 8017c12:	bf00      	nop
        break;
 8017c14:	e10a      	b.n	8017e2c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017c16:	2000      	movs	r0, #0
 8017c18:	f000 ff7a 	bl	8018b10 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017c1c:	4b32      	ldr	r3, [pc, #200]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f000 8105 	beq.w	8017e30 <RadioIrqProcess+0x400>
 8017c26:	4b30      	ldr	r3, [pc, #192]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	699b      	ldr	r3, [r3, #24]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	f000 80ff 	beq.w	8017e30 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017c32:	4b2d      	ldr	r3, [pc, #180]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	699b      	ldr	r3, [r3, #24]
 8017c38:	2000      	movs	r0, #0
 8017c3a:	4798      	blx	r3
        break;
 8017c3c:	e0f8      	b.n	8017e30 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017c3e:	2000      	movs	r0, #0
 8017c40:	f000 ff66 	bl	8018b10 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017c44:	4b28      	ldr	r3, [pc, #160]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	f000 80f3 	beq.w	8017e34 <RadioIrqProcess+0x404>
 8017c4e:	4b26      	ldr	r3, [pc, #152]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	699b      	ldr	r3, [r3, #24]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	f000 80ed 	beq.w	8017e34 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017c5a:	4b23      	ldr	r3, [pc, #140]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	699b      	ldr	r3, [r3, #24]
 8017c60:	2001      	movs	r0, #1
 8017c62:	4798      	blx	r3
        break;
 8017c64:	e0e6      	b.n	8017e34 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017c66:	4b25      	ldr	r3, [pc, #148]	@ (8017cfc <RadioIrqProcess+0x2cc>)
 8017c68:	2201      	movs	r2, #1
 8017c6a:	2100      	movs	r1, #0
 8017c6c:	2002      	movs	r0, #2
 8017c6e:	f003 f8e3 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017c72:	f000 fe03 	bl	801887c <SUBGRF_GetOperatingMode>
 8017c76:	4603      	mov	r3, r0
 8017c78:	2b04      	cmp	r3, #4
 8017c7a:	d115      	bne.n	8017ca8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017c7c:	4819      	ldr	r0, [pc, #100]	@ (8017ce4 <RadioIrqProcess+0x2b4>)
 8017c7e:	f002 fed1 	bl	801aa24 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c82:	2000      	movs	r0, #0
 8017c84:	f000 ff44 	bl	8018b10 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c88:	4b17      	ldr	r3, [pc, #92]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	f000 80d3 	beq.w	8017e38 <RadioIrqProcess+0x408>
 8017c92:	4b15      	ldr	r3, [pc, #84]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	685b      	ldr	r3, [r3, #4]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	f000 80cd 	beq.w	8017e38 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017c9e:	4b12      	ldr	r3, [pc, #72]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	4798      	blx	r3
        break;
 8017ca6:	e0c7      	b.n	8017e38 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017ca8:	f000 fde8 	bl	801887c <SUBGRF_GetOperatingMode>
 8017cac:	4603      	mov	r3, r0
 8017cae:	2b05      	cmp	r3, #5
 8017cb0:	f040 80c2 	bne.w	8017e38 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017cb4:	480d      	ldr	r0, [pc, #52]	@ (8017cec <RadioIrqProcess+0x2bc>)
 8017cb6:	f002 feb5 	bl	801aa24 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017cba:	2000      	movs	r0, #0
 8017cbc:	f000 ff28 	bl	8018b10 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017cc0:	4b09      	ldr	r3, [pc, #36]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	f000 80b7 	beq.w	8017e38 <RadioIrqProcess+0x408>
 8017cca:	4b07      	ldr	r3, [pc, #28]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	68db      	ldr	r3, [r3, #12]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	f000 80b1 	beq.w	8017e38 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017cd6:	4b04      	ldr	r3, [pc, #16]	@ (8017ce8 <RadioIrqProcess+0x2b8>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	4798      	blx	r3
        break;
 8017cde:	e0ab      	b.n	8017e38 <RadioIrqProcess+0x408>
 8017ce0:	20001a70 	.word	0x20001a70
 8017ce4:	20001acc 	.word	0x20001acc
 8017ce8:	20001a6c 	.word	0x20001a6c
 8017cec:	20001ae4 	.word	0x20001ae4
 8017cf0:	2000196c 	.word	0x2000196c
 8017cf4:	20001a94 	.word	0x20001a94
 8017cf8:	10624dd3 	.word	0x10624dd3
 8017cfc:	0801bcd8 	.word	0x0801bcd8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017d00:	4b54      	ldr	r3, [pc, #336]	@ (8017e54 <RadioIrqProcess+0x424>)
 8017d02:	2201      	movs	r2, #1
 8017d04:	2100      	movs	r1, #0
 8017d06:	2002      	movs	r0, #2
 8017d08:	f003 f896 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017d0c:	4b52      	ldr	r3, [pc, #328]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	f000 8093 	beq.w	8017e3c <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8017d16:	4a51      	ldr	r2, [pc, #324]	@ (8017e5c <RadioIrqProcess+0x42c>)
 8017d18:	4b4f      	ldr	r3, [pc, #316]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d1c:	0c1b      	lsrs	r3, r3, #16
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	4619      	mov	r1, r3
 8017d22:	f640 1003 	movw	r0, #2307	@ 0x903
 8017d26:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017d28:	4a4c      	ldr	r2, [pc, #304]	@ (8017e5c <RadioIrqProcess+0x42c>)
 8017d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d2e:	0a1b      	lsrs	r3, r3, #8
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	4619      	mov	r1, r3
 8017d34:	f640 1004 	movw	r0, #2308	@ 0x904
 8017d38:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017d3a:	4a48      	ldr	r2, [pc, #288]	@ (8017e5c <RadioIrqProcess+0x42c>)
 8017d3c:	4b46      	ldr	r3, [pc, #280]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	4619      	mov	r1, r3
 8017d44:	f640 1005 	movw	r0, #2309	@ 0x905
 8017d48:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8017d4a:	4c44      	ldr	r4, [pc, #272]	@ (8017e5c <RadioIrqProcess+0x42c>)
 8017d4c:	4b44      	ldr	r3, [pc, #272]	@ (8017e60 <RadioIrqProcess+0x430>)
 8017d4e:	f640 1002 	movw	r0, #2306	@ 0x902
 8017d52:	4798      	blx	r3
 8017d54:	4603      	mov	r3, r0
 8017d56:	f043 0301 	orr.w	r3, r3, #1
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	f640 1002 	movw	r0, #2306	@ 0x902
 8017d62:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8017d64:	4b3c      	ldr	r3, [pc, #240]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017d66:	2200      	movs	r2, #0
 8017d68:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	f240 2162 	movw	r1, #610	@ 0x262
 8017d72:	f240 2062 	movw	r0, #610	@ 0x262
 8017d76:	f001 f89b 	bl	8018eb0 <SUBGRF_SetDioIrqParams>
        break;
 8017d7a:	e05f      	b.n	8017e3c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017d7c:	4b39      	ldr	r3, [pc, #228]	@ (8017e64 <RadioIrqProcess+0x434>)
 8017d7e:	2201      	movs	r2, #1
 8017d80:	2100      	movs	r1, #0
 8017d82:	2002      	movs	r0, #2
 8017d84:	f003 f858 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8017d88:	f001 ff1f 	bl	8019bca <RFW_Is_Init>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	2b01      	cmp	r3, #1
 8017d90:	d156      	bne.n	8017e40 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8017d92:	f001 ff50 	bl	8019c36 <RFW_ReceivePayload>
        break;
 8017d96:	e053      	b.n	8017e40 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017d98:	4b33      	ldr	r3, [pc, #204]	@ (8017e68 <RadioIrqProcess+0x438>)
 8017d9a:	2201      	movs	r2, #1
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	2002      	movs	r0, #2
 8017da0:	f003 f84a 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017da4:	e051      	b.n	8017e4a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8017da6:	4831      	ldr	r0, [pc, #196]	@ (8017e6c <RadioIrqProcess+0x43c>)
 8017da8:	f002 fe3c 	bl	801aa24 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017dac:	4b2a      	ldr	r3, [pc, #168]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017dae:	785b      	ldrb	r3, [r3, #1]
 8017db0:	f083 0301 	eor.w	r3, r3, #1
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d002      	beq.n	8017dc0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8017dba:	2000      	movs	r0, #0
 8017dbc:	f000 fea8 	bl	8018b10 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d03d      	beq.n	8017e44 <RadioIrqProcess+0x414>
 8017dc8:	4b29      	ldr	r3, [pc, #164]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	68db      	ldr	r3, [r3, #12]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d038      	beq.n	8017e44 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8017dd2:	4b27      	ldr	r3, [pc, #156]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	68db      	ldr	r3, [r3, #12]
 8017dd8:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017dda:	4b26      	ldr	r3, [pc, #152]	@ (8017e74 <RadioIrqProcess+0x444>)
 8017ddc:	2201      	movs	r2, #1
 8017dde:	2100      	movs	r1, #0
 8017de0:	2002      	movs	r0, #2
 8017de2:	f003 f829 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017de6:	e02d      	b.n	8017e44 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017de8:	4b23      	ldr	r3, [pc, #140]	@ (8017e78 <RadioIrqProcess+0x448>)
 8017dea:	2201      	movs	r2, #1
 8017dec:	2100      	movs	r1, #0
 8017dee:	2002      	movs	r0, #2
 8017df0:	f003 f822 	bl	801ae38 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017df4:	4b18      	ldr	r3, [pc, #96]	@ (8017e58 <RadioIrqProcess+0x428>)
 8017df6:	785b      	ldrb	r3, [r3, #1]
 8017df8:	f083 0301 	eor.w	r3, r3, #1
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d002      	beq.n	8017e08 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8017e02:	2000      	movs	r0, #0
 8017e04:	f000 fe84 	bl	8018b10 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017e08:	4b19      	ldr	r3, [pc, #100]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d01b      	beq.n	8017e48 <RadioIrqProcess+0x418>
 8017e10:	4b17      	ldr	r3, [pc, #92]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	691b      	ldr	r3, [r3, #16]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d016      	beq.n	8017e48 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8017e1a:	4b15      	ldr	r3, [pc, #84]	@ (8017e70 <RadioIrqProcess+0x440>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	691b      	ldr	r3, [r3, #16]
 8017e20:	4798      	blx	r3
        break;
 8017e22:	e011      	b.n	8017e48 <RadioIrqProcess+0x418>
        break;
 8017e24:	bf00      	nop
 8017e26:	e010      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e28:	bf00      	nop
 8017e2a:	e00e      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e2c:	bf00      	nop
 8017e2e:	e00c      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e30:	bf00      	nop
 8017e32:	e00a      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e34:	bf00      	nop
 8017e36:	e008      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e38:	bf00      	nop
 8017e3a:	e006      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e3c:	bf00      	nop
 8017e3e:	e004      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e40:	bf00      	nop
 8017e42:	e002      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e44:	bf00      	nop
 8017e46:	e000      	b.n	8017e4a <RadioIrqProcess+0x41a>
        break;
 8017e48:	bf00      	nop
    }
}
 8017e4a:	bf00      	nop
 8017e4c:	3708      	adds	r7, #8
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bdb0      	pop	{r4, r5, r7, pc}
 8017e52:	bf00      	nop
 8017e54:	0801bcec 	.word	0x0801bcec
 8017e58:	20001a70 	.word	0x20001a70
 8017e5c:	08017841 	.word	0x08017841
 8017e60:	08017865 	.word	0x08017865
 8017e64:	0801bcf8 	.word	0x0801bcf8
 8017e68:	0801bd04 	.word	0x0801bd04
 8017e6c:	20001ae4 	.word	0x20001ae4
 8017e70:	20001a6c 	.word	0x20001a6c
 8017e74:	0801bd10 	.word	0x0801bd10
 8017e78:	0801bd1c 	.word	0x0801bd1c

08017e7c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017e80:	4b09      	ldr	r3, [pc, #36]	@ (8017ea8 <RadioTxPrbs+0x2c>)
 8017e82:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017e86:	2101      	movs	r1, #1
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f001 fcb5 	bl	80197f8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017e8e:	4b07      	ldr	r3, [pc, #28]	@ (8017eac <RadioTxPrbs+0x30>)
 8017e90:	212d      	movs	r1, #45	@ 0x2d
 8017e92:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017e96:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017e98:	f000 fefd 	bl	8018c96 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017e9c:	4804      	ldr	r0, [pc, #16]	@ (8017eb0 <RadioTxPrbs+0x34>)
 8017e9e:	f000 fe53 	bl	8018b48 <SUBGRF_SetTx>
}
 8017ea2:	bf00      	nop
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	20001a70 	.word	0x20001a70
 8017eac:	08017841 	.word	0x08017841
 8017eb0:	000fffff 	.word	0x000fffff

08017eb4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b084      	sub	sp, #16
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	4603      	mov	r3, r0
 8017ebc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f001 fcc0 	bl	8019848 <SUBGRF_SetRfTxPower>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017ecc:	7bfb      	ldrb	r3, [r7, #15]
 8017ece:	2101      	movs	r1, #1
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f001 fc91 	bl	80197f8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017ed6:	f000 fed5 	bl	8018c84 <SUBGRF_SetTxContinuousWave>
}
 8017eda:	bf00      	nop
 8017edc:	3710      	adds	r7, #16
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd80      	pop	{r7, pc}

08017ee2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017ee2:	b480      	push	{r7}
 8017ee4:	b089      	sub	sp, #36	@ 0x24
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	60f8      	str	r0, [r7, #12]
 8017eea:	60b9      	str	r1, [r7, #8]
 8017eec:	4613      	mov	r3, r2
 8017eee:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8017ef8:	2300      	movs	r3, #0
 8017efa:	61bb      	str	r3, [r7, #24]
 8017efc:	e011      	b.n	8017f22 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	68ba      	ldr	r2, [r7, #8]
 8017f02:	4413      	add	r3, r2
 8017f04:	781a      	ldrb	r2, [r3, #0]
 8017f06:	69bb      	ldr	r3, [r7, #24]
 8017f08:	68b9      	ldr	r1, [r7, #8]
 8017f0a:	440b      	add	r3, r1
 8017f0c:	43d2      	mvns	r2, r2
 8017f0e:	b2d2      	uxtb	r2, r2
 8017f10:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	68fa      	ldr	r2, [r7, #12]
 8017f16:	4413      	add	r3, r2
 8017f18:	2200      	movs	r2, #0
 8017f1a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017f1c:	69bb      	ldr	r3, [r7, #24]
 8017f1e:	3301      	adds	r3, #1
 8017f20:	61bb      	str	r3, [r7, #24]
 8017f22:	79fb      	ldrb	r3, [r7, #7]
 8017f24:	69ba      	ldr	r2, [r7, #24]
 8017f26:	429a      	cmp	r2, r3
 8017f28:	dbe9      	blt.n	8017efe <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	61bb      	str	r3, [r7, #24]
 8017f2e:	e049      	b.n	8017fc4 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017f30:	69bb      	ldr	r3, [r7, #24]
 8017f32:	425a      	negs	r2, r3
 8017f34:	f003 0307 	and.w	r3, r3, #7
 8017f38:	f002 0207 	and.w	r2, r2, #7
 8017f3c:	bf58      	it	pl
 8017f3e:	4253      	negpl	r3, r2
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	f1c3 0307 	rsb	r3, r3, #7
 8017f46:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	da00      	bge.n	8017f50 <payload_integration+0x6e>
 8017f4e:	3307      	adds	r3, #7
 8017f50:	10db      	asrs	r3, r3, #3
 8017f52:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	3301      	adds	r3, #1
 8017f58:	425a      	negs	r2, r3
 8017f5a:	f003 0307 	and.w	r3, r3, #7
 8017f5e:	f002 0207 	and.w	r2, r2, #7
 8017f62:	bf58      	it	pl
 8017f64:	4253      	negpl	r3, r2
 8017f66:	b2db      	uxtb	r3, r3
 8017f68:	f1c3 0307 	rsb	r3, r3, #7
 8017f6c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017f6e:	69bb      	ldr	r3, [r7, #24]
 8017f70:	3301      	adds	r3, #1
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	da00      	bge.n	8017f78 <payload_integration+0x96>
 8017f76:	3307      	adds	r3, #7
 8017f78:	10db      	asrs	r3, r3, #3
 8017f7a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017f7c:	7dbb      	ldrb	r3, [r7, #22]
 8017f7e:	68ba      	ldr	r2, [r7, #8]
 8017f80:	4413      	add	r3, r2
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	461a      	mov	r2, r3
 8017f86:	7dfb      	ldrb	r3, [r7, #23]
 8017f88:	fa42 f303 	asr.w	r3, r2, r3
 8017f8c:	b2db      	uxtb	r3, r3
 8017f8e:	f003 0301 	and.w	r3, r3, #1
 8017f92:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017f94:	7ffa      	ldrb	r2, [r7, #31]
 8017f96:	7cfb      	ldrb	r3, [r7, #19]
 8017f98:	4053      	eors	r3, r2
 8017f9a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017f9c:	7d3b      	ldrb	r3, [r7, #20]
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	b25a      	sxtb	r2, r3
 8017fa6:	7ff9      	ldrb	r1, [r7, #31]
 8017fa8:	7d7b      	ldrb	r3, [r7, #21]
 8017faa:	fa01 f303 	lsl.w	r3, r1, r3
 8017fae:	b25b      	sxtb	r3, r3
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	b259      	sxtb	r1, r3
 8017fb4:	7d3b      	ldrb	r3, [r7, #20]
 8017fb6:	68fa      	ldr	r2, [r7, #12]
 8017fb8:	4413      	add	r3, r2
 8017fba:	b2ca      	uxtb	r2, r1
 8017fbc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8017fbe:	69bb      	ldr	r3, [r7, #24]
 8017fc0:	3301      	adds	r3, #1
 8017fc2:	61bb      	str	r3, [r7, #24]
 8017fc4:	79fb      	ldrb	r3, [r7, #7]
 8017fc6:	00db      	lsls	r3, r3, #3
 8017fc8:	69ba      	ldr	r2, [r7, #24]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	dbb0      	blt.n	8017f30 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017fce:	7ffb      	ldrb	r3, [r7, #31]
 8017fd0:	01db      	lsls	r3, r3, #7
 8017fd2:	b25a      	sxtb	r2, r3
 8017fd4:	7ffb      	ldrb	r3, [r7, #31]
 8017fd6:	019b      	lsls	r3, r3, #6
 8017fd8:	b25b      	sxtb	r3, r3
 8017fda:	4313      	orrs	r3, r2
 8017fdc:	b25b      	sxtb	r3, r3
 8017fde:	7ffa      	ldrb	r2, [r7, #31]
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	d101      	bne.n	8017fe8 <payload_integration+0x106>
 8017fe4:	2220      	movs	r2, #32
 8017fe6:	e000      	b.n	8017fea <payload_integration+0x108>
 8017fe8:	2200      	movs	r2, #0
 8017fea:	4313      	orrs	r3, r2
 8017fec:	b259      	sxtb	r1, r3
 8017fee:	79fb      	ldrb	r3, [r7, #7]
 8017ff0:	68fa      	ldr	r2, [r7, #12]
 8017ff2:	4413      	add	r3, r2
 8017ff4:	b2ca      	uxtb	r2, r1
 8017ff6:	701a      	strb	r2, [r3, #0]
}
 8017ff8:	bf00      	nop
 8017ffa:	3724      	adds	r7, #36	@ 0x24
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bc80      	pop	{r7}
 8018000:	4770      	bx	lr
	...

08018004 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b08c      	sub	sp, #48	@ 0x30
 8018008:	af00      	add	r7, sp, #0
 801800a:	60b9      	str	r1, [r7, #8]
 801800c:	607a      	str	r2, [r7, #4]
 801800e:	603b      	str	r3, [r7, #0]
 8018010:	4603      	mov	r3, r0
 8018012:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018018:	2300      	movs	r3, #0
 801801a:	623b      	str	r3, [r7, #32]
 801801c:	2300      	movs	r3, #0
 801801e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018020:	f001 fdcd 	bl	8019bbe <RFW_DeInit>

    if( rxContinuous != 0 )
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d001      	beq.n	801802e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801802a:	2300      	movs	r3, #0
 801802c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2b00      	cmp	r3, #0
 8018032:	bf14      	ite	ne
 8018034:	2301      	movne	r3, #1
 8018036:	2300      	moveq	r3, #0
 8018038:	b2da      	uxtb	r2, r3
 801803a:	4ba3      	ldr	r3, [pc, #652]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801803c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d003      	beq.n	801804c <RadioSetRxGenericConfig+0x48>
 8018044:	2b01      	cmp	r3, #1
 8018046:	f000 80dc 	beq.w	8018202 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801804a:	e194      	b.n	8018376 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	689b      	ldr	r3, [r3, #8]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d003      	beq.n	801805c <RadioSetRxGenericConfig+0x58>
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d102      	bne.n	8018062 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801805c:	f04f 33ff 	mov.w	r3, #4294967295
 8018060:	e18a      	b.n	8018378 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	7f9b      	ldrb	r3, [r3, #30]
 8018066:	2b08      	cmp	r3, #8
 8018068:	d902      	bls.n	8018070 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801806a:	f04f 33ff 	mov.w	r3, #4294967295
 801806e:	e183      	b.n	8018378 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	6919      	ldr	r1, [r3, #16]
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	7f9b      	ldrb	r3, [r3, #30]
 8018078:	461a      	mov	r2, r3
 801807a:	f107 0320 	add.w	r3, r7, #32
 801807e:	4618      	mov	r0, r3
 8018080:	f001 fe90 	bl	8019da4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	bf14      	ite	ne
 801808c:	2301      	movne	r3, #1
 801808e:	2300      	moveq	r3, #0
 8018090:	b2db      	uxtb	r3, r3
 8018092:	4618      	mov	r0, r3
 8018094:	f000 fe08 	bl	8018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018098:	4b8b      	ldr	r3, [pc, #556]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801809a:	2200      	movs	r2, #0
 801809c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	689b      	ldr	r3, [r3, #8]
 80180a4:	4a88      	ldr	r2, [pc, #544]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80180ae:	4b86      	ldr	r3, [pc, #536]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	4618      	mov	r0, r3
 80180ba:	f001 fcb3 	bl	8019a24 <SUBGRF_GetFskBandwidthRegValue>
 80180be:	4603      	mov	r3, r0
 80180c0:	461a      	mov	r2, r3
 80180c2:	4b81      	ldr	r3, [pc, #516]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80180c8:	4b7f      	ldr	r3, [pc, #508]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180ca:	2200      	movs	r2, #0
 80180cc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80180ce:	68bb      	ldr	r3, [r7, #8]
 80180d0:	68db      	ldr	r3, [r3, #12]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	00db      	lsls	r3, r3, #3
 80180d6:	b29a      	uxth	r2, r3
 80180d8:	4b7b      	ldr	r3, [pc, #492]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180da:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	7fda      	ldrb	r2, [r3, #31]
 80180e0:	4b79      	ldr	r3, [pc, #484]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180e2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	7f9b      	ldrb	r3, [r3, #30]
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	b2da      	uxtb	r2, r3
 80180ec:	4b76      	ldr	r3, [pc, #472]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180ee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80180f6:	4b74      	ldr	r3, [pc, #464]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80180f8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018100:	2b00      	cmp	r3, #0
 8018102:	d105      	bne.n	8018110 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	695b      	ldr	r3, [r3, #20]
 8018108:	b2da      	uxtb	r2, r3
 801810a:	4b6f      	ldr	r3, [pc, #444]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801810c:	759a      	strb	r2, [r3, #22]
 801810e:	e00b      	b.n	8018128 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018116:	2b02      	cmp	r3, #2
 8018118:	d103      	bne.n	8018122 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801811a:	4b6b      	ldr	r3, [pc, #428]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801811c:	22ff      	movs	r2, #255	@ 0xff
 801811e:	759a      	strb	r2, [r3, #22]
 8018120:	e002      	b.n	8018128 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018122:	4b69      	ldr	r3, [pc, #420]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018124:	22ff      	movs	r2, #255	@ 0xff
 8018126:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801812e:	2b02      	cmp	r3, #2
 8018130:	d004      	beq.n	801813c <RadioSetRxGenericConfig+0x138>
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018138:	2b02      	cmp	r3, #2
 801813a:	d12d      	bne.n	8018198 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018142:	2bf1      	cmp	r3, #241	@ 0xf1
 8018144:	d00c      	beq.n	8018160 <RadioSetRxGenericConfig+0x15c>
 8018146:	68bb      	ldr	r3, [r7, #8]
 8018148:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801814c:	2bf2      	cmp	r3, #242	@ 0xf2
 801814e:	d007      	beq.n	8018160 <RadioSetRxGenericConfig+0x15c>
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018156:	2b01      	cmp	r3, #1
 8018158:	d002      	beq.n	8018160 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801815a:	f04f 33ff 	mov.w	r3, #4294967295
 801815e:	e10b      	b.n	8018378 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8018160:	2300      	movs	r3, #0
 8018162:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018168:	4b58      	ldr	r3, [pc, #352]	@ (80182cc <RadioSetRxGenericConfig+0x2c8>)
 801816a:	6819      	ldr	r1, [r3, #0]
 801816c:	f107 0314 	add.w	r3, r7, #20
 8018170:	4a57      	ldr	r2, [pc, #348]	@ (80182d0 <RadioSetRxGenericConfig+0x2cc>)
 8018172:	4618      	mov	r0, r3
 8018174:	f001 fd16 	bl	8019ba4 <RFW_Init>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d002      	beq.n	8018184 <RadioSetRxGenericConfig+0x180>
            return -1;
 801817e:	f04f 33ff 	mov.w	r3, #4294967295
 8018182:	e0f9      	b.n	8018378 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018184:	4b50      	ldr	r3, [pc, #320]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018186:	2200      	movs	r2, #0
 8018188:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801818a:	4b4f      	ldr	r3, [pc, #316]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801818c:	2201      	movs	r2, #1
 801818e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018190:	4b4d      	ldr	r3, [pc, #308]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018192:	2200      	movs	r2, #0
 8018194:	755a      	strb	r2, [r3, #21]
        {
 8018196:	e00e      	b.n	80181b6 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801819e:	4b4a      	ldr	r3, [pc, #296]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80181a0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80181a8:	4b47      	ldr	r3, [pc, #284]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80181aa:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80181b2:	4b45      	ldr	r3, [pc, #276]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80181b4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80181b6:	f7ff fa48 	bl	801764a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80181ba:	2000      	movs	r0, #0
 80181bc:	f7fe fbf2 	bl	80169a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181c0:	4844      	ldr	r0, [pc, #272]	@ (80182d4 <RadioSetRxGenericConfig+0x2d0>)
 80181c2:	f001 f80b 	bl	80191dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181c6:	4844      	ldr	r0, [pc, #272]	@ (80182d8 <RadioSetRxGenericConfig+0x2d4>)
 80181c8:	f001 f8da 	bl	8019380 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80181cc:	f107 0320 	add.w	r3, r7, #32
 80181d0:	4618      	mov	r0, r3
 80181d2:	f000 fba2 	bl	801891a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	8b9b      	ldrh	r3, [r3, #28]
 80181da:	4618      	mov	r0, r3
 80181dc:	f000 fbec 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	8b1b      	ldrh	r3, [r3, #24]
 80181e4:	4618      	mov	r0, r3
 80181e6:	f000 fbc7 	bl	8018978 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80181f0:	fb03 f202 	mul.w	r2, r3, r2
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	689b      	ldr	r3, [r3, #8]
 80181f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80181fc:	4a32      	ldr	r2, [pc, #200]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80181fe:	6093      	str	r3, [r2, #8]
        break;
 8018200:	e0b9      	b.n	8018376 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018206:	2b00      	cmp	r3, #0
 8018208:	d102      	bne.n	8018210 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801820a:	f04f 33ff 	mov.w	r3, #4294967295
 801820e:	e0b3      	b.n	8018378 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018216:	2b01      	cmp	r3, #1
 8018218:	d104      	bne.n	8018224 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	695b      	ldr	r3, [r3, #20]
 801821e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018222:	e002      	b.n	801822a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8018224:	23ff      	movs	r3, #255	@ 0xff
 8018226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801822e:	2b00      	cmp	r3, #0
 8018230:	bf14      	ite	ne
 8018232:	2301      	movne	r3, #1
 8018234:	2300      	moveq	r3, #0
 8018236:	b2db      	uxtb	r3, r3
 8018238:	4618      	mov	r0, r3
 801823a:	f000 fd35 	bl	8018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	b2db      	uxtb	r3, r3
 8018242:	4618      	mov	r0, r3
 8018244:	f000 fd3f 	bl	8018cc6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018248:	4b1f      	ldr	r3, [pc, #124]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801824a:	2201      	movs	r2, #1
 801824c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018256:	4b1c      	ldr	r3, [pc, #112]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018262:	4b19      	ldr	r3, [pc, #100]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801826e:	4b16      	ldr	r3, [pc, #88]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018270:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801827a:	2b02      	cmp	r3, #2
 801827c:	d010      	beq.n	80182a0 <RadioSetRxGenericConfig+0x29c>
 801827e:	2b02      	cmp	r3, #2
 8018280:	dc2c      	bgt.n	80182dc <RadioSetRxGenericConfig+0x2d8>
 8018282:	2b00      	cmp	r3, #0
 8018284:	d002      	beq.n	801828c <RadioSetRxGenericConfig+0x288>
 8018286:	2b01      	cmp	r3, #1
 8018288:	d005      	beq.n	8018296 <RadioSetRxGenericConfig+0x292>
            break;
 801828a:	e027      	b.n	80182dc <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801828c:	4b0e      	ldr	r3, [pc, #56]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 801828e:	2200      	movs	r2, #0
 8018290:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018294:	e023      	b.n	80182de <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018296:	4b0c      	ldr	r3, [pc, #48]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 8018298:	2201      	movs	r2, #1
 801829a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801829e:	e01e      	b.n	80182de <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80182a6:	2b0b      	cmp	r3, #11
 80182a8:	d004      	beq.n	80182b4 <RadioSetRxGenericConfig+0x2b0>
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80182b0:	2b0c      	cmp	r3, #12
 80182b2:	d104      	bne.n	80182be <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80182b4:	4b04      	ldr	r3, [pc, #16]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80182b6:	2201      	movs	r2, #1
 80182b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80182bc:	e00f      	b.n	80182de <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80182be:	4b02      	ldr	r3, [pc, #8]	@ (80182c8 <RadioSetRxGenericConfig+0x2c4>)
 80182c0:	2200      	movs	r2, #0
 80182c2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80182c6:	e00a      	b.n	80182de <RadioSetRxGenericConfig+0x2da>
 80182c8:	20001a70 	.word	0x20001a70
 80182cc:	20001a6c 	.word	0x20001a6c
 80182d0:	20001ae4 	.word	0x20001ae4
 80182d4:	20001aa8 	.word	0x20001aa8
 80182d8:	20001a7e 	.word	0x20001a7e
            break;
 80182dc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80182de:	4b28      	ldr	r3, [pc, #160]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 80182e0:	2201      	movs	r2, #1
 80182e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80182e8:	4b25      	ldr	r3, [pc, #148]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 80182ea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80182f2:	4b23      	ldr	r3, [pc, #140]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 80182f4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80182f6:	4a22      	ldr	r2, [pc, #136]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 80182f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80182fc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018304:	4b1e      	ldr	r3, [pc, #120]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 8018306:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018310:	4b1b      	ldr	r3, [pc, #108]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 8018312:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018316:	f7ff f998 	bl	801764a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801831a:	2001      	movs	r0, #1
 801831c:	f7fe fb42 	bl	80169a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018320:	4818      	ldr	r0, [pc, #96]	@ (8018384 <RadioSetRxGenericConfig+0x380>)
 8018322:	f000 ff5b 	bl	80191dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018326:	4818      	ldr	r0, [pc, #96]	@ (8018388 <RadioSetRxGenericConfig+0x384>)
 8018328:	f001 f82a 	bl	8019380 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801832c:	4b14      	ldr	r3, [pc, #80]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 801832e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018332:	2b01      	cmp	r3, #1
 8018334:	d10d      	bne.n	8018352 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018336:	f240 7036 	movw	r0, #1846	@ 0x736
 801833a:	f001 f97d 	bl	8019638 <SUBGRF_ReadRegister>
 801833e:	4603      	mov	r3, r0
 8018340:	f023 0304 	bic.w	r3, r3, #4
 8018344:	b2db      	uxtb	r3, r3
 8018346:	4619      	mov	r1, r3
 8018348:	f240 7036 	movw	r0, #1846	@ 0x736
 801834c:	f001 f960 	bl	8019610 <SUBGRF_WriteRegister>
 8018350:	e00c      	b.n	801836c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018352:	f240 7036 	movw	r0, #1846	@ 0x736
 8018356:	f001 f96f 	bl	8019638 <SUBGRF_ReadRegister>
 801835a:	4603      	mov	r3, r0
 801835c:	f043 0304 	orr.w	r3, r3, #4
 8018360:	b2db      	uxtb	r3, r3
 8018362:	4619      	mov	r1, r3
 8018364:	f240 7036 	movw	r0, #1846	@ 0x736
 8018368:	f001 f952 	bl	8019610 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801836c:	4b04      	ldr	r3, [pc, #16]	@ (8018380 <RadioSetRxGenericConfig+0x37c>)
 801836e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018372:	609a      	str	r2, [r3, #8]
        break;
 8018374:	bf00      	nop
    }
    return status;
 8018376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018378:	4618      	mov	r0, r3
 801837a:	3730      	adds	r7, #48	@ 0x30
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	20001a70 	.word	0x20001a70
 8018384:	20001aa8 	.word	0x20001aa8
 8018388:	20001a7e 	.word	0x20001a7e

0801838c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08e      	sub	sp, #56	@ 0x38
 8018390:	af00      	add	r7, sp, #0
 8018392:	60b9      	str	r1, [r7, #8]
 8018394:	607b      	str	r3, [r7, #4]
 8018396:	4603      	mov	r3, r0
 8018398:	73fb      	strb	r3, [r7, #15]
 801839a:	4613      	mov	r3, r2
 801839c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801839e:	2300      	movs	r3, #0
 80183a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80183a2:	2300      	movs	r3, #0
 80183a4:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80183a6:	f001 fc0a 	bl	8019bbe <RFW_DeInit>
    switch( modem )
 80183aa:	7bfb      	ldrb	r3, [r7, #15]
 80183ac:	2b03      	cmp	r3, #3
 80183ae:	f200 8204 	bhi.w	80187ba <RadioSetTxGenericConfig+0x42e>
 80183b2:	a201      	add	r2, pc, #4	@ (adr r2, 80183b8 <RadioSetTxGenericConfig+0x2c>)
 80183b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183b8:	0801853d 	.word	0x0801853d
 80183bc:	08018685 	.word	0x08018685
 80183c0:	0801877d 	.word	0x0801877d
 80183c4:	080183c9 	.word	0x080183c9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	7c9b      	ldrb	r3, [r3, #18]
 80183cc:	2b08      	cmp	r3, #8
 80183ce:	d902      	bls.n	80183d6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80183d0:	f04f 33ff 	mov.w	r3, #4294967295
 80183d4:	e206      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	6899      	ldr	r1, [r3, #8]
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	7c9b      	ldrb	r3, [r3, #18]
 80183de:	461a      	mov	r2, r3
 80183e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80183e4:	4618      	mov	r0, r3
 80183e6:	f001 fcdd 	bl	8019da4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d102      	bne.n	80183f8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80183f2:	f04f 33ff 	mov.w	r3, #4294967295
 80183f6:	e1f5      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018400:	4293      	cmp	r3, r2
 8018402:	d813      	bhi.n	801842c <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8018404:	2302      	movs	r3, #2
 8018406:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801840a:	4b99      	ldr	r3, [pc, #612]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801840c:	2203      	movs	r2, #3
 801840e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018410:	4b97      	ldr	r3, [pc, #604]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018412:	2203      	movs	r2, #3
 8018414:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	4a94      	ldr	r2, [pc, #592]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801841e:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	7cda      	ldrb	r2, [r3, #19]
 8018424:	4b92      	ldr	r3, [pc, #584]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801842a:	e017      	b.n	801845c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801842c:	2300      	movs	r3, #0
 801842e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018432:	4b8f      	ldr	r3, [pc, #572]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018434:	2200      	movs	r2, #0
 8018436:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018438:	4b8d      	ldr	r3, [pc, #564]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801843a:	2200      	movs	r2, #0
 801843c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4a8a      	ldr	r2, [pc, #552]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018446:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	7cda      	ldrb	r2, [r3, #19]
 801844c:	4b88      	ldr	r3, [pc, #544]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801844e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	089b      	lsrs	r3, r3, #2
 8018458:	4a85      	ldr	r2, [pc, #532]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801845a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	b29b      	uxth	r3, r3
 8018462:	00db      	lsls	r3, r3, #3
 8018464:	b29a      	uxth	r2, r3
 8018466:	4b82      	ldr	r3, [pc, #520]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018468:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801846a:	4b81      	ldr	r3, [pc, #516]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801846c:	2204      	movs	r2, #4
 801846e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	7c9b      	ldrb	r3, [r3, #18]
 8018474:	00db      	lsls	r3, r3, #3
 8018476:	b2da      	uxtb	r2, r3
 8018478:	4b7d      	ldr	r3, [pc, #500]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801847a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801847c:	4b7c      	ldr	r3, [pc, #496]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801847e:	2200      	movs	r2, #0
 8018480:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	7d9b      	ldrb	r3, [r3, #22]
 8018486:	2b02      	cmp	r3, #2
 8018488:	d003      	beq.n	8018492 <RadioSetTxGenericConfig+0x106>
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	7d1b      	ldrb	r3, [r3, #20]
 801848e:	2b02      	cmp	r3, #2
 8018490:	d12b      	bne.n	80184ea <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	7d5b      	ldrb	r3, [r3, #21]
 8018496:	2bf1      	cmp	r3, #241	@ 0xf1
 8018498:	d00a      	beq.n	80184b0 <RadioSetTxGenericConfig+0x124>
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	7d5b      	ldrb	r3, [r3, #21]
 801849e:	2bf2      	cmp	r3, #242	@ 0xf2
 80184a0:	d006      	beq.n	80184b0 <RadioSetTxGenericConfig+0x124>
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	7d5b      	ldrb	r3, [r3, #21]
 80184a6:	2b01      	cmp	r3, #1
 80184a8:	d002      	beq.n	80184b0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80184aa:	f04f 33ff 	mov.w	r3, #4294967295
 80184ae:	e199      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80184b4:	2301      	movs	r3, #1
 80184b6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80184ba:	4b6e      	ldr	r3, [pc, #440]	@ (8018674 <RadioSetTxGenericConfig+0x2e8>)
 80184bc:	6819      	ldr	r1, [r3, #0]
 80184be:	f107 0320 	add.w	r3, r7, #32
 80184c2:	4a6d      	ldr	r2, [pc, #436]	@ (8018678 <RadioSetTxGenericConfig+0x2ec>)
 80184c4:	4618      	mov	r0, r3
 80184c6:	f001 fb6d 	bl	8019ba4 <RFW_Init>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d002      	beq.n	80184d6 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80184d0:	f04f 33ff 	mov.w	r3, #4294967295
 80184d4:	e186      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80184d6:	4b66      	ldr	r3, [pc, #408]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80184d8:	2200      	movs	r2, #0
 80184da:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80184dc:	4b64      	ldr	r3, [pc, #400]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80184de:	2201      	movs	r2, #1
 80184e0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80184e2:	4b63      	ldr	r3, [pc, #396]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80184e4:	2200      	movs	r2, #0
 80184e6:	755a      	strb	r2, [r3, #21]
        {
 80184e8:	e00b      	b.n	8018502 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	7d5a      	ldrb	r2, [r3, #21]
 80184ee:	4b60      	ldr	r3, [pc, #384]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80184f0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	7d9a      	ldrb	r2, [r3, #22]
 80184f6:	4b5e      	ldr	r3, [pc, #376]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80184f8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	7d1a      	ldrb	r2, [r3, #20]
 80184fe:	4b5c      	ldr	r3, [pc, #368]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018500:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018502:	f7ff f8a2 	bl	801764a <RadioStandby>
        RadioSetModem( radio_modem );
 8018506:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801850a:	4618      	mov	r0, r3
 801850c:	f7fe fa4a 	bl	80169a4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018510:	485a      	ldr	r0, [pc, #360]	@ (801867c <RadioSetTxGenericConfig+0x2f0>)
 8018512:	f000 fe63 	bl	80191dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018516:	485a      	ldr	r0, [pc, #360]	@ (8018680 <RadioSetTxGenericConfig+0x2f4>)
 8018518:	f000 ff32 	bl	8019380 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801851c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018520:	4618      	mov	r0, r3
 8018522:	f000 f9fa 	bl	801891a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	8a1b      	ldrh	r3, [r3, #16]
 801852a:	4618      	mov	r0, r3
 801852c:	f000 fa44 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	899b      	ldrh	r3, [r3, #12]
 8018534:	4618      	mov	r0, r3
 8018536:	f000 fa1f 	bl	8018978 <SUBGRF_SetCrcPolynomial>
        break;
 801853a:	e13f      	b.n	80187bc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d102      	bne.n	801854a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018544:	f04f 33ff 	mov.w	r3, #4294967295
 8018548:	e14c      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	7c9b      	ldrb	r3, [r3, #18]
 801854e:	2b08      	cmp	r3, #8
 8018550:	d902      	bls.n	8018558 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018552:	f04f 33ff 	mov.w	r3, #4294967295
 8018556:	e145      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	6899      	ldr	r1, [r3, #8]
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	7c9b      	ldrb	r3, [r3, #18]
 8018560:	461a      	mov	r2, r3
 8018562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018566:	4618      	mov	r0, r3
 8018568:	f001 fc1c 	bl	8019da4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801856c:	4b40      	ldr	r3, [pc, #256]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801856e:	2200      	movs	r2, #0
 8018570:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	4a3d      	ldr	r2, [pc, #244]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801857a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	7cda      	ldrb	r2, [r3, #19]
 8018580:	4b3b      	ldr	r3, [pc, #236]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	699b      	ldr	r3, [r3, #24]
 801858a:	4a39      	ldr	r2, [pc, #228]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801858c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801858e:	4b38      	ldr	r3, [pc, #224]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018590:	2200      	movs	r2, #0
 8018592:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	b29b      	uxth	r3, r3
 801859a:	00db      	lsls	r3, r3, #3
 801859c:	b29a      	uxth	r2, r3
 801859e:	4b34      	ldr	r3, [pc, #208]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80185a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80185a2:	4b33      	ldr	r3, [pc, #204]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80185a4:	2204      	movs	r2, #4
 80185a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	7c9b      	ldrb	r3, [r3, #18]
 80185ac:	00db      	lsls	r3, r3, #3
 80185ae:	b2da      	uxtb	r2, r3
 80185b0:	4b2f      	ldr	r3, [pc, #188]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80185b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80185b4:	4b2e      	ldr	r3, [pc, #184]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 80185b6:	2200      	movs	r2, #0
 80185b8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	7d9b      	ldrb	r3, [r3, #22]
 80185be:	2b02      	cmp	r3, #2
 80185c0:	d003      	beq.n	80185ca <RadioSetTxGenericConfig+0x23e>
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	7d1b      	ldrb	r3, [r3, #20]
 80185c6:	2b02      	cmp	r3, #2
 80185c8:	d12a      	bne.n	8018620 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	7d5b      	ldrb	r3, [r3, #21]
 80185ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80185d0:	d00a      	beq.n	80185e8 <RadioSetTxGenericConfig+0x25c>
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	7d5b      	ldrb	r3, [r3, #21]
 80185d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80185d8:	d006      	beq.n	80185e8 <RadioSetTxGenericConfig+0x25c>
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	7d5b      	ldrb	r3, [r3, #21]
 80185de:	2b01      	cmp	r3, #1
 80185e0:	d002      	beq.n	80185e8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80185e2:	f04f 33ff 	mov.w	r3, #4294967295
 80185e6:	e0fd      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80185e8:	2301      	movs	r3, #1
 80185ea:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80185f0:	4b20      	ldr	r3, [pc, #128]	@ (8018674 <RadioSetTxGenericConfig+0x2e8>)
 80185f2:	6819      	ldr	r1, [r3, #0]
 80185f4:	f107 0314 	add.w	r3, r7, #20
 80185f8:	4a1f      	ldr	r2, [pc, #124]	@ (8018678 <RadioSetTxGenericConfig+0x2ec>)
 80185fa:	4618      	mov	r0, r3
 80185fc:	f001 fad2 	bl	8019ba4 <RFW_Init>
 8018600:	4603      	mov	r3, r0
 8018602:	2b00      	cmp	r3, #0
 8018604:	d002      	beq.n	801860c <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8018606:	f04f 33ff 	mov.w	r3, #4294967295
 801860a:	e0eb      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801860c:	4b18      	ldr	r3, [pc, #96]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801860e:	2200      	movs	r2, #0
 8018610:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018612:	4b17      	ldr	r3, [pc, #92]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018614:	2201      	movs	r2, #1
 8018616:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018618:	4b15      	ldr	r3, [pc, #84]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801861a:	2200      	movs	r2, #0
 801861c:	755a      	strb	r2, [r3, #21]
        {
 801861e:	e00b      	b.n	8018638 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	7d5a      	ldrb	r2, [r3, #21]
 8018624:	4b12      	ldr	r3, [pc, #72]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018626:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	7d9a      	ldrb	r2, [r3, #22]
 801862c:	4b10      	ldr	r3, [pc, #64]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 801862e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	7d1a      	ldrb	r2, [r3, #20]
 8018634:	4b0e      	ldr	r3, [pc, #56]	@ (8018670 <RadioSetTxGenericConfig+0x2e4>)
 8018636:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018638:	f7ff f807 	bl	801764a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801863c:	2000      	movs	r0, #0
 801863e:	f7fe f9b1 	bl	80169a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018642:	480e      	ldr	r0, [pc, #56]	@ (801867c <RadioSetTxGenericConfig+0x2f0>)
 8018644:	f000 fdca 	bl	80191dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018648:	480d      	ldr	r0, [pc, #52]	@ (8018680 <RadioSetTxGenericConfig+0x2f4>)
 801864a:	f000 fe99 	bl	8019380 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801864e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018652:	4618      	mov	r0, r3
 8018654:	f000 f961 	bl	801891a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	8a1b      	ldrh	r3, [r3, #16]
 801865c:	4618      	mov	r0, r3
 801865e:	f000 f9ab 	bl	80189b8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	899b      	ldrh	r3, [r3, #12]
 8018666:	4618      	mov	r0, r3
 8018668:	f000 f986 	bl	8018978 <SUBGRF_SetCrcPolynomial>
        break;
 801866c:	e0a6      	b.n	80187bc <RadioSetTxGenericConfig+0x430>
 801866e:	bf00      	nop
 8018670:	20001a70 	.word	0x20001a70
 8018674:	20001a6c 	.word	0x20001a6c
 8018678:	20001acc 	.word	0x20001acc
 801867c:	20001aa8 	.word	0x20001aa8
 8018680:	20001a7e 	.word	0x20001a7e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018684:	4b59      	ldr	r3, [pc, #356]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 8018686:	2201      	movs	r2, #1
 8018688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	781a      	ldrb	r2, [r3, #0]
 8018690:	4b56      	ldr	r3, [pc, #344]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 8018692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	785a      	ldrb	r2, [r3, #1]
 801869a:	4b54      	ldr	r3, [pc, #336]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 801869c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	789a      	ldrb	r2, [r3, #2]
 80186a4:	4b51      	ldr	r3, [pc, #324]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	78db      	ldrb	r3, [r3, #3]
 80186ae:	2b02      	cmp	r3, #2
 80186b0:	d010      	beq.n	80186d4 <RadioSetTxGenericConfig+0x348>
 80186b2:	2b02      	cmp	r3, #2
 80186b4:	dc20      	bgt.n	80186f8 <RadioSetTxGenericConfig+0x36c>
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d002      	beq.n	80186c0 <RadioSetTxGenericConfig+0x334>
 80186ba:	2b01      	cmp	r3, #1
 80186bc:	d005      	beq.n	80186ca <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 80186be:	e01b      	b.n	80186f8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80186c0:	4b4a      	ldr	r3, [pc, #296]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186c2:	2200      	movs	r2, #0
 80186c4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80186c8:	e017      	b.n	80186fa <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80186ca:	4b48      	ldr	r3, [pc, #288]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186cc:	2201      	movs	r2, #1
 80186ce:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80186d2:	e012      	b.n	80186fa <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	2b0b      	cmp	r3, #11
 80186da:	d003      	beq.n	80186e4 <RadioSetTxGenericConfig+0x358>
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	2b0c      	cmp	r3, #12
 80186e2:	d104      	bne.n	80186ee <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80186e4:	4b41      	ldr	r3, [pc, #260]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186e6:	2201      	movs	r2, #1
 80186e8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80186ec:	e005      	b.n	80186fa <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80186ee:	4b3f      	ldr	r3, [pc, #252]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186f0:	2200      	movs	r2, #0
 80186f2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80186f6:	e000      	b.n	80186fa <RadioSetTxGenericConfig+0x36e>
            break;
 80186f8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80186fa:	4b3c      	ldr	r3, [pc, #240]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80186fc:	2201      	movs	r2, #1
 80186fe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	889a      	ldrh	r2, [r3, #4]
 8018704:	4b39      	ldr	r3, [pc, #228]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 8018706:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	799a      	ldrb	r2, [r3, #6]
 801870c:	4b37      	ldr	r3, [pc, #220]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 801870e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	79da      	ldrb	r2, [r3, #7]
 8018714:	4b35      	ldr	r3, [pc, #212]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 8018716:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	7a1a      	ldrb	r2, [r3, #8]
 801871e:	4b33      	ldr	r3, [pc, #204]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 8018720:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8018724:	f7fe ff91 	bl	801764a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018728:	2001      	movs	r0, #1
 801872a:	f7fe f93b 	bl	80169a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801872e:	4830      	ldr	r0, [pc, #192]	@ (80187f0 <RadioSetTxGenericConfig+0x464>)
 8018730:	f000 fd54 	bl	80191dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018734:	482f      	ldr	r0, [pc, #188]	@ (80187f4 <RadioSetTxGenericConfig+0x468>)
 8018736:	f000 fe23 	bl	8019380 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801873a:	4b2c      	ldr	r3, [pc, #176]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 801873c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018740:	2b06      	cmp	r3, #6
 8018742:	d10d      	bne.n	8018760 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018744:	f640 0089 	movw	r0, #2185	@ 0x889
 8018748:	f000 ff76 	bl	8019638 <SUBGRF_ReadRegister>
 801874c:	4603      	mov	r3, r0
 801874e:	f023 0304 	bic.w	r3, r3, #4
 8018752:	b2db      	uxtb	r3, r3
 8018754:	4619      	mov	r1, r3
 8018756:	f640 0089 	movw	r0, #2185	@ 0x889
 801875a:	f000 ff59 	bl	8019610 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801875e:	e02d      	b.n	80187bc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018760:	f640 0089 	movw	r0, #2185	@ 0x889
 8018764:	f000 ff68 	bl	8019638 <SUBGRF_ReadRegister>
 8018768:	4603      	mov	r3, r0
 801876a:	f043 0304 	orr.w	r3, r3, #4
 801876e:	b2db      	uxtb	r3, r3
 8018770:	4619      	mov	r1, r3
 8018772:	f640 0089 	movw	r0, #2185	@ 0x889
 8018776:	f000 ff4b 	bl	8019610 <SUBGRF_WriteRegister>
        break;
 801877a:	e01f      	b.n	80187bc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801877c:	68bb      	ldr	r3, [r7, #8]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d004      	beq.n	801878e <RadioSetTxGenericConfig+0x402>
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801878c:	d902      	bls.n	8018794 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801878e:	f04f 33ff 	mov.w	r3, #4294967295
 8018792:	e027      	b.n	80187e4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018794:	2003      	movs	r0, #3
 8018796:	f7fe f905 	bl	80169a4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801879a:	4b14      	ldr	r3, [pc, #80]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 801879c:	2202      	movs	r2, #2
 801879e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	4a11      	ldr	r2, [pc, #68]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80187a8:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80187aa:	4b10      	ldr	r3, [pc, #64]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80187ac:	2216      	movs	r2, #22
 80187ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187b2:	480f      	ldr	r0, [pc, #60]	@ (80187f0 <RadioSetTxGenericConfig+0x464>)
 80187b4:	f000 fd12 	bl	80191dc <SUBGRF_SetModulationParams>
        break;
 80187b8:	e000      	b.n	80187bc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80187ba:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80187bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187c0:	4618      	mov	r0, r3
 80187c2:	f001 f841 	bl	8019848 <SUBGRF_SetRfTxPower>
 80187c6:	4603      	mov	r3, r0
 80187c8:	461a      	mov	r2, r3
 80187ca:	4b08      	ldr	r3, [pc, #32]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80187cc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80187d0:	4b06      	ldr	r3, [pc, #24]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80187d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80187d6:	4618      	mov	r0, r3
 80187d8:	f001 fa05 	bl	8019be6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80187dc:	4a03      	ldr	r2, [pc, #12]	@ (80187ec <RadioSetTxGenericConfig+0x460>)
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6053      	str	r3, [r2, #4]
    return 0;
 80187e2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3738      	adds	r7, #56	@ 0x38
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}
 80187ec:	20001a70 	.word	0x20001a70
 80187f0:	20001aa8 	.word	0x20001aa8
 80187f4:	20001a7e 	.word	0x20001a7e

080187f8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b084      	sub	sp, #16
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d002      	beq.n	801880c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018806:	4a1a      	ldr	r2, [pc, #104]	@ (8018870 <SUBGRF_Init+0x78>)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801880c:	f7e9 f816 	bl	800183c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018810:	2002      	movs	r0, #2
 8018812:	f001 f8e5 	bl	80199e0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018816:	4b17      	ldr	r3, [pc, #92]	@ (8018874 <SUBGRF_Init+0x7c>)
 8018818:	2200      	movs	r2, #0
 801881a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801881c:	2000      	movs	r0, #0
 801881e:	f000 f977 	bl	8018b10 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018822:	f7f1 fd8f 	bl	800a344 <RBI_IsTCXO>
 8018826:	4603      	mov	r3, r0
 8018828:	2b01      	cmp	r3, #1
 801882a:	d10e      	bne.n	801884a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801882c:	2140      	movs	r1, #64	@ 0x40
 801882e:	2001      	movs	r0, #1
 8018830:	f000 fb78 	bl	8018f24 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018834:	2100      	movs	r1, #0
 8018836:	f640 1011 	movw	r0, #2321	@ 0x911
 801883a:	f000 fee9 	bl	8019610 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801883e:	237f      	movs	r3, #127	@ 0x7f
 8018840:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018842:	7b38      	ldrb	r0, [r7, #12]
 8018844:	f000 fa85 	bl	8018d52 <SUBGRF_Calibrate>
 8018848:	e009      	b.n	801885e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801884a:	2120      	movs	r1, #32
 801884c:	f640 1011 	movw	r0, #2321	@ 0x911
 8018850:	f000 fede 	bl	8019610 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018854:	2120      	movs	r1, #32
 8018856:	f640 1012 	movw	r0, #2322	@ 0x912
 801885a:	f000 fed9 	bl	8019610 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801885e:	f7f1 fd55 	bl	800a30c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018862:	4b05      	ldr	r3, [pc, #20]	@ (8018878 <SUBGRF_Init+0x80>)
 8018864:	2201      	movs	r2, #1
 8018866:	701a      	strb	r2, [r3, #0]
}
 8018868:	bf00      	nop
 801886a:	3710      	adds	r7, #16
 801886c:	46bd      	mov	sp, r7
 801886e:	bd80      	pop	{r7, pc}
 8018870:	20001b08 	.word	0x20001b08
 8018874:	20001b04 	.word	0x20001b04
 8018878:	20001afc 	.word	0x20001afc

0801887c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801887c:	b480      	push	{r7}
 801887e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018880:	4b02      	ldr	r3, [pc, #8]	@ (801888c <SUBGRF_GetOperatingMode+0x10>)
 8018882:	781b      	ldrb	r3, [r3, #0]
}
 8018884:	4618      	mov	r0, r3
 8018886:	46bd      	mov	sp, r7
 8018888:	bc80      	pop	{r7}
 801888a:	4770      	bx	lr
 801888c:	20001afc 	.word	0x20001afc

08018890 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
 8018898:	460b      	mov	r3, r1
 801889a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801889c:	78fb      	ldrb	r3, [r7, #3]
 801889e:	461a      	mov	r2, r3
 80188a0:	6879      	ldr	r1, [r7, #4]
 80188a2:	2000      	movs	r0, #0
 80188a4:	f000 ff20 	bl	80196e8 <SUBGRF_WriteBuffer>
}
 80188a8:	bf00      	nop
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b086      	sub	sp, #24
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	60f8      	str	r0, [r7, #12]
 80188b8:	60b9      	str	r1, [r7, #8]
 80188ba:	4613      	mov	r3, r2
 80188bc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80188be:	2300      	movs	r3, #0
 80188c0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80188c2:	f107 0317 	add.w	r3, r7, #23
 80188c6:	4619      	mov	r1, r3
 80188c8:	68b8      	ldr	r0, [r7, #8]
 80188ca:	f000 fe23 	bl	8019514 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	79fa      	ldrb	r2, [r7, #7]
 80188d4:	429a      	cmp	r2, r3
 80188d6:	d201      	bcs.n	80188dc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80188d8:	2301      	movs	r3, #1
 80188da:	e007      	b.n	80188ec <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80188dc:	7df8      	ldrb	r0, [r7, #23]
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	781b      	ldrb	r3, [r3, #0]
 80188e2:	461a      	mov	r2, r3
 80188e4:	68f9      	ldr	r1, [r7, #12]
 80188e6:	f000 ff21 	bl	801972c <SUBGRF_ReadBuffer>

    return 0;
 80188ea:	2300      	movs	r3, #0
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	3718      	adds	r7, #24
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b084      	sub	sp, #16
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	460b      	mov	r3, r1
 80188fe:	607a      	str	r2, [r7, #4]
 8018900:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018902:	7afb      	ldrb	r3, [r7, #11]
 8018904:	4619      	mov	r1, r3
 8018906:	68f8      	ldr	r0, [r7, #12]
 8018908:	f7ff ffc2 	bl	8018890 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801890c:	6878      	ldr	r0, [r7, #4]
 801890e:	f000 f91b 	bl	8018b48 <SUBGRF_SetTx>
}
 8018912:	bf00      	nop
 8018914:	3710      	adds	r7, #16
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}

0801891a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801891a:	b580      	push	{r7, lr}
 801891c:	b082      	sub	sp, #8
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018922:	2208      	movs	r2, #8
 8018924:	6879      	ldr	r1, [r7, #4]
 8018926:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801892a:	f000 fe99 	bl	8019660 <SUBGRF_WriteRegisters>
    return 0;
 801892e:	2300      	movs	r3, #0
}
 8018930:	4618      	mov	r0, r3
 8018932:	3708      	adds	r7, #8
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}

08018938 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	4603      	mov	r3, r0
 8018940:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018942:	88fb      	ldrh	r3, [r7, #6]
 8018944:	0a1b      	lsrs	r3, r3, #8
 8018946:	b29b      	uxth	r3, r3
 8018948:	b2db      	uxtb	r3, r3
 801894a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801894c:	88fb      	ldrh	r3, [r7, #6]
 801894e:	b2db      	uxtb	r3, r3
 8018950:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018952:	f000 fb6b 	bl	801902c <SUBGRF_GetPacketType>
 8018956:	4603      	mov	r3, r0
 8018958:	2b00      	cmp	r3, #0
 801895a:	d108      	bne.n	801896e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801895c:	f107 030c 	add.w	r3, r7, #12
 8018960:	2202      	movs	r2, #2
 8018962:	4619      	mov	r1, r3
 8018964:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018968:	f000 fe7a 	bl	8019660 <SUBGRF_WriteRegisters>
            break;
 801896c:	e000      	b.n	8018970 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801896e:	bf00      	nop
    }
}
 8018970:	bf00      	nop
 8018972:	3710      	adds	r7, #16
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}

08018978 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
 801897e:	4603      	mov	r3, r0
 8018980:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018982:	88fb      	ldrh	r3, [r7, #6]
 8018984:	0a1b      	lsrs	r3, r3, #8
 8018986:	b29b      	uxth	r3, r3
 8018988:	b2db      	uxtb	r3, r3
 801898a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801898c:	88fb      	ldrh	r3, [r7, #6]
 801898e:	b2db      	uxtb	r3, r3
 8018990:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018992:	f000 fb4b 	bl	801902c <SUBGRF_GetPacketType>
 8018996:	4603      	mov	r3, r0
 8018998:	2b00      	cmp	r3, #0
 801899a:	d108      	bne.n	80189ae <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801899c:	f107 030c 	add.w	r3, r7, #12
 80189a0:	2202      	movs	r2, #2
 80189a2:	4619      	mov	r1, r3
 80189a4:	f240 60be 	movw	r0, #1726	@ 0x6be
 80189a8:	f000 fe5a 	bl	8019660 <SUBGRF_WriteRegisters>
            break;
 80189ac:	e000      	b.n	80189b0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80189ae:	bf00      	nop
    }
}
 80189b0:	bf00      	nop
 80189b2:	3710      	adds	r7, #16
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}

080189b8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	4603      	mov	r3, r0
 80189c0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80189c2:	2300      	movs	r3, #0
 80189c4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80189c6:	f000 fb31 	bl	801902c <SUBGRF_GetPacketType>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d121      	bne.n	8018a14 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80189d0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80189d4:	f000 fe30 	bl	8019638 <SUBGRF_ReadRegister>
 80189d8:	4603      	mov	r3, r0
 80189da:	f023 0301 	bic.w	r3, r3, #1
 80189de:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80189e0:	88fb      	ldrh	r3, [r7, #6]
 80189e2:	0a1b      	lsrs	r3, r3, #8
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	b25b      	sxtb	r3, r3
 80189e8:	f003 0301 	and.w	r3, r3, #1
 80189ec:	b25a      	sxtb	r2, r3
 80189ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189f2:	4313      	orrs	r3, r2
 80189f4:	b25b      	sxtb	r3, r3
 80189f6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80189f8:	7bfb      	ldrb	r3, [r7, #15]
 80189fa:	4619      	mov	r1, r3
 80189fc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018a00:	f000 fe06 	bl	8019610 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018a04:	88fb      	ldrh	r3, [r7, #6]
 8018a06:	b2db      	uxtb	r3, r3
 8018a08:	4619      	mov	r1, r3
 8018a0a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018a0e:	f000 fdff 	bl	8019610 <SUBGRF_WriteRegister>
            break;
 8018a12:	e000      	b.n	8018a16 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018a14:	bf00      	nop
    }
}
 8018a16:	bf00      	nop
 8018a18:	3710      	adds	r7, #16
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}

08018a1e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018a1e:	b580      	push	{r7, lr}
 8018a20:	b082      	sub	sp, #8
 8018a22:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018a24:	2300      	movs	r3, #0
 8018a26:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018a30:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018a34:	f000 fe00 	bl	8019638 <SUBGRF_ReadRegister>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018a3c:	79fb      	ldrb	r3, [r7, #7]
 8018a3e:	f023 0301 	bic.w	r3, r3, #1
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	4619      	mov	r1, r3
 8018a46:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018a4a:	f000 fde1 	bl	8019610 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018a4e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018a52:	f000 fdf1 	bl	8019638 <SUBGRF_ReadRegister>
 8018a56:	4603      	mov	r3, r0
 8018a58:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018a5a:	79bb      	ldrb	r3, [r7, #6]
 8018a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	4619      	mov	r1, r3
 8018a64:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018a68:	f000 fdd2 	bl	8019610 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018a6c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018a70:	f000 f88a 	bl	8018b88 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018a74:	463b      	mov	r3, r7
 8018a76:	2204      	movs	r2, #4
 8018a78:	4619      	mov	r1, r3
 8018a7a:	f640 0019 	movw	r0, #2073	@ 0x819
 8018a7e:	f000 fe11 	bl	80196a4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018a82:	2000      	movs	r0, #0
 8018a84:	f000 f844 	bl	8018b10 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018a88:	79fb      	ldrb	r3, [r7, #7]
 8018a8a:	4619      	mov	r1, r3
 8018a8c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018a90:	f000 fdbe 	bl	8019610 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018a94:	79bb      	ldrb	r3, [r7, #6]
 8018a96:	4619      	mov	r1, r3
 8018a98:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018a9c:	f000 fdb8 	bl	8019610 <SUBGRF_WriteRegister>

    return number;
 8018aa0:	683b      	ldr	r3, [r7, #0]
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3708      	adds	r7, #8
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd80      	pop	{r7, pc}
	...

08018aac <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b084      	sub	sp, #16
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	f7f1 fc30 	bl	800a31a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018aba:	2002      	movs	r0, #2
 8018abc:	f000 ff90 	bl	80199e0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018ac0:	793b      	ldrb	r3, [r7, #4]
 8018ac2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018acc:	793b      	ldrb	r3, [r7, #4]
 8018ace:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018ad6:	b25b      	sxtb	r3, r3
 8018ad8:	4313      	orrs	r3, r2
 8018ada:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018adc:	793b      	ldrb	r3, [r7, #4]
 8018ade:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018ae6:	4313      	orrs	r3, r2
 8018ae8:	b25b      	sxtb	r3, r3
 8018aea:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018aec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018aee:	f107 030f 	add.w	r3, r7, #15
 8018af2:	2201      	movs	r2, #1
 8018af4:	4619      	mov	r1, r3
 8018af6:	2084      	movs	r0, #132	@ 0x84
 8018af8:	f000 fe3a 	bl	8019770 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018afc:	4b03      	ldr	r3, [pc, #12]	@ (8018b0c <SUBGRF_SetSleep+0x60>)
 8018afe:	2200      	movs	r2, #0
 8018b00:	701a      	strb	r2, [r3, #0]
}
 8018b02:	bf00      	nop
 8018b04:	3710      	adds	r7, #16
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	20001afc 	.word	0x20001afc

08018b10 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b082      	sub	sp, #8
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	4603      	mov	r3, r0
 8018b18:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018b1a:	1dfb      	adds	r3, r7, #7
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	4619      	mov	r1, r3
 8018b20:	2080      	movs	r0, #128	@ 0x80
 8018b22:	f000 fe25 	bl	8019770 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018b26:	79fb      	ldrb	r3, [r7, #7]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d103      	bne.n	8018b34 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018b2c:	4b05      	ldr	r3, [pc, #20]	@ (8018b44 <SUBGRF_SetStandby+0x34>)
 8018b2e:	2201      	movs	r2, #1
 8018b30:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018b32:	e002      	b.n	8018b3a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018b34:	4b03      	ldr	r3, [pc, #12]	@ (8018b44 <SUBGRF_SetStandby+0x34>)
 8018b36:	2202      	movs	r2, #2
 8018b38:	701a      	strb	r2, [r3, #0]
}
 8018b3a:	bf00      	nop
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	20001afc 	.word	0x20001afc

08018b48 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018b50:	4b0c      	ldr	r3, [pc, #48]	@ (8018b84 <SUBGRF_SetTx+0x3c>)
 8018b52:	2204      	movs	r2, #4
 8018b54:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	0c1b      	lsrs	r3, r3, #16
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	0a1b      	lsrs	r3, r3, #8
 8018b62:	b2db      	uxtb	r3, r3
 8018b64:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018b6c:	f107 030c 	add.w	r3, r7, #12
 8018b70:	2203      	movs	r2, #3
 8018b72:	4619      	mov	r1, r3
 8018b74:	2083      	movs	r0, #131	@ 0x83
 8018b76:	f000 fdfb 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018b7a:	bf00      	nop
 8018b7c:	3710      	adds	r7, #16
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
 8018b82:	bf00      	nop
 8018b84:	20001afc 	.word	0x20001afc

08018b88 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b084      	sub	sp, #16
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018b90:	4b0c      	ldr	r3, [pc, #48]	@ (8018bc4 <SUBGRF_SetRx+0x3c>)
 8018b92:	2205      	movs	r2, #5
 8018b94:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	0c1b      	lsrs	r3, r3, #16
 8018b9a:	b2db      	uxtb	r3, r3
 8018b9c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	0a1b      	lsrs	r3, r3, #8
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018bac:	f107 030c 	add.w	r3, r7, #12
 8018bb0:	2203      	movs	r2, #3
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	2082      	movs	r0, #130	@ 0x82
 8018bb6:	f000 fddb 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018bba:	bf00      	nop
 8018bbc:	3710      	adds	r7, #16
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	bd80      	pop	{r7, pc}
 8018bc2:	bf00      	nop
 8018bc4:	20001afc 	.word	0x20001afc

08018bc8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b084      	sub	sp, #16
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8018c0c <SUBGRF_SetRxBoosted+0x44>)
 8018bd2:	2205      	movs	r2, #5
 8018bd4:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018bd6:	2197      	movs	r1, #151	@ 0x97
 8018bd8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018bdc:	f000 fd18 	bl	8019610 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	0c1b      	lsrs	r3, r3, #16
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	0a1b      	lsrs	r3, r3, #8
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	b2db      	uxtb	r3, r3
 8018bf4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018bf6:	f107 030c 	add.w	r3, r7, #12
 8018bfa:	2203      	movs	r2, #3
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	2082      	movs	r0, #130	@ 0x82
 8018c00:	f000 fdb6 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018c04:	bf00      	nop
 8018c06:	3710      	adds	r7, #16
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	20001afc 	.word	0x20001afc

08018c10 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b084      	sub	sp, #16
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
 8018c18:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	0c1b      	lsrs	r3, r3, #16
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	0a1b      	lsrs	r3, r3, #8
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	0c1b      	lsrs	r3, r3, #16
 8018c34:	b2db      	uxtb	r3, r3
 8018c36:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	0a1b      	lsrs	r3, r3, #8
 8018c3c:	b2db      	uxtb	r3, r3
 8018c3e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	b2db      	uxtb	r3, r3
 8018c44:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018c46:	f107 0308 	add.w	r3, r7, #8
 8018c4a:	2206      	movs	r2, #6
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	2094      	movs	r0, #148	@ 0x94
 8018c50:	f000 fd8e 	bl	8019770 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018c54:	4b03      	ldr	r3, [pc, #12]	@ (8018c64 <SUBGRF_SetRxDutyCycle+0x54>)
 8018c56:	2206      	movs	r2, #6
 8018c58:	701a      	strb	r2, [r3, #0]
}
 8018c5a:	bf00      	nop
 8018c5c:	3710      	adds	r7, #16
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}
 8018c62:	bf00      	nop
 8018c64:	20001afc 	.word	0x20001afc

08018c68 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	2100      	movs	r1, #0
 8018c70:	20c5      	movs	r0, #197	@ 0xc5
 8018c72:	f000 fd7d 	bl	8019770 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018c76:	4b02      	ldr	r3, [pc, #8]	@ (8018c80 <SUBGRF_SetCad+0x18>)
 8018c78:	2207      	movs	r2, #7
 8018c7a:	701a      	strb	r2, [r3, #0]
}
 8018c7c:	bf00      	nop
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	20001afc 	.word	0x20001afc

08018c84 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018c88:	2200      	movs	r2, #0
 8018c8a:	2100      	movs	r1, #0
 8018c8c:	20d1      	movs	r0, #209	@ 0xd1
 8018c8e:	f000 fd6f 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018c92:	bf00      	nop
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018c96:	b580      	push	{r7, lr}
 8018c98:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	2100      	movs	r1, #0
 8018c9e:	20d2      	movs	r0, #210	@ 0xd2
 8018ca0:	f000 fd66 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018ca4:	bf00      	nop
 8018ca6:	bd80      	pop	{r7, pc}

08018ca8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	4603      	mov	r3, r0
 8018cb0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018cb2:	1dfb      	adds	r3, r7, #7
 8018cb4:	2201      	movs	r2, #1
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	209f      	movs	r0, #159	@ 0x9f
 8018cba:	f000 fd59 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018cbe:	bf00      	nop
 8018cc0:	3708      	adds	r7, #8
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	bd80      	pop	{r7, pc}

08018cc6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018cc6:	b580      	push	{r7, lr}
 8018cc8:	b084      	sub	sp, #16
 8018cca:	af00      	add	r7, sp, #0
 8018ccc:	4603      	mov	r3, r0
 8018cce:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018cd0:	1dfb      	adds	r3, r7, #7
 8018cd2:	2201      	movs	r2, #1
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	20a0      	movs	r0, #160	@ 0xa0
 8018cd8:	f000 fd4a 	bl	8019770 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018cdc:	79fb      	ldrb	r3, [r7, #7]
 8018cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8018ce0:	d91c      	bls.n	8018d1c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018ce2:	79fb      	ldrb	r3, [r7, #7]
 8018ce4:	085b      	lsrs	r3, r3, #1
 8018ce6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018cf0:	e005      	b.n	8018cfe <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018cf2:	7bfb      	ldrb	r3, [r7, #15]
 8018cf4:	089b      	lsrs	r3, r3, #2
 8018cf6:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018cf8:	7bbb      	ldrb	r3, [r7, #14]
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018cfe:	7bfb      	ldrb	r3, [r7, #15]
 8018d00:	2b1f      	cmp	r3, #31
 8018d02:	d8f6      	bhi.n	8018cf2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018d04:	7bfb      	ldrb	r3, [r7, #15]
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	b2da      	uxtb	r2, r3
 8018d0a:	7bbb      	ldrb	r3, [r7, #14]
 8018d0c:	4413      	add	r3, r2
 8018d0e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018d10:	7b7b      	ldrb	r3, [r7, #13]
 8018d12:	4619      	mov	r1, r3
 8018d14:	f240 7006 	movw	r0, #1798	@ 0x706
 8018d18:	f000 fc7a 	bl	8019610 <SUBGRF_WriteRegister>
    }
}
 8018d1c:	bf00      	nop
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018d2a:	f7f1 fb12 	bl	800a352 <RBI_IsDCDC>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	2b01      	cmp	r3, #1
 8018d32:	d102      	bne.n	8018d3a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018d34:	2301      	movs	r3, #1
 8018d36:	71fb      	strb	r3, [r7, #7]
 8018d38:	e001      	b.n	8018d3e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018d3e:	1dfb      	adds	r3, r7, #7
 8018d40:	2201      	movs	r2, #1
 8018d42:	4619      	mov	r1, r3
 8018d44:	2096      	movs	r0, #150	@ 0x96
 8018d46:	f000 fd13 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018d4a:	bf00      	nop
 8018d4c:	3708      	adds	r7, #8
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}

08018d52 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018d52:	b580      	push	{r7, lr}
 8018d54:	b084      	sub	sp, #16
 8018d56:	af00      	add	r7, sp, #0
 8018d58:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018d5a:	793b      	ldrb	r3, [r7, #4]
 8018d5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	019b      	lsls	r3, r3, #6
 8018d64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018d66:	793b      	ldrb	r3, [r7, #4]
 8018d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018d70:	b25b      	sxtb	r3, r3
 8018d72:	4313      	orrs	r3, r2
 8018d74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018d76:	793b      	ldrb	r3, [r7, #4]
 8018d78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018d80:	b25b      	sxtb	r3, r3
 8018d82:	4313      	orrs	r3, r2
 8018d84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018d86:	793b      	ldrb	r3, [r7, #4]
 8018d88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018d8c:	b2db      	uxtb	r3, r3
 8018d8e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018d90:	b25b      	sxtb	r3, r3
 8018d92:	4313      	orrs	r3, r2
 8018d94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018d96:	793b      	ldrb	r3, [r7, #4]
 8018d98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018da0:	b25b      	sxtb	r3, r3
 8018da2:	4313      	orrs	r3, r2
 8018da4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018da6:	793b      	ldrb	r3, [r7, #4]
 8018da8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018db0:	b25b      	sxtb	r3, r3
 8018db2:	4313      	orrs	r3, r2
 8018db4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018db6:	793b      	ldrb	r3, [r7, #4]
 8018db8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018dbc:	b2db      	uxtb	r3, r3
 8018dbe:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018dc0:	4313      	orrs	r3, r2
 8018dc2:	b25b      	sxtb	r3, r3
 8018dc4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018dc6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018dc8:	f107 030f 	add.w	r3, r7, #15
 8018dcc:	2201      	movs	r2, #1
 8018dce:	4619      	mov	r1, r3
 8018dd0:	2089      	movs	r0, #137	@ 0x89
 8018dd2:	f000 fccd 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018dd6:	bf00      	nop
 8018dd8:	3710      	adds	r7, #16
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
	...

08018de0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b084      	sub	sp, #16
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	4a1b      	ldr	r2, [pc, #108]	@ (8018e58 <SUBGRF_CalibrateImage+0x78>)
 8018dec:	4293      	cmp	r3, r2
 8018dee:	d904      	bls.n	8018dfa <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018df0:	23e1      	movs	r3, #225	@ 0xe1
 8018df2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018df4:	23e9      	movs	r3, #233	@ 0xe9
 8018df6:	737b      	strb	r3, [r7, #13]
 8018df8:	e022      	b.n	8018e40 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	4a17      	ldr	r2, [pc, #92]	@ (8018e5c <SUBGRF_CalibrateImage+0x7c>)
 8018dfe:	4293      	cmp	r3, r2
 8018e00:	d904      	bls.n	8018e0c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018e02:	23d7      	movs	r3, #215	@ 0xd7
 8018e04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018e06:	23db      	movs	r3, #219	@ 0xdb
 8018e08:	737b      	strb	r3, [r7, #13]
 8018e0a:	e019      	b.n	8018e40 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	4a14      	ldr	r2, [pc, #80]	@ (8018e60 <SUBGRF_CalibrateImage+0x80>)
 8018e10:	4293      	cmp	r3, r2
 8018e12:	d904      	bls.n	8018e1e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018e14:	23c1      	movs	r3, #193	@ 0xc1
 8018e16:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018e18:	23c5      	movs	r3, #197	@ 0xc5
 8018e1a:	737b      	strb	r3, [r7, #13]
 8018e1c:	e010      	b.n	8018e40 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	4a10      	ldr	r2, [pc, #64]	@ (8018e64 <SUBGRF_CalibrateImage+0x84>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d904      	bls.n	8018e30 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018e26:	2375      	movs	r3, #117	@ 0x75
 8018e28:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018e2a:	2381      	movs	r3, #129	@ 0x81
 8018e2c:	737b      	strb	r3, [r7, #13]
 8018e2e:	e007      	b.n	8018e40 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	4a0d      	ldr	r2, [pc, #52]	@ (8018e68 <SUBGRF_CalibrateImage+0x88>)
 8018e34:	4293      	cmp	r3, r2
 8018e36:	d903      	bls.n	8018e40 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018e38:	236b      	movs	r3, #107	@ 0x6b
 8018e3a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018e3c:	236f      	movs	r3, #111	@ 0x6f
 8018e3e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018e40:	f107 030c 	add.w	r3, r7, #12
 8018e44:	2202      	movs	r2, #2
 8018e46:	4619      	mov	r1, r3
 8018e48:	2098      	movs	r0, #152	@ 0x98
 8018e4a:	f000 fc91 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018e4e:	bf00      	nop
 8018e50:	3710      	adds	r7, #16
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}
 8018e56:	bf00      	nop
 8018e58:	35a4e900 	.word	0x35a4e900
 8018e5c:	32a9f880 	.word	0x32a9f880
 8018e60:	2de54480 	.word	0x2de54480
 8018e64:	1b6b0b00 	.word	0x1b6b0b00
 8018e68:	1954fc40 	.word	0x1954fc40

08018e6c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018e6c:	b590      	push	{r4, r7, lr}
 8018e6e:	b085      	sub	sp, #20
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	4604      	mov	r4, r0
 8018e74:	4608      	mov	r0, r1
 8018e76:	4611      	mov	r1, r2
 8018e78:	461a      	mov	r2, r3
 8018e7a:	4623      	mov	r3, r4
 8018e7c:	71fb      	strb	r3, [r7, #7]
 8018e7e:	4603      	mov	r3, r0
 8018e80:	71bb      	strb	r3, [r7, #6]
 8018e82:	460b      	mov	r3, r1
 8018e84:	717b      	strb	r3, [r7, #5]
 8018e86:	4613      	mov	r3, r2
 8018e88:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018e8a:	79fb      	ldrb	r3, [r7, #7]
 8018e8c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018e8e:	79bb      	ldrb	r3, [r7, #6]
 8018e90:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018e92:	797b      	ldrb	r3, [r7, #5]
 8018e94:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018e96:	793b      	ldrb	r3, [r7, #4]
 8018e98:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018e9a:	f107 030c 	add.w	r3, r7, #12
 8018e9e:	2204      	movs	r2, #4
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	2095      	movs	r0, #149	@ 0x95
 8018ea4:	f000 fc64 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018ea8:	bf00      	nop
 8018eaa:	3714      	adds	r7, #20
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd90      	pop	{r4, r7, pc}

08018eb0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018eb0:	b590      	push	{r4, r7, lr}
 8018eb2:	b085      	sub	sp, #20
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	4608      	mov	r0, r1
 8018eba:	4611      	mov	r1, r2
 8018ebc:	461a      	mov	r2, r3
 8018ebe:	4623      	mov	r3, r4
 8018ec0:	80fb      	strh	r3, [r7, #6]
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	80bb      	strh	r3, [r7, #4]
 8018ec6:	460b      	mov	r3, r1
 8018ec8:	807b      	strh	r3, [r7, #2]
 8018eca:	4613      	mov	r3, r2
 8018ecc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018ece:	88fb      	ldrh	r3, [r7, #6]
 8018ed0:	0a1b      	lsrs	r3, r3, #8
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	b2db      	uxtb	r3, r3
 8018ed6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018ed8:	88fb      	ldrh	r3, [r7, #6]
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018ede:	88bb      	ldrh	r3, [r7, #4]
 8018ee0:	0a1b      	lsrs	r3, r3, #8
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018ee8:	88bb      	ldrh	r3, [r7, #4]
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018eee:	887b      	ldrh	r3, [r7, #2]
 8018ef0:	0a1b      	lsrs	r3, r3, #8
 8018ef2:	b29b      	uxth	r3, r3
 8018ef4:	b2db      	uxtb	r3, r3
 8018ef6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018ef8:	887b      	ldrh	r3, [r7, #2]
 8018efa:	b2db      	uxtb	r3, r3
 8018efc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018efe:	883b      	ldrh	r3, [r7, #0]
 8018f00:	0a1b      	lsrs	r3, r3, #8
 8018f02:	b29b      	uxth	r3, r3
 8018f04:	b2db      	uxtb	r3, r3
 8018f06:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018f08:	883b      	ldrh	r3, [r7, #0]
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018f0e:	f107 0308 	add.w	r3, r7, #8
 8018f12:	2208      	movs	r2, #8
 8018f14:	4619      	mov	r1, r3
 8018f16:	2008      	movs	r0, #8
 8018f18:	f000 fc2a 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018f1c:	bf00      	nop
 8018f1e:	3714      	adds	r7, #20
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd90      	pop	{r4, r7, pc}

08018f24 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	6039      	str	r1, [r7, #0]
 8018f2e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018f30:	79fb      	ldrb	r3, [r7, #7]
 8018f32:	f003 0307 	and.w	r3, r3, #7
 8018f36:	b2db      	uxtb	r3, r3
 8018f38:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	0c1b      	lsrs	r3, r3, #16
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018f42:	683b      	ldr	r3, [r7, #0]
 8018f44:	0a1b      	lsrs	r3, r3, #8
 8018f46:	b2db      	uxtb	r3, r3
 8018f48:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018f4a:	683b      	ldr	r3, [r7, #0]
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018f50:	f107 030c 	add.w	r3, r7, #12
 8018f54:	2204      	movs	r2, #4
 8018f56:	4619      	mov	r1, r3
 8018f58:	2097      	movs	r0, #151	@ 0x97
 8018f5a:	f000 fc09 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018f5e:	bf00      	nop
 8018f60:	3710      	adds	r7, #16
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
	...

08018f68 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018f6c:	b084      	sub	sp, #16
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018f72:	2300      	movs	r3, #0
 8018f74:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018f76:	4b1d      	ldr	r3, [pc, #116]	@ (8018fec <SUBGRF_SetRfFrequency+0x84>)
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	f083 0301 	eor.w	r3, r3, #1
 8018f7e:	b2db      	uxtb	r3, r3
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d005      	beq.n	8018f90 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8018f84:	6878      	ldr	r0, [r7, #4]
 8018f86:	f7ff ff2b 	bl	8018de0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018f8a:	4b18      	ldr	r3, [pc, #96]	@ (8018fec <SUBGRF_SetRfFrequency+0x84>)
 8018f8c:	2201      	movs	r2, #1
 8018f8e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2200      	movs	r2, #0
 8018f94:	461c      	mov	r4, r3
 8018f96:	4615      	mov	r5, r2
 8018f98:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018f9c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018fa0:	4a13      	ldr	r2, [pc, #76]	@ (8018ff0 <SUBGRF_SetRfFrequency+0x88>)
 8018fa2:	f04f 0300 	mov.w	r3, #0
 8018fa6:	4640      	mov	r0, r8
 8018fa8:	4649      	mov	r1, r9
 8018faa:	f7e7 fd61 	bl	8000a70 <__aeabi_uldivmod>
 8018fae:	4602      	mov	r2, r0
 8018fb0:	460b      	mov	r3, r1
 8018fb2:	4613      	mov	r3, r2
 8018fb4:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	0e1b      	lsrs	r3, r3, #24
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	0c1b      	lsrs	r3, r3, #16
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	0a1b      	lsrs	r3, r3, #8
 8018fca:	b2db      	uxtb	r3, r3
 8018fcc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018fd4:	f107 0308 	add.w	r3, r7, #8
 8018fd8:	2204      	movs	r2, #4
 8018fda:	4619      	mov	r1, r3
 8018fdc:	2086      	movs	r0, #134	@ 0x86
 8018fde:	f000 fbc7 	bl	8019770 <SUBGRF_WriteCommand>
}
 8018fe2:	bf00      	nop
 8018fe4:	3710      	adds	r7, #16
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018fec:	20001b04 	.word	0x20001b04
 8018ff0:	01e84800 	.word	0x01e84800

08018ff4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018ffe:	79fa      	ldrb	r2, [r7, #7]
 8019000:	4b09      	ldr	r3, [pc, #36]	@ (8019028 <SUBGRF_SetPacketType+0x34>)
 8019002:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019004:	79fb      	ldrb	r3, [r7, #7]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d104      	bne.n	8019014 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801900a:	2100      	movs	r1, #0
 801900c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019010:	f000 fafe 	bl	8019610 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019014:	1dfb      	adds	r3, r7, #7
 8019016:	2201      	movs	r2, #1
 8019018:	4619      	mov	r1, r3
 801901a:	208a      	movs	r0, #138	@ 0x8a
 801901c:	f000 fba8 	bl	8019770 <SUBGRF_WriteCommand>
}
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	20001afd 	.word	0x20001afd

0801902c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801902c:	b480      	push	{r7}
 801902e:	af00      	add	r7, sp, #0
    return PacketType;
 8019030:	4b02      	ldr	r3, [pc, #8]	@ (801903c <SUBGRF_GetPacketType+0x10>)
 8019032:	781b      	ldrb	r3, [r3, #0]
}
 8019034:	4618      	mov	r0, r3
 8019036:	46bd      	mov	sp, r7
 8019038:	bc80      	pop	{r7}
 801903a:	4770      	bx	lr
 801903c:	20001afd 	.word	0x20001afd

08019040 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b084      	sub	sp, #16
 8019044:	af00      	add	r7, sp, #0
 8019046:	4603      	mov	r3, r0
 8019048:	71fb      	strb	r3, [r7, #7]
 801904a:	460b      	mov	r3, r1
 801904c:	71bb      	strb	r3, [r7, #6]
 801904e:	4613      	mov	r3, r2
 8019050:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019052:	79fb      	ldrb	r3, [r7, #7]
 8019054:	2b01      	cmp	r3, #1
 8019056:	d149      	bne.n	80190ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019058:	2000      	movs	r0, #0
 801905a:	f7f1 f981 	bl	800a360 <RBI_GetRFOMaxPowerConfig>
 801905e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019060:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019064:	68fa      	ldr	r2, [r7, #12]
 8019066:	429a      	cmp	r2, r3
 8019068:	da01      	bge.n	801906e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	2b0e      	cmp	r3, #14
 8019072:	d10e      	bne.n	8019092 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019074:	2301      	movs	r3, #1
 8019076:	2201      	movs	r2, #1
 8019078:	2100      	movs	r1, #0
 801907a:	2004      	movs	r0, #4
 801907c:	f7ff fef6 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019080:	79ba      	ldrb	r2, [r7, #6]
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	b2db      	uxtb	r3, r3
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	b2db      	uxtb	r3, r3
 801908a:	330e      	adds	r3, #14
 801908c:	b2db      	uxtb	r3, r3
 801908e:	71bb      	strb	r3, [r7, #6]
 8019090:	e01f      	b.n	80190d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	2b0a      	cmp	r3, #10
 8019096:	d10e      	bne.n	80190b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019098:	2301      	movs	r3, #1
 801909a:	2201      	movs	r2, #1
 801909c:	2100      	movs	r1, #0
 801909e:	2001      	movs	r0, #1
 80190a0:	f7ff fee4 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80190a4:	79ba      	ldrb	r2, [r7, #6]
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	b2db      	uxtb	r3, r3
 80190aa:	1ad3      	subs	r3, r2, r3
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	330d      	adds	r3, #13
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	71bb      	strb	r3, [r7, #6]
 80190b4:	e00d      	b.n	80190d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80190b6:	2301      	movs	r3, #1
 80190b8:	2201      	movs	r2, #1
 80190ba:	2100      	movs	r1, #0
 80190bc:	2006      	movs	r0, #6
 80190be:	f7ff fed5 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80190c2:	79ba      	ldrb	r2, [r7, #6]
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	b2db      	uxtb	r3, r3
 80190c8:	1ad3      	subs	r3, r2, r3
 80190ca:	b2db      	uxtb	r3, r3
 80190cc:	330e      	adds	r3, #14
 80190ce:	b2db      	uxtb	r3, r3
 80190d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80190d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80190d6:	f113 0f11 	cmn.w	r3, #17
 80190da:	da01      	bge.n	80190e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80190dc:	23ef      	movs	r3, #239	@ 0xef
 80190de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80190e0:	2118      	movs	r1, #24
 80190e2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80190e6:	f000 fa93 	bl	8019610 <SUBGRF_WriteRegister>
 80190ea:	e067      	b.n	80191bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80190ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80190f0:	f000 faa2 	bl	8019638 <SUBGRF_ReadRegister>
 80190f4:	4603      	mov	r3, r0
 80190f6:	f043 031e 	orr.w	r3, r3, #30
 80190fa:	b2db      	uxtb	r3, r3
 80190fc:	4619      	mov	r1, r3
 80190fe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019102:	f000 fa85 	bl	8019610 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019106:	2001      	movs	r0, #1
 8019108:	f7f1 f92a 	bl	800a360 <RBI_GetRFOMaxPowerConfig>
 801910c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801910e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019112:	68fa      	ldr	r2, [r7, #12]
 8019114:	429a      	cmp	r2, r3
 8019116:	da01      	bge.n	801911c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	2b14      	cmp	r3, #20
 8019120:	d10e      	bne.n	8019140 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019122:	2301      	movs	r3, #1
 8019124:	2200      	movs	r2, #0
 8019126:	2105      	movs	r1, #5
 8019128:	2003      	movs	r0, #3
 801912a:	f7ff fe9f 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801912e:	79ba      	ldrb	r2, [r7, #6]
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	b2db      	uxtb	r3, r3
 8019134:	1ad3      	subs	r3, r2, r3
 8019136:	b2db      	uxtb	r3, r3
 8019138:	3316      	adds	r3, #22
 801913a:	b2db      	uxtb	r3, r3
 801913c:	71bb      	strb	r3, [r7, #6]
 801913e:	e031      	b.n	80191a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	2b11      	cmp	r3, #17
 8019144:	d10e      	bne.n	8019164 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019146:	2301      	movs	r3, #1
 8019148:	2200      	movs	r2, #0
 801914a:	2103      	movs	r1, #3
 801914c:	2002      	movs	r0, #2
 801914e:	f7ff fe8d 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019152:	79ba      	ldrb	r2, [r7, #6]
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	b2db      	uxtb	r3, r3
 8019158:	1ad3      	subs	r3, r2, r3
 801915a:	b2db      	uxtb	r3, r3
 801915c:	3316      	adds	r3, #22
 801915e:	b2db      	uxtb	r3, r3
 8019160:	71bb      	strb	r3, [r7, #6]
 8019162:	e01f      	b.n	80191a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	2b0e      	cmp	r3, #14
 8019168:	d10e      	bne.n	8019188 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801916a:	2301      	movs	r3, #1
 801916c:	2200      	movs	r2, #0
 801916e:	2102      	movs	r1, #2
 8019170:	2002      	movs	r0, #2
 8019172:	f7ff fe7b 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019176:	79ba      	ldrb	r2, [r7, #6]
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	b2db      	uxtb	r3, r3
 801917c:	1ad3      	subs	r3, r2, r3
 801917e:	b2db      	uxtb	r3, r3
 8019180:	330e      	adds	r3, #14
 8019182:	b2db      	uxtb	r3, r3
 8019184:	71bb      	strb	r3, [r7, #6]
 8019186:	e00d      	b.n	80191a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019188:	2301      	movs	r3, #1
 801918a:	2200      	movs	r2, #0
 801918c:	2107      	movs	r1, #7
 801918e:	2004      	movs	r0, #4
 8019190:	f7ff fe6c 	bl	8018e6c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019194:	79ba      	ldrb	r2, [r7, #6]
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	b2db      	uxtb	r3, r3
 801919a:	1ad3      	subs	r3, r2, r3
 801919c:	b2db      	uxtb	r3, r3
 801919e:	3316      	adds	r3, #22
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80191a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80191a8:	f113 0f09 	cmn.w	r3, #9
 80191ac:	da01      	bge.n	80191b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80191ae:	23f7      	movs	r3, #247	@ 0xf7
 80191b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80191b2:	2138      	movs	r1, #56	@ 0x38
 80191b4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80191b8:	f000 fa2a 	bl	8019610 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80191bc:	79bb      	ldrb	r3, [r7, #6]
 80191be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80191c0:	797b      	ldrb	r3, [r7, #5]
 80191c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80191c4:	f107 0308 	add.w	r3, r7, #8
 80191c8:	2202      	movs	r2, #2
 80191ca:	4619      	mov	r1, r3
 80191cc:	208e      	movs	r0, #142	@ 0x8e
 80191ce:	f000 facf 	bl	8019770 <SUBGRF_WriteCommand>
}
 80191d2:	bf00      	nop
 80191d4:	3710      	adds	r7, #16
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}
	...

080191dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80191dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80191e0:	b086      	sub	sp, #24
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80191e6:	2300      	movs	r3, #0
 80191e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80191ea:	4a61      	ldr	r2, [pc, #388]	@ (8019370 <SUBGRF_SetModulationParams+0x194>)
 80191ec:	f107 0308 	add.w	r3, r7, #8
 80191f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80191f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	781a      	ldrb	r2, [r3, #0]
 80191fc:	4b5d      	ldr	r3, [pc, #372]	@ (8019374 <SUBGRF_SetModulationParams+0x198>)
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	429a      	cmp	r2, r3
 8019202:	d004      	beq.n	801920e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	4618      	mov	r0, r3
 801920a:	f7ff fef3 	bl	8018ff4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	2b03      	cmp	r3, #3
 8019214:	f200 80a5 	bhi.w	8019362 <SUBGRF_SetModulationParams+0x186>
 8019218:	a201      	add	r2, pc, #4	@ (adr r2, 8019220 <SUBGRF_SetModulationParams+0x44>)
 801921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801921e:	bf00      	nop
 8019220:	08019231 	.word	0x08019231
 8019224:	080192f1 	.word	0x080192f1
 8019228:	080192b3 	.word	0x080192b3
 801922c:	0801931f 	.word	0x0801931f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019230:	2308      	movs	r3, #8
 8019232:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	685b      	ldr	r3, [r3, #4]
 8019238:	4a4f      	ldr	r2, [pc, #316]	@ (8019378 <SUBGRF_SetModulationParams+0x19c>)
 801923a:	fbb2 f3f3 	udiv	r3, r2, r3
 801923e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	0c1b      	lsrs	r3, r3, #16
 8019244:	b2db      	uxtb	r3, r3
 8019246:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019248:	697b      	ldr	r3, [r7, #20]
 801924a:	0a1b      	lsrs	r3, r3, #8
 801924c:	b2db      	uxtb	r3, r3
 801924e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019250:	697b      	ldr	r3, [r7, #20]
 8019252:	b2db      	uxtb	r3, r3
 8019254:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	7b1b      	ldrb	r3, [r3, #12]
 801925a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	7b5b      	ldrb	r3, [r3, #13]
 8019260:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	689b      	ldr	r3, [r3, #8]
 8019266:	2200      	movs	r2, #0
 8019268:	461c      	mov	r4, r3
 801926a:	4615      	mov	r5, r2
 801926c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019270:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019274:	4a41      	ldr	r2, [pc, #260]	@ (801937c <SUBGRF_SetModulationParams+0x1a0>)
 8019276:	f04f 0300 	mov.w	r3, #0
 801927a:	4640      	mov	r0, r8
 801927c:	4649      	mov	r1, r9
 801927e:	f7e7 fbf7 	bl	8000a70 <__aeabi_uldivmod>
 8019282:	4602      	mov	r2, r0
 8019284:	460b      	mov	r3, r1
 8019286:	4613      	mov	r3, r2
 8019288:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	0c1b      	lsrs	r3, r3, #16
 801928e:	b2db      	uxtb	r3, r3
 8019290:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	0a1b      	lsrs	r3, r3, #8
 8019296:	b2db      	uxtb	r3, r3
 8019298:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801929a:	697b      	ldr	r3, [r7, #20]
 801929c:	b2db      	uxtb	r3, r3
 801929e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80192a0:	7cfb      	ldrb	r3, [r7, #19]
 80192a2:	b29a      	uxth	r2, r3
 80192a4:	f107 0308 	add.w	r3, r7, #8
 80192a8:	4619      	mov	r1, r3
 80192aa:	208b      	movs	r0, #139	@ 0x8b
 80192ac:	f000 fa60 	bl	8019770 <SUBGRF_WriteCommand>
        break;
 80192b0:	e058      	b.n	8019364 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80192b2:	2304      	movs	r3, #4
 80192b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	691b      	ldr	r3, [r3, #16]
 80192ba:	4a2f      	ldr	r2, [pc, #188]	@ (8019378 <SUBGRF_SetModulationParams+0x19c>)
 80192bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80192c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	0c1b      	lsrs	r3, r3, #16
 80192c6:	b2db      	uxtb	r3, r3
 80192c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	0a1b      	lsrs	r3, r3, #8
 80192ce:	b2db      	uxtb	r3, r3
 80192d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80192d2:	697b      	ldr	r3, [r7, #20]
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	7d1b      	ldrb	r3, [r3, #20]
 80192dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80192de:	7cfb      	ldrb	r3, [r7, #19]
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	f107 0308 	add.w	r3, r7, #8
 80192e6:	4619      	mov	r1, r3
 80192e8:	208b      	movs	r0, #139	@ 0x8b
 80192ea:	f000 fa41 	bl	8019770 <SUBGRF_WriteCommand>
        break;
 80192ee:	e039      	b.n	8019364 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80192f0:	2304      	movs	r3, #4
 80192f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	7e1b      	ldrb	r3, [r3, #24]
 80192f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	7e5b      	ldrb	r3, [r3, #25]
 80192fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	7e9b      	ldrb	r3, [r3, #26]
 8019304:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	7edb      	ldrb	r3, [r3, #27]
 801930a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801930c:	7cfb      	ldrb	r3, [r7, #19]
 801930e:	b29a      	uxth	r2, r3
 8019310:	f107 0308 	add.w	r3, r7, #8
 8019314:	4619      	mov	r1, r3
 8019316:	208b      	movs	r0, #139	@ 0x8b
 8019318:	f000 fa2a 	bl	8019770 <SUBGRF_WriteCommand>

        break;
 801931c:	e022      	b.n	8019364 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801931e:	2305      	movs	r3, #5
 8019320:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	685b      	ldr	r3, [r3, #4]
 8019326:	4a14      	ldr	r2, [pc, #80]	@ (8019378 <SUBGRF_SetModulationParams+0x19c>)
 8019328:	fbb2 f3f3 	udiv	r3, r2, r3
 801932c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	0c1b      	lsrs	r3, r3, #16
 8019332:	b2db      	uxtb	r3, r3
 8019334:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	0a1b      	lsrs	r3, r3, #8
 801933a:	b2db      	uxtb	r3, r3
 801933c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801933e:	697b      	ldr	r3, [r7, #20]
 8019340:	b2db      	uxtb	r3, r3
 8019342:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	7b1b      	ldrb	r3, [r3, #12]
 8019348:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	7b5b      	ldrb	r3, [r3, #13]
 801934e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019350:	7cfb      	ldrb	r3, [r7, #19]
 8019352:	b29a      	uxth	r2, r3
 8019354:	f107 0308 	add.w	r3, r7, #8
 8019358:	4619      	mov	r1, r3
 801935a:	208b      	movs	r0, #139	@ 0x8b
 801935c:	f000 fa08 	bl	8019770 <SUBGRF_WriteCommand>
        break;
 8019360:	e000      	b.n	8019364 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019362:	bf00      	nop
    }
}
 8019364:	bf00      	nop
 8019366:	3718      	adds	r7, #24
 8019368:	46bd      	mov	sp, r7
 801936a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801936e:	bf00      	nop
 8019370:	0801bd2c 	.word	0x0801bd2c
 8019374:	20001afd 	.word	0x20001afd
 8019378:	3d090000 	.word	0x3d090000
 801937c:	01e84800 	.word	0x01e84800

08019380 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b086      	sub	sp, #24
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019388:	2300      	movs	r3, #0
 801938a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801938c:	4a48      	ldr	r2, [pc, #288]	@ (80194b0 <SUBGRF_SetPacketParams+0x130>)
 801938e:	f107 030c 	add.w	r3, r7, #12
 8019392:	ca07      	ldmia	r2, {r0, r1, r2}
 8019394:	c303      	stmia	r3!, {r0, r1}
 8019396:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	781a      	ldrb	r2, [r3, #0]
 801939c:	4b45      	ldr	r3, [pc, #276]	@ (80194b4 <SUBGRF_SetPacketParams+0x134>)
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	429a      	cmp	r2, r3
 80193a2:	d004      	beq.n	80193ae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	781b      	ldrb	r3, [r3, #0]
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7ff fe23 	bl	8018ff4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	2b03      	cmp	r3, #3
 80193b4:	d878      	bhi.n	80194a8 <SUBGRF_SetPacketParams+0x128>
 80193b6:	a201      	add	r2, pc, #4	@ (adr r2, 80193bc <SUBGRF_SetPacketParams+0x3c>)
 80193b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193bc:	080193cd 	.word	0x080193cd
 80193c0:	0801945d 	.word	0x0801945d
 80193c4:	08019451 	.word	0x08019451
 80193c8:	080193cd 	.word	0x080193cd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	7a5b      	ldrb	r3, [r3, #9]
 80193d0:	2bf1      	cmp	r3, #241	@ 0xf1
 80193d2:	d10a      	bne.n	80193ea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80193d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80193d8:	f7ff faae 	bl	8018938 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80193dc:	f248 0005 	movw	r0, #32773	@ 0x8005
 80193e0:	f7ff faca 	bl	8018978 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80193e4:	2302      	movs	r3, #2
 80193e6:	75bb      	strb	r3, [r7, #22]
 80193e8:	e011      	b.n	801940e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	7a5b      	ldrb	r3, [r3, #9]
 80193ee:	2bf2      	cmp	r3, #242	@ 0xf2
 80193f0:	d10a      	bne.n	8019408 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80193f2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80193f6:	f7ff fa9f 	bl	8018938 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80193fa:	f241 0021 	movw	r0, #4129	@ 0x1021
 80193fe:	f7ff fabb 	bl	8018978 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019402:	2306      	movs	r3, #6
 8019404:	75bb      	strb	r3, [r7, #22]
 8019406:	e002      	b.n	801940e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	7a5b      	ldrb	r3, [r3, #9]
 801940c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801940e:	2309      	movs	r3, #9
 8019410:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	885b      	ldrh	r3, [r3, #2]
 8019416:	0a1b      	lsrs	r3, r3, #8
 8019418:	b29b      	uxth	r3, r3
 801941a:	b2db      	uxtb	r3, r3
 801941c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	885b      	ldrh	r3, [r3, #2]
 8019422:	b2db      	uxtb	r3, r3
 8019424:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	791b      	ldrb	r3, [r3, #4]
 801942a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	795b      	ldrb	r3, [r3, #5]
 8019430:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	799b      	ldrb	r3, [r3, #6]
 8019436:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	79db      	ldrb	r3, [r3, #7]
 801943c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	7a1b      	ldrb	r3, [r3, #8]
 8019442:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019444:	7dbb      	ldrb	r3, [r7, #22]
 8019446:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	7a9b      	ldrb	r3, [r3, #10]
 801944c:	753b      	strb	r3, [r7, #20]
        break;
 801944e:	e022      	b.n	8019496 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019450:	2301      	movs	r3, #1
 8019452:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	7b1b      	ldrb	r3, [r3, #12]
 8019458:	733b      	strb	r3, [r7, #12]
        break;
 801945a:	e01c      	b.n	8019496 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801945c:	2306      	movs	r3, #6
 801945e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	89db      	ldrh	r3, [r3, #14]
 8019464:	0a1b      	lsrs	r3, r3, #8
 8019466:	b29b      	uxth	r3, r3
 8019468:	b2db      	uxtb	r3, r3
 801946a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	89db      	ldrh	r3, [r3, #14]
 8019470:	b2db      	uxtb	r3, r3
 8019472:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	7c1a      	ldrb	r2, [r3, #16]
 8019478:	4b0f      	ldr	r3, [pc, #60]	@ (80194b8 <SUBGRF_SetPacketParams+0x138>)
 801947a:	4611      	mov	r1, r2
 801947c:	7019      	strb	r1, [r3, #0]
 801947e:	4613      	mov	r3, r2
 8019480:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	7c5b      	ldrb	r3, [r3, #17]
 8019486:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	7c9b      	ldrb	r3, [r3, #18]
 801948c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	7cdb      	ldrb	r3, [r3, #19]
 8019492:	747b      	strb	r3, [r7, #17]
        break;
 8019494:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019496:	7dfb      	ldrb	r3, [r7, #23]
 8019498:	b29a      	uxth	r2, r3
 801949a:	f107 030c 	add.w	r3, r7, #12
 801949e:	4619      	mov	r1, r3
 80194a0:	208c      	movs	r0, #140	@ 0x8c
 80194a2:	f000 f965 	bl	8019770 <SUBGRF_WriteCommand>
 80194a6:	e000      	b.n	80194aa <SUBGRF_SetPacketParams+0x12a>
        return;
 80194a8:	bf00      	nop
}
 80194aa:	3718      	adds	r7, #24
 80194ac:	46bd      	mov	sp, r7
 80194ae:	bd80      	pop	{r7, pc}
 80194b0:	0801bd34 	.word	0x0801bd34
 80194b4:	20001afd 	.word	0x20001afd
 80194b8:	20001afe 	.word	0x20001afe

080194bc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	4603      	mov	r3, r0
 80194c4:	460a      	mov	r2, r1
 80194c6:	71fb      	strb	r3, [r7, #7]
 80194c8:	4613      	mov	r3, r2
 80194ca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80194cc:	79fb      	ldrb	r3, [r7, #7]
 80194ce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80194d0:	79bb      	ldrb	r3, [r7, #6]
 80194d2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80194d4:	f107 030c 	add.w	r3, r7, #12
 80194d8:	2202      	movs	r2, #2
 80194da:	4619      	mov	r1, r3
 80194dc:	208f      	movs	r0, #143	@ 0x8f
 80194de:	f000 f947 	bl	8019770 <SUBGRF_WriteCommand>
}
 80194e2:	bf00      	nop
 80194e4:	3710      	adds	r7, #16
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}

080194ea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80194ea:	b580      	push	{r7, lr}
 80194ec:	b082      	sub	sp, #8
 80194ee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80194f0:	2300      	movs	r3, #0
 80194f2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80194f4:	1d3b      	adds	r3, r7, #4
 80194f6:	2201      	movs	r2, #1
 80194f8:	4619      	mov	r1, r3
 80194fa:	2015      	movs	r0, #21
 80194fc:	f000 f95a 	bl	80197b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019500:	793b      	ldrb	r3, [r7, #4]
 8019502:	425b      	negs	r3, r3
 8019504:	105b      	asrs	r3, r3, #1
 8019506:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019508:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801950c:	4618      	mov	r0, r3
 801950e:	3708      	adds	r7, #8
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}

08019514 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b084      	sub	sp, #16
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801951e:	f107 030c 	add.w	r3, r7, #12
 8019522:	2202      	movs	r2, #2
 8019524:	4619      	mov	r1, r3
 8019526:	2013      	movs	r0, #19
 8019528:	f000 f944 	bl	80197b4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801952c:	f7ff fd7e 	bl	801902c <SUBGRF_GetPacketType>
 8019530:	4603      	mov	r3, r0
 8019532:	2b01      	cmp	r3, #1
 8019534:	d10d      	bne.n	8019552 <SUBGRF_GetRxBufferStatus+0x3e>
 8019536:	4b0c      	ldr	r3, [pc, #48]	@ (8019568 <SUBGRF_GetRxBufferStatus+0x54>)
 8019538:	781b      	ldrb	r3, [r3, #0]
 801953a:	b2db      	uxtb	r3, r3
 801953c:	2b01      	cmp	r3, #1
 801953e:	d108      	bne.n	8019552 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019540:	f240 7002 	movw	r0, #1794	@ 0x702
 8019544:	f000 f878 	bl	8019638 <SUBGRF_ReadRegister>
 8019548:	4603      	mov	r3, r0
 801954a:	461a      	mov	r2, r3
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	701a      	strb	r2, [r3, #0]
 8019550:	e002      	b.n	8019558 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019552:	7b3a      	ldrb	r2, [r7, #12]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019558:	7b7a      	ldrb	r2, [r7, #13]
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	701a      	strb	r2, [r3, #0]
}
 801955e:	bf00      	nop
 8019560:	3710      	adds	r7, #16
 8019562:	46bd      	mov	sp, r7
 8019564:	bd80      	pop	{r7, pc}
 8019566:	bf00      	nop
 8019568:	20001afe 	.word	0x20001afe

0801956c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b084      	sub	sp, #16
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019574:	f107 030c 	add.w	r3, r7, #12
 8019578:	2203      	movs	r2, #3
 801957a:	4619      	mov	r1, r3
 801957c:	2014      	movs	r0, #20
 801957e:	f000 f919 	bl	80197b4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019582:	f7ff fd53 	bl	801902c <SUBGRF_GetPacketType>
 8019586:	4603      	mov	r3, r0
 8019588:	461a      	mov	r2, r3
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d002      	beq.n	801959c <SUBGRF_GetPacketStatus+0x30>
 8019596:	2b01      	cmp	r3, #1
 8019598:	d013      	beq.n	80195c2 <SUBGRF_GetPacketStatus+0x56>
 801959a:	e02a      	b.n	80195f2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801959c:	7b3a      	ldrb	r2, [r7, #12]
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80195a2:	7b7b      	ldrb	r3, [r7, #13]
 80195a4:	425b      	negs	r3, r3
 80195a6:	105b      	asrs	r3, r3, #1
 80195a8:	b25a      	sxtb	r2, r3
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80195ae:	7bbb      	ldrb	r3, [r7, #14]
 80195b0:	425b      	negs	r3, r3
 80195b2:	105b      	asrs	r3, r3, #1
 80195b4:	b25a      	sxtb	r2, r3
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2200      	movs	r2, #0
 80195be:	609a      	str	r2, [r3, #8]
            break;
 80195c0:	e020      	b.n	8019604 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80195c2:	7b3b      	ldrb	r3, [r7, #12]
 80195c4:	425b      	negs	r3, r3
 80195c6:	105b      	asrs	r3, r3, #1
 80195c8:	b25a      	sxtb	r2, r3
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80195ce:	7b7b      	ldrb	r3, [r7, #13]
 80195d0:	b25b      	sxtb	r3, r3
 80195d2:	3302      	adds	r3, #2
 80195d4:	109b      	asrs	r3, r3, #2
 80195d6:	b25a      	sxtb	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80195dc:	7bbb      	ldrb	r3, [r7, #14]
 80195de:	425b      	negs	r3, r3
 80195e0:	105b      	asrs	r3, r3, #1
 80195e2:	b25a      	sxtb	r2, r3
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80195e8:	4b08      	ldr	r3, [pc, #32]	@ (801960c <SUBGRF_GetPacketStatus+0xa0>)
 80195ea:	681a      	ldr	r2, [r3, #0]
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	611a      	str	r2, [r3, #16]
            break;
 80195f0:	e008      	b.n	8019604 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80195f2:	2214      	movs	r2, #20
 80195f4:	2100      	movs	r1, #0
 80195f6:	6878      	ldr	r0, [r7, #4]
 80195f8:	f000 fbf3 	bl	8019de2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	220f      	movs	r2, #15
 8019600:	701a      	strb	r2, [r3, #0]
            break;
 8019602:	bf00      	nop
    }
}
 8019604:	bf00      	nop
 8019606:	3710      	adds	r7, #16
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}
 801960c:	20001b00 	.word	0x20001b00

08019610 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	af00      	add	r7, sp, #0
 8019616:	4603      	mov	r3, r0
 8019618:	460a      	mov	r2, r1
 801961a:	80fb      	strh	r3, [r7, #6]
 801961c:	4613      	mov	r3, r2
 801961e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019620:	1d7a      	adds	r2, r7, #5
 8019622:	88f9      	ldrh	r1, [r7, #6]
 8019624:	2301      	movs	r3, #1
 8019626:	4803      	ldr	r0, [pc, #12]	@ (8019634 <SUBGRF_WriteRegister+0x24>)
 8019628:	f7ed fbc4 	bl	8006db4 <HAL_SUBGHZ_WriteRegisters>
}
 801962c:	bf00      	nop
 801962e:	3708      	adds	r7, #8
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}
 8019634:	20000210 	.word	0x20000210

08019638 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
 801963e:	4603      	mov	r3, r0
 8019640:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019642:	f107 020f 	add.w	r2, r7, #15
 8019646:	88f9      	ldrh	r1, [r7, #6]
 8019648:	2301      	movs	r3, #1
 801964a:	4804      	ldr	r0, [pc, #16]	@ (801965c <SUBGRF_ReadRegister+0x24>)
 801964c:	f7ed fc11 	bl	8006e72 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019650:	7bfb      	ldrb	r3, [r7, #15]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3710      	adds	r7, #16
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}
 801965a:	bf00      	nop
 801965c:	20000210 	.word	0x20000210

08019660 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b086      	sub	sp, #24
 8019664:	af00      	add	r7, sp, #0
 8019666:	4603      	mov	r3, r0
 8019668:	6039      	str	r1, [r7, #0]
 801966a:	80fb      	strh	r3, [r7, #6]
 801966c:	4613      	mov	r3, r2
 801966e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019670:	f3ef 8310 	mrs	r3, PRIMASK
 8019674:	60fb      	str	r3, [r7, #12]
  return(result);
 8019676:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019678:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801967a:	b672      	cpsid	i
}
 801967c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801967e:	88bb      	ldrh	r3, [r7, #4]
 8019680:	88f9      	ldrh	r1, [r7, #6]
 8019682:	683a      	ldr	r2, [r7, #0]
 8019684:	4806      	ldr	r0, [pc, #24]	@ (80196a0 <SUBGRF_WriteRegisters+0x40>)
 8019686:	f7ed fb95 	bl	8006db4 <HAL_SUBGHZ_WriteRegisters>
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801968e:	693b      	ldr	r3, [r7, #16]
 8019690:	f383 8810 	msr	PRIMASK, r3
}
 8019694:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019696:	bf00      	nop
 8019698:	3718      	adds	r7, #24
 801969a:	46bd      	mov	sp, r7
 801969c:	bd80      	pop	{r7, pc}
 801969e:	bf00      	nop
 80196a0:	20000210 	.word	0x20000210

080196a4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b086      	sub	sp, #24
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	4603      	mov	r3, r0
 80196ac:	6039      	str	r1, [r7, #0]
 80196ae:	80fb      	strh	r3, [r7, #6]
 80196b0:	4613      	mov	r3, r2
 80196b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196b4:	f3ef 8310 	mrs	r3, PRIMASK
 80196b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80196ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80196bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196be:	b672      	cpsid	i
}
 80196c0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80196c2:	88bb      	ldrh	r3, [r7, #4]
 80196c4:	88f9      	ldrh	r1, [r7, #6]
 80196c6:	683a      	ldr	r2, [r7, #0]
 80196c8:	4806      	ldr	r0, [pc, #24]	@ (80196e4 <SUBGRF_ReadRegisters+0x40>)
 80196ca:	f7ed fbd2 	bl	8006e72 <HAL_SUBGHZ_ReadRegisters>
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	f383 8810 	msr	PRIMASK, r3
}
 80196d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80196da:	bf00      	nop
 80196dc:	3718      	adds	r7, #24
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	20000210 	.word	0x20000210

080196e8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b086      	sub	sp, #24
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	4603      	mov	r3, r0
 80196f0:	6039      	str	r1, [r7, #0]
 80196f2:	71fb      	strb	r3, [r7, #7]
 80196f4:	4613      	mov	r3, r2
 80196f6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196f8:	f3ef 8310 	mrs	r3, PRIMASK
 80196fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80196fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019702:	b672      	cpsid	i
}
 8019704:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019706:	79bb      	ldrb	r3, [r7, #6]
 8019708:	b29b      	uxth	r3, r3
 801970a:	79f9      	ldrb	r1, [r7, #7]
 801970c:	683a      	ldr	r2, [r7, #0]
 801970e:	4806      	ldr	r0, [pc, #24]	@ (8019728 <SUBGRF_WriteBuffer+0x40>)
 8019710:	f7ed fcc3 	bl	800709a <HAL_SUBGHZ_WriteBuffer>
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019718:	693b      	ldr	r3, [r7, #16]
 801971a:	f383 8810 	msr	PRIMASK, r3
}
 801971e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019720:	bf00      	nop
 8019722:	3718      	adds	r7, #24
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}
 8019728:	20000210 	.word	0x20000210

0801972c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b086      	sub	sp, #24
 8019730:	af00      	add	r7, sp, #0
 8019732:	4603      	mov	r3, r0
 8019734:	6039      	str	r1, [r7, #0]
 8019736:	71fb      	strb	r3, [r7, #7]
 8019738:	4613      	mov	r3, r2
 801973a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801973c:	f3ef 8310 	mrs	r3, PRIMASK
 8019740:	60fb      	str	r3, [r7, #12]
  return(result);
 8019742:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019744:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019746:	b672      	cpsid	i
}
 8019748:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801974a:	79bb      	ldrb	r3, [r7, #6]
 801974c:	b29b      	uxth	r3, r3
 801974e:	79f9      	ldrb	r1, [r7, #7]
 8019750:	683a      	ldr	r2, [r7, #0]
 8019752:	4806      	ldr	r0, [pc, #24]	@ (801976c <SUBGRF_ReadBuffer+0x40>)
 8019754:	f7ed fcf4 	bl	8007140 <HAL_SUBGHZ_ReadBuffer>
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801975c:	693b      	ldr	r3, [r7, #16]
 801975e:	f383 8810 	msr	PRIMASK, r3
}
 8019762:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019764:	bf00      	nop
 8019766:	3718      	adds	r7, #24
 8019768:	46bd      	mov	sp, r7
 801976a:	bd80      	pop	{r7, pc}
 801976c:	20000210 	.word	0x20000210

08019770 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b086      	sub	sp, #24
 8019774:	af00      	add	r7, sp, #0
 8019776:	4603      	mov	r3, r0
 8019778:	6039      	str	r1, [r7, #0]
 801977a:	71fb      	strb	r3, [r7, #7]
 801977c:	4613      	mov	r3, r2
 801977e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019780:	f3ef 8310 	mrs	r3, PRIMASK
 8019784:	60fb      	str	r3, [r7, #12]
  return(result);
 8019786:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019788:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801978a:	b672      	cpsid	i
}
 801978c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801978e:	88bb      	ldrh	r3, [r7, #4]
 8019790:	79f9      	ldrb	r1, [r7, #7]
 8019792:	683a      	ldr	r2, [r7, #0]
 8019794:	4806      	ldr	r0, [pc, #24]	@ (80197b0 <SUBGRF_WriteCommand+0x40>)
 8019796:	f7ed fbcd 	bl	8006f34 <HAL_SUBGHZ_ExecSetCmd>
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	f383 8810 	msr	PRIMASK, r3
}
 80197a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80197a6:	bf00      	nop
 80197a8:	3718      	adds	r7, #24
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}
 80197ae:	bf00      	nop
 80197b0:	20000210 	.word	0x20000210

080197b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b086      	sub	sp, #24
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	4603      	mov	r3, r0
 80197bc:	6039      	str	r1, [r7, #0]
 80197be:	71fb      	strb	r3, [r7, #7]
 80197c0:	4613      	mov	r3, r2
 80197c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197c4:	f3ef 8310 	mrs	r3, PRIMASK
 80197c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80197ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80197cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197ce:	b672      	cpsid	i
}
 80197d0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80197d2:	88bb      	ldrh	r3, [r7, #4]
 80197d4:	79f9      	ldrb	r1, [r7, #7]
 80197d6:	683a      	ldr	r2, [r7, #0]
 80197d8:	4806      	ldr	r0, [pc, #24]	@ (80197f4 <SUBGRF_ReadCommand+0x40>)
 80197da:	f7ed fc0a 	bl	8006ff2 <HAL_SUBGHZ_ExecGetCmd>
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197e2:	693b      	ldr	r3, [r7, #16]
 80197e4:	f383 8810 	msr	PRIMASK, r3
}
 80197e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80197ea:	bf00      	nop
 80197ec:	3718      	adds	r7, #24
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop
 80197f4:	20000210 	.word	0x20000210

080197f8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b084      	sub	sp, #16
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	4603      	mov	r3, r0
 8019800:	460a      	mov	r2, r1
 8019802:	71fb      	strb	r3, [r7, #7]
 8019804:	4613      	mov	r3, r2
 8019806:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019808:	2301      	movs	r3, #1
 801980a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801980c:	79bb      	ldrb	r3, [r7, #6]
 801980e:	2b01      	cmp	r3, #1
 8019810:	d10d      	bne.n	801982e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019812:	79fb      	ldrb	r3, [r7, #7]
 8019814:	2b01      	cmp	r3, #1
 8019816:	d104      	bne.n	8019822 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019818:	2302      	movs	r3, #2
 801981a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801981c:	2004      	movs	r0, #4
 801981e:	f000 f8df 	bl	80199e0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019822:	79fb      	ldrb	r3, [r7, #7]
 8019824:	2b02      	cmp	r3, #2
 8019826:	d107      	bne.n	8019838 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019828:	2303      	movs	r3, #3
 801982a:	73fb      	strb	r3, [r7, #15]
 801982c:	e004      	b.n	8019838 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801982e:	79bb      	ldrb	r3, [r7, #6]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d101      	bne.n	8019838 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019834:	2301      	movs	r3, #1
 8019836:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019838:	7bfb      	ldrb	r3, [r7, #15]
 801983a:	4618      	mov	r0, r3
 801983c:	f7f0 fd6d 	bl	800a31a <RBI_ConfigRFSwitch>
}
 8019840:	bf00      	nop
 8019842:	3710      	adds	r7, #16
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}

08019848 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b084      	sub	sp, #16
 801984c:	af00      	add	r7, sp, #0
 801984e:	4603      	mov	r3, r0
 8019850:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019852:	2301      	movs	r3, #1
 8019854:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019856:	f7f0 fd6e 	bl	800a336 <RBI_GetTxConfig>
 801985a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	2b02      	cmp	r3, #2
 8019860:	d016      	beq.n	8019890 <SUBGRF_SetRfTxPower+0x48>
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	2b02      	cmp	r3, #2
 8019866:	dc16      	bgt.n	8019896 <SUBGRF_SetRfTxPower+0x4e>
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d003      	beq.n	8019876 <SUBGRF_SetRfTxPower+0x2e>
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	2b01      	cmp	r3, #1
 8019872:	d00a      	beq.n	801988a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019874:	e00f      	b.n	8019896 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801987a:	2b0f      	cmp	r3, #15
 801987c:	dd02      	ble.n	8019884 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801987e:	2302      	movs	r3, #2
 8019880:	73fb      	strb	r3, [r7, #15]
            break;
 8019882:	e009      	b.n	8019898 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019884:	2301      	movs	r3, #1
 8019886:	73fb      	strb	r3, [r7, #15]
            break;
 8019888:	e006      	b.n	8019898 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801988a:	2301      	movs	r3, #1
 801988c:	73fb      	strb	r3, [r7, #15]
            break;
 801988e:	e003      	b.n	8019898 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019890:	2302      	movs	r3, #2
 8019892:	73fb      	strb	r3, [r7, #15]
            break;
 8019894:	e000      	b.n	8019898 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019896:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019898:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801989c:	7bfb      	ldrb	r3, [r7, #15]
 801989e:	2202      	movs	r2, #2
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ff fbcd 	bl	8019040 <SUBGRF_SetTxParams>

    return paSelect;
 80198a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80198a8:	4618      	mov	r0, r3
 80198aa:	3710      	adds	r7, #16
 80198ac:	46bd      	mov	sp, r7
 80198ae:	bd80      	pop	{r7, pc}

080198b0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80198b0:	b480      	push	{r7}
 80198b2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80198b4:	2301      	movs	r3, #1
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bc80      	pop	{r7}
 80198bc:	4770      	bx	lr
	...

080198c0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80198c8:	4b03      	ldr	r3, [pc, #12]	@ (80198d8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2001      	movs	r0, #1
 80198ce:	4798      	blx	r3
}
 80198d0:	bf00      	nop
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	20001b08 	.word	0x20001b08

080198dc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b082      	sub	sp, #8
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80198e4:	4b03      	ldr	r3, [pc, #12]	@ (80198f4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	2002      	movs	r0, #2
 80198ea:	4798      	blx	r3
}
 80198ec:	bf00      	nop
 80198ee:	3708      	adds	r7, #8
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}
 80198f4:	20001b08 	.word	0x20001b08

080198f8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019900:	4b03      	ldr	r3, [pc, #12]	@ (8019910 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2040      	movs	r0, #64	@ 0x40
 8019906:	4798      	blx	r3
}
 8019908:	bf00      	nop
 801990a:	3708      	adds	r7, #8
 801990c:	46bd      	mov	sp, r7
 801990e:	bd80      	pop	{r7, pc}
 8019910:	20001b08 	.word	0x20001b08

08019914 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b082      	sub	sp, #8
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	460b      	mov	r3, r1
 801991e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019920:	78fb      	ldrb	r3, [r7, #3]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d002      	beq.n	801992c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019926:	2b01      	cmp	r3, #1
 8019928:	d005      	beq.n	8019936 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801992a:	e00a      	b.n	8019942 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801992c:	4b07      	ldr	r3, [pc, #28]	@ (801994c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	2080      	movs	r0, #128	@ 0x80
 8019932:	4798      	blx	r3
            break;
 8019934:	e005      	b.n	8019942 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019936:	4b05      	ldr	r3, [pc, #20]	@ (801994c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801993e:	4798      	blx	r3
            break;
 8019940:	bf00      	nop
    }
}
 8019942:	bf00      	nop
 8019944:	3708      	adds	r7, #8
 8019946:	46bd      	mov	sp, r7
 8019948:	bd80      	pop	{r7, pc}
 801994a:	bf00      	nop
 801994c:	20001b08 	.word	0x20001b08

08019950 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b082      	sub	sp, #8
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019958:	4b04      	ldr	r3, [pc, #16]	@ (801996c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019960:	4798      	blx	r3
}
 8019962:	bf00      	nop
 8019964:	3708      	adds	r7, #8
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}
 801996a:	bf00      	nop
 801996c:	20001b08 	.word	0x20001b08

08019970 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019978:	4b03      	ldr	r3, [pc, #12]	@ (8019988 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	2020      	movs	r0, #32
 801997e:	4798      	blx	r3
}
 8019980:	bf00      	nop
 8019982:	3708      	adds	r7, #8
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}
 8019988:	20001b08 	.word	0x20001b08

0801998c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019994:	4b03      	ldr	r3, [pc, #12]	@ (80199a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	2004      	movs	r0, #4
 801999a:	4798      	blx	r3
}
 801999c:	bf00      	nop
 801999e:	3708      	adds	r7, #8
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}
 80199a4:	20001b08 	.word	0x20001b08

080199a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80199b0:	4b03      	ldr	r3, [pc, #12]	@ (80199c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	2008      	movs	r0, #8
 80199b6:	4798      	blx	r3
}
 80199b8:	bf00      	nop
 80199ba:	3708      	adds	r7, #8
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}
 80199c0:	20001b08 	.word	0x20001b08

080199c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b082      	sub	sp, #8
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80199cc:	4b03      	ldr	r3, [pc, #12]	@ (80199dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	2010      	movs	r0, #16
 80199d2:	4798      	blx	r3
}
 80199d4:	bf00      	nop
 80199d6:	3708      	adds	r7, #8
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}
 80199dc:	20001b08 	.word	0x20001b08

080199e0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	4603      	mov	r3, r0
 80199e8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80199ea:	f7f0 fcb2 	bl	800a352 <RBI_IsDCDC>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b01      	cmp	r3, #1
 80199f2:	d112      	bne.n	8019a1a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80199f4:	f640 1023 	movw	r0, #2339	@ 0x923
 80199f8:	f7ff fe1e 	bl	8019638 <SUBGRF_ReadRegister>
 80199fc:	4603      	mov	r3, r0
 80199fe:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019a00:	7bfb      	ldrb	r3, [r7, #15]
 8019a02:	f023 0306 	bic.w	r3, r3, #6
 8019a06:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019a08:	7bfa      	ldrb	r2, [r7, #15]
 8019a0a:	79fb      	ldrb	r3, [r7, #7]
 8019a0c:	4313      	orrs	r3, r2
 8019a0e:	b2db      	uxtb	r3, r3
 8019a10:	4619      	mov	r1, r3
 8019a12:	f640 1023 	movw	r0, #2339	@ 0x923
 8019a16:	f7ff fdfb 	bl	8019610 <SUBGRF_WriteRegister>
  }
}
 8019a1a:	bf00      	nop
 8019a1c:	3710      	adds	r7, #16
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}
	...

08019a24 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019a24:	b480      	push	{r7}
 8019a26:	b085      	sub	sp, #20
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d101      	bne.n	8019a36 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019a32:	231f      	movs	r3, #31
 8019a34:	e017      	b.n	8019a66 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019a36:	2300      	movs	r3, #0
 8019a38:	73fb      	strb	r3, [r7, #15]
 8019a3a:	e00f      	b.n	8019a5c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019a3c:	7bfb      	ldrb	r3, [r7, #15]
 8019a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8019a70 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019a44:	687a      	ldr	r2, [r7, #4]
 8019a46:	429a      	cmp	r2, r3
 8019a48:	d205      	bcs.n	8019a56 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019a4a:	7bfb      	ldrb	r3, [r7, #15]
 8019a4c:	4a08      	ldr	r2, [pc, #32]	@ (8019a70 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019a4e:	00db      	lsls	r3, r3, #3
 8019a50:	4413      	add	r3, r2
 8019a52:	791b      	ldrb	r3, [r3, #4]
 8019a54:	e007      	b.n	8019a66 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019a56:	7bfb      	ldrb	r3, [r7, #15]
 8019a58:	3301      	adds	r3, #1
 8019a5a:	73fb      	strb	r3, [r7, #15]
 8019a5c:	7bfb      	ldrb	r3, [r7, #15]
 8019a5e:	2b15      	cmp	r3, #21
 8019a60:	d9ec      	bls.n	8019a3c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019a62:	bf00      	nop
 8019a64:	e7fd      	b.n	8019a62 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019a66:	4618      	mov	r0, r3
 8019a68:	3714      	adds	r7, #20
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	bc80      	pop	{r7}
 8019a6e:	4770      	bx	lr
 8019a70:	0801c320 	.word	0x0801c320

08019a74 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b08a      	sub	sp, #40	@ 0x28
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019a7e:	4b35      	ldr	r3, [pc, #212]	@ (8019b54 <SUBGRF_GetCFO+0xe0>)
 8019a80:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019a82:	f640 0007 	movw	r0, #2055	@ 0x807
 8019a86:	f7ff fdd7 	bl	8019638 <SUBGRF_ReadRegister>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019a8e:	7ffb      	ldrb	r3, [r7, #31]
 8019a90:	08db      	lsrs	r3, r3, #3
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	f003 0303 	and.w	r3, r3, #3
 8019a98:	3328      	adds	r3, #40	@ 0x28
 8019a9a:	443b      	add	r3, r7
 8019a9c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019aa0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019aa2:	7ffb      	ldrb	r3, [r7, #31]
 8019aa4:	f003 0307 	and.w	r3, r3, #7
 8019aa8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019aaa:	7fba      	ldrb	r2, [r7, #30]
 8019aac:	7f7b      	ldrb	r3, [r7, #29]
 8019aae:	3b01      	subs	r3, #1
 8019ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8019ab4:	461a      	mov	r2, r3
 8019ab6:	4b28      	ldr	r3, [pc, #160]	@ (8019b58 <SUBGRF_GetCFO+0xe4>)
 8019ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8019abc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019abe:	69ba      	ldr	r2, [r7, #24]
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ac6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019ac8:	2301      	movs	r3, #1
 8019aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ad2:	697a      	ldr	r2, [r7, #20]
 8019ad4:	fb02 f303 	mul.w	r3, r2, r3
 8019ad8:	2b07      	cmp	r3, #7
 8019ada:	d802      	bhi.n	8019ae2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019adc:	2302      	movs	r3, #2
 8019ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ae6:	697a      	ldr	r2, [r7, #20]
 8019ae8:	fb02 f303 	mul.w	r3, r2, r3
 8019aec:	2b03      	cmp	r3, #3
 8019aee:	d802      	bhi.n	8019af6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019af0:	2304      	movs	r3, #4
 8019af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019af6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019afa:	69bb      	ldr	r3, [r7, #24]
 8019afc:	fb02 f303 	mul.w	r3, r2, r3
 8019b00:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019b02:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019b06:	f7ff fd97 	bl	8019638 <SUBGRF_ReadRegister>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	021b      	lsls	r3, r3, #8
 8019b0e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019b12:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019b14:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019b18:	f7ff fd8e 	bl	8019638 <SUBGRF_ReadRegister>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	461a      	mov	r2, r3
 8019b20:	6a3b      	ldr	r3, [r7, #32]
 8019b22:	4313      	orrs	r3, r2
 8019b24:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019b26:	6a3b      	ldr	r3, [r7, #32]
 8019b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d005      	beq.n	8019b3c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019b30:	6a3b      	ldr	r3, [r7, #32]
 8019b32:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019b36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019b3a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019b3c:	693b      	ldr	r3, [r7, #16]
 8019b3e:	095b      	lsrs	r3, r3, #5
 8019b40:	6a3a      	ldr	r2, [r7, #32]
 8019b42:	fb02 f303 	mul.w	r3, r2, r3
 8019b46:	11da      	asrs	r2, r3, #7
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	601a      	str	r2, [r3, #0]
}
 8019b4c:	bf00      	nop
 8019b4e:	3728      	adds	r7, #40	@ 0x28
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	0c0a0804 	.word	0x0c0a0804
 8019b58:	01e84800 	.word	0x01e84800

08019b5c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019b5c:	b480      	push	{r7}
 8019b5e:	b087      	sub	sp, #28
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	4603      	mov	r3, r0
 8019b64:	60b9      	str	r1, [r7, #8]
 8019b66:	607a      	str	r2, [r7, #4]
 8019b68:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b72:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019b74:	697b      	ldr	r3, [r7, #20]
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	371c      	adds	r7, #28
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bc80      	pop	{r7}
 8019b7e:	4770      	bx	lr

08019b80 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019b80:	b480      	push	{r7}
 8019b82:	b087      	sub	sp, #28
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	4603      	mov	r3, r0
 8019b88:	60b9      	str	r1, [r7, #8]
 8019b8a:	607a      	str	r2, [r7, #4]
 8019b8c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019b92:	f04f 33ff 	mov.w	r3, #4294967295
 8019b96:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019b98:	697b      	ldr	r3, [r7, #20]
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	371c      	adds	r7, #28
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bc80      	pop	{r7}
 8019ba2:	4770      	bx	lr

08019ba4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b085      	sub	sp, #20
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019bb0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	3714      	adds	r7, #20
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bc80      	pop	{r7}
 8019bbc:	4770      	bx	lr

08019bbe <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019bbe:	b480      	push	{r7}
 8019bc0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019bc2:	bf00      	nop
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bc80      	pop	{r7}
 8019bc8:	4770      	bx	lr

08019bca <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019bca:	b480      	push	{r7}
 8019bcc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019bce:	2300      	movs	r3, #0
#endif
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bc80      	pop	{r7}
 8019bd6:	4770      	bx	lr

08019bd8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019bd8:	b480      	push	{r7}
 8019bda:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019bdc:	2300      	movs	r3, #0
#endif
}
 8019bde:	4618      	mov	r0, r3
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bc80      	pop	{r7}
 8019be4:	4770      	bx	lr

08019be6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019be6:	b480      	push	{r7}
 8019be8:	b083      	sub	sp, #12
 8019bea:	af00      	add	r7, sp, #0
 8019bec:	4603      	mov	r3, r0
 8019bee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019bf0:	bf00      	nop
 8019bf2:	370c      	adds	r7, #12
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bc80      	pop	{r7}
 8019bf8:	4770      	bx	lr

08019bfa <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019bfa:	b480      	push	{r7}
 8019bfc:	b087      	sub	sp, #28
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	60f8      	str	r0, [r7, #12]
 8019c02:	460b      	mov	r3, r1
 8019c04:	607a      	str	r2, [r7, #4]
 8019c06:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019c08:	f04f 33ff 	mov.w	r3, #4294967295
 8019c0c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019c0e:	697b      	ldr	r3, [r7, #20]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	371c      	adds	r7, #28
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bc80      	pop	{r7}
 8019c18:	4770      	bx	lr

08019c1a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019c1a:	b480      	push	{r7}
 8019c1c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019c1e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019c22:	4618      	mov	r0, r3
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bc80      	pop	{r7}
 8019c28:	4770      	bx	lr

08019c2a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019c2a:	b480      	push	{r7}
 8019c2c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019c2e:	bf00      	nop
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bc80      	pop	{r7}
 8019c34:	4770      	bx	lr

08019c36 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019c36:	b480      	push	{r7}
 8019c38:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019c3a:	bf00      	nop
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	bc80      	pop	{r7}
 8019c40:	4770      	bx	lr

08019c42 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019c42:	b480      	push	{r7}
 8019c44:	b083      	sub	sp, #12
 8019c46:	af00      	add	r7, sp, #0
 8019c48:	4603      	mov	r3, r0
 8019c4a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019c4c:	bf00      	nop
 8019c4e:	370c      	adds	r7, #12
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bc80      	pop	{r7}
 8019c54:	4770      	bx	lr
	...

08019c58 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019c58:	b480      	push	{r7}
 8019c5a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019c5c:	4b04      	ldr	r3, [pc, #16]	@ (8019c70 <UTIL_LPM_Init+0x18>)
 8019c5e:	2200      	movs	r2, #0
 8019c60:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019c62:	4b04      	ldr	r3, [pc, #16]	@ (8019c74 <UTIL_LPM_Init+0x1c>)
 8019c64:	2200      	movs	r2, #0
 8019c66:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019c68:	bf00      	nop
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bc80      	pop	{r7}
 8019c6e:	4770      	bx	lr
 8019c70:	20001b0c 	.word	0x20001b0c
 8019c74:	20001b10 	.word	0x20001b10

08019c78 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b087      	sub	sp, #28
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
 8019c80:	460b      	mov	r3, r1
 8019c82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c84:	f3ef 8310 	mrs	r3, PRIMASK
 8019c88:	613b      	str	r3, [r7, #16]
  return(result);
 8019c8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c8e:	b672      	cpsid	i
}
 8019c90:	bf00      	nop
  
  switch( state )
 8019c92:	78fb      	ldrb	r3, [r7, #3]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d008      	beq.n	8019caa <UTIL_LPM_SetStopMode+0x32>
 8019c98:	2b01      	cmp	r3, #1
 8019c9a:	d10e      	bne.n	8019cba <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd4 <UTIL_LPM_SetStopMode+0x5c>)
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	4313      	orrs	r3, r2
 8019ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8019cd4 <UTIL_LPM_SetStopMode+0x5c>)
 8019ca6:	6013      	str	r3, [r2, #0]
      break;
 8019ca8:	e008      	b.n	8019cbc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	43da      	mvns	r2, r3
 8019cae:	4b09      	ldr	r3, [pc, #36]	@ (8019cd4 <UTIL_LPM_SetStopMode+0x5c>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	4013      	ands	r3, r2
 8019cb4:	4a07      	ldr	r2, [pc, #28]	@ (8019cd4 <UTIL_LPM_SetStopMode+0x5c>)
 8019cb6:	6013      	str	r3, [r2, #0]
      break;
 8019cb8:	e000      	b.n	8019cbc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019cba:	bf00      	nop
 8019cbc:	697b      	ldr	r3, [r7, #20]
 8019cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	f383 8810 	msr	PRIMASK, r3
}
 8019cc6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019cc8:	bf00      	nop
 8019cca:	371c      	adds	r7, #28
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bc80      	pop	{r7}
 8019cd0:	4770      	bx	lr
 8019cd2:	bf00      	nop
 8019cd4:	20001b0c 	.word	0x20001b0c

08019cd8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b087      	sub	sp, #28
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8019ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8019cea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019cee:	b672      	cpsid	i
}
 8019cf0:	bf00      	nop
  
  switch(state)
 8019cf2:	78fb      	ldrb	r3, [r7, #3]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d008      	beq.n	8019d0a <UTIL_LPM_SetOffMode+0x32>
 8019cf8:	2b01      	cmp	r3, #1
 8019cfa:	d10e      	bne.n	8019d1a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8019d34 <UTIL_LPM_SetOffMode+0x5c>)
 8019cfe:	681a      	ldr	r2, [r3, #0]
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	4313      	orrs	r3, r2
 8019d04:	4a0b      	ldr	r2, [pc, #44]	@ (8019d34 <UTIL_LPM_SetOffMode+0x5c>)
 8019d06:	6013      	str	r3, [r2, #0]
      break;
 8019d08:	e008      	b.n	8019d1c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	43da      	mvns	r2, r3
 8019d0e:	4b09      	ldr	r3, [pc, #36]	@ (8019d34 <UTIL_LPM_SetOffMode+0x5c>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	4013      	ands	r3, r2
 8019d14:	4a07      	ldr	r2, [pc, #28]	@ (8019d34 <UTIL_LPM_SetOffMode+0x5c>)
 8019d16:	6013      	str	r3, [r2, #0]
      break;
 8019d18:	e000      	b.n	8019d1c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019d1a:	bf00      	nop
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	f383 8810 	msr	PRIMASK, r3
}
 8019d26:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019d28:	bf00      	nop
 8019d2a:	371c      	adds	r7, #28
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bc80      	pop	{r7}
 8019d30:	4770      	bx	lr
 8019d32:	bf00      	nop
 8019d34:	20001b10 	.word	0x20001b10

08019d38 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b084      	sub	sp, #16
 8019d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8019d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8019d44:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019d46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d48:	b672      	cpsid	i
}
 8019d4a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019d4c:	4b12      	ldr	r3, [pc, #72]	@ (8019d98 <UTIL_LPM_EnterLowPower+0x60>)
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d006      	beq.n	8019d62 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019d54:	4b11      	ldr	r3, [pc, #68]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019d5a:	4b10      	ldr	r3, [pc, #64]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	4798      	blx	r3
 8019d60:	e010      	b.n	8019d84 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019d62:	4b0f      	ldr	r3, [pc, #60]	@ (8019da0 <UTIL_LPM_EnterLowPower+0x68>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d006      	beq.n	8019d78 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d6c:	689b      	ldr	r3, [r3, #8]
 8019d6e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019d70:	4b0a      	ldr	r3, [pc, #40]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d72:	68db      	ldr	r3, [r3, #12]
 8019d74:	4798      	blx	r3
 8019d76:	e005      	b.n	8019d84 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019d78:	4b08      	ldr	r3, [pc, #32]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d7a:	691b      	ldr	r3, [r3, #16]
 8019d7c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019d7e:	4b07      	ldr	r3, [pc, #28]	@ (8019d9c <UTIL_LPM_EnterLowPower+0x64>)
 8019d80:	695b      	ldr	r3, [r3, #20]
 8019d82:	4798      	blx	r3
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f383 8810 	msr	PRIMASK, r3
}
 8019d8e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019d90:	bf00      	nop
 8019d92:	3710      	adds	r7, #16
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	20001b0c 	.word	0x20001b0c
 8019d9c:	0801bd98 	.word	0x0801bd98
 8019da0:	20001b10 	.word	0x20001b10

08019da4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019da4:	b480      	push	{r7}
 8019da6:	b087      	sub	sp, #28
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	60f8      	str	r0, [r7, #12]
 8019dac:	60b9      	str	r1, [r7, #8]
 8019dae:	4613      	mov	r3, r2
 8019db0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019dba:	e007      	b.n	8019dcc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019dbc:	693a      	ldr	r2, [r7, #16]
 8019dbe:	1c53      	adds	r3, r2, #1
 8019dc0:	613b      	str	r3, [r7, #16]
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	1c59      	adds	r1, r3, #1
 8019dc6:	6179      	str	r1, [r7, #20]
 8019dc8:	7812      	ldrb	r2, [r2, #0]
 8019dca:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019dcc:	88fb      	ldrh	r3, [r7, #6]
 8019dce:	1e5a      	subs	r2, r3, #1
 8019dd0:	80fa      	strh	r2, [r7, #6]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d1f2      	bne.n	8019dbc <UTIL_MEM_cpy_8+0x18>
    }
}
 8019dd6:	bf00      	nop
 8019dd8:	bf00      	nop
 8019dda:	371c      	adds	r7, #28
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bc80      	pop	{r7}
 8019de0:	4770      	bx	lr

08019de2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019de2:	b480      	push	{r7}
 8019de4:	b085      	sub	sp, #20
 8019de6:	af00      	add	r7, sp, #0
 8019de8:	6078      	str	r0, [r7, #4]
 8019dea:	460b      	mov	r3, r1
 8019dec:	70fb      	strb	r3, [r7, #3]
 8019dee:	4613      	mov	r3, r2
 8019df0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019df6:	e004      	b.n	8019e02 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	1c5a      	adds	r2, r3, #1
 8019dfc:	60fa      	str	r2, [r7, #12]
 8019dfe:	78fa      	ldrb	r2, [r7, #3]
 8019e00:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019e02:	883b      	ldrh	r3, [r7, #0]
 8019e04:	1e5a      	subs	r2, r3, #1
 8019e06:	803a      	strh	r2, [r7, #0]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d1f5      	bne.n	8019df8 <UTIL_MEM_set_8+0x16>
  }
}
 8019e0c:	bf00      	nop
 8019e0e:	bf00      	nop
 8019e10:	3714      	adds	r7, #20
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bc80      	pop	{r7}
 8019e16:	4770      	bx	lr

08019e18 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019e18:	b082      	sub	sp, #8
 8019e1a:	b480      	push	{r7}
 8019e1c:	b087      	sub	sp, #28
 8019e1e:	af00      	add	r7, sp, #0
 8019e20:	60f8      	str	r0, [r7, #12]
 8019e22:	1d38      	adds	r0, r7, #4
 8019e24:	e880 0006 	stmia.w	r0, {r1, r2}
 8019e28:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	613b      	str	r3, [r7, #16]
 8019e2e:	2300      	movs	r3, #0
 8019e30:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e36:	4413      	add	r3, r2
 8019e38:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019e3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	4413      	add	r3, r2
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	b21b      	sxth	r3, r3
 8019e4c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019e4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019e56:	db0a      	blt.n	8019e6e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019e58:	693b      	ldr	r3, [r7, #16]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019e5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	b21b      	sxth	r3, r3
 8019e6c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	461a      	mov	r2, r3
 8019e72:	f107 0310 	add.w	r3, r7, #16
 8019e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019e7e:	68f8      	ldr	r0, [r7, #12]
 8019e80:	371c      	adds	r7, #28
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bc80      	pop	{r7}
 8019e86:	b002      	add	sp, #8
 8019e88:	4770      	bx	lr

08019e8a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	b480      	push	{r7}
 8019e8e:	b087      	sub	sp, #28
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	60f8      	str	r0, [r7, #12]
 8019e94:	1d38      	adds	r0, r7, #4
 8019e96:	e880 0006 	stmia.w	r0, {r1, r2}
 8019e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	613b      	str	r3, [r7, #16]
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019ea4:	687a      	ldr	r2, [r7, #4]
 8019ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ea8:	1ad3      	subs	r3, r2, r3
 8019eaa:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019eac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019eb0:	b29a      	uxth	r2, r3
 8019eb2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	1ad3      	subs	r3, r2, r3
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	b21b      	sxth	r3, r3
 8019ebe:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	da0a      	bge.n	8019ede <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019ece:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ed2:	b29b      	uxth	r3, r3
 8019ed4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	b21b      	sxth	r3, r3
 8019edc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	461a      	mov	r2, r3
 8019ee2:	f107 0310 	add.w	r3, r7, #16
 8019ee6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019eea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019eee:	68f8      	ldr	r0, [r7, #12]
 8019ef0:	371c      	adds	r7, #28
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bc80      	pop	{r7}
 8019ef6:	b002      	add	sp, #8
 8019ef8:	4770      	bx	lr
	...

08019efc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b088      	sub	sp, #32
 8019f00:	af02      	add	r7, sp, #8
 8019f02:	463b      	mov	r3, r7
 8019f04:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019f08:	2300      	movs	r3, #0
 8019f0a:	60bb      	str	r3, [r7, #8]
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019f10:	4b10      	ldr	r3, [pc, #64]	@ (8019f54 <SysTimeSet+0x58>)
 8019f12:	691b      	ldr	r3, [r3, #16]
 8019f14:	f107 0208 	add.w	r2, r7, #8
 8019f18:	3204      	adds	r2, #4
 8019f1a:	4610      	mov	r0, r2
 8019f1c:	4798      	blx	r3
 8019f1e:	4603      	mov	r3, r0
 8019f20:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019f22:	f107 0010 	add.w	r0, r7, #16
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	9300      	str	r3, [sp, #0]
 8019f2a:	68bb      	ldr	r3, [r7, #8]
 8019f2c:	463a      	mov	r2, r7
 8019f2e:	ca06      	ldmia	r2, {r1, r2}
 8019f30:	f7ff ffab 	bl	8019e8a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019f34:	4b07      	ldr	r3, [pc, #28]	@ (8019f54 <SysTimeSet+0x58>)
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	693a      	ldr	r2, [r7, #16]
 8019f3a:	4610      	mov	r0, r2
 8019f3c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019f3e:	4b05      	ldr	r3, [pc, #20]	@ (8019f54 <SysTimeSet+0x58>)
 8019f40:	689b      	ldr	r3, [r3, #8]
 8019f42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019f46:	4610      	mov	r0, r2
 8019f48:	4798      	blx	r3
}
 8019f4a:	bf00      	nop
 8019f4c:	3718      	adds	r7, #24
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}
 8019f52:	bf00      	nop
 8019f54:	0801be7c 	.word	0x0801be7c

08019f58 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b08a      	sub	sp, #40	@ 0x28
 8019f5c:	af02      	add	r7, sp, #8
 8019f5e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019f60:	2300      	movs	r3, #0
 8019f62:	61bb      	str	r3, [r7, #24]
 8019f64:	2300      	movs	r3, #0
 8019f66:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019f68:	2300      	movs	r3, #0
 8019f6a:	613b      	str	r3, [r7, #16]
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019f70:	4b14      	ldr	r3, [pc, #80]	@ (8019fc4 <SysTimeGet+0x6c>)
 8019f72:	691b      	ldr	r3, [r3, #16]
 8019f74:	f107 0218 	add.w	r2, r7, #24
 8019f78:	3204      	adds	r2, #4
 8019f7a:	4610      	mov	r0, r2
 8019f7c:	4798      	blx	r3
 8019f7e:	4603      	mov	r3, r0
 8019f80:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019f82:	4b10      	ldr	r3, [pc, #64]	@ (8019fc4 <SysTimeGet+0x6c>)
 8019f84:	68db      	ldr	r3, [r3, #12]
 8019f86:	4798      	blx	r3
 8019f88:	4603      	mov	r3, r0
 8019f8a:	b21b      	sxth	r3, r3
 8019f8c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8019fc4 <SysTimeGet+0x6c>)
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	4798      	blx	r3
 8019f94:	4603      	mov	r3, r0
 8019f96:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019f98:	f107 0010 	add.w	r0, r7, #16
 8019f9c:	69fb      	ldr	r3, [r7, #28]
 8019f9e:	9300      	str	r3, [sp, #0]
 8019fa0:	69bb      	ldr	r3, [r7, #24]
 8019fa2:	f107 0208 	add.w	r2, r7, #8
 8019fa6:	ca06      	ldmia	r2, {r1, r2}
 8019fa8:	f7ff ff36 	bl	8019e18 <SysTimeAdd>

  return sysTime;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	461a      	mov	r2, r3
 8019fb0:	f107 0310 	add.w	r3, r7, #16
 8019fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019fb8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	3720      	adds	r7, #32
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}
 8019fc4:	0801be7c 	.word	0x0801be7c

08019fc8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b084      	sub	sp, #16
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	60bb      	str	r3, [r7, #8]
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019fd8:	4b0a      	ldr	r3, [pc, #40]	@ (801a004 <SysTimeGetMcuTime+0x3c>)
 8019fda:	691b      	ldr	r3, [r3, #16]
 8019fdc:	f107 0208 	add.w	r2, r7, #8
 8019fe0:	3204      	adds	r2, #4
 8019fe2:	4610      	mov	r0, r2
 8019fe4:	4798      	blx	r3
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	461a      	mov	r2, r3
 8019fee:	f107 0308 	add.w	r3, r7, #8
 8019ff2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ff6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	3710      	adds	r7, #16
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	0801be7c 	.word	0x0801be7c

0801a008 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af02      	add	r7, sp, #8
 801a00e:	463b      	mov	r3, r7
 801a010:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a014:	4b0f      	ldr	r3, [pc, #60]	@ (801a054 <SysTimeToMs+0x4c>)
 801a016:	68db      	ldr	r3, [r3, #12]
 801a018:	4798      	blx	r3
 801a01a:	4603      	mov	r3, r0
 801a01c:	b21b      	sxth	r3, r3
 801a01e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a020:	4b0c      	ldr	r3, [pc, #48]	@ (801a054 <SysTimeToMs+0x4c>)
 801a022:	685b      	ldr	r3, [r3, #4]
 801a024:	4798      	blx	r3
 801a026:	4603      	mov	r3, r0
 801a028:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a02a:	f107 0008 	add.w	r0, r7, #8
 801a02e:	697b      	ldr	r3, [r7, #20]
 801a030:	9300      	str	r3, [sp, #0]
 801a032:	693b      	ldr	r3, [r7, #16]
 801a034:	463a      	mov	r2, r7
 801a036:	ca06      	ldmia	r2, {r1, r2}
 801a038:	f7ff ff27 	bl	8019e8a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a042:	fb02 f303 	mul.w	r3, r2, r3
 801a046:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a04a:	4413      	add	r3, r2
}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3718      	adds	r7, #24
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}
 801a054:	0801be7c 	.word	0x0801be7c

0801a058 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b08a      	sub	sp, #40	@ 0x28
 801a05c:	af02      	add	r7, sp, #8
 801a05e:	6078      	str	r0, [r7, #4]
 801a060:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	4a19      	ldr	r2, [pc, #100]	@ (801a0cc <SysTimeFromMs+0x74>)
 801a066:	fba2 2303 	umull	r2, r3, r2, r3
 801a06a:	099b      	lsrs	r3, r3, #6
 801a06c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a06e:	69fb      	ldr	r3, [r7, #28]
 801a070:	617b      	str	r3, [r7, #20]
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	b29a      	uxth	r2, r3
 801a076:	69fb      	ldr	r3, [r7, #28]
 801a078:	b29b      	uxth	r3, r3
 801a07a:	4619      	mov	r1, r3
 801a07c:	0149      	lsls	r1, r1, #5
 801a07e:	1ac9      	subs	r1, r1, r3
 801a080:	0089      	lsls	r1, r1, #2
 801a082:	440b      	add	r3, r1
 801a084:	00db      	lsls	r3, r3, #3
 801a086:	b29b      	uxth	r3, r3
 801a088:	1ad3      	subs	r3, r2, r3
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	b21b      	sxth	r3, r3
 801a08e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a090:	f107 030c 	add.w	r3, r7, #12
 801a094:	2200      	movs	r2, #0
 801a096:	601a      	str	r2, [r3, #0]
 801a098:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a09a:	4b0d      	ldr	r3, [pc, #52]	@ (801a0d0 <SysTimeFromMs+0x78>)
 801a09c:	68db      	ldr	r3, [r3, #12]
 801a09e:	4798      	blx	r3
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	b21b      	sxth	r3, r3
 801a0a4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a0a6:	4b0a      	ldr	r3, [pc, #40]	@ (801a0d0 <SysTimeFromMs+0x78>)
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	4798      	blx	r3
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	f107 0214 	add.w	r2, r7, #20
 801a0bc:	ca06      	ldmia	r2, {r1, r2}
 801a0be:	f7ff feab 	bl	8019e18 <SysTimeAdd>
}
 801a0c2:	6878      	ldr	r0, [r7, #4]
 801a0c4:	3720      	adds	r7, #32
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
 801a0ca:	bf00      	nop
 801a0cc:	10624dd3 	.word	0x10624dd3
 801a0d0:	0801be7c 	.word	0x0801be7c

0801a0d4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b085      	sub	sp, #20
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a0e0:	e00e      	b.n	801a100 <ee_skip_atoi+0x2c>
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	4413      	add	r3, r2
 801a0ea:	005b      	lsls	r3, r3, #1
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	1c59      	adds	r1, r3, #1
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	6011      	str	r1, [r2, #0]
 801a0f8:	781b      	ldrb	r3, [r3, #0]
 801a0fa:	4403      	add	r3, r0
 801a0fc:	3b30      	subs	r3, #48	@ 0x30
 801a0fe:	60fb      	str	r3, [r7, #12]
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	2b2f      	cmp	r3, #47	@ 0x2f
 801a108:	d904      	bls.n	801a114 <ee_skip_atoi+0x40>
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	2b39      	cmp	r3, #57	@ 0x39
 801a112:	d9e6      	bls.n	801a0e2 <ee_skip_atoi+0xe>
  return i;
 801a114:	68fb      	ldr	r3, [r7, #12]
}
 801a116:	4618      	mov	r0, r3
 801a118:	3714      	adds	r7, #20
 801a11a:	46bd      	mov	sp, r7
 801a11c:	bc80      	pop	{r7}
 801a11e:	4770      	bx	lr

0801a120 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a120:	b480      	push	{r7}
 801a122:	b099      	sub	sp, #100	@ 0x64
 801a124:	af00      	add	r7, sp, #0
 801a126:	60f8      	str	r0, [r7, #12]
 801a128:	60b9      	str	r1, [r7, #8]
 801a12a:	607a      	str	r2, [r7, #4]
 801a12c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a12e:	4b71      	ldr	r3, [pc, #452]	@ (801a2f4 <ee_number+0x1d4>)
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d002      	beq.n	801a144 <ee_number+0x24>
 801a13e:	4b6e      	ldr	r3, [pc, #440]	@ (801a2f8 <ee_number+0x1d8>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	2b01      	cmp	r3, #1
 801a148:	dd02      	ble.n	801a150 <ee_number+0x30>
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	2b24      	cmp	r3, #36	@ 0x24
 801a14e:	dd01      	ble.n	801a154 <ee_number+0x34>
 801a150:	2300      	movs	r3, #0
 801a152:	e0ca      	b.n	801a2ea <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a156:	f003 0301 	and.w	r3, r3, #1
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d001      	beq.n	801a162 <ee_number+0x42>
 801a15e:	2330      	movs	r3, #48	@ 0x30
 801a160:	e000      	b.n	801a164 <ee_number+0x44>
 801a162:	2320      	movs	r3, #32
 801a164:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a168:	2300      	movs	r3, #0
 801a16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a16e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a170:	f003 0302 	and.w	r3, r3, #2
 801a174:	2b00      	cmp	r3, #0
 801a176:	d00b      	beq.n	801a190 <ee_number+0x70>
  {
    if (num < 0)
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	da08      	bge.n	801a190 <ee_number+0x70>
    {
      sign = '-';
 801a17e:	232d      	movs	r3, #45	@ 0x2d
 801a180:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	425b      	negs	r3, r3
 801a188:	607b      	str	r3, [r7, #4]
      size--;
 801a18a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a18c:	3b01      	subs	r3, #1
 801a18e:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a190:	2300      	movs	r3, #0
 801a192:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d11e      	bne.n	801a1d8 <ee_number+0xb8>
    tmp[i++] = '0';
 801a19a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a19c:	1c5a      	adds	r2, r3, #1
 801a19e:	657a      	str	r2, [r7, #84]	@ 0x54
 801a1a0:	3360      	adds	r3, #96	@ 0x60
 801a1a2:	443b      	add	r3, r7
 801a1a4:	2230      	movs	r2, #48	@ 0x30
 801a1a6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a1aa:	e018      	b.n	801a1de <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	683a      	ldr	r2, [r7, #0]
 801a1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 801a1b4:	fb01 f202 	mul.w	r2, r1, r2
 801a1b8:	1a9b      	subs	r3, r3, r2
 801a1ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1bc:	441a      	add	r2, r3
 801a1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1c0:	1c59      	adds	r1, r3, #1
 801a1c2:	6579      	str	r1, [r7, #84]	@ 0x54
 801a1c4:	7812      	ldrb	r2, [r2, #0]
 801a1c6:	3360      	adds	r3, #96	@ 0x60
 801a1c8:	443b      	add	r3, r7
 801a1ca:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a1d6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d1e6      	bne.n	801a1ac <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a1de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a1e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	dd01      	ble.n	801a1ea <ee_number+0xca>
 801a1e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a1ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a1ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a1ee:	1ad3      	subs	r3, r2, r3
 801a1f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a1f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a1f4:	f003 0301 	and.w	r3, r3, #1
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d112      	bne.n	801a222 <ee_number+0x102>
 801a1fc:	e00c      	b.n	801a218 <ee_number+0xf8>
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	1c5a      	adds	r2, r3, #1
 801a202:	60fa      	str	r2, [r7, #12]
 801a204:	2220      	movs	r2, #32
 801a206:	701a      	strb	r2, [r3, #0]
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	3b01      	subs	r3, #1
 801a20c:	60bb      	str	r3, [r7, #8]
 801a20e:	68bb      	ldr	r3, [r7, #8]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d101      	bne.n	801a218 <ee_number+0xf8>
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	e068      	b.n	801a2ea <ee_number+0x1ca>
 801a218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a21a:	1e5a      	subs	r2, r3, #1
 801a21c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a21e:	2b00      	cmp	r3, #0
 801a220:	dced      	bgt.n	801a1fe <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a222:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a226:	2b00      	cmp	r3, #0
 801a228:	d01b      	beq.n	801a262 <ee_number+0x142>
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	1c5a      	adds	r2, r3, #1
 801a22e:	60fa      	str	r2, [r7, #12]
 801a230:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a234:	701a      	strb	r2, [r3, #0]
 801a236:	68bb      	ldr	r3, [r7, #8]
 801a238:	3b01      	subs	r3, #1
 801a23a:	60bb      	str	r3, [r7, #8]
 801a23c:	68bb      	ldr	r3, [r7, #8]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d10f      	bne.n	801a262 <ee_number+0x142>
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	e051      	b.n	801a2ea <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	1c5a      	adds	r2, r3, #1
 801a24a:	60fa      	str	r2, [r7, #12]
 801a24c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a250:	701a      	strb	r2, [r3, #0]
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	3b01      	subs	r3, #1
 801a256:	60bb      	str	r3, [r7, #8]
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d101      	bne.n	801a262 <ee_number+0x142>
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	e043      	b.n	801a2ea <ee_number+0x1ca>
 801a262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a264:	1e5a      	subs	r2, r3, #1
 801a266:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a268:	2b00      	cmp	r3, #0
 801a26a:	dcec      	bgt.n	801a246 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a26c:	e00c      	b.n	801a288 <ee_number+0x168>
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	1c5a      	adds	r2, r3, #1
 801a272:	60fa      	str	r2, [r7, #12]
 801a274:	2230      	movs	r2, #48	@ 0x30
 801a276:	701a      	strb	r2, [r3, #0]
 801a278:	68bb      	ldr	r3, [r7, #8]
 801a27a:	3b01      	subs	r3, #1
 801a27c:	60bb      	str	r3, [r7, #8]
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d101      	bne.n	801a288 <ee_number+0x168>
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	e030      	b.n	801a2ea <ee_number+0x1ca>
 801a288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a28a:	1e5a      	subs	r2, r3, #1
 801a28c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a28e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a290:	429a      	cmp	r2, r3
 801a292:	dbec      	blt.n	801a26e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a294:	e010      	b.n	801a2b8 <ee_number+0x198>
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	1c5a      	adds	r2, r3, #1
 801a29a:	60fa      	str	r2, [r7, #12]
 801a29c:	f107 0110 	add.w	r1, r7, #16
 801a2a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2a2:	440a      	add	r2, r1
 801a2a4:	7812      	ldrb	r2, [r2, #0]
 801a2a6:	701a      	strb	r2, [r3, #0]
 801a2a8:	68bb      	ldr	r3, [r7, #8]
 801a2aa:	3b01      	subs	r3, #1
 801a2ac:	60bb      	str	r3, [r7, #8]
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d101      	bne.n	801a2b8 <ee_number+0x198>
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	e018      	b.n	801a2ea <ee_number+0x1ca>
 801a2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2ba:	1e5a      	subs	r2, r3, #1
 801a2bc:	657a      	str	r2, [r7, #84]	@ 0x54
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	dce9      	bgt.n	801a296 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a2c2:	e00c      	b.n	801a2de <ee_number+0x1be>
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	1c5a      	adds	r2, r3, #1
 801a2c8:	60fa      	str	r2, [r7, #12]
 801a2ca:	2220      	movs	r2, #32
 801a2cc:	701a      	strb	r2, [r3, #0]
 801a2ce:	68bb      	ldr	r3, [r7, #8]
 801a2d0:	3b01      	subs	r3, #1
 801a2d2:	60bb      	str	r3, [r7, #8]
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d101      	bne.n	801a2de <ee_number+0x1be>
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	e005      	b.n	801a2ea <ee_number+0x1ca>
 801a2de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2e0:	1e5a      	subs	r2, r3, #1
 801a2e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	dced      	bgt.n	801a2c4 <ee_number+0x1a4>

  return str;
 801a2e8:	68fb      	ldr	r3, [r7, #12]
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3764      	adds	r7, #100	@ 0x64
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bc80      	pop	{r7}
 801a2f2:	4770      	bx	lr
 801a2f4:	20000148 	.word	0x20000148
 801a2f8:	2000014c 	.word	0x2000014c

0801a2fc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b092      	sub	sp, #72	@ 0x48
 801a300:	af04      	add	r7, sp, #16
 801a302:	60f8      	str	r0, [r7, #12]
 801a304:	60b9      	str	r1, [r7, #8]
 801a306:	607a      	str	r2, [r7, #4]
 801a308:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a30a:	68bb      	ldr	r3, [r7, #8]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	dc01      	bgt.n	801a314 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a310:	2300      	movs	r3, #0
 801a312:	e13e      	b.n	801a592 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a318:	e128      	b.n	801a56c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a31a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	1ad2      	subs	r2, r2, r3
 801a320:	68bb      	ldr	r3, [r7, #8]
 801a322:	3b01      	subs	r3, #1
 801a324:	429a      	cmp	r2, r3
 801a326:	f280 812e 	bge.w	801a586 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	2b25      	cmp	r3, #37	@ 0x25
 801a330:	d006      	beq.n	801a340 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a336:	1c59      	adds	r1, r3, #1
 801a338:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a33a:	7812      	ldrb	r2, [r2, #0]
 801a33c:	701a      	strb	r2, [r3, #0]
      continue;
 801a33e:	e112      	b.n	801a566 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a340:	2300      	movs	r3, #0
 801a342:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	3301      	adds	r3, #1
 801a348:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	781b      	ldrb	r3, [r3, #0]
 801a34e:	2b30      	cmp	r3, #48	@ 0x30
 801a350:	d103      	bne.n	801a35a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a352:	6a3b      	ldr	r3, [r7, #32]
 801a354:	f043 0301 	orr.w	r3, r3, #1
 801a358:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a35a:	f04f 33ff 	mov.w	r3, #4294967295
 801a35e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	781b      	ldrb	r3, [r3, #0]
 801a364:	2b2f      	cmp	r3, #47	@ 0x2f
 801a366:	d908      	bls.n	801a37a <tiny_vsnprintf_like+0x7e>
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	781b      	ldrb	r3, [r3, #0]
 801a36c:	2b39      	cmp	r3, #57	@ 0x39
 801a36e:	d804      	bhi.n	801a37a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a370:	1d3b      	adds	r3, r7, #4
 801a372:	4618      	mov	r0, r3
 801a374:	f7ff feae 	bl	801a0d4 <ee_skip_atoi>
 801a378:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a37a:	f04f 33ff 	mov.w	r3, #4294967295
 801a37e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a380:	f04f 33ff 	mov.w	r3, #4294967295
 801a384:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a386:	230a      	movs	r3, #10
 801a388:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	781b      	ldrb	r3, [r3, #0]
 801a38e:	3b58      	subs	r3, #88	@ 0x58
 801a390:	2b20      	cmp	r3, #32
 801a392:	f200 8094 	bhi.w	801a4be <tiny_vsnprintf_like+0x1c2>
 801a396:	a201      	add	r2, pc, #4	@ (adr r2, 801a39c <tiny_vsnprintf_like+0xa0>)
 801a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a39c:	0801a4a7 	.word	0x0801a4a7
 801a3a0:	0801a4bf 	.word	0x0801a4bf
 801a3a4:	0801a4bf 	.word	0x0801a4bf
 801a3a8:	0801a4bf 	.word	0x0801a4bf
 801a3ac:	0801a4bf 	.word	0x0801a4bf
 801a3b0:	0801a4bf 	.word	0x0801a4bf
 801a3b4:	0801a4bf 	.word	0x0801a4bf
 801a3b8:	0801a4bf 	.word	0x0801a4bf
 801a3bc:	0801a4bf 	.word	0x0801a4bf
 801a3c0:	0801a4bf 	.word	0x0801a4bf
 801a3c4:	0801a4bf 	.word	0x0801a4bf
 801a3c8:	0801a42b 	.word	0x0801a42b
 801a3cc:	0801a4b5 	.word	0x0801a4b5
 801a3d0:	0801a4bf 	.word	0x0801a4bf
 801a3d4:	0801a4bf 	.word	0x0801a4bf
 801a3d8:	0801a4bf 	.word	0x0801a4bf
 801a3dc:	0801a4bf 	.word	0x0801a4bf
 801a3e0:	0801a4b5 	.word	0x0801a4b5
 801a3e4:	0801a4bf 	.word	0x0801a4bf
 801a3e8:	0801a4bf 	.word	0x0801a4bf
 801a3ec:	0801a4bf 	.word	0x0801a4bf
 801a3f0:	0801a4bf 	.word	0x0801a4bf
 801a3f4:	0801a4bf 	.word	0x0801a4bf
 801a3f8:	0801a4bf 	.word	0x0801a4bf
 801a3fc:	0801a4bf 	.word	0x0801a4bf
 801a400:	0801a4bf 	.word	0x0801a4bf
 801a404:	0801a4bf 	.word	0x0801a4bf
 801a408:	0801a44b 	.word	0x0801a44b
 801a40c:	0801a4bf 	.word	0x0801a4bf
 801a410:	0801a50b 	.word	0x0801a50b
 801a414:	0801a4bf 	.word	0x0801a4bf
 801a418:	0801a4bf 	.word	0x0801a4bf
 801a41c:	0801a4af 	.word	0x0801a4af
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a422:	1c5a      	adds	r2, r3, #1
 801a424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a426:	2220      	movs	r2, #32
 801a428:	701a      	strb	r2, [r3, #0]
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	3b01      	subs	r3, #1
 801a42e:	61fb      	str	r3, [r7, #28]
 801a430:	69fb      	ldr	r3, [r7, #28]
 801a432:	2b00      	cmp	r3, #0
 801a434:	dcf4      	bgt.n	801a420 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a436:	683b      	ldr	r3, [r7, #0]
 801a438:	1d1a      	adds	r2, r3, #4
 801a43a:	603a      	str	r2, [r7, #0]
 801a43c:	6819      	ldr	r1, [r3, #0]
 801a43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a440:	1c5a      	adds	r2, r3, #1
 801a442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a444:	b2ca      	uxtb	r2, r1
 801a446:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a448:	e08d      	b.n	801a566 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	1d1a      	adds	r2, r3, #4
 801a44e:	603a      	str	r2, [r7, #0]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a456:	2b00      	cmp	r3, #0
 801a458:	d101      	bne.n	801a45e <tiny_vsnprintf_like+0x162>
 801a45a:	4b50      	ldr	r3, [pc, #320]	@ (801a59c <tiny_vsnprintf_like+0x2a0>)
 801a45c:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a45e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a460:	f7e5 fe8a 	bl	8000178 <strlen>
 801a464:	4603      	mov	r3, r0
 801a466:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a468:	e004      	b.n	801a474 <tiny_vsnprintf_like+0x178>
 801a46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a46c:	1c5a      	adds	r2, r3, #1
 801a46e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a470:	2220      	movs	r2, #32
 801a472:	701a      	strb	r2, [r3, #0]
 801a474:	69fb      	ldr	r3, [r7, #28]
 801a476:	1e5a      	subs	r2, r3, #1
 801a478:	61fa      	str	r2, [r7, #28]
 801a47a:	693a      	ldr	r2, [r7, #16]
 801a47c:	429a      	cmp	r2, r3
 801a47e:	dbf4      	blt.n	801a46a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a480:	2300      	movs	r3, #0
 801a482:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a484:	e00a      	b.n	801a49c <tiny_vsnprintf_like+0x1a0>
 801a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a488:	1c53      	adds	r3, r2, #1
 801a48a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a48e:	1c59      	adds	r1, r3, #1
 801a490:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a492:	7812      	ldrb	r2, [r2, #0]
 801a494:	701a      	strb	r2, [r3, #0]
 801a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a498:	3301      	adds	r3, #1
 801a49a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a49c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	dbf0      	blt.n	801a486 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a4a4:	e05f      	b.n	801a566 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a4a6:	6a3b      	ldr	r3, [r7, #32]
 801a4a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4ac:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a4ae:	2310      	movs	r3, #16
 801a4b0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a4b2:	e02b      	b.n	801a50c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a4b4:	6a3b      	ldr	r3, [r7, #32]
 801a4b6:	f043 0302 	orr.w	r3, r3, #2
 801a4ba:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a4bc:	e025      	b.n	801a50a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	2b25      	cmp	r3, #37	@ 0x25
 801a4c4:	d004      	beq.n	801a4d0 <tiny_vsnprintf_like+0x1d4>
 801a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c8:	1c5a      	adds	r2, r3, #1
 801a4ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a4cc:	2225      	movs	r2, #37	@ 0x25
 801a4ce:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	1ad2      	subs	r2, r2, r3
 801a4d6:	68bb      	ldr	r3, [r7, #8]
 801a4d8:	3b01      	subs	r3, #1
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	da16      	bge.n	801a50c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	781b      	ldrb	r3, [r3, #0]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d006      	beq.n	801a4f4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a4e6:	687a      	ldr	r2, [r7, #4]
 801a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ea:	1c59      	adds	r1, r3, #1
 801a4ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a4ee:	7812      	ldrb	r2, [r2, #0]
 801a4f0:	701a      	strb	r2, [r3, #0]
 801a4f2:	e002      	b.n	801a4fa <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	3b01      	subs	r3, #1
 801a4f8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	1ad2      	subs	r2, r2, r3
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	3b01      	subs	r3, #1
 801a504:	429a      	cmp	r2, r3
 801a506:	db2d      	blt.n	801a564 <tiny_vsnprintf_like+0x268>
 801a508:	e000      	b.n	801a50c <tiny_vsnprintf_like+0x210>
        break;
 801a50a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	2b6c      	cmp	r3, #108	@ 0x6c
 801a510:	d105      	bne.n	801a51e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	1d1a      	adds	r2, r3, #4
 801a516:	603a      	str	r2, [r7, #0]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a51c:	e00f      	b.n	801a53e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a51e:	6a3b      	ldr	r3, [r7, #32]
 801a520:	f003 0302 	and.w	r3, r3, #2
 801a524:	2b00      	cmp	r3, #0
 801a526:	d005      	beq.n	801a534 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a528:	683b      	ldr	r3, [r7, #0]
 801a52a:	1d1a      	adds	r2, r3, #4
 801a52c:	603a      	str	r2, [r7, #0]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	637b      	str	r3, [r7, #52]	@ 0x34
 801a532:	e004      	b.n	801a53e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	1d1a      	adds	r2, r3, #4
 801a538:	603a      	str	r2, [r7, #0]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a53e:	68bb      	ldr	r3, [r7, #8]
 801a540:	1e5a      	subs	r2, r3, #1
 801a542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	1acb      	subs	r3, r1, r3
 801a548:	1ad1      	subs	r1, r2, r3
 801a54a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a54c:	6a3b      	ldr	r3, [r7, #32]
 801a54e:	9302      	str	r3, [sp, #8]
 801a550:	69bb      	ldr	r3, [r7, #24]
 801a552:	9301      	str	r3, [sp, #4]
 801a554:	69fb      	ldr	r3, [r7, #28]
 801a556:	9300      	str	r3, [sp, #0]
 801a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a55a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a55c:	f7ff fde0 	bl	801a120 <ee_number>
 801a560:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a562:	e000      	b.n	801a566 <tiny_vsnprintf_like+0x26a>
        continue;
 801a564:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	3301      	adds	r3, #1
 801a56a:	607b      	str	r3, [r7, #4]
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	2b00      	cmp	r3, #0
 801a572:	f47f aed2 	bne.w	801a31a <tiny_vsnprintf_like+0x1e>
 801a576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	1ad2      	subs	r2, r2, r3
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	3b01      	subs	r3, #1
 801a580:	429a      	cmp	r2, r3
 801a582:	f6bf aeca 	bge.w	801a31a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a588:	2200      	movs	r2, #0
 801a58a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a58c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	1ad3      	subs	r3, r2, r3
}
 801a592:	4618      	mov	r0, r3
 801a594:	3738      	adds	r7, #56	@ 0x38
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}
 801a59a:	bf00      	nop
 801a59c:	0801bd90 	.word	0x0801bd90

0801a5a0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b090      	sub	sp, #64	@ 0x40
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a5a8:	4b73      	ldr	r3, [pc, #460]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a5ae:	4b72      	ldr	r3, [pc, #456]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a5b0:	681a      	ldr	r2, [r3, #0]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	4013      	ands	r3, r2
 801a5b6:	4a70      	ldr	r2, [pc, #448]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a5b8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a5ba:	4b70      	ldr	r3, [pc, #448]	@ (801a77c <UTIL_SEQ_Run+0x1dc>)
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a5c0:	4b6f      	ldr	r3, [pc, #444]	@ (801a780 <UTIL_SEQ_Run+0x1e0>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a5c6:	4b6f      	ldr	r3, [pc, #444]	@ (801a784 <UTIL_SEQ_Run+0x1e4>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a5cc:	4b6e      	ldr	r3, [pc, #440]	@ (801a788 <UTIL_SEQ_Run+0x1e8>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a5d2:	e08d      	b.n	801a6f0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a5d8:	e002      	b.n	801a5e0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5dc:	3301      	adds	r3, #1
 801a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a5e0:	4a6a      	ldr	r2, [pc, #424]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5ea:	401a      	ands	r2, r3
 801a5ec:	4b62      	ldr	r3, [pc, #392]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	4013      	ands	r3, r2
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d0f1      	beq.n	801a5da <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a5f6:	4a65      	ldr	r2, [pc, #404]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a600:	401a      	ands	r2, r3
 801a602:	4b5d      	ldr	r3, [pc, #372]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4013      	ands	r3, r2
 801a608:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a60a:	4a60      	ldr	r2, [pc, #384]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a60e:	00db      	lsls	r3, r3, #3
 801a610:	4413      	add	r3, r2
 801a612:	685a      	ldr	r2, [r3, #4]
 801a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a616:	4013      	ands	r3, r2
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d106      	bne.n	801a62a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a61c:	4a5b      	ldr	r2, [pc, #364]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a620:	00db      	lsls	r3, r3, #3
 801a622:	4413      	add	r3, r2
 801a624:	f04f 32ff 	mov.w	r2, #4294967295
 801a628:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a62a:	4a58      	ldr	r2, [pc, #352]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a62e:	00db      	lsls	r3, r3, #3
 801a630:	4413      	add	r3, r2
 801a632:	685a      	ldr	r2, [r3, #4]
 801a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a636:	4013      	ands	r3, r2
 801a638:	4618      	mov	r0, r3
 801a63a:	f000 f907 	bl	801a84c <SEQ_BitPosition>
 801a63e:	4603      	mov	r3, r0
 801a640:	461a      	mov	r2, r3
 801a642:	4b53      	ldr	r3, [pc, #332]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a644:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a646:	4a51      	ldr	r2, [pc, #324]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a64a:	00db      	lsls	r3, r3, #3
 801a64c:	4413      	add	r3, r2
 801a64e:	685a      	ldr	r2, [r3, #4]
 801a650:	4b4f      	ldr	r3, [pc, #316]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	2101      	movs	r1, #1
 801a656:	fa01 f303 	lsl.w	r3, r1, r3
 801a65a:	43db      	mvns	r3, r3
 801a65c:	401a      	ands	r2, r3
 801a65e:	494b      	ldr	r1, [pc, #300]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a662:	00db      	lsls	r3, r3, #3
 801a664:	440b      	add	r3, r1
 801a666:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a668:	f3ef 8310 	mrs	r3, PRIMASK
 801a66c:	61bb      	str	r3, [r7, #24]
  return(result);
 801a66e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a672:	b672      	cpsid	i
}
 801a674:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a676:	4b46      	ldr	r3, [pc, #280]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2201      	movs	r2, #1
 801a67c:	fa02 f303 	lsl.w	r3, r2, r3
 801a680:	43da      	mvns	r2, r3
 801a682:	4b3e      	ldr	r3, [pc, #248]	@ (801a77c <UTIL_SEQ_Run+0x1dc>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4013      	ands	r3, r2
 801a688:	4a3c      	ldr	r2, [pc, #240]	@ (801a77c <UTIL_SEQ_Run+0x1dc>)
 801a68a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a68c:	2301      	movs	r3, #1
 801a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a690:	e013      	b.n	801a6ba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a694:	3b01      	subs	r3, #1
 801a696:	4a3d      	ldr	r2, [pc, #244]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a698:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a69c:	4b3c      	ldr	r3, [pc, #240]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2201      	movs	r2, #1
 801a6a2:	fa02 f303 	lsl.w	r3, r2, r3
 801a6a6:	43da      	mvns	r2, r3
 801a6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6aa:	3b01      	subs	r3, #1
 801a6ac:	400a      	ands	r2, r1
 801a6ae:	4937      	ldr	r1, [pc, #220]	@ (801a78c <UTIL_SEQ_Run+0x1ec>)
 801a6b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6b6:	3b01      	subs	r3, #1
 801a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d1e8      	bne.n	801a692 <UTIL_SEQ_Run+0xf2>
 801a6c0:	6a3b      	ldr	r3, [r7, #32]
 801a6c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6c4:	697b      	ldr	r3, [r7, #20]
 801a6c6:	f383 8810 	msr	PRIMASK, r3
}
 801a6ca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a6cc:	4b30      	ldr	r3, [pc, #192]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	4a30      	ldr	r2, [pc, #192]	@ (801a794 <UTIL_SEQ_Run+0x1f4>)
 801a6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a6d6:	4798      	blx	r3

    local_taskset = TaskSet;
 801a6d8:	4b28      	ldr	r3, [pc, #160]	@ (801a77c <UTIL_SEQ_Run+0x1dc>)
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a6de:	4b28      	ldr	r3, [pc, #160]	@ (801a780 <UTIL_SEQ_Run+0x1e0>)
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a6e4:	4b27      	ldr	r3, [pc, #156]	@ (801a784 <UTIL_SEQ_Run+0x1e4>)
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a6ea:	4b27      	ldr	r3, [pc, #156]	@ (801a788 <UTIL_SEQ_Run+0x1e8>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a6f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6f4:	401a      	ands	r2, r3
 801a6f6:	4b20      	ldr	r3, [pc, #128]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	4013      	ands	r3, r2
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d005      	beq.n	801a70c <UTIL_SEQ_Run+0x16c>
 801a700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a704:	4013      	ands	r3, r2
 801a706:	2b00      	cmp	r3, #0
 801a708:	f43f af64 	beq.w	801a5d4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a70c:	4b20      	ldr	r3, [pc, #128]	@ (801a790 <UTIL_SEQ_Run+0x1f0>)
 801a70e:	f04f 32ff 	mov.w	r2, #4294967295
 801a712:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a714:	f000 f88e 	bl	801a834 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a718:	f3ef 8310 	mrs	r3, PRIMASK
 801a71c:	613b      	str	r3, [r7, #16]
  return(result);
 801a71e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a722:	b672      	cpsid	i
}
 801a724:	bf00      	nop
  local_taskset = TaskSet;
 801a726:	4b15      	ldr	r3, [pc, #84]	@ (801a77c <UTIL_SEQ_Run+0x1dc>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a72c:	4b14      	ldr	r3, [pc, #80]	@ (801a780 <UTIL_SEQ_Run+0x1e0>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a732:	4b14      	ldr	r3, [pc, #80]	@ (801a784 <UTIL_SEQ_Run+0x1e4>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a73c:	401a      	ands	r2, r3
 801a73e:	4b0e      	ldr	r3, [pc, #56]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4013      	ands	r3, r2
 801a744:	2b00      	cmp	r3, #0
 801a746:	d107      	bne.n	801a758 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a748:	4b0f      	ldr	r3, [pc, #60]	@ (801a788 <UTIL_SEQ_Run+0x1e8>)
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a74e:	4013      	ands	r3, r2
 801a750:	2b00      	cmp	r3, #0
 801a752:	d101      	bne.n	801a758 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a754:	f7e7 f8fa 	bl	800194c <UTIL_SEQ_Idle>
 801a758:	69fb      	ldr	r3, [r7, #28]
 801a75a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	f383 8810 	msr	PRIMASK, r3
}
 801a762:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a764:	f000 f86c 	bl	801a840 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a768:	4a03      	ldr	r2, [pc, #12]	@ (801a778 <UTIL_SEQ_Run+0x1d8>)
 801a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a76c:	6013      	str	r3, [r2, #0]

  return;
 801a76e:	bf00      	nop
}
 801a770:	3740      	adds	r7, #64	@ 0x40
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
 801a776:	bf00      	nop
 801a778:	20000154 	.word	0x20000154
 801a77c:	20001b14 	.word	0x20001b14
 801a780:	20001b18 	.word	0x20001b18
 801a784:	20000150 	.word	0x20000150
 801a788:	20001b1c 	.word	0x20001b1c
 801a78c:	20001b34 	.word	0x20001b34
 801a790:	20001b20 	.word	0x20001b20
 801a794:	20001b24 	.word	0x20001b24

0801a798 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b088      	sub	sp, #32
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7a4:	f3ef 8310 	mrs	r3, PRIMASK
 801a7a8:	617b      	str	r3, [r7, #20]
  return(result);
 801a7aa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a7ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7ae:	b672      	cpsid	i
}
 801a7b0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	f000 f84a 	bl	801a84c <SEQ_BitPosition>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	4619      	mov	r1, r3
 801a7bc:	4a06      	ldr	r2, [pc, #24]	@ (801a7d8 <UTIL_SEQ_RegTask+0x40>)
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a7c4:	69fb      	ldr	r3, [r7, #28]
 801a7c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7c8:	69bb      	ldr	r3, [r7, #24]
 801a7ca:	f383 8810 	msr	PRIMASK, r3
}
 801a7ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a7d0:	bf00      	nop
}
 801a7d2:	3720      	adds	r7, #32
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	20001b24 	.word	0x20001b24

0801a7dc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a7dc:	b480      	push	{r7}
 801a7de:	b087      	sub	sp, #28
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7e6:	f3ef 8310 	mrs	r3, PRIMASK
 801a7ea:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a7ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7f0:	b672      	cpsid	i
}
 801a7f2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a7f4:	4b0d      	ldr	r3, [pc, #52]	@ (801a82c <UTIL_SEQ_SetTask+0x50>)
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	4313      	orrs	r3, r2
 801a7fc:	4a0b      	ldr	r2, [pc, #44]	@ (801a82c <UTIL_SEQ_SetTask+0x50>)
 801a7fe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a800:	4a0b      	ldr	r2, [pc, #44]	@ (801a830 <UTIL_SEQ_SetTask+0x54>)
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	431a      	orrs	r2, r3
 801a80c:	4908      	ldr	r1, [pc, #32]	@ (801a830 <UTIL_SEQ_SetTask+0x54>)
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a818:	693b      	ldr	r3, [r7, #16]
 801a81a:	f383 8810 	msr	PRIMASK, r3
}
 801a81e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a820:	bf00      	nop
}
 801a822:	371c      	adds	r7, #28
 801a824:	46bd      	mov	sp, r7
 801a826:	bc80      	pop	{r7}
 801a828:	4770      	bx	lr
 801a82a:	bf00      	nop
 801a82c:	20001b14 	.word	0x20001b14
 801a830:	20001b34 	.word	0x20001b34

0801a834 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a834:	b480      	push	{r7}
 801a836:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a838:	bf00      	nop
}
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bc80      	pop	{r7}
 801a83e:	4770      	bx	lr

0801a840 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a840:	b480      	push	{r7}
 801a842:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a844:	bf00      	nop
}
 801a846:	46bd      	mov	sp, r7
 801a848:	bc80      	pop	{r7}
 801a84a:	4770      	bx	lr

0801a84c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a84c:	b480      	push	{r7}
 801a84e:	b085      	sub	sp, #20
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a854:	2300      	movs	r3, #0
 801a856:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a862:	d204      	bcs.n	801a86e <SEQ_BitPosition+0x22>
 801a864:	2310      	movs	r3, #16
 801a866:	73fb      	strb	r3, [r7, #15]
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	041b      	lsls	r3, r3, #16
 801a86c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a874:	d205      	bcs.n	801a882 <SEQ_BitPosition+0x36>
 801a876:	7bfb      	ldrb	r3, [r7, #15]
 801a878:	3308      	adds	r3, #8
 801a87a:	73fb      	strb	r3, [r7, #15]
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	021b      	lsls	r3, r3, #8
 801a880:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a888:	d205      	bcs.n	801a896 <SEQ_BitPosition+0x4a>
 801a88a:	7bfb      	ldrb	r3, [r7, #15]
 801a88c:	3304      	adds	r3, #4
 801a88e:	73fb      	strb	r3, [r7, #15]
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	011b      	lsls	r3, r3, #4
 801a894:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	0f1b      	lsrs	r3, r3, #28
 801a89a:	4a07      	ldr	r2, [pc, #28]	@ (801a8b8 <SEQ_BitPosition+0x6c>)
 801a89c:	5cd2      	ldrb	r2, [r2, r3]
 801a89e:	7bfb      	ldrb	r3, [r7, #15]
 801a8a0:	4413      	add	r3, r2
 801a8a2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a8a4:	7bfb      	ldrb	r3, [r7, #15]
 801a8a6:	f1c3 031f 	rsb	r3, r3, #31
 801a8aa:	b2db      	uxtb	r3, r3
}
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	3714      	adds	r7, #20
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bc80      	pop	{r7}
 801a8b4:	4770      	bx	lr
 801a8b6:	bf00      	nop
 801a8b8:	0801c3d0 	.word	0x0801c3d0

0801a8bc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a8c0:	4b04      	ldr	r3, [pc, #16]	@ (801a8d4 <UTIL_TIMER_Init+0x18>)
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a8c6:	4b04      	ldr	r3, [pc, #16]	@ (801a8d8 <UTIL_TIMER_Init+0x1c>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4798      	blx	r3
 801a8cc:	4603      	mov	r3, r0
}
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	bd80      	pop	{r7, pc}
 801a8d2:	bf00      	nop
 801a8d4:	20001b3c 	.word	0x20001b3c
 801a8d8:	0801be50 	.word	0x0801be50

0801a8dc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	60f8      	str	r0, [r7, #12]
 801a8e4:	60b9      	str	r1, [r7, #8]
 801a8e6:	603b      	str	r3, [r7, #0]
 801a8e8:	4613      	mov	r3, r2
 801a8ea:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d023      	beq.n	801a93a <UTIL_TIMER_Create+0x5e>
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d020      	beq.n	801a93a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a8fe:	4b11      	ldr	r3, [pc, #68]	@ (801a944 <UTIL_TIMER_Create+0x68>)
 801a900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a902:	68b8      	ldr	r0, [r7, #8]
 801a904:	4798      	blx	r3
 801a906:	4602      	mov	r2, r0
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	2200      	movs	r2, #0
 801a910:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	2200      	movs	r2, #0
 801a916:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	2200      	movs	r2, #0
 801a91c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	683a      	ldr	r2, [r7, #0]
 801a922:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	69ba      	ldr	r2, [r7, #24]
 801a928:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	79fa      	ldrb	r2, [r7, #7]
 801a92e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	2200      	movs	r2, #0
 801a934:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a936:	2300      	movs	r3, #0
 801a938:	e000      	b.n	801a93c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a93a:	2301      	movs	r3, #1
  }
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3710      	adds	r7, #16
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	0801be50 	.word	0x0801be50

0801a948 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b08a      	sub	sp, #40	@ 0x28
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a950:	2300      	movs	r3, #0
 801a952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d056      	beq.n	801aa0a <UTIL_TIMER_Start+0xc2>
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f000 f9a9 	bl	801acb4 <TimerExists>
 801a962:	4603      	mov	r3, r0
 801a964:	f083 0301 	eor.w	r3, r3, #1
 801a968:	b2db      	uxtb	r3, r3
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d04d      	beq.n	801aa0a <UTIL_TIMER_Start+0xc2>
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	7a5b      	ldrb	r3, [r3, #9]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d149      	bne.n	801aa0a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a976:	f3ef 8310 	mrs	r3, PRIMASK
 801a97a:	613b      	str	r3, [r7, #16]
  return(result);
 801a97c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a97e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a980:	b672      	cpsid	i
}
 801a982:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	685b      	ldr	r3, [r3, #4]
 801a988:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a98a:	4b24      	ldr	r3, [pc, #144]	@ (801aa1c <UTIL_TIMER_Start+0xd4>)
 801a98c:	6a1b      	ldr	r3, [r3, #32]
 801a98e:	4798      	blx	r3
 801a990:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a992:	6a3a      	ldr	r2, [r7, #32]
 801a994:	69bb      	ldr	r3, [r7, #24]
 801a996:	429a      	cmp	r2, r3
 801a998:	d201      	bcs.n	801a99e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6a3a      	ldr	r2, [r7, #32]
 801a9a2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	2201      	movs	r2, #1
 801a9ae:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a9b6:	4b1a      	ldr	r3, [pc, #104]	@ (801aa20 <UTIL_TIMER_Start+0xd8>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d106      	bne.n	801a9cc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a9be:	4b17      	ldr	r3, [pc, #92]	@ (801aa1c <UTIL_TIMER_Start+0xd4>)
 801a9c0:	691b      	ldr	r3, [r3, #16]
 801a9c2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a9c4:	6878      	ldr	r0, [r7, #4]
 801a9c6:	f000 f9eb 	bl	801ada0 <TimerInsertNewHeadTimer>
 801a9ca:	e017      	b.n	801a9fc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a9cc:	4b13      	ldr	r3, [pc, #76]	@ (801aa1c <UTIL_TIMER_Start+0xd4>)
 801a9ce:	699b      	ldr	r3, [r3, #24]
 801a9d0:	4798      	blx	r3
 801a9d2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681a      	ldr	r2, [r3, #0]
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	441a      	add	r2, r3
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681a      	ldr	r2, [r3, #0]
 801a9e4:	4b0e      	ldr	r3, [pc, #56]	@ (801aa20 <UTIL_TIMER_Start+0xd8>)
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d203      	bcs.n	801a9f6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a9ee:	6878      	ldr	r0, [r7, #4]
 801a9f0:	f000 f9d6 	bl	801ada0 <TimerInsertNewHeadTimer>
 801a9f4:	e002      	b.n	801a9fc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f000 f9a2 	bl	801ad40 <TimerInsertTimer>
 801a9fc:	69fb      	ldr	r3, [r7, #28]
 801a9fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	f383 8810 	msr	PRIMASK, r3
}
 801aa06:	bf00      	nop
  {
 801aa08:	e002      	b.n	801aa10 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801aa10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801aa14:	4618      	mov	r0, r3
 801aa16:	3728      	adds	r7, #40	@ 0x28
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}
 801aa1c:	0801be50 	.word	0x0801be50
 801aa20:	20001b3c 	.word	0x20001b3c

0801aa24 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b088      	sub	sp, #32
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d05b      	beq.n	801aaee <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa36:	f3ef 8310 	mrs	r3, PRIMASK
 801aa3a:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa3c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aa3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa40:	b672      	cpsid	i
}
 801aa42:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801aa44:	4b2d      	ldr	r3, [pc, #180]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801aa4a:	4b2c      	ldr	r3, [pc, #176]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	2201      	movs	r2, #1
 801aa54:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801aa56:	4b29      	ldr	r3, [pc, #164]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d041      	beq.n	801aae2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2200      	movs	r2, #0
 801aa62:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801aa64:	4b25      	ldr	r3, [pc, #148]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	687a      	ldr	r2, [r7, #4]
 801aa6a:	429a      	cmp	r2, r3
 801aa6c:	d134      	bne.n	801aad8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801aa6e:	4b23      	ldr	r3, [pc, #140]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	2200      	movs	r2, #0
 801aa74:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801aa76:	4b21      	ldr	r3, [pc, #132]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	695b      	ldr	r3, [r3, #20]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d00a      	beq.n	801aa96 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801aa80:	4b1e      	ldr	r3, [pc, #120]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	695b      	ldr	r3, [r3, #20]
 801aa86:	4a1d      	ldr	r2, [pc, #116]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa88:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801aa8a:	4b1c      	ldr	r3, [pc, #112]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f000 f92c 	bl	801acec <TimerSetTimeout>
 801aa94:	e023      	b.n	801aade <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801aa96:	4b1a      	ldr	r3, [pc, #104]	@ (801ab00 <UTIL_TIMER_Stop+0xdc>)
 801aa98:	68db      	ldr	r3, [r3, #12]
 801aa9a:	4798      	blx	r3
            TimerListHead = NULL;
 801aa9c:	4b17      	ldr	r3, [pc, #92]	@ (801aafc <UTIL_TIMER_Stop+0xd8>)
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	601a      	str	r2, [r3, #0]
 801aaa2:	e01c      	b.n	801aade <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801aaa4:	697a      	ldr	r2, [r7, #20]
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d110      	bne.n	801aace <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	695b      	ldr	r3, [r3, #20]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d006      	beq.n	801aac2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801aab4:	697b      	ldr	r3, [r7, #20]
 801aab6:	695b      	ldr	r3, [r3, #20]
 801aab8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	697a      	ldr	r2, [r7, #20]
 801aabe:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801aac0:	e00d      	b.n	801aade <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801aac2:	2300      	movs	r3, #0
 801aac4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	697a      	ldr	r2, [r7, #20]
 801aaca:	615a      	str	r2, [r3, #20]
            break;
 801aacc:	e007      	b.n	801aade <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	695b      	ldr	r3, [r3, #20]
 801aad6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d1e2      	bne.n	801aaa4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801aade:	2300      	movs	r3, #0
 801aae0:	77fb      	strb	r3, [r7, #31]
 801aae2:	693b      	ldr	r3, [r7, #16]
 801aae4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	f383 8810 	msr	PRIMASK, r3
}
 801aaec:	e001      	b.n	801aaf2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801aaee:	2301      	movs	r3, #1
 801aaf0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801aaf2:	7ffb      	ldrb	r3, [r7, #31]
}
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	3720      	adds	r7, #32
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd80      	pop	{r7, pc}
 801aafc:	20001b3c 	.word	0x20001b3c
 801ab00:	0801be50 	.word	0x0801be50

0801ab04 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b084      	sub	sp, #16
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
 801ab0c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ab0e:	2300      	movs	r3, #0
 801ab10:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d102      	bne.n	801ab1e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ab18:	2301      	movs	r3, #1
 801ab1a:	73fb      	strb	r3, [r7, #15]
 801ab1c:	e014      	b.n	801ab48 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ab1e:	4b0d      	ldr	r3, [pc, #52]	@ (801ab54 <UTIL_TIMER_SetPeriod+0x50>)
 801ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab22:	6838      	ldr	r0, [r7, #0]
 801ab24:	4798      	blx	r3
 801ab26:	4602      	mov	r2, r0
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ab2c:	6878      	ldr	r0, [r7, #4]
 801ab2e:	f000 f8c1 	bl	801acb4 <TimerExists>
 801ab32:	4603      	mov	r3, r0
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d007      	beq.n	801ab48 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ab38:	6878      	ldr	r0, [r7, #4]
 801ab3a:	f7ff ff73 	bl	801aa24 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	f7ff ff02 	bl	801a948 <UTIL_TIMER_Start>
 801ab44:	4603      	mov	r3, r0
 801ab46:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	3710      	adds	r7, #16
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
 801ab52:	bf00      	nop
 801ab54:	0801be50 	.word	0x0801be50

0801ab58 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ab58:	b590      	push	{r4, r7, lr}
 801ab5a:	b089      	sub	sp, #36	@ 0x24
 801ab5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab5e:	f3ef 8310 	mrs	r3, PRIMASK
 801ab62:	60bb      	str	r3, [r7, #8]
  return(result);
 801ab64:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ab66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab68:	b672      	cpsid	i
}
 801ab6a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ab6c:	4b38      	ldr	r3, [pc, #224]	@ (801ac50 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ab6e:	695b      	ldr	r3, [r3, #20]
 801ab70:	4798      	blx	r3
 801ab72:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ab74:	4b36      	ldr	r3, [pc, #216]	@ (801ac50 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ab76:	691b      	ldr	r3, [r3, #16]
 801ab78:	4798      	blx	r3
 801ab7a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ab7c:	693a      	ldr	r2, [r7, #16]
 801ab7e:	697b      	ldr	r3, [r7, #20]
 801ab80:	1ad3      	subs	r3, r2, r3
 801ab82:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ab84:	4b33      	ldr	r3, [pc, #204]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d037      	beq.n	801abfc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ab8c:	4b31      	ldr	r3, [pc, #196]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ab92:	69fb      	ldr	r3, [r7, #28]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	68fa      	ldr	r2, [r7, #12]
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	d206      	bcs.n	801abaa <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ab9c:	69fb      	ldr	r3, [r7, #28]
 801ab9e:	681a      	ldr	r2, [r3, #0]
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	1ad2      	subs	r2, r2, r3
 801aba4:	69fb      	ldr	r3, [r7, #28]
 801aba6:	601a      	str	r2, [r3, #0]
 801aba8:	e002      	b.n	801abb0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801abaa:	69fb      	ldr	r3, [r7, #28]
 801abac:	2200      	movs	r2, #0
 801abae:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801abb0:	69fb      	ldr	r3, [r7, #28]
 801abb2:	695b      	ldr	r3, [r3, #20]
 801abb4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801abb6:	69fb      	ldr	r3, [r7, #28]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d1ea      	bne.n	801ab92 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801abbc:	e01e      	b.n	801abfc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801abbe:	4b25      	ldr	r3, [pc, #148]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801abc4:	4b23      	ldr	r3, [pc, #140]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	695b      	ldr	r3, [r3, #20]
 801abca:	4a22      	ldr	r2, [pc, #136]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801abcc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801abce:	69fb      	ldr	r3, [r7, #28]
 801abd0:	2200      	movs	r2, #0
 801abd2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801abd4:	69fb      	ldr	r3, [r7, #28]
 801abd6:	2200      	movs	r2, #0
 801abd8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801abda:	69fb      	ldr	r3, [r7, #28]
 801abdc:	68db      	ldr	r3, [r3, #12]
 801abde:	69fa      	ldr	r2, [r7, #28]
 801abe0:	6912      	ldr	r2, [r2, #16]
 801abe2:	4610      	mov	r0, r2
 801abe4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801abe6:	69fb      	ldr	r3, [r7, #28]
 801abe8:	7adb      	ldrb	r3, [r3, #11]
 801abea:	2b01      	cmp	r3, #1
 801abec:	d106      	bne.n	801abfc <UTIL_TIMER_IRQ_Handler+0xa4>
 801abee:	69fb      	ldr	r3, [r7, #28]
 801abf0:	7a9b      	ldrb	r3, [r3, #10]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d102      	bne.n	801abfc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801abf6:	69f8      	ldr	r0, [r7, #28]
 801abf8:	f7ff fea6 	bl	801a948 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801abfc:	4b15      	ldr	r3, [pc, #84]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d00d      	beq.n	801ac20 <UTIL_TIMER_IRQ_Handler+0xc8>
 801ac04:	4b13      	ldr	r3, [pc, #76]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d0d7      	beq.n	801abbe <UTIL_TIMER_IRQ_Handler+0x66>
 801ac0e:	4b11      	ldr	r3, [pc, #68]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	681c      	ldr	r4, [r3, #0]
 801ac14:	4b0e      	ldr	r3, [pc, #56]	@ (801ac50 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ac16:	699b      	ldr	r3, [r3, #24]
 801ac18:	4798      	blx	r3
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	429c      	cmp	r4, r3
 801ac1e:	d3ce      	bcc.n	801abbe <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ac20:	4b0c      	ldr	r3, [pc, #48]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d009      	beq.n	801ac3c <UTIL_TIMER_IRQ_Handler+0xe4>
 801ac28:	4b0a      	ldr	r3, [pc, #40]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	7a1b      	ldrb	r3, [r3, #8]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d104      	bne.n	801ac3c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ac32:	4b08      	ldr	r3, [pc, #32]	@ (801ac54 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4618      	mov	r0, r3
 801ac38:	f000 f858 	bl	801acec <TimerSetTimeout>
 801ac3c:	69bb      	ldr	r3, [r7, #24]
 801ac3e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f383 8810 	msr	PRIMASK, r3
}
 801ac46:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ac48:	bf00      	nop
 801ac4a:	3724      	adds	r7, #36	@ 0x24
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	bd90      	pop	{r4, r7, pc}
 801ac50:	0801be50 	.word	0x0801be50
 801ac54:	20001b3c 	.word	0x20001b3c

0801ac58 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ac58:	b580      	push	{r7, lr}
 801ac5a:	b082      	sub	sp, #8
 801ac5c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ac5e:	4b06      	ldr	r3, [pc, #24]	@ (801ac78 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ac60:	69db      	ldr	r3, [r3, #28]
 801ac62:	4798      	blx	r3
 801ac64:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ac66:	4b04      	ldr	r3, [pc, #16]	@ (801ac78 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ac68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	4798      	blx	r3
 801ac6e:	4603      	mov	r3, r0
}
 801ac70:	4618      	mov	r0, r3
 801ac72:	3708      	adds	r7, #8
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}
 801ac78:	0801be50 	.word	0x0801be50

0801ac7c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ac84:	4b0a      	ldr	r3, [pc, #40]	@ (801acb0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ac86:	69db      	ldr	r3, [r3, #28]
 801ac88:	4798      	blx	r3
 801ac8a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ac8c:	4b08      	ldr	r3, [pc, #32]	@ (801acb0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ac8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac90:	6878      	ldr	r0, [r7, #4]
 801ac92:	4798      	blx	r3
 801ac94:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ac96:	4b06      	ldr	r3, [pc, #24]	@ (801acb0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac9a:	68f9      	ldr	r1, [r7, #12]
 801ac9c:	68ba      	ldr	r2, [r7, #8]
 801ac9e:	1a8a      	subs	r2, r1, r2
 801aca0:	4610      	mov	r0, r2
 801aca2:	4798      	blx	r3
 801aca4:	4603      	mov	r3, r0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3710      	adds	r7, #16
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}
 801acae:	bf00      	nop
 801acb0:	0801be50 	.word	0x0801be50

0801acb4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801acb4:	b480      	push	{r7}
 801acb6:	b085      	sub	sp, #20
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801acbc:	4b0a      	ldr	r3, [pc, #40]	@ (801ace8 <TimerExists+0x34>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801acc2:	e008      	b.n	801acd6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801acc4:	68fa      	ldr	r2, [r7, #12]
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	429a      	cmp	r2, r3
 801acca:	d101      	bne.n	801acd0 <TimerExists+0x1c>
    {
      return true;
 801accc:	2301      	movs	r3, #1
 801acce:	e006      	b.n	801acde <TimerExists+0x2a>
    }
    cur = cur->Next;
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	695b      	ldr	r3, [r3, #20]
 801acd4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d1f3      	bne.n	801acc4 <TimerExists+0x10>
  }
  return false;
 801acdc:	2300      	movs	r3, #0
}
 801acde:	4618      	mov	r0, r3
 801ace0:	3714      	adds	r7, #20
 801ace2:	46bd      	mov	sp, r7
 801ace4:	bc80      	pop	{r7}
 801ace6:	4770      	bx	lr
 801ace8:	20001b3c 	.word	0x20001b3c

0801acec <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801acec:	b590      	push	{r4, r7, lr}
 801acee:	b085      	sub	sp, #20
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801acf4:	4b11      	ldr	r3, [pc, #68]	@ (801ad3c <TimerSetTimeout+0x50>)
 801acf6:	6a1b      	ldr	r3, [r3, #32]
 801acf8:	4798      	blx	r3
 801acfa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2201      	movs	r2, #1
 801ad00:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681c      	ldr	r4, [r3, #0]
 801ad06:	4b0d      	ldr	r3, [pc, #52]	@ (801ad3c <TimerSetTimeout+0x50>)
 801ad08:	699b      	ldr	r3, [r3, #24]
 801ad0a:	4798      	blx	r3
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	4413      	add	r3, r2
 801ad12:	429c      	cmp	r4, r3
 801ad14:	d207      	bcs.n	801ad26 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ad16:	4b09      	ldr	r3, [pc, #36]	@ (801ad3c <TimerSetTimeout+0x50>)
 801ad18:	699b      	ldr	r3, [r3, #24]
 801ad1a:	4798      	blx	r3
 801ad1c:	4602      	mov	r2, r0
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	441a      	add	r2, r3
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ad26:	4b05      	ldr	r3, [pc, #20]	@ (801ad3c <TimerSetTimeout+0x50>)
 801ad28:	689b      	ldr	r3, [r3, #8]
 801ad2a:	687a      	ldr	r2, [r7, #4]
 801ad2c:	6812      	ldr	r2, [r2, #0]
 801ad2e:	4610      	mov	r0, r2
 801ad30:	4798      	blx	r3
}
 801ad32:	bf00      	nop
 801ad34:	3714      	adds	r7, #20
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd90      	pop	{r4, r7, pc}
 801ad3a:	bf00      	nop
 801ad3c:	0801be50 	.word	0x0801be50

0801ad40 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ad40:	b480      	push	{r7}
 801ad42:	b085      	sub	sp, #20
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad48:	4b14      	ldr	r3, [pc, #80]	@ (801ad9c <TimerInsertTimer+0x5c>)
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801ad4e:	4b13      	ldr	r3, [pc, #76]	@ (801ad9c <TimerInsertTimer+0x5c>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	695b      	ldr	r3, [r3, #20]
 801ad54:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801ad56:	e012      	b.n	801ad7e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	429a      	cmp	r2, r3
 801ad62:	d905      	bls.n	801ad70 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	695b      	ldr	r3, [r3, #20]
 801ad6c:	60bb      	str	r3, [r7, #8]
 801ad6e:	e006      	b.n	801ad7e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	687a      	ldr	r2, [r7, #4]
 801ad74:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	68ba      	ldr	r2, [r7, #8]
 801ad7a:	615a      	str	r2, [r3, #20]
        return;
 801ad7c:	e009      	b.n	801ad92 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	695b      	ldr	r3, [r3, #20]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d1e8      	bne.n	801ad58 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	687a      	ldr	r2, [r7, #4]
 801ad8a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	2200      	movs	r2, #0
 801ad90:	615a      	str	r2, [r3, #20]
}
 801ad92:	3714      	adds	r7, #20
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bc80      	pop	{r7}
 801ad98:	4770      	bx	lr
 801ad9a:	bf00      	nop
 801ad9c:	20001b3c 	.word	0x20001b3c

0801ada0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ada8:	4b0b      	ldr	r3, [pc, #44]	@ (801add8 <TimerInsertNewHeadTimer+0x38>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d002      	beq.n	801adba <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	2200      	movs	r2, #0
 801adb8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	68fa      	ldr	r2, [r7, #12]
 801adbe:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801adc0:	4a05      	ldr	r2, [pc, #20]	@ (801add8 <TimerInsertNewHeadTimer+0x38>)
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801adc6:	4b04      	ldr	r3, [pc, #16]	@ (801add8 <TimerInsertNewHeadTimer+0x38>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4618      	mov	r0, r3
 801adcc:	f7ff ff8e 	bl	801acec <TimerSetTimeout>
}
 801add0:	bf00      	nop
 801add2:	3710      	adds	r7, #16
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	20001b3c 	.word	0x20001b3c

0801addc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ade0:	2218      	movs	r2, #24
 801ade2:	2100      	movs	r1, #0
 801ade4:	4807      	ldr	r0, [pc, #28]	@ (801ae04 <UTIL_ADV_TRACE_Init+0x28>)
 801ade6:	f7fe fffc 	bl	8019de2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801adea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801adee:	2100      	movs	r1, #0
 801adf0:	4805      	ldr	r0, [pc, #20]	@ (801ae08 <UTIL_ADV_TRACE_Init+0x2c>)
 801adf2:	f7fe fff6 	bl	8019de2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801adf6:	4b05      	ldr	r3, [pc, #20]	@ (801ae0c <UTIL_ADV_TRACE_Init+0x30>)
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	4805      	ldr	r0, [pc, #20]	@ (801ae10 <UTIL_ADV_TRACE_Init+0x34>)
 801adfc:	4798      	blx	r3
 801adfe:	4603      	mov	r3, r0
}
 801ae00:	4618      	mov	r0, r3
 801ae02:	bd80      	pop	{r7, pc}
 801ae04:	20001b40 	.word	0x20001b40
 801ae08:	20001b58 	.word	0x20001b58
 801ae0c:	0801be90 	.word	0x0801be90
 801ae10:	0801b07d 	.word	0x0801b07d

0801ae14 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ae14:	b480      	push	{r7}
 801ae16:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ae18:	4b06      	ldr	r3, [pc, #24]	@ (801ae34 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ae1a:	8a5a      	ldrh	r2, [r3, #18]
 801ae1c:	4b05      	ldr	r3, [pc, #20]	@ (801ae34 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ae1e:	8a1b      	ldrh	r3, [r3, #16]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d101      	bne.n	801ae28 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ae24:	2301      	movs	r3, #1
 801ae26:	e000      	b.n	801ae2a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ae28:	2300      	movs	r3, #0
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bc80      	pop	{r7}
 801ae30:	4770      	bx	lr
 801ae32:	bf00      	nop
 801ae34:	20001b40 	.word	0x20001b40

0801ae38 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ae38:	b408      	push	{r3}
 801ae3a:	b580      	push	{r7, lr}
 801ae3c:	b08d      	sub	sp, #52	@ 0x34
 801ae3e:	af00      	add	r7, sp, #0
 801ae40:	60f8      	str	r0, [r7, #12]
 801ae42:	60b9      	str	r1, [r7, #8]
 801ae44:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ae46:	2300      	movs	r3, #0
 801ae48:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ae4e:	4b37      	ldr	r3, [pc, #220]	@ (801af2c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ae50:	7a1b      	ldrb	r3, [r3, #8]
 801ae52:	461a      	mov	r2, r3
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	4293      	cmp	r3, r2
 801ae58:	d902      	bls.n	801ae60 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ae5a:	f06f 0304 	mvn.w	r3, #4
 801ae5e:	e05e      	b.n	801af1e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ae60:	4b32      	ldr	r3, [pc, #200]	@ (801af2c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ae62:	68da      	ldr	r2, [r3, #12]
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	4013      	ands	r3, r2
 801ae68:	68ba      	ldr	r2, [r7, #8]
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d002      	beq.n	801ae74 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ae6e:	f06f 0305 	mvn.w	r3, #5
 801ae72:	e054      	b.n	801af1e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801ae74:	4b2d      	ldr	r3, [pc, #180]	@ (801af2c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ae76:	685b      	ldr	r3, [r3, #4]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d00a      	beq.n	801ae92 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d007      	beq.n	801ae92 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ae82:	4b2a      	ldr	r3, [pc, #168]	@ (801af2c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ae84:	685b      	ldr	r3, [r3, #4]
 801ae86:	f107 0116 	add.w	r1, r7, #22
 801ae8a:	f107 0218 	add.w	r2, r7, #24
 801ae8e:	4610      	mov	r0, r2
 801ae90:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ae92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801aea0:	4823      	ldr	r0, [pc, #140]	@ (801af30 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aea2:	f7ff fa2b 	bl	801a2fc <tiny_vsnprintf_like>
 801aea6:	4603      	mov	r3, r0
 801aea8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801aeaa:	f000 f9f1 	bl	801b290 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801aeae:	8afa      	ldrh	r2, [r7, #22]
 801aeb0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801aeb2:	4413      	add	r3, r2
 801aeb4:	b29b      	uxth	r3, r3
 801aeb6:	f107 0214 	add.w	r2, r7, #20
 801aeba:	4611      	mov	r1, r2
 801aebc:	4618      	mov	r0, r3
 801aebe:	f000 f969 	bl	801b194 <TRACE_AllocateBufer>
 801aec2:	4603      	mov	r3, r0
 801aec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aec8:	d025      	beq.n	801af16 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801aeca:	2300      	movs	r3, #0
 801aecc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801aece:	e00e      	b.n	801aeee <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801aed0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801aed2:	8aba      	ldrh	r2, [r7, #20]
 801aed4:	3330      	adds	r3, #48	@ 0x30
 801aed6:	443b      	add	r3, r7
 801aed8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801aedc:	4b15      	ldr	r3, [pc, #84]	@ (801af34 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801aede:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801aee0:	8abb      	ldrh	r3, [r7, #20]
 801aee2:	3301      	adds	r3, #1
 801aee4:	b29b      	uxth	r3, r3
 801aee6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801aee8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801aeea:	3301      	adds	r3, #1
 801aeec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801aeee:	8afb      	ldrh	r3, [r7, #22]
 801aef0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801aef2:	429a      	cmp	r2, r3
 801aef4:	d3ec      	bcc.n	801aed0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801aef6:	8abb      	ldrh	r3, [r7, #20]
 801aef8:	461a      	mov	r2, r3
 801aefa:	4b0e      	ldr	r3, [pc, #56]	@ (801af34 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801aefc:	18d0      	adds	r0, r2, r3
 801aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801af02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801af06:	f7ff f9f9 	bl	801a2fc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801af0a:	f000 f9df 	bl	801b2cc <TRACE_UnLock>

    return TRACE_Send();
 801af0e:	f000 f831 	bl	801af74 <TRACE_Send>
 801af12:	4603      	mov	r3, r0
 801af14:	e003      	b.n	801af1e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801af16:	f000 f9d9 	bl	801b2cc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801af1a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801af1e:	4618      	mov	r0, r3
 801af20:	3734      	adds	r7, #52	@ 0x34
 801af22:	46bd      	mov	sp, r7
 801af24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801af28:	b001      	add	sp, #4
 801af2a:	4770      	bx	lr
 801af2c:	20001b40 	.word	0x20001b40
 801af30:	20001f58 	.word	0x20001f58
 801af34:	20001b58 	.word	0x20001b58

0801af38 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801af38:	b480      	push	{r7}
 801af3a:	b083      	sub	sp, #12
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801af40:	4a03      	ldr	r2, [pc, #12]	@ (801af50 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	6053      	str	r3, [r2, #4]
}
 801af46:	bf00      	nop
 801af48:	370c      	adds	r7, #12
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bc80      	pop	{r7}
 801af4e:	4770      	bx	lr
 801af50:	20001b40 	.word	0x20001b40

0801af54 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801af54:	b480      	push	{r7}
 801af56:	b083      	sub	sp, #12
 801af58:	af00      	add	r7, sp, #0
 801af5a:	4603      	mov	r3, r0
 801af5c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801af5e:	4a04      	ldr	r2, [pc, #16]	@ (801af70 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801af60:	79fb      	ldrb	r3, [r7, #7]
 801af62:	7213      	strb	r3, [r2, #8]
}
 801af64:	bf00      	nop
 801af66:	370c      	adds	r7, #12
 801af68:	46bd      	mov	sp, r7
 801af6a:	bc80      	pop	{r7}
 801af6c:	4770      	bx	lr
 801af6e:	bf00      	nop
 801af70:	20001b40 	.word	0x20001b40

0801af74 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b088      	sub	sp, #32
 801af78:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801af7a:	2300      	movs	r3, #0
 801af7c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801af7e:	2300      	movs	r3, #0
 801af80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af82:	f3ef 8310 	mrs	r3, PRIMASK
 801af86:	613b      	str	r3, [r7, #16]
  return(result);
 801af88:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801af8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801af8c:	b672      	cpsid	i
}
 801af8e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801af90:	f000 f9ba 	bl	801b308 <TRACE_IsLocked>
 801af94:	4603      	mov	r3, r0
 801af96:	2b00      	cmp	r3, #0
 801af98:	d15d      	bne.n	801b056 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801af9a:	f000 f979 	bl	801b290 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801af9e:	4b34      	ldr	r3, [pc, #208]	@ (801b070 <TRACE_Send+0xfc>)
 801afa0:	8a1a      	ldrh	r2, [r3, #16]
 801afa2:	4b33      	ldr	r3, [pc, #204]	@ (801b070 <TRACE_Send+0xfc>)
 801afa4:	8a5b      	ldrh	r3, [r3, #18]
 801afa6:	429a      	cmp	r2, r3
 801afa8:	d04d      	beq.n	801b046 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801afaa:	4b31      	ldr	r3, [pc, #196]	@ (801b070 <TRACE_Send+0xfc>)
 801afac:	789b      	ldrb	r3, [r3, #2]
 801afae:	2b01      	cmp	r3, #1
 801afb0:	d117      	bne.n	801afe2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801afb2:	4b2f      	ldr	r3, [pc, #188]	@ (801b070 <TRACE_Send+0xfc>)
 801afb4:	881a      	ldrh	r2, [r3, #0]
 801afb6:	4b2e      	ldr	r3, [pc, #184]	@ (801b070 <TRACE_Send+0xfc>)
 801afb8:	8a1b      	ldrh	r3, [r3, #16]
 801afba:	1ad3      	subs	r3, r2, r3
 801afbc:	b29a      	uxth	r2, r3
 801afbe:	4b2c      	ldr	r3, [pc, #176]	@ (801b070 <TRACE_Send+0xfc>)
 801afc0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801afc2:	4b2b      	ldr	r3, [pc, #172]	@ (801b070 <TRACE_Send+0xfc>)
 801afc4:	2202      	movs	r2, #2
 801afc6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801afc8:	4b29      	ldr	r3, [pc, #164]	@ (801b070 <TRACE_Send+0xfc>)
 801afca:	2200      	movs	r2, #0
 801afcc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801afce:	4b28      	ldr	r3, [pc, #160]	@ (801b070 <TRACE_Send+0xfc>)
 801afd0:	8a9b      	ldrh	r3, [r3, #20]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d105      	bne.n	801afe2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801afd6:	4b26      	ldr	r3, [pc, #152]	@ (801b070 <TRACE_Send+0xfc>)
 801afd8:	2200      	movs	r2, #0
 801afda:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801afdc:	4b24      	ldr	r3, [pc, #144]	@ (801b070 <TRACE_Send+0xfc>)
 801afde:	2200      	movs	r2, #0
 801afe0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801afe2:	4b23      	ldr	r3, [pc, #140]	@ (801b070 <TRACE_Send+0xfc>)
 801afe4:	789b      	ldrb	r3, [r3, #2]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d115      	bne.n	801b016 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801afea:	4b21      	ldr	r3, [pc, #132]	@ (801b070 <TRACE_Send+0xfc>)
 801afec:	8a5a      	ldrh	r2, [r3, #18]
 801afee:	4b20      	ldr	r3, [pc, #128]	@ (801b070 <TRACE_Send+0xfc>)
 801aff0:	8a1b      	ldrh	r3, [r3, #16]
 801aff2:	429a      	cmp	r2, r3
 801aff4:	d908      	bls.n	801b008 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801aff6:	4b1e      	ldr	r3, [pc, #120]	@ (801b070 <TRACE_Send+0xfc>)
 801aff8:	8a5a      	ldrh	r2, [r3, #18]
 801affa:	4b1d      	ldr	r3, [pc, #116]	@ (801b070 <TRACE_Send+0xfc>)
 801affc:	8a1b      	ldrh	r3, [r3, #16]
 801affe:	1ad3      	subs	r3, r2, r3
 801b000:	b29a      	uxth	r2, r3
 801b002:	4b1b      	ldr	r3, [pc, #108]	@ (801b070 <TRACE_Send+0xfc>)
 801b004:	829a      	strh	r2, [r3, #20]
 801b006:	e006      	b.n	801b016 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b008:	4b19      	ldr	r3, [pc, #100]	@ (801b070 <TRACE_Send+0xfc>)
 801b00a:	8a1b      	ldrh	r3, [r3, #16]
 801b00c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b010:	b29a      	uxth	r2, r3
 801b012:	4b17      	ldr	r3, [pc, #92]	@ (801b070 <TRACE_Send+0xfc>)
 801b014:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b016:	4b16      	ldr	r3, [pc, #88]	@ (801b070 <TRACE_Send+0xfc>)
 801b018:	8a1b      	ldrh	r3, [r3, #16]
 801b01a:	461a      	mov	r2, r3
 801b01c:	4b15      	ldr	r3, [pc, #84]	@ (801b074 <TRACE_Send+0x100>)
 801b01e:	4413      	add	r3, r2
 801b020:	61bb      	str	r3, [r7, #24]
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	f383 8810 	msr	PRIMASK, r3
}
 801b02c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b02e:	f7e6 fd8f 	bl	8001b50 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b032:	4b11      	ldr	r3, [pc, #68]	@ (801b078 <TRACE_Send+0x104>)
 801b034:	68db      	ldr	r3, [r3, #12]
 801b036:	4a0e      	ldr	r2, [pc, #56]	@ (801b070 <TRACE_Send+0xfc>)
 801b038:	8a92      	ldrh	r2, [r2, #20]
 801b03a:	4611      	mov	r1, r2
 801b03c:	69b8      	ldr	r0, [r7, #24]
 801b03e:	4798      	blx	r3
 801b040:	4603      	mov	r3, r0
 801b042:	77fb      	strb	r3, [r7, #31]
 801b044:	e00d      	b.n	801b062 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b046:	f000 f941 	bl	801b2cc <TRACE_UnLock>
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b04e:	68bb      	ldr	r3, [r7, #8]
 801b050:	f383 8810 	msr	PRIMASK, r3
}
 801b054:	e005      	b.n	801b062 <TRACE_Send+0xee>
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	f383 8810 	msr	PRIMASK, r3
}
 801b060:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b062:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b066:	4618      	mov	r0, r3
 801b068:	3720      	adds	r7, #32
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}
 801b06e:	bf00      	nop
 801b070:	20001b40 	.word	0x20001b40
 801b074:	20001b58 	.word	0x20001b58
 801b078:	0801be90 	.word	0x0801be90

0801b07c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b088      	sub	sp, #32
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b084:	2300      	movs	r3, #0
 801b086:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b088:	f3ef 8310 	mrs	r3, PRIMASK
 801b08c:	617b      	str	r3, [r7, #20]
  return(result);
 801b08e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b092:	b672      	cpsid	i
}
 801b094:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b096:	4b3c      	ldr	r3, [pc, #240]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b098:	789b      	ldrb	r3, [r3, #2]
 801b09a:	2b02      	cmp	r3, #2
 801b09c:	d106      	bne.n	801b0ac <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b09e:	4b3a      	ldr	r3, [pc, #232]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b0a4:	4b38      	ldr	r3, [pc, #224]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	821a      	strh	r2, [r3, #16]
 801b0aa:	e00a      	b.n	801b0c2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b0ac:	4b36      	ldr	r3, [pc, #216]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0ae:	8a1a      	ldrh	r2, [r3, #16]
 801b0b0:	4b35      	ldr	r3, [pc, #212]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0b2:	8a9b      	ldrh	r3, [r3, #20]
 801b0b4:	4413      	add	r3, r2
 801b0b6:	b29b      	uxth	r3, r3
 801b0b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b0bc:	b29a      	uxth	r2, r3
 801b0be:	4b32      	ldr	r3, [pc, #200]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0c0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b0c2:	4b31      	ldr	r3, [pc, #196]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0c4:	8a1a      	ldrh	r2, [r3, #16]
 801b0c6:	4b30      	ldr	r3, [pc, #192]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0c8:	8a5b      	ldrh	r3, [r3, #18]
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d04d      	beq.n	801b16a <TRACE_TxCpltCallback+0xee>
 801b0ce:	4b2e      	ldr	r3, [pc, #184]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0d0:	8adb      	ldrh	r3, [r3, #22]
 801b0d2:	2b01      	cmp	r3, #1
 801b0d4:	d149      	bne.n	801b16a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b0d6:	4b2c      	ldr	r3, [pc, #176]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0d8:	789b      	ldrb	r3, [r3, #2]
 801b0da:	2b01      	cmp	r3, #1
 801b0dc:	d117      	bne.n	801b10e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b0de:	4b2a      	ldr	r3, [pc, #168]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0e0:	881a      	ldrh	r2, [r3, #0]
 801b0e2:	4b29      	ldr	r3, [pc, #164]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0e4:	8a1b      	ldrh	r3, [r3, #16]
 801b0e6:	1ad3      	subs	r3, r2, r3
 801b0e8:	b29a      	uxth	r2, r3
 801b0ea:	4b27      	ldr	r3, [pc, #156]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0ec:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b0ee:	4b26      	ldr	r3, [pc, #152]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0f0:	2202      	movs	r2, #2
 801b0f2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b0f4:	4b24      	ldr	r3, [pc, #144]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0f6:	2200      	movs	r2, #0
 801b0f8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b0fa:	4b23      	ldr	r3, [pc, #140]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b0fc:	8a9b      	ldrh	r3, [r3, #20]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d105      	bne.n	801b10e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b102:	4b21      	ldr	r3, [pc, #132]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b104:	2200      	movs	r2, #0
 801b106:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b108:	4b1f      	ldr	r3, [pc, #124]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b10a:	2200      	movs	r2, #0
 801b10c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b10e:	4b1e      	ldr	r3, [pc, #120]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b110:	789b      	ldrb	r3, [r3, #2]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d115      	bne.n	801b142 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b116:	4b1c      	ldr	r3, [pc, #112]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b118:	8a5a      	ldrh	r2, [r3, #18]
 801b11a:	4b1b      	ldr	r3, [pc, #108]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b11c:	8a1b      	ldrh	r3, [r3, #16]
 801b11e:	429a      	cmp	r2, r3
 801b120:	d908      	bls.n	801b134 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b122:	4b19      	ldr	r3, [pc, #100]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b124:	8a5a      	ldrh	r2, [r3, #18]
 801b126:	4b18      	ldr	r3, [pc, #96]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b128:	8a1b      	ldrh	r3, [r3, #16]
 801b12a:	1ad3      	subs	r3, r2, r3
 801b12c:	b29a      	uxth	r2, r3
 801b12e:	4b16      	ldr	r3, [pc, #88]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b130:	829a      	strh	r2, [r3, #20]
 801b132:	e006      	b.n	801b142 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b134:	4b14      	ldr	r3, [pc, #80]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b136:	8a1b      	ldrh	r3, [r3, #16]
 801b138:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	4b12      	ldr	r3, [pc, #72]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b140:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b142:	4b11      	ldr	r3, [pc, #68]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b144:	8a1b      	ldrh	r3, [r3, #16]
 801b146:	461a      	mov	r2, r3
 801b148:	4b10      	ldr	r3, [pc, #64]	@ (801b18c <TRACE_TxCpltCallback+0x110>)
 801b14a:	4413      	add	r3, r2
 801b14c:	61fb      	str	r3, [r7, #28]
 801b14e:	69bb      	ldr	r3, [r7, #24]
 801b150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	f383 8810 	msr	PRIMASK, r3
}
 801b158:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b15a:	4b0d      	ldr	r3, [pc, #52]	@ (801b190 <TRACE_TxCpltCallback+0x114>)
 801b15c:	68db      	ldr	r3, [r3, #12]
 801b15e:	4a0a      	ldr	r2, [pc, #40]	@ (801b188 <TRACE_TxCpltCallback+0x10c>)
 801b160:	8a92      	ldrh	r2, [r2, #20]
 801b162:	4611      	mov	r1, r2
 801b164:	69f8      	ldr	r0, [r7, #28]
 801b166:	4798      	blx	r3
 801b168:	e00a      	b.n	801b180 <TRACE_TxCpltCallback+0x104>
 801b16a:	69bb      	ldr	r3, [r7, #24]
 801b16c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	f383 8810 	msr	PRIMASK, r3
}
 801b174:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b176:	f7e6 fcf3 	bl	8001b60 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b17a:	f000 f8a7 	bl	801b2cc <TRACE_UnLock>
  }
}
 801b17e:	bf00      	nop
 801b180:	bf00      	nop
 801b182:	3720      	adds	r7, #32
 801b184:	46bd      	mov	sp, r7
 801b186:	bd80      	pop	{r7, pc}
 801b188:	20001b40 	.word	0x20001b40
 801b18c:	20001b58 	.word	0x20001b58
 801b190:	0801be90 	.word	0x0801be90

0801b194 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b194:	b480      	push	{r7}
 801b196:	b087      	sub	sp, #28
 801b198:	af00      	add	r7, sp, #0
 801b19a:	4603      	mov	r3, r0
 801b19c:	6039      	str	r1, [r7, #0]
 801b19e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b1a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1a4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1a6:	f3ef 8310 	mrs	r3, PRIMASK
 801b1aa:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1ac:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b1ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1b0:	b672      	cpsid	i
}
 801b1b2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b1b4:	4b35      	ldr	r3, [pc, #212]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1b6:	8a5a      	ldrh	r2, [r3, #18]
 801b1b8:	4b34      	ldr	r3, [pc, #208]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1ba:	8a1b      	ldrh	r3, [r3, #16]
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d11b      	bne.n	801b1f8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b1c0:	4b32      	ldr	r3, [pc, #200]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1c2:	8a5b      	ldrh	r3, [r3, #18]
 801b1c4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b1c8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b1ca:	88fa      	ldrh	r2, [r7, #6]
 801b1cc:	8afb      	ldrh	r3, [r7, #22]
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d33a      	bcc.n	801b248 <TRACE_AllocateBufer+0xb4>
 801b1d2:	4b2e      	ldr	r3, [pc, #184]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1d4:	8a1b      	ldrh	r3, [r3, #16]
 801b1d6:	88fa      	ldrh	r2, [r7, #6]
 801b1d8:	429a      	cmp	r2, r3
 801b1da:	d235      	bcs.n	801b248 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b1dc:	4b2b      	ldr	r3, [pc, #172]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1de:	2201      	movs	r2, #1
 801b1e0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b1e2:	4b2a      	ldr	r3, [pc, #168]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1e4:	8a5a      	ldrh	r2, [r3, #18]
 801b1e6:	4b29      	ldr	r3, [pc, #164]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1e8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b1ea:	4b28      	ldr	r3, [pc, #160]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1ec:	8a1b      	ldrh	r3, [r3, #16]
 801b1ee:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b1f0:	4b26      	ldr	r3, [pc, #152]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	825a      	strh	r2, [r3, #18]
 801b1f6:	e027      	b.n	801b248 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b1f8:	4b24      	ldr	r3, [pc, #144]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1fa:	8a5a      	ldrh	r2, [r3, #18]
 801b1fc:	4b23      	ldr	r3, [pc, #140]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b1fe:	8a1b      	ldrh	r3, [r3, #16]
 801b200:	429a      	cmp	r2, r3
 801b202:	d91b      	bls.n	801b23c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b204:	4b21      	ldr	r3, [pc, #132]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b206:	8a5b      	ldrh	r3, [r3, #18]
 801b208:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b20c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b20e:	88fa      	ldrh	r2, [r7, #6]
 801b210:	8afb      	ldrh	r3, [r7, #22]
 801b212:	429a      	cmp	r2, r3
 801b214:	d318      	bcc.n	801b248 <TRACE_AllocateBufer+0xb4>
 801b216:	4b1d      	ldr	r3, [pc, #116]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b218:	8a1b      	ldrh	r3, [r3, #16]
 801b21a:	88fa      	ldrh	r2, [r7, #6]
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d213      	bcs.n	801b248 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b220:	4b1a      	ldr	r3, [pc, #104]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b222:	2201      	movs	r2, #1
 801b224:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b226:	4b19      	ldr	r3, [pc, #100]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b228:	8a5a      	ldrh	r2, [r3, #18]
 801b22a:	4b18      	ldr	r3, [pc, #96]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b22c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b22e:	4b17      	ldr	r3, [pc, #92]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b230:	8a1b      	ldrh	r3, [r3, #16]
 801b232:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b234:	4b15      	ldr	r3, [pc, #84]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b236:	2200      	movs	r2, #0
 801b238:	825a      	strh	r2, [r3, #18]
 801b23a:	e005      	b.n	801b248 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b23c:	4b13      	ldr	r3, [pc, #76]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b23e:	8a1a      	ldrh	r2, [r3, #16]
 801b240:	4b12      	ldr	r3, [pc, #72]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b242:	8a5b      	ldrh	r3, [r3, #18]
 801b244:	1ad3      	subs	r3, r2, r3
 801b246:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b248:	8afa      	ldrh	r2, [r7, #22]
 801b24a:	88fb      	ldrh	r3, [r7, #6]
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d90f      	bls.n	801b270 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b250:	4b0e      	ldr	r3, [pc, #56]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b252:	8a5a      	ldrh	r2, [r3, #18]
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b258:	4b0c      	ldr	r3, [pc, #48]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b25a:	8a5a      	ldrh	r2, [r3, #18]
 801b25c:	88fb      	ldrh	r3, [r7, #6]
 801b25e:	4413      	add	r3, r2
 801b260:	b29b      	uxth	r3, r3
 801b262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b266:	b29a      	uxth	r2, r3
 801b268:	4b08      	ldr	r3, [pc, #32]	@ (801b28c <TRACE_AllocateBufer+0xf8>)
 801b26a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b26c:	2300      	movs	r3, #0
 801b26e:	82bb      	strh	r3, [r7, #20]
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	f383 8810 	msr	PRIMASK, r3
}
 801b27a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b27c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b280:	4618      	mov	r0, r3
 801b282:	371c      	adds	r7, #28
 801b284:	46bd      	mov	sp, r7
 801b286:	bc80      	pop	{r7}
 801b288:	4770      	bx	lr
 801b28a:	bf00      	nop
 801b28c:	20001b40 	.word	0x20001b40

0801b290 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b290:	b480      	push	{r7}
 801b292:	b085      	sub	sp, #20
 801b294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b296:	f3ef 8310 	mrs	r3, PRIMASK
 801b29a:	607b      	str	r3, [r7, #4]
  return(result);
 801b29c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b29e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b2a0:	b672      	cpsid	i
}
 801b2a2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b2a4:	4b08      	ldr	r3, [pc, #32]	@ (801b2c8 <TRACE_Lock+0x38>)
 801b2a6:	8adb      	ldrh	r3, [r3, #22]
 801b2a8:	3301      	adds	r3, #1
 801b2aa:	b29a      	uxth	r2, r3
 801b2ac:	4b06      	ldr	r3, [pc, #24]	@ (801b2c8 <TRACE_Lock+0x38>)
 801b2ae:	82da      	strh	r2, [r3, #22]
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	f383 8810 	msr	PRIMASK, r3
}
 801b2ba:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b2bc:	bf00      	nop
 801b2be:	3714      	adds	r7, #20
 801b2c0:	46bd      	mov	sp, r7
 801b2c2:	bc80      	pop	{r7}
 801b2c4:	4770      	bx	lr
 801b2c6:	bf00      	nop
 801b2c8:	20001b40 	.word	0x20001b40

0801b2cc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b2cc:	b480      	push	{r7}
 801b2ce:	b085      	sub	sp, #20
 801b2d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2d2:	f3ef 8310 	mrs	r3, PRIMASK
 801b2d6:	607b      	str	r3, [r7, #4]
  return(result);
 801b2d8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b2da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b2dc:	b672      	cpsid	i
}
 801b2de:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b2e0:	4b08      	ldr	r3, [pc, #32]	@ (801b304 <TRACE_UnLock+0x38>)
 801b2e2:	8adb      	ldrh	r3, [r3, #22]
 801b2e4:	3b01      	subs	r3, #1
 801b2e6:	b29a      	uxth	r2, r3
 801b2e8:	4b06      	ldr	r3, [pc, #24]	@ (801b304 <TRACE_UnLock+0x38>)
 801b2ea:	82da      	strh	r2, [r3, #22]
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2f0:	68bb      	ldr	r3, [r7, #8]
 801b2f2:	f383 8810 	msr	PRIMASK, r3
}
 801b2f6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b2f8:	bf00      	nop
 801b2fa:	3714      	adds	r7, #20
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	bc80      	pop	{r7}
 801b300:	4770      	bx	lr
 801b302:	bf00      	nop
 801b304:	20001b40 	.word	0x20001b40

0801b308 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b308:	b480      	push	{r7}
 801b30a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b30c:	4b05      	ldr	r3, [pc, #20]	@ (801b324 <TRACE_IsLocked+0x1c>)
 801b30e:	8adb      	ldrh	r3, [r3, #22]
 801b310:	2b00      	cmp	r3, #0
 801b312:	bf14      	ite	ne
 801b314:	2301      	movne	r3, #1
 801b316:	2300      	moveq	r3, #0
 801b318:	b2db      	uxtb	r3, r3
}
 801b31a:	4618      	mov	r0, r3
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bc80      	pop	{r7}
 801b320:	4770      	bx	lr
 801b322:	bf00      	nop
 801b324:	20001b40 	.word	0x20001b40

0801b328 <memset>:
 801b328:	4402      	add	r2, r0
 801b32a:	4603      	mov	r3, r0
 801b32c:	4293      	cmp	r3, r2
 801b32e:	d100      	bne.n	801b332 <memset+0xa>
 801b330:	4770      	bx	lr
 801b332:	f803 1b01 	strb.w	r1, [r3], #1
 801b336:	e7f9      	b.n	801b32c <memset+0x4>

0801b338 <__libc_init_array>:
 801b338:	b570      	push	{r4, r5, r6, lr}
 801b33a:	4d0d      	ldr	r5, [pc, #52]	@ (801b370 <__libc_init_array+0x38>)
 801b33c:	4c0d      	ldr	r4, [pc, #52]	@ (801b374 <__libc_init_array+0x3c>)
 801b33e:	1b64      	subs	r4, r4, r5
 801b340:	10a4      	asrs	r4, r4, #2
 801b342:	2600      	movs	r6, #0
 801b344:	42a6      	cmp	r6, r4
 801b346:	d109      	bne.n	801b35c <__libc_init_array+0x24>
 801b348:	4d0b      	ldr	r5, [pc, #44]	@ (801b378 <__libc_init_array+0x40>)
 801b34a:	4c0c      	ldr	r4, [pc, #48]	@ (801b37c <__libc_init_array+0x44>)
 801b34c:	f000 f898 	bl	801b480 <_init>
 801b350:	1b64      	subs	r4, r4, r5
 801b352:	10a4      	asrs	r4, r4, #2
 801b354:	2600      	movs	r6, #0
 801b356:	42a6      	cmp	r6, r4
 801b358:	d105      	bne.n	801b366 <__libc_init_array+0x2e>
 801b35a:	bd70      	pop	{r4, r5, r6, pc}
 801b35c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b360:	4798      	blx	r3
 801b362:	3601      	adds	r6, #1
 801b364:	e7ee      	b.n	801b344 <__libc_init_array+0xc>
 801b366:	f855 3b04 	ldr.w	r3, [r5], #4
 801b36a:	4798      	blx	r3
 801b36c:	3601      	adds	r6, #1
 801b36e:	e7f2      	b.n	801b356 <__libc_init_array+0x1e>
 801b370:	0801c4a8 	.word	0x0801c4a8
 801b374:	0801c4a8 	.word	0x0801c4a8
 801b378:	0801c4a8 	.word	0x0801c4a8
 801b37c:	0801c4ac 	.word	0x0801c4ac

0801b380 <floor>:
 801b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b384:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b388:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801b38c:	2e13      	cmp	r6, #19
 801b38e:	4602      	mov	r2, r0
 801b390:	460b      	mov	r3, r1
 801b392:	460c      	mov	r4, r1
 801b394:	4605      	mov	r5, r0
 801b396:	4680      	mov	r8, r0
 801b398:	dc35      	bgt.n	801b406 <floor+0x86>
 801b39a:	2e00      	cmp	r6, #0
 801b39c:	da17      	bge.n	801b3ce <floor+0x4e>
 801b39e:	a334      	add	r3, pc, #208	@ (adr r3, 801b470 <floor+0xf0>)
 801b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3a4:	f7e4 ffaa 	bl	80002fc <__adddf3>
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	f7e5 f9da 	bl	8000764 <__aeabi_dcmpgt>
 801b3b0:	b150      	cbz	r0, 801b3c8 <floor+0x48>
 801b3b2:	2c00      	cmp	r4, #0
 801b3b4:	da57      	bge.n	801b466 <floor+0xe6>
 801b3b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b3ba:	432c      	orrs	r4, r5
 801b3bc:	2500      	movs	r5, #0
 801b3be:	42ac      	cmp	r4, r5
 801b3c0:	4c2d      	ldr	r4, [pc, #180]	@ (801b478 <floor+0xf8>)
 801b3c2:	bf08      	it	eq
 801b3c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b3c8:	4623      	mov	r3, r4
 801b3ca:	462a      	mov	r2, r5
 801b3cc:	e024      	b.n	801b418 <floor+0x98>
 801b3ce:	4f2b      	ldr	r7, [pc, #172]	@ (801b47c <floor+0xfc>)
 801b3d0:	4137      	asrs	r7, r6
 801b3d2:	ea01 0c07 	and.w	ip, r1, r7
 801b3d6:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b3da:	d01d      	beq.n	801b418 <floor+0x98>
 801b3dc:	a324      	add	r3, pc, #144	@ (adr r3, 801b470 <floor+0xf0>)
 801b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e2:	f7e4 ff8b 	bl	80002fc <__adddf3>
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	f7e5 f9bb 	bl	8000764 <__aeabi_dcmpgt>
 801b3ee:	2800      	cmp	r0, #0
 801b3f0:	d0ea      	beq.n	801b3c8 <floor+0x48>
 801b3f2:	2c00      	cmp	r4, #0
 801b3f4:	bfbe      	ittt	lt
 801b3f6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b3fa:	4133      	asrlt	r3, r6
 801b3fc:	18e4      	addlt	r4, r4, r3
 801b3fe:	ea24 0407 	bic.w	r4, r4, r7
 801b402:	2500      	movs	r5, #0
 801b404:	e7e0      	b.n	801b3c8 <floor+0x48>
 801b406:	2e33      	cmp	r6, #51	@ 0x33
 801b408:	dd0a      	ble.n	801b420 <floor+0xa0>
 801b40a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b40e:	d103      	bne.n	801b418 <floor+0x98>
 801b410:	f7e4 ff74 	bl	80002fc <__adddf3>
 801b414:	4602      	mov	r2, r0
 801b416:	460b      	mov	r3, r1
 801b418:	4610      	mov	r0, r2
 801b41a:	4619      	mov	r1, r3
 801b41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b420:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801b424:	f04f 3cff 	mov.w	ip, #4294967295
 801b428:	fa2c f707 	lsr.w	r7, ip, r7
 801b42c:	4207      	tst	r7, r0
 801b42e:	d0f3      	beq.n	801b418 <floor+0x98>
 801b430:	a30f      	add	r3, pc, #60	@ (adr r3, 801b470 <floor+0xf0>)
 801b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b436:	f7e4 ff61 	bl	80002fc <__adddf3>
 801b43a:	2200      	movs	r2, #0
 801b43c:	2300      	movs	r3, #0
 801b43e:	f7e5 f991 	bl	8000764 <__aeabi_dcmpgt>
 801b442:	2800      	cmp	r0, #0
 801b444:	d0c0      	beq.n	801b3c8 <floor+0x48>
 801b446:	2c00      	cmp	r4, #0
 801b448:	da0a      	bge.n	801b460 <floor+0xe0>
 801b44a:	2e14      	cmp	r6, #20
 801b44c:	d101      	bne.n	801b452 <floor+0xd2>
 801b44e:	3401      	adds	r4, #1
 801b450:	e006      	b.n	801b460 <floor+0xe0>
 801b452:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b456:	2301      	movs	r3, #1
 801b458:	40b3      	lsls	r3, r6
 801b45a:	441d      	add	r5, r3
 801b45c:	4545      	cmp	r5, r8
 801b45e:	d3f6      	bcc.n	801b44e <floor+0xce>
 801b460:	ea25 0507 	bic.w	r5, r5, r7
 801b464:	e7b0      	b.n	801b3c8 <floor+0x48>
 801b466:	2500      	movs	r5, #0
 801b468:	462c      	mov	r4, r5
 801b46a:	e7ad      	b.n	801b3c8 <floor+0x48>
 801b46c:	f3af 8000 	nop.w
 801b470:	8800759c 	.word	0x8800759c
 801b474:	7e37e43c 	.word	0x7e37e43c
 801b478:	bff00000 	.word	0xbff00000
 801b47c:	000fffff 	.word	0x000fffff

0801b480 <_init>:
 801b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b482:	bf00      	nop
 801b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b486:	bc08      	pop	{r3}
 801b488:	469e      	mov	lr, r3
 801b48a:	4770      	bx	lr

0801b48c <_fini>:
 801b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b48e:	bf00      	nop
 801b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b492:	bc08      	pop	{r3}
 801b494:	469e      	mov	lr, r3
 801b496:	4770      	bx	lr
