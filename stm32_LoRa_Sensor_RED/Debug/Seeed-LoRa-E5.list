
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f698  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f8  0801f7d8  0801f7d8  000207d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08020bd0  08020bd0  00021bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020c90  08020c90  00022308  2**0
                  CONTENTS
  5 .ARM          00000008  08020c90  08020c90  00021c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020c98  08020c98  00022308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08020c98  08020c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08020c9c  08020c9c  00021c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000308  20000000  08020ca0  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000021fc  20000308  08020fa8  00022308  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002504  08020fa8  00022504  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00022308  2**0
                  CONTENTS, READONLY
 13 .debug_info   000402bd  00000000  00000000  00022332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a4fb  00000000  00000000  000625ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003320  00000000  00000000  0006caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026cd  00000000  00000000  0006fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad9  00000000  00000000  000724dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f548  00000000  00000000  0009afb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4f5  00000000  00000000  000da4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a59f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e050  00000000  00000000  001a5a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001b3a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f7c0 	.word	0x0801f7c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801f7c0 	.word	0x0801f7c0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b96a 	b.w	800138c <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9d08      	ldr	r5, [sp, #32]
 80010d6:	460c      	mov	r4, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14e      	bne.n	800117a <__udivmoddi4+0xaa>
 80010dc:	4694      	mov	ip, r2
 80010de:	458c      	cmp	ip, r1
 80010e0:	4686      	mov	lr, r0
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	d962      	bls.n	80011ae <__udivmoddi4+0xde>
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0320 	rsb	r3, r2, #32
 80010ee:	4091      	lsls	r1, r2
 80010f0:	fa20 f303 	lsr.w	r3, r0, r3
 80010f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f8:	4319      	orrs	r1, r3
 80010fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fa1f f68c 	uxth.w	r6, ip
 8001106:	fbb1 f4f7 	udiv	r4, r1, r7
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	fb07 1114 	mls	r1, r7, r4, r1
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb04 f106 	mul.w	r1, r4, r6
 800111a:	4299      	cmp	r1, r3
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x64>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f104 30ff 	add.w	r0, r4, #4294967295
 8001126:	f080 8112 	bcs.w	800134e <__udivmoddi4+0x27e>
 800112a:	4299      	cmp	r1, r3
 800112c:	f240 810f 	bls.w	800134e <__udivmoddi4+0x27e>
 8001130:	3c02      	subs	r4, #2
 8001132:	4463      	add	r3, ip
 8001134:	1a59      	subs	r1, r3, r1
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	fbb1 f0f7 	udiv	r0, r1, r7
 800113e:	fb07 1110 	mls	r1, r7, r0, r1
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	fb00 f606 	mul.w	r6, r0, r6
 800114a:	429e      	cmp	r6, r3
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0303 	adds.w	r3, ip, r3
 8001152:	f100 31ff 	add.w	r1, r0, #4294967295
 8001156:	f080 80fc 	bcs.w	8001352 <__udivmoddi4+0x282>
 800115a:	429e      	cmp	r6, r3
 800115c:	f240 80f9 	bls.w	8001352 <__udivmoddi4+0x282>
 8001160:	4463      	add	r3, ip
 8001162:	3802      	subs	r0, #2
 8001164:	1b9b      	subs	r3, r3, r6
 8001166:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800116a:	2100      	movs	r1, #0
 800116c:	b11d      	cbz	r5, 8001176 <__udivmoddi4+0xa6>
 800116e:	40d3      	lsrs	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	e9c5 3200 	strd	r3, r2, [r5]
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	428b      	cmp	r3, r1
 800117c:	d905      	bls.n	800118a <__udivmoddi4+0xba>
 800117e:	b10d      	cbz	r5, 8001184 <__udivmoddi4+0xb4>
 8001180:	e9c5 0100 	strd	r0, r1, [r5]
 8001184:	2100      	movs	r1, #0
 8001186:	4608      	mov	r0, r1
 8001188:	e7f5      	b.n	8001176 <__udivmoddi4+0xa6>
 800118a:	fab3 f183 	clz	r1, r3
 800118e:	2900      	cmp	r1, #0
 8001190:	d146      	bne.n	8001220 <__udivmoddi4+0x150>
 8001192:	42a3      	cmp	r3, r4
 8001194:	d302      	bcc.n	800119c <__udivmoddi4+0xcc>
 8001196:	4290      	cmp	r0, r2
 8001198:	f0c0 80f0 	bcc.w	800137c <__udivmoddi4+0x2ac>
 800119c:	1a86      	subs	r6, r0, r2
 800119e:	eb64 0303 	sbc.w	r3, r4, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d0e6      	beq.n	8001176 <__udivmoddi4+0xa6>
 80011a8:	e9c5 6300 	strd	r6, r3, [r5]
 80011ac:	e7e3      	b.n	8001176 <__udivmoddi4+0xa6>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	f040 8090 	bne.w	80012d4 <__udivmoddi4+0x204>
 80011b4:	eba1 040c 	sub.w	r4, r1, ip
 80011b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011bc:	fa1f f78c 	uxth.w	r7, ip
 80011c0:	2101      	movs	r1, #1
 80011c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ca:	fb08 4416 	mls	r4, r8, r6, r4
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	fb07 f006 	mul.w	r0, r7, r6
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0x11c>
 80011da:	eb1c 0303 	adds.w	r3, ip, r3
 80011de:	f106 34ff 	add.w	r4, r6, #4294967295
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x11a>
 80011e4:	4298      	cmp	r0, r3
 80011e6:	f200 80cd 	bhi.w	8001384 <__udivmoddi4+0x2b4>
 80011ea:	4626      	mov	r6, r4
 80011ec:	1a1c      	subs	r4, r3, r0
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011f6:	fb08 4410 	mls	r4, r8, r0, r4
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	fb00 f707 	mul.w	r7, r0, r7
 8001202:	429f      	cmp	r7, r3
 8001204:	d908      	bls.n	8001218 <__udivmoddi4+0x148>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 34ff 	add.w	r4, r0, #4294967295
 800120e:	d202      	bcs.n	8001216 <__udivmoddi4+0x146>
 8001210:	429f      	cmp	r7, r3
 8001212:	f200 80b0 	bhi.w	8001376 <__udivmoddi4+0x2a6>
 8001216:	4620      	mov	r0, r4
 8001218:	1bdb      	subs	r3, r3, r7
 800121a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121e:	e7a5      	b.n	800116c <__udivmoddi4+0x9c>
 8001220:	f1c1 0620 	rsb	r6, r1, #32
 8001224:	408b      	lsls	r3, r1
 8001226:	fa22 f706 	lsr.w	r7, r2, r6
 800122a:	431f      	orrs	r7, r3
 800122c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001230:	fa04 f301 	lsl.w	r3, r4, r1
 8001234:	ea43 030c 	orr.w	r3, r3, ip
 8001238:	40f4      	lsrs	r4, r6
 800123a:	fa00 f801 	lsl.w	r8, r0, r1
 800123e:	0c38      	lsrs	r0, r7, #16
 8001240:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001244:	fbb4 fef0 	udiv	lr, r4, r0
 8001248:	fa1f fc87 	uxth.w	ip, r7
 800124c:	fb00 441e 	mls	r4, r0, lr, r4
 8001250:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001254:	fb0e f90c 	mul.w	r9, lr, ip
 8001258:	45a1      	cmp	r9, r4
 800125a:	fa02 f201 	lsl.w	r2, r2, r1
 800125e:	d90a      	bls.n	8001276 <__udivmoddi4+0x1a6>
 8001260:	193c      	adds	r4, r7, r4
 8001262:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001266:	f080 8084 	bcs.w	8001372 <__udivmoddi4+0x2a2>
 800126a:	45a1      	cmp	r9, r4
 800126c:	f240 8081 	bls.w	8001372 <__udivmoddi4+0x2a2>
 8001270:	f1ae 0e02 	sub.w	lr, lr, #2
 8001274:	443c      	add	r4, r7
 8001276:	eba4 0409 	sub.w	r4, r4, r9
 800127a:	fa1f f983 	uxth.w	r9, r3
 800127e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001282:	fb00 4413 	mls	r4, r0, r3, r4
 8001286:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800128a:	fb03 fc0c 	mul.w	ip, r3, ip
 800128e:	45a4      	cmp	ip, r4
 8001290:	d907      	bls.n	80012a2 <__udivmoddi4+0x1d2>
 8001292:	193c      	adds	r4, r7, r4
 8001294:	f103 30ff 	add.w	r0, r3, #4294967295
 8001298:	d267      	bcs.n	800136a <__udivmoddi4+0x29a>
 800129a:	45a4      	cmp	ip, r4
 800129c:	d965      	bls.n	800136a <__udivmoddi4+0x29a>
 800129e:	3b02      	subs	r3, #2
 80012a0:	443c      	add	r4, r7
 80012a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012a6:	fba0 9302 	umull	r9, r3, r0, r2
 80012aa:	eba4 040c 	sub.w	r4, r4, ip
 80012ae:	429c      	cmp	r4, r3
 80012b0:	46ce      	mov	lr, r9
 80012b2:	469c      	mov	ip, r3
 80012b4:	d351      	bcc.n	800135a <__udivmoddi4+0x28a>
 80012b6:	d04e      	beq.n	8001356 <__udivmoddi4+0x286>
 80012b8:	b155      	cbz	r5, 80012d0 <__udivmoddi4+0x200>
 80012ba:	ebb8 030e 	subs.w	r3, r8, lr
 80012be:	eb64 040c 	sbc.w	r4, r4, ip
 80012c2:	fa04 f606 	lsl.w	r6, r4, r6
 80012c6:	40cb      	lsrs	r3, r1
 80012c8:	431e      	orrs	r6, r3
 80012ca:	40cc      	lsrs	r4, r1
 80012cc:	e9c5 6400 	strd	r6, r4, [r5]
 80012d0:	2100      	movs	r1, #0
 80012d2:	e750      	b.n	8001176 <__udivmoddi4+0xa6>
 80012d4:	f1c2 0320 	rsb	r3, r2, #32
 80012d8:	fa20 f103 	lsr.w	r1, r0, r3
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	fa24 f303 	lsr.w	r3, r4, r3
 80012e4:	4094      	lsls	r4, r2
 80012e6:	430c      	orrs	r4, r1
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012f8:	fb08 3110 	mls	r1, r8, r0, r3
 80012fc:	0c23      	lsrs	r3, r4, #16
 80012fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001302:	fb00 f107 	mul.w	r1, r0, r7
 8001306:	4299      	cmp	r1, r3
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x24c>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001312:	d22c      	bcs.n	800136e <__udivmoddi4+0x29e>
 8001314:	4299      	cmp	r1, r3
 8001316:	d92a      	bls.n	800136e <__udivmoddi4+0x29e>
 8001318:	3802      	subs	r0, #2
 800131a:	4463      	add	r3, ip
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	b2a4      	uxth	r4, r4
 8001320:	fbb3 f1f8 	udiv	r1, r3, r8
 8001324:	fb08 3311 	mls	r3, r8, r1, r3
 8001328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800132c:	fb01 f307 	mul.w	r3, r1, r7
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x276>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f101 36ff 	add.w	r6, r1, #4294967295
 800133c:	d213      	bcs.n	8001366 <__udivmoddi4+0x296>
 800133e:	42a3      	cmp	r3, r4
 8001340:	d911      	bls.n	8001366 <__udivmoddi4+0x296>
 8001342:	3902      	subs	r1, #2
 8001344:	4464      	add	r4, ip
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800134c:	e739      	b.n	80011c2 <__udivmoddi4+0xf2>
 800134e:	4604      	mov	r4, r0
 8001350:	e6f0      	b.n	8001134 <__udivmoddi4+0x64>
 8001352:	4608      	mov	r0, r1
 8001354:	e706      	b.n	8001164 <__udivmoddi4+0x94>
 8001356:	45c8      	cmp	r8, r9
 8001358:	d2ae      	bcs.n	80012b8 <__udivmoddi4+0x1e8>
 800135a:	ebb9 0e02 	subs.w	lr, r9, r2
 800135e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001362:	3801      	subs	r0, #1
 8001364:	e7a8      	b.n	80012b8 <__udivmoddi4+0x1e8>
 8001366:	4631      	mov	r1, r6
 8001368:	e7ed      	b.n	8001346 <__udivmoddi4+0x276>
 800136a:	4603      	mov	r3, r0
 800136c:	e799      	b.n	80012a2 <__udivmoddi4+0x1d2>
 800136e:	4630      	mov	r0, r6
 8001370:	e7d4      	b.n	800131c <__udivmoddi4+0x24c>
 8001372:	46d6      	mov	lr, sl
 8001374:	e77f      	b.n	8001276 <__udivmoddi4+0x1a6>
 8001376:	4463      	add	r3, ip
 8001378:	3802      	subs	r0, #2
 800137a:	e74d      	b.n	8001218 <__udivmoddi4+0x148>
 800137c:	4606      	mov	r6, r0
 800137e:	4623      	mov	r3, r4
 8001380:	4608      	mov	r0, r1
 8001382:	e70f      	b.n	80011a4 <__udivmoddi4+0xd4>
 8001384:	3e02      	subs	r6, #2
 8001386:	4463      	add	r3, ip
 8001388:	e730      	b.n	80011ec <__udivmoddi4+0x11c>
 800138a:	bf00      	nop

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	43db      	mvns	r3, r3
 8001402:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001406:	4013      	ands	r3, r2
 8001408:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <MX_ADC_Init+0x94>)
 800141a:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <MX_ADC_Init+0x98>)
 800141c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800141e:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001420:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001424:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_ADC_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <MX_ADC_Init+0x94>)
 800143a:	2204      	movs	r2, #4
 800143c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_ADC_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001452:	2201      	movs	r2, #1
 8001454:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_ADC_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001474:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001478:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_ADC_Init+0x94>)
 800147c:	2207      	movs	r2, #7
 800147e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001482:	2207      	movs	r2, #7
 8001484:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_ADC_Init+0x94>)
 8001496:	f002 fbb9 	bl	8003c0c <HAL_ADC_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80014a0:	f000 fbd8 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000324 	.word	0x20000324
 80014ac:	40012400 	.word	0x40012400

080014b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <HAL_ADC_MspInit+0x64>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11b      	bne.n	800150a <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014d6:	f7ff ff73 	bl	80013c0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2002      	movs	r0, #2
 80014dc:	f7ff ff58 	bl	8001390 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB14     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <HAL_ADC_MspInit+0x68>)
 80014f6:	f004 fb39 	bl	8005b6c <HAL_GPIO_Init>

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2012      	movs	r0, #18
 8001500:	f003 fcb1 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001504:	2012      	movs	r0, #18
 8001506:	f003 fcc8 	bl	8004e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012400 	.word	0x40012400
 8001518:	48000400 	.word	0x48000400

0800151c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <HAL_ADC_MspDeInit+0x34>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10b      	bne.n	8001546 <HAL_ADC_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800152e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001532:	f7ff ff5d 	bl	80013f0 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB14     ------> ADC_IN1
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 8001536:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <HAL_ADC_MspDeInit+0x38>)
 800153c:	f004 fc76 	bl	8005e2c <HAL_GPIO_DeInit>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8001540:	2012      	movs	r0, #18
 8001542:	f003 fcb8 	bl	8004eb6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012400 	.word	0x40012400
 8001554:	48000400 	.word	0x48000400

08001558 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <SYS_InitMeasurement+0x14>)
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <SYS_InitMeasurement+0x18>)
 8001560:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000324 	.word	0x20000324
 8001570:	40012400 	.word	0x40012400

08001574 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001582:	4813      	ldr	r0, [pc, #76]	@ (80015d0 <SYS_GetBatteryLevel+0x5c>)
 8001584:	f000 f82a 	bl	80015dc <ADC_ReadChannels>
 8001588:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	80fb      	strh	r3, [r7, #6]
 8001594:	e016      	b.n	80015c4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <SYS_GetBatteryLevel+0x60>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00b      	beq.n	80015ba <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <SYS_GetBatteryLevel+0x60>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80015ac:	fb03 f202 	mul.w	r2, r3, r2
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	80fb      	strh	r3, [r7, #6]
 80015b8:	e004      	b.n	80015c4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015ba:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <SYS_GetBatteryLevel+0x64>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80015c4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	b4002000 	.word	0xb4002000
 80015d4:	1fff75aa 	.word	0x1fff75aa
 80015d8:	004c08d8 	.word	0x004c08d8

080015dc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80015f4:	f7ff ff0e 	bl	8001414 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80015f8:	481a      	ldr	r0, [pc, #104]	@ (8001664 <ADC_ReadChannels+0x88>)
 80015fa:	f003 fa6a 	bl	8004ad2 <HAL_ADCEx_Calibration_Start>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001604:	f000 fb26 	bl	8001c54 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4619      	mov	r1, r3
 800161a:	4812      	ldr	r0, [pc, #72]	@ (8001664 <ADC_ReadChannels+0x88>)
 800161c:	f002 ff76 	bl	800450c <HAL_ADC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001626:	f000 fb15 	bl	8001c54 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800162a:	480e      	ldr	r0, [pc, #56]	@ (8001664 <ADC_ReadChannels+0x88>)
 800162c:	f002 fd1e 	bl	800406c <HAL_ADC_Start>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001636:	f000 fb0d 	bl	8001c54 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800163a:	f04f 31ff 	mov.w	r1, #4294967295
 800163e:	4809      	ldr	r0, [pc, #36]	@ (8001664 <ADC_ReadChannels+0x88>)
 8001640:	f002 fd8c 	bl	800415c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001644:	4807      	ldr	r0, [pc, #28]	@ (8001664 <ADC_ReadChannels+0x88>)
 8001646:	f002 fd57 	bl	80040f8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <ADC_ReadChannels+0x88>)
 800164c:	f002 fe1d 	bl	800428a <HAL_ADC_GetValue>
 8001650:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001652:	4804      	ldr	r0, [pc, #16]	@ (8001664 <ADC_ReadChannels+0x88>)
 8001654:	f002 fc8e 	bl	8003f74 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001658:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000324 	.word	0x20000324

08001668 <LL_AHB1_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001674:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff ffe3 	bl	8001668 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff ffe0 	bl	8001668 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2102      	movs	r1, #2
 80016ac:	200b      	movs	r0, #11
 80016ae:	f003 fbda 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b2:	200b      	movs	r0, #11
 80016b4:	f003 fbf1 	bl	8004e9a <HAL_NVIC_EnableIRQ>

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80016cc:	d101      	bne.n	80016d2 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80016d2:	2300      	movs	r3, #0
#endif
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	58004000 	.word	0x58004000

080016e0 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80016f8:	4b56      	ldr	r3, [pc, #344]	@ (8001854 <FLASH_IF_Write+0x174>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0299      	lsls	r1, r3, #10
 80016fe:	4b56      	ldr	r3, [pc, #344]	@ (8001858 <FLASH_IF_Write+0x178>)
 8001700:	400b      	ands	r3, r1
 8001702:	fbb2 f1f3 	udiv	r1, r2, r3
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	0adb      	lsrs	r3, r3, #11
 800170e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800171a:	3b01      	subs	r3, #1
 800171c:	4a4d      	ldr	r2, [pc, #308]	@ (8001854 <FLASH_IF_Write+0x174>)
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	0291      	lsls	r1, r2, #10
 8001722:	4a4d      	ldr	r2, [pc, #308]	@ (8001858 <FLASH_IF_Write+0x178>)
 8001724:	400a      	ands	r2, r1
 8001726:	fbb3 f1f2 	udiv	r1, r3, r2
 800172a:	fb01 f202 	mul.w	r2, r1, r2
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	0adb      	lsrs	r3, r3, #11
 8001732:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <FLASH_IF_Write+0x7a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	2b00      	cmp	r3, #0
 800174e:	d104      	bne.n	800175a <FLASH_IF_Write+0x7a>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 800175a:	f06f 0304 	mvn.w	r3, #4
 800175e:	e074      	b.n	800184a <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <FLASH_IF_Write+0x17c>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da02      	bge.n	800176e <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001768:	f06f 0303 	mvn.w	r3, #3
 800176c:	e06d      	b.n	800184a <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	429a      	cmp	r2, r3
 8001774:	d005      	beq.n	8001782 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800177c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e05b      	b.n	8001840 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f8f8 	bl	8001982 <FLASH_IF_IsEmpty>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d037      	beq.n	8001808 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800179e:	f06f 0304 	mvn.w	r3, #4
 80017a2:	e052      	b.n	800184a <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80017aa:	02db      	lsls	r3, r3, #11
 80017ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017b0:	4619      	mov	r1, r3
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f019 ffd4 	bl	801b760 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	6a39      	ldr	r1, [r7, #32]
 80017c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017c6:	b292      	uxth	r2, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f019 ffc9 	bl	801b760 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	69f8      	ldr	r0, [r7, #28]
 80017d4:	f000 f865 	bl	80018a2 <FLASH_IF_EraseByPages>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80017de:	f06f 0301 	mvn.w	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80017e4:	e030      	b.n	8001848 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80017ec:	02db      	lsls	r3, r3, #11
 80017ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f88a 	bl	800190e <FLASH_IF_Write_Buffer>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001800:	f06f 0302 	mvn.w	r3, #2
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 8001806:	e01f      	b.n	8001848 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800180c:	4619      	mov	r1, r3
 800180e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001810:	f000 f87d 	bl	800190e <FLASH_IF_Write_Buffer>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800181a:	f06f 0302 	mvn.w	r3, #2
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001820:	e012      	b.n	8001848 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 8001822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	4413      	add	r3, r2
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182e:	4413      	add	r3, r2
 8001830:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	429a      	cmp	r2, r3
 8001846:	d99f      	bls.n	8001788 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 800184a:	4618      	mov	r0, r3
 800184c:	3730      	adds	r7, #48	@ 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	1fff75e0 	.word	0x1fff75e0
 8001858:	03fffc00 	.word	0x03fffc00
 800185c:	58004000 	.word	0x58004000

08001860 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 800186c:	e00b      	b.n	8001886 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 800186e:	bf00      	nop
 8001870:	f7ff ff24 	bl	80016bc <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1fa      	bne.n	8001870 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800187a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	2001      	movs	r0, #1
 8001882:	f003 ff11 	bl	80056a8 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001890:	4299      	cmp	r1, r3
 8001892:	bf08      	it	eq
 8001894:	4290      	cmpeq	r0, r2
 8001896:	d1ea      	bne.n	800186e <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001898:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b08a      	sub	sp, #40	@ 0x28
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	460b      	mov	r3, r1
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80018c2:	f107 0318 	add.w	r3, r7, #24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 f88c 	bl	80059e4 <HAL_FLASHEx_Erase_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018d2:	e00a      	b.n	80018ea <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80018d4:	f107 0214 	add.w	r2, r7, #20
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f828 	bl	8005934 <HAL_FLASHEx_Erase>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80018ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <FLASH_IF_EraseByPages+0x62>
 80018f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d101      	bne.n	80018fe <FLASH_IF_EraseByPages+0x5c>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e003      	b.n	8001906 <FLASH_IF_EraseByPages+0x64>
 80018fe:	f06f 0301 	mvn.w	r3, #1
 8001902:	e000      	b.n	8001906 <FLASH_IF_EraseByPages+0x64>
 8001904:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001906:	4618      	mov	r0, r3
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b08a      	sub	sp, #40	@ 0x28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e020      	b.n	800196a <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2208      	movs	r2, #8
 800192e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001930:	4618      	mov	r0, r3
 8001932:	f019 ff15 	bl	801b760 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001936:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	bf08      	it	eq
 8001940:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001944:	d005      	beq.n	8001952 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ff88 	bl	8001860 <FLASH_IF_Write64>
 8001950:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3308      	adds	r3, #8
 8001956:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	3308      	adds	r3, #8
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3d9      	bcc.n	8001928 <FLASH_IF_Write_Buffer+0x1a>
 8001974:	e000      	b.n	8001978 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001976:	bf00      	nop
    }
  }

  return status;
 8001978:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800197a:	4618      	mov	r0, r3
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800198c:	e00a      	b.n	80019a4 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2bff      	cmp	r3, #255	@ 0xff
 8001998:	d001      	beq.n	800199e <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800199a:	2301      	movs	r3, #1
 800199c:	e039      	b.n	8001a12 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ef      	bne.n	800198e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	e010      	b.n	80019da <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f103 0208 	add.w	r2, r3, #8
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	bf08      	it	eq
 80019ca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80019ce:	d001      	beq.n	80019d4 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e01e      	b.n	8001a12 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3e9      	bcc.n	80019b8 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80019f2:	e00a      	b.n	8001a0a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2bff      	cmp	r3, #255	@ 0xff
 80019fe:	d001      	beq.n	8001a04 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e006      	b.n	8001a12 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f1      	bne.n	80019f4 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001a10:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <LL_AHB2_GRP1_EnableClock>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a60:	2004      	movs	r0, #4
 8001a62:	f7ff ffdb 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff ffd8 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ffd5 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 8001a78:	4835      	ldr	r0, [pc, #212]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001a7a:	f004 faa5 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f240 4131 	movw	r1, #1073	@ 0x431
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f004 fa9e 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2120      	movs	r1, #32
 8001a90:	482f      	ldr	r0, [pc, #188]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001a92:	f004 fa99 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa0:	f004 fa92 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	482a      	ldr	r0, [pc, #168]	@ (8001b54 <MX_GPIO_Init+0x108>)
 8001aaa:	f004 fa8d 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001aae:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4822      	ldr	r0, [pc, #136]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001ac6:	f004 f851 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001aca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ace:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae4:	f004 f842 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001ae8:	2331      	movs	r3, #49	@ 0x31
 8001aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f004 f834 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001b1a:	f004 f827 	bl	8005b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4808      	ldr	r0, [pc, #32]	@ (8001b54 <MX_GPIO_Init+0x108>)
 8001b34:	f004 f81a 	bl	8005b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2029      	movs	r0, #41	@ 0x29
 8001b3e:	f003 f992 	bl	8004e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b42:	2029      	movs	r0, #41	@ 0x29
 8001b44:	f003 f9a9 	bl	8004e9a <HAL_NVIC_EnableIRQ>

}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	48000400 	.word	0x48000400
 8001b54:	48000800 	.word	0x48000800

08001b58 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b68:	f023 0218 	bic.w	r2, r3, #24
 8001b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b86:	f001 fe45 	bl	8003814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8a:	f000 f809 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8e:	f7ff ff5d 	bl	8001a4c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001b92:	f009 f96d 	bl	800ae70 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001b96:	f001 fb03 	bl	80031a0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001b9a:	f009 f971 	bl	800ae80 <MX_LoRaWAN_Process>
 8001b9e:	e7fc      	b.n	8001b9a <main+0x18>

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b09a      	sub	sp, #104	@ 0x68
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2248      	movs	r2, #72	@ 0x48
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f01b fefa 	bl	801d9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc6:	f004 fa2f 	bl	8006028 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ffc4 	bl	8001b58 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <SystemClock_Config+0xb0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <SystemClock_Config+0xb0>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <SystemClock_Config+0xb0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bec:	2324      	movs	r3, #36	@ 0x24
 8001bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bf0:	2381      	movs	r3, #129	@ 0x81
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001bfc:	23b0      	movs	r3, #176	@ 0xb0
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 fd59 	bl	80066c0 <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c14:	f000 f81e 	bl	8001c54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c18:	234f      	movs	r3, #79	@ 0x4f
 8001c1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 f8de 	bl	8006df8 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c42:	f000 f807 	bl	8001c54 <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3768      	adds	r7, #104	@ 0x68
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58000400 	.word	0x58000400

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <LL_APB1_GRP1_EnableClock>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	@ 0x30
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	222c      	movs	r2, #44	@ 0x2c
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f01b fe73 	bl	801d9a8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cc4:	4a22      	ldr	r2, [pc, #136]	@ (8001d50 <MX_RTC_Init+0xa0>)
 8001cc6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cca:	221f      	movs	r2, #31
 8001ccc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cce:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001ce2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ce6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf6:	4815      	ldr	r0, [pc, #84]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001cf8:	f005 fd3a 	bl	8007770 <HAL_RTC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001d02:	f7ff ffa7 	bl	8001c54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001d06:	4811      	ldr	r0, [pc, #68]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001d08:	f006 f84c 	bl	8007da4 <HAL_RTCEx_SetSSRU_IT>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001d12:	f7ff ff9f 	bl	8001c54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d26:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_RTC_Init+0x9c>)
 8001d36:	f005 fd95 	bl	8007864 <HAL_RTC_SetAlarm_IT>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001d40:	f7ff ff88 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	3730      	adds	r7, #48	@ 0x30
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000388 	.word	0x20000388
 8001d50:	40002800 	.word	0x40002800

08001d54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b090      	sub	sp, #64	@ 0x40
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	2238      	movs	r2, #56	@ 0x38
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f01b fe1f 	bl	801d9a8 <memset>
  if(rtcHandle->Instance==RTC)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <HAL_RTC_MspInit+0x74>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d125      	bne.n	8001dc0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d78:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 fbd9 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d90:	f7ff ff60 	bl	8001c54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d94:	f7ff ff64 	bl	8001c60 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d9c:	f7ff ff70 	bl	8001c80 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2002      	movs	r0, #2
 8001da6:	f003 f85e 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001daa:	2002      	movs	r0, #2
 8001dac:	f003 f875 	bl	8004e9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	202a      	movs	r0, #42	@ 0x2a
 8001db6:	f003 f856 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dba:	202a      	movs	r0, #42	@ 0x2a
 8001dbc:	f003 f86d 	bl	8004e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3740      	adds	r7, #64	@ 0x40
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40002800 	.word	0x40002800

08001dcc <Modbus_CRC16>:
extern void SystemClock_Config(void);

uint8_t rx_buffer[16];
uint8_t modbus_frame[8];

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ddc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pos = 0; pos < len; pos++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	737b      	strb	r3, [r7, #13]
 8001de2:	e026      	b.n	8001e32 <Modbus_CRC16+0x66>
        crc ^= (uint16_t)buf[pos];
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	4053      	eors	r3, r2
 8001df2:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	e015      	b.n	8001e26 <Modbus_CRC16+0x5a>
            if (crc & 0x0001) {
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <Modbus_CRC16+0x4e>
                crc >>= 1;
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001e10:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001e14:	43db      	mvns	r3, r3
 8001e16:	81fb      	strh	r3, [r7, #14]
 8001e18:	e002      	b.n	8001e20 <Modbus_CRC16+0x54>
            } else {
                crc >>= 1;
 8001e1a:	89fb      	ldrh	r3, [r7, #14]
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b07      	cmp	r3, #7
 8001e2a:	dde6      	ble.n	8001dfa <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 8001e2c:	7b7b      	ldrb	r3, [r7, #13]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	737b      	strb	r3, [r7, #13]
 8001e32:	7b7a      	ldrb	r2, [r7, #13]
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3d4      	bcc.n	8001de4 <Modbus_CRC16+0x18>
            }
        }
    }
    return crc;
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <Build_Modbus_Request>:

void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity, uint8_t *frame_out) {
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	460b      	mov	r3, r1
 8001e54:	81bb      	strh	r3, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	817b      	strh	r3, [r7, #10]
    frame_out[0] = slave_addr;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
    frame_out[1] = 0x03;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	701a      	strb	r2, [r3, #0]
    frame_out[2] = (start_reg >> 8) & 0xFF;
 8001e68:	89bb      	ldrh	r3, [r7, #12]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3302      	adds	r3, #2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
    frame_out[3] = start_reg & 0xFF;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3303      	adds	r3, #3
 8001e7a:	89ba      	ldrh	r2, [r7, #12]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    frame_out[4] = (quantity >> 8) & 0xFF;
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
    frame_out[5] = quantity & 0xFF;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3305      	adds	r3, #5
 8001e92:	897a      	ldrh	r2, [r7, #10]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
    uint16_t crc = Modbus_CRC16(frame_out, 6);
 8001e98:	2106      	movs	r1, #6
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff96 	bl	8001dcc <Modbus_CRC16>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	82fb      	strh	r3, [r7, #22]
    frame_out[6] = crc & 0xFF;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	8afa      	ldrh	r2, [r7, #22]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
    frame_out[7] = (crc >> 8) & 0xFF;
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3307      	adds	r3, #7
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <Decode_TempHumi>:

temphumi_t Decode_TempHumi(uint8_t *rx_buf) {
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    temphumi_t data;

    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3304      	adds	r3, #4
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	83fb      	strh	r3, [r7, #30]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	3305      	adds	r3, #5
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3306      	adds	r3, #6
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	83bb      	strh	r3, [r7, #28]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	3307      	adds	r3, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3308      	adds	r3, #8
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	837b      	strh	r3, [r7, #26]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	3309      	adds	r3, #9
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	330a      	adds	r3, #10
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	833b      	strh	r3, [r7, #24]

    data.temperature = temp_raw / 100.0f;
 8001f2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fecc 	bl	8000ccc <__aeabi_i2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	492b      	ldr	r1, [pc, #172]	@ (8001fe4 <Decode_TempHumi+0x120>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ffcf 	bl	8000edc <__aeabi_fdiv>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60bb      	str	r3, [r7, #8]
    data.humidity = humi_raw / 100.0f;
 8001f42:	8bbb      	ldrh	r3, [r7, #28]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fec1 	bl	8000ccc <__aeabi_i2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4925      	ldr	r1, [pc, #148]	@ (8001fe4 <Decode_TempHumi+0x120>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ffc4 	bl	8000edc <__aeabi_fdiv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
    data.dewpoint = dew_raw / 100.0f;
 8001f58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe feb5 	bl	8000ccc <__aeabi_i2f>
 8001f62:	4603      	mov	r3, r0
 8001f64:	491f      	ldr	r1, [pc, #124]	@ (8001fe4 <Decode_TempHumi+0x120>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe ffb8 	bl	8000edc <__aeabi_fdiv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	613b      	str	r3, [r7, #16]
    data.pressure = press_raw / 10.0f;
 8001f70:	8b3b      	ldrh	r3, [r7, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe feaa 	bl	8000ccc <__aeabi_i2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	491b      	ldr	r1, [pc, #108]	@ (8001fe8 <Decode_TempHumi+0x124>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe ffad 	bl	8000edc <__aeabi_fdiv>
 8001f82:	4603      	mov	r3, r0
 8001f84:	617b      	str	r3, [r7, #20]

    printf("Temperature: %.2f C\r\n", data.temperature);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fab5 	bl	80004f8 <__aeabi_f2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4816      	ldr	r0, [pc, #88]	@ (8001fec <Decode_TempHumi+0x128>)
 8001f94:	f01b fbc0 	bl	801d718 <iprintf>
    printf("Humidity: %.2f %%\r\n", data.humidity);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faac 	bl	80004f8 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4812      	ldr	r0, [pc, #72]	@ (8001ff0 <Decode_TempHumi+0x12c>)
 8001fa6:	f01b fbb7 	bl	801d718 <iprintf>
    printf("Dew Point: %.2f C\r\n", data.dewpoint);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe faa3 	bl	80004f8 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	480f      	ldr	r0, [pc, #60]	@ (8001ff4 <Decode_TempHumi+0x130>)
 8001fb8:	f01b fbae 	bl	801d718 <iprintf>
    printf("Pressure: %.1f hPa\r\n", data.pressure);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa9a 	bl	80004f8 <__aeabi_f2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <Decode_TempHumi+0x134>)
 8001fca:	f01b fba5 	bl	801d718 <iprintf>

    return data;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	461c      	mov	r4, r3
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	41200000 	.word	0x41200000
 8001fec:	0801f7d8 	.word	0x0801f7d8
 8001ff0:	0801f7f0 	.word	0x0801f7f0
 8001ff4:	0801f804 	.word	0x0801f804
 8001ff8:	0801f818 	.word	0x0801f818

08001ffc <Decode_Light>:

uint32_t Decode_Light(uint8_t *rx_buf) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    uint16_t lux_high = (rx_buf[3] << 8) | rx_buf[4];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3303      	adds	r3, #3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b21a      	sxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b21b      	sxth	r3, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	b21b      	sxth	r3, r3
 800201a:	81fb      	strh	r3, [r7, #14]
    uint16_t lux_low  = (rx_buf[5] << 8) | rx_buf[6];
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3305      	adds	r3, #5
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b21a      	sxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3306      	adds	r3, #6
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	81bb      	strh	r3, [r7, #12]
    uint32_t lux = ((uint32_t)lux_high << 16) | lux_low;
 8002034:	89fb      	ldrh	r3, [r7, #14]
 8002036:	041a      	lsls	r2, r3, #16
 8002038:	89bb      	ldrh	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]

    printf("Illuminance: %lu lux\r\n", lux);
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	4803      	ldr	r0, [pc, #12]	@ (8002050 <Decode_Light+0x54>)
 8002042:	f01b fb69 	bl	801d718 <iprintf>

    return lux;
 8002046:	68bb      	ldr	r3, [r7, #8]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	0801f830 	.word	0x0801f830

08002054 <Decode_Soil>:

soil_t Decode_Soil(uint8_t *rx_buf) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    soil_t data;

    uint16_t humi_raw = (rx_buf[3] << 8) | rx_buf[4];
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3303      	adds	r3, #3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	3304      	adds	r3, #4
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	82fb      	strh	r3, [r7, #22]
    int16_t temp_raw = (rx_buf[5] << 8) | rx_buf[6];
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3305      	adds	r3, #5
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21a      	sxth	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	82bb      	strh	r3, [r7, #20]

    data.humidity = humi_raw / 10.0f;
 800208c:	8afb      	ldrh	r3, [r7, #22]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe1c 	bl	8000ccc <__aeabi_i2f>
 8002094:	4603      	mov	r3, r0
 8002096:	4918      	ldr	r1, [pc, #96]	@ (80020f8 <Decode_Soil+0xa4>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe ff1f 	bl	8000edc <__aeabi_fdiv>
 800209e:	4603      	mov	r3, r0
 80020a0:	613b      	str	r3, [r7, #16]
    data.temperature = temp_raw / 10.0f;
 80020a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fe10 	bl	8000ccc <__aeabi_i2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4912      	ldr	r1, [pc, #72]	@ (80020f8 <Decode_Soil+0xa4>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff13 	bl	8000edc <__aeabi_fdiv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	60fb      	str	r3, [r7, #12]

    printf("Humidity: %.1f %%RH\r\n", data.humidity);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa1b 	bl	80004f8 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <Decode_Soil+0xa8>)
 80020c8:	f01b fb26 	bl	801d718 <iprintf>
    printf("Temperature: %.1f C\r\n", data.temperature);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa12 	bl	80004f8 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <Decode_Soil+0xac>)
 80020da:	f01b fb1d 	bl	801d718 <iprintf>

    return data;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	461a      	mov	r2, r3
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	41200000 	.word	0x41200000
 80020fc:	0801f848 	.word	0x0801f848
 8002100:	0801f860 	.word	0x0801f860

08002104 <TempHumi>:

temphumi_t TempHumi(void) {
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	temphumi_t result;
    Build_Modbus_Request(0x01, 0x0000, 0x0004, modbus_frame);
 800210c:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <TempHumi+0xa4>)
 800210e:	2204      	movs	r2, #4
 8002110:	2100      	movs	r1, #0
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff fe97 	bl	8001e46 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 8002118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211c:	2208      	movs	r2, #8
 800211e:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <TempHumi+0xa4>)
 8002120:	4822      	ldr	r0, [pc, #136]	@ (80021ac <TempHumi+0xa8>)
 8002122:	f006 fbea 	bl	80088fa <HAL_UART_Transmit>
//    HAL_UART_Receive(&huart2, rx_buffer, 13, 1000);
//    HAL_Delay(10);
    if (HAL_UART_Receive(&huart2, rx_buffer, 13, 1000) == HAL_OK) {
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	220d      	movs	r2, #13
 800212c:	4920      	ldr	r1, [pc, #128]	@ (80021b0 <TempHumi+0xac>)
 800212e:	481f      	ldr	r0, [pc, #124]	@ (80021ac <TempHumi+0xa8>)
 8002130:	f006 fc79 	bl	8008a26 <HAL_UART_Receive>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11d      	bne.n	8002176 <TempHumi+0x72>
    		printf("TEMPHUMI: ");
 800213a:	481e      	ldr	r0, [pc, #120]	@ (80021b4 <TempHumi+0xb0>)
 800213c:	f01b faec 	bl	801d718 <iprintf>
    		for (int i = 0; i < 13; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e00a      	b.n	800215c <TempHumi+0x58>
    		    printf("%d ", rx_buffer[i]);
 8002146:	4a1a      	ldr	r2, [pc, #104]	@ (80021b0 <TempHumi+0xac>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4819      	ldr	r0, [pc, #100]	@ (80021b8 <TempHumi+0xb4>)
 8002152:	f01b fae1 	bl	801d718 <iprintf>
    		for (int i = 0; i < 13; i++) {
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	ddf1      	ble.n	8002146 <TempHumi+0x42>
    		}
    	    printf("\r\n");
 8002162:	4816      	ldr	r0, [pc, #88]	@ (80021bc <TempHumi+0xb8>)
 8002164:	f01b fb40 	bl	801d7e8 <puts>

    	    result = Decode_TempHumi(rx_buffer);
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4910      	ldr	r1, [pc, #64]	@ (80021b0 <TempHumi+0xac>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fea8 	bl	8001ec4 <Decode_TempHumi>
 8002174:	e008      	b.n	8002188 <TempHumi+0x84>
    	} else {
    	    printf("Receive failed\r\n");
 8002176:	4812      	ldr	r0, [pc, #72]	@ (80021c0 <TempHumi+0xbc>)
 8002178:	f01b fb36 	bl	801d7e8 <puts>
    	    APP_LOG(TS_ON, VLEVEL_M, "Receive failed\r\n");
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <TempHumi+0xc0>)
 800217e:	2201      	movs	r2, #1
 8002180:	2100      	movs	r1, #0
 8002182:	2002      	movs	r0, #2
 8002184:	f01a fb36 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
//        printf("%d ", rx_buffer[i]);
//    }
//    printf("\r\n");
//
//    temphumi_t result = Decode_TempHumi(rx_buffer);
    HAL_Delay(500);
 8002188:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800218c:	f000 fb96 	bl	80028bc <HAL_Delay>
    return result;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	461c      	mov	r4, r3
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800219a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	3724      	adds	r7, #36	@ 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003d0 	.word	0x200003d0
 80021ac:	20000484 	.word	0x20000484
 80021b0:	200003c0 	.word	0x200003c0
 80021b4:	0801f878 	.word	0x0801f878
 80021b8:	0801f884 	.word	0x0801f884
 80021bc:	0801f888 	.word	0x0801f888
 80021c0:	0801f88c 	.word	0x0801f88c
 80021c4:	0801f89c 	.word	0x0801f89c

080021c8 <Light>:

uint32_t Light(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
	uint32_t lux;
    Build_Modbus_Request(0x02, 0x0000, 0x0002, modbus_frame);
 80021ce:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <Light+0x90>)
 80021d0:	2202      	movs	r2, #2
 80021d2:	2100      	movs	r1, #0
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff fe36 	bl	8001e46 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 80021da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021de:	2208      	movs	r2, #8
 80021e0:	491d      	ldr	r1, [pc, #116]	@ (8002258 <Light+0x90>)
 80021e2:	481e      	ldr	r0, [pc, #120]	@ (800225c <Light+0x94>)
 80021e4:	f006 fb89 	bl	80088fa <HAL_UART_Transmit>
//    HAL_UART_Receive(&huart2, rx_buffer, 9, 1000);

    if (HAL_UART_Receive(&huart2, rx_buffer, 9, 1000) == HAL_OK) {
 80021e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ec:	2209      	movs	r2, #9
 80021ee:	491c      	ldr	r1, [pc, #112]	@ (8002260 <Light+0x98>)
 80021f0:	481a      	ldr	r0, [pc, #104]	@ (800225c <Light+0x94>)
 80021f2:	f006 fc18 	bl	8008a26 <HAL_UART_Receive>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11b      	bne.n	8002234 <Light+0x6c>
    		printf("LiGHT: ");
 80021fc:	4819      	ldr	r0, [pc, #100]	@ (8002264 <Light+0x9c>)
 80021fe:	f01b fa8b 	bl	801d718 <iprintf>
    		for (int i = 0; i < 9; i++) {
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	e00a      	b.n	800221e <Light+0x56>
    		    printf("%d ", rx_buffer[i]);
 8002208:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <Light+0x98>)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	4815      	ldr	r0, [pc, #84]	@ (8002268 <Light+0xa0>)
 8002214:	f01b fa80 	bl	801d718 <iprintf>
    		for (int i = 0; i < 9; i++) {
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b08      	cmp	r3, #8
 8002222:	ddf1      	ble.n	8002208 <Light+0x40>
    		}
    	    printf("\r\n");
 8002224:	4811      	ldr	r0, [pc, #68]	@ (800226c <Light+0xa4>)
 8002226:	f01b fadf 	bl	801d7e8 <puts>

    	    lux = Decode_Light(rx_buffer);
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <Light+0x98>)
 800222c:	f7ff fee6 	bl	8001ffc <Decode_Light>
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	e008      	b.n	8002246 <Light+0x7e>
    	} else {
    	    printf("Receive failed\r\n");
 8002234:	480e      	ldr	r0, [pc, #56]	@ (8002270 <Light+0xa8>)
 8002236:	f01b fad7 	bl	801d7e8 <puts>
    	    APP_LOG(TS_ON, VLEVEL_M, "Receive failed\r\n");
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <Light+0xac>)
 800223c:	2201      	movs	r2, #1
 800223e:	2100      	movs	r1, #0
 8002240:	2002      	movs	r0, #2
 8002242:	f01a fad7 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
//        printf("%d ", rx_buffer[i]);
//    }
//    printf("\r\n");
//
//    uint32_t lux = Decode_Light(rx_buffer);
    HAL_Delay(500);
 8002246:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800224a:	f000 fb37 	bl	80028bc <HAL_Delay>
    return lux;
 800224e:	687b      	ldr	r3, [r7, #4]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200003d0 	.word	0x200003d0
 800225c:	20000484 	.word	0x20000484
 8002260:	200003c0 	.word	0x200003c0
 8002264:	0801f8b0 	.word	0x0801f8b0
 8002268:	0801f884 	.word	0x0801f884
 800226c:	0801f888 	.word	0x0801f888
 8002270:	0801f88c 	.word	0x0801f88c
 8002274:	0801f89c 	.word	0x0801f89c

08002278 <SoilTempHumi>:

soil_t SoilTempHumi(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	soil_t result;
    Build_Modbus_Request(0x03, 0x0000, 0x0002, modbus_frame);
 8002280:	4b26      	ldr	r3, [pc, #152]	@ (800231c <SoilTempHumi+0xa4>)
 8002282:	2202      	movs	r2, #2
 8002284:	2100      	movs	r1, #0
 8002286:	2003      	movs	r0, #3
 8002288:	f7ff fddd 	bl	8001e46 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 800228c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002290:	2208      	movs	r2, #8
 8002292:	4922      	ldr	r1, [pc, #136]	@ (800231c <SoilTempHumi+0xa4>)
 8002294:	4822      	ldr	r0, [pc, #136]	@ (8002320 <SoilTempHumi+0xa8>)
 8002296:	f006 fb30 	bl	80088fa <HAL_UART_Transmit>
//    HAL_UART_Receive(&huart2, rx_buffer, 9, 1000);

    if (HAL_UART_Receive(&huart2, rx_buffer, 9, 1000) == HAL_OK) {
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	2209      	movs	r2, #9
 80022a0:	4920      	ldr	r1, [pc, #128]	@ (8002324 <SoilTempHumi+0xac>)
 80022a2:	481f      	ldr	r0, [pc, #124]	@ (8002320 <SoilTempHumi+0xa8>)
 80022a4:	f006 fbbf 	bl	8008a26 <HAL_UART_Receive>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <SoilTempHumi+0x72>
    		printf("SOIL: ");
 80022ae:	481e      	ldr	r0, [pc, #120]	@ (8002328 <SoilTempHumi+0xb0>)
 80022b0:	f01b fa32 	bl	801d718 <iprintf>
    		for (int i = 0; i < 9; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00a      	b.n	80022d0 <SoilTempHumi+0x58>
    		    printf("%d ", rx_buffer[i]);
 80022ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <SoilTempHumi+0xac>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4819      	ldr	r0, [pc, #100]	@ (800232c <SoilTempHumi+0xb4>)
 80022c6:	f01b fa27 	bl	801d718 <iprintf>
    		for (int i = 0; i < 9; i++) {
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	ddf1      	ble.n	80022ba <SoilTempHumi+0x42>
    		}
    	    printf("\r\n");
 80022d6:	4816      	ldr	r0, [pc, #88]	@ (8002330 <SoilTempHumi+0xb8>)
 80022d8:	f01b fa86 	bl	801d7e8 <puts>

    	    result = Decode_Soil(rx_buffer);
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	4910      	ldr	r1, [pc, #64]	@ (8002324 <SoilTempHumi+0xac>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff feb6 	bl	8002054 <Decode_Soil>
 80022e8:	e008      	b.n	80022fc <SoilTempHumi+0x84>
    	} else {
    	    printf("Receive failed\r\n");
 80022ea:	4812      	ldr	r0, [pc, #72]	@ (8002334 <SoilTempHumi+0xbc>)
 80022ec:	f01b fa7c 	bl	801d7e8 <puts>
    	    APP_LOG(TS_ON, VLEVEL_M, "Receive failed\r\n");
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <SoilTempHumi+0xc0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	2100      	movs	r1, #0
 80022f6:	2002      	movs	r0, #2
 80022f8:	f01a fa7c 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
//        printf("%d ", rx_buffer[i]);
//    }
//    printf("\r\n");
//
//    soil_t result = Decode_Soil(rx_buffer);
    HAL_Delay(500);
 80022fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002300:	f000 fadc 	bl	80028bc <HAL_Delay>
    return result;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002310:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200003d0 	.word	0x200003d0
 8002320:	20000484 	.word	0x20000484
 8002324:	200003c0 	.word	0x200003c0
 8002328:	0801f8b8 	.word	0x0801f8b8
 800232c:	0801f884 	.word	0x0801f884
 8002330:	0801f888 	.word	0x0801f888
 8002334:	0801f88c 	.word	0x0801f88c
 8002338:	0801f89c 	.word	0x0801f89c

0800233c <LedBlink>:
//
//    return voltage;
//}

void LedBlink(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4806      	ldr	r0, [pc, #24]	@ (8002360 <LedBlink+0x24>)
 8002346:	f003 fe3f 	bl	8005fc8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800234a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800234e:	f000 fab5 	bl	80028bc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2101      	movs	r1, #1
 8002356:	4802      	ldr	r0, [pc, #8]	@ (8002360 <LedBlink+0x24>)
 8002358:	f003 fe36 	bl	8005fc8 <HAL_GPIO_WritePin>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	48000800 	.word	0x48000800

08002364 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800236a:	2201      	movs	r2, #1
 800236c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	58000400 	.word	0x58000400

0800237c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002398:	f001 fa5c 	bl	8003854 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800239c:	f7ff ffe2 	bl	8002364 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f003 fed3 	bl	800614c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80023ae:	f001 fa5f 	bl	8003870 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80023b2:	f001 f8df 	bl	8003574 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}

080023ba <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80023be:	f001 fa49 	bl	8003854 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023c2:	2101      	movs	r1, #1
 80023c4:	2000      	movs	r0, #0
 80023c6:	f003 fe3d 	bl	8006044 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80023d2:	f001 fa4d 	bl	8003870 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	bf00      	nop
 80023f4:	e7fd      	b.n	80023f2 <HardFault_Handler+0x4>

080023f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fa:	bf00      	nop
 80023fc:	e7fd      	b.n	80023fa <MemManage_Handler+0x4>

080023fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002402:	bf00      	nop
 8002404:	e7fd      	b.n	8002402 <BusFault_Handler+0x4>

08002406 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240a:	bf00      	nop
 800240c:	e7fd      	b.n	800240a <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002444:	4802      	ldr	r0, [pc, #8]	@ (8002450 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002446:	f005 fce9 	bl	8007e1c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000388 	.word	0x20000388

08002454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <DMA1_Channel1_IRQHandler+0x10>)
 800245a:	f002 ffb5 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000514 	.word	0x20000514

08002468 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <ADC_IRQHandler+0x10>)
 800246e:	f001 ff18 	bl	80042a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000324 	.word	0x20000324

0800247c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <USART1_IRQHandler+0x10>)
 8002482:	f006 fc8b 	bl	8008d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200003f4 	.word	0x200003f4

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <USART2_IRQHandler+0x10>)
 8002496:	f006 fc81 	bl	8008d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000484 	.word	0x20000484

080024a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80024a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024ac:	f003 fda4 	bl	8005ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <RTC_Alarm_IRQHandler+0x10>)
 80024ba:	f005 fb3b 	bl	8007b34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000388 	.word	0x20000388

080024c8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024ce:	f006 f80d 	bl	80084ec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200003d8 	.word	0x200003d8

080024dc <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <RTC_WKUP_IRQHandler+0x10>)
 80024e2:	f005 fc09 	bl	8007cf8 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000388 	.word	0x20000388

080024f0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002514:	68fb      	ldr	r3, [r7, #12]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <MX_SUBGHZ_Init+0x20>)
 8002526:	2208      	movs	r2, #8
 8002528:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	@ (8002540 <MX_SUBGHZ_Init+0x20>)
 800252c:	f005 fd62 	bl	8007ff4 <HAL_SUBGHZ_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002536:	f7ff fb8d 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200003d8 	.word	0x200003d8

08002544 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ffcf 	bl	80024f0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2032      	movs	r0, #50	@ 0x32
 8002558:	f002 fc85 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800255c:	2032      	movs	r0, #50	@ 0x32
 800255e:	f002 fc9c 	bl	8004e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800257c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002594:	4b02      	ldr	r3, [pc, #8]	@ (80025a0 <LL_FLASH_GetUDN+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	1fff7580 	.word	0x1fff7580

080025a4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <LL_FLASH_GetDeviceID+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	1fff7584 	.word	0x1fff7584

080025bc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <LL_FLASH_GetSTCompanyID+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0a1b      	lsrs	r3, r3, #8
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	1fff7584 	.word	0x1fff7584

080025d4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff ffc6 	bl	800256a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80025de:	f019 fe4b 	bl	801c278 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <SystemApp_Init+0x50>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025e8:	f000 f98c 	bl	8002904 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025ec:	f01a f8d4 	bl	801c798 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025f0:	480d      	ldr	r0, [pc, #52]	@ (8002628 <SystemApp_Init+0x54>)
 80025f2:	f01a f97f 	bl	801c8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025f6:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <SystemApp_Init+0x58>)
 80025f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025fc:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025fe:	2002      	movs	r0, #2
 8002600:	f01a f986 	bl	801c910 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002604:	f7fe ffa8 	bl	8001558 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002608:	f000 fa02 	bl	8002a10 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800260c:	f019 f802 	bl	801b614 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002610:	2101      	movs	r1, #1
 8002612:	2001      	movs	r0, #1
 8002614:	f019 f83e 	bl	801b694 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002618:	2101      	movs	r1, #1
 800261a:	2001      	movs	r0, #1
 800261c:	f019 f80a 	bl	801b634 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200003e4 	.word	0x200003e4
 8002628:	080027f5 	.word	0x080027f5
 800262c:	58004000 	.word	0x58004000

08002630 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002634:	f019 f85e 	bl	801b6f4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002646:	f7fe ff95 	bl	8001574 <SYS_GetBatteryLevel>
 800264a:	4603      	mov	r3, r0
 800264c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002654:	4293      	cmp	r3, r2
 8002656:	d902      	bls.n	800265e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002658:	23fe      	movs	r3, #254	@ 0xfe
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	e014      	b.n	8002688 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002664:	d202      	bcs.n	800266c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e00d      	b.n	8002688 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8002672:	461a      	mov	r2, r3
 8002674:	4613      	mov	r3, r2
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	461a      	mov	r2, r3
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <GetBatteryLevel+0x58>)
 8002680:	fba3 2302 	umull	r2, r3, r3, r2
 8002684:	09db      	lsrs	r3, r3, #7
 8002686:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002688:	79fb      	ldrb	r3, [r7, #7]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	1b4e81b5 	.word	0x1b4e81b5

08002698 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f989 	bl	80029bc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fcb1 	bl	8001014 <__aeabi_f2iz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80026b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80026c2:	b590      	push	{r4, r7, lr}
 80026c4:	b087      	sub	sp, #28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80026ce:	f7ff ff5f 	bl	8002590 <LL_FLASH_GetUDN>
 80026d2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026da:	d138      	bne.n	800274e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80026dc:	f001 f8d6 	bl	800388c <HAL_GetUIDw0>
 80026e0:	4604      	mov	r4, r0
 80026e2:	f001 f8e7 	bl	80038b4 <HAL_GetUIDw2>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4423      	add	r3, r4
 80026ea:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80026ec:	f001 f8d8 	bl	80038a0 <HAL_GetUIDw1>
 80026f0:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	0e1a      	lsrs	r2, r3, #24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3307      	adds	r3, #7
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	0c1a      	lsrs	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3306      	adds	r3, #6
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	0a1a      	lsrs	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3305      	adds	r3, #5
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0e1a      	lsrs	r2, r3, #24
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3303      	adds	r3, #3
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	0c1a      	lsrs	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3302      	adds	r3, #2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	0a1a      	lsrs	r2, r3, #8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800274c:	e031      	b.n	80027b2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3307      	adds	r3, #7
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	0a1a      	lsrs	r2, r3, #8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3306      	adds	r3, #6
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	0c1a      	lsrs	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3305      	adds	r3, #5
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	0e1a      	lsrs	r2, r3, #24
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 800277c:	f7ff ff12 	bl	80025a4 <LL_FLASH_GetDeviceID>
 8002780:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3303      	adds	r3, #3
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800278c:	f7ff ff16 	bl	80025bc <LL_FLASH_GetSTCompanyID>
 8002790:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3302      	adds	r3, #2
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	0a1a      	lsrs	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	0c1b      	lsrs	r3, r3, #16
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd90      	pop	{r4, r7, pc}

080027ba <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80027ba:	b590      	push	{r4, r7, lr}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80027c4:	f7ff fee4 	bl	8002590 <LL_FLASH_GetUDN>
 80027c8:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d10b      	bne.n	80027ea <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80027d2:	f001 f85b 	bl	800388c <HAL_GetUIDw0>
 80027d6:	4604      	mov	r4, r0
 80027d8:	f001 f862 	bl	80038a0 <HAL_GetUIDw1>
 80027dc:	4603      	mov	r3, r0
 80027de:	405c      	eors	r4, r3
 80027e0:	f001 f868 	bl	80038b4 <HAL_GetUIDw2>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4063      	eors	r3, r4
 80027e8:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 80027ea:	687b      	ldr	r3, [r7, #4]

}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	4618      	mov	r0, r3
 8002804:	f019 f886 	bl	801b914 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800280e:	9200      	str	r2, [sp, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <TimestampNow+0x3c>)
 8002812:	2110      	movs	r1, #16
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f81d 	bl	8002854 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fd fd00 	bl	8000220 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	b29a      	uxth	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0801f8f4 	.word	0x0801f8f4

08002834 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002838:	2101      	movs	r1, #1
 800283a:	2002      	movs	r0, #2
 800283c:	f018 fefa 	bl	801b634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002848:	2100      	movs	r1, #0
 800284a:	2002      	movs	r0, #2
 800284c:	f018 fef2 	bl	801b634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002854:	b40c      	push	{r2, r3}
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f019 fa23 	bl	801bcb8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800287c:	b002      	add	sp, #8
 800287e:	4770      	bx	lr

08002880 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_GetTick+0x24>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80028a6:	f000 fa41 	bl	8002d2c <TIMER_IF_GetTimerValue>
 80028aa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200003e4 	.word	0x200003e4

080028bc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fab7 	bl	8002e3a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <LL_AHB2_GRP1_EnableClock>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800290a:	f000 ffdd 	bl	80038c8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800290e:	f000 ffe1 	bl	80038d4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002912:	f000 ffe5 	bl	80038e0 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002924:	2301      	movs	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff ffcf 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002936:	2002      	movs	r0, #2
 8002938:	f7ff ffcc 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800293c:	2002      	movs	r0, #2
 800293e:	f7ff ffc9 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002942:	2002      	movs	r0, #2
 8002944:	f7ff ffc6 	bl	80028d4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002948:	2301      	movs	r3, #1
 800294a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002954:	f003 f90a 	bl	8005b6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800295c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4815      	ldr	r0, [pc, #84]	@ (80029b8 <DBG_Init+0xb4>)
 8002964:	f003 f902 	bl	8005b6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002968:	2308      	movs	r3, #8
 800296a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4811      	ldr	r0, [pc, #68]	@ (80029b8 <DBG_Init+0xb4>)
 8002972:	f003 f8fb 	bl	8005b6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002976:	2310      	movs	r3, #16
 8002978:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	4619      	mov	r1, r3
 800297e:	480e      	ldr	r0, [pc, #56]	@ (80029b8 <DBG_Init+0xb4>)
 8002980:	f003 f8f4 	bl	8005b6c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	2101      	movs	r1, #1
 8002988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800298c:	f003 fb1c 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002996:	4808      	ldr	r0, [pc, #32]	@ (80029b8 <DBG_Init+0xb4>)
 8002998:	f003 fb16 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	2108      	movs	r1, #8
 80029a0:	4805      	ldr	r0, [pc, #20]	@ (80029b8 <DBG_Init+0xb4>)
 80029a2:	f003 fb11 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2110      	movs	r1, #16
 80029aa:	4803      	ldr	r0, [pc, #12]	@ (80029b8 <DBG_Init+0xb4>)
 80029ac:	f003 fb0c 	bl	8005fc8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	48000400 	.word	0x48000400

080029bc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <EnvSensors_Read+0x40>)
 80029c6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80029c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <EnvSensors_Read+0x44>)
 80029ca:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80029cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <EnvSensors_Read+0x48>)
 80029ce:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <EnvSensors_Read+0x4c>)
 80029e6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <EnvSensors_Read+0x50>)
 80029ec:	611a      	str	r2, [r3, #16]

  return 0;
 80029ee:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	42480000 	.word	0x42480000
 8002a00:	41900000 	.word	0x41900000
 8002a04:	447a0000 	.word	0x447a0000
 8002a08:	003e090d 	.word	0x003e090d
 8002a0c:	000503ab 	.word	0x000503ab

08002a10 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002a1a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
	return 1;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <_kill>:

int _kill(int pid, int sig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a3e:	f01b f805 	bl	801da4c <__errno>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2216      	movs	r2, #22
 8002a46:	601a      	str	r2, [r3, #0]
	return -1;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_exit>:

void _exit (int status)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffe7 	bl	8002a34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a66:	bf00      	nop
 8002a68:	e7fd      	b.n	8002a66 <_exit+0x12>

08002a6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e00a      	b.n	8002a92 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a7c:	f3af 8000 	nop.w
 8002a80:	4601      	mov	r1, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	60ba      	str	r2, [r7, #8]
 8002a88:	b2ca      	uxtb	r2, r1
 8002a8a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	dbf0      	blt.n	8002a7c <_read+0x12>
	}

return len;
 8002a9a:	687b      	ldr	r3, [r7, #4]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e009      	b.n	8002aca <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	60ba      	str	r2, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dbf1      	blt.n	8002ab6 <_write+0x12>
	}
	return len;
 8002ad2:	687b      	ldr	r3, [r7, #4]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_close>:

int _close(int file)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b02:	605a      	str	r2, [r3, #4]
	return 0;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <_isatty>:

int _isatty(int file)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	return 1;
 8002b18:	2301      	movs	r3, #1
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f01a ff6e 	bl	801da4c <__errno>
 8002b70:	4603      	mov	r3, r0
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <_sbrk+0x64>)
 8002b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20010000 	.word	0x20010000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	200003e8 	.word	0x200003e8
 8002ba4:	20002508 	.word	0x20002508

08002ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
	...

08002bcc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <TIMER_IF_Init+0x5c>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <TIMER_IF_Init+0x60>)
 8002be6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002bec:	f7ff f860 	bl	8001cb0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002bf0:	f000 f856 	bl	8002ca0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002bf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf8:	480c      	ldr	r0, [pc, #48]	@ (8002c2c <TIMER_IF_Init+0x60>)
 8002bfa:	f004 ff3f 	bl	8007a7c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <TIMER_IF_Init+0x60>)
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002c06:	4809      	ldr	r0, [pc, #36]	@ (8002c2c <TIMER_IF_Init+0x60>)
 8002c08:	f005 f89a 	bl	8007d40 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f000 f9d3 	bl	8002fb8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002c12:	f000 f85f 	bl	8002cd4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002c16:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <TIMER_IF_Init+0x5c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200003ec 	.word	0x200003ec
 8002c2c:	20000388 	.word	0x20000388

08002c30 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	@ 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	222c      	movs	r2, #44	@ 0x2c
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f01a feae 	bl	801d9a8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002c4c:	f000 f828 	bl	8002ca0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <TIMER_IF_StartTimer+0x68>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c68:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c6c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <TIMER_IF_StartTimer+0x6c>)
 8002c7e:	f004 fdf1 	bl	8007864 <HAL_RTC_SetAlarm_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002c88:	f7fe ffe4 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3738      	adds	r7, #56	@ 0x38
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200003f0 	.word	0x200003f0
 8002c9c:	20000388 	.word	0x20000388

08002ca0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <TIMER_IF_StopTimer+0x2c>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cb4:	4806      	ldr	r0, [pc, #24]	@ (8002cd0 <TIMER_IF_StopTimer+0x30>)
 8002cb6:	f004 fee1 	bl	8007a7c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <TIMER_IF_StopTimer+0x30>)
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40002800 	.word	0x40002800
 8002cd0:	20000388 	.word	0x20000388

08002cd4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002cd8:	f000 f98e 	bl	8002ff8 <GetTimerTicks>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <TIMER_IF_SetTimerContext+0x18>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002ce2:	4b02      	ldr	r3, [pc, #8]	@ (8002cec <TIMER_IF_SetTimerContext+0x18>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200003f0 	.word	0x200003f0

08002cf0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	@ (8002d00 <TIMER_IF_GetTimerContext+0x10>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	200003f0 	.word	0x200003f0

08002d04 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002d0e:	f000 f973 	bl	8002ff8 <GetTimerTicks>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200003f0 	.word	0x200003f0

08002d2c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <TIMER_IF_GetTimerValue+0x24>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002d3e:	f000 f95b 	bl	8002ff8 <GetTimerTicks>
 8002d42:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200003ec 	.word	0x200003ec

08002d54 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002d5e:	2303      	movs	r3, #3
 8002d60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d6e:	b5b0      	push	{r4, r5, r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d76:	2100      	movs	r1, #0
 8002d78:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	460a      	mov	r2, r1
 8002d80:	4603      	mov	r3, r0
 8002d82:	0d95      	lsrs	r5, r2, #22
 8002d84:	0294      	lsls	r4, r2, #10
 8002d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	f7fe f985 	bl	80010a0 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}

08002da8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002da8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002db2:	2100      	movs	r1, #0
 8002db4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	2000      	movs	r0, #0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f04f 0a00 	mov.w	sl, #0
 8002dc6:	f04f 0b00 	mov.w	fp, #0
 8002dca:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002dce:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002dd2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002dd6:	4650      	mov	r0, sl
 8002dd8:	4659      	mov	r1, fp
 8002dda:	1b02      	subs	r2, r0, r4
 8002ddc:	eb61 0305 	sbc.w	r3, r1, r5
 8002de0:	f04f 0000 	mov.w	r0, #0
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	0099      	lsls	r1, r3, #2
 8002dea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002dee:	0090      	lsls	r0, r2, #2
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	eb12 0804 	adds.w	r8, r2, r4
 8002df8:	eb43 0905 	adc.w	r9, r3, r5
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e10:	4690      	mov	r8, r2
 8002e12:	4699      	mov	r9, r3
 8002e14:	4640      	mov	r0, r8
 8002e16:	4649      	mov	r1, r9
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	0a82      	lsrs	r2, r0, #10
 8002e22:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002e26:	0a8b      	lsrs	r3, r1, #10
 8002e28:	4613      	mov	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e38:	4770      	bx	lr

08002e3a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff ff93 	bl	8002d6e <TIMER_IF_Convert_ms2Tick>
 8002e48:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002e4a:	f000 f8d5 	bl	8002ff8 <GetTimerTicks>
 8002e4e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e50:	e000      	b.n	8002e54 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002e52:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e54:	f000 f8d0 	bl	8002ff8 <GetTimerTicks>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d8f6      	bhi.n	8002e52 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002e76:	f019 fb4d 	bl	801c514 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002e8a:	f000 f8a5 	bl	8002fd8 <TIMER_IF_BkUp_Read_MSBticks>
 8002e8e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f88f 	bl	8002fb8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002ea2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea6:	b08c      	sub	sp, #48	@ 0x30
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002eb0:	f000 f8a2 	bl	8002ff8 <GetTimerTicks>
 8002eb4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002eb6:	f000 f88f 	bl	8002fd8 <TIMER_IF_BkUp_Read_MSBticks>
 8002eba:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	000b      	movs	r3, r1
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4605      	mov	r5, r0
 8002eda:	eb12 0804 	adds.w	r8, r2, r4
 8002ede:	eb43 0905 	adc.w	r9, r3, r5
 8002ee2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002ee6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	0a82      	lsrs	r2, r0, #10
 8002ef4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ef8:	0a8b      	lsrs	r3, r1, #10
 8002efa:	4613      	mov	r3, r2
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2200      	movs	r2, #0
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002f0c:	f04f 0b00 	mov.w	fp, #0
 8002f10:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff46 	bl	8002da8 <TIMER_IF_Convert_Tick2ms>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	@ 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f30 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4803      	ldr	r0, [pc, #12]	@ (8002f4c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002f3e:	f004 ff91 	bl	8007e64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000388 	.word	0x20000388

08002f50 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4803      	ldr	r0, [pc, #12]	@ (8002f6c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002f5e:	f004 ff81 	bl	8007e64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000388 	.word	0x20000388

08002f70 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002f7e:	f004 ff89 	bl	8007e94 <HAL_RTCEx_BKUPRead>
 8002f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000388 	.word	0x20000388

08002f94 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002fa2:	f004 ff77 	bl	8007e94 <HAL_RTCEx_BKUPRead>
 8002fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000388 	.word	0x20000388

08002fb8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4803      	ldr	r0, [pc, #12]	@ (8002fd4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002fc6:	f004 ff4d 	bl	8007e64 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000388 	.word	0x20000388

08002fd8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002fe2:	f004 ff57 	bl	8007e94 <HAL_RTCEx_BKUPRead>
 8002fe6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002fe8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000388 	.word	0x20000388

08002ff8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ffe:	480b      	ldr	r0, [pc, #44]	@ (800302c <GetTimerTicks+0x34>)
 8003000:	f7ff fdd8 	bl	8002bb4 <LL_RTC_TIME_GetSubSecond>
 8003004:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003006:	e003      	b.n	8003010 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003008:	4808      	ldr	r0, [pc, #32]	@ (800302c <GetTimerTicks+0x34>)
 800300a:	f7ff fdd3 	bl	8002bb4 <LL_RTC_TIME_GetSubSecond>
 800300e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003010:	4806      	ldr	r0, [pc, #24]	@ (800302c <GetTimerTicks+0x34>)
 8003012:	f7ff fdcf 	bl	8002bb4 <LL_RTC_TIME_GetSubSecond>
 8003016:	4602      	mov	r2, r0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4293      	cmp	r3, r2
 800301c:	d1f4      	bne.n	8003008 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40002800 	.word	0x40002800

08003030 <LL_AHB2_GRP1_EnableClock>:
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800303e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4313      	orrs	r3, r2
 8003046:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <LL_APB1_GRP1_EnableClock>:
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800306e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4313      	orrs	r3, r2
 8003076:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003084:	68fb      	ldr	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_APB1_GRP1_DisableClock>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a6:	4013      	ands	r3, r2
 80030a8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <LL_APB2_GRP1_EnableClock>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_APB2_GRP1_DisableClock>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fa:	4013      	ands	r3, r2
 80030fc:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800310c:	4b22      	ldr	r3, [pc, #136]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 800310e:	4a23      	ldr	r2, [pc, #140]	@ (800319c <MX_USART1_UART_Init+0x94>)
 8003110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003112:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b1f      	ldr	r3, [pc, #124]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003126:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b17      	ldr	r3, [pc, #92]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b16      	ldr	r3, [pc, #88]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003152:	f005 fb82 	bl	800885a <HAL_UART_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800315c:	f7fe fd7a 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003160:	2100      	movs	r1, #0
 8003162:	480d      	ldr	r0, [pc, #52]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003164:	f007 fd99 	bl	800ac9a <HAL_UARTEx_SetTxFifoThreshold>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800316e:	f7fe fd71 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003172:	2100      	movs	r1, #0
 8003174:	4808      	ldr	r0, [pc, #32]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003176:	f007 fdce 	bl	800ad16 <HAL_UARTEx_SetRxFifoThreshold>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003180:	f7fe fd68 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003184:	4804      	ldr	r0, [pc, #16]	@ (8003198 <MX_USART1_UART_Init+0x90>)
 8003186:	f007 fd15 	bl	800abb4 <HAL_UARTEx_EnableFifoMode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003190:	f7fe fd60 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	200003f4 	.word	0x200003f4
 800319c:	40013800 	.word	0x40013800

080031a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031a4:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031a6:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <MX_USART2_UART_Init+0x94>)
 80031a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031aa:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031c6:	220c      	movs	r2, #12
 80031c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d0:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031e8:	4811      	ldr	r0, [pc, #68]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031ea:	f005 fb36 	bl	800885a <HAL_UART_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80031f4:	f7fe fd2e 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031f8:	2100      	movs	r1, #0
 80031fa:	480d      	ldr	r0, [pc, #52]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 80031fc:	f007 fd4d 	bl	800ac9a <HAL_UARTEx_SetTxFifoThreshold>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003206:	f7fe fd25 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320a:	2100      	movs	r1, #0
 800320c:	4808      	ldr	r0, [pc, #32]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 800320e:	f007 fd82 	bl	800ad16 <HAL_UARTEx_SetRxFifoThreshold>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003218:	f7fe fd1c 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800321c:	4804      	ldr	r0, [pc, #16]	@ (8003230 <MX_USART2_UART_Init+0x90>)
 800321e:	f007 fd04 	bl	800ac2a <HAL_UARTEx_DisableFifoMode>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003228:	f7fe fd14 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000484 	.word	0x20000484
 8003234:	40004400 	.word	0x40004400

08003238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b096      	sub	sp, #88	@ 0x58
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	2238      	movs	r2, #56	@ 0x38
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f01a fba5 	bl	801d9a8 <memset>
  if(uartHandle->Instance==USART1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a49      	ldr	r2, [pc, #292]	@ (8003388 <HAL_UART_MspInit+0x150>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d157      	bne.n	8003318 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003268:	2301      	movs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800326c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003270:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4618      	mov	r0, r3
 8003278:	f004 f960 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003282:	f7fe fce7 	bl	8001c54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003286:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800328a:	f7ff ff13 	bl	80030b4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2002      	movs	r0, #2
 8003290:	f7ff fece 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003294:	23c0      	movs	r3, #192	@ 0xc0
 8003296:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a4:	2307      	movs	r3, #7
 80032a6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032ac:	4619      	mov	r1, r3
 80032ae:	4837      	ldr	r0, [pc, #220]	@ (800338c <HAL_UART_MspInit+0x154>)
 80032b0:	f002 fc5c 	bl	8005b6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80032b4:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032b6:	4a37      	ldr	r2, [pc, #220]	@ (8003394 <HAL_UART_MspInit+0x15c>)
 80032b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032ba:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032bc:	2212      	movs	r2, #18
 80032be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c0:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032c2:	2210      	movs	r2, #16
 80032c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c6:	4b32      	ldr	r3, [pc, #200]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032ce:	2280      	movs	r2, #128	@ 0x80
 80032d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032de:	4b2c      	ldr	r3, [pc, #176]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032ea:	4829      	ldr	r0, [pc, #164]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032ec:	f001 fdf2 	bl	8004ed4 <HAL_DMA_Init>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80032f6:	f7fe fcad 	bl	8001c54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a24      	ldr	r2, [pc, #144]	@ (8003390 <HAL_UART_MspInit+0x158>)
 80032fe:	679a      	str	r2, [r3, #120]	@ 0x78
 8003300:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <HAL_UART_MspInit+0x158>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2102      	movs	r1, #2
 800330a:	2024      	movs	r0, #36	@ 0x24
 800330c:	f001 fdab 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003310:	2024      	movs	r0, #36	@ 0x24
 8003312:	f001 fdc2 	bl	8004e9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003316:	e033      	b.n	8003380 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <HAL_UART_MspInit+0x160>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12e      	bne.n	8003380 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003322:	2302      	movs	r3, #2
 8003324:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003326:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800332a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4618      	mov	r0, r3
 8003332:	f004 f903 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_MspInit+0x108>
      Error_Handler();
 800333c:	f7fe fc8a 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003340:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003344:	f7ff fe8c 	bl	8003060 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	2001      	movs	r0, #1
 800334a:	f7ff fe71 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800334e:	230c      	movs	r3, #12
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800335e:	2307      	movs	r3, #7
 8003360:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800336c:	f002 fbfe 	bl	8005b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	2100      	movs	r1, #0
 8003374:	2025      	movs	r0, #37	@ 0x25
 8003376:	f001 fd76 	bl	8004e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800337a:	2025      	movs	r0, #37	@ 0x25
 800337c:	f001 fd8d 	bl	8004e9a <HAL_NVIC_EnableIRQ>
}
 8003380:	bf00      	nop
 8003382:	3758      	adds	r7, #88	@ 0x58
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40013800 	.word	0x40013800
 800338c:	48000400 	.word	0x48000400
 8003390:	20000514 	.word	0x20000514
 8003394:	40020008 	.word	0x40020008
 8003398:	40004400 	.word	0x40004400

0800339c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <HAL_UART_MspDeInit+0x60>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d110      	bne.n	80033d0 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80033ae:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80033b2:	f7ff fe97 	bl	80030e4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80033b6:	21c0      	movs	r1, #192	@ 0xc0
 80033b8:	4811      	ldr	r0, [pc, #68]	@ (8003400 <HAL_UART_MspDeInit+0x64>)
 80033ba:	f002 fd37 	bl	8005e2c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fe2e 	bl	8005024 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80033c8:	2024      	movs	r0, #36	@ 0x24
 80033ca:	f001 fd74 	bl	8004eb6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80033ce:	e010      	b.n	80033f2 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <HAL_UART_MspDeInit+0x68>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10b      	bne.n	80033f2 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80033da:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80033de:	f7ff fe57 	bl	8003090 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80033e2:	210c      	movs	r1, #12
 80033e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033e8:	f002 fd20 	bl	8005e2c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80033ec:	2025      	movs	r0, #37	@ 0x25
 80033ee:	f001 fd62 	bl	8004eb6 <HAL_NVIC_DisableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40013800 	.word	0x40013800
 8003400:	48000400 	.word	0x48000400
 8003404:	40004400 	.word	0x40004400

08003408 <LL_APB2_GRP1_ForceReset>:
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4313      	orrs	r3, r2
 800341e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <LL_APB2_GRP1_ReleaseReset>:
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	43db      	mvns	r3, r3
 800343c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003440:	4013      	ands	r3, r2
 8003442:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
	...

08003450 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <LL_EXTI_EnableIT_0_31+0x24>)
 800345a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800345e:	4905      	ldr	r1, [pc, #20]	@ (8003474 <LL_EXTI_EnableIT_0_31+0x24>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	58000800 	.word	0x58000800

08003478 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003480:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <vcom_Init+0x28>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003486:	f7fe f907 	bl	8001698 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800348a:	f7ff fe3d 	bl	8003108 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800348e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003492:	f7ff ffdd 	bl	8003450 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003496:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000578 	.word	0x20000578

080034a4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80034a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80034ac:	f7ff ffac 	bl	8003408 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80034b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80034b4:	f7ff ffb9 	bl	800342a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80034b8:	4804      	ldr	r0, [pc, #16]	@ (80034cc <vcom_DeInit+0x28>)
 80034ba:	f7ff ff6f 	bl	800339c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80034be:	200f      	movs	r0, #15
 80034c0:	f001 fcf9 	bl	8004eb6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80034c4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200003f4 	.word	0x200003f4

080034d0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	461a      	mov	r2, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4804      	ldr	r0, [pc, #16]	@ (80034f4 <vcom_Trace_DMA+0x24>)
 80034e4:	f005 fbc8 	bl	8008c78 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80034e8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200003f4 	.word	0x200003f4

080034f8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003500:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <vcom_ReceiveInit+0x70>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003506:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800350a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003514:	4815      	ldr	r0, [pc, #84]	@ (800356c <vcom_ReceiveInit+0x74>)
 8003516:	f007 fac0 	bl	800aa9a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800351a:	bf00      	nop
 800351c:	4b13      	ldr	r3, [pc, #76]	@ (800356c <vcom_ReceiveInit+0x74>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352a:	d0f7      	beq.n	800351c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800352c:	bf00      	nop
 800352e:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <vcom_ReceiveInit+0x74>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353c:	d1f7      	bne.n	800352e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800353e:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <vcom_ReceiveInit+0x74>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <vcom_ReceiveInit+0x74>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800354c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800354e:	4807      	ldr	r0, [pc, #28]	@ (800356c <vcom_ReceiveInit+0x74>)
 8003550:	f007 fafe 	bl	800ab50 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003554:	2201      	movs	r2, #1
 8003556:	4906      	ldr	r1, [pc, #24]	@ (8003570 <vcom_ReceiveInit+0x78>)
 8003558:	4804      	ldr	r0, [pc, #16]	@ (800356c <vcom_ReceiveInit+0x74>)
 800355a:	f005 fb37 	bl	8008bcc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800355e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000057c 	.word	0x2000057c
 800356c:	200003f4 	.word	0x200003f4
 8003570:	20000574 	.word	0x20000574

08003574 <vcom_Resume>:

void vcom_Resume(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003578:	4808      	ldr	r0, [pc, #32]	@ (800359c <vcom_Resume+0x28>)
 800357a:	f005 f96e 	bl	800885a <HAL_UART_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003584:	f7fe fb66 	bl	8001c54 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003588:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <vcom_Resume+0x2c>)
 800358a:	f001 fca3 	bl	8004ed4 <HAL_DMA_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003594:	f7fe fb5e 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200003f4 	.word	0x200003f4
 80035a0:	20000514 	.word	0x20000514

080035a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a05      	ldr	r2, [pc, #20]	@ (80035c8 <HAL_UART_TxCpltCallback+0x24>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d103      	bne.n	80035be <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80035b6:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_UART_TxCpltCallback+0x28>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2000      	movs	r0, #0
 80035bc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40013800 	.word	0x40013800
 80035cc:	20000578 	.word	0x20000578

080035d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_UART_RxCpltCallback+0x44>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d113      	bne.n	800360a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HAL_UART_RxCpltCallback+0x48>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_UART_RxCpltCallback+0x30>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80035f4:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <HAL_UART_RxCpltCallback+0x48>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2101      	movs	r1, #1
 80035fc:	4807      	ldr	r0, [pc, #28]	@ (800361c <HAL_UART_RxCpltCallback+0x4c>)
 80035fe:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003600:	2201      	movs	r2, #1
 8003602:	4906      	ldr	r1, [pc, #24]	@ (800361c <HAL_UART_RxCpltCallback+0x4c>)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f005 fae1 	bl	8008bcc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40013800 	.word	0x40013800
 8003618:	2000057c 	.word	0x2000057c
 800361c:	20000574 	.word	0x20000574

08003620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003620:	480d      	ldr	r0, [pc, #52]	@ (8003658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003624:	f7ff fac0 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	@ (800365c <LoopForever+0x6>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	@ (8003660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <LoopForever+0xe>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	@ (800366c <LoopForever+0x16>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800364e:	f01a fa03 	bl	801da58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003652:	f7fe fa96 	bl	8001b82 <main>

08003656 <LoopForever>:

LoopForever:
    b LoopForever
 8003656:	e7fe      	b.n	8003656 <LoopForever>
  ldr   r0, =_estack
 8003658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003664:	08020ca0 	.word	0x08020ca0
  ldr r2, =_sbss
 8003668:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 800366c:	20002504 	.word	0x20002504

08003670 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <AES_IRQHandler>

08003672 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003686:	2310      	movs	r3, #16
 8003688:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003692:	2303      	movs	r3, #3
 8003694:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369e:	f002 fa65 	bl	8005b6c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80036a2:	2320      	movs	r3, #32
 80036a4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ae:	f002 fa5d 	bl	8005b6c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80036b2:	2200      	movs	r2, #0
 80036b4:	2120      	movs	r1, #32
 80036b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ba:	f002 fc85 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80036be:	2200      	movs	r2, #0
 80036c0:	2110      	movs	r1, #16
 80036c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036c6:	f002 fc7f 	bl	8005fc8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d83f      	bhi.n	8003764 <BSP_RADIO_ConfigRFSwitch+0x90>
 80036e4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ec <BSP_RADIO_ConfigRFSwitch+0x18>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	08003717 	.word	0x08003717
 80036f4:	08003731 	.word	0x08003731
 80036f8:	0800374b 	.word	0x0800374b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2110      	movs	r1, #16
 8003700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003704:	f002 fc60 	bl	8005fc8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2120      	movs	r1, #32
 800370c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003710:	f002 fc5a 	bl	8005fc8 <HAL_GPIO_WritePin>
      break;      
 8003714:	e027      	b.n	8003766 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003716:	2201      	movs	r2, #1
 8003718:	2110      	movs	r1, #16
 800371a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800371e:	f002 fc53 	bl	8005fc8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003722:	2200      	movs	r2, #0
 8003724:	2120      	movs	r1, #32
 8003726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800372a:	f002 fc4d 	bl	8005fc8 <HAL_GPIO_WritePin>
      break;
 800372e:	e01a      	b.n	8003766 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003730:	2201      	movs	r2, #1
 8003732:	2110      	movs	r1, #16
 8003734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003738:	f002 fc46 	bl	8005fc8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800373c:	2201      	movs	r2, #1
 800373e:	2120      	movs	r1, #32
 8003740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003744:	f002 fc40 	bl	8005fc8 <HAL_GPIO_WritePin>
      break;
 8003748:	e00d      	b.n	8003766 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800374a:	2200      	movs	r2, #0
 800374c:	2110      	movs	r1, #16
 800374e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003752:	f002 fc39 	bl	8005fc8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003756:	2201      	movs	r2, #1
 8003758:	2120      	movs	r1, #32
 800375a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800375e:	f002 fc33 	bl	8005fc8 <HAL_GPIO_WritePin>
      break;
 8003762:	e000      	b.n	8003766 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003764:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003774:	2302      	movs	r3, #2
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003790:	2301      	movs	r3, #1
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80037aa:	230f      	movs	r3, #15
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e001      	b.n	80037b4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80037b0:	2316      	movs	r3, #22
 80037b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80037b4:	68fb      	ldr	r3, [r7, #12]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a03      	ldr	r2, [pc, #12]	@ (80037d8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6053      	str	r3, [r2, #4]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	e0042000 	.word	0xe0042000

080037dc <LL_DBGMCU_DisableDBGStopMode>:
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80037e0:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a03      	ldr	r2, [pc, #12]	@ (80037f4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80037e6:	f023 0302 	bic.w	r3, r3, #2
 80037ea:	6053      	str	r3, [r2, #4]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	e0042000 	.word	0xe0042000

080037f8 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a03      	ldr	r2, [pc, #12]	@ (8003810 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6053      	str	r3, [r2, #4]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	e0042000 	.word	0xe0042000

08003814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381e:	2003      	movs	r0, #3
 8003820:	f001 fb16 	bl	8004e50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003824:	f003 fcac 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 8003828:	4603      	mov	r3, r0
 800382a:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_Init+0x3c>)
 800382c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800382e:	200f      	movs	r0, #15
 8003830:	f7ff f826 	bl	8002880 <HAL_InitTick>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	71fb      	strb	r3, [r7, #7]
 800383e:	e001      	b.n	8003844 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003840:	f7fe fdcb 	bl	80023da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003844:	79fb      	ldrb	r3, [r7, #7]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_SuspendTick+0x18>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a03      	ldr	r2, [pc, #12]	@ (800386c <HAL_SuspendTick+0x18>)
 800385e:	f023 0302 	bic.w	r3, r3, #2
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	e000e010 	.word	0xe000e010

08003870 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_ResumeTick+0x18>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a03      	ldr	r2, [pc, #12]	@ (8003888 <HAL_ResumeTick+0x18>)
 800387a:	f043 0302 	orr.w	r3, r3, #2
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003890:	4b02      	ldr	r3, [pc, #8]	@ (800389c <HAL_GetUIDw0+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	1fff7590 	.word	0x1fff7590

080038a0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80038a4:	4b02      	ldr	r3, [pc, #8]	@ (80038b0 <HAL_GetUIDw1+0x10>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	1fff7594 	.word	0x1fff7594

080038b4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80038b8:	4b02      	ldr	r3, [pc, #8]	@ (80038c4 <HAL_GetUIDw2+0x10>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	1fff7598 	.word	0x1fff7598

080038c8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80038cc:	f7ff ff78 	bl	80037c0 <LL_DBGMCU_DisableDBGSleepMode>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80038d8:	f7ff ff80 	bl	80037dc <LL_DBGMCU_DisableDBGStopMode>
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80038e4:	f7ff ff88 	bl	80037f8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}

080038ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2107      	movs	r1, #7
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	431a      	orrs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2107      	movs	r1, #7
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	210f      	movs	r1, #15
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	401a      	ands	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	f003 010f 	and.w	r1, r3, #15
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	0219      	lsls	r1, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
 8003a80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003a84:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003aa8:	f023 0317 	bic.w	r3, r3, #23
 8003aac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ace:	f023 0317 	bic.w	r3, r3, #23
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6093      	str	r3, [r2, #8]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af4:	d101      	bne.n	8003afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b16:	f023 0317 	bic.w	r3, r3, #23
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b3c:	f023 0317 	bic.w	r3, r3, #23
 8003b40:	f043 0202 	orr.w	r2, r3, #2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_IsEnabled+0x18>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_ADC_IsEnabled+0x1a>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d101      	bne.n	8003b8e <LL_ADC_IsDisableOngoing+0x18>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <LL_ADC_IsDisableOngoing+0x1a>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003baa:	f023 0317 	bic.w	r3, r3, #23
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bd0:	f023 0317 	bic.w	r3, r3, #23
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d101      	bne.n	8003bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e19e      	b.n	8003f6c <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fd fc37 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff43 	bl	8003ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d115      	bne.n	8003c8c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff17 	bl	8003a98 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c6a:	4b99      	ldr	r3, [pc, #612]	@ (8003ed0 <HAL_ADC_Init+0x2c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	4a98      	ldr	r2, [pc, #608]	@ (8003ed4 <HAL_ADC_Init+0x2c8>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c7e:	e002      	b.n	8003c86 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f9      	bne.n	8003c80 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff25 	bl	8003ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff92 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 8144 	bne.w	8003f5a <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8140 	bne.w	8003f5a <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cde:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff2f 	bl	8003b52 <LL_ADC_IsEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 80a7 	bne.w	8003e4a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7e1b      	ldrb	r3, [r3, #24]
 8003d04:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d06:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7e5b      	ldrb	r3, [r3, #25]
 8003d0c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7e9b      	ldrb	r3, [r3, #26]
 8003d14:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d16:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_ADC_Init+0x11a>
 8003d20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d24:	e000      	b.n	8003d28 <HAL_ADC_Init+0x11c>
 8003d26:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d28:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d2e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da04      	bge.n	8003d42 <HAL_ADC_Init+0x136>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d40:	e001      	b.n	8003d46 <HAL_ADC_Init+0x13a>
 8003d42:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003d46:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003d4e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d50:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d114      	bne.n	8003d8c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7e9b      	ldrb	r3, [r3, #26]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e00b      	b.n	8003d8c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003da0:	4313      	orrs	r3, r2
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003db2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d111      	bne.n	8003e02 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003df0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003df6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	4b33      	ldr	r3, [pc, #204]	@ (8003ed8 <HAL_ADC_Init+0x2cc>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	430b      	orrs	r3, r1
 8003e14:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e1e:	d014      	beq.n	8003e4a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e28:	d00f      	beq.n	8003e4a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e32:	d00a      	beq.n	8003e4a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003e34:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_ADC_Init+0x2d0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003e44:	4925      	ldr	r1, [pc, #148]	@ (8003edc <HAL_ADC_Init+0x2d0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e52:	461a      	mov	r2, r3
 8003e54:	2100      	movs	r1, #0
 8003e56:	f7ff fd68 	bl	800392a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e62:	461a      	mov	r2, r3
 8003e64:	491e      	ldr	r1, [pc, #120]	@ (8003ee0 <HAL_ADC_Init+0x2d4>)
 8003e66:	f7ff fd60 	bl	800392a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f062 020f 	orn	r2, r2, #15
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e82:	e042      	b.n	8003f0a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e8c:	d13d      	bne.n	8003f0a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	e00c      	b.n	8003eae <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	d006      	beq.n	8003eb6 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b07      	cmp	r3, #7
 8003eb2:	d9ef      	bls.n	8003e94 <HAL_ADC_Init+0x288>
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003eb6:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d112      	bne.n	8003ee4 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f062 020f 	orn	r2, r2, #15
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ece:	e01c      	b.n	8003f0a <HAL_ADC_Init+0x2fe>
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	053e2d63 	.word	0x053e2d63
 8003ed8:	1ffffc02 	.word	0x1ffffc02
 8003edc:	40012708 	.word	0x40012708
 8003ee0:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	f003 031c 	and.w	r3, r3, #28
 8003ef6:	f06f 020f 	mvn.w	r2, #15
 8003efa:	fa02 f103 	lsl.w	r1, r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fd28 	bl	8003966 <LL_ADC_GetSamplingTimeCommonChannels>
 8003f16:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d10b      	bne.n	8003f38 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f36:	e018      	b.n	8003f6a <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	f023 0312 	bic.w	r3, r3, #18
 8003f40:	f043 0210 	orr.w	r2, r3, #16
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f58:	e007      	b.n	8003f6a <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	f043 0210 	orr.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06a      	b.n	800405c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fbf2 	bl	800477c <ADC_ConversionStop>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fcb6 	bl	8004914 <ADC_Disable>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fd7e 	bl	8003abe <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003fd0:	f023 0303 	bic.w	r3, r3, #3
 8003fd4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f240 329f 	movw	r2, #927	@ 0x39f
 8003fde:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <HAL_ADC_DeInit+0xf0>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003ffe:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0207 	bic.w	r2, r2, #7
 800400e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800401e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <HAL_ADC_DeInit+0xf4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a0d      	ldr	r2, [pc, #52]	@ (8004068 <HAL_ADC_DeInit+0xf4>)
 8004034:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8004038:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fa6e 	bl	800151c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	833e0200 	.word	0x833e0200
 8004068:	40012708 	.word	0x40012708

0800406c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fdb4 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d132      	bne.n	80040ea <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_ADC_Start+0x26>
 800408e:	2302      	movs	r3, #2
 8004090:	e02e      	b.n	80040f0 <HAL_ADC_Start+0x84>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fbb4 	bl	8004808 <ADC_Enable>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11a      	bne.n	80040e0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	221c      	movs	r2, #28
 80040ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fd5e 	bl	8003b9a <LL_ADC_REG_StartConversion>
 80040de:	e006      	b.n	80040ee <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80040e8:	e001      	b.n	80040ee <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
 80040ec:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_ADC_Stop+0x16>
 800410a:	2302      	movs	r3, #2
 800410c:	e022      	b.n	8004154 <HAL_ADC_Stop+0x5c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb30 	bl	800477c <ADC_ConversionStop>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d111      	bne.n	800414a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fbf4 	bl	8004914 <ADC_Disable>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f043 0201 	orr.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d102      	bne.n	8004174 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800416e:	2308      	movs	r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e010      	b.n	8004196 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e077      	b.n	8004282 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004192:	2304      	movs	r3, #4
 8004194:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004196:	f7fe fb7d 	bl	8002894 <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800419c:	e021      	b.n	80041e2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d01d      	beq.n	80041e2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80041a6:	f7fe fb75 	bl	8002894 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <HAL_ADC_PollForConversion+0x60>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d112      	bne.n	80041e2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e04f      	b.n	8004282 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0d6      	beq.n	800419e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fbc8 	bl	8003996 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7e9b      	ldrb	r3, [r3, #26]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d12d      	bne.n	8004270 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d126      	bne.n	8004270 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fcdd 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d112      	bne.n	8004258 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 020c 	bic.w	r2, r2, #12
 8004240:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	659a      	str	r2, [r3, #88]	@ 0x58
 8004256:	e00b      	b.n	8004270 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7e1b      	ldrb	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	220c      	movs	r2, #12
 800427e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_ADC_IRQHandler+0x56>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d012      	beq.n	80042f8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fcd0 	bl	8004c90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2202      	movs	r2, #2
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <HAL_ADC_IRQHandler+0x6a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d051      	beq.n	80043ba <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d04c      	beq.n	80043ba <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fb2a 	bl	8003996 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d031      	beq.n	80043ac <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7e9b      	ldrb	r3, [r3, #26]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d12d      	bne.n	80043ac <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d126      	bne.n	80043ac <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fc3f 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d112      	bne.n	8004394 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020c 	bic.w	r2, r2, #12
 800437c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	@ 0x58
 8004392:	e00b      	b.n	80043ac <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f892 	bl	80044d6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	220c      	movs	r2, #12
 80043b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d011      	beq.n	80043e8 <HAL_ADC_IRQHandler+0x146>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f884 	bl	80044e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2280      	movs	r2, #128	@ 0x80
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d012      	beq.n	8004418 <HAL_ADC_IRQHandler+0x176>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004400:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fc2f 	bl	8004c6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800441e:	2b00      	cmp	r3, #0
 8004420:	d012      	beq.n	8004448 <HAL_ADC_IRQHandler+0x1a6>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fc20 	bl	8004c7e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02b      	beq.n	80044aa <HAL_ADC_IRQHandler+0x208>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d026      	beq.n	80044aa <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 8004464:	2301      	movs	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e009      	b.n	800447e <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fae9 	bl	8003a46 <LL_ADC_REG_GetDMATransfer>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 800447a:	2301      	movs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10e      	bne.n	80044a2 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f043 0202 	orr.w	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f82c 	bl	80044fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2210      	movs	r2, #16
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_ADC_IRQHandler+0x22c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fbef 	bl	8004ca2 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044cc:	601a      	str	r2, [r3, #0]
  }
}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x28>
 8004530:	2302      	movs	r3, #2
 8004532:	e110      	b.n	8004756 <HAL_ADC_ConfigChannel+0x24a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fb50 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 80f7 	bne.w	800473c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	f000 80b1 	beq.w	80046ba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004560:	d004      	beq.n	800456c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_ADC_ConfigChannel+0x254>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7ff fa40 	bl	80039fc <LL_ADC_REG_SetSequencerChAdd>
 800457c:	e041      	b.n	8004602 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	210f      	movs	r1, #15
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800459c:	2b00      	cmp	r3, #0
 800459e:	d105      	bne.n	80045ac <HAL_ADC_ConfigChannel+0xa0>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	e011      	b.n	80045d0 <HAL_ADC_ConfigChannel+0xc4>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80045c4:	2320      	movs	r3, #32
 80045c6:	e003      	b.n	80045d0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	6849      	ldr	r1, [r1, #4]
 80045d4:	f001 011f 	and.w	r1, r1, #31
 80045d8:	408b      	lsls	r3, r1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d808      	bhi.n	8004602 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f7ff f9dc 	bl	80039ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	461a      	mov	r2, r3
 8004610:	f7ff fa26 	bl	8003a60 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f280 8097 	bge.w	800474c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800461e:	4851      	ldr	r0, [pc, #324]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 8004620:	f7ff f976 	bl	8003910 <LL_ADC_GetCommonPathInternalCh>
 8004624:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4f      	ldr	r2, [pc, #316]	@ (8004768 <HAL_ADC_ConfigChannel+0x25c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d120      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11b      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004640:	4619      	mov	r1, r3
 8004642:	4848      	ldr	r0, [pc, #288]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 8004644:	f7ff f952 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004648:	4b48      	ldr	r3, [pc, #288]	@ (800476c <HAL_ADC_ConfigChannel+0x260>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	4a48      	ldr	r2, [pc, #288]	@ (8004770 <HAL_ADC_ConfigChannel+0x264>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004662:	e002      	b.n	800466a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3b01      	subs	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004670:	e06c      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <HAL_ADC_ConfigChannel+0x268>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d10c      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x18a>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468c:	4619      	mov	r1, r3
 800468e:	4835      	ldr	r0, [pc, #212]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 8004690:	f7ff f92c 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 8004694:	e05a      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a37      	ldr	r2, [pc, #220]	@ (8004778 <HAL_ADC_ConfigChannel+0x26c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d155      	bne.n	800474c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d150      	bne.n	800474c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046b0:	4619      	mov	r1, r3
 80046b2:	482c      	ldr	r0, [pc, #176]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 80046b4:	f7ff f91a 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 80046b8:	e048      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046c2:	d004      	beq.n	80046ce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046c8:	4a25      	ldr	r2, [pc, #148]	@ (8004760 <HAL_ADC_ConfigChannel+0x254>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d107      	bne.n	80046de <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7ff f9a1 	bl	8003a20 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da32      	bge.n	800474c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e6:	481f      	ldr	r0, [pc, #124]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 80046e8:	f7ff f912 	bl	8003910 <LL_ADC_GetCommonPathInternalCh>
 80046ec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <HAL_ADC_ConfigChannel+0x25c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d107      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046fe:	4619      	mov	r1, r3
 8004700:	4818      	ldr	r0, [pc, #96]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 8004702:	f7ff f8f3 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 8004706:	e021      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <HAL_ADC_ConfigChannel+0x268>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d107      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004718:	4619      	mov	r1, r3
 800471a:	4812      	ldr	r0, [pc, #72]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 800471c:	f7ff f8e6 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 8004720:	e014      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a14      	ldr	r2, [pc, #80]	@ (8004778 <HAL_ADC_ConfigChannel+0x26c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10f      	bne.n	800474c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004732:	4619      	mov	r1, r3
 8004734:	480b      	ldr	r0, [pc, #44]	@ (8004764 <HAL_ADC_ConfigChannel+0x258>)
 8004736:	f7ff f8d9 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 800473a:	e007      	b.n	800474c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004754:	7ffb      	ldrb	r3, [r7, #31]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	80000004 	.word	0x80000004
 8004764:	40012708 	.word	0x40012708
 8004768:	b0001000 	.word	0xb0001000
 800476c:	20000000 	.word	0x20000000
 8004770:	053e2d63 	.word	0x053e2d63
 8004774:	b8004000 	.word	0xb8004000
 8004778:	b4002000 	.word	0xb4002000

0800477c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fa2c 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d033      	beq.n	80047fc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f9ec 	bl	8003b76 <LL_ADC_IsDisableOngoing>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fa09 	bl	8003bc0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ae:	f7fe f871 	bl	8002894 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047b4:	e01b      	b.n	80047ee <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047b6:	f7fe f86d 	bl	8002894 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d914      	bls.n	80047ee <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e007      	b.n	80047fe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1dc      	bne.n	80047b6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff f99a 	bl	8003b52 <LL_ADC_IsEnabled>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d169      	bne.n	80048f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <ADC_Enable+0xfc>)
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004836:	f043 0210 	orr.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e055      	b.n	80048fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f957 	bl	8003b06 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004858:	482b      	ldr	r0, [pc, #172]	@ (8004908 <ADC_Enable+0x100>)
 800485a:	f7ff f859 	bl	8003910 <LL_ADC_GetCommonPathInternalCh>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <ADC_Enable+0x104>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	4a28      	ldr	r2, [pc, #160]	@ (8004910 <ADC_Enable+0x108>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	099b      	lsrs	r3, r3, #6
 8004876:	3301      	adds	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800487a:	e002      	b.n	8004882 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3b01      	subs	r3, #1
 8004880:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f9      	bne.n	800487c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7e5b      	ldrb	r3, [r3, #25]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d033      	beq.n	80048f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004890:	f7fe f800 	bl	8002894 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004896:	e028      	b.n	80048ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f958 	bl	8003b52 <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff f92a 	bl	8003b06 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048b2:	f7fd ffef 	bl	8002894 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d914      	bls.n	80048ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d00d      	beq.n	80048ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	f043 0201 	orr.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e007      	b.n	80048fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d1cf      	bne.n	8004898 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	80000017 	.word	0x80000017
 8004908:	40012708 	.word	0x40012708
 800490c:	20000000 	.word	0x20000000
 8004910:	053e2d63 	.word	0x053e2d63

08004914 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f928 	bl	8003b76 <LL_ADC_IsDisableOngoing>
 8004926:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff f910 	bl	8003b52 <LL_ADC_IsEnabled>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d047      	beq.n	80049c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d144      	bne.n	80049c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0305 	and.w	r3, r3, #5
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10c      	bne.n	8004966 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f8eb 	bl	8003b2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2203      	movs	r2, #3
 800495c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800495e:	f7fd ff99 	bl	8002894 <HAL_GetTick>
 8004962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004964:	e029      	b.n	80049ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e023      	b.n	80049ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004982:	f7fd ff87 	bl	8002894 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d914      	bls.n	80049ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e007      	b.n	80049ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1dc      	bne.n	8004982 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <LL_ADC_SetCalibrationFactor>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049e2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <LL_ADC_GetCalibrationFactor>:
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <LL_ADC_Enable>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a26:	f023 0317 	bic.w	r3, r3, #23
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <LL_ADC_Disable>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a4c:	f023 0317 	bic.w	r3, r3, #23
 8004a50:	f043 0202 	orr.w	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <LL_ADC_IsEnabled>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <LL_ADC_IsEnabled+0x18>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <LL_ADC_IsEnabled+0x1a>
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <LL_ADC_StartCalibration>:
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a96:	f023 0317 	bic.w	r3, r3, #23
 8004a9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_IsCalibrationOnGoing>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac0:	d101      	bne.n	8004ac6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b088      	sub	sp, #32
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_ADCEx_Calibration_Start+0x1e>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e0b9      	b.n	8004c64 <HAL_ADCEx_Calibration_Start+0x192>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff0b 	bl	8004914 <ADC_Disable>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ffab 	bl	8004a62 <LL_ADC_IsEnabled>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 809d 	bne.w	8004c4e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b40:	f023 0303 	bic.w	r3, r3, #3
 8004b44:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e02e      	b.n	8004baa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff98 	bl	8004a86 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b56:	e014      	b.n	8004b82 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004b64:	d30d      	bcc.n	8004b82 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6a:	f023 0312 	bic.w	r3, r3, #18
 8004b6e:	f043 0210 	orr.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e070      	b.n	8004c64 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff90 	bl	8004aac <LL_ADC_IsCalibrationOnGoing>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e2      	bne.n	8004b58 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff ff2f 	bl	80049fa <LL_ADC_GetCalibrationFactor>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b07      	cmp	r3, #7
 8004bae:	d9cd      	bls.n	8004b4c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff29 	bl	8004a16 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff01 	bl	80049d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff31 	bl	8004a3c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bda:	f7fd fe5b 	bl	8002894 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004be0:	e01c      	b.n	8004c1c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004be2:	f7fd fe57 	bl	8002894 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d915      	bls.n	8004c1c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff34 	bl	8004a62 <LL_ADC_IsEnabled>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00d      	beq.n	8004c1c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e023      	b.n	8004c64 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff ff1e 	bl	8004a62 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1da      	bne.n	8004be2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68d9      	ldr	r1, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c4c:	e005      	b.n	8004c5a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c52:	f043 0210 	orr.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce6:	4a04      	ldr	r2, [pc, #16]	@ (8004cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	60d3      	str	r3, [r2, #12]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <__NVIC_GetPriorityGrouping+0x18>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	f003 0307 	and.w	r3, r3, #7
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db0b      	blt.n	8004d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	f003 021f 	and.w	r2, r3, #31
 8004d30:	4906      	ldr	r1, [pc, #24]	@ (8004d4c <__NVIC_EnableIRQ+0x34>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2001      	movs	r0, #1
 8004d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	e000e100 	.word	0xe000e100

08004d50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	db12      	blt.n	8004d88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	490a      	ldr	r1, [pc, #40]	@ (8004d94 <__NVIC_DisableIRQ+0x44>)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2001      	movs	r0, #1
 8004d72:	fa00 f202 	lsl.w	r2, r0, r2
 8004d76:	3320      	adds	r3, #32
 8004d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d7c:	f3bf 8f4f 	dsb	sy
}
 8004d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d82:	f3bf 8f6f 	isb	sy
}
 8004d86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e100 	.word	0xe000e100

08004d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db0a      	blt.n	8004dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <__NVIC_SetPriority+0x4c>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	0112      	lsls	r2, r2, #4
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc0:	e00a      	b.n	8004dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4908      	ldr	r1, [pc, #32]	@ (8004de8 <__NVIC_SetPriority+0x50>)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3b04      	subs	r3, #4
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	761a      	strb	r2, [r3, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000e100 	.word	0xe000e100
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	bf28      	it	cs
 8004e0a:	2304      	movcs	r3, #4
 8004e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d902      	bls.n	8004e1c <NVIC_EncodePriority+0x30>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b03      	subs	r3, #3
 8004e1a:	e000      	b.n	8004e1e <NVIC_EncodePriority+0x32>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	43d9      	mvns	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	4313      	orrs	r3, r2
         );
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	@ 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff2b 	bl	8004cb4 <__NVIC_SetPriorityGrouping>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e74:	f7ff ff42 	bl	8004cfc <__NVIC_GetPriorityGrouping>
 8004e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	f7ff ffb4 	bl	8004dec <NVIC_EncodePriority>
 8004e84:	4602      	mov	r2, r0
 8004e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ff83 	bl	8004d98 <__NVIC_SetPriority>
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff35 	bl	8004d18 <__NVIC_EnableIRQ>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff43 	bl	8004d50 <__NVIC_DisableIRQ>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e08e      	b.n	8005004 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	4b47      	ldr	r3, [pc, #284]	@ (800500c <HAL_DMA_Init+0x138>)
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d80f      	bhi.n	8004f12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4b45      	ldr	r3, [pc, #276]	@ (8005010 <HAL_DMA_Init+0x13c>)
 8004efa:	4413      	add	r3, r2
 8004efc:	4a45      	ldr	r2, [pc, #276]	@ (8005014 <HAL_DMA_Init+0x140>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a42      	ldr	r2, [pc, #264]	@ (8005018 <HAL_DMA_Init+0x144>)
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f10:	e00e      	b.n	8004f30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b40      	ldr	r3, [pc, #256]	@ (800501c <HAL_DMA_Init+0x148>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	4a3d      	ldr	r2, [pc, #244]	@ (8005014 <HAL_DMA_Init+0x140>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	009a      	lsls	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005020 <HAL_DMA_Init+0x14c>)
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fb24 	bl	80055d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f90:	d102      	bne.n	8004f98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_DMA_Init+0x106>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d80c      	bhi.n	8004fda <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb4d 	bl	8005660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	e008      	b.n	8004fec <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40020407 	.word	0x40020407
 8005010:	bffdfff8 	.word	0xbffdfff8
 8005014:	cccccccd 	.word	0xcccccccd
 8005018:	40020000 	.word	0x40020000
 800501c:	bffdfbf8 	.word	0xbffdfbf8
 8005020:	40020400 	.word	0x40020400

08005024 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e07b      	b.n	800512e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	4b3a      	ldr	r3, [pc, #232]	@ (8005138 <HAL_DMA_DeInit+0x114>)
 800504e:	429a      	cmp	r2, r3
 8005050:	d80f      	bhi.n	8005072 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	4b38      	ldr	r3, [pc, #224]	@ (800513c <HAL_DMA_DeInit+0x118>)
 800505a:	4413      	add	r3, r2
 800505c:	4a38      	ldr	r2, [pc, #224]	@ (8005140 <HAL_DMA_DeInit+0x11c>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	009a      	lsls	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <HAL_DMA_DeInit+0x120>)
 800506e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005070:	e00e      	b.n	8005090 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	4b33      	ldr	r3, [pc, #204]	@ (8005148 <HAL_DMA_DeInit+0x124>)
 800507a:	4413      	add	r3, r2
 800507c:	4a30      	ldr	r2, [pc, #192]	@ (8005140 <HAL_DMA_DeInit+0x11c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	009a      	lsls	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2f      	ldr	r2, [pc, #188]	@ (800514c <HAL_DMA_DeInit+0x128>)
 800508e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509c:	f003 021c 	and.w	r2, r3, #28
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	2101      	movs	r1, #1
 80050a6:	fa01 f202 	lsl.w	r2, r1, r2
 80050aa:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa8f 	bl	80055d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050c2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00f      	beq.n	80050ec <HAL_DMA_DeInit+0xc8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d80b      	bhi.n	80050ec <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fac3 	bl	8005660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050ea:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40020407 	.word	0x40020407
 800513c:	bffdfff8 	.word	0xbffdfff8
 8005140:	cccccccd 	.word	0xcccccccd
 8005144:	40020000 	.word	0x40020000
 8005148:	bffdfbf8 	.word	0xbffdfbf8
 800514c:	40020400 	.word	0x40020400

08005150 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_DMA_Start_IT+0x20>
 800516c:	2302      	movs	r3, #2
 800516e:	e069      	b.n	8005244 <HAL_DMA_Start_IT+0xf4>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d155      	bne.n	8005230 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9d3 	bl	8005554 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 020e 	orr.w	r2, r2, #14
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e00f      	b.n	80051e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 020a 	orr.w	r2, r2, #10
 80051e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005204:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800521c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0201 	orr.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e008      	b.n	8005242 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005242:	7dfb      	ldrb	r3, [r7, #23]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e04f      	b.n	80052fe <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d008      	beq.n	800527c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e040      	b.n	80052fe <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 020e 	bic.w	r2, r2, #14
 800528a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800529a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	f003 021c 	and.w	r2, r3, #28
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f202 	lsl.w	r2, r1, r2
 80052be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d005      	beq.n	800532c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2204      	movs	r2, #4
 8005324:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	e047      	b.n	80053bc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800535a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 021c 	and.w	r2, r3, #28
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	2101      	movs	r1, #1
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005378:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800539a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
    }
  }
  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e4:	f003 031c 	and.w	r3, r3, #28
 80053e8:	2204      	movs	r2, #4
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d027      	beq.n	8005444 <HAL_DMA_IRQHandler+0x7c>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d022      	beq.n	8005444 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005420:	f003 021c 	and.w	r2, r3, #28
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	2104      	movs	r1, #4
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8081 	beq.w	800553c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005442:	e07b      	b.n	800553c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	f003 031c 	and.w	r3, r3, #28
 800544c:	2202      	movs	r2, #2
 800544e:	409a      	lsls	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03d      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d038      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 020a 	bic.w	r2, r2, #10
 800547e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b2e      	ldr	r3, [pc, #184]	@ (8005548 <HAL_DMA_IRQHandler+0x180>)
 8005490:	429a      	cmp	r2, r3
 8005492:	d909      	bls.n	80054a8 <HAL_DMA_IRQHandler+0xe0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	f003 031c 	and.w	r3, r3, #28
 800549c:	4a2b      	ldr	r2, [pc, #172]	@ (800554c <HAL_DMA_IRQHandler+0x184>)
 800549e:	2102      	movs	r1, #2
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	e008      	b.n	80054ba <HAL_DMA_IRQHandler+0xf2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	f003 031c 	and.w	r3, r3, #28
 80054b0:	4a27      	ldr	r2, [pc, #156]	@ (8005550 <HAL_DMA_IRQHandler+0x188>)
 80054b2:	2102      	movs	r1, #2
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d038      	beq.n	800553c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80054d2:	e033      	b.n	800553c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d8:	f003 031c 	and.w	r3, r3, #28
 80054dc:	2208      	movs	r2, #8
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02a      	beq.n	800553e <HAL_DMA_IRQHandler+0x176>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d025      	beq.n	800553e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 020e 	bic.w	r2, r2, #14
 8005500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005506:	f003 021c 	and.w	r2, r3, #28
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f202 	lsl.w	r2, r1, r2
 8005514:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800553c:	bf00      	nop
 800553e:	bf00      	nop
}
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40020080 	.word	0x40020080
 800554c:	40020400 	.word	0x40020400
 8005550:	40020000 	.word	0x40020000

08005554 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800556a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005582:	f003 021c 	and.w	r2, r3, #28
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2101      	movs	r1, #1
 800558c:	fa01 f202 	lsl.w	r2, r1, r2
 8005590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d108      	bne.n	80055b4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055b2:	e007      	b.n	80055c4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
	...

080055d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	4b1c      	ldr	r3, [pc, #112]	@ (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d813      	bhi.n	800560c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055f0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3b08      	subs	r3, #8
 8005600:	4a14      	ldr	r2, [pc, #80]	@ (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e011      	b.n	8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	009a      	lsls	r2, r3, #2
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005616:	4413      	add	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	3b08      	subs	r3, #8
 8005624:	4a0b      	ldr	r2, [pc, #44]	@ (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	3307      	adds	r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0a      	ldr	r2, [pc, #40]	@ (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005634:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40020407 	.word	0x40020407
 8005654:	cccccccd 	.word	0xcccccccd
 8005658:	4002081c 	.word	0x4002081c
 800565c:	40020880 	.word	0x40020880

08005660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005670:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a08      	ldr	r2, [pc, #32]	@ (80056a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005684:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b01      	subs	r3, #1
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2201      	movs	r2, #1
 8005690:	409a      	lsls	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	1000823f 	.word	0x1000823f
 80056a4:	40020940 	.word	0x40020940

080056a8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <HAL_FLASH_Program+0x80>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_FLASH_Program+0x1a>
 80056be:	2302      	movs	r3, #2
 80056c0:	e02d      	b.n	800571e <HAL_FLASH_Program+0x76>
 80056c2:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <HAL_FLASH_Program+0x80>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056c8:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <HAL_FLASH_Program+0x80>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056d2:	f000 f869 	bl	80057a8 <FLASH_WaitForLastOperation>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80056da:	7dfb      	ldrb	r3, [r7, #23]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11a      	bne.n	8005716 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80056e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ea:	68b8      	ldr	r0, [r7, #8]
 80056ec:	f000 f8be 	bl	800586c <FLASH_Program_DoubleWord>
 80056f0:	e004      	b.n	80056fc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	68b8      	ldr	r0, [r7, #8]
 80056f8:	f000 f8de 	bl	80058b8 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005700:	f000 f852 	bl	80057a8 <FLASH_WaitForLastOperation>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005708:	4b08      	ldr	r3, [pc, #32]	@ (800572c <HAL_FLASH_Program+0x84>)
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	43db      	mvns	r3, r3
 8005710:	4906      	ldr	r1, [pc, #24]	@ (800572c <HAL_FLASH_Program+0x84>)
 8005712:	4013      	ands	r3, r2
 8005714:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005716:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <HAL_FLASH_Program+0x80>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000580 	.word	0x20000580
 800572c:	58004000 	.word	0x58004000

08005730 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800573a:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <HAL_FLASH_Unlock+0x38>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da0b      	bge.n	800575a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005742:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <HAL_FLASH_Unlock+0x38>)
 8005744:	4a09      	ldr	r2, [pc, #36]	@ (800576c <HAL_FLASH_Unlock+0x3c>)
 8005746:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005748:	4b07      	ldr	r3, [pc, #28]	@ (8005768 <HAL_FLASH_Unlock+0x38>)
 800574a:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <HAL_FLASH_Unlock+0x40>)
 800574c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_FLASH_Unlock+0x38>)
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da01      	bge.n	800575a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800575a:	79fb      	ldrb	r3, [r7, #7]
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	58004000 	.word	0x58004000
 800576c:	45670123 	.word	0x45670123
 8005770:	cdef89ab 	.word	0xcdef89ab

08005774 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800577e:	4b09      	ldr	r3, [pc, #36]	@ (80057a4 <HAL_FLASH_Lock+0x30>)
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4a08      	ldr	r2, [pc, #32]	@ (80057a4 <HAL_FLASH_Lock+0x30>)
 8005784:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005788:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800578a:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <HAL_FLASH_Lock+0x30>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db01      	blt.n	8005796 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005796:	79fb      	ldrb	r3, [r7, #7]
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	58004000 	.word	0x58004000

080057a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80057b0:	f7fd f870 	bl	8002894 <HAL_GetTick>
 80057b4:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80057b6:	e009      	b.n	80057cc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80057b8:	f7fd f86c 	bl	8002894 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d801      	bhi.n	80057cc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e046      	b.n	800585a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80057cc:	4b25      	ldr	r3, [pc, #148]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d8:	d0ee      	beq.n	80057b8 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80057da:	4b22      	ldr	r3, [pc, #136]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80057f6:	4013      	ands	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005800:	d307      	bcc.n	8005812 <FLASH_WaitForLastOperation+0x6a>
 8005802:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800580c:	4915      	ldr	r1, [pc, #84]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	618b      	str	r3, [r1, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <FLASH_WaitForLastOperation+0x7e>
 800581c:	4a11      	ldr	r2, [pc, #68]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005824:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00e      	beq.n	800584a <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800582c:	4a0e      	ldr	r2, [pc, #56]	@ (8005868 <FLASH_WaitForLastOperation+0xc0>)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e011      	b.n	800585a <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005836:	f7fd f82d 	bl	8002894 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d801      	bhi.n	800584a <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e007      	b.n	800585a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <FLASH_WaitForLastOperation+0xbc>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005856:	d0ee      	beq.n	8005836 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	58004000 	.word	0x58004000
 8005868:	20000580 	.word	0x20000580

0800586c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005878:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <FLASH_Program_DoubleWord+0x48>)
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	4a0d      	ldr	r2, [pc, #52]	@ (80058b4 <FLASH_Program_DoubleWord+0x48>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800588a:	f3bf 8f6f 	isb	sy
}
 800588e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	000a      	movs	r2, r1
 800589e:	2300      	movs	r3, #0
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	3104      	adds	r1, #4
 80058a4:	4613      	mov	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	58004000 	.word	0x58004000

080058b8 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80058c2:	2340      	movs	r3, #64	@ 0x40
 80058c4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80058ce:	4b18      	ldr	r3, [pc, #96]	@ (8005930 <FLASH_Program_Fast+0x78>)
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <FLASH_Program_Fast+0x78>)
 80058d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	60fb      	str	r3, [r7, #12]
  return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80058e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80058e4:	b672      	cpsid	i
}
 80058e6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	3304      	adds	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3304      	adds	r3, #4
 80058fa:	617b      	str	r3, [r7, #20]
    row_index--;
 80058fc:	7ffb      	ldrb	r3, [r7, #31]
 80058fe:	3b01      	subs	r3, #1
 8005900:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005902:	7ffb      	ldrb	r3, [r7, #31]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ef      	bne.n	80058e8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005908:	bf00      	nop
 800590a:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <FLASH_Program_Fast+0x78>)
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005916:	d0f8      	beq.n	800590a <FLASH_Program_Fast+0x52>
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005924:	bf00      	nop
 8005926:	3724      	adds	r7, #36	@ 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	58004000 	.word	0x58004000

08005934 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800593e:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_FLASHEx_Erase+0xac>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_FLASHEx_Erase+0x16>
 8005946:	2302      	movs	r3, #2
 8005948:	e046      	b.n	80059d8 <HAL_FLASHEx_Erase+0xa4>
 800594a:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <HAL_FLASHEx_Erase+0xac>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005950:	4b23      	ldr	r3, [pc, #140]	@ (80059e0 <HAL_FLASHEx_Erase+0xac>)
 8005952:	2200      	movs	r2, #0
 8005954:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005956:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800595a:	f7ff ff25 	bl	80057a8 <FLASH_WaitForLastOperation>
 800595e:	4603      	mov	r3, r0
 8005960:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d133      	bne.n	80059d0 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d108      	bne.n	8005982 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005970:	f000 f880 	bl	8005a74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005978:	f7ff ff16 	bl	80057a8 <FLASH_WaitForLastOperation>
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]
 8005980:	e024      	b.n	80059cc <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	e012      	b.n	80059b8 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005992:	68b8      	ldr	r0, [r7, #8]
 8005994:	f000 f87e 	bl	8005a94 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005998:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800599c:	f7ff ff04 	bl	80057a8 <FLASH_WaitForLastOperation>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	601a      	str	r2, [r3, #0]
          break;
 80059b0:	e00a      	b.n	80059c8 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d3e4      	bcc.n	8005992 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80059c8:	f000 f8c0 	bl	8005b4c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80059cc:	f000 f87a 	bl	8005ac4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <HAL_FLASHEx_Erase+0xac>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]

  return status;
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000580 	.word	0x20000580

080059e4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ec:	4b1f      	ldr	r3, [pc, #124]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_FLASHEx_Erase_IT+0x14>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e034      	b.n	8005a62 <HAL_FLASHEx_Erase_IT+0x7e>
 80059f8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059fe:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a0a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a10:	f7ff feca 	bl	80057a8 <FLASH_WaitForLastOperation>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005a1e:	4b13      	ldr	r3, [pc, #76]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e01c      	b.n	8005a60 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005a26:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4a11      	ldr	r2, [pc, #68]	@ (8005a70 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005a2c:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8005a30:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d105      	bne.n	8005a46 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005a40:	f000 f818 	bl	8005a74 <FLASH_MassErase>
 8005a44:	e00c      	b.n	8005a60 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a4c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a06      	ldr	r2, [pc, #24]	@ (8005a6c <HAL_FLASHEx_Erase_IT+0x88>)
 8005a54:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f81a 	bl	8005a94 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000580 	.word	0x20000580
 8005a70:	58004000 	.word	0x58004000

08005a74 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <FLASH_MassErase+0x1c>)
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <FLASH_MassErase+0x1c>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6153      	str	r3, [r2, #20]
#endif
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	58004000 	.word	0x58004000

08005a94 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005a9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <FLASH_PageErase+0x2c>)
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ac0 <FLASH_PageErase+0x2c>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	6153      	str	r3, [r2, #20]
#endif
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	58004000 	.word	0x58004000

08005ac4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d117      	bne.n	8005b04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005ada:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ade:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ae0:	4b19      	ldr	r3, [pc, #100]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005ae6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b16      	ldr	r3, [pc, #88]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a15      	ldr	r2, [pc, #84]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005af6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005af8:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b02:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005b04:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d117      	bne.n	8005b40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b10:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a0c      	ldr	r2, [pc, #48]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a09      	ldr	r2, [pc, #36]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b34:	4b04      	ldr	r3, [pc, #16]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a03      	ldr	r2, [pc, #12]	@ (8005b48 <FLASH_FlushCaches+0x84>)
 8005b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b3e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	58004000 	.word	0x58004000

08005b4c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <FLASH_AcknowledgePageErase+0x1c>)
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	4a04      	ldr	r2, [pc, #16]	@ (8005b68 <FLASH_AcknowledgePageErase+0x1c>)
 8005b56:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005b5a:	f023 0302 	bic.w	r3, r3, #2
 8005b5e:	6153      	str	r3, [r2, #20]
#endif
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr
 8005b68:	58004000 	.word	0x58004000

08005b6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b7a:	e140      	b.n	8005dfe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2101      	movs	r1, #1
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8132 	beq.w	8005df8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d005      	beq.n	8005bac <HAL_GPIO_Init+0x40>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d130      	bne.n	8005c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005be2:	2201      	movs	r2, #1
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	091b      	lsrs	r3, r3, #4
 8005bf8:	f003 0201 	and.w	r2, r3, #1
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d017      	beq.n	8005c4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	2203      	movs	r2, #3
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d123      	bne.n	8005c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	08da      	lsrs	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3208      	adds	r2, #8
 8005c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	220f      	movs	r2, #15
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	08da      	lsrs	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3208      	adds	r2, #8
 8005c98:	6939      	ldr	r1, [r7, #16]
 8005c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	2203      	movs	r2, #3
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 0203 	and.w	r2, r3, #3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 808c 	beq.w	8005df8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005ce0:	4a4e      	ldr	r2, [pc, #312]	@ (8005e1c <HAL_GPIO_Init+0x2b0>)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d0a:	d00d      	beq.n	8005d28 <HAL_GPIO_Init+0x1bc>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a44      	ldr	r2, [pc, #272]	@ (8005e20 <HAL_GPIO_Init+0x2b4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <HAL_GPIO_Init+0x1b8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a43      	ldr	r2, [pc, #268]	@ (8005e24 <HAL_GPIO_Init+0x2b8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_GPIO_Init+0x1b4>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e004      	b.n	8005d2a <HAL_GPIO_Init+0x1be>
 8005d20:	2307      	movs	r3, #7
 8005d22:	e002      	b.n	8005d2a <HAL_GPIO_Init+0x1be>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <HAL_GPIO_Init+0x1be>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	f002 0203 	and.w	r2, r2, #3
 8005d30:	0092      	lsls	r2, r2, #2
 8005d32:	4093      	lsls	r3, r2
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d3a:	4938      	ldr	r1, [pc, #224]	@ (8005e1c <HAL_GPIO_Init+0x2b0>)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	3302      	adds	r3, #2
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d48:	4b37      	ldr	r3, [pc, #220]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d72:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d96:	4a24      	ldr	r2, [pc, #144]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005d9c:	4b22      	ldr	r3, [pc, #136]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	43db      	mvns	r3, r3
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4013      	ands	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005dc2:	4a19      	ldr	r2, [pc, #100]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005dca:	4b17      	ldr	r3, [pc, #92]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005df0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <HAL_GPIO_Init+0x2bc>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f aeb7 	bne.w	8005b7c <HAL_GPIO_Init+0x10>
  }
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	48000400 	.word	0x48000400
 8005e24:	48000800 	.word	0x48000800
 8005e28:	58000800 	.word	0x58000800

08005e2c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005e3a:	e0af      	b.n	8005f9c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80a2 	beq.w	8005f96 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e52:	4a59      	ldr	r2, [pc, #356]	@ (8005fb8 <HAL_GPIO_DeInit+0x18c>)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	2207      	movs	r2, #7
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e7a:	d00d      	beq.n	8005e98 <HAL_GPIO_DeInit+0x6c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a4f      	ldr	r2, [pc, #316]	@ (8005fbc <HAL_GPIO_DeInit+0x190>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <HAL_GPIO_DeInit+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a4e      	ldr	r2, [pc, #312]	@ (8005fc0 <HAL_GPIO_DeInit+0x194>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_GPIO_DeInit+0x64>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e004      	b.n	8005e9a <HAL_GPIO_DeInit+0x6e>
 8005e90:	2307      	movs	r3, #7
 8005e92:	e002      	b.n	8005e9a <HAL_GPIO_DeInit+0x6e>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <HAL_GPIO_DeInit+0x6e>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	f002 0203 	and.w	r2, r2, #3
 8005ea0:	0092      	lsls	r2, r2, #2
 8005ea2:	4093      	lsls	r3, r2
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d136      	bne.n	8005f18 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005eaa:	4b46      	ldr	r3, [pc, #280]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005eac:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	4943      	ldr	r1, [pc, #268]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005ebc:	4b41      	ldr	r3, [pc, #260]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ebe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	493f      	ldr	r1, [pc, #252]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005ece:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	493b      	ldr	r1, [pc, #236]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005edc:	4b39      	ldr	r3, [pc, #228]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	4937      	ldr	r1, [pc, #220]	@ (8005fc4 <HAL_GPIO_DeInit+0x198>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	2207      	movs	r2, #7
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005efa:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb8 <HAL_GPIO_DeInit+0x18c>)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	3302      	adds	r3, #2
 8005f02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	482b      	ldr	r0, [pc, #172]	@ (8005fb8 <HAL_GPIO_DeInit+0x18c>)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	400a      	ands	r2, r1
 8005f12:	3302      	adds	r3, #2
 8005f14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	2103      	movs	r1, #3
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	08da      	lsrs	r2, r3, #3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3208      	adds	r2, #8
 8005f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	220f      	movs	r2, #15
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	08d2      	lsrs	r2, r2, #3
 8005f4c:	4019      	ands	r1, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3208      	adds	r2, #8
 8005f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	2103      	movs	r1, #3
 8005f60:	fa01 f303 	lsl.w	r3, r1, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	401a      	ands	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	2101      	movs	r1, #1
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	2103      	movs	r1, #3
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	401a      	ands	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f47f af49 	bne.w	8005e3c <HAL_GPIO_DeInit+0x10>
  }
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	48000400 	.word	0x48000400
 8005fc0:	48000800 	.word	0x48000800
 8005fc4:	58000800 	.word	0x58000800

08005fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fd8:	787b      	ldrb	r3, [r7, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fe4:	e002      	b.n	8005fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d006      	beq.n	800601c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800600e:	4a05      	ldr	r2, [pc, #20]	@ (8006024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4618      	mov	r0, r3
 8006018:	f005 f842 	bl	800b0a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58000800 	.word	0x58000800

08006028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800602c:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <HAL_PWR_EnableBkUpAccess+0x18>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a03      	ldr	r2, [pc, #12]	@ (8006040 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006036:	6013      	str	r3, [r2, #0]
}
 8006038:	bf00      	nop
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	58000400 	.word	0x58000400

08006044 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10c      	bne.n	8006070 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006056:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800605e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006062:	d10d      	bne.n	8006080 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006064:	f000 f83c 	bl	80060e0 <HAL_PWREx_DisableLowPowerRunMode>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800606e:	e015      	b.n	800609c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006070:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800607c:	f000 f822 	bl	80060c4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006080:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006092:	bf30      	wfi
 8006094:	e002      	b.n	800609c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006096:	bf40      	sev
    __WFE();
 8006098:	bf20      	wfe
    __WFE();
 800609a:	bf20      	wfe
  }
}
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	58000400 	.word	0x58000400
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80060b0:	4b03      	ldr	r3, [pc, #12]	@ (80060c0 <HAL_PWREx_GetVoltageRange+0x14>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	58000400 	.word	0x58000400

080060c4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80060c8:	4b04      	ldr	r3, [pc, #16]	@ (80060dc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a03      	ldr	r2, [pc, #12]	@ (80060dc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80060ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060d2:	6013      	str	r3, [r2, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	58000400 	.word	0x58000400

080060e0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80060e6:	4b16      	ldr	r3, [pc, #88]	@ (8006140 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80060ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060f0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80060f2:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2232      	movs	r2, #50	@ 0x32
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	4a12      	ldr	r2, [pc, #72]	@ (8006148 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0c9b      	lsrs	r3, r3, #18
 8006104:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006106:	e002      	b.n	800610e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800610e:	4b0c      	ldr	r3, [pc, #48]	@ (8006140 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611a:	d102      	bne.n	8006122 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f2      	bne.n	8006108 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006122:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800612e:	d101      	bne.n	8006134 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e000      	b.n	8006136 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	58000400 	.word	0x58000400
 8006144:	20000000 	.word	0x20000000
 8006148:	431bde83 	.word	0x431bde83

0800614c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006156:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	4a0e      	ldr	r2, [pc, #56]	@ (8006198 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	4a0c      	ldr	r2, [pc, #48]	@ (800619c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800616c:	f043 0304 	orr.w	r3, r3, #4
 8006170:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006178:	bf30      	wfi
 800617a:	e002      	b.n	8006182 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800617c:	bf40      	sev
    __WFE();
 800617e:	bf20      	wfe
    __WFE();
 8006180:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006182:	4b06      	ldr	r3, [pc, #24]	@ (800619c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	4a05      	ldr	r2, [pc, #20]	@ (800619c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	6113      	str	r3, [r2, #16]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr
 8006198:	58000400 	.word	0x58000400
 800619c:	e000ed00 	.word	0xe000ed00

080061a0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80061a4:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b0:	d101      	bne.n	80061b6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	58000400 	.word	0x58000400

080061c4 <LL_RCC_HSE_EnableTcxo>:
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061d6:	6013      	str	r3, [r2, #0]
}
 80061d8:	bf00      	nop
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <LL_RCC_HSE_DisableTcxo>:
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061f2:	6013      	str	r3, [r2, #0]
}
 80061f4:	bf00      	nop
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800620e:	d101      	bne.n	8006214 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <LL_RCC_HSE_Enable>:
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006230:	6013      	str	r3, [r2, #0]
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <LL_RCC_HSE_Disable>:
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800624c:	6013      	str	r3, [r2, #0]
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <LL_RCC_HSE_IsReady>:
{
 8006256:	b480      	push	{r7}
 8006258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006268:	d101      	bne.n	800626e <LL_RCC_HSE_IsReady+0x18>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <LL_RCC_HSE_IsReady+0x1a>
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr

08006278 <LL_RCC_HSI_Enable>:
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <LL_RCC_HSI_Disable>:
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr

080062b0 <LL_RCC_HSI_IsReady>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80062b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c2:	d101      	bne.n	80062c8 <LL_RCC_HSI_IsReady+0x18>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <LL_RCC_HSI_IsReady+0x1a>
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <LL_RCC_LSE_IsReady>:
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d101      	bne.n	8006312 <LL_RCC_LSE_IsReady+0x18>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <LL_RCC_LSE_IsReady+0x1a>
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <LL_RCC_LSI_Enable>:
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <LL_RCC_LSI_Disable>:
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <LL_RCC_LSI_IsReady>:
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d101      	bne.n	8006374 <LL_RCC_LSI_IsReady+0x18>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <LL_RCC_LSI_IsReady+0x1a>
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr

0800637e <LL_RCC_MSI_Enable>:
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6013      	str	r3, [r2, #0]
}
 8006392:	bf00      	nop
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr

0800639a <LL_RCC_MSI_Disable>:
{
 800639a:	b480      	push	{r7}
 800639c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800639e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr

080063b6 <LL_RCC_MSI_IsReady>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d101      	bne.n	80063cc <LL_RCC_MSI_IsReady+0x16>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <LL_RCC_MSI_IsReady+0x18>
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80063d6:	b480      	push	{r7}
 80063d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80063da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d101      	bne.n	80063ec <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <LL_RCC_MSI_GetRange>:
{
 80063f6:	b480      	push	{r7}
 80063f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80063fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006418:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr

08006424 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <LL_RCC_SetSysClkSource>:
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 0203 	bic.w	r2, r3, #3
 800645e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4313      	orrs	r3, r2
 8006466:	608b      	str	r3, [r1, #8]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <LL_RCC_GetSysClkSource>:
{
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 030c 	and.w	r3, r3, #12
}
 8006480:	4618      	mov	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr

08006488 <LL_RCC_SetAHBPrescaler>:
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800649a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <LL_RCC_SetAHB3Prescaler>:
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064be:	f023 020f 	bic.w	r2, r3, #15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <LL_RCC_SetAPB1Prescaler>:
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80064e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <LL_RCC_SetAPB2Prescaler>:
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4313      	orrs	r3, r2
 800651a:	608b      	str	r3, [r1, #8]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <LL_RCC_GetAHBPrescaler>:
{
 8006526:	b480      	push	{r7}
 8006528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <LL_RCC_GetAHB3Prescaler>:
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006544:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <LL_RCC_GetAPB1Prescaler>:
{
 8006556:	b480      	push	{r7}
 8006558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800655a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006564:	4618      	mov	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr

0800656c <LL_RCC_GetAPB2Prescaler>:
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006594:	6013      	str	r3, [r2, #0]
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065b0:	6013      	str	r3, [r2, #0]
}
 80065b2:	bf00      	nop
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80065ba:	b480      	push	{r7}
 80065bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80065be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065cc:	d101      	bne.n	80065d2 <LL_RCC_PLL_IsReady+0x18>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <LL_RCC_PLL_IsReady+0x1a>
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80065f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006602:	4618      	mov	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006618:	4618      	mov	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0303 	and.w	r3, r3, #3
}
 800662e:	4618      	mov	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006648:	d101      	bne.n	800664e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800665c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006660:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666c:	d101      	bne.n	8006672 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800668e:	d101      	bne.n	8006694 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800669e:	b480      	push	{r7}
 80066a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80066a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066b0:	d101      	bne.n	80066b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e38b      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066d2:	f7ff fece 	bl	8006472 <LL_RCC_GetSysClkSource>
 80066d6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d8:	f7ff ffa2 	bl	8006620 <LL_RCC_PLL_GetMainSource>
 80066dc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80c9 	beq.w	800687e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_OscConfig+0x3e>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d17b      	bne.n	80067f0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d178      	bne.n	80067f0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066fe:	f7ff fe5a 	bl	80063b6 <LL_RCC_MSI_IsReady>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_OscConfig+0x54>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e36a      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_RCC_OscConfig+0x72>
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006730:	e006      	b.n	8006740 <HAL_RCC_OscConfig+0x80>
 8006732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006740:	4293      	cmp	r3, r2
 8006742:	d222      	bcs.n	800678a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fd51 	bl	80071f0 <RCC_SetFlashLatencyFromMSIRange>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e348      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006762:	f043 0308 	orr.w	r3, r3, #8
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fe4e 	bl	8006424 <LL_RCC_MSI_SetCalibTrimming>
 8006788:	e021      	b.n	80067ce <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006794:	f043 0308 	orr.w	r3, r3, #8
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fe35 	bl	8006424 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd16 	bl	80071f0 <RCC_SetFlashLatencyFromMSIRange>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e30d      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067ce:	f000 fcd7 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4aa1      	ldr	r2, [pc, #644]	@ (8006a5c <HAL_RCC_OscConfig+0x39c>)
 80067d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006a60 <HAL_RCC_OscConfig+0x3a0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fc f84f 	bl	8002880 <HAL_InitTick>
 80067e2:	4603      	mov	r3, r0
 80067e4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d047      	beq.n	800687c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	e2fc      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02c      	beq.n	8006852 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067f8:	f7ff fdc1 	bl	800637e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067fc:	f7fc f84a 	bl	8002894 <HAL_GetTick>
 8006800:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006804:	f7fc f846 	bl	8002894 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e2e9      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006816:	f7ff fdce 	bl	80063b6 <LL_RCC_MSI_IsReady>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f1      	beq.n	8006804 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800682a:	f043 0308 	orr.w	r3, r3, #8
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fdea 	bl	8006424 <LL_RCC_MSI_SetCalibTrimming>
 8006850:	e015      	b.n	800687e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006852:	f7ff fda2 	bl	800639a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006856:	f7fc f81d 	bl	8002894 <HAL_GetTick>
 800685a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800685e:	f7fc f819 	bl	8002894 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e2bc      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006870:	f7ff fda1 	bl	80063b6 <LL_RCC_MSI_IsReady>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f1      	bne.n	800685e <HAL_RCC_OscConfig+0x19e>
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800687c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d05f      	beq.n	800694a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d005      	beq.n	800689c <HAL_RCC_OscConfig+0x1dc>
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	2b0c      	cmp	r3, #12
 8006894:	d10d      	bne.n	80068b2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d10a      	bne.n	80068b2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800689c:	f7ff fcdb 	bl	8006256 <LL_RCC_HSE_IsReady>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d050      	beq.n	8006948 <HAL_RCC_OscConfig+0x288>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d14c      	bne.n	8006948 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e29b      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80068b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d0:	d102      	bne.n	80068d8 <HAL_RCC_OscConfig+0x218>
 80068d2:	f7ff fca4 	bl	800621e <LL_RCC_HSE_Enable>
 80068d6:	e00d      	b.n	80068f4 <HAL_RCC_OscConfig+0x234>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80068e0:	d104      	bne.n	80068ec <HAL_RCC_OscConfig+0x22c>
 80068e2:	f7ff fc6f 	bl	80061c4 <LL_RCC_HSE_EnableTcxo>
 80068e6:	f7ff fc9a 	bl	800621e <LL_RCC_HSE_Enable>
 80068ea:	e003      	b.n	80068f4 <HAL_RCC_OscConfig+0x234>
 80068ec:	f7ff fca5 	bl	800623a <LL_RCC_HSE_Disable>
 80068f0:	f7ff fc76 	bl	80061e0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d012      	beq.n	8006922 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fb ffca 	bl	8002894 <HAL_GetTick>
 8006900:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006904:	f7fb ffc6 	bl	8002894 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	@ 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e269      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006916:	f7ff fc9e 	bl	8006256 <LL_RCC_HSE_IsReady>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f1      	beq.n	8006904 <HAL_RCC_OscConfig+0x244>
 8006920:	e013      	b.n	800694a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fb ffb7 	bl	8002894 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692a:	f7fb ffb3 	bl	8002894 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b64      	cmp	r3, #100	@ 0x64
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e256      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800693c:	f7ff fc8b 	bl	8006256 <LL_RCC_HSE_IsReady>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f1      	bne.n	800692a <HAL_RCC_OscConfig+0x26a>
 8006946:	e000      	b.n	800694a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006948:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04b      	beq.n	80069ee <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d005      	beq.n	8006968 <HAL_RCC_OscConfig+0x2a8>
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d113      	bne.n	800698a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d110      	bne.n	800698a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006968:	f7ff fca2 	bl	80062b0 <LL_RCC_HSI_IsReady>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_RCC_OscConfig+0x2be>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e235      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fca5 	bl	80062d2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006988:	e031      	b.n	80069ee <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d019      	beq.n	80069c6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006992:	f7ff fc71 	bl	8006278 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006996:	f7fb ff7d 	bl	8002894 <HAL_GetTick>
 800699a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699e:	f7fb ff79 	bl	8002894 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e21c      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80069b0:	f7ff fc7e 	bl	80062b0 <LL_RCC_HSI_IsReady>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f1      	beq.n	800699e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fc87 	bl	80062d2 <LL_RCC_HSI_SetCalibTrimming>
 80069c4:	e013      	b.n	80069ee <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c6:	f7ff fc65 	bl	8006294 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ca:	f7fb ff63 	bl	8002894 <HAL_GetTick>
 80069ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d2:	f7fb ff5f 	bl	8002894 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e202      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80069e4:	f7ff fc64 	bl	80062b0 <LL_RCC_HSI_IsReady>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f1      	bne.n	80069d2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d06f      	beq.n	8006ada <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d057      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a0a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d036      	beq.n	8006a88 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d006      	beq.n	8006a32 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e1db      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d018      	beq.n	8006a6e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006a3c:	f7ff fc7e 	bl	800633c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a40:	f7fb ff28 	bl	8002894 <HAL_GetTick>
 8006a44:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006a46:	e00d      	b.n	8006a64 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a48:	f7fb ff24 	bl	8002894 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b11      	cmp	r3, #17
 8006a54:	d906      	bls.n	8006a64 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e1c7      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000
 8006a60:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006a64:	f7ff fc7a 	bl	800635c <LL_RCC_LSI_IsReady>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1ec      	bne.n	8006a48 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a76:	f023 0210 	bic.w	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a88:	f7ff fc48 	bl	800631c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fb ff02 	bl	8002894 <HAL_GetTick>
 8006a90:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a94:	f7fb fefe 	bl	8002894 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b11      	cmp	r3, #17
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e1a1      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006aa6:	f7ff fc59 	bl	800635c <LL_RCC_LSI_IsReady>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0f1      	beq.n	8006a94 <HAL_RCC_OscConfig+0x3d4>
 8006ab0:	e013      	b.n	8006ada <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab2:	f7ff fc43 	bl	800633c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab6:	f7fb feed 	bl	8002894 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fb fee9 	bl	8002894 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b11      	cmp	r3, #17
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e18c      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006ad0:	f7ff fc44 	bl	800635c <LL_RCC_LSI_IsReady>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f1      	bne.n	8006abe <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80d8 	beq.w	8006c98 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006ae8:	f7ff fb5a 	bl	80061a0 <LL_PWR_IsEnabledBkUpAccess>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d113      	bne.n	8006b1a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006af2:	f7ff fa99 	bl	8006028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006af6:	f7fb fecd 	bl	8002894 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006afe:	f7fb fec9 	bl	8002894 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e16c      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006b10:	f7ff fb46 	bl	80061a0 <LL_PWR_IsEnabledBkUpAccess>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f1      	beq.n	8006afe <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d07b      	beq.n	8006c1a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	2b85      	cmp	r3, #133	@ 0x85
 8006b28:	d003      	beq.n	8006b32 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d109      	bne.n	8006b46 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b3e:	f043 0304 	orr.w	r3, r3, #4
 8006b42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fb fea5 	bl	8002894 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b60:	e00a      	b.n	8006b78 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b62:	f7fb fe97 	bl	8002894 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e138      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b78:	f7ff fbbf 	bl	80062fa <LL_RCC_LSE_IsReady>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ef      	beq.n	8006b62 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b81      	cmp	r3, #129	@ 0x81
 8006b88:	d003      	beq.n	8006b92 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b85      	cmp	r3, #133	@ 0x85
 8006b90:	d121      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b92:	f7fb fe7f 	bl	8002894 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006bac:	e00a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bae:	f7fb fe71 	bl	8002894 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e112      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0ec      	beq.n	8006bae <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006bd4:	e060      	b.n	8006c98 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd6:	f7fb fe5d 	bl	8002894 <HAL_GetTick>
 8006bda:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fb fe4f 	bl	8002894 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e0f0      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ec      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x532>
 8006c18:	e03e      	b.n	8006c98 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1a:	f7fb fe3b 	bl	8002894 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fb fe2d 	bl	8002894 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e0ce      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ec      	bne.n	8006c36 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fb fe1a 	bl	8002894 <HAL_GetTick>
 8006c60:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c76:	e00a      	b.n	8006c8e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c78:	f7fb fe0c 	bl	8002894 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e0ad      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c8e:	f7ff fb34 	bl	80062fa <LL_RCC_LSE_IsReady>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ef      	bne.n	8006c78 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80a3 	beq.w	8006de8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b0c      	cmp	r3, #12
 8006ca6:	d076      	beq.n	8006d96 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d14b      	bne.n	8006d48 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb0:	f7ff fc75 	bl	800659e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb fdee 	bl	8002894 <HAL_GetTick>
 8006cb8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fb fdea 	bl	8002894 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b0a      	cmp	r3, #10
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e08d      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006cce:	f7ff fc74 	bl	80065ba <LL_RCC_PLL_IsReady>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f1      	bne.n	8006cbc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	4b45      	ldr	r3, [pc, #276]	@ (8006df4 <HAL_RCC_OscConfig+0x734>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cea:	4311      	orrs	r1, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006cf0:	0212      	lsls	r2, r2, #8
 8006cf2:	4311      	orrs	r1, r2
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cf8:	4311      	orrs	r1, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006cfe:	4311      	orrs	r1, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006d04:	430a      	orrs	r2, r1
 8006d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d0e:	f7ff fc38 	bl	8006582 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d20:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d22:	f7fb fdb7 	bl	8002894 <HAL_GetTick>
 8006d26:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2a:	f7fb fdb3 	bl	8002894 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b0a      	cmp	r3, #10
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e056      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006d3c:	f7ff fc3d 	bl	80065ba <LL_RCC_PLL_IsReady>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f1      	beq.n	8006d2a <HAL_RCC_OscConfig+0x66a>
 8006d46:	e04f      	b.n	8006de8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d48:	f7ff fc29 	bl	800659e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d66:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8006d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fb fd90 	bl	8002894 <HAL_GetTick>
 8006d74:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d78:	f7fb fd8c 	bl	8002894 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b0a      	cmp	r3, #10
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e02f      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006d8a:	f7ff fc16 	bl	80065ba <LL_RCC_PLL_IsReady>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f1      	bne.n	8006d78 <HAL_RCC_OscConfig+0x6b8>
 8006d94:	e028      	b.n	8006de8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e023      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	f003 0203 	and.w	r2, r3, #3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d115      	bne.n	8006de4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d10e      	bne.n	8006de4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d106      	bne.n	8006de4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	11c1808c 	.word	0x11c1808c

08006df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e10f      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e0c:	4b89      	ldr	r3, [pc, #548]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d91b      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1a:	4b86      	ldr	r3, [pc, #536]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 0207 	bic.w	r2, r3, #7
 8006e22:	4984      	ldr	r1, [pc, #528]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2a:	f7fb fd33 	bl	8002894 <HAL_GetTick>
 8006e2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e32:	f7fb fd2f 	bl	8002894 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0f3      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e44:	4b7b      	ldr	r3, [pc, #492]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d1ef      	bne.n	8006e32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fb10 	bl	8006488 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e68:	f7fb fd14 	bl	8002894 <HAL_GetTick>
 8006e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e70:	f7fb fd10 	bl	8002894 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0d4      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e82:	f7ff fbd8 	bl	8006636 <LL_RCC_IsActiveFlag_HPRE>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f1      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d016      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fb06 	bl	80064ae <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ea2:	f7fb fcf7 	bl	8002894 <HAL_GetTick>
 8006ea6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006eaa:	f7fb fcf3 	bl	8002894 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0b7      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ebc:	f7ff fbcc 	bl	8006658 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f1      	beq.n	8006eaa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff faff 	bl	80064da <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006edc:	f7fb fcda 	bl	8002894 <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ee4:	f7fb fcd6 	bl	8002894 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e09a      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ef6:	f7ff fbc1 	bl	800667c <LL_RCC_IsActiveFlag_PPRE1>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0f1      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d017      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff faf4 	bl	8006500 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f18:	f7fb fcbc 	bl	8002894 <HAL_GetTick>
 8006f1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f20:	f7fb fcb8 	bl	8002894 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e07c      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f32:	f7ff fbb4 	bl	800669e <LL_RCC_IsActiveFlag_PPRE2>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f1      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d043      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006f50:	f7ff f981 	bl	8006256 <LL_RCC_HSE_IsReady>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d11e      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e066      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d106      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006f66:	f7ff fb28 	bl	80065ba <LL_RCC_PLL_IsReady>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d113      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e05b      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006f7c:	f7ff fa1b 	bl	80063b6 <LL_RCC_MSI_IsReady>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e050      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006f8a:	f7ff f991 	bl	80062b0 <LL_RCC_HSI_IsReady>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e049      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fa55 	bl	800644c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa2:	f7fb fc77 	bl	8002894 <HAL_GetTick>
 8006fa6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa8:	e00a      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006faa:	f7fb fc73 	bl	8002894 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e035      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc0:	f7ff fa57 	bl	8006472 <LL_RCC_GetSysClkSource>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1ec      	bne.n	8006faa <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b18      	ldr	r3, [pc, #96]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d21b      	bcs.n	8007016 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b15      	ldr	r3, [pc, #84]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 0207 	bic.w	r2, r3, #7
 8006fe6:	4913      	ldr	r1, [pc, #76]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fee:	f7fb fc51 	bl	8002894 <HAL_GetTick>
 8006ff2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ff6:	f7fb fc4d 	bl	8002894 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e011      	b.n	800702c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_ClockConfig+0x23c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d1ef      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007016:	f000 f8b3 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 800701a:	4603      	mov	r3, r0
 800701c:	4a06      	ldr	r2, [pc, #24]	@ (8007038 <HAL_RCC_ClockConfig+0x240>)
 800701e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <HAL_RCC_ClockConfig+0x244>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4618      	mov	r0, r3
 8007026:	f7fb fc2b 	bl	8002880 <HAL_InitTick>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	58004000 	.word	0x58004000
 8007038:	20000000 	.word	0x20000000
 800703c:	20000004 	.word	0x20000004

08007040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800704e:	f7ff fa10 	bl	8006472 <LL_RCC_GetSysClkSource>
 8007052:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007054:	f7ff fae4 	bl	8006620 <LL_RCC_PLL_GetMainSource>
 8007058:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x2c>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b0c      	cmp	r3, #12
 8007064:	d139      	bne.n	80070da <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d136      	bne.n	80070da <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800706c:	f7ff f9b3 	bl	80063d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d115      	bne.n	80070a2 <HAL_RCC_GetSysClockFreq+0x62>
 8007076:	f7ff f9ae 	bl	80063d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d106      	bne.n	800708e <HAL_RCC_GetSysClockFreq+0x4e>
 8007080:	f7ff f9b9 	bl	80063f6 <LL_RCC_MSI_GetRange>
 8007084:	4603      	mov	r3, r0
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e005      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x5a>
 800708e:	f7ff f9bd 	bl	800640c <LL_RCC_MSI_GetRangeAfterStandby>
 8007092:	4603      	mov	r3, r0
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	4a36      	ldr	r2, [pc, #216]	@ (8007174 <HAL_RCC_GetSysClockFreq+0x134>)
 800709c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a0:	e014      	b.n	80070cc <HAL_RCC_GetSysClockFreq+0x8c>
 80070a2:	f7ff f998 	bl	80063d6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d106      	bne.n	80070ba <HAL_RCC_GetSysClockFreq+0x7a>
 80070ac:	f7ff f9a3 	bl	80063f6 <LL_RCC_MSI_GetRange>
 80070b0:	4603      	mov	r3, r0
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	e005      	b.n	80070c6 <HAL_RCC_GetSysClockFreq+0x86>
 80070ba:	f7ff f9a7 	bl	800640c <LL_RCC_MSI_GetRangeAfterStandby>
 80070be:	4603      	mov	r3, r0
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007174 <HAL_RCC_GetSysClockFreq+0x134>)
 80070c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070cc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d115      	bne.n	8007100 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070d8:	e012      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d102      	bne.n	80070e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070e0:	4b25      	ldr	r3, [pc, #148]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x138>)
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e00c      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d109      	bne.n	8007100 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070ec:	f7ff f886 	bl	80061fc <LL_RCC_HSE_IsEnabledDiv2>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d102      	bne.n	80070fc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070f6:	4b20      	ldr	r3, [pc, #128]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x138>)
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e001      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070fc:	4b1f      	ldr	r3, [pc, #124]	@ (800717c <HAL_RCC_GetSysClockFreq+0x13c>)
 80070fe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007100:	f7ff f9b7 	bl	8006472 <LL_RCC_GetSysClkSource>
 8007104:	4603      	mov	r3, r0
 8007106:	2b0c      	cmp	r3, #12
 8007108:	d12f      	bne.n	800716a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800710a:	f7ff fa89 	bl	8006620 <LL_RCC_PLL_GetMainSource>
 800710e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d003      	beq.n	800711e <HAL_RCC_GetSysClockFreq+0xde>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d003      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0xe4>
 800711c:	e00d      	b.n	800713a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800711e:	4b16      	ldr	r3, [pc, #88]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x138>)
 8007120:	60fb      	str	r3, [r7, #12]
        break;
 8007122:	e00d      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007124:	f7ff f86a 	bl	80061fc <LL_RCC_HSE_IsEnabledDiv2>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d102      	bne.n	8007134 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800712e:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x138>)
 8007130:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007132:	e005      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007134:	4b11      	ldr	r3, [pc, #68]	@ (800717c <HAL_RCC_GetSysClockFreq+0x13c>)
 8007136:	60fb      	str	r3, [r7, #12]
        break;
 8007138:	e002      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	60fb      	str	r3, [r7, #12]
        break;
 800713e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007140:	f7ff fa4c 	bl	80065dc <LL_RCC_PLL_GetN>
 8007144:	4602      	mov	r2, r0
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	fb03 f402 	mul.w	r4, r3, r2
 800714c:	f7ff fa5d 	bl	800660a <LL_RCC_PLL_GetDivider>
 8007150:	4603      	mov	r3, r0
 8007152:	091b      	lsrs	r3, r3, #4
 8007154:	3301      	adds	r3, #1
 8007156:	fbb4 f4f3 	udiv	r4, r4, r3
 800715a:	f7ff fa4b 	bl	80065f4 <LL_RCC_PLL_GetR>
 800715e:	4603      	mov	r3, r0
 8007160:	0f5b      	lsrs	r3, r3, #29
 8007162:	3301      	adds	r3, #1
 8007164:	fbb4 f3f3 	udiv	r3, r4, r3
 8007168:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}
 8007174:	0802028c 	.word	0x0802028c
 8007178:	00f42400 	.word	0x00f42400
 800717c:	01e84800 	.word	0x01e84800

08007180 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007180:	b598      	push	{r3, r4, r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007184:	f7ff ff5c 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 8007188:	4604      	mov	r4, r0
 800718a:	f7ff f9cc 	bl	8006526 <LL_RCC_GetAHBPrescaler>
 800718e:	4603      	mov	r3, r0
 8007190:	091b      	lsrs	r3, r3, #4
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a03      	ldr	r2, [pc, #12]	@ (80071a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd98      	pop	{r3, r4, r7, pc}
 80071a4:	0802022c 	.word	0x0802022c

080071a8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a8:	b598      	push	{r3, r4, r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80071ac:	f7ff ffe8 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 80071b0:	4604      	mov	r4, r0
 80071b2:	f7ff f9d0 	bl	8006556 <LL_RCC_GetAPB1Prescaler>
 80071b6:	4603      	mov	r3, r0
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	4a03      	ldr	r2, [pc, #12]	@ (80071c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd98      	pop	{r3, r4, r7, pc}
 80071c8:	0802026c 	.word	0x0802026c

080071cc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071cc:	b598      	push	{r3, r4, r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80071d0:	f7ff ffd6 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 80071d4:	4604      	mov	r4, r0
 80071d6:	f7ff f9c9 	bl	800656c <LL_RCC_GetAPB2Prescaler>
 80071da:	4603      	mov	r3, r0
 80071dc:	0adb      	lsrs	r3, r3, #11
 80071de:	4a03      	ldr	r2, [pc, #12]	@ (80071ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80071e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	bd98      	pop	{r3, r4, r7, pc}
 80071ec:	0802026c 	.word	0x0802026c

080071f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	091b      	lsrs	r3, r3, #4
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	4a10      	ldr	r2, [pc, #64]	@ (8007244 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007206:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007208:	f7ff f998 	bl	800653c <LL_RCC_GetAHB3Prescaler>
 800720c:	4603      	mov	r3, r0
 800720e:	091b      	lsrs	r3, r3, #4
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	4a0c      	ldr	r2, [pc, #48]	@ (8007248 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4a09      	ldr	r2, [pc, #36]	@ (800724c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	0c9c      	lsrs	r4, r3, #18
 800722c:	f7fe ff3e 	bl	80060ac <HAL_PWREx_GetVoltageRange>
 8007230:	4603      	mov	r3, r0
 8007232:	4619      	mov	r1, r3
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f80b 	bl	8007250 <RCC_SetFlashLatency>
 800723a:	4603      	mov	r3, r0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bd90      	pop	{r4, r7, pc}
 8007244:	0802028c 	.word	0x0802028c
 8007248:	0802022c 	.word	0x0802022c
 800724c:	431bde83 	.word	0x431bde83

08007250 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	@ 0x38
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800725a:	4a3a      	ldr	r2, [pc, #232]	@ (8007344 <RCC_SetFlashLatency+0xf4>)
 800725c:	f107 0320 	add.w	r3, r7, #32
 8007260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007264:	6018      	str	r0, [r3, #0]
 8007266:	3304      	adds	r3, #4
 8007268:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800726a:	4a37      	ldr	r2, [pc, #220]	@ (8007348 <RCC_SetFlashLatency+0xf8>)
 800726c:	f107 0318 	add.w	r3, r7, #24
 8007270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007274:	6018      	str	r0, [r3, #0]
 8007276:	3304      	adds	r3, #4
 8007278:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800727a:	4a34      	ldr	r2, [pc, #208]	@ (800734c <RCC_SetFlashLatency+0xfc>)
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	ca07      	ldmia	r2, {r0, r1, r2}
 8007282:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007290:	d11b      	bne.n	80072ca <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007292:	2300      	movs	r3, #0
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30
 8007296:	e014      	b.n	80072c2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	3338      	adds	r3, #56	@ 0x38
 800729e:	443b      	add	r3, r7
 80072a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80072a4:	461a      	mov	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d807      	bhi.n	80072bc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	3338      	adds	r3, #56	@ 0x38
 80072b2:	443b      	add	r3, r7
 80072b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ba:	e021      	b.n	8007300 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	3301      	adds	r3, #1
 80072c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d9e7      	bls.n	8007298 <RCC_SetFlashLatency+0x48>
 80072c8:	e01a      	b.n	8007300 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ce:	e014      	b.n	80072fa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	3338      	adds	r3, #56	@ 0x38
 80072d6:	443b      	add	r3, r7
 80072d8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d807      	bhi.n	80072f4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	3338      	adds	r3, #56	@ 0x38
 80072ea:	443b      	add	r3, r7
 80072ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f2:	e005      	b.n	8007300 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	3301      	adds	r3, #1
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d9e7      	bls.n	80072d0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <RCC_SetFlashLatency+0x100>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f023 0207 	bic.w	r2, r3, #7
 8007308:	4911      	ldr	r1, [pc, #68]	@ (8007350 <RCC_SetFlashLatency+0x100>)
 800730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730c:	4313      	orrs	r3, r2
 800730e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007310:	f7fb fac0 	bl	8002894 <HAL_GetTick>
 8007314:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007316:	e008      	b.n	800732a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007318:	f7fb fabc 	bl	8002894 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e007      	b.n	800733a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800732a:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <RCC_SetFlashLatency+0x100>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007334:	429a      	cmp	r2, r3
 8007336:	d1ef      	bne.n	8007318 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3738      	adds	r7, #56	@ 0x38
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	0801f900 	.word	0x0801f900
 8007348:	0801f908 	.word	0x0801f908
 800734c:	0801f910 	.word	0x0801f910
 8007350:	58004000 	.word	0x58004000

08007354 <LL_RCC_LSE_IsReady>:
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d101      	bne.n	800736c <LL_RCC_LSE_IsReady+0x18>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <LL_RCC_LSE_IsReady+0x1a>
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr

08007376 <LL_RCC_SetUSARTClockSource>:
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800737e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007382:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	43db      	mvns	r3, r3
 800738c:	401a      	ands	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <LL_RCC_SetI2SClockSource>:
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80073ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <LL_RCC_SetLPUARTClockSource>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <LL_RCC_SetI2CClockSource>:
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007406:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007412:	43db      	mvns	r3, r3
 8007414:	401a      	ands	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800741e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr

08007432 <LL_RCC_SetLPTIMClockSource>:
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800743a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800743e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	43db      	mvns	r3, r3
 800744a:	401a      	ands	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <LL_RCC_SetRNGClockSource>:
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800746c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007478:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr

0800748e <LL_RCC_SetADCClockSource>:
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <LL_RCC_SetRTCClockSource>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80074c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <LL_RCC_GetRTCClockSource>:
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80074e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <LL_RCC_ForceBackupDomainReset>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800750a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800750e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007512:	bf00      	nop
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr

0800751a <LL_RCC_ReleaseBackupDomainReset>:
{
 800751a:	b480      	push	{r7}
 800751c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800751e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800752a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800752e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007532:	bf00      	nop
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
	...

0800753c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007548:	2300      	movs	r3, #0
 800754a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800754c:	2300      	movs	r3, #0
 800754e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d058      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800755c:	f7fe fd64 	bl	8006028 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007560:	f7fb f998 	bl	8002894 <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007566:	e009      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007568:	f7fb f994 	bl	8002894 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d902      	bls.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	74fb      	strb	r3, [r7, #19]
        break;
 800757a:	e006      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800757c:	4b7b      	ldr	r3, [pc, #492]	@ (800776c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007588:	d1ee      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800758a:	7cfb      	ldrb	r3, [r7, #19]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d13c      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007590:	f7ff ffa7 	bl	80074e2 <LL_RCC_GetRTCClockSource>
 8007594:	4602      	mov	r2, r0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	429a      	cmp	r2, r3
 800759c:	d00f      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800759e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075ac:	f7ff ffa5 	bl	80074fa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075b0:	f7ff ffb3 	bl	800751a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d014      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fb f964 	bl	8002894 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80075ce:	e00b      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fb f960 	bl	8002894 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d902      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	74fb      	strb	r3, [r7, #19]
            break;
 80075e6:	e004      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80075e8:	f7ff feb4 	bl	8007354 <LL_RCC_LSE_IsReady>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d1ee      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80075f2:	7cfb      	ldrb	r3, [r7, #19]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff ff5b 	bl	80074b8 <LL_RCC_SetRTCClockSource>
 8007602:	e004      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007604:	7cfb      	ldrb	r3, [r7, #19]
 8007606:	74bb      	strb	r3, [r7, #18]
 8007608:	e001      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760a:	7cfb      	ldrb	r3, [r7, #19]
 800760c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fea9 	bl	8007376 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d004      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fe9e 	bl	8007376 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fec0 	bl	80073d0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fee6 	bl	8007432 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fedb 	bl	8007432 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fed0 	bl	8007432 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fea9 	bl	80073fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fe9e 	bl	80073fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fe93 	bl	80073fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d011      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fe5e 	bl	80073a6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f2:	d107      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80076f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d010      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fea5 	bl	8007464 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	2b00      	cmp	r3, #0
 8007720:	d107      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800772c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007730:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d011      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fea3 	bl	800748e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007750:	d107      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800775c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007760:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007762:	7cbb      	ldrb	r3, [r7, #18]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58000400 	.word	0x58000400

08007770 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d068      	beq.n	8007854 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fa fadc 	bl	8001d54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077a6:	22ca      	movs	r2, #202	@ 0xca
 80077a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80077aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077ac:	2253      	movs	r2, #83	@ 0x53
 80077ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa0f 	bl	8007bd4 <RTC_EnterInitMode>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d13f      	bne.n	8007840 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80077c0:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	4a26      	ldr	r2, [pc, #152]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077c6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80077ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ce:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80077d0:	4b23      	ldr	r3, [pc, #140]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6859      	ldr	r1, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	4319      	orrs	r1, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	430b      	orrs	r3, r1
 80077e4:	491e      	ldr	r1, [pc, #120]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	491a      	ldr	r1, [pc, #104]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80077fa:	4b19      	ldr	r3, [pc, #100]	@ (8007860 <HAL_RTC_Init+0xf0>)
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780a:	430b      	orrs	r3, r1
 800780c:	4914      	ldr	r1, [pc, #80]	@ (8007860 <HAL_RTC_Init+0xf0>)
 800780e:	4313      	orrs	r3, r2
 8007810:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa12 	bl	8007c3c <RTC_ExitInitMode>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10e      	bne.n	8007840 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007822:	4b0f      	ldr	r3, [pc, #60]	@ (8007860 <HAL_RTC_Init+0xf0>)
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a19      	ldr	r1, [r3, #32]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4319      	orrs	r1, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	430b      	orrs	r3, r1
 800783a:	4909      	ldr	r1, [pc, #36]	@ (8007860 <HAL_RTC_Init+0xf0>)
 800783c:	4313      	orrs	r3, r2
 800783e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007840:	4b07      	ldr	r3, [pc, #28]	@ (8007860 <HAL_RTC_Init+0xf0>)
 8007842:	22ff      	movs	r2, #255	@ 0xff
 8007844:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40002800 	.word	0x40002800

08007864 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007864:	b590      	push	{r4, r7, lr}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_RTC_SetAlarm_IT+0x1e>
 800787e:	2302      	movs	r3, #2
 8007880:	e0f3      	b.n	8007a6a <HAL_RTC_SetAlarm_IT+0x206>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007892:	4b78      	ldr	r3, [pc, #480]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a2:	d06a      	beq.n	800797a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d13a      	bne.n	8007920 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80078aa:	4b72      	ldr	r3, [pc, #456]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f9f5 	bl	8007cb8 <RTC_ByteToBcd2>
 80078ce:	4603      	mov	r3, r0
 80078d0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f9ee 	bl	8007cb8 <RTC_ByteToBcd2>
 80078dc:	4603      	mov	r3, r0
 80078de:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80078e0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f9e6 	bl	8007cb8 <RTC_ByteToBcd2>
 80078ec:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80078ee:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	78db      	ldrb	r3, [r3, #3]
 80078f6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80078f8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f9d8 	bl	8007cb8 <RTC_ByteToBcd2>
 8007908:	4603      	mov	r3, r0
 800790a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800790c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007914:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e02c      	b.n	800797a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007928:	d00d      	beq.n	8007946 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007932:	d008      	beq.n	8007946 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007934:	4b4f      	ldr	r3, [pc, #316]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007952:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007958:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	78db      	ldrb	r3, [r3, #3]
 800795e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007960:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007968:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800796a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007970:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800797a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 800797c:	22ca      	movs	r2, #202	@ 0xca
 800797e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007980:	4b3c      	ldr	r3, [pc, #240]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007982:	2253      	movs	r2, #83	@ 0x53
 8007984:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798e:	d12c      	bne.n	80079ea <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007990:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	4a37      	ldr	r2, [pc, #220]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007996:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800799a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800799c:	4b35      	ldr	r3, [pc, #212]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 800799e:	2201      	movs	r2, #1
 80079a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a8:	d107      	bne.n	80079ba <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	4930      	ldr	r1, [pc, #192]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	644b      	str	r3, [r1, #68]	@ 0x44
 80079b8:	e006      	b.n	80079c8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80079ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80079c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80079c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	f043 0201 	orr.w	r2, r3, #1
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80079dc:	4b25      	ldr	r3, [pc, #148]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	4a24      	ldr	r2, [pc, #144]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079e2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80079e6:	6193      	str	r3, [r2, #24]
 80079e8:	e02b      	b.n	8007a42 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80079ea:	4b22      	ldr	r3, [pc, #136]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	4a21      	ldr	r2, [pc, #132]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079f0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80079f4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80079f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 80079f8:	2202      	movs	r2, #2
 80079fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a02:	d107      	bne.n	8007a14 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	4919      	ldr	r1, [pc, #100]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007a12:	e006      	b.n	8007a22 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007a14:	4a17      	ldr	r2, [pc, #92]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007a1a:	4a16      	ldr	r2, [pc, #88]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007a22:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	f043 0202 	orr.w	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007a36:	4b0f      	ldr	r3, [pc, #60]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a3c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007a40:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <HAL_RTC_SetAlarm_IT+0x214>)
 8007a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a48:	4a0b      	ldr	r2, [pc, #44]	@ (8007a78 <HAL_RTC_SetAlarm_IT+0x214>)
 8007a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a4e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a52:	4b08      	ldr	r3, [pc, #32]	@ (8007a74 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a54:	22ff      	movs	r2, #255	@ 0xff
 8007a56:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd90      	pop	{r4, r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40002800 	.word	0x40002800
 8007a78:	58000800 	.word	0x58000800

08007a7c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_RTC_DeactivateAlarm+0x18>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e048      	b.n	8007b26 <HAL_RTC_DeactivateAlarm+0xaa>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aa4:	4b22      	ldr	r3, [pc, #136]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aa6:	22ca      	movs	r2, #202	@ 0xca
 8007aa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007aaa:	4b21      	ldr	r3, [pc, #132]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aac:	2253      	movs	r2, #83	@ 0x53
 8007aae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab6:	d115      	bne.n	8007ae4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007abe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007ac2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac8:	4a19      	ldr	r2, [pc, #100]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ace:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad4:	f023 0201 	bic.w	r2, r3, #1
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007adc:	4b14      	ldr	r3, [pc, #80]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ae2:	e014      	b.n	8007b0e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007ae4:	4b12      	ldr	r3, [pc, #72]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4a11      	ldr	r2, [pc, #68]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aea:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007aee:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007af0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af4:	4a0e      	ldr	r2, [pc, #56]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007af6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007afa:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	f023 0202 	bic.w	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007b08:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0e:	4b08      	ldr	r3, [pc, #32]	@ (8007b30 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007b10:	22ff      	movs	r2, #255	@ 0xff
 8007b12:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr
 8007b30:	40002800 	.word	0x40002800

08007b34 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007b3c:	4b11      	ldr	r3, [pc, #68]	@ (8007b84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b44:	4013      	ands	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fb f988 	bl	8002e6e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007b68:	4b06      	ldr	r3, [pc, #24]	@ (8007b84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f96e 	bl	8007e50 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40002800 	.word	0x40002800

08007b88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007b90:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4a0e      	ldr	r2, [pc, #56]	@ (8007bd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007b9c:	f7fa fe7a 	bl	8002894 <HAL_GetTick>
 8007ba0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007ba2:	e009      	b.n	8007bb8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ba4:	f7fa fe76 	bl	8002894 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e006      	b.n	8007bc6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007bb8:	4b05      	ldr	r3, [pc, #20]	@ (8007bd0 <HAL_RTC_WaitForSynchro+0x48>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0ef      	beq.n	8007ba4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40002800 	.word	0x40002800

08007bd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007be0:	4b15      	ldr	r3, [pc, #84]	@ (8007c38 <RTC_EnterInitMode+0x64>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d120      	bne.n	8007c2e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007bec:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <RTC_EnterInitMode+0x64>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	@ (8007c38 <RTC_EnterInitMode+0x64>)
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007bf8:	f7fa fe4c 	bl	8002894 <HAL_GetTick>
 8007bfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007bfe:	e00d      	b.n	8007c1c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c00:	f7fa fe48 	bl	8002894 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c0e:	d905      	bls.n	8007c1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2203      	movs	r2, #3
 8007c18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c1c:	4b06      	ldr	r3, [pc, #24]	@ (8007c38 <RTC_EnterInitMode+0x64>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <RTC_EnterInitMode+0x5a>
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d1e8      	bne.n	8007c00 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	40002800 	.word	0x40002800

08007c3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007c48:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4a19      	ldr	r2, [pc, #100]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c52:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007c54:	4b17      	ldr	r3, [pc, #92]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff ff91 	bl	8007b88 <HAL_RTC_WaitForSynchro>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e017      	b.n	8007caa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007c80:	f023 0320 	bic.w	r3, r3, #32
 8007c84:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff ff7e 	bl	8007b88 <HAL_RTC_WaitForSynchro>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2203      	movs	r2, #3
 8007c96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c9e:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	4a04      	ldr	r2, [pc, #16]	@ (8007cb4 <RTC_ExitInitMode+0x78>)
 8007ca4:	f043 0320 	orr.w	r3, r3, #32
 8007ca8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	40002800 	.word	0x40002800

08007cb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007cca:	e005      	b.n	8007cd8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	3b0a      	subs	r3, #10
 8007cd6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d8f6      	bhi.n	8007ccc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b2db      	uxtb	r3, r3
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
	...

08007cf8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8007d00:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8007d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8007d0c:	4b06      	ldr	r3, [pc, #24]	@ (8007d28 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8007d0e:	2204      	movs	r2, #4
 8007d10:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f80a 	bl	8007d2c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40002800 	.word	0x40002800

08007d2c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
	...

08007d40 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e01f      	b.n	8007d96 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d66:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d68:	22ca      	movs	r2, #202	@ 0xca
 8007d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d6e:	2253      	movs	r2, #83	@ 0x53
 8007d70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d72:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	4a0a      	ldr	r2, [pc, #40]	@ (8007da0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d78:	f043 0320 	orr.w	r3, r3, #32
 8007d7c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7e:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d80:	22ff      	movs	r2, #255	@ 0xff
 8007d82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr
 8007da0:	40002800 	.word	0x40002800

08007da4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_RTCEx_SetSSRU_IT+0x16>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e027      	b.n	8007e0a <HAL_RTCEx_SetSSRU_IT+0x66>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dca:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007dcc:	22ca      	movs	r2, #202	@ 0xca
 8007dce:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dd0:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007dd2:	2253      	movs	r2, #83	@ 0x53
 8007dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	4a0e      	ldr	r2, [pc, #56]	@ (8007e14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de8:	4a0b      	ldr	r2, [pc, #44]	@ (8007e18 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007dea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df2:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007df4:	22ff      	movs	r2, #255	@ 0xff
 8007df6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr
 8007e14:	40002800 	.word	0x40002800
 8007e18:	58000800 	.word	0x58000800

08007e1c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007e24:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007e30:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007e32:	2240      	movs	r2, #64	@ 0x40
 8007e34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fb f823 	bl	8002e82 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40002800 	.word	0x40002800

08007e50 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr
	...

08007e64 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007e70:	4b07      	ldr	r3, [pc, #28]	@ (8007e90 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007e72:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	4000b100 	.word	0x4000b100

08007e94 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007e9e:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <HAL_RTCEx_BKUPRead+0x28>)
 8007ea0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	4000b100 	.word	0x4000b100

08007ec0 <LL_PWR_SetRadioBusyTrigger>:
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007ec8:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ed0:	4904      	ldr	r1, [pc, #16]	@ (8007ee4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	58000400 	.word	0x58000400

08007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007eec:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef2:	4a04      	ldr	r2, [pc, #16]	@ (8007f04 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007efc:	bf00      	nop
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr
 8007f04:	58000400 	.word	0x58000400

08007f08 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007f0c:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	4a04      	ldr	r2, [pc, #16]	@ (8007f24 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007f14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007f1c:	bf00      	nop
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	58000400 	.word	0x58000400

08007f28 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007f2c:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f32:	619a      	str	r2, [r3, #24]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	58000400 	.word	0x58000400

08007f40 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d101      	bne.n	8007f54 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	58000400 	.word	0x58000400

08007f64 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007f68:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d101      	bne.n	8007f78 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	58000400 	.word	0x58000400

08007f88 <LL_RCC_RF_DisableReset>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007fa0:	bf00      	nop
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bc80      	pop	{r7}
 8007fa6:	4770      	bx	lr

08007fa8 <LL_RCC_IsRFUnderReset>:
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fbc:	d101      	bne.n	8007fc2 <LL_RCC_IsRFUnderReset+0x1a>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <LL_RCC_IsRFUnderReset+0x1c>
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007fd4:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <LL_EXTI_EnableIT_32_63+0x24>)
 8007fd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007fda:	4905      	ldr	r1, [pc, #20]	@ (8007ff0 <LL_EXTI_EnableIT_32_63+0x24>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	58000800 	.word	0x58000800

08007ff4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
    return status;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	e04b      	b.n	80080a2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	799b      	ldrb	r3, [r3, #6]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d105      	bne.n	8008024 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fa fa90 	bl	8002544 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800802a:	f7ff ffad 	bl	8007f88 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800802e:	4b1f      	ldr	r3, [pc, #124]	@ (80080ac <HAL_SUBGHZ_Init+0xb8>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4613      	mov	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	1a9b      	subs	r3, r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	0cdb      	lsrs	r3, r3, #19
 800803c:	2264      	movs	r2, #100	@ 0x64
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	609a      	str	r2, [r3, #8]
      break;
 8008054:	e007      	b.n	8008066 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3b01      	subs	r3, #1
 800805a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800805c:	f7ff ffa4 	bl	8007fa8 <LL_RCC_IsRFUnderReset>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1ee      	bne.n	8008044 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8008066:	f7ff ff3f 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800806a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800806e:	f7ff ffad 	bl	8007fcc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008072:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008076:	f7ff ff23 	bl	8007ec0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800807a:	f7ff ff55 	bl	8007f28 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 faa5 	bl	80085d8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	719a      	strb	r2, [r3, #6]

  return status;
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000000 	.word	0x20000000

080080b0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	461a      	mov	r2, r3
 80080bc:	460b      	mov	r3, r1
 80080be:	817b      	strh	r3, [r7, #10]
 80080c0:	4613      	mov	r3, r2
 80080c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	799b      	ldrb	r3, [r3, #6]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d14a      	bne.n	8008164 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	795b      	ldrb	r3, [r3, #5]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_SUBGHZ_WriteRegisters+0x2a>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e045      	b.n	8008166 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2202      	movs	r2, #2
 80080e4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fb44 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80080ec:	f7ff ff0c 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80080f0:	210d      	movs	r1, #13
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fa90 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80080f8:	897b      	ldrh	r3, [r7, #10]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	4619      	mov	r1, r3
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa88 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008108:	897b      	ldrh	r3, [r7, #10]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	4619      	mov	r1, r3
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fa82 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008114:	2300      	movs	r3, #0
 8008116:	82bb      	strh	r3, [r7, #20]
 8008118:	e00a      	b.n	8008130 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800811a:	8abb      	ldrh	r3, [r7, #20]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	4413      	add	r3, r2
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fa77 	bl	8008618 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800812a:	8abb      	ldrh	r3, [r7, #20]
 800812c:	3301      	adds	r3, #1
 800812e:	82bb      	strh	r3, [r7, #20]
 8008130:	8aba      	ldrh	r2, [r7, #20]
 8008132:	893b      	ldrh	r3, [r7, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	d3f0      	bcc.n	800811a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008138:	f7ff fed6 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fb3d 	bl	80087bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
 800814e:	e001      	b.n	8008154 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	715a      	strb	r2, [r3, #5]

    return status;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
 8008162:	e000      	b.n	8008166 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008164:	2302      	movs	r3, #2
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b088      	sub	sp, #32
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	461a      	mov	r2, r3
 800817a:	460b      	mov	r3, r1
 800817c:	817b      	strh	r3, [r7, #10]
 800817e:	4613      	mov	r3, r2
 8008180:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	799b      	ldrb	r3, [r3, #6]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d14a      	bne.n	8008226 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	795b      	ldrb	r3, [r3, #5]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008198:	2302      	movs	r3, #2
 800819a:	e045      	b.n	8008228 <HAL_SUBGHZ_ReadRegisters+0xba>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fae6 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80081a8:	f7ff feae 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80081ac:	211d      	movs	r1, #29
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 fa32 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80081b4:	897b      	ldrh	r3, [r7, #10]
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	4619      	mov	r1, r3
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fa2a 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80081c4:	897b      	ldrh	r3, [r7, #10]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa24 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80081d0:	2100      	movs	r1, #0
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fa20 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	82fb      	strh	r3, [r7, #22]
 80081dc:	e009      	b.n	80081f2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80081de:	69b9      	ldr	r1, [r7, #24]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fa6f 	bl	80086c4 <SUBGHZSPI_Receive>
      pData++;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	3301      	adds	r3, #1
 80081ea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80081ec:	8afb      	ldrh	r3, [r7, #22]
 80081ee:	3301      	adds	r3, #1
 80081f0:	82fb      	strh	r3, [r7, #22]
 80081f2:	8afa      	ldrh	r2, [r7, #22]
 80081f4:	893b      	ldrh	r3, [r7, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d3f1      	bcc.n	80081de <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80081fa:	f7ff fe75 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fadc 	bl	80087bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e001      	b.n	8008216 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	715a      	strb	r2, [r3, #5]

    return status;
 8008222:	7ffb      	ldrb	r3, [r7, #31]
 8008224:	e000      	b.n	8008228 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008226:	2302      	movs	r3, #2
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	460b      	mov	r3, r1
 800823e:	72fb      	strb	r3, [r7, #11]
 8008240:	4613      	mov	r3, r2
 8008242:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	799b      	ldrb	r3, [r3, #6]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d14a      	bne.n	80082e4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	795b      	ldrb	r3, [r3, #5]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008256:	2302      	movs	r3, #2
 8008258:	e045      	b.n	80082e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fa87 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	2b84      	cmp	r3, #132	@ 0x84
 800826a:	d002      	beq.n	8008272 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	2b94      	cmp	r3, #148	@ 0x94
 8008270:	d103      	bne.n	800827a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	711a      	strb	r2, [r3, #4]
 8008278:	e002      	b.n	8008280 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008280:	f7ff fe42 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f9c5 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	82bb      	strh	r3, [r7, #20]
 8008292:	e00a      	b.n	80082aa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008294:	8abb      	ldrh	r3, [r7, #20]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	4619      	mov	r1, r3
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 f9ba 	bl	8008618 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80082a4:	8abb      	ldrh	r3, [r7, #20]
 80082a6:	3301      	adds	r3, #1
 80082a8:	82bb      	strh	r3, [r7, #20]
 80082aa:	8aba      	ldrh	r2, [r7, #20]
 80082ac:	893b      	ldrh	r3, [r7, #8]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d3f0      	bcc.n	8008294 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80082b2:	f7ff fe19 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	2b84      	cmp	r3, #132	@ 0x84
 80082ba:	d002      	beq.n	80082c2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fa7d 	bl	80087bc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
 80082ce:	e001      	b.n	80082d4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	715a      	strb	r2, [r3, #5]

    return status;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	e000      	b.n	80082e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
  }
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b088      	sub	sp, #32
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	461a      	mov	r2, r3
 80082fa:	460b      	mov	r3, r1
 80082fc:	72fb      	strb	r3, [r7, #11]
 80082fe:	4613      	mov	r3, r2
 8008300:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	799b      	ldrb	r3, [r3, #6]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d13d      	bne.n	800838c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	795b      	ldrb	r3, [r3, #5]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008318:	2302      	movs	r3, #2
 800831a:	e038      	b.n	800838e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa26 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008328:	f7ff fdee 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	4619      	mov	r1, r3
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f971 	bl	8008618 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008336:	2100      	movs	r1, #0
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 f96d 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800833e:	2300      	movs	r3, #0
 8008340:	82fb      	strh	r3, [r7, #22]
 8008342:	e009      	b.n	8008358 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008344:	69b9      	ldr	r1, [r7, #24]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f9bc 	bl	80086c4 <SUBGHZSPI_Receive>
      pData++;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3301      	adds	r3, #1
 8008350:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	3301      	adds	r3, #1
 8008356:	82fb      	strh	r3, [r7, #22]
 8008358:	8afa      	ldrh	r2, [r7, #22]
 800835a:	893b      	ldrh	r3, [r7, #8]
 800835c:	429a      	cmp	r2, r3
 800835e:	d3f1      	bcc.n	8008344 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008360:	f7ff fdc2 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fa29 	bl	80087bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	77fb      	strb	r3, [r7, #31]
 8008376:	e001      	b.n	800837c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	715a      	strb	r2, [r3, #5]

    return status;
 8008388:	7ffb      	ldrb	r3, [r7, #31]
 800838a:	e000      	b.n	800838e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800838c:	2302      	movs	r3, #2
  }
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	460b      	mov	r3, r1
 80083a4:	72fb      	strb	r3, [r7, #11]
 80083a6:	4613      	mov	r3, r2
 80083a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	799b      	ldrb	r3, [r3, #6]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d13e      	bne.n	8008432 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	795b      	ldrb	r3, [r3, #5]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80083bc:	2302      	movs	r3, #2
 80083be:	e039      	b.n	8008434 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f9d4 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80083cc:	f7ff fd9c 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80083d0:	210e      	movs	r1, #14
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f920 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f91b 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80083e2:	2300      	movs	r3, #0
 80083e4:	82bb      	strh	r3, [r7, #20]
 80083e6:	e00a      	b.n	80083fe <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80083e8:	8abb      	ldrh	r3, [r7, #20]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f910 	bl	8008618 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80083f8:	8abb      	ldrh	r3, [r7, #20]
 80083fa:	3301      	adds	r3, #1
 80083fc:	82bb      	strh	r3, [r7, #20]
 80083fe:	8aba      	ldrh	r2, [r7, #20]
 8008400:	893b      	ldrh	r3, [r7, #8]
 8008402:	429a      	cmp	r2, r3
 8008404:	d3f0      	bcc.n	80083e8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008406:	f7ff fd6f 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f9d6 	bl	80087bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
 800841c:	e001      	b.n	8008422 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	715a      	strb	r2, [r3, #5]

    return status;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	e000      	b.n	8008434 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008432:	2302      	movs	r3, #2
  }
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	461a      	mov	r2, r3
 8008448:	460b      	mov	r3, r1
 800844a:	72fb      	strb	r3, [r7, #11]
 800844c:	4613      	mov	r3, r2
 800844e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	799b      	ldrb	r3, [r3, #6]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	d141      	bne.n	80084e2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	795b      	ldrb	r3, [r3, #5]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008466:	2302      	movs	r3, #2
 8008468:	e03c      	b.n	80084e4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f97f 	bl	8008774 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008476:	f7ff fd47 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800847a:	211e      	movs	r1, #30
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f8cb 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	4619      	mov	r1, r3
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f8c6 	bl	8008618 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f8c2 	bl	8008618 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	82fb      	strh	r3, [r7, #22]
 8008498:	e009      	b.n	80084ae <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f911 	bl	80086c4 <SUBGHZSPI_Receive>
      pData++;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80084a8:	8afb      	ldrh	r3, [r7, #22]
 80084aa:	3301      	adds	r3, #1
 80084ac:	82fb      	strh	r3, [r7, #22]
 80084ae:	8afa      	ldrh	r2, [r7, #22]
 80084b0:	893b      	ldrh	r3, [r7, #8]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d3f1      	bcc.n	800849a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084b6:	f7ff fd17 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f97e 	bl	80087bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	77fb      	strb	r3, [r7, #31]
 80084cc:	e001      	b.n	80084d2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	715a      	strb	r2, [r3, #5]

    return status;
 80084de:	7ffb      	ldrb	r3, [r7, #31]
 80084e0:	e000      	b.n	80084e4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80084e2:	2302      	movs	r3, #2
  }
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80084f4:	2300      	movs	r3, #0
 80084f6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80084f8:	f107 020c 	add.w	r2, r7, #12
 80084fc:	2302      	movs	r3, #2
 80084fe:	2112      	movs	r1, #18
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fef4 	bl	80082ee <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008506:	7b3b      	ldrb	r3, [r7, #12]
 8008508:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800850a:	89fb      	ldrh	r3, [r7, #14]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b21a      	sxth	r2, r3
 8008510:	7b7b      	ldrb	r3, [r7, #13]
 8008512:	b21b      	sxth	r3, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	b21b      	sxth	r3, r3
 8008518:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800851a:	89fb      	ldrh	r3, [r7, #14]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f012 fea9 	bl	801b27c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800852a:	89fb      	ldrh	r3, [r7, #14]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f012 feaf 	bl	801b298 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800853a:	89fb      	ldrh	r3, [r7, #14]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f012 feff 	bl	801b348 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800854a:	89fb      	ldrh	r3, [r7, #14]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f012 ff05 	bl	801b364 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800855a:	89fb      	ldrh	r3, [r7, #14]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f012 ff0b 	bl	801b380 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f012 fed9 	bl	801b32c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f012 fe95 	bl	801b2b4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800858a:	89fb      	ldrh	r3, [r7, #14]
 800858c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00d      	beq.n	80085b0 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800859e:	2101      	movs	r1, #1
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f012 fe95 	bl	801b2d0 <HAL_SUBGHZ_CADStatusCallback>
 80085a6:	e003      	b.n	80085b0 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80085a8:	2100      	movs	r1, #0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f012 fe90 	bl	801b2d0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80085b0:	89fb      	ldrh	r3, [r7, #14]
 80085b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f012 fea6 	bl	801b30c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80085c0:	f107 020c 	add.w	r2, r7, #12
 80085c4:	2302      	movs	r3, #2
 80085c6:	2102      	movs	r1, #2
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fe31 	bl	8008230 <HAL_SUBGHZ_ExecSetCmd>
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 80085e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ea:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80085ec:	4a09      	ldr	r2, [pc, #36]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80085f4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80085f6:	4b07      	ldr	r3, [pc, #28]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 80085f8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80085fc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80085fe:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a04      	ldr	r2, [pc, #16]	@ (8008614 <SUBGHZSPI_Init+0x3c>)
 8008604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr
 8008614:	58010000 	.word	0x58010000

08008618 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008628:	4b23      	ldr	r3, [pc, #140]	@ (80086b8 <SUBGHZSPI_Transmit+0xa0>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	0cdb      	lsrs	r3, r3, #19
 8008636:	2264      	movs	r2, #100	@ 0x64
 8008638:	fb02 f303 	mul.w	r3, r2, r3
 800863c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d105      	bne.n	8008650 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	609a      	str	r2, [r3, #8]
      break;
 800864e:	e008      	b.n	8008662 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3b01      	subs	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008656:	4b19      	ldr	r3, [pc, #100]	@ (80086bc <SUBGHZSPI_Transmit+0xa4>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b02      	cmp	r3, #2
 8008660:	d1ed      	bne.n	800863e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008662:	4b17      	ldr	r3, [pc, #92]	@ (80086c0 <SUBGHZSPI_Transmit+0xa8>)
 8008664:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800866c:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <SUBGHZSPI_Transmit+0xa0>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	4613      	mov	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	0cdb      	lsrs	r3, r3, #19
 800867a:	2264      	movs	r2, #100	@ 0x64
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d105      	bne.n	8008694 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	609a      	str	r2, [r3, #8]
      break;
 8008692:	e008      	b.n	80086a6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3b01      	subs	r3, #1
 8008698:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800869a:	4b08      	ldr	r3, [pc, #32]	@ (80086bc <SUBGHZSPI_Transmit+0xa4>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d1ed      	bne.n	8008682 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80086a6:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <SUBGHZSPI_Transmit+0xa4>)
 80086a8:	68db      	ldr	r3, [r3, #12]

  return status;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	371c      	adds	r7, #28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000000 	.word	0x20000000
 80086bc:	58010000 	.word	0x58010000
 80086c0:	5801000c 	.word	0x5801000c

080086c4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80086d2:	4b25      	ldr	r3, [pc, #148]	@ (8008768 <SUBGHZSPI_Receive+0xa4>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	0cdb      	lsrs	r3, r3, #19
 80086e0:	2264      	movs	r2, #100	@ 0x64
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d105      	bne.n	80086fa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	609a      	str	r2, [r3, #8]
      break;
 80086f8:	e008      	b.n	800870c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008700:	4b1a      	ldr	r3, [pc, #104]	@ (800876c <SUBGHZSPI_Receive+0xa8>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b02      	cmp	r3, #2
 800870a:	d1ed      	bne.n	80086e8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800870c:	4b18      	ldr	r3, [pc, #96]	@ (8008770 <SUBGHZSPI_Receive+0xac>)
 800870e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	22ff      	movs	r2, #255	@ 0xff
 8008714:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008716:	4b14      	ldr	r3, [pc, #80]	@ (8008768 <SUBGHZSPI_Receive+0xa4>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4613      	mov	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	0cdb      	lsrs	r3, r3, #19
 8008724:	2264      	movs	r2, #100	@ 0x64
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	609a      	str	r2, [r3, #8]
      break;
 800873c:	e008      	b.n	8008750 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3b01      	subs	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008744:	4b09      	ldr	r3, [pc, #36]	@ (800876c <SUBGHZSPI_Receive+0xa8>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b01      	cmp	r3, #1
 800874e:	d1ed      	bne.n	800872c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008750:	4b06      	ldr	r3, [pc, #24]	@ (800876c <SUBGHZSPI_Receive+0xa8>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	b2da      	uxtb	r2, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	701a      	strb	r2, [r3, #0]

  return status;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000000 	.word	0x20000000
 800876c:	58010000 	.word	0x58010000
 8008770:	5801000c 	.word	0x5801000c

08008774 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	791b      	ldrb	r3, [r3, #4]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d111      	bne.n	80087a8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <SUBGHZ_CheckDeviceReady+0x44>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	4413      	add	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008794:	f7ff fbb8 	bl	8007f08 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1f9      	bne.n	8008798 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087a4:	f7ff fba0 	bl	8007ee8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f807 	bl	80087bc <SUBGHZ_WaitOnBusy>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000000 	.word	0x20000000

080087bc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80087c8:	4b12      	ldr	r3, [pc, #72]	@ (8008814 <SUBGHZ_WaitOnBusy+0x58>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4413      	add	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	0d1b      	lsrs	r3, r3, #20
 80087d6:	2264      	movs	r2, #100	@ 0x64
 80087d8:	fb02 f303 	mul.w	r3, r2, r3
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80087de:	f7ff fbc1 	bl	8007f64 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80087e2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d105      	bne.n	80087f6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	609a      	str	r2, [r3, #8]
      break;
 80087f4:	e009      	b.n	800880a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80087fc:	f7ff fba0 	bl	8007f40 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	4013      	ands	r3, r2
 8008806:	2b01      	cmp	r3, #1
 8008808:	d0e9      	beq.n	80087de <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000000 	.word	0x20000000

08008818 <LL_RCC_GetUSARTClockSource>:
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008824:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	401a      	ands	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	4313      	orrs	r3, r2
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <LL_RCC_GetLPUARTClockSource>:
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008848:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4013      	ands	r3, r2
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr

0800885a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e042      	b.n	80088f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fa fcda 	bl	8003238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	@ 0x24
 8008888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0201 	bic.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fdb3 	bl	8009408 <UART_SetConfig>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e022      	b.n	80088f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f81b 	bl	80098f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 f8a1 	bl	8009a32 <UART_CheckIdleState>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b08a      	sub	sp, #40	@ 0x28
 80088fe:	af02      	add	r7, sp, #8
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008910:	2b20      	cmp	r3, #32
 8008912:	f040 8083 	bne.w	8008a1c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_UART_Transmit+0x28>
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e07b      	b.n	8008a1e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_UART_Transmit+0x3a>
 8008930:	2302      	movs	r3, #2
 8008932:	e074      	b.n	8008a1e <HAL_UART_Transmit+0x124>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2221      	movs	r2, #33	@ 0x21
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800894c:	f7f9 ffa2 	bl	8002894 <HAL_GetTick>
 8008950:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	88fa      	ldrh	r2, [r7, #6]
 800895e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800896a:	d108      	bne.n	800897e <HAL_UART_Transmit+0x84>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	e003      	b.n	8008986 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800898e:	e02c      	b.n	80089ea <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2200      	movs	r2, #0
 8008998:	2180      	movs	r1, #128	@ 0x80
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f001 f894 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e039      	b.n	8008a1e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	3302      	adds	r3, #2
 80089c4:	61bb      	str	r3, [r7, #24]
 80089c6:	e007      	b.n	80089d8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	3301      	adds	r3, #1
 80089d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1cc      	bne.n	8008990 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2140      	movs	r1, #64	@ 0x40
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 f861 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e006      	b.n	8008a1e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e000      	b.n	8008a1e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08a      	sub	sp, #40	@ 0x28
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	f040 80c0 	bne.w	8008bc2 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <HAL_UART_Receive+0x28>
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e0b8      	b.n	8008bc4 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_UART_Receive+0x3a>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e0b1      	b.n	8008bc4 <HAL_UART_Receive+0x19e>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2222      	movs	r2, #34	@ 0x22
 8008a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7e:	f7f9 ff09 	bl	8002894 <HAL_GetTick>
 8008a82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	88fa      	ldrh	r2, [r7, #6]
 8008a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9c:	d10e      	bne.n	8008abc <HAL_UART_Receive+0x96>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_UART_Receive+0x8c>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008aac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ab0:	e02d      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	22ff      	movs	r2, #255	@ 0xff
 8008ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008aba:	e028      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10d      	bne.n	8008ae0 <HAL_UART_Receive+0xba>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <HAL_UART_Receive+0xb0>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	22ff      	movs	r2, #255	@ 0xff
 8008ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ad4:	e01b      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	227f      	movs	r2, #127	@ 0x7f
 8008ada:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ade:	e016      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ae8:	d10d      	bne.n	8008b06 <HAL_UART_Receive+0xe0>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <HAL_UART_Receive+0xd6>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	227f      	movs	r2, #127	@ 0x7f
 8008af6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008afa:	e008      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	223f      	movs	r2, #63	@ 0x3f
 8008b00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b04:	e003      	b.n	8008b0e <HAL_UART_Receive+0xe8>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b14:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d108      	bne.n	8008b32 <HAL_UART_Receive+0x10c>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e003      	b.n	8008b3a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008b42:	e032      	b.n	8008baa <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 ffba 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e032      	b.n	8008bc4 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10c      	bne.n	8008b7e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	8a7b      	ldrh	r3, [r7, #18]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	3302      	adds	r3, #2
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e00c      	b.n	8008b98 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	8a7b      	ldrh	r3, [r7, #18]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1c6      	bne.n	8008b44 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e000      	b.n	8008bc4 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8008bc2:	2302      	movs	r3, #2
  }
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d142      	bne.n	8008c6a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_UART_Receive_IT+0x24>
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e03b      	b.n	8008c6c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Receive_IT+0x36>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e034      	b.n	8008c6c <HAL_UART_Receive_IT+0xa0>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a17      	ldr	r2, [pc, #92]	@ (8008c74 <HAL_UART_Receive_IT+0xa8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d01f      	beq.n	8008c5a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d018      	beq.n	8008c5a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	613b      	str	r3, [r7, #16]
   return(result);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	623b      	str	r3, [r7, #32]
 8008c48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	69f9      	ldr	r1, [r7, #28]
 8008c4c:	6a3a      	ldr	r2, [r7, #32]
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008c5a:	88fb      	ldrh	r3, [r7, #6]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fff9 	bl	8009c58 <UART_Start_Receive_IT>
 8008c66:	4603      	mov	r3, r0
 8008c68:	e000      	b.n	8008c6c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3728      	adds	r7, #40	@ 0x28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	40008000 	.word	0x40008000

08008c78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	@ 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4613      	mov	r3, r2
 8008c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d17a      	bne.n	8008d86 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_UART_Transmit_DMA+0x24>
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e073      	b.n	8008d88 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Transmit_DMA+0x36>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e06c      	b.n	8008d88 <HAL_UART_Transmit_DMA+0x110>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	88fa      	ldrh	r2, [r7, #6]
 8008cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2221      	movs	r2, #33	@ 0x21
 8008cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02c      	beq.n	8008d3e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ce8:	4a29      	ldr	r2, [pc, #164]	@ (8008d90 <HAL_UART_Transmit_DMA+0x118>)
 8008cea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf0:	4a28      	ldr	r2, [pc, #160]	@ (8008d94 <HAL_UART_Transmit_DMA+0x11c>)
 8008cf2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cf8:	4a27      	ldr	r2, [pc, #156]	@ (8008d98 <HAL_UART_Transmit_DMA+0x120>)
 8008cfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d00:	2200      	movs	r2, #0
 8008d02:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3328      	adds	r3, #40	@ 0x28
 8008d14:	461a      	mov	r2, r3
 8008d16:	88fb      	ldrh	r3, [r7, #6]
 8008d18:	f7fc fa1a 	bl	8005150 <HAL_DMA_Start_IT>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2210      	movs	r2, #16
 8008d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e024      	b.n	8008d88 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2240      	movs	r2, #64	@ 0x40
 8008d44:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d6e:	623a      	str	r2, [r7, #32]
 8008d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e000      	b.n	8008d88 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008d86:	2302      	movs	r3, #2
  }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3728      	adds	r7, #40	@ 0x28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08009ff3 	.word	0x08009ff3
 8008d94:	0800a08d 	.word	0x0800a08d
 8008d98:	0800a0a9 	.word	0x0800a0a9

08008d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ba      	sub	sp, #232	@ 0xe8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008dc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008dca:	4013      	ands	r3, r2
 8008dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11b      	bne.n	8008e10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d015      	beq.n	8008e10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d009      	beq.n	8008e10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 82d6 	beq.w	80093b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
      }
      return;
 8008e0e:	e2d0      	b.n	80093b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 811f 	beq.w	8009058 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800904c <HAL_UART_IRQHandler+0x2b0>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e2a:	4b89      	ldr	r3, [pc, #548]	@ (8009050 <HAL_UART_IRQHandler+0x2b4>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 8112 	beq.w	8009058 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d011      	beq.n	8008e64 <HAL_UART_IRQHandler+0xc8>
 8008e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d011      	beq.n	8008e94 <HAL_UART_IRQHandler+0xf8>
 8008e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2202      	movs	r2, #2
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e8a:	f043 0204 	orr.w	r2, r3, #4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x128>
 8008ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eba:	f043 0202 	orr.w	r2, r3, #2
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d017      	beq.n	8008f00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d105      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008edc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800904c <HAL_UART_IRQHandler+0x2b0>)
 8008ee2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2208      	movs	r2, #8
 8008eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef6:	f043 0208 	orr.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d012      	beq.n	8008f32 <HAL_UART_IRQHandler+0x196>
 8008f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f28:	f043 0220 	orr.w	r2, r3, #32
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 823c 	beq.w	80093b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d013      	beq.n	8008f72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d007      	beq.n	8008f72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04f      	beq.n	8009036 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 ffc6 	bl	8009f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa6:	2b40      	cmp	r3, #64	@ 0x40
 8008fa8:	d141      	bne.n	800902e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1d9      	bne.n	8008faa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d013      	beq.n	8009026 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009002:	4a14      	ldr	r2, [pc, #80]	@ (8009054 <HAL_UART_IRQHandler+0x2b8>)
 8009004:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800900a:	4618      	mov	r0, r3
 800900c:	f7fc f97c 	bl	8005308 <HAL_DMA_Abort_IT>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009024:	e00f      	b.n	8009046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f9d9 	bl	80093de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902c:	e00b      	b.n	8009046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f9d5 	bl	80093de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009034:	e007      	b.n	8009046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f9d1 	bl	80093de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8009044:	e1b7      	b.n	80093b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009046:	bf00      	nop
    return;
 8009048:	e1b5      	b.n	80093b6 <HAL_UART_IRQHandler+0x61a>
 800904a:	bf00      	nop
 800904c:	10000001 	.word	0x10000001
 8009050:	04000120 	.word	0x04000120
 8009054:	0800a129 	.word	0x0800a129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800905c:	2b01      	cmp	r3, #1
 800905e:	f040 814a 	bne.w	80092f6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 8143 	beq.w	80092f6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009074:	f003 0310 	and.w	r3, r3, #16
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 813c 	beq.w	80092f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2210      	movs	r2, #16
 8009084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	f040 80b5 	bne.w	8009200 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80090a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8187 	beq.w	80093ba <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090b6:	429a      	cmp	r2, r3
 80090b8:	f080 817f 	bcs.w	80093ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 8086 	bne.w	80091e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009106:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800910e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800911a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1da      	bne.n	80090d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800914a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800914e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e1      	bne.n	8009122 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800916e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e3      	bne.n	800915e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e4      	bne.n	80091a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fc f834 	bl	800524c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f8f9 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80091fe:	e0dc      	b.n	80093ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800920c:	b29b      	uxth	r3, r3
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80ce 	beq.w	80093be <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8009222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80c9 	beq.w	80093be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800924e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009250:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800925c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e4      	bne.n	800922c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	623b      	str	r3, [r7, #32]
   return(result);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800928a:	633a      	str	r2, [r7, #48]	@ 0x30
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e1      	bne.n	8009262 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0310 	bic.w	r3, r3, #16
 80092c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	617b      	str	r3, [r7, #20]
   return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e4      	bne.n	80092b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f87e 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80092f4:	e063      	b.n	80093be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <HAL_UART_IRQHandler+0x584>
 8009302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d008      	beq.n	8009320 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009316:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fba3 	bl	800aa64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800931e:	e051      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009328:	2b00      	cmp	r3, #0
 800932a:	d014      	beq.n	8009356 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800933c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d008      	beq.n	8009356 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009348:	2b00      	cmp	r3, #0
 800934a:	d03a      	beq.n	80093c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
    }
    return;
 8009354:	e035      	b.n	80093c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d009      	beq.n	8009376 <HAL_UART_IRQHandler+0x5da>
 8009362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fef0 	bl	800a154 <UART_EndTransmit_IT>
    return;
 8009374:	e026      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d009      	beq.n	8009396 <HAL_UART_IRQHandler+0x5fa>
 8009382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009386:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fb7a 	bl	800aa88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009394:	e016      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d010      	beq.n	80093c4 <HAL_UART_IRQHandler+0x628>
 80093a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da0c      	bge.n	80093c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 fb63 	bl	800aa76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093b0:	e008      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
      return;
 80093b2:	bf00      	nop
 80093b4:	e006      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
    return;
 80093b6:	bf00      	nop
 80093b8:	e004      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
      return;
 80093ba:	bf00      	nop
 80093bc:	e002      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
      return;
 80093be:	bf00      	nop
 80093c0:	e000      	b.n	80093c4 <HAL_UART_IRQHandler+0x628>
    return;
 80093c2:	bf00      	nop
  }
}
 80093c4:	37e8      	adds	r7, #232	@ 0xe8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop

080093cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	bc80      	pop	{r7}
 80093dc:	4770      	bx	lr

080093de <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bc80      	pop	{r7}
 80093ee:	4770      	bx	lr

080093f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
	...

08009408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800940c:	b08c      	sub	sp, #48	@ 0x30
 800940e:	af00      	add	r7, sp, #0
 8009410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	431a      	orrs	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	431a      	orrs	r2, r3
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	4313      	orrs	r3, r2
 800942e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b94      	ldr	r3, [pc, #592]	@ (8009688 <UART_SetConfig+0x280>)
 8009438:	4013      	ands	r3, r2
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	6812      	ldr	r2, [r2, #0]
 800943e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009440:	430b      	orrs	r3, r1
 8009442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a89      	ldr	r2, [pc, #548]	@ (800968c <UART_SetConfig+0x284>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009470:	4313      	orrs	r3, r2
 8009472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800947e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009488:	430b      	orrs	r3, r1
 800948a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	f023 010f 	bic.w	r1, r3, #15
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a7a      	ldr	r2, [pc, #488]	@ (8009690 <UART_SetConfig+0x288>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d127      	bne.n	80094fc <UART_SetConfig+0xf4>
 80094ac:	2003      	movs	r0, #3
 80094ae:	f7ff f9b3 	bl	8008818 <LL_RCC_GetUSARTClockSource>
 80094b2:	4603      	mov	r3, r0
 80094b4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d81b      	bhi.n	80094f4 <UART_SetConfig+0xec>
 80094bc:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <UART_SetConfig+0xbc>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094e5 	.word	0x080094e5
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	080094ed 	.word	0x080094ed
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094da:	e080      	b.n	80095de <UART_SetConfig+0x1d6>
 80094dc:	2302      	movs	r3, #2
 80094de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094e2:	e07c      	b.n	80095de <UART_SetConfig+0x1d6>
 80094e4:	2304      	movs	r3, #4
 80094e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ea:	e078      	b.n	80095de <UART_SetConfig+0x1d6>
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f2:	e074      	b.n	80095de <UART_SetConfig+0x1d6>
 80094f4:	2310      	movs	r3, #16
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fa:	e070      	b.n	80095de <UART_SetConfig+0x1d6>
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a64      	ldr	r2, [pc, #400]	@ (8009694 <UART_SetConfig+0x28c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d138      	bne.n	8009578 <UART_SetConfig+0x170>
 8009506:	200c      	movs	r0, #12
 8009508:	f7ff f986 	bl	8008818 <LL_RCC_GetUSARTClockSource>
 800950c:	4603      	mov	r3, r0
 800950e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8009512:	2b0c      	cmp	r3, #12
 8009514:	d82c      	bhi.n	8009570 <UART_SetConfig+0x168>
 8009516:	a201      	add	r2, pc, #4	@ (adr r2, 800951c <UART_SetConfig+0x114>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	08009551 	.word	0x08009551
 8009520:	08009571 	.word	0x08009571
 8009524:	08009571 	.word	0x08009571
 8009528:	08009571 	.word	0x08009571
 800952c:	08009561 	.word	0x08009561
 8009530:	08009571 	.word	0x08009571
 8009534:	08009571 	.word	0x08009571
 8009538:	08009571 	.word	0x08009571
 800953c:	08009559 	.word	0x08009559
 8009540:	08009571 	.word	0x08009571
 8009544:	08009571 	.word	0x08009571
 8009548:	08009571 	.word	0x08009571
 800954c:	08009569 	.word	0x08009569
 8009550:	2300      	movs	r3, #0
 8009552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009556:	e042      	b.n	80095de <UART_SetConfig+0x1d6>
 8009558:	2302      	movs	r3, #2
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800955e:	e03e      	b.n	80095de <UART_SetConfig+0x1d6>
 8009560:	2304      	movs	r3, #4
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009566:	e03a      	b.n	80095de <UART_SetConfig+0x1d6>
 8009568:	2308      	movs	r3, #8
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956e:	e036      	b.n	80095de <UART_SetConfig+0x1d6>
 8009570:	2310      	movs	r3, #16
 8009572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009576:	e032      	b.n	80095de <UART_SetConfig+0x1d6>
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a43      	ldr	r2, [pc, #268]	@ (800968c <UART_SetConfig+0x284>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d12a      	bne.n	80095d8 <UART_SetConfig+0x1d0>
 8009582:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009586:	f7ff f959 	bl	800883c <LL_RCC_GetLPUARTClockSource>
 800958a:	4603      	mov	r3, r0
 800958c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009590:	d01a      	beq.n	80095c8 <UART_SetConfig+0x1c0>
 8009592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009596:	d81b      	bhi.n	80095d0 <UART_SetConfig+0x1c8>
 8009598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800959c:	d00c      	beq.n	80095b8 <UART_SetConfig+0x1b0>
 800959e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a2:	d815      	bhi.n	80095d0 <UART_SetConfig+0x1c8>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <UART_SetConfig+0x1a8>
 80095a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ac:	d008      	beq.n	80095c0 <UART_SetConfig+0x1b8>
 80095ae:	e00f      	b.n	80095d0 <UART_SetConfig+0x1c8>
 80095b0:	2300      	movs	r3, #0
 80095b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b6:	e012      	b.n	80095de <UART_SetConfig+0x1d6>
 80095b8:	2302      	movs	r3, #2
 80095ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095be:	e00e      	b.n	80095de <UART_SetConfig+0x1d6>
 80095c0:	2304      	movs	r3, #4
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	e00a      	b.n	80095de <UART_SetConfig+0x1d6>
 80095c8:	2308      	movs	r3, #8
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ce:	e006      	b.n	80095de <UART_SetConfig+0x1d6>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d6:	e002      	b.n	80095de <UART_SetConfig+0x1d6>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a2a      	ldr	r2, [pc, #168]	@ (800968c <UART_SetConfig+0x284>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f040 80a4 	bne.w	8009732 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d823      	bhi.n	800963a <UART_SetConfig+0x232>
 80095f2:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <UART_SetConfig+0x1f0>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	0800963b 	.word	0x0800963b
 8009600:	08009625 	.word	0x08009625
 8009604:	0800963b 	.word	0x0800963b
 8009608:	0800962b 	.word	0x0800962b
 800960c:	0800963b 	.word	0x0800963b
 8009610:	0800963b 	.word	0x0800963b
 8009614:	0800963b 	.word	0x0800963b
 8009618:	08009633 	.word	0x08009633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961c:	f7fd fdc4 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8009620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009622:	e010      	b.n	8009646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009624:	4b1c      	ldr	r3, [pc, #112]	@ (8009698 <UART_SetConfig+0x290>)
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009628:	e00d      	b.n	8009646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800962a:	f7fd fd09 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 800962e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009630:	e009      	b.n	8009646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009638:	e005      	b.n	8009646 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8137 	beq.w	80098bc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	4a12      	ldr	r2, [pc, #72]	@ (800969c <UART_SetConfig+0x294>)
 8009654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009658:	461a      	mov	r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009660:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4613      	mov	r3, r2
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	4413      	add	r3, r2
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	429a      	cmp	r2, r3
 8009670:	d305      	bcc.n	800967e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	429a      	cmp	r2, r3
 800967c:	d910      	bls.n	80096a0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009684:	e11a      	b.n	80098bc <UART_SetConfig+0x4b4>
 8009686:	bf00      	nop
 8009688:	cfff69f3 	.word	0xcfff69f3
 800968c:	40008000 	.word	0x40008000
 8009690:	40013800 	.word	0x40013800
 8009694:	40004400 	.word	0x40004400
 8009698:	00f42400 	.word	0x00f42400
 800969c:	0802031c 	.word	0x0802031c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	60fa      	str	r2, [r7, #12]
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	4a8e      	ldr	r2, [pc, #568]	@ (80098e8 <UART_SetConfig+0x4e0>)
 80096ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2200      	movs	r2, #0
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096c2:	f7f7 fced 	bl	80010a0 <__aeabi_uldivmod>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4610      	mov	r0, r2
 80096cc:	4619      	mov	r1, r3
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	020b      	lsls	r3, r1, #8
 80096d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096dc:	0202      	lsls	r2, r0, #8
 80096de:	6979      	ldr	r1, [r7, #20]
 80096e0:	6849      	ldr	r1, [r1, #4]
 80096e2:	0849      	lsrs	r1, r1, #1
 80096e4:	2000      	movs	r0, #0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4605      	mov	r5, r0
 80096ea:	eb12 0804 	adds.w	r8, r2, r4
 80096ee:	eb43 0905 	adc.w	r9, r3, r5
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	469a      	mov	sl, r3
 80096fa:	4693      	mov	fp, r2
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f7 fccc 	bl	80010a0 <__aeabi_uldivmod>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4613      	mov	r3, r2
 800970e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009716:	d308      	bcc.n	800972a <UART_SetConfig+0x322>
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800971e:	d204      	bcs.n	800972a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a3a      	ldr	r2, [r7, #32]
 8009726:	60da      	str	r2, [r3, #12]
 8009728:	e0c8      	b.n	80098bc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009730:	e0c4      	b.n	80098bc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800973a:	d168      	bne.n	800980e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800973c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009740:	2b08      	cmp	r3, #8
 8009742:	d828      	bhi.n	8009796 <UART_SetConfig+0x38e>
 8009744:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x344>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	08009797 	.word	0x08009797
 800975c:	08009787 	.word	0x08009787
 8009760:	08009797 	.word	0x08009797
 8009764:	08009797 	.word	0x08009797
 8009768:	08009797 	.word	0x08009797
 800976c:	0800978f 	.word	0x0800978f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009770:	f7fd fd1a 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009776:	e014      	b.n	80097a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009778:	f7fd fd28 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800977c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800977e:	e010      	b.n	80097a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009780:	4b5a      	ldr	r3, [pc, #360]	@ (80098ec <UART_SetConfig+0x4e4>)
 8009782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009784:	e00d      	b.n	80097a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009786:	f7fd fc5b 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 800978a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800978c:	e009      	b.n	80097a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009794:	e005      	b.n	80097a2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8089 	beq.w	80098bc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ae:	4a4e      	ldr	r2, [pc, #312]	@ (80098e8 <UART_SetConfig+0x4e0>)
 80097b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b4:	461a      	mov	r2, r3
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097bc:	005a      	lsls	r2, r3, #1
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	441a      	add	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	2b0f      	cmp	r3, #15
 80097d6:	d916      	bls.n	8009806 <UART_SetConfig+0x3fe>
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097de:	d212      	bcs.n	8009806 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f023 030f 	bic.w	r3, r3, #15
 80097e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	085b      	lsrs	r3, r3, #1
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	8bfb      	ldrh	r3, [r7, #30]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	8bfa      	ldrh	r2, [r7, #30]
 8009802:	60da      	str	r2, [r3, #12]
 8009804:	e05a      	b.n	80098bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800980c:	e056      	b.n	80098bc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800980e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009812:	2b08      	cmp	r3, #8
 8009814:	d827      	bhi.n	8009866 <UART_SetConfig+0x45e>
 8009816:	a201      	add	r2, pc, #4	@ (adr r2, 800981c <UART_SetConfig+0x414>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	08009867 	.word	0x08009867
 800982c:	08009857 	.word	0x08009857
 8009830:	08009867 	.word	0x08009867
 8009834:	08009867 	.word	0x08009867
 8009838:	08009867 	.word	0x08009867
 800983c:	0800985f 	.word	0x0800985f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009840:	f7fd fcb2 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8009844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009846:	e014      	b.n	8009872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009848:	f7fd fcc0 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800984c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800984e:	e010      	b.n	8009872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009850:	4b26      	ldr	r3, [pc, #152]	@ (80098ec <UART_SetConfig+0x4e4>)
 8009852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009854:	e00d      	b.n	8009872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009856:	f7fd fbf3 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 800985a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800985c:	e009      	b.n	8009872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800985e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009864:	e005      	b.n	8009872 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009870:	bf00      	nop
    }

    if (pclk != 0U)
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	d021      	beq.n	80098bc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987c:	4a1a      	ldr	r2, [pc, #104]	@ (80098e8 <UART_SetConfig+0x4e0>)
 800987e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009882:	461a      	mov	r2, r3
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	fbb3 f2f2 	udiv	r2, r3, r2
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	441a      	add	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	b29b      	uxth	r3, r3
 800989c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d908      	bls.n	80098b6 <UART_SetConfig+0x4ae>
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098aa:	d204      	bcs.n	80098b6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6a3a      	ldr	r2, [r7, #32]
 80098b2:	60da      	str	r2, [r3, #12]
 80098b4:	e002      	b.n	80098bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80098d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3730      	adds	r7, #48	@ 0x30
 80098e0:	46bd      	mov	sp, r7
 80098e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098e6:	bf00      	nop
 80098e8:	0802031c 	.word	0x0802031c
 80098ec:	00f42400 	.word	0x00f42400

080098f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01a      	beq.n	8009a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ee:	d10a      	bne.n	8009a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
  }
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr

08009a32 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af02      	add	r7, sp, #8
 8009a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a42:	f7f8 ff27 	bl	8002894 <HAL_GetTick>
 8009a46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d10e      	bne.n	8009a74 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f82f 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e025      	b.n	8009ac0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0304 	and.w	r3, r3, #4
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d10e      	bne.n	8009aa0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f819 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e00f      	b.n	8009ac0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b09c      	sub	sp, #112	@ 0x70
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad8:	e0a9      	b.n	8009c2e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae0:	f000 80a5 	beq.w	8009c2e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae4:	f7f8 fed6 	bl	8002894 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <UART_WaitOnFlagUntilTimeout+0x32>
 8009af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d140      	bne.n	8009b7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b0a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b1a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e6      	bne.n	8009afa <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3308      	adds	r3, #8
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3308      	adds	r3, #8
 8009b4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b4c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009b4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e5      	bne.n	8009b2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e069      	b.n	8009c50 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d051      	beq.n	8009c2e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b98:	d149      	bne.n	8009c2e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ba2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e6      	bne.n	8009ba4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	613b      	str	r3, [r7, #16]
   return(result);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f023 0301 	bic.w	r3, r3, #1
 8009bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009bf6:	623a      	str	r2, [r7, #32]
 8009bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	69f9      	ldr	r1, [r7, #28]
 8009bfc:	6a3a      	ldr	r2, [r7, #32]
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e5      	bne.n	8009bd6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e010      	b.n	8009c50 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69da      	ldr	r2, [r3, #28]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4013      	ands	r3, r2
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	bf0c      	ite	eq
 8009c3e:	2301      	moveq	r3, #1
 8009c40:	2300      	movne	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	f43f af46 	beq.w	8009ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3770      	adds	r7, #112	@ 0x70
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b0a3      	sub	sp, #140	@ 0x8c
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	88fa      	ldrh	r2, [r7, #6]
 8009c78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c8a:	d10e      	bne.n	8009caa <UART_Start_Receive_IT+0x52>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <UART_Start_Receive_IT+0x48>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009c9e:	e02d      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	22ff      	movs	r2, #255	@ 0xff
 8009ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ca8:	e028      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <UART_Start_Receive_IT+0x76>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d104      	bne.n	8009cc4 <UART_Start_Receive_IT+0x6c>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	22ff      	movs	r2, #255	@ 0xff
 8009cbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cc2:	e01b      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	227f      	movs	r2, #127	@ 0x7f
 8009cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ccc:	e016      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cd6:	d10d      	bne.n	8009cf4 <UART_Start_Receive_IT+0x9c>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <UART_Start_Receive_IT+0x92>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	227f      	movs	r2, #127	@ 0x7f
 8009ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ce8:	e008      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	223f      	movs	r2, #63	@ 0x3f
 8009cee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009cf2:	e003      	b.n	8009cfc <UART_Start_Receive_IT+0xa4>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2222      	movs	r2, #34	@ 0x22
 8009d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009d30:	673a      	str	r2, [r7, #112]	@ 0x70
 8009d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009d36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e3      	bne.n	8009d0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d4c:	d153      	bne.n	8009df6 <UART_Start_Receive_IT+0x19e>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d34d      	bcc.n	8009df6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d62:	d107      	bne.n	8009d74 <UART_Start_Receive_IT+0x11c>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d103      	bne.n	8009d74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8009e98 <UART_Start_Receive_IT+0x240>)
 8009d70:	671a      	str	r2, [r3, #112]	@ 0x70
 8009d72:	e002      	b.n	8009d7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4a49      	ldr	r2, [pc, #292]	@ (8009e9c <UART_Start_Receive_IT+0x244>)
 8009d78:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d01a      	beq.n	8009dc0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e4      	bne.n	8009d8a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dca:	e853 3f00 	ldrex	r3, [r3]
 8009dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3308      	adds	r3, #8
 8009dde:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009de0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009de2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009de8:	e841 2300 	strex	r3, r2, [r1]
 8009dec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e5      	bne.n	8009dc0 <UART_Start_Receive_IT+0x168>
 8009df4:	e04a      	b.n	8009e8c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dfe:	d107      	bne.n	8009e10 <UART_Start_Receive_IT+0x1b8>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4a25      	ldr	r2, [pc, #148]	@ (8009ea0 <UART_Start_Receive_IT+0x248>)
 8009e0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e0e:	e002      	b.n	8009e16 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4a24      	ldr	r2, [pc, #144]	@ (8009ea4 <UART_Start_Receive_IT+0x24c>)
 8009e14:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d019      	beq.n	8009e5a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e46:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e6      	bne.n	8009e26 <UART_Start_Receive_IT+0x1ce>
 8009e58:	e018      	b.n	8009e8c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	613b      	str	r3, [r7, #16]
   return(result);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	f043 0320 	orr.w	r3, r3, #32
 8009e6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e78:	623b      	str	r3, [r7, #32]
 8009e7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	69f9      	ldr	r1, [r7, #28]
 8009e7e:	6a3a      	ldr	r2, [r7, #32]
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e6      	bne.n	8009e5a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	378c      	adds	r7, #140	@ 0x8c
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr
 8009e98:	0800a765 	.word	0x0800a765
 8009e9c:	0800a46d 	.word	0x0800a46d
 8009ea0:	0800a30b 	.word	0x0800a30b
 8009ea4:	0800a1ab 	.word	0x0800a1ab

08009ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b08f      	sub	sp, #60	@ 0x3c
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ed0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e6      	bne.n	8009eb0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f02:	61ba      	str	r2, [r7, #24]
 8009f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6979      	ldr	r1, [r7, #20]
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e5      	bne.n	8009ee2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8009f1e:	bf00      	nop
 8009f20:	373c      	adds	r7, #60	@ 0x3c
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bc80      	pop	{r7}
 8009f26:	4770      	bx	lr

08009f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b095      	sub	sp, #84	@ 0x54
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e6      	bne.n	8009f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3308      	adds	r3, #8
 8009f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e3      	bne.n	8009f62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d118      	bne.n	8009fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f023 0310 	bic.w	r3, r3, #16
 8009fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6979      	ldr	r1, [r7, #20]
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e6      	bne.n	8009fa2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009fe8:	bf00      	nop
 8009fea:	3754      	adds	r7, #84	@ 0x54
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bc80      	pop	{r7}
 8009ff0:	4770      	bx	lr

08009ff2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b090      	sub	sp, #64	@ 0x40
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d137      	bne.n	800a07e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	2200      	movs	r2, #0
 800a012:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	623b      	str	r3, [r7, #32]
   return(result);
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a02c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a036:	633a      	str	r2, [r7, #48]	@ 0x30
 800a038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	60fb      	str	r3, [r7, #12]
   return(result);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	461a      	mov	r2, r3
 800a066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a068:	61fb      	str	r3, [r7, #28]
 800a06a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	69b9      	ldr	r1, [r7, #24]
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	617b      	str	r3, [r7, #20]
   return(result);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e6      	bne.n	800a04a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a07c:	e002      	b.n	800a084 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a07e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a080:	f7f9 fa90 	bl	80035a4 <HAL_UART_TxCpltCallback>
}
 800a084:	bf00      	nop
 800a086:	3740      	adds	r7, #64	@ 0x40
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff f996 	bl	80093cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d0:	2b80      	cmp	r3, #128	@ 0x80
 800a0d2:	d109      	bne.n	800a0e8 <UART_DMAError+0x40>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b21      	cmp	r3, #33	@ 0x21
 800a0d8:	d106      	bne.n	800a0e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a0e2:	6978      	ldr	r0, [r7, #20]
 800a0e4:	f7ff fee0 	bl	8009ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f2:	2b40      	cmp	r3, #64	@ 0x40
 800a0f4:	d109      	bne.n	800a10a <UART_DMAError+0x62>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b22      	cmp	r3, #34	@ 0x22
 800a0fa:	d106      	bne.n	800a10a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a104:	6978      	ldr	r0, [r7, #20]
 800a106:	f7ff ff0f 	bl	8009f28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a110:	f043 0210 	orr.w	r2, r3, #16
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a11a:	6978      	ldr	r0, [r7, #20]
 800a11c:	f7ff f95f 	bl	80093de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a120:	bf00      	nop
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff f949 	bl	80093de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a14c:	bf00      	nop
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	60bb      	str	r3, [r7, #8]
   return(result);
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	61bb      	str	r3, [r7, #24]
 800a17c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6979      	ldr	r1, [r7, #20]
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	613b      	str	r3, [r7, #16]
   return(result);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e6      	bne.n	800a15c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2220      	movs	r2, #32
 800a192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7f9 fa01 	bl	80035a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1a2:	bf00      	nop
 800a1a4:	3720      	adds	r7, #32
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b096      	sub	sp, #88	@ 0x58
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1b8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1c2:	2b22      	cmp	r3, #34	@ 0x22
 800a1c4:	f040 8095 	bne.w	800a2f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ce:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a1d6:	b2d9      	uxtb	r1, r3
 800a1d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e2:	400a      	ands	r2, r1
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d178      	bne.n	800a302 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a224:	653b      	str	r3, [r7, #80]	@ 0x50
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a230:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e6      	bne.n	800a210 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3308      	adds	r3, #8
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	623b      	str	r3, [r7, #32]
   return(result);
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a262:	633a      	str	r2, [r7, #48]	@ 0x30
 800a264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d12e      	bne.n	800a2ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0310 	bic.w	r3, r3, #16
 800a2a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2b0:	61fb      	str	r3, [r7, #28]
 800a2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d103      	bne.n	800a2da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2210      	movs	r2, #16
 800a2d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff f884 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2e8:	e00b      	b.n	800a302 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7f9 f970 	bl	80035d0 <HAL_UART_RxCpltCallback>
}
 800a2f0:	e007      	b.n	800a302 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	699a      	ldr	r2, [r3, #24]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f042 0208 	orr.w	r2, r2, #8
 800a300:	619a      	str	r2, [r3, #24]
}
 800a302:	bf00      	nop
 800a304:	3758      	adds	r7, #88	@ 0x58
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b096      	sub	sp, #88	@ 0x58
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a318:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a322:	2b22      	cmp	r3, #34	@ 0x22
 800a324:	f040 8095 	bne.w	800a452 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a32e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a336:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a338:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a33c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a340:	4013      	ands	r3, r2
 800a342:	b29a      	uxth	r2, r3
 800a344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a346:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a34c:	1c9a      	adds	r2, r3, #2
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3b01      	subs	r3, #1
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d178      	bne.n	800a462 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a38e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a390:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e6      	bne.n	800a370 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	f023 0301 	bic.w	r3, r3, #1
 800a3b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e5      	bne.n	800a3a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d12e      	bne.n	800a44a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f023 0310 	bic.w	r3, r3, #16
 800a406:	647b      	str	r3, [r7, #68]	@ 0x44
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	461a      	mov	r2, r3
 800a40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6979      	ldr	r1, [r7, #20]
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	613b      	str	r3, [r7, #16]
   return(result);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e6      	bne.n	800a3f2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d103      	bne.n	800a43a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2210      	movs	r2, #16
 800a438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7fe ffd4 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a448:	e00b      	b.n	800a462 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7f9 f8c0 	bl	80035d0 <HAL_UART_RxCpltCallback>
}
 800a450:	e007      	b.n	800a462 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f042 0208 	orr.w	r2, r2, #8
 800a460:	619a      	str	r2, [r3, #24]
}
 800a462:	bf00      	nop
 800a464:	3758      	adds	r7, #88	@ 0x58
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b0a6      	sub	sp, #152	@ 0x98
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a47a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a2:	2b22      	cmp	r3, #34	@ 0x22
 800a4a4:	f040 814f 	bne.w	800a746 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4ae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4b2:	e0f6      	b.n	800a6a2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ba:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a4c2:	b2d9      	uxtb	r1, r3
 800a4c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ce:	400a      	ands	r2, r1
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d053      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a506:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d011      	beq.n	800a536 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2201      	movs	r2, #1
 800a524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a52c:	f043 0201 	orr.w	r2, r3, #1
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d011      	beq.n	800a566 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2202      	movs	r2, #2
 800a554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a55c:	f043 0204 	orr.w	r2, r3, #4
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a566:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d011      	beq.n	800a596 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00b      	beq.n	800a596 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2204      	movs	r2, #4
 800a584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a58c:	f043 0202 	orr.w	r2, r3, #2
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7fe ff1c 	bl	80093de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d173      	bne.n	800a6a2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a5c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5de:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a5e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a5ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e4      	bne.n	800a5ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a606:	f023 0301 	bic.w	r3, r3, #1
 800a60a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3308      	adds	r3, #8
 800a612:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a614:	657a      	str	r2, [r7, #84]	@ 0x54
 800a616:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a61a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e3      	bne.n	800a5f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d12e      	bne.n	800a69c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	f023 0310 	bic.w	r3, r3, #16
 800a658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a662:	643b      	str	r3, [r7, #64]	@ 0x40
 800a664:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e6      	bne.n	800a644 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f003 0310 	and.w	r3, r3, #16
 800a680:	2b10      	cmp	r3, #16
 800a682:	d103      	bne.n	800a68c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2210      	movs	r2, #16
 800a68a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7fe feab 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
 800a69a:	e002      	b.n	800a6a2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7f8 ff97 	bl	80035d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a6aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f47f aefe 	bne.w	800a4b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a6c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d045      	beq.n	800a756 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d23e      	bcs.n	800a756 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3308      	adds	r3, #8
 800a6de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a6f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e5      	bne.n	800a6d8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a14      	ldr	r2, [pc, #80]	@ (800a760 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a710:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f043 0320 	orr.w	r3, r3, #32
 800a726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a730:	61bb      	str	r3, [r7, #24]
 800a732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6979      	ldr	r1, [r7, #20]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	613b      	str	r3, [r7, #16]
   return(result);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e6      	bne.n	800a712 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a744:	e007      	b.n	800a756 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0208 	orr.w	r2, r2, #8
 800a754:	619a      	str	r2, [r3, #24]
}
 800a756:	bf00      	nop
 800a758:	3798      	adds	r7, #152	@ 0x98
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	0800a1ab 	.word	0x0800a1ab

0800a764 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b0a8      	sub	sp, #160	@ 0xa0
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a772:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a79a:	2b22      	cmp	r3, #34	@ 0x22
 800a79c:	f040 8153 	bne.w	800aa46 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a7a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7aa:	e0fa      	b.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a7be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800a7c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d4:	1c9a      	adds	r2, r3, #2
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a7f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d053      	beq.n	800a8aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d011      	beq.n	800a832 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a80e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00b      	beq.n	800a832 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2201      	movs	r2, #1
 800a820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a828:	f043 0201 	orr.w	r2, r3, #1
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a832:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d011      	beq.n	800a862 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a83e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2202      	movs	r2, #2
 800a850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a858:	f043 0204 	orr.w	r2, r3, #4
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a862:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a866:	f003 0304 	and.w	r3, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d011      	beq.n	800a892 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a86e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2204      	movs	r2, #4
 800a880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a888:	f043 0202 	orr.w	r2, r3, #2
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d006      	beq.n	800a8aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fe fd9e 	bl	80093de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d175      	bne.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8da:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e4      	bne.n	800a8b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a902:	f023 0301 	bic.w	r3, r3, #1
 800a906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a914:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a916:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a91a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e1      	bne.n	800a8ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d12e      	bne.n	800a99c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a954:	f023 0310 	bic.w	r3, r3, #16
 800a958:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a962:	647b      	str	r3, [r7, #68]	@ 0x44
 800a964:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e6      	bne.n	800a944 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	f003 0310 	and.w	r3, r3, #16
 800a980:	2b10      	cmp	r3, #16
 800a982:	d103      	bne.n	800a98c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2210      	movs	r2, #16
 800a98a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fe fd2b 	bl	80093f0 <HAL_UARTEx_RxEventCallback>
 800a99a:	e002      	b.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7f8 fe17 	bl	80035d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d006      	beq.n	800a9b8 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a9aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f47f aefa 	bne.w	800a7ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9be:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d045      	beq.n	800aa56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9d0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d23e      	bcs.n	800aa56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3308      	adds	r3, #8
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a9f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e5      	bne.n	800a9d8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a14      	ldr	r2, [pc, #80]	@ (800aa60 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800aa10:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f043 0320 	orr.w	r3, r3, #32
 800aa26:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	69b9      	ldr	r1, [r7, #24]
 800aa36:	69fa      	ldr	r2, [r7, #28]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e6      	bne.n	800aa12 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa44:	e007      	b.n	800aa56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f042 0208 	orr.w	r2, r2, #8
 800aa54:	619a      	str	r2, [r3, #24]
}
 800aa56:	bf00      	nop
 800aa58:	37a0      	adds	r7, #160	@ 0xa0
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800a30b 	.word	0x0800a30b

0800aa64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bc80      	pop	{r7}
 800aa74:	4770      	bx	lr

0800aa76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa7e:	bf00      	nop
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc80      	pop	{r7}
 800aa86:	4770      	bx	lr

0800aa88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr

0800aa9a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b088      	sub	sp, #32
 800aa9e:	af02      	add	r7, sp, #8
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	1d3b      	adds	r3, r7, #4
 800aaa4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d101      	bne.n	800aaba <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e046      	b.n	800ab48 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2224      	movs	r2, #36	@ 0x24
 800aac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f022 0201 	bic.w	r2, r2, #1
 800aad8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800aaf4:	1d3b      	adds	r3, r7, #4
 800aaf6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 f949 	bl	800ad92 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0201 	orr.w	r2, r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab10:	f7f7 fec0 	bl	8002894 <HAL_GetTick>
 800ab14:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7fe ffcf 	bl	8009ac8 <UART_WaitOnFlagUntilTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	75fb      	strb	r3, [r7, #23]
 800ab34:	e003      	b.n	800ab3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b089      	sub	sp, #36	@ 0x24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_UARTEx_EnableStopMode+0x16>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e021      	b.n	800abaa <HAL_UARTEx_EnableStopMode+0x5a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f043 0302 	orr.w	r3, r3, #2
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	6979      	ldr	r1, [r7, #20]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	613b      	str	r3, [r7, #16]
   return(result);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e6      	bne.n	800ab6e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3724      	adds	r7, #36	@ 0x24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bc80      	pop	{r7}
 800abb2:	4770      	bx	lr

0800abb4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <HAL_UARTEx_EnableFifoMode+0x16>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e02b      	b.n	800ac22 <HAL_UARTEx_EnableFifoMode+0x6e>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2224      	movs	r2, #36	@ 0x24
 800abd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0201 	bic.w	r2, r2, #1
 800abf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800ac00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f8e4 	bl	800add8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e027      	b.n	800ac90 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2224      	movs	r2, #36	@ 0x24
 800ac4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr

0800ac9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d101      	bne.n	800acb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acae:	2302      	movs	r3, #2
 800acb0:	e02d      	b.n	800ad0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2224      	movs	r2, #36	@ 0x24
 800acbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f022 0201 	bic.w	r2, r2, #1
 800acd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f872 	bl	800add8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e02d      	b.n	800ad8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2224      	movs	r2, #36	@ 0x24
 800ad3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f022 0201 	bic.w	r2, r2, #1
 800ad54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f834 	bl	800add8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	1d3b      	adds	r3, r7, #4
 800ad9c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f023 0210 	bic.w	r2, r3, #16
 800adaa:	893b      	ldrh	r3, [r7, #8]
 800adac:	4619      	mov	r1, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800adc0:	7abb      	ldrb	r3, [r7, #10]
 800adc2:	061a      	lsls	r2, r3, #24
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
}
 800adcc:	bf00      	nop
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr
	...

0800add8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d108      	bne.n	800adfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adf8:	e031      	b.n	800ae5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adfa:	2308      	movs	r3, #8
 800adfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adfe:	2308      	movs	r3, #8
 800ae00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	0e5b      	lsrs	r3, r3, #25
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	0f5b      	lsrs	r3, r3, #29
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 0307 	and.w	r3, r3, #7
 800ae20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	7b3a      	ldrb	r2, [r7, #12]
 800ae26:	4910      	ldr	r1, [pc, #64]	@ (800ae68 <UARTEx_SetNbDataToProcess+0x90>)
 800ae28:	5c8a      	ldrb	r2, [r1, r2]
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae2e:	7b3a      	ldrb	r2, [r7, #12]
 800ae30:	490e      	ldr	r1, [pc, #56]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x94>)
 800ae32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae34:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	7b7a      	ldrb	r2, [r7, #13]
 800ae44:	4908      	ldr	r1, [pc, #32]	@ (800ae68 <UARTEx_SetNbDataToProcess+0x90>)
 800ae46:	5c8a      	ldrb	r2, [r1, r2]
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae4c:	7b7a      	ldrb	r2, [r7, #13]
 800ae4e:	4907      	ldr	r1, [pc, #28]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x94>)
 800ae50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae5e:	bf00      	nop
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bc80      	pop	{r7}
 800ae66:	4770      	bx	lr
 800ae68:	08020334 	.word	0x08020334
 800ae6c:	0802033c 	.word	0x0802033c

0800ae70 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800ae74:	f7f7 fbae 	bl	80025d4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800ae78:	f000 f820 	bl	800aebc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800ae7c:	bf00      	nop
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	f011 f868 	bl	801bf5c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800ae8c:	bf00      	nop
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ae94:	f3bf 8f4f 	dsb	sy
}
 800ae98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ae9a:	4b06      	ldr	r3, [pc, #24]	@ (800aeb4 <__NVIC_SystemReset+0x24>)
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aea2:	4904      	ldr	r1, [pc, #16]	@ (800aeb4 <__NVIC_SystemReset+0x24>)
 800aea4:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__NVIC_SystemReset+0x28>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800aeaa:	f3bf 8f4f 	dsb	sy
}
 800aeae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aeb0:	bf00      	nop
 800aeb2:	e7fd      	b.n	800aeb0 <__NVIC_SystemReset+0x20>
 800aeb4:	e000ed00 	.word	0xe000ed00
 800aeb8:	05fa0004 	.word	0x05fa0004

0800aebc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800aec6:	2300      	movs	r3, #0
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	2302      	movs	r3, #2
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	2301      	movs	r3, #1
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4b5a      	ldr	r3, [pc, #360]	@ (800b03c <LoRaWAN_Init+0x180>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	2002      	movs	r0, #2
 800aeda:	f011 fc8b 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800aede:	2300      	movs	r3, #0
 800aee0:	9302      	str	r3, [sp, #8]
 800aee2:	2304      	movs	r3, #4
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	2302      	movs	r3, #2
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4b55      	ldr	r3, [pc, #340]	@ (800b040 <LoRaWAN_Init+0x184>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	2100      	movs	r1, #0
 800aef0:	2002      	movs	r0, #2
 800aef2:	f011 fc7f 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800aef6:	2300      	movs	r3, #0
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	2302      	movs	r3, #2
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	2301      	movs	r3, #1
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	4b50      	ldr	r3, [pc, #320]	@ (800b044 <LoRaWAN_Init+0x188>)
 800af04:	2200      	movs	r2, #0
 800af06:	2100      	movs	r1, #0
 800af08:	2002      	movs	r0, #2
 800af0a:	f011 fc73 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800af0e:	1d3b      	adds	r3, r7, #4
 800af10:	4619      	mov	r1, r3
 800af12:	2000      	movs	r0, #0
 800af14:	f003 fa70 	bl	800e3f8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	0e1b      	lsrs	r3, r3, #24
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	0c1b      	lsrs	r3, r3, #16
 800af24:	b2db      	uxtb	r3, r3
 800af26:	4619      	mov	r1, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	9302      	str	r3, [sp, #8]
 800af30:	9101      	str	r1, [sp, #4]
 800af32:	9200      	str	r2, [sp, #0]
 800af34:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <LoRaWAN_Init+0x18c>)
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	2002      	movs	r0, #2
 800af3c:	f011 fc5a 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	4619      	mov	r1, r3
 800af44:	2001      	movs	r0, #1
 800af46:	f003 fa57 	bl	800e3f8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	461a      	mov	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	0c1b      	lsrs	r3, r3, #16
 800af56:	b2db      	uxtb	r3, r3
 800af58:	4619      	mov	r1, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	0a1b      	lsrs	r3, r3, #8
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	b2c0      	uxtb	r0, r0
 800af64:	9003      	str	r0, [sp, #12]
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	9101      	str	r1, [sp, #4]
 800af6a:	9200      	str	r2, [sp, #0]
 800af6c:	4b37      	ldr	r3, [pc, #220]	@ (800b04c <LoRaWAN_Init+0x190>)
 800af6e:	2200      	movs	r2, #0
 800af70:	2100      	movs	r1, #0
 800af72:	2002      	movs	r0, #2
 800af74:	f011 fc3e 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800af78:	2300      	movs	r3, #0
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	4b34      	ldr	r3, [pc, #208]	@ (800b050 <LoRaWAN_Init+0x194>)
 800af7e:	2200      	movs	r2, #0
 800af80:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800af84:	4833      	ldr	r0, [pc, #204]	@ (800b054 <LoRaWAN_Init+0x198>)
 800af86:	f011 f987 	bl	801c298 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800af8a:	2300      	movs	r3, #0
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4b32      	ldr	r3, [pc, #200]	@ (800b058 <LoRaWAN_Init+0x19c>)
 800af90:	2200      	movs	r2, #0
 800af92:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800af96:	4831      	ldr	r0, [pc, #196]	@ (800b05c <LoRaWAN_Init+0x1a0>)
 800af98:	f011 f97e 	bl	801c298 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800af9c:	2300      	movs	r3, #0
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4b2f      	ldr	r3, [pc, #188]	@ (800b060 <LoRaWAN_Init+0x1a4>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800afa8:	482e      	ldr	r0, [pc, #184]	@ (800b064 <LoRaWAN_Init+0x1a8>)
 800afaa:	f011 f975 	bl	801c298 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800afae:	2300      	movs	r3, #0
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	4b2d      	ldr	r3, [pc, #180]	@ (800b068 <LoRaWAN_Init+0x1ac>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800afba:	482c      	ldr	r0, [pc, #176]	@ (800b06c <LoRaWAN_Init+0x1b0>)
 800afbc:	f011 f96c 	bl	801c298 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800afc0:	4a2b      	ldr	r2, [pc, #172]	@ (800b070 <LoRaWAN_Init+0x1b4>)
 800afc2:	2100      	movs	r1, #0
 800afc4:	2001      	movs	r0, #1
 800afc6:	f011 f8c5 	bl	801c154 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800afca:	4a2a      	ldr	r2, [pc, #168]	@ (800b074 <LoRaWAN_Init+0x1b8>)
 800afcc:	2100      	movs	r1, #0
 800afce:	2002      	movs	r0, #2
 800afd0:	f011 f8c0 	bl	801c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800afd4:	4a28      	ldr	r2, [pc, #160]	@ (800b078 <LoRaWAN_Init+0x1bc>)
 800afd6:	2100      	movs	r1, #0
 800afd8:	2004      	movs	r0, #4
 800afda:	f011 f8bb 	bl	801c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800afde:	4a27      	ldr	r2, [pc, #156]	@ (800b07c <LoRaWAN_Init+0x1c0>)
 800afe0:	2100      	movs	r1, #0
 800afe2:	2008      	movs	r0, #8
 800afe4:	f011 f8b6 	bl	801c154 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800afe8:	f000 fe32 	bl	800bc50 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800afec:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800aff0:	4823      	ldr	r0, [pc, #140]	@ (800b080 <LoRaWAN_Init+0x1c4>)
 800aff2:	f002 fae7 	bl	800d5c4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800aff6:	4823      	ldr	r0, [pc, #140]	@ (800b084 <LoRaWAN_Init+0x1c8>)
 800aff8:	f002 fb42 	bl	800d680 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800affc:	4819      	ldr	r0, [pc, #100]	@ (800b064 <LoRaWAN_Init+0x1a8>)
 800affe:	f011 f981 	bl	801c304 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b002:	4b21      	ldr	r3, [pc, #132]	@ (800b088 <LoRaWAN_Init+0x1cc>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	4a21      	ldr	r2, [pc, #132]	@ (800b08c <LoRaWAN_Init+0x1d0>)
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	4611      	mov	r1, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 fcb3 	bl	800d978 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b012:	4b1f      	ldr	r3, [pc, #124]	@ (800b090 <LoRaWAN_Init+0x1d4>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10b      	bne.n	800b032 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b01a:	4b1e      	ldr	r3, [pc, #120]	@ (800b094 <LoRaWAN_Init+0x1d8>)
 800b01c:	6819      	ldr	r1, [r3, #0]
 800b01e:	2300      	movs	r3, #0
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	4b1d      	ldr	r3, [pc, #116]	@ (800b098 <LoRaWAN_Init+0x1dc>)
 800b024:	2200      	movs	r2, #0
 800b026:	481d      	ldr	r0, [pc, #116]	@ (800b09c <LoRaWAN_Init+0x1e0>)
 800b028:	f011 f936 	bl	801c298 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b02c:	481b      	ldr	r0, [pc, #108]	@ (800b09c <LoRaWAN_Init+0x1e0>)
 800b02e:	f011 f969 	bl	801c304 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0801f91c 	.word	0x0801f91c
 800b040:	0801f940 	.word	0x0801f940
 800b044:	0801f964 	.word	0x0801f964
 800b048:	0801f988 	.word	0x0801f988
 800b04c:	0801f9ac 	.word	0x0801f9ac
 800b050:	0800b745 	.word	0x0800b745
 800b054:	200006c0 	.word	0x200006c0
 800b058:	0800b757 	.word	0x0800b757
 800b05c:	200006d8 	.word	0x200006d8
 800b060:	0800b769 	.word	0x0800b769
 800b064:	200006f0 	.word	0x200006f0
 800b068:	0800bb19 	.word	0x0800bb19
 800b06c:	200005b4 	.word	0x200005b4
 800b070:	0800d90d 	.word	0x0800d90d
 800b074:	0800b0dd 	.word	0x0800b0dd
 800b078:	0800bb3d 	.word	0x0800bb3d
 800b07c:	0800ba99 	.word	0x0800ba99
 800b080:	2000000c 	.word	0x2000000c
 800b084:	20000058 	.word	0x20000058
 800b088:	20000008 	.word	0x20000008
 800b08c:	20000009 	.word	0x20000009
 800b090:	20000598 	.word	0x20000598
 800b094:	2000006c 	.word	0x2000006c
 800b098:	0800b721 	.word	0x0800b721
 800b09c:	2000059c 	.word	0x2000059c

0800b0a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0b0:	d104      	bne.n	800b0bc <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	2002      	movs	r0, #2
 800b0b6:	f011 f86f 	bl	801c198 <UTIL_SEQ_SetTask>
      }
      break;
 800b0ba:	e000      	b.n	800b0be <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800b0bc:	bf00      	nop
  }
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
//      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
//              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
//    }
//  }
  /* USER CODE END OnRxData_1 */
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bc80      	pop	{r7}
 800b0d8:	4770      	bx	lr
	...

0800b0dc <SendTxData>:

static void SendTxData(void)
{
 800b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0de:	b0a7      	sub	sp, #156	@ 0x9c
 800b0e0:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b0e2:	23ff      	movs	r3, #255	@ 0xff
 800b0e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  //uint8_t batteryLevel = GetBatteryLevel();
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	677b      	str	r3, [r7, #116]	@ 0x74

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  int16_t temperature = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  uint16_t humidity = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
  uint32_t i = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	673b      	str	r3, [r7, #112]	@ 0x70
  int32_t latitude = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	667b      	str	r3, [r7, #100]	@ 0x64
  int32_t longitude = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	663b      	str	r3, [r7, #96]	@ 0x60
  uint16_t altitudeGps = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
#endif /* CAYENNE_LPP */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800b110:	2200      	movs	r2, #0
 800b112:	2102      	movs	r1, #2
 800b114:	48b2      	ldr	r0, [pc, #712]	@ (800b3e0 <SendTxData+0x304>)
 800b116:	f7fa ff57 	bl	8005fc8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800b11a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b11e:	f7f7 fbcd 	bl	80028bc <HAL_Delay>

  EnvSensors_Read(&sensor_data);
 800b122:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b126:	4618      	mov	r0, r3
 800b128:	f7f7 fc48 	bl	80029bc <EnvSensors_Read>
  temphumi_t temphumi = TempHumi();
 800b12c:	f107 0318 	add.w	r3, r7, #24
 800b130:	4618      	mov	r0, r3
 800b132:	f7f6 ffe7 	bl	8002104 <TempHumi>
  uint32_t lux = Light();
 800b136:	f7f7 f847 	bl	80021c8 <Light>
 800b13a:	65b8      	str	r0, [r7, #88]	@ 0x58
  soil_t soil = SoilTempHumi();
 800b13c:	f107 0310 	add.w	r3, r7, #16
 800b140:	4618      	mov	r0, r3
 800b142:	f7f7 f899 	bl	8002278 <SoilTempHumi>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800b146:	2201      	movs	r2, #1
 800b148:	2102      	movs	r1, #2
 800b14a:	48a5      	ldr	r0, [pc, #660]	@ (800b3e0 <SendTxData+0x304>)
 800b14c:	f7fa ff3c 	bl	8005fc8 <HAL_GPIO_WritePin>

  int temp_i = (int)(temphumi.temperature * 100);
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	49a4      	ldr	r1, [pc, #656]	@ (800b3e4 <SendTxData+0x308>)
 800b154:	4618      	mov	r0, r3
 800b156:	f7f5 fe0d 	bl	8000d74 <__aeabi_fmul>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7f5 ff59 	bl	8001014 <__aeabi_f2iz>
 800b162:	4603      	mov	r3, r0
 800b164:	657b      	str	r3, [r7, #84]	@ 0x54
  int humi_i = (int)(temphumi.humidity * 100);
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	499e      	ldr	r1, [pc, #632]	@ (800b3e4 <SendTxData+0x308>)
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 fe02 	bl	8000d74 <__aeabi_fmul>
 800b170:	4603      	mov	r3, r0
 800b172:	4618      	mov	r0, r3
 800b174:	f7f5 ff4e 	bl	8001014 <__aeabi_f2iz>
 800b178:	4603      	mov	r3, r0
 800b17a:	653b      	str	r3, [r7, #80]	@ 0x50
  int dew_i = (int)(temphumi.dewpoint * 100);
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	4999      	ldr	r1, [pc, #612]	@ (800b3e4 <SendTxData+0x308>)
 800b180:	4618      	mov	r0, r3
 800b182:	f7f5 fdf7 	bl	8000d74 <__aeabi_fmul>
 800b186:	4603      	mov	r3, r0
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 ff43 	bl	8001014 <__aeabi_f2iz>
 800b18e:	4603      	mov	r3, r0
 800b190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int press_i = (int)(temphumi.pressure * 10);
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	4994      	ldr	r1, [pc, #592]	@ (800b3e8 <SendTxData+0x30c>)
 800b196:	4618      	mov	r0, r3
 800b198:	f7f5 fdec 	bl	8000d74 <__aeabi_fmul>
 800b19c:	4603      	mov	r3, r0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7f5 ff38 	bl	8001014 <__aeabi_f2iz>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  APP_LOG(TS_ON, VLEVEL_M,
 800b1a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1aa:	4a90      	ldr	r2, [pc, #576]	@ (800b3ec <SendTxData+0x310>)
 800b1ac:	fb82 1203 	smull	r1, r2, r2, r3
 800b1b0:	1152      	asrs	r2, r2, #5
 800b1b2:	17db      	asrs	r3, r3, #31
 800b1b4:	1ad6      	subs	r6, r2, r3
 800b1b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1b8:	4a8c      	ldr	r2, [pc, #560]	@ (800b3ec <SendTxData+0x310>)
 800b1ba:	fb82 1203 	smull	r1, r2, r2, r3
 800b1be:	1151      	asrs	r1, r2, #5
 800b1c0:	17da      	asrs	r2, r3, #31
 800b1c2:	1a89      	subs	r1, r1, r2
 800b1c4:	2264      	movs	r2, #100	@ 0x64
 800b1c6:	fb01 f202 	mul.w	r2, r1, r2
 800b1ca:	1a99      	subs	r1, r3, r2
 800b1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1ce:	4a87      	ldr	r2, [pc, #540]	@ (800b3ec <SendTxData+0x310>)
 800b1d0:	fb82 0203 	smull	r0, r2, r2, r3
 800b1d4:	1152      	asrs	r2, r2, #5
 800b1d6:	17db      	asrs	r3, r3, #31
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1de:	4a83      	ldr	r2, [pc, #524]	@ (800b3ec <SendTxData+0x310>)
 800b1e0:	fb82 0203 	smull	r0, r2, r2, r3
 800b1e4:	1150      	asrs	r0, r2, #5
 800b1e6:	17da      	asrs	r2, r3, #31
 800b1e8:	1a80      	subs	r0, r0, r2
 800b1ea:	2264      	movs	r2, #100	@ 0x64
 800b1ec:	fb00 f202 	mul.w	r2, r0, r2
 800b1f0:	1a98      	subs	r0, r3, r2
 800b1f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1f4:	4a7d      	ldr	r2, [pc, #500]	@ (800b3ec <SendTxData+0x310>)
 800b1f6:	fb82 4203 	smull	r4, r2, r2, r3
 800b1fa:	1152      	asrs	r2, r2, #5
 800b1fc:	17db      	asrs	r3, r3, #31
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	60ba      	str	r2, [r7, #8]
 800b202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b204:	4a79      	ldr	r2, [pc, #484]	@ (800b3ec <SendTxData+0x310>)
 800b206:	fb82 4203 	smull	r4, r2, r2, r3
 800b20a:	1154      	asrs	r4, r2, #5
 800b20c:	17da      	asrs	r2, r3, #31
 800b20e:	1aa4      	subs	r4, r4, r2
 800b210:	2264      	movs	r2, #100	@ 0x64
 800b212:	fb04 f202 	mul.w	r2, r4, r2
 800b216:	1a9c      	subs	r4, r3, r2
 800b218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b21a:	4a75      	ldr	r2, [pc, #468]	@ (800b3f0 <SendTxData+0x314>)
 800b21c:	fb82 5203 	smull	r5, r2, r2, r3
 800b220:	1092      	asrs	r2, r2, #2
 800b222:	17db      	asrs	r3, r3, #31
 800b224:	1ad5      	subs	r5, r2, r3
 800b226:	607d      	str	r5, [r7, #4]
 800b228:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800b22a:	4b71      	ldr	r3, [pc, #452]	@ (800b3f0 <SendTxData+0x314>)
 800b22c:	fb83 2305 	smull	r2, r3, r3, r5
 800b230:	109a      	asrs	r2, r3, #2
 800b232:	17eb      	asrs	r3, r5, #31
 800b234:	1ad2      	subs	r2, r2, r3
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	1aea      	subs	r2, r5, r3
 800b240:	9207      	str	r2, [sp, #28]
 800b242:	687d      	ldr	r5, [r7, #4]
 800b244:	9506      	str	r5, [sp, #24]
 800b246:	9405      	str	r4, [sp, #20]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	9204      	str	r2, [sp, #16]
 800b24c:	9003      	str	r0, [sp, #12]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	9302      	str	r3, [sp, #8]
 800b252:	9101      	str	r1, [sp, #4]
 800b254:	9600      	str	r6, [sp, #0]
 800b256:	4b67      	ldr	r3, [pc, #412]	@ (800b3f4 <SendTxData+0x318>)
 800b258:	2201      	movs	r2, #1
 800b25a:	2100      	movs	r1, #0
 800b25c:	2002      	movs	r0, #2
 800b25e:	f011 fac9 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          temp_i / 100, temp_i % 100,
          humi_i / 100, humi_i % 100,
          dew_i / 100, dew_i % 100,
          press_i / 10, press_i % 10);

  APP_LOG(TS_ON, VLEVEL_M, "Light: %d lux\r\n", lux);
 800b262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4b64      	ldr	r3, [pc, #400]	@ (800b3f8 <SendTxData+0x31c>)
 800b268:	2201      	movs	r2, #1
 800b26a:	2100      	movs	r1, #0
 800b26c:	2002      	movs	r0, #2
 800b26e:	f011 fac1 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>

  int soil_temp_i = (int)(soil.temperature * 10);
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	495c      	ldr	r1, [pc, #368]	@ (800b3e8 <SendTxData+0x30c>)
 800b276:	4618      	mov	r0, r3
 800b278:	f7f5 fd7c 	bl	8000d74 <__aeabi_fmul>
 800b27c:	4603      	mov	r3, r0
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f5 fec8 	bl	8001014 <__aeabi_f2iz>
 800b284:	4603      	mov	r3, r0
 800b286:	647b      	str	r3, [r7, #68]	@ 0x44
  int soil_humi_i = (int)(soil.humidity * 10);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	4957      	ldr	r1, [pc, #348]	@ (800b3e8 <SendTxData+0x30c>)
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f5 fd71 	bl	8000d74 <__aeabi_fmul>
 800b292:	4603      	mov	r3, r0
 800b294:	4618      	mov	r0, r3
 800b296:	f7f5 febd 	bl	8001014 <__aeabi_f2iz>
 800b29a:	4603      	mov	r3, r0
 800b29c:	643b      	str	r3, [r7, #64]	@ 0x40

  APP_LOG(TS_ON, VLEVEL_M,
 800b29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a0:	4a53      	ldr	r2, [pc, #332]	@ (800b3f0 <SendTxData+0x314>)
 800b2a2:	fb82 1203 	smull	r1, r2, r2, r3
 800b2a6:	1092      	asrs	r2, r2, #2
 800b2a8:	17db      	asrs	r3, r3, #31
 800b2aa:	1ad4      	subs	r4, r2, r3
 800b2ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2ae:	4b50      	ldr	r3, [pc, #320]	@ (800b3f0 <SendTxData+0x314>)
 800b2b0:	fb83 2301 	smull	r2, r3, r3, r1
 800b2b4:	109a      	asrs	r2, r3, #2
 800b2b6:	17cb      	asrs	r3, r1, #31
 800b2b8:	1ad2      	subs	r2, r2, r3
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	1aca      	subs	r2, r1, r3
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2c6:	494a      	ldr	r1, [pc, #296]	@ (800b3f0 <SendTxData+0x314>)
 800b2c8:	fb81 0103 	smull	r0, r1, r1, r3
 800b2cc:	1089      	asrs	r1, r1, #2
 800b2ce:	17db      	asrs	r3, r3, #31
 800b2d0:	1acd      	subs	r5, r1, r3
 800b2d2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b2d4:	4b46      	ldr	r3, [pc, #280]	@ (800b3f0 <SendTxData+0x314>)
 800b2d6:	fb83 1300 	smull	r1, r3, r3, r0
 800b2da:	1099      	asrs	r1, r3, #2
 800b2dc:	17c3      	asrs	r3, r0, #31
 800b2de:	1ac9      	subs	r1, r1, r3
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	1ac1      	subs	r1, r0, r3
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	9502      	str	r5, [sp, #8]
 800b2ee:	9201      	str	r2, [sp, #4]
 800b2f0:	9400      	str	r4, [sp, #0]
 800b2f2:	4b42      	ldr	r3, [pc, #264]	@ (800b3fc <SendTxData+0x320>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	2002      	movs	r0, #2
 800b2fa:	f011 fa7b 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
          "Soil Temp: %d.%01d C, Soil Humi: %d.%01d %%RH\r\n",
          soil_temp_i / 10, soil_temp_i % 10,
          soil_humi_i / 10, soil_humi_i % 10);

  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b300:	4618      	mov	r0, r3
 800b302:	f7f5 fe87 	bl	8001014 <__aeabi_f2iz>
 800b306:	4603      	mov	r3, r0
 800b308:	b21b      	sxth	r3, r3
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	4b3c      	ldr	r3, [pc, #240]	@ (800b400 <SendTxData+0x324>)
 800b30e:	2201      	movs	r2, #1
 800b310:	2100      	movs	r1, #0
 800b312:	2002      	movs	r0, #2
 800b314:	f011 fa6e 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Buffer[i++] = (temp_i >> 8) & 0xFF;
 800b318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b31a:	1218      	asrs	r0, r3, #8
 800b31c:	4b39      	ldr	r3, [pc, #228]	@ (800b404 <SendTxData+0x328>)
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b322:	1c59      	adds	r1, r3, #1
 800b324:	6739      	str	r1, [r7, #112]	@ 0x70
 800b326:	4413      	add	r3, r2
 800b328:	b2c2      	uxtb	r2, r0
 800b32a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = temp_i & 0xFF;
 800b32c:	4b35      	ldr	r3, [pc, #212]	@ (800b404 <SendTxData+0x328>)
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b332:	1c59      	adds	r1, r3, #1
 800b334:	6739      	str	r1, [r7, #112]	@ 0x70
 800b336:	4413      	add	r3, r2
 800b338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b33a:	b2d2      	uxtb	r2, r2
 800b33c:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (humi_i >> 8) & 0xFF;
 800b33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b340:	1218      	asrs	r0, r3, #8
 800b342:	4b30      	ldr	r3, [pc, #192]	@ (800b404 <SendTxData+0x328>)
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b348:	1c59      	adds	r1, r3, #1
 800b34a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b34c:	4413      	add	r3, r2
 800b34e:	b2c2      	uxtb	r2, r0
 800b350:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = humi_i & 0xFF;
 800b352:	4b2c      	ldr	r3, [pc, #176]	@ (800b404 <SendTxData+0x328>)
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b358:	1c59      	adds	r1, r3, #1
 800b35a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b35c:	4413      	add	r3, r2
 800b35e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b360:	b2d2      	uxtb	r2, r2
 800b362:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (press_i >> 8) & 0xFF;
 800b364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b366:	1218      	asrs	r0, r3, #8
 800b368:	4b26      	ldr	r3, [pc, #152]	@ (800b404 <SendTxData+0x328>)
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b36e:	1c59      	adds	r1, r3, #1
 800b370:	6739      	str	r1, [r7, #112]	@ 0x70
 800b372:	4413      	add	r3, r2
 800b374:	b2c2      	uxtb	r2, r0
 800b376:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = press_i & 0xFF;
 800b378:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <SendTxData+0x328>)
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b37e:	1c59      	adds	r1, r3, #1
 800b380:	6739      	str	r1, [r7, #112]	@ 0x70
 800b382:	4413      	add	r3, r2
 800b384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (lux >> 24) & 0xFF;
 800b38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b38c:	0e18      	lsrs	r0, r3, #24
 800b38e:	4b1d      	ldr	r3, [pc, #116]	@ (800b404 <SendTxData+0x328>)
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b394:	1c59      	adds	r1, r3, #1
 800b396:	6739      	str	r1, [r7, #112]	@ 0x70
 800b398:	4413      	add	r3, r2
 800b39a:	b2c2      	uxtb	r2, r0
 800b39c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (lux >> 16) & 0xFF;
 800b39e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3a0:	0c18      	lsrs	r0, r3, #16
 800b3a2:	4b18      	ldr	r3, [pc, #96]	@ (800b404 <SendTxData+0x328>)
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3a8:	1c59      	adds	r1, r3, #1
 800b3aa:	6739      	str	r1, [r7, #112]	@ 0x70
 800b3ac:	4413      	add	r3, r2
 800b3ae:	b2c2      	uxtb	r2, r0
 800b3b0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (lux >> 8) & 0xFF;
 800b3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3b4:	0a18      	lsrs	r0, r3, #8
 800b3b6:	4b13      	ldr	r3, [pc, #76]	@ (800b404 <SendTxData+0x328>)
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3bc:	1c59      	adds	r1, r3, #1
 800b3be:	6739      	str	r1, [r7, #112]	@ 0x70
 800b3c0:	4413      	add	r3, r2
 800b3c2:	b2c2      	uxtb	r2, r0
 800b3c4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = lux & 0xFF;
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b404 <SendTxData+0x328>)
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3cc:	1c59      	adds	r1, r3, #1
 800b3ce:	6739      	str	r1, [r7, #112]	@ 0x70
 800b3d0:	4413      	add	r3, r2
 800b3d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3d4:	b2d2      	uxtb	r2, r2
 800b3d6:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (soil_temp_i >> 8) & 0xFF;
 800b3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3da:	1218      	asrs	r0, r3, #8
 800b3dc:	e014      	b.n	800b408 <SendTxData+0x32c>
 800b3de:	bf00      	nop
 800b3e0:	48000800 	.word	0x48000800
 800b3e4:	42c80000 	.word	0x42c80000
 800b3e8:	41200000 	.word	0x41200000
 800b3ec:	51eb851f 	.word	0x51eb851f
 800b3f0:	66666667 	.word	0x66666667
 800b3f4:	0801f9d0 	.word	0x0801f9d0
 800b3f8:	0801fa20 	.word	0x0801fa20
 800b3fc:	0801fa30 	.word	0x0801fa30
 800b400:	0801fa60 	.word	0x0801fa60
 800b404:	20000070 	.word	0x20000070
 800b408:	4ba1      	ldr	r3, [pc, #644]	@ (800b690 <SendTxData+0x5b4>)
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b40e:	1c59      	adds	r1, r3, #1
 800b410:	6739      	str	r1, [r7, #112]	@ 0x70
 800b412:	4413      	add	r3, r2
 800b414:	b2c2      	uxtb	r2, r0
 800b416:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = soil_temp_i & 0xFF;
 800b418:	4b9d      	ldr	r3, [pc, #628]	@ (800b690 <SendTxData+0x5b4>)
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b41e:	1c59      	adds	r1, r3, #1
 800b420:	6739      	str	r1, [r7, #112]	@ 0x70
 800b422:	4413      	add	r3, r2
 800b424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (soil_humi_i >> 8) & 0xFF;
 800b42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b42c:	1218      	asrs	r0, r3, #8
 800b42e:	4b98      	ldr	r3, [pc, #608]	@ (800b690 <SendTxData+0x5b4>)
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b434:	1c59      	adds	r1, r3, #1
 800b436:	6739      	str	r1, [r7, #112]	@ 0x70
 800b438:	4413      	add	r3, r2
 800b43a:	b2c2      	uxtb	r2, r0
 800b43c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = soil_humi_i & 0xFF;
 800b43e:	4b94      	ldr	r3, [pc, #592]	@ (800b690 <SendTxData+0x5b4>)
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b444:	1c59      	adds	r1, r3, #1
 800b446:	6739      	str	r1, [r7, #112]	@ 0x70
 800b448:	4413      	add	r3, r2
 800b44a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	701a      	strb	r2, [r3, #0]

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b450:	4b8f      	ldr	r3, [pc, #572]	@ (800b690 <SendTxData+0x5b4>)
 800b452:	2202      	movs	r2, #2
 800b454:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = i;
 800b456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b8d      	ldr	r3, [pc, #564]	@ (800b690 <SendTxData+0x5b4>)
 800b45c:	705a      	strb	r2, [r3, #1]



  AppData.Port = LORAWAN_USER_APP_PORT;
 800b45e:	4b8c      	ldr	r3, [pc, #560]	@ (800b690 <SendTxData+0x5b4>)
 800b460:	2202      	movs	r2, #2
 800b462:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	498b      	ldr	r1, [pc, #556]	@ (800b694 <SendTxData+0x5b8>)
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f5 fc83 	bl	8000d74 <__aeabi_fmul>
 800b46e:	4603      	mov	r3, r0
 800b470:	4618      	mov	r0, r3
 800b472:	f7f5 fdf5 	bl	8001060 <__aeabi_f2uiz>
 800b476:	4603      	mov	r3, r0
 800b478:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
  temperature = (int16_t)(sensor_data.temperature);
 800b47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f5 fdc8 	bl	8001014 <__aeabi_f2iz>
 800b484:	4603      	mov	r3, r0
 800b486:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48c:	4982      	ldr	r1, [pc, #520]	@ (800b698 <SendTxData+0x5bc>)
 800b48e:	4618      	mov	r0, r3
 800b490:	f7f5 fc70 	bl	8000d74 <__aeabi_fmul>
 800b494:	4603      	mov	r3, r0
 800b496:	497f      	ldr	r1, [pc, #508]	@ (800b694 <SendTxData+0x5b8>)
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f5 fd1f 	bl	8000edc <__aeabi_fdiv>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f5 fddd 	bl	8001060 <__aeabi_f2uiz>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  AppData.Buffer[i++] = AppLedStateOn;
 800b4ac:	4b78      	ldr	r3, [pc, #480]	@ (800b690 <SendTxData+0x5b4>)
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4b2:	1c59      	adds	r1, r3, #1
 800b4b4:	6739      	str	r1, [r7, #112]	@ 0x70
 800b4b6:	4413      	add	r3, r2
 800b4b8:	4a78      	ldr	r2, [pc, #480]	@ (800b69c <SendTxData+0x5c0>)
 800b4ba:	7812      	ldrb	r2, [r2, #0]
 800b4bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b4be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b4c2:	0a1b      	lsrs	r3, r3, #8
 800b4c4:	b298      	uxth	r0, r3
 800b4c6:	4b72      	ldr	r3, [pc, #456]	@ (800b690 <SendTxData+0x5b4>)
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4cc:	1c59      	adds	r1, r3, #1
 800b4ce:	6739      	str	r1, [r7, #112]	@ 0x70
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b2c2      	uxtb	r2, r0
 800b4d4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b4d6:	4b6e      	ldr	r3, [pc, #440]	@ (800b690 <SendTxData+0x5b4>)
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4dc:	1c59      	adds	r1, r3, #1
 800b4de:	6739      	str	r1, [r7, #112]	@ 0x70
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b4ea:	4b69      	ldr	r3, [pc, #420]	@ (800b690 <SendTxData+0x5b4>)
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4f0:	1c59      	adds	r1, r3, #1
 800b4f2:	6739      	str	r1, [r7, #112]	@ 0x70
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b4fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b502:	0a1b      	lsrs	r3, r3, #8
 800b504:	b298      	uxth	r0, r3
 800b506:	4b62      	ldr	r3, [pc, #392]	@ (800b690 <SendTxData+0x5b4>)
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b50c:	1c59      	adds	r1, r3, #1
 800b50e:	6739      	str	r1, [r7, #112]	@ 0x70
 800b510:	4413      	add	r3, r2
 800b512:	b2c2      	uxtb	r2, r0
 800b514:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b516:	4b5e      	ldr	r3, [pc, #376]	@ (800b690 <SendTxData+0x5b4>)
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b51c:	1c59      	adds	r1, r3, #1
 800b51e:	6739      	str	r1, [r7, #112]	@ 0x70
 800b520:	4413      	add	r3, r2
 800b522:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 800b526:	b2d2      	uxtb	r2, r2
 800b528:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b52a:	4b5d      	ldr	r3, [pc, #372]	@ (800b6a0 <SendTxData+0x5c4>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b08      	cmp	r3, #8
 800b530:	d007      	beq.n	800b542 <SendTxData+0x466>
 800b532:	4b5b      	ldr	r3, [pc, #364]	@ (800b6a0 <SendTxData+0x5c4>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d003      	beq.n	800b542 <SendTxData+0x466>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b53a:	4b59      	ldr	r3, [pc, #356]	@ (800b6a0 <SendTxData+0x5c4>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d120      	bne.n	800b584 <SendTxData+0x4a8>
  {
    AppData.Buffer[i++] = 0;
 800b542:	4b53      	ldr	r3, [pc, #332]	@ (800b690 <SendTxData+0x5b4>)
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b548:	1c59      	adds	r1, r3, #1
 800b54a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b54c:	4413      	add	r3, r2
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b552:	4b4f      	ldr	r3, [pc, #316]	@ (800b690 <SendTxData+0x5b4>)
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b558:	1c59      	adds	r1, r3, #1
 800b55a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b55c:	4413      	add	r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b562:	4b4b      	ldr	r3, [pc, #300]	@ (800b690 <SendTxData+0x5b4>)
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b568:	1c59      	adds	r1, r3, #1
 800b56a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b56c:	4413      	add	r3, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b572:	4b47      	ldr	r3, [pc, #284]	@ (800b690 <SendTxData+0x5b4>)
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b578:	1c59      	adds	r1, r3, #1
 800b57a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b57c:	4413      	add	r3, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	e05d      	b.n	800b640 <SendTxData+0x564>
  }
  else
  {
    latitude = sensor_data.latitude;
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	667b      	str	r3, [r7, #100]	@ 0x64
    longitude = sensor_data.longitude;
 800b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58a:	663b      	str	r3, [r7, #96]	@ 0x60

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b58c:	4b40      	ldr	r3, [pc, #256]	@ (800b690 <SendTxData+0x5b4>)
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b592:	1c59      	adds	r1, r3, #1
 800b594:	6739      	str	r1, [r7, #112]	@ 0x70
 800b596:	18d4      	adds	r4, r2, r3
 800b598:	f7f7 f850 	bl	800263c <GetBatteryLevel>
 800b59c:	4603      	mov	r3, r0
 800b59e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b5a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5a2:	1418      	asrs	r0, r3, #16
 800b5a4:	4b3a      	ldr	r3, [pc, #232]	@ (800b690 <SendTxData+0x5b4>)
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5aa:	1c59      	adds	r1, r3, #1
 800b5ac:	6739      	str	r1, [r7, #112]	@ 0x70
 800b5ae:	4413      	add	r3, r2
 800b5b0:	b2c2      	uxtb	r2, r0
 800b5b2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b5b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5b6:	1218      	asrs	r0, r3, #8
 800b5b8:	4b35      	ldr	r3, [pc, #212]	@ (800b690 <SendTxData+0x5b4>)
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5be:	1c59      	adds	r1, r3, #1
 800b5c0:	6739      	str	r1, [r7, #112]	@ 0x70
 800b5c2:	4413      	add	r3, r2
 800b5c4:	b2c2      	uxtb	r2, r0
 800b5c6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b5c8:	4b31      	ldr	r3, [pc, #196]	@ (800b690 <SendTxData+0x5b4>)
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	6739      	str	r1, [r7, #112]	@ 0x70
 800b5d2:	4413      	add	r3, r2
 800b5d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b5da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5dc:	1418      	asrs	r0, r3, #16
 800b5de:	4b2c      	ldr	r3, [pc, #176]	@ (800b690 <SendTxData+0x5b4>)
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5e4:	1c59      	adds	r1, r3, #1
 800b5e6:	6739      	str	r1, [r7, #112]	@ 0x70
 800b5e8:	4413      	add	r3, r2
 800b5ea:	b2c2      	uxtb	r2, r0
 800b5ec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b5ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5f0:	1218      	asrs	r0, r3, #8
 800b5f2:	4b27      	ldr	r3, [pc, #156]	@ (800b690 <SendTxData+0x5b4>)
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5f8:	1c59      	adds	r1, r3, #1
 800b5fa:	6739      	str	r1, [r7, #112]	@ 0x70
 800b5fc:	4413      	add	r3, r2
 800b5fe:	b2c2      	uxtb	r2, r0
 800b600:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b602:	4b23      	ldr	r3, [pc, #140]	@ (800b690 <SendTxData+0x5b4>)
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b608:	1c59      	adds	r1, r3, #1
 800b60a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b60c:	4413      	add	r3, r2
 800b60e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b614:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b618:	0a1b      	lsrs	r3, r3, #8
 800b61a:	b298      	uxth	r0, r3
 800b61c:	4b1c      	ldr	r3, [pc, #112]	@ (800b690 <SendTxData+0x5b4>)
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b622:	1c59      	adds	r1, r3, #1
 800b624:	6739      	str	r1, [r7, #112]	@ 0x70
 800b626:	4413      	add	r3, r2
 800b628:	b2c2      	uxtb	r2, r0
 800b62a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b62c:	4b18      	ldr	r3, [pc, #96]	@ (800b690 <SendTxData+0x5b4>)
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b632:	1c59      	adds	r1, r3, #1
 800b634:	6739      	str	r1, [r7, #112]	@ 0x70
 800b636:	4413      	add	r3, r2
 800b638:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b640:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b642:	b2da      	uxtb	r2, r3
 800b644:	4b12      	ldr	r3, [pc, #72]	@ (800b690 <SendTxData+0x5b4>)
 800b646:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b648:	4b16      	ldr	r3, [pc, #88]	@ (800b6a4 <SendTxData+0x5c8>)
 800b64a:	7a5b      	ldrb	r3, [r3, #9]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <SendTxData+0x584>
 800b650:	f002 fa14 	bl	800da7c <LmHandlerJoinStatus>
 800b654:	4603      	mov	r3, r0
 800b656:	2b01      	cmp	r3, #1
 800b658:	d102      	bne.n	800b660 <SendTxData+0x584>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b65a:	4812      	ldr	r0, [pc, #72]	@ (800b6a4 <SendTxData+0x5c8>)
 800b65c:	f010 fec0 	bl	801c3e0 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b660:	4b0f      	ldr	r3, [pc, #60]	@ (800b6a0 <SendTxData+0x5c4>)
 800b662:	78db      	ldrb	r3, [r3, #3]
 800b664:	2200      	movs	r2, #0
 800b666:	4619      	mov	r1, r3
 800b668:	4809      	ldr	r0, [pc, #36]	@ (800b690 <SendTxData+0x5b4>)
 800b66a:	f002 fa23 	bl	800dab4 <LmHandlerSend>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b674:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d117      	bne.n	800b6ac <SendTxData+0x5d0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b67c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a8 <SendTxData+0x5cc>)
 800b67e:	2201      	movs	r2, #1
 800b680:	2100      	movs	r1, #0
 800b682:	2001      	movs	r0, #1
 800b684:	f011 f8b6 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    LedBlink();
 800b688:	f7f6 fe58 	bl	800233c <LedBlink>
 800b68c:	e025      	b.n	800b6da <SendTxData+0x5fe>
 800b68e:	bf00      	nop
 800b690:	20000070 	.word	0x20000070
 800b694:	41200000 	.word	0x41200000
 800b698:	42c80000 	.word	0x42c80000
 800b69c:	200006be 	.word	0x200006be
 800b6a0:	20000058 	.word	0x20000058
 800b6a4:	200006f0 	.word	0x200006f0
 800b6a8:	0801fa6c 	.word	0x0801fa6c

    //EnterStopModeForMinutes(3);
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b6ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b6b0:	f113 0f06 	cmn.w	r3, #6
 800b6b4:	d111      	bne.n	800b6da <SendTxData+0x5fe>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b6b6:	f002 f955 	bl	800d964 <LmHandlerGetDutyCycleWaitTime>
 800b6ba:	6778      	str	r0, [r7, #116]	@ 0x74
    if (nextTxIn > 0)
 800b6bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00b      	beq.n	800b6da <SendTxData+0x5fe>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b6c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6c4:	4a11      	ldr	r2, [pc, #68]	@ (800b70c <SendTxData+0x630>)
 800b6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ca:	099b      	lsrs	r3, r3, #6
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	4b10      	ldr	r3, [pc, #64]	@ (800b710 <SendTxData+0x634>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	2001      	movs	r0, #1
 800b6d6:	f011 f88d 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800b6da:	4b0e      	ldr	r3, [pc, #56]	@ (800b714 <SendTxData+0x638>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10f      	bne.n	800b702 <SendTxData+0x626>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b6e2:	480d      	ldr	r0, [pc, #52]	@ (800b718 <SendTxData+0x63c>)
 800b6e4:	f010 fe7c 	bl	801c3e0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <SendTxData+0x640>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	bf38      	it	cc
 800b6f2:	4613      	movcc	r3, r2
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4808      	ldr	r0, [pc, #32]	@ (800b718 <SendTxData+0x63c>)
 800b6f8:	f010 fee2 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b6fc:	4806      	ldr	r0, [pc, #24]	@ (800b718 <SendTxData+0x63c>)
 800b6fe:	f010 fe01 	bl	801c304 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b702:	bf00      	nop
 800b704:	377c      	adds	r7, #124	@ 0x7c
 800b706:	46bd      	mov	sp, r7
 800b708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70a:	bf00      	nop
 800b70c:	10624dd3 	.word	0x10624dd3
 800b710:	0801fa7c 	.word	0x0801fa7c
 800b714:	20000598 	.word	0x20000598
 800b718:	2000059c 	.word	0x2000059c
 800b71c:	2000006c 	.word	0x2000006c

0800b720 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b728:	2100      	movs	r1, #0
 800b72a:	2002      	movs	r0, #2
 800b72c:	f010 fd34 	bl	801c198 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b730:	4803      	ldr	r0, [pc, #12]	@ (800b740 <OnTxTimerEvent+0x20>)
 800b732:	f010 fde7 	bl	801c304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	2000059c 	.word	0x2000059c

0800b744 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr

0800b756 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	bc80      	pop	{r7}
 800b778:	4770      	bx	lr
	...

0800b77c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af04      	add	r7, sp, #16
 800b782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d041      	beq.n	800b80e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d03d      	beq.n	800b80e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b792:	4821      	ldr	r0, [pc, #132]	@ (800b818 <OnTxData+0x9c>)
 800b794:	f010 fdb6 	bl	801c304 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b798:	4b20      	ldr	r3, [pc, #128]	@ (800b81c <OnTxData+0xa0>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	2002      	movs	r0, #2
 800b7a0:	f011 f828 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	7c12      	ldrb	r2, [r2, #16]
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b7bc:	9203      	str	r2, [sp, #12]
 800b7be:	9002      	str	r0, [sp, #8]
 800b7c0:	9101      	str	r1, [sp, #4]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	4b16      	ldr	r3, [pc, #88]	@ (800b820 <OnTxData+0xa4>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	2003      	movs	r0, #3
 800b7cc:	f011 f812 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b7d0:	4b14      	ldr	r3, [pc, #80]	@ (800b824 <OnTxData+0xa8>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2003      	movs	r0, #3
 800b7d8:	f011 f80c 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	7a1b      	ldrb	r3, [r3, #8]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d10e      	bne.n	800b802 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7a5b      	ldrb	r3, [r3, #9]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <OnTxData+0x74>
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b828 <OnTxData+0xac>)
 800b7ee:	e000      	b.n	800b7f2 <OnTxData+0x76>
 800b7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b82c <OnTxData+0xb0>)
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b830 <OnTxData+0xb4>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	2003      	movs	r0, #3
 800b7fc:	f010 fffa 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b800:	e005      	b.n	800b80e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b802:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <OnTxData+0xb8>)
 800b804:	2200      	movs	r2, #0
 800b806:	2100      	movs	r1, #0
 800b808:	2003      	movs	r0, #3
 800b80a:	f010 fff3 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200006c0 	.word	0x200006c0
 800b81c:	0801fa9c 	.word	0x0801fa9c
 800b820:	0801fad0 	.word	0x0801fad0
 800b824:	0801fb04 	.word	0x0801fb04
 800b828:	0801fb14 	.word	0x0801fb14
 800b82c:	0801fb18 	.word	0x0801fb18
 800b830:	0801fb20 	.word	0x0801fb20
 800b834:	0801fb34 	.word	0x0801fb34

0800b838 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d039      	beq.n	800b8ba <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d11e      	bne.n	800b88e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b850:	2100      	movs	r1, #0
 800b852:	2004      	movs	r0, #4
 800b854:	f010 fca0 	bl	801c198 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b858:	481a      	ldr	r0, [pc, #104]	@ (800b8c4 <OnJoinRequest+0x8c>)
 800b85a:	f010 fdc1 	bl	801c3e0 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b85e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c8 <OnJoinRequest+0x90>)
 800b860:	2200      	movs	r2, #0
 800b862:	2100      	movs	r1, #0
 800b864:	2002      	movs	r0, #2
 800b866:	f010 ffc5 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	799b      	ldrb	r3, [r3, #6]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d106      	bne.n	800b880 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b872:	4b16      	ldr	r3, [pc, #88]	@ (800b8cc <OnJoinRequest+0x94>)
 800b874:	2200      	movs	r2, #0
 800b876:	2100      	movs	r1, #0
 800b878:	2002      	movs	r0, #2
 800b87a:	f010 ffbb 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b87e:	e01c      	b.n	800b8ba <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b880:	4b13      	ldr	r3, [pc, #76]	@ (800b8d0 <OnJoinRequest+0x98>)
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	2002      	movs	r0, #2
 800b888:	f010 ffb4 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800b88c:	e015      	b.n	800b8ba <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b88e:	4b11      	ldr	r3, [pc, #68]	@ (800b8d4 <OnJoinRequest+0x9c>)
 800b890:	2200      	movs	r2, #0
 800b892:	2100      	movs	r1, #0
 800b894:	2002      	movs	r0, #2
 800b896:	f010 ffad 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	799b      	ldrb	r3, [r3, #6]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d10b      	bne.n	800b8ba <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b8d8 <OnJoinRequest+0xa0>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f010 ffa3 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b8dc <OnJoinRequest+0xa4>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2101      	movs	r1, #1
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f002 f85f 	bl	800d978 <LmHandlerJoin>
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	200006f0 	.word	0x200006f0
 800b8c8:	0801fb44 	.word	0x0801fb44
 800b8cc:	0801fb5c 	.word	0x0801fb5c
 800b8d0:	0801fb7c 	.word	0x0801fb7c
 800b8d4:	0801fb9c 	.word	0x0801fb9c
 800b8d8:	0801fbb8 	.word	0x0801fbb8
 800b8dc:	20000008 	.word	0x20000008

0800b8e0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e2:	b093      	sub	sp, #76	@ 0x4c
 800b8e4:	af0c      	add	r7, sp, #48	@ 0x30
 800b8e6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d056      	beq.n	800b99c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	785b      	ldrb	r3, [r3, #1]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d008      	beq.n	800b908 <OnBeaconStatusChange+0x28>
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d049      	beq.n	800b98e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800b9a4 <OnBeaconStatusChange+0xc4>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2100      	movs	r1, #0
 800b900:	2002      	movs	r0, #2
 800b902:	f010 ff77 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b906:	e049      	b.n	800b99c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	7c1b      	ldrb	r3, [r3, #16]
 800b90c:	4618      	mov	r0, r3
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b914:	461c      	mov	r4, r3
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b91c:	461d      	mov	r5, r3
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	6979      	ldr	r1, [r7, #20]
 800b928:	7d89      	ldrb	r1, [r1, #22]
 800b92a:	460e      	mov	r6, r1
 800b92c:	6979      	ldr	r1, [r7, #20]
 800b92e:	7dc9      	ldrb	r1, [r1, #23]
 800b930:	6139      	str	r1, [r7, #16]
 800b932:	6979      	ldr	r1, [r7, #20]
 800b934:	7e09      	ldrb	r1, [r1, #24]
 800b936:	60f9      	str	r1, [r7, #12]
 800b938:	6979      	ldr	r1, [r7, #20]
 800b93a:	7e49      	ldrb	r1, [r1, #25]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	7e89      	ldrb	r1, [r1, #26]
 800b942:	6079      	str	r1, [r7, #4]
 800b944:	6979      	ldr	r1, [r7, #20]
 800b946:	7ec9      	ldrb	r1, [r1, #27]
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	6979      	ldr	r1, [r7, #20]
 800b94c:	7f09      	ldrb	r1, [r1, #28]
 800b94e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b950:	f8d7 c000 	ldr.w	ip, [r7]
 800b954:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800b958:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b95c:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800b960:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b964:	f8cd c020 	str.w	ip, [sp, #32]
 800b968:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b96c:	f8cd c01c 	str.w	ip, [sp, #28]
 800b970:	6939      	ldr	r1, [r7, #16]
 800b972:	9106      	str	r1, [sp, #24]
 800b974:	9605      	str	r6, [sp, #20]
 800b976:	9204      	str	r2, [sp, #16]
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	9502      	str	r5, [sp, #8]
 800b97c:	9401      	str	r4, [sp, #4]
 800b97e:	9000      	str	r0, [sp, #0]
 800b980:	4b09      	ldr	r3, [pc, #36]	@ (800b9a8 <OnBeaconStatusChange+0xc8>)
 800b982:	2200      	movs	r2, #0
 800b984:	2100      	movs	r1, #0
 800b986:	2002      	movs	r0, #2
 800b988:	f010 ff34 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b98c:	e006      	b.n	800b99c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b98e:	4b07      	ldr	r3, [pc, #28]	@ (800b9ac <OnBeaconStatusChange+0xcc>)
 800b990:	2200      	movs	r2, #0
 800b992:	2100      	movs	r1, #0
 800b994:	2002      	movs	r0, #2
 800b996:	f010 ff2d 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b99a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b99c:	bf00      	nop
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9a4:	0801fbdc 	.word	0x0801fbdc
 800b9a8:	0801fbf4 	.word	0x0801fbf4
 800b9ac:	0801fc68 	.word	0x0801fc68

0800b9b0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	4a06      	ldr	r2, [pc, #24]	@ (800b9d8 <OnClassChange+0x28>)
 800b9be:	5cd3      	ldrb	r3, [r2, r3]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <OnClassChange+0x2c>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	2002      	movs	r0, #2
 800b9ca:	f010 ff13 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b9ce:	bf00      	nop
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0801fca4 	.word	0x0801fca4
 800b9dc:	0801fc88 	.word	0x0801fc88

0800b9e0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	f010 fbd6 	bl	801c198 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b9ec:	bf00      	nop
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b9f8:	4a0d      	ldr	r2, [pc, #52]	@ (800ba30 <OnTxPeriodicityChanged+0x40>)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ba30 <OnTxPeriodicityChanged+0x40>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d103      	bne.n	800ba0e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800ba06:	4b0a      	ldr	r3, [pc, #40]	@ (800ba30 <OnTxPeriodicityChanged+0x40>)
 800ba08:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ba0c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800ba0e:	4809      	ldr	r0, [pc, #36]	@ (800ba34 <OnTxPeriodicityChanged+0x44>)
 800ba10:	f010 fce6 	bl	801c3e0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ba14:	4b06      	ldr	r3, [pc, #24]	@ (800ba30 <OnTxPeriodicityChanged+0x40>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4806      	ldr	r0, [pc, #24]	@ (800ba34 <OnTxPeriodicityChanged+0x44>)
 800ba1c:	f010 fd50 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ba20:	4804      	ldr	r0, [pc, #16]	@ (800ba34 <OnTxPeriodicityChanged+0x44>)
 800ba22:	f010 fc6f 	bl	801c304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	2000006c 	.word	0x2000006c
 800ba34:	2000059c 	.word	0x2000059c

0800ba38 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ba42:	4a04      	ldr	r2, [pc, #16]	@ (800ba54 <OnTxFrameCtrlChanged+0x1c>)
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bc80      	pop	{r7}
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20000058 	.word	0x20000058

0800ba58 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ba62:	4a04      	ldr	r2, [pc, #16]	@ (800ba74 <OnPingSlotPeriodicityChanged+0x1c>)
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000058 	.word	0x20000058

0800ba78 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ba7c:	f002 fced 	bl	800e45a <LmHandlerHalt>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <OnSystemReset+0x1c>
 800ba86:	f001 fff9 	bl	800da7c <LmHandlerJoinStatus>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d101      	bne.n	800ba94 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ba90:	f7ff f9fe 	bl	800ae90 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ba94:	bf00      	nop
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <StopJoin>:

static void StopJoin(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ba9c:	4817      	ldr	r0, [pc, #92]	@ (800bafc <StopJoin+0x64>)
 800ba9e:	f010 fc9f 	bl	801c3e0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800baa2:	f002 fccd 	bl	800e440 <LmHandlerStop>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d006      	beq.n	800baba <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800baac:	4b14      	ldr	r3, [pc, #80]	@ (800bb00 <StopJoin+0x68>)
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	2002      	movs	r0, #2
 800bab4:	f010 fe9e 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800bab8:	e01a      	b.n	800baf0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800baba:	4b12      	ldr	r3, [pc, #72]	@ (800bb04 <StopJoin+0x6c>)
 800babc:	2200      	movs	r2, #0
 800babe:	2100      	movs	r1, #0
 800bac0:	2002      	movs	r0, #2
 800bac2:	f010 fe97 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800bac6:	4b10      	ldr	r3, [pc, #64]	@ (800bb08 <StopJoin+0x70>)
 800bac8:	2201      	movs	r2, #1
 800baca:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800bacc:	4b0f      	ldr	r3, [pc, #60]	@ (800bb0c <StopJoin+0x74>)
 800bace:	2200      	movs	r2, #0
 800bad0:	2100      	movs	r1, #0
 800bad2:	2002      	movs	r0, #2
 800bad4:	f010 fe8e 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800bad8:	480d      	ldr	r0, [pc, #52]	@ (800bb10 <StopJoin+0x78>)
 800bada:	f001 fdd1 	bl	800d680 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <StopJoin+0x70>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2101      	movs	r1, #1
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 ff47 	bl	800d978 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800baea:	4804      	ldr	r0, [pc, #16]	@ (800bafc <StopJoin+0x64>)
 800baec:	f010 fc0a 	bl	801c304 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800baf0:	4808      	ldr	r0, [pc, #32]	@ (800bb14 <StopJoin+0x7c>)
 800baf2:	f010 fc07 	bl	801c304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800baf6:	bf00      	nop
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	2000059c 	.word	0x2000059c
 800bb00:	0801fca8 	.word	0x0801fca8
 800bb04:	0801fcc8 	.word	0x0801fcc8
 800bb08:	20000008 	.word	0x20000008
 800bb0c:	0801fcdc 	.word	0x0801fcdc
 800bb10:	20000058 	.word	0x20000058
 800bb14:	200005b4 	.word	0x200005b4

0800bb18 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bb20:	4b05      	ldr	r3, [pc, #20]	@ (800bb38 <OnStopJoinTimerEvent+0x20>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d103      	bne.n	800bb30 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bb28:	2100      	movs	r1, #0
 800bb2a:	2008      	movs	r0, #8
 800bb2c:	f010 fb34 	bl	801c198 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20000008 	.word	0x20000008

0800bb3c <StoreContext>:

static void StoreContext(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bb42:	23ff      	movs	r3, #255	@ 0xff
 800bb44:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bb46:	f002 fc95 	bl	800e474 <LmHandlerNvmDataStore>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb52:	f113 0f08 	cmn.w	r3, #8
 800bb56:	d106      	bne.n	800bb66 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800bb58:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <StoreContext+0x48>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	2002      	movs	r0, #2
 800bb60:	f010 fe48 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800bb64:	e00a      	b.n	800bb7c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800bb66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6e:	d105      	bne.n	800bb7c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800bb70:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <StoreContext+0x4c>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	2002      	movs	r0, #2
 800bb78:	f010 fe3c 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bb7c:	bf00      	nop
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801fcfc 	.word	0x0801fcfc
 800bb88:	0801fd14 	.word	0x0801fd14

0800bb8c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d106      	bne.n	800bbaa <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800bb9c:	4b08      	ldr	r3, [pc, #32]	@ (800bbc0 <OnNvmDataChange+0x34>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	2002      	movs	r0, #2
 800bba4:	f010 fe26 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800bba8:	e005      	b.n	800bbb6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800bbaa:	4b06      	ldr	r3, [pc, #24]	@ (800bbc4 <OnNvmDataChange+0x38>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	2002      	movs	r0, #2
 800bbb2:	f010 fe1f 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0801fd2c 	.word	0x0801fd2c
 800bbc4:	0801fd40 	.word	0x0801fd40

0800bbc8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800bbd2:	f7f9 fdad 	bl	8005730 <HAL_FLASH_Unlock>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11c      	bne.n	800bc16 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800bbdc:	4b10      	ldr	r3, [pc, #64]	@ (800bc20 <OnStoreContextRequest+0x58>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	029a      	lsls	r2, r3, #10
 800bbe2:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <OnStoreContextRequest+0x5c>)
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800bbea:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbee:	fb01 f303 	mul.w	r3, r1, r3
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	0adb      	lsrs	r3, r3, #11
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7f5 fe51 	bl	80018a2 <FLASH_IF_EraseByPages>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d105      	bne.n	800bc12 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800bc06:	2300      	movs	r3, #0
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	4806      	ldr	r0, [pc, #24]	@ (800bc28 <OnStoreContextRequest+0x60>)
 800bc0e:	f7f5 fd67 	bl	80016e0 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800bc12:	f7f9 fdaf 	bl	8005774 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	1fff75e0 	.word	0x1fff75e0
 800bc24:	03fffc00 	.word	0x03fffc00
 800bc28:	0803f000 	.word	0x0803f000

0800bc2c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	4903      	ldr	r1, [pc, #12]	@ (800bc4c <OnRestoreContextRequest+0x20>)
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f00f fd8e 	bl	801b760 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	0803f000 	.word	0x0803f000

0800bc50 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800bc54:	4b15      	ldr	r3, [pc, #84]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800bc5a:	4b14      	ldr	r3, [pc, #80]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800bc60:	4b12      	ldr	r3, [pc, #72]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bc66:	4b11      	ldr	r3, [pc, #68]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f043 0301 	orr.w	r3, r3, #1
 800bc74:	4a0d      	ldr	r2, [pc, #52]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc76:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800bc78:	4b0c      	ldr	r3, [pc, #48]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10d      	bne.n	800bc9c <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800bc80:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb0 <LoraInfo_Init+0x60>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	2100      	movs	r1, #0
 800bc86:	2000      	movs	r0, #0
 800bc88:	f010 fdb4 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800bc8c:	bf00      	nop
 800bc8e:	f010 fd9f 	bl	801c7d0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d1fa      	bne.n	800bc8e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800bc98:	bf00      	nop
 800bc9a:	e7fd      	b.n	800bc98 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800bc9c:	4b03      	ldr	r3, [pc, #12]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800bca2:	4b02      	ldr	r3, [pc, #8]	@ (800bcac <LoraInfo_Init+0x5c>)
 800bca4:	2203      	movs	r2, #3
 800bca6:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800bca8:	bf00      	nop
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20000708 	.word	0x20000708
 800bcb0:	0801fd54 	.word	0x0801fd54

0800bcb4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800bcb8:	4b02      	ldr	r3, [pc, #8]	@ (800bcc4 <LoraInfo_GetPtr+0x10>)
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bc80      	pop	{r7}
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20000708 	.word	0x20000708

0800bcc8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800bccc:	f7f7 fcd1 	bl	8003672 <BSP_RADIO_Init>
 800bcd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	4603      	mov	r3, r0
 800bcde:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7f7 fcf6 	bl	80036d4 <BSP_RADIO_ConfigRFSwitch>
 800bce8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800bcf6:	f7f7 fd3b 	bl	8003770 <BSP_RADIO_GetTxConfig>
 800bcfa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800bd04:	f7f7 fd3b 	bl	800377e <BSP_RADIO_IsTCXO>
 800bd08:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800bd12:	f7f7 fd3b 	bl	800378c <BSP_RADIO_IsDCDC>
 800bd16:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f7 fd36 	bl	800379a <BSP_RADIO_GetRFOMaxPowerConfig>
 800bd2e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	33f1      	adds	r3, #241	@ 0xf1
 800bd44:	2210      	movs	r2, #16
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f00c fa3f 	bl	80181cc <memset1>
    ctx->M_n = 0;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	22f0      	movs	r2, #240	@ 0xf0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f00c fa35 	bl	80181cc <memset1>
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	461a      	mov	r2, r3
 800bd78:	2110      	movs	r1, #16
 800bd7a:	6838      	ldr	r0, [r7, #0]
 800bd7c:	f000 fe5c 	bl	800ca38 <lorawan_aes_set_key>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08c      	sub	sp, #48	@ 0x30
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 80a1 	beq.w	800bee2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bda6:	f1c3 0310 	rsb	r3, r3, #16
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	bf28      	it	cs
 800bdb0:	4613      	movcs	r3, r2
 800bdb2:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bdc0:	4413      	add	r3, r2
 800bdc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc4:	b292      	uxth	r2, r2
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f00c f9c4 	bl	8018156 <memcpy1>
        ctx->M_n += mlen;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd6:	441a      	add	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bde4:	2b0f      	cmp	r3, #15
 800bde6:	f240 808d 	bls.w	800bf04 <AES_CMAC_Update+0x17c>
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	f000 8088 	beq.w	800bf04 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdf8:	e015      	b.n	800be26 <AES_CMAC_Update+0x9e>
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	4413      	add	r3, r2
 800be00:	33f1      	adds	r3, #241	@ 0xf1
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be08:	440b      	add	r3, r1
 800be0a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	4053      	eors	r3, r2
 800be12:	b2d9      	uxtb	r1, r3
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be18:	4413      	add	r3, r2
 800be1a:	33f1      	adds	r3, #241	@ 0xf1
 800be1c:	460a      	mov	r2, r1
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be22:	3301      	adds	r3, #1
 800be24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be28:	2b0f      	cmp	r3, #15
 800be2a:	dde6      	ble.n	800bdfa <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800be32:	f107 0314 	add.w	r3, r7, #20
 800be36:	2210      	movs	r2, #16
 800be38:	4618      	mov	r0, r3
 800be3a:	f00c f98c 	bl	8018156 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	f107 0114 	add.w	r1, r7, #20
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 fed3 	bl	800cbf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	33f1      	adds	r3, #241	@ 0xf1
 800be52:	f107 0114 	add.w	r1, r7, #20
 800be56:	2210      	movs	r2, #16
 800be58:	4618      	mov	r0, r3
 800be5a:	f00c f97c 	bl	8018156 <memcpy1>

        data += mlen;
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	4413      	add	r3, r2
 800be64:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800be6e:	e038      	b.n	800bee2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800be70:	2300      	movs	r3, #0
 800be72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be74:	e013      	b.n	800be9e <AES_CMAC_Update+0x116>
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7a:	4413      	add	r3, r2
 800be7c:	33f1      	adds	r3, #241	@ 0xf1
 800be7e:	781a      	ldrb	r2, [r3, #0]
 800be80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	440b      	add	r3, r1
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	4053      	eors	r3, r2
 800be8a:	b2d9      	uxtb	r1, r3
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be90:	4413      	add	r3, r2
 800be92:	33f1      	adds	r3, #241	@ 0xf1
 800be94:	460a      	mov	r2, r1
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be9a:	3301      	adds	r3, #1
 800be9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea0:	2b0f      	cmp	r3, #15
 800bea2:	dde8      	ble.n	800be76 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800beaa:	f107 0314 	add.w	r3, r7, #20
 800beae:	2210      	movs	r2, #16
 800beb0:	4618      	mov	r0, r3
 800beb2:	f00c f950 	bl	8018156 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	f107 0114 	add.w	r1, r7, #20
 800bebc:	f107 0314 	add.w	r3, r7, #20
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fe97 	bl	800cbf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	33f1      	adds	r3, #241	@ 0xf1
 800beca:	f107 0114 	add.w	r1, r7, #20
 800bece:	2210      	movs	r2, #16
 800bed0:	4618      	mov	r0, r3
 800bed2:	f00c f940 	bl	8018156 <memcpy1>

        data += 16;
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3310      	adds	r3, #16
 800beda:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3b10      	subs	r3, #16
 800bee0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b10      	cmp	r3, #16
 800bee6:	d8c3      	bhi.n	800be70 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	b292      	uxth	r2, r2
 800bef2:	68b9      	ldr	r1, [r7, #8]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f00c f92e 	bl	8018156 <memcpy1>
    ctx->M_n = len;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bf02:	e000      	b.n	800bf06 <AES_CMAC_Update+0x17e>
            return;
 800bf04:	bf00      	nop
}
 800bf06:	3730      	adds	r7, #48	@ 0x30
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b092      	sub	sp, #72	@ 0x48
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bf16:	f107 031c 	add.w	r3, r7, #28
 800bf1a:	2210      	movs	r2, #16
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f00c f954 	bl	80181cc <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	f107 011c 	add.w	r1, r7, #28
 800bf2a:	f107 031c 	add.w	r3, r7, #28
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 fe60 	bl	800cbf4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bf34:	7f3b      	ldrb	r3, [r7, #28]
 800bf36:	b25b      	sxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da30      	bge.n	800bf9e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf40:	e01b      	b.n	800bf7a <AES_CMAC_Final+0x6e>
 800bf42:	f107 021c 	add.w	r2, r7, #28
 800bf46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf48:	4413      	add	r3, r2
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	b25a      	sxtb	r2, r3
 800bf50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf52:	3301      	adds	r3, #1
 800bf54:	3348      	adds	r3, #72	@ 0x48
 800bf56:	443b      	add	r3, r7
 800bf58:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf5c:	09db      	lsrs	r3, r3, #7
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	b25b      	sxtb	r3, r3
 800bf66:	b2d9      	uxtb	r1, r3
 800bf68:	f107 021c 	add.w	r2, r7, #28
 800bf6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf6e:	4413      	add	r3, r2
 800bf70:	460a      	mov	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf76:	3301      	adds	r3, #1
 800bf78:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf7c:	2b0e      	cmp	r3, #14
 800bf7e:	dde0      	ble.n	800bf42 <AES_CMAC_Final+0x36>
 800bf80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800bf8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf90:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bf94:	43db      	mvns	r3, r3
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf9c:	e027      	b.n	800bfee <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfa2:	e01b      	b.n	800bfdc <AES_CMAC_Final+0xd0>
 800bfa4:	f107 021c 	add.w	r2, r7, #28
 800bfa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfaa:	4413      	add	r3, r2
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	b25a      	sxtb	r2, r3
 800bfb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	3348      	adds	r3, #72	@ 0x48
 800bfb8:	443b      	add	r3, r7
 800bfba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bfbe:	09db      	lsrs	r3, r3, #7
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	b2d9      	uxtb	r1, r3
 800bfca:	f107 021c 	add.w	r2, r7, #28
 800bfce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd0:	4413      	add	r3, r2
 800bfd2:	460a      	mov	r2, r1
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd8:	3301      	adds	r3, #1
 800bfda:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfde:	2b0e      	cmp	r3, #14
 800bfe0:	dde0      	ble.n	800bfa4 <AES_CMAC_Final+0x98>
 800bfe2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bff4:	2b10      	cmp	r3, #16
 800bff6:	d11d      	bne.n	800c034 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bff8:	2300      	movs	r3, #0
 800bffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bffc:	e016      	b.n	800c02c <AES_CMAC_Final+0x120>
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c002:	4413      	add	r3, r2
 800c004:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c008:	781a      	ldrb	r2, [r3, #0]
 800c00a:	f107 011c 	add.w	r1, r7, #28
 800c00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c010:	440b      	add	r3, r1
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	4053      	eors	r3, r2
 800c016:	b2d9      	uxtb	r1, r3
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c01c:	4413      	add	r3, r2
 800c01e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c022:	460a      	mov	r2, r1
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	3301      	adds	r3, #1
 800c02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c02e:	2b0f      	cmp	r3, #15
 800c030:	dde5      	ble.n	800bffe <AES_CMAC_Final+0xf2>
 800c032:	e096      	b.n	800c162 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c034:	7f3b      	ldrb	r3, [r7, #28]
 800c036:	b25b      	sxtb	r3, r3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	da30      	bge.n	800c09e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c03c:	2300      	movs	r3, #0
 800c03e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c040:	e01b      	b.n	800c07a <AES_CMAC_Final+0x16e>
 800c042:	f107 021c 	add.w	r2, r7, #28
 800c046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c048:	4413      	add	r3, r2
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	b25a      	sxtb	r2, r3
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	3301      	adds	r3, #1
 800c054:	3348      	adds	r3, #72	@ 0x48
 800c056:	443b      	add	r3, r7
 800c058:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c05c:	09db      	lsrs	r3, r3, #7
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	b25b      	sxtb	r3, r3
 800c062:	4313      	orrs	r3, r2
 800c064:	b25b      	sxtb	r3, r3
 800c066:	b2d9      	uxtb	r1, r3
 800c068:	f107 021c 	add.w	r2, r7, #28
 800c06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06e:	4413      	add	r3, r2
 800c070:	460a      	mov	r2, r1
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c076:	3301      	adds	r3, #1
 800c078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07c:	2b0e      	cmp	r3, #14
 800c07e:	dde0      	ble.n	800c042 <AES_CMAC_Final+0x136>
 800c080:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c08c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c090:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c094:	43db      	mvns	r3, r3
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c09c:	e027      	b.n	800c0ee <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a2:	e01b      	b.n	800c0dc <AES_CMAC_Final+0x1d0>
 800c0a4:	f107 021c 	add.w	r2, r7, #28
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0aa:	4413      	add	r3, r2
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	b25a      	sxtb	r2, r3
 800c0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	3348      	adds	r3, #72	@ 0x48
 800c0b8:	443b      	add	r3, r7
 800c0ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c0be:	09db      	lsrs	r3, r3, #7
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	b25b      	sxtb	r3, r3
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	b25b      	sxtb	r3, r3
 800c0c8:	b2d9      	uxtb	r1, r3
 800c0ca:	f107 021c 	add.w	r2, r7, #28
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d0:	4413      	add	r3, r2
 800c0d2:	460a      	mov	r2, r1
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d8:	3301      	adds	r3, #1
 800c0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0de:	2b0e      	cmp	r3, #14
 800c0e0:	dde0      	ble.n	800c0a4 <AES_CMAC_Final+0x198>
 800c0e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	2280      	movs	r2, #128	@ 0x80
 800c0fa:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c0fe:	e007      	b.n	800c110 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	4413      	add	r3, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c124:	2b0f      	cmp	r3, #15
 800c126:	d9eb      	bls.n	800c100 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c128:	2300      	movs	r3, #0
 800c12a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c12c:	e016      	b.n	800c15c <AES_CMAC_Final+0x250>
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c132:	4413      	add	r3, r2
 800c134:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	f107 011c 	add.w	r1, r7, #28
 800c13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c140:	440b      	add	r3, r1
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4053      	eors	r3, r2
 800c146:	b2d9      	uxtb	r1, r3
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14c:	4413      	add	r3, r2
 800c14e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c152:	460a      	mov	r2, r1
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c158:	3301      	adds	r3, #1
 800c15a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15e:	2b0f      	cmp	r3, #15
 800c160:	dde5      	ble.n	800c12e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c162:	2300      	movs	r3, #0
 800c164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c166:	e015      	b.n	800c194 <AES_CMAC_Final+0x288>
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16c:	4413      	add	r3, r2
 800c16e:	33f1      	adds	r3, #241	@ 0xf1
 800c170:	781a      	ldrb	r2, [r3, #0]
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c176:	440b      	add	r3, r1
 800c178:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	4053      	eors	r3, r2
 800c180:	b2d9      	uxtb	r1, r3
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c186:	4413      	add	r3, r2
 800c188:	33f1      	adds	r3, #241	@ 0xf1
 800c18a:	460a      	mov	r2, r1
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c190:	3301      	adds	r3, #1
 800c192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c196:	2b0f      	cmp	r3, #15
 800c198:	dde6      	ble.n	800c168 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c1a0:	f107 030c 	add.w	r3, r7, #12
 800c1a4:	2210      	movs	r2, #16
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f00b ffd5 	bl	8018156 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	f107 030c 	add.w	r3, r7, #12
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fd1d 	bl	800cbf4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c1ba:	f107 031c 	add.w	r3, r7, #28
 800c1be:	2210      	movs	r2, #16
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f00c f802 	bl	80181cc <memset1>
}
 800c1c8:	bf00      	nop
 800c1ca:	3748      	adds	r7, #72	@ 0x48
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781a      	ldrb	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	7852      	ldrb	r2, [r2, #1]
 800c1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3302      	adds	r3, #2
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	7892      	ldrb	r2, [r2, #2]
 800c1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	3303      	adds	r3, #3
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	78d2      	ldrb	r2, [r2, #3]
 800c1fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3304      	adds	r3, #4
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	7912      	ldrb	r2, [r2, #4]
 800c208:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3305      	adds	r3, #5
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	7952      	ldrb	r2, [r2, #5]
 800c212:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3306      	adds	r3, #6
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	7992      	ldrb	r2, [r2, #6]
 800c21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3307      	adds	r3, #7
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	79d2      	ldrb	r2, [r2, #7]
 800c226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3308      	adds	r3, #8
 800c22c:	683a      	ldr	r2, [r7, #0]
 800c22e:	7a12      	ldrb	r2, [r2, #8]
 800c230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	3309      	adds	r3, #9
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	7a52      	ldrb	r2, [r2, #9]
 800c23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	330a      	adds	r3, #10
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	7a92      	ldrb	r2, [r2, #10]
 800c244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	330b      	adds	r3, #11
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	7ad2      	ldrb	r2, [r2, #11]
 800c24e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	330c      	adds	r3, #12
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	7b12      	ldrb	r2, [r2, #12]
 800c258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	330d      	adds	r3, #13
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	7b52      	ldrb	r2, [r2, #13]
 800c262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	330e      	adds	r3, #14
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	7b92      	ldrb	r2, [r2, #14]
 800c26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	330f      	adds	r3, #15
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	7bd2      	ldrb	r2, [r2, #15]
 800c276:	701a      	strb	r2, [r3, #0]
#endif
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bc80      	pop	{r7}
 800c280:	4770      	bx	lr

0800c282 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	60f8      	str	r0, [r7, #12]
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	4613      	mov	r3, r2
 800c28e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c290:	e007      	b.n	800c2a2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	1c53      	adds	r3, r2, #1
 800c296:	60bb      	str	r3, [r7, #8]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	1c59      	adds	r1, r3, #1
 800c29c:	60f9      	str	r1, [r7, #12]
 800c29e:	7812      	ldrb	r2, [r2, #0]
 800c2a0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	1e5a      	subs	r2, r3, #1
 800c2a6:	71fa      	strb	r2, [r7, #7]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1f2      	bne.n	800c292 <copy_block_nn+0x10>
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bc80      	pop	{r7}
 800c2b6:	4770      	bx	lr

0800c2b8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4053      	eors	r3, r2
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	7819      	ldrb	r1, [r3, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	781a      	ldrb	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	404a      	eors	r2, r1
 800c2e4:	b2d2      	uxtb	r2, r2
 800c2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	7819      	ldrb	r1, [r3, #0]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	781a      	ldrb	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	404a      	eors	r2, r1
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3303      	adds	r3, #3
 800c302:	7819      	ldrb	r1, [r3, #0]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	3303      	adds	r3, #3
 800c308:	781a      	ldrb	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3303      	adds	r3, #3
 800c30e:	404a      	eors	r2, r1
 800c310:	b2d2      	uxtb	r2, r2
 800c312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	3304      	adds	r3, #4
 800c318:	7819      	ldrb	r1, [r3, #0]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	3304      	adds	r3, #4
 800c31e:	781a      	ldrb	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3304      	adds	r3, #4
 800c324:	404a      	eors	r2, r1
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3305      	adds	r3, #5
 800c32e:	7819      	ldrb	r1, [r3, #0]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	3305      	adds	r3, #5
 800c334:	781a      	ldrb	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3305      	adds	r3, #5
 800c33a:	404a      	eors	r2, r1
 800c33c:	b2d2      	uxtb	r2, r2
 800c33e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3306      	adds	r3, #6
 800c344:	7819      	ldrb	r1, [r3, #0]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	3306      	adds	r3, #6
 800c34a:	781a      	ldrb	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3306      	adds	r3, #6
 800c350:	404a      	eors	r2, r1
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3307      	adds	r3, #7
 800c35a:	7819      	ldrb	r1, [r3, #0]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	3307      	adds	r3, #7
 800c360:	781a      	ldrb	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3307      	adds	r3, #7
 800c366:	404a      	eors	r2, r1
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	3308      	adds	r3, #8
 800c370:	7819      	ldrb	r1, [r3, #0]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	3308      	adds	r3, #8
 800c376:	781a      	ldrb	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3308      	adds	r3, #8
 800c37c:	404a      	eors	r2, r1
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3309      	adds	r3, #9
 800c386:	7819      	ldrb	r1, [r3, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	3309      	adds	r3, #9
 800c38c:	781a      	ldrb	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3309      	adds	r3, #9
 800c392:	404a      	eors	r2, r1
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	330a      	adds	r3, #10
 800c39c:	7819      	ldrb	r1, [r3, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	330a      	adds	r3, #10
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	330a      	adds	r3, #10
 800c3a8:	404a      	eors	r2, r1
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	330b      	adds	r3, #11
 800c3b2:	7819      	ldrb	r1, [r3, #0]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	330b      	adds	r3, #11
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	330b      	adds	r3, #11
 800c3be:	404a      	eors	r2, r1
 800c3c0:	b2d2      	uxtb	r2, r2
 800c3c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	330c      	adds	r3, #12
 800c3c8:	7819      	ldrb	r1, [r3, #0]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	330c      	adds	r3, #12
 800c3ce:	781a      	ldrb	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	330c      	adds	r3, #12
 800c3d4:	404a      	eors	r2, r1
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	330d      	adds	r3, #13
 800c3de:	7819      	ldrb	r1, [r3, #0]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	330d      	adds	r3, #13
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	330d      	adds	r3, #13
 800c3ea:	404a      	eors	r2, r1
 800c3ec:	b2d2      	uxtb	r2, r2
 800c3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	330e      	adds	r3, #14
 800c3f4:	7819      	ldrb	r1, [r3, #0]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	330e      	adds	r3, #14
 800c3fa:	781a      	ldrb	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	330e      	adds	r3, #14
 800c400:	404a      	eors	r2, r1
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	330f      	adds	r3, #15
 800c40a:	7819      	ldrb	r1, [r3, #0]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	330f      	adds	r3, #15
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	330f      	adds	r3, #15
 800c416:	404a      	eors	r2, r1
 800c418:	b2d2      	uxtb	r2, r2
 800c41a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c41c:	bf00      	nop
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	bc80      	pop	{r7}
 800c424:	4770      	bx	lr

0800c426 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c426:	b480      	push	{r7}
 800c428:	b085      	sub	sp, #20
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	60b9      	str	r1, [r7, #8]
 800c430:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	781a      	ldrb	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	4053      	eors	r3, r2
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	3301      	adds	r3, #1
 800c446:	7819      	ldrb	r1, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3301      	adds	r3, #1
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	404a      	eors	r2, r1
 800c454:	b2d2      	uxtb	r2, r2
 800c456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	3302      	adds	r3, #2
 800c45c:	7819      	ldrb	r1, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3302      	adds	r3, #2
 800c462:	781a      	ldrb	r2, [r3, #0]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3302      	adds	r3, #2
 800c468:	404a      	eors	r2, r1
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	3303      	adds	r3, #3
 800c472:	7819      	ldrb	r1, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3303      	adds	r3, #3
 800c478:	781a      	ldrb	r2, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3303      	adds	r3, #3
 800c47e:	404a      	eors	r2, r1
 800c480:	b2d2      	uxtb	r2, r2
 800c482:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	3304      	adds	r3, #4
 800c488:	7819      	ldrb	r1, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3304      	adds	r3, #4
 800c48e:	781a      	ldrb	r2, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3304      	adds	r3, #4
 800c494:	404a      	eors	r2, r1
 800c496:	b2d2      	uxtb	r2, r2
 800c498:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	3305      	adds	r3, #5
 800c49e:	7819      	ldrb	r1, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3305      	adds	r3, #5
 800c4a4:	781a      	ldrb	r2, [r3, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3305      	adds	r3, #5
 800c4aa:	404a      	eors	r2, r1
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	3306      	adds	r3, #6
 800c4b4:	7819      	ldrb	r1, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3306      	adds	r3, #6
 800c4ba:	781a      	ldrb	r2, [r3, #0]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3306      	adds	r3, #6
 800c4c0:	404a      	eors	r2, r1
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	3307      	adds	r3, #7
 800c4ca:	7819      	ldrb	r1, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3307      	adds	r3, #7
 800c4d0:	781a      	ldrb	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3307      	adds	r3, #7
 800c4d6:	404a      	eors	r2, r1
 800c4d8:	b2d2      	uxtb	r2, r2
 800c4da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	7819      	ldrb	r1, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	404a      	eors	r2, r1
 800c4ee:	b2d2      	uxtb	r2, r2
 800c4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	3309      	adds	r3, #9
 800c4f6:	7819      	ldrb	r1, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3309      	adds	r3, #9
 800c4fc:	781a      	ldrb	r2, [r3, #0]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	3309      	adds	r3, #9
 800c502:	404a      	eors	r2, r1
 800c504:	b2d2      	uxtb	r2, r2
 800c506:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	330a      	adds	r3, #10
 800c50c:	7819      	ldrb	r1, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	330a      	adds	r3, #10
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	330a      	adds	r3, #10
 800c518:	404a      	eors	r2, r1
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	330b      	adds	r3, #11
 800c522:	7819      	ldrb	r1, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	330b      	adds	r3, #11
 800c528:	781a      	ldrb	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	330b      	adds	r3, #11
 800c52e:	404a      	eors	r2, r1
 800c530:	b2d2      	uxtb	r2, r2
 800c532:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	330c      	adds	r3, #12
 800c538:	7819      	ldrb	r1, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	330c      	adds	r3, #12
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	330c      	adds	r3, #12
 800c544:	404a      	eors	r2, r1
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	330d      	adds	r3, #13
 800c54e:	7819      	ldrb	r1, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	330d      	adds	r3, #13
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	330d      	adds	r3, #13
 800c55a:	404a      	eors	r2, r1
 800c55c:	b2d2      	uxtb	r2, r2
 800c55e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	330e      	adds	r3, #14
 800c564:	7819      	ldrb	r1, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	330e      	adds	r3, #14
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	330e      	adds	r3, #14
 800c570:	404a      	eors	r2, r1
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	330f      	adds	r3, #15
 800c57a:	7819      	ldrb	r1, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	330f      	adds	r3, #15
 800c580:	781a      	ldrb	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	330f      	adds	r3, #15
 800c586:	404a      	eors	r2, r1
 800c588:	b2d2      	uxtb	r2, r2
 800c58a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c58c:	bf00      	nop
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	bc80      	pop	{r7}
 800c594:	4770      	bx	lr

0800c596 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fe88 	bl	800c2b8 <xor_block>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b48      	ldr	r3, [pc, #288]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c5c0:	5c9a      	ldrb	r2, [r3, r2]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4a43      	ldr	r2, [pc, #268]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c5d4:	5c52      	ldrb	r2, [r2, r1]
 800c5d6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c5e6:	5c52      	ldrb	r2, [r2, r1]
 800c5e8:	701a      	strb	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	330c      	adds	r3, #12
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	4a3a      	ldr	r2, [pc, #232]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c5f8:	5c52      	ldrb	r2, [r2, r1]
 800c5fa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	785b      	ldrb	r3, [r3, #1]
 800c600:	73fb      	strb	r3, [r7, #15]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	3305      	adds	r3, #5
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	4619      	mov	r1, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	3301      	adds	r3, #1
 800c60e:	4a34      	ldr	r2, [pc, #208]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c610:	5c52      	ldrb	r2, [r2, r1]
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3309      	adds	r3, #9
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	4619      	mov	r1, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3305      	adds	r3, #5
 800c620:	4a2f      	ldr	r2, [pc, #188]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c622:	5c52      	ldrb	r2, [r2, r1]
 800c624:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	330d      	adds	r3, #13
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3309      	adds	r3, #9
 800c632:	4a2b      	ldr	r2, [pc, #172]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c634:	5c52      	ldrb	r2, [r2, r1]
 800c636:	701a      	strb	r2, [r3, #0]
 800c638:	7bfa      	ldrb	r2, [r7, #15]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	330d      	adds	r3, #13
 800c63e:	4928      	ldr	r1, [pc, #160]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c640:	5c8a      	ldrb	r2, [r1, r2]
 800c642:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	789b      	ldrb	r3, [r3, #2]
 800c648:	73fb      	strb	r3, [r7, #15]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	330a      	adds	r3, #10
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	4619      	mov	r1, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	3302      	adds	r3, #2
 800c656:	4a22      	ldr	r2, [pc, #136]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c658:	5c52      	ldrb	r2, [r2, r1]
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	7bfa      	ldrb	r2, [r7, #15]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	330a      	adds	r3, #10
 800c662:	491f      	ldr	r1, [pc, #124]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c664:	5c8a      	ldrb	r2, [r1, r2]
 800c666:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	799b      	ldrb	r3, [r3, #6]
 800c66c:	73fb      	strb	r3, [r7, #15]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	330e      	adds	r3, #14
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	4619      	mov	r1, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3306      	adds	r3, #6
 800c67a:	4a19      	ldr	r2, [pc, #100]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c67c:	5c52      	ldrb	r2, [r2, r1]
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	7bfa      	ldrb	r2, [r7, #15]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	330e      	adds	r3, #14
 800c686:	4916      	ldr	r1, [pc, #88]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c688:	5c8a      	ldrb	r2, [r1, r2]
 800c68a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7bdb      	ldrb	r3, [r3, #15]
 800c690:	73fb      	strb	r3, [r7, #15]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	330b      	adds	r3, #11
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	330f      	adds	r3, #15
 800c69e:	4a10      	ldr	r2, [pc, #64]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c6a0:	5c52      	ldrb	r2, [r2, r1]
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3307      	adds	r3, #7
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	330b      	adds	r3, #11
 800c6b0:	4a0b      	ldr	r2, [pc, #44]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c6b2:	5c52      	ldrb	r2, [r2, r1]
 800c6b4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3303      	adds	r3, #3
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3307      	adds	r3, #7
 800c6c2:	4a07      	ldr	r2, [pc, #28]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c6c4:	5c52      	ldrb	r2, [r2, r1]
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	7bfa      	ldrb	r2, [r7, #15]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3303      	adds	r3, #3
 800c6ce:	4904      	ldr	r1, [pc, #16]	@ (800c6e0 <shift_sub_rows+0x130>)
 800c6d0:	5c8a      	ldrb	r2, [r1, r2]
 800c6d2:	701a      	strb	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bc80      	pop	{r7}
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	08020344 	.word	0x08020344

0800c6e4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c6ec:	f107 0308 	add.w	r3, r7, #8
 800c6f0:	6879      	ldr	r1, [r7, #4]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fd6c 	bl	800c1d0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c6f8:	7a3b      	ldrb	r3, [r7, #8]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	4b9a      	ldr	r3, [pc, #616]	@ (800c968 <mix_sub_columns+0x284>)
 800c6fe:	5c9a      	ldrb	r2, [r3, r2]
 800c700:	7b7b      	ldrb	r3, [r7, #13]
 800c702:	4619      	mov	r1, r3
 800c704:	4b99      	ldr	r3, [pc, #612]	@ (800c96c <mix_sub_columns+0x288>)
 800c706:	5c5b      	ldrb	r3, [r3, r1]
 800c708:	4053      	eors	r3, r2
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	7cbb      	ldrb	r3, [r7, #18]
 800c70e:	4619      	mov	r1, r3
 800c710:	4b97      	ldr	r3, [pc, #604]	@ (800c970 <mix_sub_columns+0x28c>)
 800c712:	5c5b      	ldrb	r3, [r3, r1]
 800c714:	4053      	eors	r3, r2
 800c716:	b2da      	uxtb	r2, r3
 800c718:	7dfb      	ldrb	r3, [r7, #23]
 800c71a:	4619      	mov	r1, r3
 800c71c:	4b94      	ldr	r3, [pc, #592]	@ (800c970 <mix_sub_columns+0x28c>)
 800c71e:	5c5b      	ldrb	r3, [r3, r1]
 800c720:	4053      	eors	r3, r2
 800c722:	b2da      	uxtb	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c728:	7a3b      	ldrb	r3, [r7, #8]
 800c72a:	461a      	mov	r2, r3
 800c72c:	4b90      	ldr	r3, [pc, #576]	@ (800c970 <mix_sub_columns+0x28c>)
 800c72e:	5c9a      	ldrb	r2, [r3, r2]
 800c730:	7b7b      	ldrb	r3, [r7, #13]
 800c732:	4619      	mov	r1, r3
 800c734:	4b8c      	ldr	r3, [pc, #560]	@ (800c968 <mix_sub_columns+0x284>)
 800c736:	5c5b      	ldrb	r3, [r3, r1]
 800c738:	4053      	eors	r3, r2
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	7cbb      	ldrb	r3, [r7, #18]
 800c73e:	4619      	mov	r1, r3
 800c740:	4b8a      	ldr	r3, [pc, #552]	@ (800c96c <mix_sub_columns+0x288>)
 800c742:	5c5b      	ldrb	r3, [r3, r1]
 800c744:	4053      	eors	r3, r2
 800c746:	b2d9      	uxtb	r1, r3
 800c748:	7dfb      	ldrb	r3, [r7, #23]
 800c74a:	461a      	mov	r2, r3
 800c74c:	4b88      	ldr	r3, [pc, #544]	@ (800c970 <mix_sub_columns+0x28c>)
 800c74e:	5c9a      	ldrb	r2, [r3, r2]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3301      	adds	r3, #1
 800c754:	404a      	eors	r2, r1
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c75a:	7a3b      	ldrb	r3, [r7, #8]
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b84      	ldr	r3, [pc, #528]	@ (800c970 <mix_sub_columns+0x28c>)
 800c760:	5c9a      	ldrb	r2, [r3, r2]
 800c762:	7b7b      	ldrb	r3, [r7, #13]
 800c764:	4619      	mov	r1, r3
 800c766:	4b82      	ldr	r3, [pc, #520]	@ (800c970 <mix_sub_columns+0x28c>)
 800c768:	5c5b      	ldrb	r3, [r3, r1]
 800c76a:	4053      	eors	r3, r2
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	7cbb      	ldrb	r3, [r7, #18]
 800c770:	4619      	mov	r1, r3
 800c772:	4b7d      	ldr	r3, [pc, #500]	@ (800c968 <mix_sub_columns+0x284>)
 800c774:	5c5b      	ldrb	r3, [r3, r1]
 800c776:	4053      	eors	r3, r2
 800c778:	b2d9      	uxtb	r1, r3
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	461a      	mov	r2, r3
 800c77e:	4b7b      	ldr	r3, [pc, #492]	@ (800c96c <mix_sub_columns+0x288>)
 800c780:	5c9a      	ldrb	r2, [r3, r2]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3302      	adds	r3, #2
 800c786:	404a      	eors	r2, r1
 800c788:	b2d2      	uxtb	r2, r2
 800c78a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c78c:	7a3b      	ldrb	r3, [r7, #8]
 800c78e:	461a      	mov	r2, r3
 800c790:	4b76      	ldr	r3, [pc, #472]	@ (800c96c <mix_sub_columns+0x288>)
 800c792:	5c9a      	ldrb	r2, [r3, r2]
 800c794:	7b7b      	ldrb	r3, [r7, #13]
 800c796:	4619      	mov	r1, r3
 800c798:	4b75      	ldr	r3, [pc, #468]	@ (800c970 <mix_sub_columns+0x28c>)
 800c79a:	5c5b      	ldrb	r3, [r3, r1]
 800c79c:	4053      	eors	r3, r2
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	7cbb      	ldrb	r3, [r7, #18]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4b72      	ldr	r3, [pc, #456]	@ (800c970 <mix_sub_columns+0x28c>)
 800c7a6:	5c5b      	ldrb	r3, [r3, r1]
 800c7a8:	4053      	eors	r3, r2
 800c7aa:	b2d9      	uxtb	r1, r3
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4b6d      	ldr	r3, [pc, #436]	@ (800c968 <mix_sub_columns+0x284>)
 800c7b2:	5c9a      	ldrb	r2, [r3, r2]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3303      	adds	r3, #3
 800c7b8:	404a      	eors	r2, r1
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c7be:	7b3b      	ldrb	r3, [r7, #12]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b69      	ldr	r3, [pc, #420]	@ (800c968 <mix_sub_columns+0x284>)
 800c7c4:	5c9a      	ldrb	r2, [r3, r2]
 800c7c6:	7c7b      	ldrb	r3, [r7, #17]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4b68      	ldr	r3, [pc, #416]	@ (800c96c <mix_sub_columns+0x288>)
 800c7cc:	5c5b      	ldrb	r3, [r3, r1]
 800c7ce:	4053      	eors	r3, r2
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	7dbb      	ldrb	r3, [r7, #22]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4b66      	ldr	r3, [pc, #408]	@ (800c970 <mix_sub_columns+0x28c>)
 800c7d8:	5c5b      	ldrb	r3, [r3, r1]
 800c7da:	4053      	eors	r3, r2
 800c7dc:	b2d9      	uxtb	r1, r3
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b63      	ldr	r3, [pc, #396]	@ (800c970 <mix_sub_columns+0x28c>)
 800c7e4:	5c9a      	ldrb	r2, [r3, r2]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	404a      	eors	r2, r1
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c7f0:	7b3b      	ldrb	r3, [r7, #12]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b5e      	ldr	r3, [pc, #376]	@ (800c970 <mix_sub_columns+0x28c>)
 800c7f6:	5c9a      	ldrb	r2, [r3, r2]
 800c7f8:	7c7b      	ldrb	r3, [r7, #17]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4b5a      	ldr	r3, [pc, #360]	@ (800c968 <mix_sub_columns+0x284>)
 800c7fe:	5c5b      	ldrb	r3, [r3, r1]
 800c800:	4053      	eors	r3, r2
 800c802:	b2da      	uxtb	r2, r3
 800c804:	7dbb      	ldrb	r3, [r7, #22]
 800c806:	4619      	mov	r1, r3
 800c808:	4b58      	ldr	r3, [pc, #352]	@ (800c96c <mix_sub_columns+0x288>)
 800c80a:	5c5b      	ldrb	r3, [r3, r1]
 800c80c:	4053      	eors	r3, r2
 800c80e:	b2d9      	uxtb	r1, r3
 800c810:	7afb      	ldrb	r3, [r7, #11]
 800c812:	461a      	mov	r2, r3
 800c814:	4b56      	ldr	r3, [pc, #344]	@ (800c970 <mix_sub_columns+0x28c>)
 800c816:	5c9a      	ldrb	r2, [r3, r2]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3305      	adds	r3, #5
 800c81c:	404a      	eors	r2, r1
 800c81e:	b2d2      	uxtb	r2, r2
 800c820:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c822:	7b3b      	ldrb	r3, [r7, #12]
 800c824:	461a      	mov	r2, r3
 800c826:	4b52      	ldr	r3, [pc, #328]	@ (800c970 <mix_sub_columns+0x28c>)
 800c828:	5c9a      	ldrb	r2, [r3, r2]
 800c82a:	7c7b      	ldrb	r3, [r7, #17]
 800c82c:	4619      	mov	r1, r3
 800c82e:	4b50      	ldr	r3, [pc, #320]	@ (800c970 <mix_sub_columns+0x28c>)
 800c830:	5c5b      	ldrb	r3, [r3, r1]
 800c832:	4053      	eors	r3, r2
 800c834:	b2da      	uxtb	r2, r3
 800c836:	7dbb      	ldrb	r3, [r7, #22]
 800c838:	4619      	mov	r1, r3
 800c83a:	4b4b      	ldr	r3, [pc, #300]	@ (800c968 <mix_sub_columns+0x284>)
 800c83c:	5c5b      	ldrb	r3, [r3, r1]
 800c83e:	4053      	eors	r3, r2
 800c840:	b2d9      	uxtb	r1, r3
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	461a      	mov	r2, r3
 800c846:	4b49      	ldr	r3, [pc, #292]	@ (800c96c <mix_sub_columns+0x288>)
 800c848:	5c9a      	ldrb	r2, [r3, r2]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3306      	adds	r3, #6
 800c84e:	404a      	eors	r2, r1
 800c850:	b2d2      	uxtb	r2, r2
 800c852:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c854:	7b3b      	ldrb	r3, [r7, #12]
 800c856:	461a      	mov	r2, r3
 800c858:	4b44      	ldr	r3, [pc, #272]	@ (800c96c <mix_sub_columns+0x288>)
 800c85a:	5c9a      	ldrb	r2, [r3, r2]
 800c85c:	7c7b      	ldrb	r3, [r7, #17]
 800c85e:	4619      	mov	r1, r3
 800c860:	4b43      	ldr	r3, [pc, #268]	@ (800c970 <mix_sub_columns+0x28c>)
 800c862:	5c5b      	ldrb	r3, [r3, r1]
 800c864:	4053      	eors	r3, r2
 800c866:	b2da      	uxtb	r2, r3
 800c868:	7dbb      	ldrb	r3, [r7, #22]
 800c86a:	4619      	mov	r1, r3
 800c86c:	4b40      	ldr	r3, [pc, #256]	@ (800c970 <mix_sub_columns+0x28c>)
 800c86e:	5c5b      	ldrb	r3, [r3, r1]
 800c870:	4053      	eors	r3, r2
 800c872:	b2d9      	uxtb	r1, r3
 800c874:	7afb      	ldrb	r3, [r7, #11]
 800c876:	461a      	mov	r2, r3
 800c878:	4b3b      	ldr	r3, [pc, #236]	@ (800c968 <mix_sub_columns+0x284>)
 800c87a:	5c9a      	ldrb	r2, [r3, r2]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	3307      	adds	r3, #7
 800c880:	404a      	eors	r2, r1
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c886:	7c3b      	ldrb	r3, [r7, #16]
 800c888:	461a      	mov	r2, r3
 800c88a:	4b37      	ldr	r3, [pc, #220]	@ (800c968 <mix_sub_columns+0x284>)
 800c88c:	5c9a      	ldrb	r2, [r3, r2]
 800c88e:	7d7b      	ldrb	r3, [r7, #21]
 800c890:	4619      	mov	r1, r3
 800c892:	4b36      	ldr	r3, [pc, #216]	@ (800c96c <mix_sub_columns+0x288>)
 800c894:	5c5b      	ldrb	r3, [r3, r1]
 800c896:	4053      	eors	r3, r2
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	7abb      	ldrb	r3, [r7, #10]
 800c89c:	4619      	mov	r1, r3
 800c89e:	4b34      	ldr	r3, [pc, #208]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8a0:	5c5b      	ldrb	r3, [r3, r1]
 800c8a2:	4053      	eors	r3, r2
 800c8a4:	b2d9      	uxtb	r1, r3
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4b31      	ldr	r3, [pc, #196]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8ac:	5c9a      	ldrb	r2, [r3, r2]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	404a      	eors	r2, r1
 800c8b4:	b2d2      	uxtb	r2, r2
 800c8b6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c8b8:	7c3b      	ldrb	r3, [r7, #16]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4b2c      	ldr	r3, [pc, #176]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8be:	5c9a      	ldrb	r2, [r3, r2]
 800c8c0:	7d7b      	ldrb	r3, [r7, #21]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4b28      	ldr	r3, [pc, #160]	@ (800c968 <mix_sub_columns+0x284>)
 800c8c6:	5c5b      	ldrb	r3, [r3, r1]
 800c8c8:	4053      	eors	r3, r2
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	7abb      	ldrb	r3, [r7, #10]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4b26      	ldr	r3, [pc, #152]	@ (800c96c <mix_sub_columns+0x288>)
 800c8d2:	5c5b      	ldrb	r3, [r3, r1]
 800c8d4:	4053      	eors	r3, r2
 800c8d6:	b2d9      	uxtb	r1, r3
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	4b24      	ldr	r3, [pc, #144]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8de:	5c9a      	ldrb	r2, [r3, r2]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3309      	adds	r3, #9
 800c8e4:	404a      	eors	r2, r1
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c8ea:	7c3b      	ldrb	r3, [r7, #16]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	4b20      	ldr	r3, [pc, #128]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8f0:	5c9a      	ldrb	r2, [r3, r2]
 800c8f2:	7d7b      	ldrb	r3, [r7, #21]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800c970 <mix_sub_columns+0x28c>)
 800c8f8:	5c5b      	ldrb	r3, [r3, r1]
 800c8fa:	4053      	eors	r3, r2
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	7abb      	ldrb	r3, [r7, #10]
 800c900:	4619      	mov	r1, r3
 800c902:	4b19      	ldr	r3, [pc, #100]	@ (800c968 <mix_sub_columns+0x284>)
 800c904:	5c5b      	ldrb	r3, [r3, r1]
 800c906:	4053      	eors	r3, r2
 800c908:	b2d9      	uxtb	r1, r3
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	461a      	mov	r2, r3
 800c90e:	4b17      	ldr	r3, [pc, #92]	@ (800c96c <mix_sub_columns+0x288>)
 800c910:	5c9a      	ldrb	r2, [r3, r2]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	330a      	adds	r3, #10
 800c916:	404a      	eors	r2, r1
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c91c:	7c3b      	ldrb	r3, [r7, #16]
 800c91e:	461a      	mov	r2, r3
 800c920:	4b12      	ldr	r3, [pc, #72]	@ (800c96c <mix_sub_columns+0x288>)
 800c922:	5c9a      	ldrb	r2, [r3, r2]
 800c924:	7d7b      	ldrb	r3, [r7, #21]
 800c926:	4619      	mov	r1, r3
 800c928:	4b11      	ldr	r3, [pc, #68]	@ (800c970 <mix_sub_columns+0x28c>)
 800c92a:	5c5b      	ldrb	r3, [r3, r1]
 800c92c:	4053      	eors	r3, r2
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	7abb      	ldrb	r3, [r7, #10]
 800c932:	4619      	mov	r1, r3
 800c934:	4b0e      	ldr	r3, [pc, #56]	@ (800c970 <mix_sub_columns+0x28c>)
 800c936:	5c5b      	ldrb	r3, [r3, r1]
 800c938:	4053      	eors	r3, r2
 800c93a:	b2d9      	uxtb	r1, r3
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	461a      	mov	r2, r3
 800c940:	4b09      	ldr	r3, [pc, #36]	@ (800c968 <mix_sub_columns+0x284>)
 800c942:	5c9a      	ldrb	r2, [r3, r2]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	330b      	adds	r3, #11
 800c948:	404a      	eors	r2, r1
 800c94a:	b2d2      	uxtb	r2, r2
 800c94c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c94e:	7d3b      	ldrb	r3, [r7, #20]
 800c950:	461a      	mov	r2, r3
 800c952:	4b05      	ldr	r3, [pc, #20]	@ (800c968 <mix_sub_columns+0x284>)
 800c954:	5c9a      	ldrb	r2, [r3, r2]
 800c956:	7a7b      	ldrb	r3, [r7, #9]
 800c958:	4619      	mov	r1, r3
 800c95a:	4b04      	ldr	r3, [pc, #16]	@ (800c96c <mix_sub_columns+0x288>)
 800c95c:	5c5b      	ldrb	r3, [r3, r1]
 800c95e:	4053      	eors	r3, r2
 800c960:	b2da      	uxtb	r2, r3
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	4619      	mov	r1, r3
 800c966:	e005      	b.n	800c974 <mix_sub_columns+0x290>
 800c968:	08020444 	.word	0x08020444
 800c96c:	08020544 	.word	0x08020544
 800c970:	08020344 	.word	0x08020344
 800c974:	4b2d      	ldr	r3, [pc, #180]	@ (800ca2c <mix_sub_columns+0x348>)
 800c976:	5c5b      	ldrb	r3, [r3, r1]
 800c978:	4053      	eors	r3, r2
 800c97a:	b2d9      	uxtb	r1, r3
 800c97c:	7cfb      	ldrb	r3, [r7, #19]
 800c97e:	461a      	mov	r2, r3
 800c980:	4b2a      	ldr	r3, [pc, #168]	@ (800ca2c <mix_sub_columns+0x348>)
 800c982:	5c9a      	ldrb	r2, [r3, r2]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	330c      	adds	r3, #12
 800c988:	404a      	eors	r2, r1
 800c98a:	b2d2      	uxtb	r2, r2
 800c98c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c98e:	7d3b      	ldrb	r3, [r7, #20]
 800c990:	461a      	mov	r2, r3
 800c992:	4b26      	ldr	r3, [pc, #152]	@ (800ca2c <mix_sub_columns+0x348>)
 800c994:	5c9a      	ldrb	r2, [r3, r2]
 800c996:	7a7b      	ldrb	r3, [r7, #9]
 800c998:	4619      	mov	r1, r3
 800c99a:	4b25      	ldr	r3, [pc, #148]	@ (800ca30 <mix_sub_columns+0x34c>)
 800c99c:	5c5b      	ldrb	r3, [r3, r1]
 800c99e:	4053      	eors	r3, r2
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	7bbb      	ldrb	r3, [r7, #14]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ca34 <mix_sub_columns+0x350>)
 800c9a8:	5c5b      	ldrb	r3, [r3, r1]
 800c9aa:	4053      	eors	r3, r2
 800c9ac:	b2d9      	uxtb	r1, r3
 800c9ae:	7cfb      	ldrb	r3, [r7, #19]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4b1e      	ldr	r3, [pc, #120]	@ (800ca2c <mix_sub_columns+0x348>)
 800c9b4:	5c9a      	ldrb	r2, [r3, r2]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	330d      	adds	r3, #13
 800c9ba:	404a      	eors	r2, r1
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c9c0:	7d3b      	ldrb	r3, [r7, #20]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	4b19      	ldr	r3, [pc, #100]	@ (800ca2c <mix_sub_columns+0x348>)
 800c9c6:	5c9a      	ldrb	r2, [r3, r2]
 800c9c8:	7a7b      	ldrb	r3, [r7, #9]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4b17      	ldr	r3, [pc, #92]	@ (800ca2c <mix_sub_columns+0x348>)
 800c9ce:	5c5b      	ldrb	r3, [r3, r1]
 800c9d0:	4053      	eors	r3, r2
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ca30 <mix_sub_columns+0x34c>)
 800c9da:	5c5b      	ldrb	r3, [r3, r1]
 800c9dc:	4053      	eors	r3, r2
 800c9de:	b2d9      	uxtb	r1, r3
 800c9e0:	7cfb      	ldrb	r3, [r7, #19]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4b13      	ldr	r3, [pc, #76]	@ (800ca34 <mix_sub_columns+0x350>)
 800c9e6:	5c9a      	ldrb	r2, [r3, r2]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	330e      	adds	r3, #14
 800c9ec:	404a      	eors	r2, r1
 800c9ee:	b2d2      	uxtb	r2, r2
 800c9f0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c9f2:	7d3b      	ldrb	r3, [r7, #20]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca34 <mix_sub_columns+0x350>)
 800c9f8:	5c9a      	ldrb	r2, [r3, r2]
 800c9fa:	7a7b      	ldrb	r3, [r7, #9]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <mix_sub_columns+0x348>)
 800ca00:	5c5b      	ldrb	r3, [r3, r1]
 800ca02:	4053      	eors	r3, r2
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	4b08      	ldr	r3, [pc, #32]	@ (800ca2c <mix_sub_columns+0x348>)
 800ca0c:	5c5b      	ldrb	r3, [r3, r1]
 800ca0e:	4053      	eors	r3, r2
 800ca10:	b2d9      	uxtb	r1, r3
 800ca12:	7cfb      	ldrb	r3, [r7, #19]
 800ca14:	461a      	mov	r2, r3
 800ca16:	4b06      	ldr	r3, [pc, #24]	@ (800ca30 <mix_sub_columns+0x34c>)
 800ca18:	5c9a      	ldrb	r2, [r3, r2]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	330f      	adds	r3, #15
 800ca1e:	404a      	eors	r2, r1
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	701a      	strb	r2, [r3, #0]
  }
 800ca24:	bf00      	nop
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08020344 	.word	0x08020344
 800ca30:	08020444 	.word	0x08020444
 800ca34:	08020544 	.word	0x08020544

0800ca38 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	460b      	mov	r3, r1
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ca46:	7afb      	ldrb	r3, [r7, #11]
 800ca48:	3b10      	subs	r3, #16
 800ca4a:	2b10      	cmp	r3, #16
 800ca4c:	bf8c      	ite	hi
 800ca4e:	2201      	movhi	r2, #1
 800ca50:	2200      	movls	r2, #0
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	2a00      	cmp	r2, #0
 800ca56:	d10b      	bne.n	800ca70 <lorawan_aes_set_key+0x38>
 800ca58:	4a64      	ldr	r2, [pc, #400]	@ (800cbec <lorawan_aes_set_key+0x1b4>)
 800ca5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bf14      	ite	ne
 800ca66:	2301      	movne	r3, #1
 800ca68:	2300      	moveq	r3, #0
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d105      	bne.n	800ca7c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800ca78:	23ff      	movs	r3, #255	@ 0xff
 800ca7a:	e0b2      	b.n	800cbe2 <lorawan_aes_set_key+0x1aa>
        break;
 800ca7c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	7afa      	ldrb	r2, [r7, #11]
 800ca82:	68f9      	ldr	r1, [r7, #12]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff fbfc 	bl	800c282 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	331c      	adds	r3, #28
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ca94:	7c7b      	ldrb	r3, [r7, #17]
 800ca96:	091b      	lsrs	r3, r3, #4
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800caa4:	7afb      	ldrb	r3, [r7, #11]
 800caa6:	75fb      	strb	r3, [r7, #23]
 800caa8:	2301      	movs	r3, #1
 800caaa:	75bb      	strb	r3, [r7, #22]
 800caac:	e093      	b.n	800cbd6 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	3b04      	subs	r3, #4
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	5cd3      	ldrb	r3, [r2, r3]
 800cab6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
 800caba:	3b03      	subs	r3, #3
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	5cd3      	ldrb	r3, [r2, r3]
 800cac0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	3b02      	subs	r3, #2
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	5cd3      	ldrb	r3, [r2, r3]
 800caca:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	3b01      	subs	r3, #1
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	5cd3      	ldrb	r3, [r2, r3]
 800cad4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800cad6:	7dfb      	ldrb	r3, [r7, #23]
 800cad8:	7afa      	ldrb	r2, [r7, #11]
 800cada:	fbb3 f1f2 	udiv	r1, r3, r2
 800cade:	fb01 f202 	mul.w	r2, r1, r2
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d127      	bne.n	800cb3a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800caea:	7d7b      	ldrb	r3, [r7, #21]
 800caec:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800caee:	7d3b      	ldrb	r3, [r7, #20]
 800caf0:	4a3f      	ldr	r2, [pc, #252]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800caf2:	5cd2      	ldrb	r2, [r2, r3]
 800caf4:	7dbb      	ldrb	r3, [r7, #22]
 800caf6:	4053      	eors	r3, r2
 800caf8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800cafa:	7cfb      	ldrb	r3, [r7, #19]
 800cafc:	4a3c      	ldr	r2, [pc, #240]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cafe:	5cd3      	ldrb	r3, [r2, r3]
 800cb00:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800cb02:	7cbb      	ldrb	r3, [r7, #18]
 800cb04:	4a3a      	ldr	r2, [pc, #232]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb06:	5cd3      	ldrb	r3, [r2, r3]
 800cb08:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800cb0a:	7c3b      	ldrb	r3, [r7, #16]
 800cb0c:	4a38      	ldr	r2, [pc, #224]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb0e:	5cd3      	ldrb	r3, [r2, r3]
 800cb10:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cb12:	7dbb      	ldrb	r3, [r7, #22]
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	b25a      	sxtb	r2, r3
 800cb18:	7dbb      	ldrb	r3, [r7, #22]
 800cb1a:	09db      	lsrs	r3, r3, #7
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	4619      	mov	r1, r3
 800cb20:	0049      	lsls	r1, r1, #1
 800cb22:	440b      	add	r3, r1
 800cb24:	4619      	mov	r1, r3
 800cb26:	00c8      	lsls	r0, r1, #3
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	440b      	add	r3, r1
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	b25b      	sxtb	r3, r3
 800cb32:	4053      	eors	r3, r2
 800cb34:	b25b      	sxtb	r3, r3
 800cb36:	75bb      	strb	r3, [r7, #22]
 800cb38:	e01c      	b.n	800cb74 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cb3a:	7afb      	ldrb	r3, [r7, #11]
 800cb3c:	2b18      	cmp	r3, #24
 800cb3e:	d919      	bls.n	800cb74 <lorawan_aes_set_key+0x13c>
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	7afa      	ldrb	r2, [r7, #11]
 800cb44:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb48:	fb01 f202 	mul.w	r2, r1, r2
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b10      	cmp	r3, #16
 800cb52:	d10f      	bne.n	800cb74 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800cb54:	7d7b      	ldrb	r3, [r7, #21]
 800cb56:	4a26      	ldr	r2, [pc, #152]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb58:	5cd3      	ldrb	r3, [r2, r3]
 800cb5a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cb5c:	7d3b      	ldrb	r3, [r7, #20]
 800cb5e:	4a24      	ldr	r2, [pc, #144]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb60:	5cd3      	ldrb	r3, [r2, r3]
 800cb62:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cb64:	7cfb      	ldrb	r3, [r7, #19]
 800cb66:	4a22      	ldr	r2, [pc, #136]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb68:	5cd3      	ldrb	r3, [r2, r3]
 800cb6a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cb6c:	7cbb      	ldrb	r3, [r7, #18]
 800cb6e:	4a20      	ldr	r2, [pc, #128]	@ (800cbf0 <lorawan_aes_set_key+0x1b8>)
 800cb70:	5cd3      	ldrb	r3, [r2, r3]
 800cb72:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cb74:	7dfa      	ldrb	r2, [r7, #23]
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cb7c:	7c3b      	ldrb	r3, [r7, #16]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	5cd1      	ldrb	r1, [r2, r3]
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
 800cb84:	7d7a      	ldrb	r2, [r7, #21]
 800cb86:	404a      	eors	r2, r1
 800cb88:	b2d1      	uxtb	r1, r2
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cb8e:	7c3b      	ldrb	r3, [r7, #16]
 800cb90:	3301      	adds	r3, #1
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	5cd1      	ldrb	r1, [r2, r3]
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	7d3a      	ldrb	r2, [r7, #20]
 800cb9c:	404a      	eors	r2, r1
 800cb9e:	b2d1      	uxtb	r1, r2
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cba4:	7c3b      	ldrb	r3, [r7, #16]
 800cba6:	3302      	adds	r3, #2
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	5cd1      	ldrb	r1, [r2, r3]
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	3302      	adds	r3, #2
 800cbb0:	7cfa      	ldrb	r2, [r7, #19]
 800cbb2:	404a      	eors	r2, r1
 800cbb4:	b2d1      	uxtb	r1, r2
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cbba:	7c3b      	ldrb	r3, [r7, #16]
 800cbbc:	3303      	adds	r3, #3
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	5cd1      	ldrb	r1, [r2, r3]
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	3303      	adds	r3, #3
 800cbc6:	7cba      	ldrb	r2, [r7, #18]
 800cbc8:	404a      	eors	r2, r1
 800cbca:	b2d1      	uxtb	r1, r2
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cbd0:	7dfb      	ldrb	r3, [r7, #23]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	75fb      	strb	r3, [r7, #23]
 800cbd6:	7dfa      	ldrb	r2, [r7, #23]
 800cbd8:	7c7b      	ldrb	r3, [r7, #17]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	f4ff af67 	bcc.w	800caae <lorawan_aes_set_key+0x76>
    }
    return 0;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	00010101 	.word	0x00010101
 800cbf0:	08020344 	.word	0x08020344

0800cbf4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08a      	sub	sp, #40	@ 0x28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d038      	beq.n	800cc7c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	f107 0314 	add.w	r3, r7, #20
 800cc10:	68f9      	ldr	r1, [r7, #12]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff fc07 	bl	800c426 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc1e:	e014      	b.n	800cc4a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cc20:	f107 0314 	add.w	r3, r7, #20
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff fd5d 	bl	800c6e4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc30:	0112      	lsls	r2, r2, #4
 800cc32:	441a      	add	r2, r3
 800cc34:	f107 0314 	add.w	r3, r7, #20
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff fcab 	bl	800c596 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc44:	3301      	adds	r3, #1
 800cc46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cc50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d3e3      	bcc.n	800cc20 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cc58:	f107 0314 	add.w	r3, r7, #20
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff fca7 	bl	800c5b0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc68:	0112      	lsls	r2, r2, #4
 800cc6a:	441a      	add	r2, r3
 800cc6c:	f107 0314 	add.w	r3, r7, #20
 800cc70:	4619      	mov	r1, r3
 800cc72:	68b8      	ldr	r0, [r7, #8]
 800cc74:	f7ff fbd7 	bl	800c426 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	e000      	b.n	800cc7e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cc7c:	23ff      	movs	r3, #255	@ 0xff
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3728      	adds	r7, #40	@ 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8a:	b09d      	sub	sp, #116	@ 0x74
 800cc8c:	af10      	add	r7, sp, #64	@ 0x40
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cc94:	2306      	movs	r3, #6
 800cc96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800cc9a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 f9a7 	bl	800cff8 <SecureElementGetKeyByID>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ccb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f040 80b0 	bne.w	800ce1a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800ccba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d106      	bne.n	800ccd0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ccc2:	4b58      	ldr	r3, [pc, #352]	@ (800ce24 <PrintKey+0x19c>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	2002      	movs	r0, #2
 800ccca:	f00f fd93 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800ccce:	e056      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800ccd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d106      	bne.n	800cce6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ccd8:	4b53      	ldr	r3, [pc, #332]	@ (800ce28 <PrintKey+0x1a0>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2100      	movs	r1, #0
 800ccde:	2002      	movs	r0, #2
 800cce0:	f00f fd88 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cce4:	e04b      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800cce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d106      	bne.n	800ccfc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ccee:	4b4f      	ldr	r3, [pc, #316]	@ (800ce2c <PrintKey+0x1a4>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	2002      	movs	r0, #2
 800ccf6:	f00f fd7d 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800ccfa:	e040      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ccfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d106      	bne.n	800cd12 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800cd04:	4b4a      	ldr	r3, [pc, #296]	@ (800ce30 <PrintKey+0x1a8>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	2100      	movs	r1, #0
 800cd0a:	2002      	movs	r0, #2
 800cd0c:	f00f fd72 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cd10:	e035      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800cd12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd16:	2b04      	cmp	r3, #4
 800cd18:	d106      	bne.n	800cd28 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800cd1a:	4b46      	ldr	r3, [pc, #280]	@ (800ce34 <PrintKey+0x1ac>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2100      	movs	r1, #0
 800cd20:	2002      	movs	r0, #2
 800cd22:	f00f fd67 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cd26:	e02a      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cd28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd2c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd2e:	d106      	bne.n	800cd3e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800cd30:	4b41      	ldr	r3, [pc, #260]	@ (800ce38 <PrintKey+0x1b0>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	2100      	movs	r1, #0
 800cd36:	2002      	movs	r0, #2
 800cd38:	f00f fd5c 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cd3c:	e01f      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800cd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd42:	2b80      	cmp	r3, #128	@ 0x80
 800cd44:	d106      	bne.n	800cd54 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800cd46:	4b3d      	ldr	r3, [pc, #244]	@ (800ce3c <PrintKey+0x1b4>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	2002      	movs	r0, #2
 800cd4e:	f00f fd51 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cd52:	e014      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800cd54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd58:	2b81      	cmp	r3, #129	@ 0x81
 800cd5a:	d106      	bne.n	800cd6a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800cd5c:	4b38      	ldr	r3, [pc, #224]	@ (800ce40 <PrintKey+0x1b8>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2100      	movs	r1, #0
 800cd62:	2002      	movs	r0, #2
 800cd64:	f00f fd46 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 800cd68:	e009      	b.n	800cd7e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800cd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd6e:	2b82      	cmp	r3, #130	@ 0x82
 800cd70:	d105      	bne.n	800cd7e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800cd72:	4b34      	ldr	r3, [pc, #208]	@ (800ce44 <PrintKey+0x1bc>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	2100      	movs	r1, #0
 800cd78:	2002      	movs	r0, #2
 800cd7a:	f00f fd3b 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd80:	785b      	ldrb	r3, [r3, #1]
 800cd82:	4618      	mov	r0, r3
 800cd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd86:	789b      	ldrb	r3, [r3, #2]
 800cd88:	461c      	mov	r4, r3
 800cd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8c:	78db      	ldrb	r3, [r3, #3]
 800cd8e:	461d      	mov	r5, r3
 800cd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	461e      	mov	r6, r3
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	795b      	ldrb	r3, [r3, #5]
 800cd9a:	623b      	str	r3, [r7, #32]
 800cd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9e:	799b      	ldrb	r3, [r3, #6]
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda4:	79db      	ldrb	r3, [r3, #7]
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	7a1b      	ldrb	r3, [r3, #8]
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb0:	7a5b      	ldrb	r3, [r3, #9]
 800cdb2:	613b      	str	r3, [r7, #16]
 800cdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb6:	7a9b      	ldrb	r3, [r3, #10]
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdbc:	7adb      	ldrb	r3, [r3, #11]
 800cdbe:	60bb      	str	r3, [r7, #8]
 800cdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc2:	7b1b      	ldrb	r3, [r3, #12]
 800cdc4:	607b      	str	r3, [r7, #4]
 800cdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc8:	7b5b      	ldrb	r3, [r3, #13]
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	7b9b      	ldrb	r3, [r3, #14]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd4:	7bdb      	ldrb	r3, [r3, #15]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdda:	7c1b      	ldrb	r3, [r3, #16]
 800cddc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdde:	920e      	str	r2, [sp, #56]	@ 0x38
 800cde0:	910d      	str	r1, [sp, #52]	@ 0x34
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	920a      	str	r2, [sp, #40]	@ 0x28
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	9208      	str	r2, [sp, #32]
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	9207      	str	r2, [sp, #28]
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	9206      	str	r2, [sp, #24]
 800cdfe:	69fa      	ldr	r2, [r7, #28]
 800ce00:	9205      	str	r2, [sp, #20]
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	9603      	str	r6, [sp, #12]
 800ce08:	9502      	str	r5, [sp, #8]
 800ce0a:	9401      	str	r4, [sp, #4]
 800ce0c:	9000      	str	r0, [sp, #0]
 800ce0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce48 <PrintKey+0x1c0>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	2100      	movs	r1, #0
 800ce14:	2002      	movs	r0, #2
 800ce16:	f00f fced 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800ce1a:	bf00      	nop
 800ce1c:	3734      	adds	r7, #52	@ 0x34
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce22:	bf00      	nop
 800ce24:	0801fda4 	.word	0x0801fda4
 800ce28:	0801fdbc 	.word	0x0801fdbc
 800ce2c:	0801fdd4 	.word	0x0801fdd4
 800ce30:	0801fdec 	.word	0x0801fdec
 800ce34:	0801fe04 	.word	0x0801fe04
 800ce38:	0801fe1c 	.word	0x0801fe1c
 800ce3c:	0801fe34 	.word	0x0801fe34
 800ce40:	0801fe4c 	.word	0x0801fe4c
 800ce44:	0801fe64 	.word	0x0801fe64
 800ce48:	0801fe7c 	.word	0x0801fe7c

0800ce4c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]
 800ce5c:	e01a      	b.n	800ce94 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ce5e:	4b12      	ldr	r3, [pc, #72]	@ (800cea8 <GetKeyByID+0x5c>)
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	7bfa      	ldrb	r2, [r7, #15]
 800ce64:	4613      	mov	r3, r2
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	4413      	add	r3, r2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	3310      	adds	r3, #16
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	79fa      	ldrb	r2, [r7, #7]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d10b      	bne.n	800ce8e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ce76:	4b0c      	ldr	r3, [pc, #48]	@ (800cea8 <GetKeyByID+0x5c>)
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	7bfa      	ldrb	r2, [r7, #15]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	011b      	lsls	r3, r3, #4
 800ce80:	4413      	add	r3, r2
 800ce82:	3310      	adds	r3, #16
 800ce84:	18ca      	adds	r2, r1, r3
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e006      	b.n	800ce9c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	3301      	adds	r3, #1
 800ce92:	73fb      	strb	r3, [r7, #15]
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b09      	cmp	r3, #9
 800ce98:	d9e1      	bls.n	800ce5e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce9a:	2303      	movs	r3, #3
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bc80      	pop	{r7}
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	20000718 	.word	0x20000718

0800ceac <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ceac:	b590      	push	{r4, r7, lr}
 800ceae:	b0d1      	sub	sp, #324	@ 0x144
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800ceb6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800cec0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cec4:	6001      	str	r1, [r0, #0]
 800cec6:	4619      	mov	r1, r3
 800cec8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cecc:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800ced0:	801a      	strh	r2, [r3, #0]
 800ced2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ced6:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800ceda:	460a      	mov	r2, r1
 800cedc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cee2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <ComputeCmac+0x48>
 800ceec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cef4:	2302      	movs	r3, #2
 800cef6:	e05c      	b.n	800cfb2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe ff1b 	bl	800bd38 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cf02:	f107 0210 	add.w	r2, r7, #16
 800cf06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf0a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	4611      	mov	r1, r2
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff ff9a 	bl	800ce4c <GetKeyByID>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cf1e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d143      	bne.n	800cfae <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800cf26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	1c5a      	adds	r2, r3, #1
 800cf32:	f107 0314 	add.w	r3, r7, #20
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe ff16 	bl	800bd6a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800cf3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d009      	beq.n	800cf60 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800cf4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cf54:	f107 0014 	add.w	r0, r7, #20
 800cf58:	2210      	movs	r2, #16
 800cf5a:	6819      	ldr	r1, [r3, #0]
 800cf5c:	f7fe ff14 	bl	800bd88 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800cf60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf64:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cf68:	881a      	ldrh	r2, [r3, #0]
 800cf6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cf72:	f107 0014 	add.w	r0, r7, #20
 800cf76:	6819      	ldr	r1, [r3, #0]
 800cf78:	f7fe ff06 	bl	800bd88 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800cf7c:	f107 0214 	add.w	r2, r7, #20
 800cf80:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800cf84:	4611      	mov	r1, r2
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe ffc0 	bl	800bf0c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cf8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cf90:	061a      	lsls	r2, r3, #24
 800cf92:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800cf96:	041b      	lsls	r3, r3, #16
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800cf9e:	021b      	lsls	r3, r3, #8
 800cfa0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800cfa2:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cfac:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800cfae:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd90      	pop	{r4, r7, pc}

0800cfbc <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e00a      	b.n	800cfe6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800cfd0:	4a07      	ldr	r2, [pc, #28]	@ (800cff0 <SecureElementInit+0x34>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800cfd6:	4b06      	ldr	r3, [pc, #24]	@ (800cff0 <SecureElementInit+0x34>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	22c0      	movs	r2, #192	@ 0xc0
 800cfdc:	4905      	ldr	r1, [pc, #20]	@ (800cff4 <SecureElementInit+0x38>)
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f00b f8b9 	bl	8018156 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20000718 	.word	0x20000718
 800cff4:	08020bd0 	.word	0x08020bd0

0800cff8 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
 800d008:	e01a      	b.n	800d040 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d00a:	4b12      	ldr	r3, [pc, #72]	@ (800d054 <SecureElementGetKeyByID+0x5c>)
 800d00c:	6819      	ldr	r1, [r3, #0]
 800d00e:	7bfa      	ldrb	r2, [r7, #15]
 800d010:	4613      	mov	r3, r2
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	440b      	add	r3, r1
 800d018:	3310      	adds	r3, #16
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	79fa      	ldrb	r2, [r7, #7]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d10b      	bne.n	800d03a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800d022:	4b0c      	ldr	r3, [pc, #48]	@ (800d054 <SecureElementGetKeyByID+0x5c>)
 800d024:	6819      	ldr	r1, [r3, #0]
 800d026:	7bfa      	ldrb	r2, [r7, #15]
 800d028:	4613      	mov	r3, r2
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	3310      	adds	r3, #16
 800d030:	18ca      	adds	r2, r1, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d036:	2300      	movs	r3, #0
 800d038:	e006      	b.n	800d048 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	3301      	adds	r3, #1
 800d03e:	73fb      	strb	r3, [r7, #15]
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	2b09      	cmp	r3, #9
 800d044:	d9e1      	bls.n	800d00a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d046:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bc80      	pop	{r7}
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20000718 	.word	0x20000718

0800d058 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d05a:	b08b      	sub	sp, #44	@ 0x2c
 800d05c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d05e:	4b3f      	ldr	r3, [pc, #252]	@ (800d15c <SecureElementPrintKeys+0x104>)
 800d060:	2200      	movs	r2, #0
 800d062:	2100      	movs	r1, #0
 800d064:	2002      	movs	r0, #2
 800d066:	f00f fbc5 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800d06a:	2000      	movs	r0, #0
 800d06c:	f7ff fe0c 	bl	800cc88 <PrintKey>
    PrintKey(NWK_KEY);
 800d070:	2001      	movs	r0, #1
 800d072:	f7ff fe09 	bl	800cc88 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d076:	4b3a      	ldr	r3, [pc, #232]	@ (800d160 <SecureElementPrintKeys+0x108>)
 800d078:	2200      	movs	r2, #0
 800d07a:	2100      	movs	r1, #0
 800d07c:	2002      	movs	r0, #2
 800d07e:	f00f fbb9 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800d082:	2003      	movs	r0, #3
 800d084:	f7ff fe00 	bl	800cc88 <PrintKey>
    PrintKey(NWK_S_KEY);
 800d088:	2002      	movs	r0, #2
 800d08a:	f7ff fdfd 	bl	800cc88 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800d08e:	4b35      	ldr	r3, [pc, #212]	@ (800d164 <SecureElementPrintKeys+0x10c>)
 800d090:	2200      	movs	r2, #0
 800d092:	2100      	movs	r1, #0
 800d094:	2002      	movs	r0, #2
 800d096:	f00f fbad 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d09a:	4b33      	ldr	r3, [pc, #204]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	4b31      	ldr	r3, [pc, #196]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	785b      	ldrb	r3, [r3, #1]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	789b      	ldrb	r3, [r3, #2]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	78db      	ldrb	r3, [r3, #3]
 800d0b8:	461c      	mov	r4, r3
 800d0ba:	4b2b      	ldr	r3, [pc, #172]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	791b      	ldrb	r3, [r3, #4]
 800d0c0:	461d      	mov	r5, r3
 800d0c2:	4b29      	ldr	r3, [pc, #164]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	795b      	ldrb	r3, [r3, #5]
 800d0c8:	461e      	mov	r6, r3
 800d0ca:	4b27      	ldr	r3, [pc, #156]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	799b      	ldrb	r3, [r3, #6]
 800d0d0:	607b      	str	r3, [r7, #4]
 800d0d2:	4b25      	ldr	r3, [pc, #148]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	79db      	ldrb	r3, [r3, #7]
 800d0d8:	9307      	str	r3, [sp, #28]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	9306      	str	r3, [sp, #24]
 800d0de:	9605      	str	r6, [sp, #20]
 800d0e0:	9504      	str	r5, [sp, #16]
 800d0e2:	9403      	str	r4, [sp, #12]
 800d0e4:	9002      	str	r0, [sp, #8]
 800d0e6:	9101      	str	r1, [sp, #4]
 800d0e8:	9200      	str	r2, [sp, #0]
 800d0ea:	4b20      	ldr	r3, [pc, #128]	@ (800d16c <SecureElementPrintKeys+0x114>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	2002      	movs	r0, #2
 800d0f2:	f00f fb7f 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d0f6:	4b1c      	ldr	r3, [pc, #112]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	7a1b      	ldrb	r3, [r3, #8]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	7a5b      	ldrb	r3, [r3, #9]
 800d104:	4619      	mov	r1, r3
 800d106:	4b18      	ldr	r3, [pc, #96]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	7a9b      	ldrb	r3, [r3, #10]
 800d10c:	4618      	mov	r0, r3
 800d10e:	4b16      	ldr	r3, [pc, #88]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	7adb      	ldrb	r3, [r3, #11]
 800d114:	461c      	mov	r4, r3
 800d116:	4b14      	ldr	r3, [pc, #80]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	7b1b      	ldrb	r3, [r3, #12]
 800d11c:	461d      	mov	r5, r3
 800d11e:	4b12      	ldr	r3, [pc, #72]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	7b5b      	ldrb	r3, [r3, #13]
 800d124:	461e      	mov	r6, r3
 800d126:	4b10      	ldr	r3, [pc, #64]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	7b9b      	ldrb	r3, [r3, #14]
 800d12c:	607b      	str	r3, [r7, #4]
 800d12e:	4b0e      	ldr	r3, [pc, #56]	@ (800d168 <SecureElementPrintKeys+0x110>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	7bdb      	ldrb	r3, [r3, #15]
 800d134:	9307      	str	r3, [sp, #28]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	9306      	str	r3, [sp, #24]
 800d13a:	9605      	str	r6, [sp, #20]
 800d13c:	9504      	str	r5, [sp, #16]
 800d13e:	9403      	str	r4, [sp, #12]
 800d140:	9002      	str	r0, [sp, #8]
 800d142:	9101      	str	r1, [sp, #4]
 800d144:	9200      	str	r2, [sp, #0]
 800d146:	4b0a      	ldr	r3, [pc, #40]	@ (800d170 <SecureElementPrintKeys+0x118>)
 800d148:	2200      	movs	r2, #0
 800d14a:	2100      	movs	r1, #0
 800d14c:	2002      	movs	r0, #2
 800d14e:	f00f fb51 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15c:	0801fed0 	.word	0x0801fed0
 800d160:	0801fee8 	.word	0x0801fee8
 800d164:	0801ff00 	.word	0x0801ff00
 800d168:	20000718 	.word	0x20000718
 800d16c:	0801ff18 	.word	0x0801ff18
 800d170:	0801ff58 	.word	0x0801ff58

0800d174 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800d178:	2004      	movs	r0, #4
 800d17a:	f7ff fd85 	bl	800cc88 <PrintKey>
    PrintKey(MC_KE_KEY);
 800d17e:	207f      	movs	r0, #127	@ 0x7f
 800d180:	f7ff fd82 	bl	800cc88 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800d184:	2002      	movs	r0, #2
 800d186:	f7ff fd7f 	bl	800cc88 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800d18a:	2003      	movs	r0, #3
 800d18c:	f7ff fd7c 	bl	800cc88 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	6039      	str	r1, [r7, #0]
 800d1a2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	e04c      	b.n	800d248 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	77fb      	strb	r3, [r7, #31]
 800d1b2:	e045      	b.n	800d240 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d1b4:	4b26      	ldr	r3, [pc, #152]	@ (800d250 <SecureElementSetKey+0xb8>)
 800d1b6:	6819      	ldr	r1, [r3, #0]
 800d1b8:	7ffa      	ldrb	r2, [r7, #31]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	4413      	add	r3, r2
 800d1c0:	440b      	add	r3, r1
 800d1c2:	3310      	adds	r3, #16
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	79fa      	ldrb	r2, [r7, #7]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d136      	bne.n	800d23a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	2b80      	cmp	r3, #128	@ 0x80
 800d1d0:	d123      	bne.n	800d21a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d1d2:	2306      	movs	r3, #6
 800d1d4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	f107 0310 	add.w	r3, r7, #16
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	605a      	str	r2, [r3, #4]
 800d1e4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d1e6:	f107 030c 	add.w	r3, r7, #12
 800d1ea:	227f      	movs	r2, #127	@ 0x7f
 800d1ec:	2110      	movs	r1, #16
 800d1ee:	6838      	ldr	r0, [r7, #0]
 800d1f0:	f000 f87d 	bl	800d2ee <SecureElementAesEncrypt>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d1f8:	4b15      	ldr	r3, [pc, #84]	@ (800d250 <SecureElementSetKey+0xb8>)
 800d1fa:	6819      	ldr	r1, [r3, #0]
 800d1fc:	7ffa      	ldrb	r2, [r7, #31]
 800d1fe:	4613      	mov	r3, r2
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	4413      	add	r3, r2
 800d204:	3310      	adds	r3, #16
 800d206:	440b      	add	r3, r1
 800d208:	3301      	adds	r3, #1
 800d20a:	f107 010c 	add.w	r1, r7, #12
 800d20e:	2210      	movs	r2, #16
 800d210:	4618      	mov	r0, r3
 800d212:	f00a ffa0 	bl	8018156 <memcpy1>
                return retval;
 800d216:	7fbb      	ldrb	r3, [r7, #30]
 800d218:	e016      	b.n	800d248 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d21a:	4b0d      	ldr	r3, [pc, #52]	@ (800d250 <SecureElementSetKey+0xb8>)
 800d21c:	6819      	ldr	r1, [r3, #0]
 800d21e:	7ffa      	ldrb	r2, [r7, #31]
 800d220:	4613      	mov	r3, r2
 800d222:	011b      	lsls	r3, r3, #4
 800d224:	4413      	add	r3, r2
 800d226:	3310      	adds	r3, #16
 800d228:	440b      	add	r3, r1
 800d22a:	3301      	adds	r3, #1
 800d22c:	2210      	movs	r2, #16
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	4618      	mov	r0, r3
 800d232:	f00a ff90 	bl	8018156 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d236:	2300      	movs	r3, #0
 800d238:	e006      	b.n	800d248 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d23a:	7ffb      	ldrb	r3, [r7, #31]
 800d23c:	3301      	adds	r3, #1
 800d23e:	77fb      	strb	r3, [r7, #31]
 800d240:	7ffb      	ldrb	r3, [r7, #31]
 800d242:	2b09      	cmp	r3, #9
 800d244:	d9b6      	bls.n	800d1b4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d246:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20000718 	.word	0x20000718

0800d254 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af02      	add	r7, sp, #8
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	4611      	mov	r1, r2
 800d260:	461a      	mov	r2, r3
 800d262:	460b      	mov	r3, r1
 800d264:	80fb      	strh	r3, [r7, #6]
 800d266:	4613      	mov	r3, r2
 800d268:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d26a:	797b      	ldrb	r3, [r7, #5]
 800d26c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d26e:	d901      	bls.n	800d274 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d270:	2303      	movs	r3, #3
 800d272:	e009      	b.n	800d288 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d274:	7979      	ldrb	r1, [r7, #5]
 800d276:	88fa      	ldrh	r2, [r7, #6]
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	460b      	mov	r3, r1
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff fe13 	bl	800ceac <ComputeCmac>
 800d286:	4603      	mov	r3, r0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b088      	sub	sp, #32
 800d294:	af02      	add	r7, sp, #8
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	607a      	str	r2, [r7, #4]
 800d29a:	461a      	mov	r2, r3
 800d29c:	460b      	mov	r3, r1
 800d29e:	817b      	strh	r3, [r7, #10]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e01b      	b.n	800d2e6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d2ae:	2306      	movs	r3, #6
 800d2b0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d2b6:	7a79      	ldrb	r1, [r7, #9]
 800d2b8:	897a      	ldrh	r2, [r7, #10]
 800d2ba:	f107 0310 	add.w	r3, r7, #16
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	f7ff fdf1 	bl	800ceac <ComputeCmac>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	e006      	b.n	800d2e6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d001      	beq.n	800d2e4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b0c2      	sub	sp, #264	@ 0x108
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	4608      	mov	r0, r1
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d2fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	4603      	mov	r3, r0
 800d306:	817b      	strh	r3, [r7, #10]
 800d308:	460b      	mov	r3, r1
 800d30a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <SecureElementAesEncrypt+0x32>
 800d312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d320:	2302      	movs	r3, #2
 800d322:	e046      	b.n	800d3b2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d324:	897b      	ldrh	r3, [r7, #10]
 800d326:	f003 030f 	and.w	r3, r3, #15
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d330:	2305      	movs	r3, #5
 800d332:	e03e      	b.n	800d3b2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d334:	f107 0314 	add.w	r3, r7, #20
 800d338:	22f0      	movs	r2, #240	@ 0xf0
 800d33a:	2100      	movs	r1, #0
 800d33c:	4618      	mov	r0, r3
 800d33e:	f00a ff45 	bl	80181cc <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d342:	f107 0210 	add.w	r2, r7, #16
 800d346:	7a7b      	ldrb	r3, [r7, #9]
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fd7e 	bl	800ce4c <GetKeyByID>
 800d350:	4603      	mov	r3, r0
 800d352:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d356:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d127      	bne.n	800d3ae <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	3301      	adds	r3, #1
 800d362:	f107 0214 	add.w	r2, r7, #20
 800d366:	2110      	movs	r1, #16
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fb65 	bl	800ca38 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d374:	e018      	b.n	800d3a8 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d376:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	18d0      	adds	r0, r2, r3
 800d37e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d382:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d386:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	4413      	add	r3, r2
 800d38e:	f107 0214 	add.w	r2, r7, #20
 800d392:	4619      	mov	r1, r3
 800d394:	f7ff fc2e 	bl	800cbf4 <lorawan_aes_encrypt>
            block = block + 16;
 800d398:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d39c:	3310      	adds	r3, #16
 800d39e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d3a2:	897b      	ldrh	r3, [r7, #10]
 800d3a4:	3b10      	subs	r3, #16
 800d3a6:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d3a8:	897b      	ldrh	r3, [r7, #10]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e3      	bne.n	800d376 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d3ae:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	e02e      	b.n	800d434 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d3d6:	2306      	movs	r3, #6
 800d3d8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d3da:	78bb      	ldrb	r3, [r7, #2]
 800d3dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3de:	d104      	bne.n	800d3ea <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d3e0:	78fb      	ldrb	r3, [r7, #3]
 800d3e2:	2b04      	cmp	r3, #4
 800d3e4:	d001      	beq.n	800d3ea <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e024      	b.n	800d434 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60fb      	str	r3, [r7, #12]
 800d3ee:	f107 0310 	add.w	r3, r7, #16
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	605a      	str	r2, [r3, #4]
 800d3f8:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d3fa:	f107 030c 	add.w	r3, r7, #12
 800d3fe:	78fa      	ldrb	r2, [r7, #3]
 800d400:	2110      	movs	r1, #16
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff ff73 	bl	800d2ee <SecureElementAesEncrypt>
 800d408:	4603      	mov	r3, r0
 800d40a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d40c:	7ffb      	ldrb	r3, [r7, #31]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d412:	7ffb      	ldrb	r3, [r7, #31]
 800d414:	e00e      	b.n	800d434 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d416:	f107 020c 	add.w	r2, r7, #12
 800d41a:	78bb      	ldrb	r3, [r7, #2]
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff feba 	bl	800d198 <SecureElementSetKey>
 800d424:	4603      	mov	r3, r0
 800d426:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d428:	7ffb      	ldrb	r3, [r7, #31]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d42e:	7ffb      	ldrb	r3, [r7, #31]
 800d430:	e000      	b.n	800d434 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d432:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
 800d44a:	4613      	mov	r3, r2
 800d44c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <SecureElementProcessJoinAccept+0x24>
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <SecureElementProcessJoinAccept+0x24>
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d460:	2302      	movs	r3, #2
 800d462:	e064      	b.n	800d52e <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d464:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d468:	2b21      	cmp	r3, #33	@ 0x21
 800d46a:	d901      	bls.n	800d470 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d46c:	2305      	movs	r3, #5
 800d46e:	e05e      	b.n	800d52e <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d470:	2301      	movs	r3, #1
 800d472:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d474:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	461a      	mov	r2, r3
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d480:	f00a fe69 	bl	8018156 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	1c58      	adds	r0, r3, #1
 800d488:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	b299      	uxth	r1, r3
 800d492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d494:	3301      	adds	r3, #1
 800d496:	7dfa      	ldrb	r2, [r7, #23]
 800d498:	f7ff ff29 	bl	800d2ee <SecureElementAesEncrypt>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d4a2:	2307      	movs	r3, #7
 800d4a4:	e043      	b.n	800d52e <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	330b      	adds	r3, #11
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	09db      	lsrs	r3, r3, #7
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d4b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4bc:	3b04      	subs	r3, #4
 800d4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4c0:	4413      	add	r3, r2
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d4c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4ca:	3b03      	subs	r3, #3
 800d4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4ce:	4413      	add	r3, r2
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	021b      	lsls	r3, r3, #8
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d4da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4de:	3b02      	subs	r3, #2
 800d4e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e2:	4413      	add	r3, r2
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	041b      	lsls	r3, r3, #16
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d4ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4f6:	4413      	add	r3, r2
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10e      	bne.n	800d528 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d50a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	3b04      	subs	r3, #4
 800d512:	b299      	uxth	r1, r3
 800d514:	2301      	movs	r3, #1
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d51a:	f7ff feb9 	bl	800d290 <SecureElementVerifyAesCmac>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d003      	beq.n	800d52c <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d524:	2301      	movs	r3, #1
 800d526:	e002      	b.n	800d52e <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d528:	2304      	movs	r3, #4
 800d52a:	e000      	b.n	800d52e <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d546:	2302      	movs	r3, #2
 800d548:	e007      	b.n	800d55a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d54a:	4b06      	ldr	r3, [pc, #24]	@ (800d564 <SecureElementSetDevEui+0x2c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2208      	movs	r2, #8
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	f00a fdff 	bl	8018156 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20000718 	.word	0x20000718

0800d568 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d568:	b480      	push	{r7}
 800d56a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d56c:	4b02      	ldr	r3, [pc, #8]	@ (800d578 <SecureElementGetDevEui+0x10>)
 800d56e:	681b      	ldr	r3, [r3, #0]
}
 800d570:	4618      	mov	r0, r3
 800d572:	46bd      	mov	sp, r7
 800d574:	bc80      	pop	{r7}
 800d576:	4770      	bx	lr
 800d578:	20000718 	.word	0x20000718

0800d57c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d58a:	2302      	movs	r3, #2
 800d58c:	e008      	b.n	800d5a0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d58e:	4b06      	ldr	r3, [pc, #24]	@ (800d5a8 <SecureElementSetJoinEui+0x2c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3308      	adds	r3, #8
 800d594:	2208      	movs	r2, #8
 800d596:	6879      	ldr	r1, [r7, #4]
 800d598:	4618      	mov	r0, r3
 800d59a:	f00a fddc 	bl	8018156 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20000718 	.word	0x20000718

0800d5ac <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	@ (800d5c0 <SecureElementGetJoinEui+0x14>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3308      	adds	r3, #8
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bc80      	pop	{r7}
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20000718 	.word	0x20000718

0800d5c4 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d5ce:	4a23      	ldr	r2, [pc, #140]	@ (800d65c <LmHandlerInit+0x98>)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d5d4:	4b22      	ldr	r3, [pc, #136]	@ (800d660 <LmHandlerInit+0x9c>)
 800d5d6:	4a23      	ldr	r2, [pc, #140]	@ (800d664 <LmHandlerInit+0xa0>)
 800d5d8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d5da:	4b21      	ldr	r3, [pc, #132]	@ (800d660 <LmHandlerInit+0x9c>)
 800d5dc:	4a22      	ldr	r2, [pc, #136]	@ (800d668 <LmHandlerInit+0xa4>)
 800d5de:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d5e0:	4b1f      	ldr	r3, [pc, #124]	@ (800d660 <LmHandlerInit+0x9c>)
 800d5e2:	4a22      	ldr	r2, [pc, #136]	@ (800d66c <LmHandlerInit+0xa8>)
 800d5e4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d5e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d660 <LmHandlerInit+0x9c>)
 800d5e8:	4a21      	ldr	r2, [pc, #132]	@ (800d670 <LmHandlerInit+0xac>)
 800d5ea:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d5ec:	4b1b      	ldr	r3, [pc, #108]	@ (800d65c <LmHandlerInit+0x98>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a20      	ldr	r2, [pc, #128]	@ (800d674 <LmHandlerInit+0xb0>)
 800d5f4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d5f6:	4b19      	ldr	r3, [pc, #100]	@ (800d65c <LmHandlerInit+0x98>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d674 <LmHandlerInit+0xb0>)
 800d5fe:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d600:	4b16      	ldr	r3, [pc, #88]	@ (800d65c <LmHandlerInit+0x98>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	4a1b      	ldr	r2, [pc, #108]	@ (800d674 <LmHandlerInit+0xb0>)
 800d608:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d60a:	4b1a      	ldr	r3, [pc, #104]	@ (800d674 <LmHandlerInit+0xb0>)
 800d60c:	4a1a      	ldr	r2, [pc, #104]	@ (800d678 <LmHandlerInit+0xb4>)
 800d60e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d610:	4b12      	ldr	r3, [pc, #72]	@ (800d65c <LmHandlerInit+0x98>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	4a17      	ldr	r2, [pc, #92]	@ (800d674 <LmHandlerInit+0xb0>)
 800d618:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d61a:	4a18      	ldr	r2, [pc, #96]	@ (800d67c <LmHandlerInit+0xb8>)
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d620:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <LmHandlerInit+0x98>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d626:	4a15      	ldr	r2, [pc, #84]	@ (800d67c <LmHandlerInit+0xb8>)
 800d628:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800d62a:	4b0c      	ldr	r3, [pc, #48]	@ (800d65c <LmHandlerInit+0x98>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d630:	4a12      	ldr	r2, [pc, #72]	@ (800d67c <LmHandlerInit+0xb8>)
 800d632:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800d634:	4b09      	ldr	r3, [pc, #36]	@ (800d65c <LmHandlerInit+0x98>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d63a:	4a10      	ldr	r2, [pc, #64]	@ (800d67c <LmHandlerInit+0xb8>)
 800d63c:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d63e:	490f      	ldr	r1, [pc, #60]	@ (800d67c <LmHandlerInit+0xb8>)
 800d640:	2000      	movs	r0, #0
 800d642:	f000 fd87 	bl	800e154 <LmHandlerPackageRegister>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d64c:	f04f 33ff 	mov.w	r3, #4294967295
 800d650:	e000      	b.n	800d654 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000754 	.word	0x20000754
 800d660:	20000758 	.word	0x20000758
 800d664:	0800de61 	.word	0x0800de61
 800d668:	0800dec9 	.word	0x0800dec9
 800d66c:	0800df95 	.word	0x0800df95
 800d670:	0800e0ad 	.word	0x0800e0ad
 800d674:	20000768 	.word	0x20000768
 800d678:	0800e525 	.word	0x0800e525
 800d67c:	2000071c 	.word	0x2000071c

0800d680 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b094      	sub	sp, #80	@ 0x50
 800d684:	af04      	add	r7, sp, #16
 800d686:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d688:	2214      	movs	r2, #20
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	4891      	ldr	r0, [pc, #580]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d68e:	f00e f867 	bl	801b760 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800d692:	4b91      	ldr	r3, [pc, #580]	@ (800d8d8 <LmHandlerConfigure+0x258>)
 800d694:	2200      	movs	r2, #0
 800d696:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d698:	f7fe fb0c 	bl	800bcb4 <LoraInfo_GetPtr>
 800d69c:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d69e:	4b8d      	ldr	r3, [pc, #564]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	4093      	lsls	r3, r2
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d107      	bne.n	800d6c4 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d6b4:	4b89      	ldr	r3, [pc, #548]	@ (800d8dc <LmHandlerConfigure+0x25c>)
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f00f f89a 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d6c0:	bf00      	nop
 800d6c2:	e7fd      	b.n	800d6c0 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d6c4:	4b83      	ldr	r3, [pc, #524]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	4985      	ldr	r1, [pc, #532]	@ (800d8e0 <LmHandlerConfigure+0x260>)
 800d6cc:	4885      	ldr	r0, [pc, #532]	@ (800d8e4 <LmHandlerConfigure+0x264>)
 800d6ce:	f004 fe95 	bl	80123fc <LoRaMacInitialization>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6dc:	e0f5      	b.n	800d8ca <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800d6de:	2327      	movs	r3, #39	@ 0x27
 800d6e0:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d6e2:	f107 0318 	add.w	r3, r7, #24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f005 fbd8 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800d6f2:	4b7d      	ldr	r3, [pc, #500]	@ (800d8e8 <LmHandlerConfigure+0x268>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	e02a      	b.n	800d750 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d6fa:	2328      	movs	r3, #40	@ 0x28
 800d6fc:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d6fe:	4b7b      	ldr	r3, [pc, #492]	@ (800d8ec <LmHandlerConfigure+0x26c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00c      	beq.n	800d722 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d708:	f107 0318 	add.w	r3, r7, #24
 800d70c:	4618      	mov	r0, r3
 800d70e:	f005 fa1f 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d712:	4b76      	ldr	r3, [pc, #472]	@ (800d8ec <LmHandlerConfigure+0x26c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	69fa      	ldr	r2, [r7, #28]
 800d71a:	f240 517c 	movw	r1, #1404	@ 0x57c
 800d71e:	4610      	mov	r0, r2
 800d720:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800d722:	2327      	movs	r3, #39	@ 0x27
 800d724:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d726:	f107 0318 	add.w	r3, r7, #24
 800d72a:	4618      	mov	r0, r3
 800d72c:	f005 fbb6 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10c      	bne.n	800d750 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d736:	2301      	movs	r3, #1
 800d738:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d73a:	f107 0318 	add.w	r3, r7, #24
 800d73e:	4618      	mov	r0, r3
 800d740:	f005 fa06 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d744:	7f3b      	ldrb	r3, [r7, #28]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800d74a:	4b67      	ldr	r3, [pc, #412]	@ (800d8e8 <LmHandlerConfigure+0x268>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800d750:	4b65      	ldr	r3, [pc, #404]	@ (800d8e8 <LmHandlerConfigure+0x268>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d02a      	beq.n	800d7ae <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d758:	4b64      	ldr	r3, [pc, #400]	@ (800d8ec <LmHandlerConfigure+0x26c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	69db      	ldr	r3, [r3, #28]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d004      	beq.n	800d76c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d762:	4b62      	ldr	r3, [pc, #392]	@ (800d8ec <LmHandlerConfigure+0x26c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	69db      	ldr	r3, [r3, #28]
 800d768:	2000      	movs	r0, #0
 800d76a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800d76c:	2306      	movs	r3, #6
 800d76e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d770:	f107 0318 	add.w	r3, r7, #24
 800d774:	4618      	mov	r0, r3
 800d776:	f005 f9eb 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	4a5c      	ldr	r2, [pc, #368]	@ (800d8f0 <LmHandlerConfigure+0x270>)
 800d77e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800d780:	2327      	movs	r3, #39	@ 0x27
 800d782:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d784:	f107 0318 	add.w	r3, r7, #24
 800d788:	4618      	mov	r0, r3
 800d78a:	f005 f9e1 	bl	8012b50 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d794:	4b4f      	ldr	r3, [pc, #316]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d796:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800d79e:	4b4d      	ldr	r3, [pc, #308]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d7a0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800d7a8:	4b4a      	ldr	r3, [pc, #296]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d7aa:	709a      	strb	r2, [r3, #2]
 800d7ac:	e019      	b.n	800d7e2 <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d7ae:	2305      	movs	r3, #5
 800d7b0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d7b6:	f107 0318 	add.w	r3, r7, #24
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f005 fb6e 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d7c0:	4b4a      	ldr	r3, [pc, #296]	@ (800d8ec <LmHandlerConfigure+0x26c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	4798      	blx	r3
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	4a49      	ldr	r2, [pc, #292]	@ (800d8f0 <LmHandlerConfigure+0x270>)
 800d7cc:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d7ce:	2306      	movs	r3, #6
 800d7d0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d7d2:	4b47      	ldr	r3, [pc, #284]	@ (800d8f0 <LmHandlerConfigure+0x270>)
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d7d8:	f107 0318 	add.w	r3, r7, #24
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f005 fb5d 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d7e6:	f107 0318 	add.w	r3, r7, #24
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f005 f9b0 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	2208      	movs	r2, #8
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	483e      	ldr	r0, [pc, #248]	@ (800d8f0 <LmHandlerConfigure+0x270>)
 800d7f8:	f00a fcad 	bl	8018156 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d800:	f107 0318 	add.w	r3, r7, #24
 800d804:	4618      	mov	r0, r3
 800d806:	f005 f9a3 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	2208      	movs	r2, #8
 800d80e:	4619      	mov	r1, r3
 800d810:	4838      	ldr	r0, [pc, #224]	@ (800d8f4 <LmHandlerConfigure+0x274>)
 800d812:	f00a fca0 	bl	8018156 <memcpy1>

    SecureElementPrintKeys();
 800d816:	f7ff fc1f 	bl	800d058 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d81a:	4b37      	ldr	r3, [pc, #220]	@ (800d8f8 <LmHandlerConfigure+0x278>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	4b36      	ldr	r3, [pc, #216]	@ (800d8fc <LmHandlerConfigure+0x27c>)
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4619      	mov	r1, r3
 800d826:	4b36      	ldr	r3, [pc, #216]	@ (800d900 <LmHandlerConfigure+0x280>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	4b35      	ldr	r3, [pc, #212]	@ (800d904 <LmHandlerConfigure+0x284>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	9002      	str	r0, [sp, #8]
 800d834:	9101      	str	r1, [sp, #4]
 800d836:	9200      	str	r2, [sp, #0]
 800d838:	4b33      	ldr	r3, [pc, #204]	@ (800d908 <LmHandlerConfigure+0x288>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	2100      	movs	r1, #0
 800d83e:	2002      	movs	r0, #2
 800d840:	f00e ffd8 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d844:	230f      	movs	r3, #15
 800d846:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d848:	2301      	movs	r3, #1
 800d84a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d84c:	f107 0318 	add.w	r3, r7, #24
 800d850:	4618      	mov	r0, r3
 800d852:	f005 fb23 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d856:	2310      	movs	r3, #16
 800d858:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d85a:	2300      	movs	r3, #0
 800d85c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d85e:	f107 0318 	add.w	r3, r7, #24
 800d862:	4618      	mov	r0, r3
 800d864:	f005 fb1a 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d868:	2304      	movs	r3, #4
 800d86a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d86c:	4b19      	ldr	r3, [pc, #100]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d86e:	789b      	ldrb	r3, [r3, #2]
 800d870:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d872:	f107 0318 	add.w	r3, r7, #24
 800d876:	4618      	mov	r0, r3
 800d878:	f005 fb10 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d87c:	2338      	movs	r3, #56	@ 0x38
 800d87e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d880:	4b14      	ldr	r3, [pc, #80]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d886:	f107 0318 	add.w	r3, r7, #24
 800d88a:	4618      	mov	r0, r3
 800d88c:	f005 fb06 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d890:	230f      	movs	r3, #15
 800d892:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d894:	4b0f      	ldr	r3, [pc, #60]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	f107 0210 	add.w	r2, r7, #16
 800d89c:	4611      	mov	r1, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f008 f9b8 	bl	8015c14 <RegionGetPhyParam>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	bf14      	ite	ne
 800d8ae:	2301      	movne	r3, #1
 800d8b0:	2300      	moveq	r3, #0
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	4b07      	ldr	r3, [pc, #28]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d8b6:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d8b8:	2014      	movs	r0, #20
 800d8ba:	f000 fab9 	bl	800de30 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d8be:	4b05      	ldr	r3, [pc, #20]	@ (800d8d4 <LmHandlerConfigure+0x254>)
 800d8c0:	799b      	ldrb	r3, [r3, #6]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f006 f918 	bl	8013af8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3740      	adds	r7, #64	@ 0x40
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000740 	.word	0x20000740
 800d8d8:	20000780 	.word	0x20000780
 800d8dc:	0801ff98 	.word	0x0801ff98
 800d8e0:	20000768 	.word	0x20000768
 800d8e4:	20000758 	.word	0x20000758
 800d8e8:	20000876 	.word	0x20000876
 800d8ec:	20000754 	.word	0x20000754
 800d8f0:	20000078 	.word	0x20000078
 800d8f4:	20000080 	.word	0x20000080
 800d8f8:	2000008f 	.word	0x2000008f
 800d8fc:	2000008e 	.word	0x2000008e
 800d900:	2000008d 	.word	0x2000008d
 800d904:	2000008c 	.word	0x2000008c
 800d908:	0801ffe4 	.word	0x0801ffe4

0800d90c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d912:	f002 fd45 	bl	80103a0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d916:	f000 fd3b 	bl	800e390 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800d91a:	f000 fd0f 	bl	800e33c <LmHandlerPackageIsTxPending>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d117      	bne.n	800d954 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800d924:	4b0d      	ldr	r3, [pc, #52]	@ (800d95c <LmHandlerProcess+0x50>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d014      	beq.n	800d956 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800d92c:	2300      	movs	r3, #0
 800d92e:	703b      	strb	r3, [r7, #0]
 800d930:	2300      	movs	r3, #0
 800d932:	707b      	strb	r3, [r7, #1]
 800d934:	2300      	movs	r3, #0
 800d936:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d938:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <LmHandlerProcess+0x54>)
 800d93a:	78d9      	ldrb	r1, [r3, #3]
 800d93c:	463b      	mov	r3, r7
 800d93e:	2200      	movs	r2, #0
 800d940:	4618      	mov	r0, r3
 800d942:	f000 f8b7 	bl	800dab4 <LmHandlerSend>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d104      	bne.n	800d956 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d94c:	4b03      	ldr	r3, [pc, #12]	@ (800d95c <LmHandlerProcess+0x50>)
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
 800d952:	e000      	b.n	800d956 <LmHandlerProcess+0x4a>
        return;
 800d954:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	20000780 	.word	0x20000780
 800d960:	20000740 	.word	0x20000740

0800d964 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d964:	b480      	push	{r7}
 800d966:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d968:	4b02      	ldr	r3, [pc, #8]	@ (800d974 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d96a:	681b      	ldr	r3, [r3, #0]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	46bd      	mov	sp, r7
 800d970:	bc80      	pop	{r7}
 800d972:	4770      	bx	lr
 800d974:	2000077c 	.word	0x2000077c

0800d978 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b090      	sub	sp, #64	@ 0x40
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	460a      	mov	r2, r1
 800d982:	71fb      	strb	r3, [r7, #7]
 800d984:	4613      	mov	r3, r2
 800d986:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d988:	2301      	movs	r3, #1
 800d98a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d98e:	4b36      	ldr	r3, [pc, #216]	@ (800da68 <LmHandlerJoin+0xf0>)
 800d990:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d10b      	bne.n	800d9b8 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d9a6:	4b31      	ldr	r3, [pc, #196]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9a8:	2202      	movs	r2, #2
 800d9aa:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d9ac:	4a2f      	ldr	r2, [pc, #188]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9ae:	79bb      	ldrb	r3, [r7, #6]
 800d9b0:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d9b2:	f004 ffdb 	bl	801296c <LoRaMacStart>
 800d9b6:	e041      	b.n	800da3c <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d9be:	4b2b      	ldr	r3, [pc, #172]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d9c4:	4b28      	ldr	r3, [pc, #160]	@ (800da68 <LmHandlerJoin+0xf0>)
 800d9c6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d9ca:	4b28      	ldr	r3, [pc, #160]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9cc:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d9ce:	4b27      	ldr	r3, [pc, #156]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d9d4:	4a25      	ldr	r2, [pc, #148]	@ (800da6c <LmHandlerJoin+0xf4>)
 800d9d6:	79bb      	ldrb	r3, [r7, #6]
 800d9d8:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800d9da:	4b25      	ldr	r3, [pc, #148]	@ (800da70 <LmHandlerJoin+0xf8>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	f083 0301 	eor.w	r3, r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d01e      	beq.n	800da26 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d9e8:	231f      	movs	r3, #31
 800d9ea:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800da68 <LmHandlerJoin+0xf0>)
 800d9ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d9f2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d9f4:	f107 0308 	add.w	r3, r7, #8
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f005 fa4f 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d9fe:	2320      	movs	r3, #32
 800da00:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800da02:	4b19      	ldr	r3, [pc, #100]	@ (800da68 <LmHandlerJoin+0xf0>)
 800da04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800da08:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800da0a:	f107 0308 	add.w	r3, r7, #8
 800da0e:	4618      	mov	r0, r3
 800da10:	f005 fa44 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800da14:	2329      	movs	r3, #41	@ 0x29
 800da16:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800da18:	4b16      	ldr	r3, [pc, #88]	@ (800da74 <LmHandlerJoin+0xfc>)
 800da1a:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	4618      	mov	r0, r3
 800da22:	f005 fa3b 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800da26:	f004 ffa1 	bl	801296c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800da2a:	2301      	movs	r3, #1
 800da2c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800da2e:	2301      	movs	r3, #1
 800da30:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800da32:	f107 0308 	add.w	r3, r7, #8
 800da36:	4618      	mov	r0, r3
 800da38:	f005 fa30 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800da3c:	4b0c      	ldr	r3, [pc, #48]	@ (800da70 <LmHandlerJoin+0xf8>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	f083 0301 	eor.w	r3, r3, #1
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <LmHandlerJoin+0xd8>
 800da4a:	79bb      	ldrb	r3, [r7, #6]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d004      	beq.n	800da5a <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800da50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800da54:	4618      	mov	r0, r3
 800da56:	f005 fd91 	bl	801357c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800da5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da5c:	4a06      	ldr	r2, [pc, #24]	@ (800da78 <LmHandlerJoin+0x100>)
 800da5e:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800da60:	bf00      	nop
 800da62:	3740      	adds	r7, #64	@ 0x40
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20000740 	.word	0x20000740
 800da6c:	20000090 	.word	0x20000090
 800da70:	20000876 	.word	0x20000876
 800da74:	01000400 	.word	0x01000400
 800da78:	2000077c 	.word	0x2000077c

0800da7c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08a      	sub	sp, #40	@ 0x28
 800da80:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800da82:	2301      	movs	r3, #1
 800da84:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800da86:	463b      	mov	r3, r7
 800da88:	4618      	mov	r0, r3
 800da8a:	f005 f861 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800da94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da9c:	793b      	ldrb	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800daa2:	2300      	movs	r3, #0
 800daa4:	e002      	b.n	800daac <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800daaa:	2300      	movs	r3, #0
    }
}
 800daac:	4618      	mov	r0, r3
 800daae:	3728      	adds	r7, #40	@ 0x28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b08a      	sub	sp, #40	@ 0x28
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
 800dac0:	4613      	mov	r3, r2
 800dac2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dac4:	23ff      	movs	r3, #255	@ 0xff
 800dac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800daca:	f002 f9c9 	bl	800fe60 <LoRaMacIsBusy>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dad4:	f06f 0301 	mvn.w	r3, #1
 800dad8:	e0a3      	b.n	800dc22 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800dada:	f7ff ffcf 	bl	800da7c <LmHandlerJoinStatus>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d00a      	beq.n	800dafa <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800dae4:	4b51      	ldr	r3, [pc, #324]	@ (800dc2c <LmHandlerSend+0x178>)
 800dae6:	799b      	ldrb	r3, [r3, #6]
 800dae8:	4a50      	ldr	r2, [pc, #320]	@ (800dc2c <LmHandlerSend+0x178>)
 800daea:	79d2      	ldrb	r2, [r2, #7]
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f7ff ff42 	bl	800d978 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800daf4:	f06f 0302 	mvn.w	r3, #2
 800daf8:	e093      	b.n	800dc22 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800dafa:	4a4d      	ldr	r2, [pc, #308]	@ (800dc30 <LmHandlerSend+0x17c>)
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	2b00      	cmp	r3, #0
 800db04:	bf14      	ite	ne
 800db06:	2301      	movne	r3, #1
 800db08:	2300      	moveq	r3, #0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800db0e:	4b49      	ldr	r3, [pc, #292]	@ (800dc34 <LmHandlerSend+0x180>)
 800db10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800db14:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	785b      	ldrb	r3, [r3, #1]
 800db1a:	f107 020c 	add.w	r2, r7, #12
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f004 ff85 	bl	8012a30 <LoRaMacQueryTxPossible>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d009      	beq.n	800db40 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800db2c:	2300      	movs	r3, #0
 800db2e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800db30:	2300      	movs	r3, #0
 800db32:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800db38:	23f9      	movs	r3, #249	@ 0xf9
 800db3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db3e:	e008      	b.n	800db52 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800db52:	4b37      	ldr	r3, [pc, #220]	@ (800dc30 <LmHandlerSend+0x17c>)
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	3310      	adds	r3, #16
 800db58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db5c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800db60:	4b34      	ldr	r3, [pc, #208]	@ (800dc34 <LmHandlerSend+0x180>)
 800db62:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800db66:	4b32      	ldr	r3, [pc, #200]	@ (800dc30 <LmHandlerSend+0x17c>)
 800db68:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800db6a:	78ba      	ldrb	r2, [r7, #2]
 800db6c:	f107 0310 	add.w	r3, r7, #16
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f005 fe88 	bl	8013888 <LoRaMacMcpsRequest>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	4a2d      	ldr	r2, [pc, #180]	@ (800dc38 <LmHandlerSend+0x184>)
 800db82:	6013      	str	r3, [r2, #0]

    switch (status)
 800db84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db88:	2b11      	cmp	r3, #17
 800db8a:	d843      	bhi.n	800dc14 <LmHandlerSend+0x160>
 800db8c:	a201      	add	r2, pc, #4	@ (adr r2, 800db94 <LmHandlerSend+0xe0>)
 800db8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db92:	bf00      	nop
 800db94:	0800dbdd 	.word	0x0800dbdd
 800db98:	0800dbf5 	.word	0x0800dbf5
 800db9c:	0800dc15 	.word	0x0800dc15
 800dba0:	0800dc15 	.word	0x0800dc15
 800dba4:	0800dc15 	.word	0x0800dc15
 800dba8:	0800dc15 	.word	0x0800dc15
 800dbac:	0800dc15 	.word	0x0800dc15
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800dc15 	.word	0x0800dc15
 800dbb8:	0800dc15 	.word	0x0800dc15
 800dbbc:	0800dc15 	.word	0x0800dc15
 800dbc0:	0800dc0d 	.word	0x0800dc0d
 800dbc4:	0800dc15 	.word	0x0800dc15
 800dbc8:	0800dc15 	.word	0x0800dc15
 800dbcc:	0800dbf5 	.word	0x0800dbf5
 800dbd0:	0800dbf5 	.word	0x0800dbf5
 800dbd4:	0800dbf5 	.word	0x0800dbf5
 800dbd8:	0800dc05 	.word	0x0800dc05
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800dbdc:	4b17      	ldr	r3, [pc, #92]	@ (800dc3c <LmHandlerSend+0x188>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800dbe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dbe6:	f113 0f07 	cmn.w	r3, #7
 800dbea:	d017      	beq.n	800dc1c <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dbec:	2300      	movs	r3, #0
 800dbee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800dbf2:	e013      	b.n	800dc1c <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800dbf4:	23fe      	movs	r3, #254	@ 0xfe
 800dbf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dbfa:	e010      	b.n	800dc1e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dbfc:	23fd      	movs	r3, #253	@ 0xfd
 800dbfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dc02:	e00c      	b.n	800dc1e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800dc04:	23fb      	movs	r3, #251	@ 0xfb
 800dc06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dc0a:	e008      	b.n	800dc1e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800dc0c:	23fa      	movs	r3, #250	@ 0xfa
 800dc0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dc12:	e004      	b.n	800dc1e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dc14:	23ff      	movs	r3, #255	@ 0xff
 800dc16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dc1a:	e000      	b.n	800dc1e <LmHandlerSend+0x16a>
            break;
 800dc1c:	bf00      	nop
    }

    return lmhStatus;
 800dc1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3728      	adds	r7, #40	@ 0x28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20000090 	.word	0x20000090
 800dc30:	20000098 	.word	0x20000098
 800dc34:	20000740 	.word	0x20000740
 800dc38:	2000077c 	.word	0x2000077c
 800dc3c:	20000780 	.word	0x20000780

0800dc40 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800dc46:	2309      	movs	r3, #9
 800dc48:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f005 fc95 	bl	801357c <LoRaMacMlmeRequest>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	4a06      	ldr	r2, [pc, #24]	@ (800dc74 <LmHandlerDeviceTimeReq+0x34>)
 800dc5a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dc62:	2300      	movs	r3, #0
 800dc64:	e001      	b.n	800dc6a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dc66:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	2000077c 	.word	0x2000077c

0800dc78 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800dc82:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bc80      	pop	{r7}
 800dc8e:	4770      	bx	lr

0800dc90 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08c      	sub	sp, #48	@ 0x30
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800dca0:	f002 f8de 	bl	800fe60 <LoRaMacIsBusy>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dcaa:	f06f 0301 	mvn.w	r3, #1
 800dcae:	e071      	b.n	800dd94 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800dcb0:	f7ff fee4 	bl	800da7c <LmHandlerJoinStatus>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d002      	beq.n	800dcc0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dcba:	f06f 0302 	mvn.w	r3, #2
 800dcbe:	e069      	b.n	800dd94 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dcc4:	f107 0308 	add.w	r3, r7, #8
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f004 ff41 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd8:	e05c      	b.n	800dd94 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800dcda:	7b3b      	ldrb	r3, [r7, #12]
 800dcdc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800dce0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800dce4:	79fb      	ldrb	r3, [r7, #7]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d052      	beq.n	800dd90 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d028      	beq.n	800dd42 <LmHandlerRequestClass+0xb2>
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	dc48      	bgt.n	800dd86 <LmHandlerRequestClass+0xf6>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <LmHandlerRequestClass+0x6e>
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d01e      	beq.n	800dd3a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800dcfc:	e043      	b.n	800dd86 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800dcfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d041      	beq.n	800dd8a <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dd0a:	f107 0308 	add.w	r3, r7, #8
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f005 f8c4 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10b      	bne.n	800dd32 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dd1a:	4b20      	ldr	r3, [pc, #128]	@ (800dd9c <LmHandlerRequestClass+0x10c>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d032      	beq.n	800dd8a <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dd24:	4b1d      	ldr	r3, [pc, #116]	@ (800dd9c <LmHandlerRequestClass+0x10c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd2a:	79fa      	ldrb	r2, [r7, #7]
 800dd2c:	4610      	mov	r0, r2
 800dd2e:	4798      	blx	r3
            break;
 800dd30:	e02b      	b.n	800dd8a <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dd32:	23ff      	movs	r3, #255	@ 0xff
 800dd34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800dd38:	e027      	b.n	800dd8a <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800dd3a:	23ff      	movs	r3, #255	@ 0xff
 800dd3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800dd40:	e026      	b.n	800dd90 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800dd42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dd4a:	23ff      	movs	r3, #255	@ 0xff
 800dd4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800dd50:	e01d      	b.n	800dd8e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dd56:	f107 0308 	add.w	r3, r7, #8
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f005 f89e 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d10b      	bne.n	800dd7e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dd66:	4b0d      	ldr	r3, [pc, #52]	@ (800dd9c <LmHandlerRequestClass+0x10c>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00e      	beq.n	800dd8e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800dd70:	4b0a      	ldr	r3, [pc, #40]	@ (800dd9c <LmHandlerRequestClass+0x10c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd76:	79fa      	ldrb	r2, [r7, #7]
 800dd78:	4610      	mov	r0, r2
 800dd7a:	4798      	blx	r3
            break;
 800dd7c:	e007      	b.n	800dd8e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dd7e:	23ff      	movs	r3, #255	@ 0xff
 800dd80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800dd84:	e003      	b.n	800dd8e <LmHandlerRequestClass+0xfe>
            break;
 800dd86:	bf00      	nop
 800dd88:	e002      	b.n	800dd90 <LmHandlerRequestClass+0x100>
            break;
 800dd8a:	bf00      	nop
 800dd8c:	e000      	b.n	800dd90 <LmHandlerRequestClass+0x100>
            break;
 800dd8e:	bf00      	nop
        }
    }
    return errorStatus;
 800dd90:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3730      	adds	r7, #48	@ 0x30
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20000754 	.word	0x20000754

0800dda0 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08c      	sub	sp, #48	@ 0x30
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ddae:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb2:	e010      	b.n	800ddd6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800ddb8:	f107 030c 	add.w	r3, r7, #12
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f004 fec7 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddcc:	e003      	b.n	800ddd6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ddce:	7c3a      	ldrb	r2, [r7, #16]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3730      	adds	r7, #48	@ 0x30
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08c      	sub	sp, #48	@ 0x30
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ddee:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf2:	e016      	b.n	800de22 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ddf4:	2320      	movs	r3, #32
 800ddf6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800ddf8:	f107 030c 	add.w	r3, r7, #12
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f004 fea7 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800de08:	f04f 33ff 	mov.w	r3, #4294967295
 800de0c:	e009      	b.n	800de22 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800de0e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f993 2000 	ldrsb.w	r2, [r3]
 800de1c:	4b03      	ldr	r3, [pc, #12]	@ (800de2c <LmHandlerGetTxDatarate+0x4c>)
 800de1e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3730      	adds	r7, #48	@ 0x30
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20000740 	.word	0x20000740

0800de30 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08c      	sub	sp, #48	@ 0x30
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800de38:	2323      	movs	r3, #35	@ 0x23
 800de3a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800de40:	f107 030c 	add.w	r3, r7, #12
 800de44:	4618      	mov	r0, r3
 800de46:	f005 f829 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	e000      	b.n	800de58 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3730      	adds	r7, #48	@ 0x30
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800de68:	4b15      	ldr	r3, [pc, #84]	@ (800dec0 <McpsConfirm+0x60>)
 800de6a:	2201      	movs	r2, #1
 800de6c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	785a      	ldrb	r2, [r3, #1]
 800de72:	4b13      	ldr	r3, [pc, #76]	@ (800dec0 <McpsConfirm+0x60>)
 800de74:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	789b      	ldrb	r3, [r3, #2]
 800de7a:	b25a      	sxtb	r2, r3
 800de7c:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <McpsConfirm+0x60>)
 800de7e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a0e      	ldr	r2, [pc, #56]	@ (800dec0 <McpsConfirm+0x60>)
 800de86:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800de8e:	4b0c      	ldr	r3, [pc, #48]	@ (800dec0 <McpsConfirm+0x60>)
 800de90:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	b2da      	uxtb	r2, r3
 800de98:	4b09      	ldr	r3, [pc, #36]	@ (800dec0 <McpsConfirm+0x60>)
 800de9a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	791b      	ldrb	r3, [r3, #4]
 800dea0:	461a      	mov	r2, r3
 800dea2:	4b07      	ldr	r3, [pc, #28]	@ (800dec0 <McpsConfirm+0x60>)
 800dea4:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800dea6:	4b07      	ldr	r3, [pc, #28]	@ (800dec4 <McpsConfirm+0x64>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deac:	4804      	ldr	r0, [pc, #16]	@ (800dec0 <McpsConfirm+0x60>)
 800deae:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	2000      	movs	r0, #0
 800deb4:	f000 f9c6 	bl	800e244 <LmHandlerPackagesNotify>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20000098 	.word	0x20000098
 800dec4:	20000754 	.word	0x20000754

0800dec8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ded6:	4b2c      	ldr	r3, [pc, #176]	@ (800df88 <McpsIndication+0xc0>)
 800ded8:	2201      	movs	r2, #1
 800deda:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	785a      	ldrb	r2, [r3, #1]
 800dee0:	4b29      	ldr	r3, [pc, #164]	@ (800df88 <McpsIndication+0xc0>)
 800dee2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dee4:	4b28      	ldr	r3, [pc, #160]	@ (800df88 <McpsIndication+0xc0>)
 800dee6:	785b      	ldrb	r3, [r3, #1]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d149      	bne.n	800df80 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	791b      	ldrb	r3, [r3, #4]
 800def0:	b25a      	sxtb	r2, r3
 800def2:	4b25      	ldr	r3, [pc, #148]	@ (800df88 <McpsIndication+0xc0>)
 800def4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800defc:	b25a      	sxtb	r2, r3
 800defe:	4b22      	ldr	r3, [pc, #136]	@ (800df88 <McpsIndication+0xc0>)
 800df00:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800df08:	4b1f      	ldr	r3, [pc, #124]	@ (800df88 <McpsIndication+0xc0>)
 800df0a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	78da      	ldrb	r2, [r3, #3]
 800df10:	4b1d      	ldr	r3, [pc, #116]	@ (800df88 <McpsIndication+0xc0>)
 800df12:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	4a1b      	ldr	r2, [pc, #108]	@ (800df88 <McpsIndication+0xc0>)
 800df1a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	78db      	ldrb	r3, [r3, #3]
 800df20:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7b1b      	ldrb	r3, [r3, #12]
 800df26:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800df2e:	4b17      	ldr	r3, [pc, #92]	@ (800df8c <McpsIndication+0xc4>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df34:	f107 0210 	add.w	r2, r7, #16
 800df38:	4913      	ldr	r1, [pc, #76]	@ (800df88 <McpsIndication+0xc0>)
 800df3a:	4610      	mov	r0, r2
 800df3c:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800df3e:	4b13      	ldr	r3, [pc, #76]	@ (800df8c <McpsIndication+0xc4>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df44:	2b00      	cmp	r3, #0
 800df46:	d007      	beq.n	800df58 <McpsIndication+0x90>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7e1b      	ldrb	r3, [r3, #24]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800df50:	4b0e      	ldr	r3, [pc, #56]	@ (800df8c <McpsIndication+0xc4>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df56:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	2001      	movs	r0, #1
 800df5c:	f000 f972 	bl	800e244 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800df60:	f107 030f 	add.w	r3, r7, #15
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ff1b 	bl	800dda0 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	795b      	ldrb	r3, [r3, #5]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d107      	bne.n	800df82 <McpsIndication+0xba>
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d104      	bne.n	800df82 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800df78:	4b05      	ldr	r3, [pc, #20]	@ (800df90 <McpsIndication+0xc8>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	701a      	strb	r2, [r3, #0]
 800df7e:	e000      	b.n	800df82 <McpsIndication+0xba>
        return;
 800df80:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	200000b4 	.word	0x200000b4
 800df8c:	20000754 	.word	0x20000754
 800df90:	20000780 	.word	0x20000780

0800df94 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08c      	sub	sp, #48	@ 0x30
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800df9c:	4b3c      	ldr	r3, [pc, #240]	@ (800e090 <MlmeConfirm+0xfc>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	785a      	ldrb	r2, [r3, #1]
 800dfa6:	4b3a      	ldr	r3, [pc, #232]	@ (800e090 <MlmeConfirm+0xfc>)
 800dfa8:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800dfaa:	4b3a      	ldr	r3, [pc, #232]	@ (800e094 <MlmeConfirm+0x100>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb0:	4837      	ldr	r0, [pc, #220]	@ (800e090 <MlmeConfirm+0xfc>)
 800dfb2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	2002      	movs	r0, #2
 800dfb8:	f000 f944 	bl	800e244 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	2b0b      	cmp	r3, #11
 800dfc4:	d85c      	bhi.n	800e080 <MlmeConfirm+0xec>
 800dfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <MlmeConfirm+0x38>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800dffd 	.word	0x0800dffd
 800dfd0:	0800e081 	.word	0x0800e081
 800dfd4:	0800e081 	.word	0x0800e081
 800dfd8:	0800e04f 	.word	0x0800e04f
 800dfdc:	0800e081 	.word	0x0800e081
 800dfe0:	0800e081 	.word	0x0800e081
 800dfe4:	0800e081 	.word	0x0800e081
 800dfe8:	0800e081 	.word	0x0800e081
 800dfec:	0800e081 	.word	0x0800e081
 800dff0:	0800e081 	.word	0x0800e081
 800dff4:	0800e067 	.word	0x0800e067
 800dff8:	0800e081 	.word	0x0800e081
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800dffc:	2306      	movs	r3, #6
 800dffe:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e000:	f107 030c 	add.w	r3, r7, #12
 800e004:	4618      	mov	r0, r3
 800e006:	f004 fda3 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	4a22      	ldr	r2, [pc, #136]	@ (800e098 <MlmeConfirm+0x104>)
 800e00e:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e010:	4822      	ldr	r0, [pc, #136]	@ (800e09c <MlmeConfirm+0x108>)
 800e012:	f7ff fee5 	bl	800dde0 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	785b      	ldrb	r3, [r3, #1]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d108      	bne.n	800e030 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e01e:	4b20      	ldr	r3, [pc, #128]	@ (800e0a0 <MlmeConfirm+0x10c>)
 800e020:	2200      	movs	r2, #0
 800e022:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e024:	4b1f      	ldr	r3, [pc, #124]	@ (800e0a4 <MlmeConfirm+0x110>)
 800e026:	785b      	ldrb	r3, [r3, #1]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff fe31 	bl	800dc90 <LmHandlerRequestClass>
 800e02e:	e002      	b.n	800e036 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e030:	4b1b      	ldr	r3, [pc, #108]	@ (800e0a0 <MlmeConfirm+0x10c>)
 800e032:	22ff      	movs	r2, #255	@ 0xff
 800e034:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e036:	4b17      	ldr	r3, [pc, #92]	@ (800e094 <MlmeConfirm+0x100>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03c:	4818      	ldr	r0, [pc, #96]	@ (800e0a0 <MlmeConfirm+0x10c>)
 800e03e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	785b      	ldrb	r3, [r3, #1]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d11d      	bne.n	800e084 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800e048:	f7ff f894 	bl	800d174 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800e04c:	e01a      	b.n	800e084 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800e04e:	4b16      	ldr	r3, [pc, #88]	@ (800e0a8 <MlmeConfirm+0x114>)
 800e050:	2201      	movs	r2, #1
 800e052:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7a1a      	ldrb	r2, [r3, #8]
 800e058:	4b13      	ldr	r3, [pc, #76]	@ (800e0a8 <MlmeConfirm+0x114>)
 800e05a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7a5a      	ldrb	r2, [r3, #9]
 800e060:	4b11      	ldr	r3, [pc, #68]	@ (800e0a8 <MlmeConfirm+0x114>)
 800e062:	74da      	strb	r2, [r3, #19]
        }
        break;
 800e064:	e00f      	b.n	800e086 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	785b      	ldrb	r3, [r3, #1]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d105      	bne.n	800e07a <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e06e:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a4 <MlmeConfirm+0x110>)
 800e070:	7b1b      	ldrb	r3, [r3, #12]
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff fe00 	bl	800dc78 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800e078:	e005      	b.n	800e086 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800e07a:	f7ff fde1 	bl	800dc40 <LmHandlerDeviceTimeReq>
        break;
 800e07e:	e002      	b.n	800e086 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e080:	bf00      	nop
 800e082:	e000      	b.n	800e086 <MlmeConfirm+0xf2>
        break;
 800e084:	bf00      	nop
    }
}
 800e086:	bf00      	nop
 800e088:	3730      	adds	r7, #48	@ 0x30
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	20000098 	.word	0x20000098
 800e094:	20000754 	.word	0x20000754
 800e098:	20000078 	.word	0x20000078
 800e09c:	20000094 	.word	0x20000094
 800e0a0:	20000090 	.word	0x20000090
 800e0a4:	20000740 	.word	0x20000740
 800e0a8:	200000b4 	.word	0x200000b4

0800e0ac <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e0b6:	4b24      	ldr	r3, [pc, #144]	@ (800e148 <MlmeIndication+0x9c>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	785a      	ldrb	r2, [r3, #1]
 800e0c0:	4b21      	ldr	r3, [pc, #132]	@ (800e148 <MlmeIndication+0x9c>)
 800e0c2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	789b      	ldrb	r3, [r3, #2]
 800e0c8:	b25a      	sxtb	r2, r3
 800e0ca:	4b1f      	ldr	r3, [pc, #124]	@ (800e148 <MlmeIndication+0x9c>)
 800e0cc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d4:	b25a      	sxtb	r2, r3
 800e0d6:	4b1c      	ldr	r3, [pc, #112]	@ (800e148 <MlmeIndication+0x9c>)
 800e0d8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e0e0:	4b19      	ldr	r3, [pc, #100]	@ (800e148 <MlmeIndication+0x9c>)
 800e0e2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	78da      	ldrb	r2, [r3, #3]
 800e0e8:	4b17      	ldr	r3, [pc, #92]	@ (800e148 <MlmeIndication+0x9c>)
 800e0ea:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	4a15      	ldr	r2, [pc, #84]	@ (800e148 <MlmeIndication+0x9c>)
 800e0f2:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b0a      	cmp	r3, #10
 800e0fa:	d009      	beq.n	800e110 <MlmeIndication+0x64>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2b0e      	cmp	r3, #14
 800e102:	d005      	beq.n	800e110 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e104:	4b11      	ldr	r3, [pc, #68]	@ (800e14c <MlmeIndication+0xa0>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e10a:	490f      	ldr	r1, [pc, #60]	@ (800e148 <MlmeIndication+0x9c>)
 800e10c:	2000      	movs	r0, #0
 800e10e:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e110:	6879      	ldr	r1, [r7, #4]
 800e112:	2003      	movs	r0, #3
 800e114:	f000 f896 	bl	800e244 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b0e      	cmp	r3, #14
 800e11e:	d00a      	beq.n	800e136 <MlmeIndication+0x8a>
 800e120:	2b0e      	cmp	r3, #14
 800e122:	dc0a      	bgt.n	800e13a <MlmeIndication+0x8e>
 800e124:	2b06      	cmp	r3, #6
 800e126:	d002      	beq.n	800e12e <MlmeIndication+0x82>
 800e128:	2b0a      	cmp	r3, #10
 800e12a:	d008      	beq.n	800e13e <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e12c:	e005      	b.n	800e13a <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800e12e:	4b08      	ldr	r3, [pc, #32]	@ (800e150 <MlmeIndication+0xa4>)
 800e130:	2201      	movs	r2, #1
 800e132:	701a      	strb	r2, [r3, #0]
        break;
 800e134:	e004      	b.n	800e140 <MlmeIndication+0x94>
        break;
 800e136:	bf00      	nop
 800e138:	e002      	b.n	800e140 <MlmeIndication+0x94>
        break;
 800e13a:	bf00      	nop
 800e13c:	e000      	b.n	800e140 <MlmeIndication+0x94>
        break;
 800e13e:	bf00      	nop
    }
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	200000b4 	.word	0x200000b4
 800e14c:	20000754 	.word	0x20000754
 800e150:	20000780 	.word	0x20000780

0800e154 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	6039      	str	r1, [r7, #0]
 800e15e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e160:	2300      	movs	r3, #0
 800e162:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d103      	bne.n	800e172 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800e16a:	f000 fa1d 	bl	800e5a8 <LmhpCompliancePackageFactory>
 800e16e:	60f8      	str	r0, [r7, #12]
            break;
 800e170:	e000      	b.n	800e174 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800e172:	bf00      	nop
        }
    }
    if( package != NULL )
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d035      	beq.n	800e1e6 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	491d      	ldr	r1, [pc, #116]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e184:	79fb      	ldrb	r3, [r7, #7]
 800e186:	4a1b      	ldr	r2, [pc, #108]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e18c:	4a1a      	ldr	r2, [pc, #104]	@ (800e1f8 <LmHandlerPackageRegister+0xa4>)
 800e18e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e190:	4b1a      	ldr	r3, [pc, #104]	@ (800e1fc <LmHandlerPackageRegister+0xa8>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	4917      	ldr	r1, [pc, #92]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e198:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e19c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e19e:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e1a0:	4b16      	ldr	r3, [pc, #88]	@ (800e1fc <LmHandlerPackageRegister+0xa8>)
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	4913      	ldr	r1, [pc, #76]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e1a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e1ae:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	4a10      	ldr	r2, [pc, #64]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b8:	4a11      	ldr	r2, [pc, #68]	@ (800e200 <LmHandlerPackageRegister+0xac>)
 800e1ba:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e1fc <LmHandlerPackageRegister+0xa8>)
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	490c      	ldr	r1, [pc, #48]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e1c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1c8:	6992      	ldr	r2, [r2, #24]
 800e1ca:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	4a09      	ldr	r2, [pc, #36]	@ (800e1f4 <LmHandlerPackageRegister+0xa0>)
 800e1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	4a0b      	ldr	r2, [pc, #44]	@ (800e204 <LmHandlerPackageRegister+0xb0>)
 800e1d8:	6851      	ldr	r1, [r2, #4]
 800e1da:	4a0a      	ldr	r2, [pc, #40]	@ (800e204 <LmHandlerPackageRegister+0xb0>)
 800e1dc:	7852      	ldrb	r2, [r2, #1]
 800e1de:	6838      	ldr	r0, [r7, #0]
 800e1e0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e001      	b.n	800e1ea <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e1e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	2000072c 	.word	0x2000072c
 800e1f8:	0800d979 	.word	0x0800d979
 800e1fc:	20000754 	.word	0x20000754
 800e200:	0800dc41 	.word	0x0800dc41
 800e204:	200000c8 	.word	0x200000c8

0800e208 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	2b04      	cmp	r3, #4
 800e216:	d80e      	bhi.n	800e236 <LmHandlerPackageIsInitialized+0x2e>
 800e218:	79fb      	ldrb	r3, [r7, #7]
 800e21a:	4a09      	ldr	r2, [pc, #36]	@ (800e240 <LmHandlerPackageIsInitialized+0x38>)
 800e21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d007      	beq.n	800e236 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	4a05      	ldr	r2, [pc, #20]	@ (800e240 <LmHandlerPackageIsInitialized+0x38>)
 800e22a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	4798      	blx	r3
 800e232:	4603      	mov	r3, r0
 800e234:	e000      	b.n	800e238 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e236:	2300      	movs	r3, #0
    }
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	2000072c 	.word	0x2000072c

0800e244 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	6039      	str	r1, [r7, #0]
 800e24e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e250:	2300      	movs	r3, #0
 800e252:	73fb      	strb	r3, [r7, #15]
 800e254:	e067      	b.n	800e326 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e25a:	4a37      	ldr	r2, [pc, #220]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d05a      	beq.n	800e31a <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b03      	cmp	r3, #3
 800e268:	d84e      	bhi.n	800e308 <LmHandlerPackagesNotify+0xc4>
 800e26a:	a201      	add	r2, pc, #4	@ (adr r2, 800e270 <LmHandlerPackagesNotify+0x2c>)
 800e26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e270:	0800e281 	.word	0x0800e281
 800e274:	0800e2a3 	.word	0x0800e2a3
 800e278:	0800e2c5 	.word	0x0800e2c5
 800e27c:	0800e2e7 	.word	0x0800e2e7
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e284:	4a2c      	ldr	r2, [pc, #176]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d03d      	beq.n	800e30c <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e294:	4a28      	ldr	r2, [pc, #160]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	6838      	ldr	r0, [r7, #0]
 800e29e:	4798      	blx	r3
                    }
                    break;
 800e2a0:	e034      	b.n	800e30c <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2a6:	4a24      	ldr	r2, [pc, #144]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d02e      	beq.n	800e310 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2b6:	4a20      	ldr	r2, [pc, #128]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2bc:	69db      	ldr	r3, [r3, #28]
 800e2be:	6838      	ldr	r0, [r7, #0]
 800e2c0:	4798      	blx	r3
                    }
                    break;
 800e2c2:	e025      	b.n	800e310 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ce:	6a1b      	ldr	r3, [r3, #32]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01f      	beq.n	800e314 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2d8:	4a17      	ldr	r2, [pc, #92]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	6838      	ldr	r0, [r7, #0]
 800e2e2:	4798      	blx	r3
                    }
                    break;
 800e2e4:	e016      	b.n	800e314 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2ea:	4a13      	ldr	r2, [pc, #76]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d010      	beq.n	800e318 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2fa:	4a0f      	ldr	r2, [pc, #60]	@ (800e338 <LmHandlerPackagesNotify+0xf4>)
 800e2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e302:	6838      	ldr	r0, [r7, #0]
 800e304:	4798      	blx	r3
                    }
                    break;
 800e306:	e007      	b.n	800e318 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800e308:	bf00      	nop
 800e30a:	e006      	b.n	800e31a <LmHandlerPackagesNotify+0xd6>
                    break;
 800e30c:	bf00      	nop
 800e30e:	e004      	b.n	800e31a <LmHandlerPackagesNotify+0xd6>
                    break;
 800e310:	bf00      	nop
 800e312:	e002      	b.n	800e31a <LmHandlerPackagesNotify+0xd6>
                    break;
 800e314:	bf00      	nop
 800e316:	e000      	b.n	800e31a <LmHandlerPackagesNotify+0xd6>
                    break;
 800e318:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	3301      	adds	r3, #1
 800e322:	b2db      	uxtb	r3, r3
 800e324:	73fb      	strb	r3, [r7, #15]
 800e326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	dd93      	ble.n	800e256 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800e32e:	bf00      	nop
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	2000072c 	.word	0x2000072c

0800e33c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e342:	2300      	movs	r3, #0
 800e344:	71fb      	strb	r3, [r7, #7]
 800e346:	e018      	b.n	800e37a <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800e348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e34c:	4a0f      	ldr	r2, [pc, #60]	@ (800e38c <LmHandlerPackageIsTxPending+0x50>)
 800e34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e35a:	4a0c      	ldr	r2, [pc, #48]	@ (800e38c <LmHandlerPackageIsTxPending+0x50>)
 800e35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	4798      	blx	r3
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e00a      	b.n	800e384 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e372:	b2db      	uxtb	r3, r3
 800e374:	3301      	adds	r3, #1
 800e376:	b2db      	uxtb	r3, r3
 800e378:	71fb      	strb	r3, [r7, #7]
 800e37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e37e:	2b04      	cmp	r3, #4
 800e380:	dde2      	ble.n	800e348 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	2000072c 	.word	0x2000072c

0800e390 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e396:	2300      	movs	r3, #0
 800e398:	71fb      	strb	r3, [r7, #7]
 800e39a:	e022      	b.n	800e3e2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e39c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3a0:	4a14      	ldr	r2, [pc, #80]	@ (800e3f4 <LmHandlerPackagesProcess+0x64>)
 800e3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d015      	beq.n	800e3d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3ae:	4a11      	ldr	r2, [pc, #68]	@ (800e3f4 <LmHandlerPackagesProcess+0x64>)
 800e3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00d      	beq.n	800e3d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7ff ff23 	bl	800e208 <LmHandlerPackageIsInitialized>
 800e3c2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d006      	beq.n	800e3d6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e3c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3cc:	4a09      	ldr	r2, [pc, #36]	@ (800e3f4 <LmHandlerPackagesProcess+0x64>)
 800e3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	3301      	adds	r3, #1
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	71fb      	strb	r3, [r7, #7]
 800e3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	ddd8      	ble.n	800e39c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e3ea:	bf00      	nop
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	2000072c 	.word	0x2000072c

0800e3f8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	6039      	str	r1, [r7, #0]
 800e402:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d102      	bne.n	800e410 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e40a:	f04f 33ff 	mov.w	r3, #4294967295
 800e40e:	e00e      	b.n	800e42e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d002      	beq.n	800e41c <LmHandlerGetVersion+0x24>
 800e416:	2b01      	cmp	r3, #1
 800e418:	d004      	beq.n	800e424 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800e41a:	e007      	b.n	800e42c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	4a06      	ldr	r2, [pc, #24]	@ (800e438 <LmHandlerGetVersion+0x40>)
 800e420:	601a      	str	r2, [r3, #0]
            break;
 800e422:	e003      	b.n	800e42c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	4a05      	ldr	r2, [pc, #20]	@ (800e43c <LmHandlerGetVersion+0x44>)
 800e428:	601a      	str	r2, [r3, #0]
            break;
 800e42a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	bc80      	pop	{r7}
 800e436:	4770      	bx	lr
 800e438:	01000400 	.word	0x01000400
 800e43c:	02010001 	.word	0x02010001

0800e440 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800e444:	f005 fb76 	bl	8013b34 <LoRaMacDeInitialization>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e44e:	2300      	movs	r3, #0
 800e450:	e001      	b.n	800e456 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e452:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e456:	4618      	mov	r0, r3
 800e458:	bd80      	pop	{r7, pc}

0800e45a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800e45e:	f004 faaf 	bl	80129c0 <LoRaMacHalt>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d101      	bne.n	800e46c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e468:	2300      	movs	r3, #0
 800e46a:	e001      	b.n	800e470 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e46c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e470:	4618      	mov	r0, r3
 800e472:	bd80      	pop	{r7, pc}

0800e474 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b08e      	sub	sp, #56	@ 0x38
 800e478:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800e484:	f7ff ffe9 	bl	800e45a <LmHandlerHalt>
 800e488:	4603      	mov	r3, r0
 800e48a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800e48e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12f      	bne.n	800e4f6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e496:	f000 f859 	bl	800e54c <NvmDataMgmtStoreBegin>
 800e49a:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800e49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e49e:	f113 0f02 	cmn.w	r3, #2
 800e4a2:	d103      	bne.n	800e4ac <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e4a4:	23f8      	movs	r3, #248	@ 0xf8
 800e4a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e4aa:	e01c      	b.n	800e4e6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d104      	bne.n	800e4bc <LmHandlerNvmDataStore+0x48>
 800e4b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e520 <LmHandlerNvmDataStore+0xac>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d103      	bne.n	800e4c4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e4bc:	23ff      	movs	r3, #255	@ 0xff
 800e4be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e4c2:	e010      	b.n	800e4e6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800e4c4:	2327      	movs	r3, #39	@ 0x27
 800e4c6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800e4c8:	1d3b      	adds	r3, r7, #4
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f004 fb40 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800e4d4:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800e4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800e4da:	4b11      	ldr	r3, [pc, #68]	@ (800e520 <LmHandlerNvmDataStore+0xac>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	695b      	ldr	r3, [r3, #20]
 800e4e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4e4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e4e6:	f000 f847 	bl	800e578 <NvmDataMgmtStoreEnd>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e4f0:	23ff      	movs	r3, #255	@ 0xff
 800e4f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800e4f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d109      	bne.n	800e512 <LmHandlerNvmDataStore+0x9e>
 800e4fe:	4b08      	ldr	r3, [pc, #32]	@ (800e520 <LmHandlerNvmDataStore+0xac>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e508:	4b05      	ldr	r3, [pc, #20]	@ (800e520 <LmHandlerNvmDataStore+0xac>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	69db      	ldr	r3, [r3, #28]
 800e50e:	2001      	movs	r0, #1
 800e510:	4798      	blx	r3
    }

    return lmhStatus;
 800e512:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e516:	4618      	mov	r0, r3
 800e518:	3738      	adds	r7, #56	@ 0x38
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	20000754 	.word	0x20000754

0800e524 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e52e:	4b06      	ldr	r3, [pc, #24]	@ (800e548 <NvmDataMgmtEvent+0x24>)
 800e530:	881a      	ldrh	r2, [r3, #0]
 800e532:	88fb      	ldrh	r3, [r7, #6]
 800e534:	4313      	orrs	r3, r2
 800e536:	b29a      	uxth	r2, r3
 800e538:	4b03      	ldr	r3, [pc, #12]	@ (800e548 <NvmDataMgmtEvent+0x24>)
 800e53a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	bc80      	pop	{r7}
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	20000878 	.word	0x20000878

0800e54c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e550:	4b08      	ldr	r3, [pc, #32]	@ (800e574 <NvmDataMgmtStoreBegin+0x28>)
 800e552:	881b      	ldrh	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800e558:	f06f 0301 	mvn.w	r3, #1
 800e55c:	e008      	b.n	800e570 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e55e:	f004 fa13 	bl	8012988 <LoRaMacStop>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800e568:	f06f 0302 	mvn.w	r3, #2
 800e56c:	e000      	b.n	800e570 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800e56e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e570:	4618      	mov	r0, r3
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20000878 	.word	0x20000878

0800e578 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e57c:	4b03      	ldr	r3, [pc, #12]	@ (800e58c <NvmDataMgmtStoreEnd+0x14>)
 800e57e:	2200      	movs	r2, #0
 800e580:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800e582:	f004 f9f3 	bl	801296c <LoRaMacStart>
    return NVM_DATA_OK;
 800e586:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e588:	4618      	mov	r0, r3
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20000878 	.word	0x20000878

0800e590 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e594:	2220      	movs	r2, #32
 800e596:	2100      	movs	r1, #0
 800e598:	4802      	ldr	r0, [pc, #8]	@ (800e5a4 <ClassBStatusReset+0x14>)
 800e59a:	f009 fe17 	bl	80181cc <memset1>
}
 800e59e:	bf00      	nop
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000890 	.word	0x20000890

0800e5a8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e5ac:	4b02      	ldr	r3, [pc, #8]	@ (800e5b8 <LmhpCompliancePackageFactory+0x10>)
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bc80      	pop	{r7}
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	200000d0 	.word	0x200000d0

0800e5bc <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af02      	add	r7, sp, #8
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d018      	beq.n	800e602 <LmhpComplianceInit+0x46>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d015      	beq.n	800e602 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800e5d6:	4a19      	ldr	r2, [pc, #100]	@ (800e63c <LmhpComplianceInit+0x80>)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e5dc:	4a18      	ldr	r2, [pc, #96]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e5e2:	4a17      	ldr	r2, [pc, #92]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e5e4:	79fb      	ldrb	r3, [r7, #7]
 800e5e6:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e5e8:	4b15      	ldr	r3, [pc, #84]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	4b14      	ldr	r3, [pc, #80]	@ (800e644 <LmhpComplianceInit+0x88>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f04f 31ff 	mov.w	r1, #4294967295
 800e5fa:	4813      	ldr	r0, [pc, #76]	@ (800e648 <LmhpComplianceInit+0x8c>)
 800e5fc:	f00d fe4c 	bl	801c298 <UTIL_TIMER_Create>
 800e600:	e005      	b.n	800e60e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e602:	4b0e      	ldr	r3, [pc, #56]	@ (800e63c <LmhpComplianceInit+0x80>)
 800e604:	2200      	movs	r2, #0
 800e606:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e608:	4b0d      	ldr	r3, [pc, #52]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e60e:	4b0c      	ldr	r3, [pc, #48]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e610:	2200      	movs	r2, #0
 800e612:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e614:	f7ff ffbc 	bl	800e590 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e618:	4b09      	ldr	r3, [pc, #36]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e61e:	4b08      	ldr	r3, [pc, #32]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e620:	2200      	movs	r2, #0
 800e622:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e624:	4b06      	ldr	r3, [pc, #24]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e626:	2200      	movs	r2, #0
 800e628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e62c:	4b04      	ldr	r3, [pc, #16]	@ (800e640 <LmhpComplianceInit+0x84>)
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	200008b4 	.word	0x200008b4
 800e640:	2000087c 	.word	0x2000087c
 800e644:	0800ef31 	.word	0x0800ef31
 800e648:	200008b8 	.word	0x200008b8

0800e64c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e64c:	b480      	push	{r7}
 800e64e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e650:	4b02      	ldr	r3, [pc, #8]	@ (800e65c <LmhpComplianceIsInitialized+0x10>)
 800e652:	781b      	ldrb	r3, [r3, #0]
}
 800e654:	4618      	mov	r0, r3
 800e656:	46bd      	mov	sp, r7
 800e658:	bc80      	pop	{r7}
 800e65a:	4770      	bx	lr
 800e65c:	2000087c 	.word	0x2000087c

0800e660 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e664:	4b02      	ldr	r3, [pc, #8]	@ (800e670 <LmhpComplianceIsTxPending+0x10>)
 800e666:	785b      	ldrb	r3, [r3, #1]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bc80      	pop	{r7}
 800e66e:	4770      	bx	lr
 800e670:	2000087c 	.word	0x2000087c

0800e674 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e67a:	4b33      	ldr	r3, [pc, #204]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e67c:	785b      	ldrb	r3, [r3, #1]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d03f      	beq.n	800e702 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e682:	f00d ffc7 	bl	801c614 <UTIL_TIMER_GetCurrentTime>
 800e686:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e688:	4b2f      	ldr	r3, [pc, #188]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e68a:	685c      	ldr	r4, [r3, #4]
 800e68c:	f7ff f96a 	bl	800d964 <LmHandlerGetDutyCycleWaitTime>
 800e690:	4603      	mov	r3, r0
 800e692:	4423      	add	r3, r4
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	429a      	cmp	r2, r3
 800e698:	d942      	bls.n	800e720 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e69a:	4b2b      	ldr	r3, [pc, #172]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e69c:	7a9b      	ldrb	r3, [r3, #10]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d03e      	beq.n	800e720 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800e6a2:	23e0      	movs	r3, #224	@ 0xe0
 800e6a4:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e6a6:	4b28      	ldr	r3, [pc, #160]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6a8:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800e6aa:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e6ac:	4b26      	ldr	r3, [pc, #152]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6ae:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800e6b0:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e6b2:	23ff      	movs	r3, #255	@ 0xff
 800e6b4:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e6b6:	4b24      	ldr	r3, [pc, #144]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6b8:	7a19      	ldrb	r1, [r3, #8]
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	2201      	movs	r2, #1
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff f9f8 	bl	800dab4 <LmHandlerSend>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800e6c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e6cc:	f113 0f02 	cmn.w	r3, #2
 800e6d0:	d004      	beq.n	800e6dc <LmhpComplianceProcess+0x68>
 800e6d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e6d6:	f113 0f06 	cmn.w	r3, #6
 800e6da:	d108      	bne.n	800e6ee <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800e6dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e6e0:	481a      	ldr	r0, [pc, #104]	@ (800e74c <LmhpComplianceProcess+0xd8>)
 800e6e2:	f00d feed 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800e6e6:	4819      	ldr	r0, [pc, #100]	@ (800e74c <LmhpComplianceProcess+0xd8>)
 800e6e8:	f00d fe0c 	bl	801c304 <UTIL_TIMER_Start>
 800e6ec:	e005      	b.n	800e6fa <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800e6ee:	4b16      	ldr	r3, [pc, #88]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e6f4:	4b14      	ldr	r3, [pc, #80]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800e6fa:	4a13      	ldr	r2, [pc, #76]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6053      	str	r3, [r2, #4]
 800e700:	e00e      	b.n	800e720 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e702:	4b11      	ldr	r3, [pc, #68]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d009      	beq.n	800e720 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e70c:	4b0e      	ldr	r3, [pc, #56]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e714:	4b0c      	ldr	r3, [pc, #48]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e716:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff fab8 	bl	800dc90 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e720:	4b09      	ldr	r3, [pc, #36]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e722:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00a      	beq.n	800e740 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e72a:	4b07      	ldr	r3, [pc, #28]	@ (800e748 <LmhpComplianceProcess+0xd4>)
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800e732:	4b07      	ldr	r3, [pc, #28]	@ (800e750 <LmhpComplianceProcess+0xdc>)
 800e734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e736:	2b00      	cmp	r3, #0
 800e738:	d002      	beq.n	800e740 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800e73a:	4b05      	ldr	r3, [pc, #20]	@ (800e750 <LmhpComplianceProcess+0xdc>)
 800e73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e73e:	4798      	blx	r3
        }
    }
}
 800e740:	bf00      	nop
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	bd90      	pop	{r4, r7, pc}
 800e748:	2000087c 	.word	0x2000087c
 800e74c:	200008b8 	.word	0x200008b8
 800e750:	200000d0 	.word	0x200000d0

0800e754 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e754:	b5b0      	push	{r4, r5, r7, lr}
 800e756:	b0a4      	sub	sp, #144	@ 0x90
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e762:	4bce      	ldr	r3, [pc, #824]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	f083 0301 	eor.w	r3, r3, #1
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f040 83b5 	bne.w	800eedc <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	78db      	ldrb	r3, [r3, #3]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d103      	bne.n	800e782 <LmhpComplianceOnMcpsIndication+0x2e>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7b9b      	ldrb	r3, [r3, #14]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e782:	4bc6      	ldr	r3, [pc, #792]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e784:	8a1b      	ldrh	r3, [r3, #16]
 800e786:	3301      	adds	r3, #1
 800e788:	b29a      	uxth	r2, r3
 800e78a:	4bc4      	ldr	r3, [pc, #784]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e78c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7b5b      	ldrb	r3, [r3, #13]
 800e792:	f083 0301 	eor.w	r3, r3, #1
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f040 83a1 	bne.w	800eee0 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	78db      	ldrb	r3, [r3, #3]
 800e7a2:	2be0      	cmp	r3, #224	@ 0xe0
 800e7a4:	f040 839e 	bne.w	800eee4 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e7a8:	4bbc      	ldr	r3, [pc, #752]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	689a      	ldr	r2, [r3, #8]
 800e7b2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e7b6:	1c59      	adds	r1, r3, #1
 800e7b8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e7bc:	4413      	add	r3, r2
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7c2:	f200 836e 	bhi.w	800eea2 <LmhpComplianceOnMcpsIndication+0x74e>
 800e7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <LmhpComplianceOnMcpsIndication+0x78>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e9cd 	.word	0x0800e9cd
 800e7d0:	0800ea11 	.word	0x0800ea11
 800e7d4:	0800ea1b 	.word	0x0800ea1b
 800e7d8:	0800ea27 	.word	0x0800ea27
 800e7dc:	0800ea49 	.word	0x0800ea49
 800e7e0:	0800ea77 	.word	0x0800ea77
 800e7e4:	0800eaa5 	.word	0x0800eaa5
 800e7e8:	0800eb03 	.word	0x0800eb03
 800e7ec:	0800eb5b 	.word	0x0800eb5b
 800e7f0:	0800ebc7 	.word	0x0800ebc7
 800e7f4:	0800ec17 	.word	0x0800ec17
 800e7f8:	0800eea3 	.word	0x0800eea3
 800e7fc:	0800eea3 	.word	0x0800eea3
 800e800:	0800eea3 	.word	0x0800eea3
 800e804:	0800eea3 	.word	0x0800eea3
 800e808:	0800eea3 	.word	0x0800eea3
 800e80c:	0800eea3 	.word	0x0800eea3
 800e810:	0800eea3 	.word	0x0800eea3
 800e814:	0800eea3 	.word	0x0800eea3
 800e818:	0800eea3 	.word	0x0800eea3
 800e81c:	0800eea3 	.word	0x0800eea3
 800e820:	0800eea3 	.word	0x0800eea3
 800e824:	0800eea3 	.word	0x0800eea3
 800e828:	0800eea3 	.word	0x0800eea3
 800e82c:	0800eea3 	.word	0x0800eea3
 800e830:	0800eea3 	.word	0x0800eea3
 800e834:	0800eea3 	.word	0x0800eea3
 800e838:	0800eea3 	.word	0x0800eea3
 800e83c:	0800eea3 	.word	0x0800eea3
 800e840:	0800eea3 	.word	0x0800eea3
 800e844:	0800eea3 	.word	0x0800eea3
 800e848:	0800eea3 	.word	0x0800eea3
 800e84c:	0800ec1f 	.word	0x0800ec1f
 800e850:	0800ec31 	.word	0x0800ec31
 800e854:	0800ec39 	.word	0x0800ec39
 800e858:	0800eea3 	.word	0x0800eea3
 800e85c:	0800eea3 	.word	0x0800eea3
 800e860:	0800eea3 	.word	0x0800eea3
 800e864:	0800eea3 	.word	0x0800eea3
 800e868:	0800eea3 	.word	0x0800eea3
 800e86c:	0800eea3 	.word	0x0800eea3
 800e870:	0800eea3 	.word	0x0800eea3
 800e874:	0800eea3 	.word	0x0800eea3
 800e878:	0800eea3 	.word	0x0800eea3
 800e87c:	0800eea3 	.word	0x0800eea3
 800e880:	0800eea3 	.word	0x0800eea3
 800e884:	0800eea3 	.word	0x0800eea3
 800e888:	0800eea3 	.word	0x0800eea3
 800e88c:	0800eea3 	.word	0x0800eea3
 800e890:	0800eea3 	.word	0x0800eea3
 800e894:	0800eea3 	.word	0x0800eea3
 800e898:	0800eea3 	.word	0x0800eea3
 800e89c:	0800eea3 	.word	0x0800eea3
 800e8a0:	0800eea3 	.word	0x0800eea3
 800e8a4:	0800eea3 	.word	0x0800eea3
 800e8a8:	0800eea3 	.word	0x0800eea3
 800e8ac:	0800eea3 	.word	0x0800eea3
 800e8b0:	0800eea3 	.word	0x0800eea3
 800e8b4:	0800eea3 	.word	0x0800eea3
 800e8b8:	0800eea3 	.word	0x0800eea3
 800e8bc:	0800eea3 	.word	0x0800eea3
 800e8c0:	0800eea3 	.word	0x0800eea3
 800e8c4:	0800eea3 	.word	0x0800eea3
 800e8c8:	0800eea3 	.word	0x0800eea3
 800e8cc:	0800eea3 	.word	0x0800eea3
 800e8d0:	0800eea3 	.word	0x0800eea3
 800e8d4:	0800eea3 	.word	0x0800eea3
 800e8d8:	0800eea3 	.word	0x0800eea3
 800e8dc:	0800eea3 	.word	0x0800eea3
 800e8e0:	0800eea3 	.word	0x0800eea3
 800e8e4:	0800eea3 	.word	0x0800eea3
 800e8e8:	0800eea3 	.word	0x0800eea3
 800e8ec:	0800eea3 	.word	0x0800eea3
 800e8f0:	0800eea3 	.word	0x0800eea3
 800e8f4:	0800eea3 	.word	0x0800eea3
 800e8f8:	0800eea3 	.word	0x0800eea3
 800e8fc:	0800eea3 	.word	0x0800eea3
 800e900:	0800eea3 	.word	0x0800eea3
 800e904:	0800eea3 	.word	0x0800eea3
 800e908:	0800eea3 	.word	0x0800eea3
 800e90c:	0800eea3 	.word	0x0800eea3
 800e910:	0800eea3 	.word	0x0800eea3
 800e914:	0800eea3 	.word	0x0800eea3
 800e918:	0800eea3 	.word	0x0800eea3
 800e91c:	0800eea3 	.word	0x0800eea3
 800e920:	0800eea3 	.word	0x0800eea3
 800e924:	0800eea3 	.word	0x0800eea3
 800e928:	0800eea3 	.word	0x0800eea3
 800e92c:	0800eea3 	.word	0x0800eea3
 800e930:	0800eea3 	.word	0x0800eea3
 800e934:	0800eea3 	.word	0x0800eea3
 800e938:	0800eea3 	.word	0x0800eea3
 800e93c:	0800eea3 	.word	0x0800eea3
 800e940:	0800eea3 	.word	0x0800eea3
 800e944:	0800eea3 	.word	0x0800eea3
 800e948:	0800eea3 	.word	0x0800eea3
 800e94c:	0800eea3 	.word	0x0800eea3
 800e950:	0800eea3 	.word	0x0800eea3
 800e954:	0800eea3 	.word	0x0800eea3
 800e958:	0800eea3 	.word	0x0800eea3
 800e95c:	0800eea3 	.word	0x0800eea3
 800e960:	0800eea3 	.word	0x0800eea3
 800e964:	0800eea3 	.word	0x0800eea3
 800e968:	0800eea3 	.word	0x0800eea3
 800e96c:	0800eea3 	.word	0x0800eea3
 800e970:	0800eea3 	.word	0x0800eea3
 800e974:	0800eea3 	.word	0x0800eea3
 800e978:	0800eea3 	.word	0x0800eea3
 800e97c:	0800eea3 	.word	0x0800eea3
 800e980:	0800eea3 	.word	0x0800eea3
 800e984:	0800eea3 	.word	0x0800eea3
 800e988:	0800eea3 	.word	0x0800eea3
 800e98c:	0800eea3 	.word	0x0800eea3
 800e990:	0800eea3 	.word	0x0800eea3
 800e994:	0800eea3 	.word	0x0800eea3
 800e998:	0800eea3 	.word	0x0800eea3
 800e99c:	0800eea3 	.word	0x0800eea3
 800e9a0:	0800eea3 	.word	0x0800eea3
 800e9a4:	0800eea3 	.word	0x0800eea3
 800e9a8:	0800eea3 	.word	0x0800eea3
 800e9ac:	0800eea3 	.word	0x0800eea3
 800e9b0:	0800eea3 	.word	0x0800eea3
 800e9b4:	0800eea3 	.word	0x0800eea3
 800e9b8:	0800eea3 	.word	0x0800eea3
 800e9bc:	0800eea3 	.word	0x0800eea3
 800e9c0:	0800ec6b 	.word	0x0800ec6b
 800e9c4:	0800ed1b 	.word	0x0800ed1b
 800e9c8:	0800ed4d 	.word	0x0800ed4d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e9cc:	4b33      	ldr	r3, [pc, #204]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9ce:	68da      	ldr	r2, [r3, #12]
 800e9d0:	4b32      	ldr	r3, [pc, #200]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9d2:	7a9b      	ldrb	r3, [r3, #10]
 800e9d4:	1c59      	adds	r1, r3, #1
 800e9d6:	b2c8      	uxtb	r0, r1
 800e9d8:	4930      	ldr	r1, [pc, #192]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9da:	7288      	strb	r0, [r1, #10]
 800e9dc:	4413      	add	r3, r2
 800e9de:	2200      	movs	r2, #0
 800e9e0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e9e2:	4b2e      	ldr	r3, [pc, #184]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9e4:	68da      	ldr	r2, [r3, #12]
 800e9e6:	4b2d      	ldr	r3, [pc, #180]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9e8:	7a9b      	ldrb	r3, [r3, #10]
 800e9ea:	1c59      	adds	r1, r3, #1
 800e9ec:	b2c8      	uxtb	r0, r1
 800e9ee:	492b      	ldr	r1, [pc, #172]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9f0:	7288      	strb	r0, [r1, #10]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	2206      	movs	r2, #6
 800e9f6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e9f8:	4b28      	ldr	r3, [pc, #160]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	4b27      	ldr	r3, [pc, #156]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800e9fe:	7a9b      	ldrb	r3, [r3, #10]
 800ea00:	1c59      	adds	r1, r3, #1
 800ea02:	b2c8      	uxtb	r0, r1
 800ea04:	4925      	ldr	r1, [pc, #148]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800ea06:	7288      	strb	r0, [r1, #10]
 800ea08:	4413      	add	r3, r2
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	701a      	strb	r2, [r3, #0]
        break;
 800ea0e:	e251      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800ea10:	4b22      	ldr	r3, [pc, #136]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800ea18:	e24c      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800ea1a:	4b21      	ldr	r3, [pc, #132]	@ (800eaa0 <LmhpComplianceOnMcpsIndication+0x34c>)
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea1e:	2101      	movs	r1, #1
 800ea20:	2002      	movs	r0, #2
 800ea22:	4798      	blx	r3
        break;
 800ea24:	e246      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	689a      	ldr	r2, [r3, #8]
 800ea2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea2e:	1c59      	adds	r1, r3, #1
 800ea30:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea34:	4413      	add	r3, r2
 800ea36:	781a      	ldrb	r2, [r3, #0]
 800ea38:	4b18      	ldr	r3, [pc, #96]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800ea3a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800ea3e:	4b17      	ldr	r3, [pc, #92]	@ (800ea9c <LmhpComplianceOnMcpsIndication+0x348>)
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800ea46:	e235      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800ea48:	2304      	movs	r3, #4
 800ea4a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	689a      	ldr	r2, [r3, #8]
 800ea50:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea54:	1c59      	adds	r1, r3, #1
 800ea56:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea5a:	4413      	add	r3, r2
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bf14      	ite	ne
 800ea62:	2301      	movne	r3, #1
 800ea64:	2300      	moveq	r3, #0
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800ea6a:	f107 030c 	add.w	r3, r7, #12
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f004 fa14 	bl	8012e9c <LoRaMacMibSetRequestConfirm>
        break;
 800ea74:	e21e      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	689a      	ldr	r2, [r3, #8]
 800ea7a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea7e:	1c59      	adds	r1, r3, #1
 800ea80:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea84:	4413      	add	r3, r2
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bf14      	ite	ne
 800ea8c:	2301      	movne	r3, #1
 800ea8e:	2300      	moveq	r3, #0
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	4618      	mov	r0, r3
 800ea94:	f005 f830 	bl	8013af8 <LoRaMacTestSetDutyCycleOn>
        break;
 800ea98:	e20c      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
 800ea9a:	bf00      	nop
 800ea9c:	2000087c 	.word	0x2000087c
 800eaa0:	200000d0 	.word	0x200000d0
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800eaa4:	4ba5      	ldr	r3, [pc, #660]	@ (800ed3c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800eaa6:	f107 040c 	add.w	r4, r7, #12
 800eaaa:	461d      	mov	r5, r3
 800eaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	689a      	ldr	r2, [r3, #8]
 800eac0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eac4:	1c59      	adds	r1, r3, #1
 800eac6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eaca:	4413      	add	r3, r2
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800ead2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ead6:	2b0a      	cmp	r3, #10
 800ead8:	f200 81e5 	bhi.w	800eea6 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800eadc:	4b98      	ldr	r3, [pc, #608]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 81df 	beq.w	800eea6 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800eae8:	4b95      	ldr	r3, [pc, #596]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	3390      	adds	r3, #144	@ 0x90
 800eaf6:	443b      	add	r3, r7
 800eaf8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800eafc:	4618      	mov	r0, r3
 800eafe:	4790      	blx	r2
            }
        }
        break;
 800eb00:	e1d1      	b.n	800eea6 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689a      	ldr	r2, [r3, #8]
 800eb06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb0a:	1c59      	adds	r1, r3, #1
 800eb0c:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eb10:	4413      	add	r3, r2
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800eb18:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d004      	beq.n	800eb2a <LmhpComplianceOnMcpsIndication+0x3d6>
 800eb20:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	f040 81c0 	bne.w	800eeaa <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800eb2a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	bf14      	ite	ne
 800eb32:	2301      	movne	r3, #1
 800eb34:	2300      	moveq	r3, #0
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4b82      	ldr	r3, [pc, #520]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb3c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800eb3e:	4b80      	ldr	r3, [pc, #512]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f000 81b0 	beq.w	800eeaa <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800eb4a:	4b7d      	ldr	r3, [pc, #500]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	4a7c      	ldr	r2, [pc, #496]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb52:	7a12      	ldrb	r2, [r2, #8]
 800eb54:	4610      	mov	r0, r2
 800eb56:	4798      	blx	r3
            }
        }
        break;
 800eb58:	e1a7      	b.n	800eeaa <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800eb5a:	4b7a      	ldr	r3, [pc, #488]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb5c:	68da      	ldr	r2, [r3, #12]
 800eb5e:	4b79      	ldr	r3, [pc, #484]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb60:	7a9b      	ldrb	r3, [r3, #10]
 800eb62:	1c59      	adds	r1, r3, #1
 800eb64:	b2c8      	uxtb	r0, r1
 800eb66:	4977      	ldr	r1, [pc, #476]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb68:	7288      	strb	r0, [r1, #10]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	2208      	movs	r2, #8
 800eb6e:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800eb70:	2301      	movs	r3, #1
 800eb72:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800eb76:	e019      	b.n	800ebac <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	689a      	ldr	r2, [r3, #8]
 800eb7c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb80:	1c59      	adds	r1, r3, #1
 800eb82:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800eb86:	4413      	add	r3, r2
 800eb88:	781a      	ldrb	r2, [r3, #0]
 800eb8a:	4b6e      	ldr	r3, [pc, #440]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb8c:	68d9      	ldr	r1, [r3, #12]
 800eb8e:	4b6d      	ldr	r3, [pc, #436]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb90:	7a9b      	ldrb	r3, [r3, #10]
 800eb92:	1c58      	adds	r0, r3, #1
 800eb94:	b2c4      	uxtb	r4, r0
 800eb96:	486b      	ldr	r0, [pc, #428]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800eb98:	7284      	strb	r4, [r0, #10]
 800eb9a:	440b      	add	r3, r1
 800eb9c:	3201      	adds	r2, #1
 800eb9e:	b2d2      	uxtb	r2, r2
 800eba0:	701a      	strb	r2, [r3, #0]
             i++ )
 800eba2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800eba6:	3301      	adds	r3, #1
 800eba8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800ebac:	4b65      	ldr	r3, [pc, #404]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebae:	7a5a      	ldrb	r2, [r3, #9]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7b1b      	ldrb	r3, [r3, #12]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	bf28      	it	cs
 800ebb8:	4613      	movcs	r3, r2
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d3d9      	bcc.n	800eb78 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800ebc4:	e176      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800ebc6:	4b5f      	ldr	r3, [pc, #380]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	4b5e      	ldr	r3, [pc, #376]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebcc:	7a9b      	ldrb	r3, [r3, #10]
 800ebce:	1c59      	adds	r1, r3, #1
 800ebd0:	b2c8      	uxtb	r0, r1
 800ebd2:	495c      	ldr	r1, [pc, #368]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebd4:	7288      	strb	r0, [r1, #10]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	2209      	movs	r2, #9
 800ebda:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800ebdc:	4b59      	ldr	r3, [pc, #356]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebde:	8a18      	ldrh	r0, [r3, #16]
 800ebe0:	4b58      	ldr	r3, [pc, #352]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebe2:	68da      	ldr	r2, [r3, #12]
 800ebe4:	4b57      	ldr	r3, [pc, #348]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebe6:	7a9b      	ldrb	r3, [r3, #10]
 800ebe8:	1c59      	adds	r1, r3, #1
 800ebea:	b2cc      	uxtb	r4, r1
 800ebec:	4955      	ldr	r1, [pc, #340]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebee:	728c      	strb	r4, [r1, #10]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	b2c2      	uxtb	r2, r0
 800ebf4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800ebf6:	4b53      	ldr	r3, [pc, #332]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ebf8:	8a1b      	ldrh	r3, [r3, #16]
 800ebfa:	0a1b      	lsrs	r3, r3, #8
 800ebfc:	b298      	uxth	r0, r3
 800ebfe:	4b51      	ldr	r3, [pc, #324]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	4b50      	ldr	r3, [pc, #320]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec04:	7a9b      	ldrb	r3, [r3, #10]
 800ec06:	1c59      	adds	r1, r3, #1
 800ec08:	b2cc      	uxtb	r4, r1
 800ec0a:	494e      	ldr	r1, [pc, #312]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec0c:	728c      	strb	r4, [r1, #10]
 800ec0e:	4413      	add	r3, r2
 800ec10:	b2c2      	uxtb	r2, r0
 800ec12:	701a      	strb	r2, [r3, #0]
        break;
 800ec14:	e14e      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800ec16:	4b4b      	ldr	r3, [pc, #300]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	821a      	strh	r2, [r3, #16]
        break;
 800ec1c:	e14a      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800ec1e:	2304      	movs	r3, #4
 800ec20:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800ec24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f004 fca7 	bl	801357c <LoRaMacMlmeRequest>
        break;
 800ec2e:	e141      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800ec30:	4b45      	ldr	r3, [pc, #276]	@ (800ed48 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800ec32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec34:	4798      	blx	r3
        break;
 800ec36:	e13d      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec40:	1c59      	adds	r1, r3, #1
 800ec42:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ec46:	4413      	add	r3, r2
 800ec48:	781a      	ldrb	r2, [r3, #0]
 800ec4a:	4b3e      	ldr	r3, [pc, #248]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec4c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800ec4e:	4b3c      	ldr	r3, [pc, #240]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 812a 	beq.w	800eeae <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800ec5a:	4b39      	ldr	r3, [pc, #228]	@ (800ed40 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	4a38      	ldr	r2, [pc, #224]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ec62:	7d52      	ldrb	r2, [r2, #21]
 800ec64:	4610      	mov	r0, r2
 800ec66:	4798      	blx	r3
        }
        break;
 800ec68:	e121      	b.n	800eeae <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	7b1b      	ldrb	r3, [r3, #12]
 800ec6e:	2b07      	cmp	r3, #7
 800ec70:	f040 811f 	bne.w	800eeb2 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800ec74:	2305      	movs	r3, #5
 800ec76:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	689a      	ldr	r2, [r3, #8]
 800ec7e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec82:	4413      	add	r3, r2
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	b21a      	sxth	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6899      	ldr	r1, [r3, #8]
 800ec8c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ec90:	3301      	adds	r3, #1
 800ec92:	440b      	add	r3, r1
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	b21b      	sxth	r3, r3
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	b21b      	sxth	r3, r3
 800ec9e:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800eca0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800eca4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eca8:	3302      	adds	r3, #2
 800ecaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ecb6:	4413      	add	r3, r2
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	4619      	mov	r1, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	689a      	ldr	r2, [r3, #8]
 800ecc0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	4413      	add	r3, r2
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	021b      	lsls	r3, r3, #8
 800eccc:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6899      	ldr	r1, [r3, #8]
 800ecd4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ecd8:	3302      	adds	r3, #2
 800ecda:	440b      	add	r3, r1
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ece0:	4313      	orrs	r3, r2
 800ece2:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ece4:	2364      	movs	r3, #100	@ 0x64
 800ece6:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800ecea:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800ecec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ecf0:	3303      	adds	r3, #3
 800ecf2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	689a      	ldr	r2, [r3, #8]
 800ecfa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ecfe:	1c59      	adds	r1, r3, #1
 800ed00:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ed04:	4413      	add	r3, r2
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	b25b      	sxtb	r3, r3
 800ed0a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800ed0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ed12:	4618      	mov	r0, r3
 800ed14:	f004 fc32 	bl	801357c <LoRaMacMlmeRequest>
        }
        break;
 800ed18:	e0cb      	b.n	800eeb2 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ed1a:	2339      	movs	r3, #57	@ 0x39
 800ed1c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800ed20:	2300      	movs	r3, #0
 800ed22:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ed26:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f004 f8b6 	bl	8012e9c <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800ed30:	4b04      	ldr	r3, [pc, #16]	@ (800ed44 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800ed38:	e0bc      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
 800ed3a:	bf00      	nop
 800ed3c:	08020010 	.word	0x08020010
 800ed40:	200008b4 	.word	0x200008b4
 800ed44:	2000087c 	.word	0x2000087c
 800ed48:	200000d0 	.word	0x200000d0
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800ed4c:	232a      	movs	r3, #42	@ 0x2a
 800ed4e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800ed50:	f107 030c 	add.w	r3, r7, #12
 800ed54:	4618      	mov	r0, r3
 800ed56:	f003 fefb 	bl	8012b50 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ed62:	4b62      	ldr	r3, [pc, #392]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed64:	68da      	ldr	r2, [r3, #12]
 800ed66:	4b61      	ldr	r3, [pc, #388]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed68:	7a9b      	ldrb	r3, [r3, #10]
 800ed6a:	1c59      	adds	r1, r3, #1
 800ed6c:	b2c8      	uxtb	r0, r1
 800ed6e:	495f      	ldr	r1, [pc, #380]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed70:	7288      	strb	r0, [r1, #10]
 800ed72:	4413      	add	r3, r2
 800ed74:	227f      	movs	r2, #127	@ 0x7f
 800ed76:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ed78:	4b5d      	ldr	r3, [pc, #372]	@ (800eef0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	4b5b      	ldr	r3, [pc, #364]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed7e:	68d9      	ldr	r1, [r3, #12]
 800ed80:	4b5a      	ldr	r3, [pc, #360]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed82:	7a9b      	ldrb	r3, [r3, #10]
 800ed84:	1c58      	adds	r0, r3, #1
 800ed86:	b2c4      	uxtb	r4, r0
 800ed88:	4858      	ldr	r0, [pc, #352]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed8a:	7284      	strb	r4, [r0, #10]
 800ed8c:	440b      	add	r3, r1
 800ed8e:	78d2      	ldrb	r2, [r2, #3]
 800ed90:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ed92:	4b57      	ldr	r3, [pc, #348]	@ (800eef0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	4b55      	ldr	r3, [pc, #340]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed98:	68d9      	ldr	r1, [r3, #12]
 800ed9a:	4b54      	ldr	r3, [pc, #336]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ed9c:	7a9b      	ldrb	r3, [r3, #10]
 800ed9e:	1c58      	adds	r0, r3, #1
 800eda0:	b2c4      	uxtb	r4, r0
 800eda2:	4852      	ldr	r0, [pc, #328]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800eda4:	7284      	strb	r4, [r0, #10]
 800eda6:	440b      	add	r3, r1
 800eda8:	7892      	ldrb	r2, [r2, #2]
 800edaa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800edac:	4b50      	ldr	r3, [pc, #320]	@ (800eef0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	4b4e      	ldr	r3, [pc, #312]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edb2:	68d9      	ldr	r1, [r3, #12]
 800edb4:	4b4d      	ldr	r3, [pc, #308]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edb6:	7a9b      	ldrb	r3, [r3, #10]
 800edb8:	1c58      	adds	r0, r3, #1
 800edba:	b2c4      	uxtb	r4, r0
 800edbc:	484b      	ldr	r0, [pc, #300]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edbe:	7284      	strb	r4, [r0, #10]
 800edc0:	440b      	add	r3, r1
 800edc2:	7852      	ldrb	r2, [r2, #1]
 800edc4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800edc6:	4b4a      	ldr	r3, [pc, #296]	@ (800eef0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	4b48      	ldr	r3, [pc, #288]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edcc:	68d9      	ldr	r1, [r3, #12]
 800edce:	4b47      	ldr	r3, [pc, #284]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edd0:	7a9b      	ldrb	r3, [r3, #10]
 800edd2:	1c58      	adds	r0, r3, #1
 800edd4:	b2c4      	uxtb	r4, r0
 800edd6:	4845      	ldr	r0, [pc, #276]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edd8:	7284      	strb	r4, [r0, #10]
 800edda:	440b      	add	r3, r1
 800eddc:	7812      	ldrb	r2, [r2, #0]
 800edde:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ede0:	4b42      	ldr	r3, [pc, #264]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ede2:	68da      	ldr	r2, [r3, #12]
 800ede4:	4b41      	ldr	r3, [pc, #260]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ede6:	7a9b      	ldrb	r3, [r3, #10]
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	b2c8      	uxtb	r0, r1
 800edec:	493f      	ldr	r1, [pc, #252]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edee:	7288      	strb	r0, [r1, #10]
 800edf0:	4413      	add	r3, r2
 800edf2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800edf6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800edf8:	4b3c      	ldr	r3, [pc, #240]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edfa:	68da      	ldr	r2, [r3, #12]
 800edfc:	4b3b      	ldr	r3, [pc, #236]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800edfe:	7a9b      	ldrb	r3, [r3, #10]
 800ee00:	1c59      	adds	r1, r3, #1
 800ee02:	b2c8      	uxtb	r0, r1
 800ee04:	4939      	ldr	r1, [pc, #228]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee06:	7288      	strb	r0, [r1, #10]
 800ee08:	4413      	add	r3, r2
 800ee0a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800ee0e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ee10:	4b36      	ldr	r3, [pc, #216]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee12:	68da      	ldr	r2, [r3, #12]
 800ee14:	4b35      	ldr	r3, [pc, #212]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee16:	7a9b      	ldrb	r3, [r3, #10]
 800ee18:	1c59      	adds	r1, r3, #1
 800ee1a:	b2c8      	uxtb	r0, r1
 800ee1c:	4933      	ldr	r1, [pc, #204]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee1e:	7288      	strb	r0, [r1, #10]
 800ee20:	4413      	add	r3, r2
 800ee22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800ee26:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800ee28:	4b30      	ldr	r3, [pc, #192]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee2a:	68da      	ldr	r2, [r3, #12]
 800ee2c:	4b2f      	ldr	r3, [pc, #188]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee2e:	7a9b      	ldrb	r3, [r3, #10]
 800ee30:	1c59      	adds	r1, r3, #1
 800ee32:	b2c8      	uxtb	r0, r1
 800ee34:	492d      	ldr	r1, [pc, #180]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee36:	7288      	strb	r0, [r1, #10]
 800ee38:	4413      	add	r3, r2
 800ee3a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800ee3e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800ee40:	4b2a      	ldr	r3, [pc, #168]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee42:	68da      	ldr	r2, [r3, #12]
 800ee44:	4b29      	ldr	r3, [pc, #164]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee46:	7a9b      	ldrb	r3, [r3, #10]
 800ee48:	1c59      	adds	r1, r3, #1
 800ee4a:	b2c8      	uxtb	r0, r1
 800ee4c:	4927      	ldr	r1, [pc, #156]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee4e:	7288      	strb	r0, [r1, #10]
 800ee50:	4413      	add	r3, r2
 800ee52:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800ee56:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800ee58:	4b24      	ldr	r3, [pc, #144]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee5a:	68da      	ldr	r2, [r3, #12]
 800ee5c:	4b23      	ldr	r3, [pc, #140]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee5e:	7a9b      	ldrb	r3, [r3, #10]
 800ee60:	1c59      	adds	r1, r3, #1
 800ee62:	b2c8      	uxtb	r0, r1
 800ee64:	4921      	ldr	r1, [pc, #132]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee66:	7288      	strb	r0, [r1, #10]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ee6e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ee70:	4b1e      	ldr	r3, [pc, #120]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee72:	68da      	ldr	r2, [r3, #12]
 800ee74:	4b1d      	ldr	r3, [pc, #116]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee76:	7a9b      	ldrb	r3, [r3, #10]
 800ee78:	1c59      	adds	r1, r3, #1
 800ee7a:	b2c8      	uxtb	r0, r1
 800ee7c:	491b      	ldr	r1, [pc, #108]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee7e:	7288      	strb	r0, [r1, #10]
 800ee80:	4413      	add	r3, r2
 800ee82:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ee86:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800ee88:	4b18      	ldr	r3, [pc, #96]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee8a:	68da      	ldr	r2, [r3, #12]
 800ee8c:	4b17      	ldr	r3, [pc, #92]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee8e:	7a9b      	ldrb	r3, [r3, #10]
 800ee90:	1c59      	adds	r1, r3, #1
 800ee92:	b2c8      	uxtb	r0, r1
 800ee94:	4915      	ldr	r1, [pc, #84]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800ee96:	7288      	strb	r0, [r1, #10]
 800ee98:	4413      	add	r3, r2
 800ee9a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ee9e:	701a      	strb	r2, [r3, #0]
        break;
 800eea0:	e008      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800eea2:	bf00      	nop
 800eea4:	e006      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800eea6:	bf00      	nop
 800eea8:	e004      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800eeaa:	bf00      	nop
 800eeac:	e002      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800eeae:	bf00      	nop
 800eeb0:	e000      	b.n	800eeb4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800eeb2:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800eeb4:	4b0d      	ldr	r3, [pc, #52]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800eeb6:	7a9b      	ldrb	r3, [r3, #10]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d008      	beq.n	800eece <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800eebc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800eec0:	480c      	ldr	r0, [pc, #48]	@ (800eef4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800eec2:	f00d fafd 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800eec6:	480b      	ldr	r0, [pc, #44]	@ (800eef4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800eec8:	f00d fa1c 	bl	801c304 <UTIL_TIMER_Start>
 800eecc:	e00b      	b.n	800eee6 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800eece:	4809      	ldr	r0, [pc, #36]	@ (800eef4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800eed0:	f00d fa86 	bl	801c3e0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800eed4:	4b05      	ldr	r3, [pc, #20]	@ (800eeec <LmhpComplianceOnMcpsIndication+0x798>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	705a      	strb	r2, [r3, #1]
 800eeda:	e004      	b.n	800eee6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800eedc:	bf00      	nop
 800eede:	e002      	b.n	800eee6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800eee0:	bf00      	nop
 800eee2:	e000      	b.n	800eee6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800eee4:	bf00      	nop
    }
}
 800eee6:	3790      	adds	r7, #144	@ 0x90
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bdb0      	pop	{r4, r5, r7, pc}
 800eeec:	2000087c 	.word	0x2000087c
 800eef0:	200008b4 	.word	0x200008b4
 800eef4:	200008b8 	.word	0x200008b8

0800eef8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800ef00:	bf00      	nop
    }
}
 800ef02:	bf00      	nop
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bc80      	pop	{r7}
 800ef0a:	4770      	bx	lr

0800ef0c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ef14:	4b05      	ldr	r3, [pc, #20]	@ (800ef2c <LmhpComplianceOnMlmeIndication+0x20>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	f083 0301 	eor.w	r3, r3, #1
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
    {
        return;
 800ef20:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bc80      	pop	{r7}
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	2000087c 	.word	0x2000087c

0800ef30 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800ef38:	4b04      	ldr	r3, [pc, #16]	@ (800ef4c <OnProcessTimer+0x1c>)
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800ef3e:	4b04      	ldr	r3, [pc, #16]	@ (800ef50 <OnProcessTimer+0x20>)
 800ef40:	695b      	ldr	r3, [r3, #20]
 800ef42:	4798      	blx	r3
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	2000087c 	.word	0x2000087c
 800ef50:	200000d0 	.word	0x200000d0

0800ef54 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800ef54:	b590      	push	{r4, r7, lr}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ef5a:	f00d fb5b 	bl	801c614 <UTIL_TIMER_GetCurrentTime>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4a16      	ldr	r2, [pc, #88]	@ (800efbc <OnRadioTxDone+0x68>)
 800ef62:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ef64:	4c16      	ldr	r4, [pc, #88]	@ (800efc0 <OnRadioTxDone+0x6c>)
 800ef66:	463b      	mov	r3, r7
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f00c fcd3 	bl	801b914 <SysTimeGet>
 800ef6e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ef72:	463a      	mov	r2, r7
 800ef74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef78:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef7c:	4a11      	ldr	r2, [pc, #68]	@ (800efc4 <OnRadioTxDone+0x70>)
 800ef7e:	7813      	ldrb	r3, [r2, #0]
 800ef80:	f043 0320 	orr.w	r3, r3, #32
 800ef84:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef86:	4b0e      	ldr	r3, [pc, #56]	@ (800efc0 <OnRadioTxDone+0x6c>)
 800ef88:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00a      	beq.n	800efa6 <OnRadioTxDone+0x52>
 800ef90:	4b0b      	ldr	r3, [pc, #44]	@ (800efc0 <OnRadioTxDone+0x6c>)
 800ef92:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef9c:	4b08      	ldr	r3, [pc, #32]	@ (800efc0 <OnRadioTxDone+0x6c>)
 800ef9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800efa6:	4b08      	ldr	r3, [pc, #32]	@ (800efc8 <OnRadioTxDone+0x74>)
 800efa8:	2201      	movs	r2, #1
 800efaa:	2100      	movs	r1, #0
 800efac:	2002      	movs	r0, #2
 800efae:	f00d fc21 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd90      	pop	{r4, r7, pc}
 800efba:	bf00      	nop
 800efbc:	2000197c 	.word	0x2000197c
 800efc0:	200008d0 	.word	0x200008d0
 800efc4:	20001978 	.word	0x20001978
 800efc8:	0802003c 	.word	0x0802003c

0800efcc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	4608      	mov	r0, r1
 800efd6:	4611      	mov	r1, r2
 800efd8:	461a      	mov	r2, r3
 800efda:	4603      	mov	r3, r0
 800efdc:	817b      	strh	r3, [r7, #10]
 800efde:	460b      	mov	r3, r1
 800efe0:	813b      	strh	r3, [r7, #8]
 800efe2:	4613      	mov	r3, r2
 800efe4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800efe6:	f00d fb15 	bl	801c614 <UTIL_TIMER_GetCurrentTime>
 800efea:	4603      	mov	r3, r0
 800efec:	4a18      	ldr	r2, [pc, #96]	@ (800f050 <OnRadioRxDone+0x84>)
 800efee:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800eff0:	4a17      	ldr	r2, [pc, #92]	@ (800f050 <OnRadioRxDone+0x84>)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800eff6:	4a16      	ldr	r2, [pc, #88]	@ (800f050 <OnRadioRxDone+0x84>)
 800eff8:	897b      	ldrh	r3, [r7, #10]
 800effa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800effc:	4a14      	ldr	r2, [pc, #80]	@ (800f050 <OnRadioRxDone+0x84>)
 800effe:	893b      	ldrh	r3, [r7, #8]
 800f000:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f002:	4a13      	ldr	r2, [pc, #76]	@ (800f050 <OnRadioRxDone+0x84>)
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f008:	4a12      	ldr	r2, [pc, #72]	@ (800f054 <OnRadioRxDone+0x88>)
 800f00a:	7813      	ldrb	r3, [r2, #0]
 800f00c:	f043 0310 	orr.w	r3, r3, #16
 800f010:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f012:	4a10      	ldr	r2, [pc, #64]	@ (800f054 <OnRadioRxDone+0x88>)
 800f014:	7813      	ldrb	r3, [r2, #0]
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f01c:	4b0e      	ldr	r3, [pc, #56]	@ (800f058 <OnRadioRxDone+0x8c>)
 800f01e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <OnRadioRxDone+0x70>
 800f026:	4b0c      	ldr	r3, [pc, #48]	@ (800f058 <OnRadioRxDone+0x8c>)
 800f028:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d004      	beq.n	800f03c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f032:	4b09      	ldr	r3, [pc, #36]	@ (800f058 <OnRadioRxDone+0x8c>)
 800f034:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f03c:	4b07      	ldr	r3, [pc, #28]	@ (800f05c <OnRadioRxDone+0x90>)
 800f03e:	2201      	movs	r2, #1
 800f040:	2100      	movs	r1, #0
 800f042:	2002      	movs	r0, #2
 800f044:	f00d fbd6 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f048:	bf00      	nop
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	20001980 	.word	0x20001980
 800f054:	20001978 	.word	0x20001978
 800f058:	200008d0 	.word	0x200008d0
 800f05c:	0802004c 	.word	0x0802004c

0800f060 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f064:	4a0e      	ldr	r2, [pc, #56]	@ (800f0a0 <OnRadioTxTimeout+0x40>)
 800f066:	7813      	ldrb	r3, [r2, #0]
 800f068:	f043 0308 	orr.w	r3, r3, #8
 800f06c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f06e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0a4 <OnRadioTxTimeout+0x44>)
 800f070:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00a      	beq.n	800f08e <OnRadioTxTimeout+0x2e>
 800f078:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a4 <OnRadioTxTimeout+0x44>)
 800f07a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d004      	beq.n	800f08e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f084:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <OnRadioTxTimeout+0x44>)
 800f086:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f08e:	4b06      	ldr	r3, [pc, #24]	@ (800f0a8 <OnRadioTxTimeout+0x48>)
 800f090:	2201      	movs	r2, #1
 800f092:	2100      	movs	r1, #0
 800f094:	2002      	movs	r0, #2
 800f096:	f00d fbad 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f09a:	bf00      	nop
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20001978 	.word	0x20001978
 800f0a4:	200008d0 	.word	0x200008d0
 800f0a8:	0802005c 	.word	0x0802005c

0800f0ac <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f0b0:	4a0b      	ldr	r2, [pc, #44]	@ (800f0e0 <OnRadioRxError+0x34>)
 800f0b2:	7813      	ldrb	r3, [r2, #0]
 800f0b4:	f043 0304 	orr.w	r3, r3, #4
 800f0b8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e4 <OnRadioRxError+0x38>)
 800f0bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00a      	beq.n	800f0da <OnRadioRxError+0x2e>
 800f0c4:	4b07      	ldr	r3, [pc, #28]	@ (800f0e4 <OnRadioRxError+0x38>)
 800f0c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d004      	beq.n	800f0da <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f0d0:	4b04      	ldr	r3, [pc, #16]	@ (800f0e4 <OnRadioRxError+0x38>)
 800f0d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	4798      	blx	r3
    }
}
 800f0da:	bf00      	nop
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	20001978 	.word	0x20001978
 800f0e4:	200008d0 	.word	0x200008d0

0800f0e8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f0ec:	4a0e      	ldr	r2, [pc, #56]	@ (800f128 <OnRadioRxTimeout+0x40>)
 800f0ee:	7813      	ldrb	r3, [r2, #0]
 800f0f0:	f043 0302 	orr.w	r3, r3, #2
 800f0f4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f12c <OnRadioRxTimeout+0x44>)
 800f0f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00a      	beq.n	800f116 <OnRadioRxTimeout+0x2e>
 800f100:	4b0a      	ldr	r3, [pc, #40]	@ (800f12c <OnRadioRxTimeout+0x44>)
 800f102:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d004      	beq.n	800f116 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f10c:	4b07      	ldr	r3, [pc, #28]	@ (800f12c <OnRadioRxTimeout+0x44>)
 800f10e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f116:	4b06      	ldr	r3, [pc, #24]	@ (800f130 <OnRadioRxTimeout+0x48>)
 800f118:	2201      	movs	r2, #1
 800f11a:	2100      	movs	r1, #0
 800f11c:	2002      	movs	r0, #2
 800f11e:	f00d fb69 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f122:	bf00      	nop
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20001978 	.word	0x20001978
 800f12c:	200008d0 	.word	0x200008d0
 800f130:	0802006c 	.word	0x0802006c

0800f134 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f134:	b480      	push	{r7}
 800f136:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f138:	4b08      	ldr	r3, [pc, #32]	@ (800f15c <UpdateRxSlotIdleState+0x28>)
 800f13a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d004      	beq.n	800f14c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f142:	4b07      	ldr	r3, [pc, #28]	@ (800f160 <UpdateRxSlotIdleState+0x2c>)
 800f144:	2206      	movs	r2, #6
 800f146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f14a:	e003      	b.n	800f154 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f14c:	4b04      	ldr	r3, [pc, #16]	@ (800f160 <UpdateRxSlotIdleState+0x2c>)
 800f14e:	2202      	movs	r2, #2
 800f150:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800f154:	bf00      	nop
 800f156:	46bd      	mov	sp, r7
 800f158:	bc80      	pop	{r7}
 800f15a:	4770      	bx	lr
 800f15c:	20000df0 	.word	0x20000df0
 800f160:	200008d0 	.word	0x200008d0

0800f164 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08e      	sub	sp, #56	@ 0x38
 800f168:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f16a:	4b3e      	ldr	r3, [pc, #248]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f16c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f170:	2b02      	cmp	r3, #2
 800f172:	d002      	beq.n	800f17a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f174:	4b3c      	ldr	r3, [pc, #240]	@ (800f268 <ProcessRadioTxDone+0x104>)
 800f176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f178:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f17a:	4b3c      	ldr	r3, [pc, #240]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f17c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800f180:	4619      	mov	r1, r3
 800f182:	483b      	ldr	r0, [pc, #236]	@ (800f270 <ProcessRadioTxDone+0x10c>)
 800f184:	f00d f99c 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f188:	4839      	ldr	r0, [pc, #228]	@ (800f270 <ProcessRadioTxDone+0x10c>)
 800f18a:	f00d f8bb 	bl	801c304 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f18e:	4b37      	ldr	r3, [pc, #220]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f190:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800f194:	4619      	mov	r1, r3
 800f196:	4837      	ldr	r0, [pc, #220]	@ (800f274 <ProcessRadioTxDone+0x110>)
 800f198:	f00d f992 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f19c:	4835      	ldr	r0, [pc, #212]	@ (800f274 <ProcessRadioTxDone+0x110>)
 800f19e:	f00d f8b1 	bl	801c304 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800f1a2:	4b32      	ldr	r3, [pc, #200]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f1a4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d01a      	beq.n	800f1e2 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f1ac:	2315      	movs	r3, #21
 800f1ae:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f1b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f1b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1b8:	f107 0220 	add.w	r2, r7, #32
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f006 fd28 	bl	8015c14 <RegionGetPhyParam>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f1c8:	4b28      	ldr	r3, [pc, #160]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f1ca:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	4828      	ldr	r0, [pc, #160]	@ (800f278 <ProcessRadioTxDone+0x114>)
 800f1d6:	f00d f973 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f1da:	4827      	ldr	r0, [pc, #156]	@ (800f278 <ProcessRadioTxDone+0x114>)
 800f1dc:	f00d f892 	bl	801c304 <UTIL_TIMER_Start>
 800f1e0:	e003      	b.n	800f1ea <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f1e2:	4b22      	ldr	r3, [pc, #136]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f1ea:	4b24      	ldr	r3, [pc, #144]	@ (800f27c <ProcessRadioTxDone+0x118>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4a1d      	ldr	r2, [pc, #116]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f1f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f1f4:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800f1f8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f1fa:	4b20      	ldr	r3, [pc, #128]	@ (800f27c <ProcessRadioTxDone+0x118>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f200:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f204:	4618      	mov	r0, r3
 800f206:	f00c fbbd 	bl	801b984 <SysTimeGetMcuTime>
 800f20a:	4638      	mov	r0, r7
 800f20c:	4b15      	ldr	r3, [pc, #84]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f20e:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800f212:	9200      	str	r2, [sp, #0]
 800f214:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800f218:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f21c:	ca06      	ldmia	r2, {r1, r2}
 800f21e:	f00c fb12 	bl	801b846 <SysTimeSub>
 800f222:	f107 0314 	add.w	r3, r7, #20
 800f226:	463a      	mov	r2, r7
 800f228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f22c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f230:	4b0e      	ldr	r3, [pc, #56]	@ (800f26c <ProcessRadioTxDone+0x108>)
 800f232:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800f236:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f238:	2301      	movs	r3, #1
 800f23a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f23c:	4b09      	ldr	r3, [pc, #36]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f23e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800f246:	2300      	movs	r3, #0
 800f248:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f24a:	4b06      	ldr	r3, [pc, #24]	@ (800f264 <ProcessRadioTxDone+0x100>)
 800f24c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f250:	f107 0208 	add.w	r2, r7, #8
 800f254:	4611      	mov	r1, r2
 800f256:	4618      	mov	r0, r3
 800f258:	f006 fcf4 	bl	8015c44 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f25c:	bf00      	nop
 800f25e:	3730      	adds	r7, #48	@ 0x30
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	20000df0 	.word	0x20000df0
 800f268:	08020714 	.word	0x08020714
 800f26c:	200008d0 	.word	0x200008d0
 800f270:	20000c50 	.word	0x20000c50
 800f274:	20000c68 	.word	0x20000c68
 800f278:	20000cd4 	.word	0x20000cd4
 800f27c:	2000197c 	.word	0x2000197c

0800f280 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f284:	4b10      	ldr	r3, [pc, #64]	@ (800f2c8 <PrepareRxDoneAbort+0x48>)
 800f286:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f28e:	4a0e      	ldr	r2, [pc, #56]	@ (800f2c8 <PrepareRxDoneAbort+0x48>)
 800f290:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f294:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c8 <PrepareRxDoneAbort+0x48>)
 800f296:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f29e:	2000      	movs	r0, #0
 800f2a0:	f001 f99c 	bl	80105dc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f2a4:	4a08      	ldr	r2, [pc, #32]	@ (800f2c8 <PrepareRxDoneAbort+0x48>)
 800f2a6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f2aa:	f043 0302 	orr.w	r3, r3, #2
 800f2ae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f2b2:	4a05      	ldr	r2, [pc, #20]	@ (800f2c8 <PrepareRxDoneAbort+0x48>)
 800f2b4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f2b8:	f043 0320 	orr.w	r3, r3, #32
 800f2bc:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800f2c0:	f7ff ff38 	bl	800f134 <UpdateRxSlotIdleState>
}
 800f2c4:	bf00      	nop
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	200008d0 	.word	0x200008d0

0800f2cc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f2cc:	b590      	push	{r4, r7, lr}
 800f2ce:	b0a7      	sub	sp, #156	@ 0x9c
 800f2d0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f2d2:	2312      	movs	r3, #18
 800f2d4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f2d8:	4bbd      	ldr	r3, [pc, #756]	@ (800f5d0 <ProcessRadioRxDone+0x304>)
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800f2e0:	4bbb      	ldr	r3, [pc, #748]	@ (800f5d0 <ProcessRadioRxDone+0x304>)
 800f2e2:	891b      	ldrh	r3, [r3, #8]
 800f2e4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800f2e8:	4bb9      	ldr	r3, [pc, #740]	@ (800f5d0 <ProcessRadioRxDone+0x304>)
 800f2ea:	895b      	ldrh	r3, [r3, #10]
 800f2ec:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800f2f0:	4bb7      	ldr	r3, [pc, #732]	@ (800f5d0 <ProcessRadioRxDone+0x304>)
 800f2f2:	7b1b      	ldrb	r3, [r3, #12]
 800f2f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f302:	4bb4      	ldr	r3, [pc, #720]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f304:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800f30c:	2300      	movs	r3, #0
 800f30e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f312:	2301      	movs	r3, #1
 800f314:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f318:	4aaf      	ldr	r2, [pc, #700]	@ (800f5d8 <ProcessRadioRxDone+0x30c>)
 800f31a:	7813      	ldrb	r3, [r2, #0]
 800f31c:	f36f 0300 	bfc	r3, #0, #1
 800f320:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f322:	4bae      	ldr	r3, [pc, #696]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800f32a:	4aac      	ldr	r2, [pc, #688]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f32c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800f330:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800f334:	4aa9      	ldr	r2, [pc, #676]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f336:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f33a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f33e:	4ba7      	ldr	r3, [pc, #668]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f340:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800f344:	4ba5      	ldr	r3, [pc, #660]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f346:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800f34a:	4ba4      	ldr	r3, [pc, #656]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800f352:	4ba2      	ldr	r3, [pc, #648]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f354:	2200      	movs	r2, #0
 800f356:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800f35a:	4ba0      	ldr	r3, [pc, #640]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800f362:	4b9e      	ldr	r3, [pc, #632]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f364:	2200      	movs	r2, #0
 800f366:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800f36a:	4b9c      	ldr	r3, [pc, #624]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800f372:	4b9a      	ldr	r3, [pc, #616]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800f37a:	4b98      	ldr	r3, [pc, #608]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f382:	4b96      	ldr	r3, [pc, #600]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f384:	2200      	movs	r2, #0
 800f386:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f38a:	4b94      	ldr	r3, [pc, #592]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800f392:	4b92      	ldr	r3, [pc, #584]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f394:	2200      	movs	r2, #0
 800f396:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f39a:	4b90      	ldr	r3, [pc, #576]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f3a2:	4b8e      	ldr	r3, [pc, #568]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f3aa:	4b8d      	ldr	r3, [pc, #564]	@ (800f5e0 <ProcessRadioRxDone+0x314>)
 800f3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ae:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f3b0:	4b8a      	ldr	r3, [pc, #552]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f3b2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d102      	bne.n	800f3c0 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f3ba:	488a      	ldr	r0, [pc, #552]	@ (800f5e4 <ProcessRadioRxDone+0x318>)
 800f3bc:	f00d f810 	bl	801c3e0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f3c0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800f3ca:	f004 fcdb 	bl	8013d84 <LoRaMacClassBRxBeacon>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00b      	beq.n	800f3ec <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f3d4:	4a81      	ldr	r2, [pc, #516]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f3d6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800f3da:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f3de:	4a7f      	ldr	r2, [pc, #508]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f3e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f3e4:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800f3e8:	f000 bc22 	b.w	800fc30 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f3ec:	4b79      	ldr	r3, [pc, #484]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f3ee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d11e      	bne.n	800f434 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f3f6:	f004 fcd8 	bl	8013daa <LoRaMacClassBIsPingExpected>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00a      	beq.n	800f416 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f400:	2000      	movs	r0, #0
 800f402:	f004 fc89 	bl	8013d18 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f406:	2000      	movs	r0, #0
 800f408:	f004 fcaa 	bl	8013d60 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f40c:	4b73      	ldr	r3, [pc, #460]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f40e:	2204      	movs	r2, #4
 800f410:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800f414:	e00e      	b.n	800f434 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f416:	f004 fccf 	bl	8013db8 <LoRaMacClassBIsMulticastExpected>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d009      	beq.n	800f434 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f420:	2000      	movs	r0, #0
 800f422:	f004 fc83 	bl	8013d2c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f426:	2000      	movs	r0, #0
 800f428:	f004 fca3 	bl	8013d72 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f42c:	4b6b      	ldr	r3, [pc, #428]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f42e:	2205      	movs	r2, #5
 800f430:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f434:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800f43e:	461a      	mov	r2, r3
 800f440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f444:	4413      	add	r3, r2
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800f44c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f450:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f454:	b2db      	uxtb	r3, r3
 800f456:	3b01      	subs	r3, #1
 800f458:	2b06      	cmp	r3, #6
 800f45a:	f200 83bd 	bhi.w	800fbd8 <ProcessRadioRxDone+0x90c>
 800f45e:	a201      	add	r2, pc, #4	@ (adr r2, 800f464 <ProcessRadioRxDone+0x198>)
 800f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f464:	0800f481 	.word	0x0800f481
 800f468:	0800fbd9 	.word	0x0800fbd9
 800f46c:	0800f615 	.word	0x0800f615
 800f470:	0800fbd9 	.word	0x0800fbd9
 800f474:	0800f60d 	.word	0x0800f60d
 800f478:	0800fbd9 	.word	0x0800fbd9
 800f47c:	0800fb6b 	.word	0x0800fb6b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f480:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f484:	2b10      	cmp	r3, #16
 800f486:	d806      	bhi.n	800f496 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f488:	4b54      	ldr	r3, [pc, #336]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f490:	f7ff fef6 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f494:	e3cc      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800f496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f49a:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800f49c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f4a4:	4b4b      	ldr	r3, [pc, #300]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f4a6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d006      	beq.n	800f4bc <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f4ae:	4b4b      	ldr	r3, [pc, #300]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f4b6:	f7ff fee3 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f4ba:	e3b9      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f4bc:	f7fe f876 	bl	800d5ac <SecureElementGetJoinEui>
 800f4c0:	4601      	mov	r1, r0
 800f4c2:	f107 030c 	add.w	r3, r7, #12
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	20ff      	movs	r0, #255	@ 0xff
 800f4ca:	f005 fe2d 	bl	8015128 <LoRaMacCryptoHandleJoinAccept>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f4d4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f040 8085 	bne.w	800f5e8 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f4de:	7d7b      	ldrb	r3, [r7, #21]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	4b3c      	ldr	r3, [pc, #240]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f4e4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f4e8:	4b3a      	ldr	r3, [pc, #232]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f4ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800f4ee:	7dbb      	ldrb	r3, [r7, #22]
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	4a37      	ldr	r2, [pc, #220]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f4f6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f4fa:	4b36      	ldr	r3, [pc, #216]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f4fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	041b      	lsls	r3, r3, #16
 800f504:	4313      	orrs	r3, r2
 800f506:	4a33      	ldr	r2, [pc, #204]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f508:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	4a31      	ldr	r2, [pc, #196]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f510:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f514:	7f3b      	ldrb	r3, [r7, #28]
 800f516:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	461a      	mov	r2, r3
 800f51e:	4b2d      	ldr	r3, [pc, #180]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f520:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f524:	7f3b      	ldrb	r3, [r7, #28]
 800f526:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	461a      	mov	r2, r3
 800f52e:	4b29      	ldr	r3, [pc, #164]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f530:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f534:	7f3b      	ldrb	r3, [r7, #28]
 800f536:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	461a      	mov	r2, r3
 800f53e:	4b25      	ldr	r3, [pc, #148]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f540:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f544:	7f7b      	ldrb	r3, [r7, #29]
 800f546:	461a      	mov	r2, r3
 800f548:	4b22      	ldr	r3, [pc, #136]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f54a:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f54c:	4b21      	ldr	r3, [pc, #132]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f550:	2b00      	cmp	r3, #0
 800f552:	d102      	bne.n	800f55a <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f554:	4b1f      	ldr	r3, [pc, #124]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f556:	2201      	movs	r2, #1
 800f558:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f55a:	4b1e      	ldr	r3, [pc, #120]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f55e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f562:	fb02 f303 	mul.w	r3, r2, r3
 800f566:	4a1b      	ldr	r2, [pc, #108]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f568:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f56a:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f56e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f572:	4a18      	ldr	r2, [pc, #96]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f574:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f576:	4b17      	ldr	r3, [pc, #92]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f578:	2200      	movs	r2, #0
 800f57a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f57e:	f107 030c 	add.w	r3, r7, #12
 800f582:	3312      	adds	r3, #18
 800f584:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f586:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	3b11      	subs	r3, #17
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f594:	4b11      	ldr	r3, [pc, #68]	@ (800f5dc <ProcessRadioRxDone+0x310>)
 800f596:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800f59a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f59e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f5a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f5a4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f006 fb84 	bl	8015cb8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f5b0:	4b08      	ldr	r3, [pc, #32]	@ (800f5d4 <ProcessRadioRxDone+0x308>)
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	f005 f8dd 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d01b      	beq.n	800f5fc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	f005 f84a 	bl	8014660 <LoRaMacConfirmQueueSetStatus>
 800f5cc:	e016      	b.n	800f5fc <ProcessRadioRxDone+0x330>
 800f5ce:	bf00      	nop
 800f5d0:	20001980 	.word	0x20001980
 800f5d4:	20000df0 	.word	0x20000df0
 800f5d8:	20001978 	.word	0x20001978
 800f5dc:	200008d0 	.word	0x200008d0
 800f5e0:	08020714 	.word	0x08020714
 800f5e4:	20000c68 	.word	0x20000c68
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	f005 f8c5 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d003      	beq.n	800f5fc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	2007      	movs	r0, #7
 800f5f8:	f005 f832 	bl	8014660 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f5fc:	4ab9      	ldr	r2, [pc, #740]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f5fe:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f602:	f043 0308 	orr.w	r3, r3, #8
 800f606:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800f60a:	e2ec      	b.n	800fbe6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f60c:	4bb5      	ldr	r3, [pc, #724]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f614:	4bb4      	ldr	r3, [pc, #720]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f616:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f61a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f61e:	4bb1      	ldr	r3, [pc, #708]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f620:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800f624:	b25b      	sxtb	r3, r3
 800f626:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f62a:	230d      	movs	r3, #13
 800f62c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f630:	4bad      	ldr	r3, [pc, #692]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f632:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f636:	2b00      	cmp	r3, #0
 800f638:	d002      	beq.n	800f640 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f63a:	230e      	movs	r3, #14
 800f63c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f640:	4ba9      	ldr	r3, [pc, #676]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f646:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800f64a:	4611      	mov	r1, r2
 800f64c:	4618      	mov	r0, r3
 800f64e:	f006 fae1 	bl	8015c14 <RegionGetPhyParam>
 800f652:	4603      	mov	r3, r0
 800f654:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f656:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f65a:	3b0d      	subs	r3, #13
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	b21b      	sxth	r3, r3
 800f660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f664:	b21a      	sxth	r2, r3
 800f666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f668:	b21b      	sxth	r3, r3
 800f66a:	429a      	cmp	r2, r3
 800f66c:	dc03      	bgt.n	800f676 <ProcessRadioRxDone+0x3aa>
 800f66e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f672:	2b0b      	cmp	r3, #11
 800f674:	d806      	bhi.n	800f684 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f676:	4b9b      	ldr	r3, [pc, #620]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f678:	2201      	movs	r2, #1
 800f67a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f67e:	f7ff fdff 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f682:	e2d5      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800f684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f688:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800f68a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f694:	4b95      	ldr	r3, [pc, #596]	@ (800f8ec <ProcessRadioRxDone+0x620>)
 800f696:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f698:	23ff      	movs	r3, #255	@ 0xff
 800f69a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f69e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f006 f83d 	bl	8015722 <LoRaMacParserData>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d006      	beq.n	800f6bc <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6ae:	4b8d      	ldr	r3, [pc, #564]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f6b6:	f7ff fde3 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f6ba:	e2b9      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f6bc:	4b8a      	ldr	r3, [pc, #552]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f6be:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d132      	bne.n	800f72c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f6c6:	f004 fb70 	bl	8013daa <LoRaMacClassBIsPingExpected>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d014      	beq.n	800f6fa <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f004 fb21 	bl	8013d18 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	f004 fb42 	bl	8013d60 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f6dc:	4b81      	ldr	r3, [pc, #516]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f6de:	2204      	movs	r2, #4
 800f6e0:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f6e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f6ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	4610      	mov	r0, r2
 800f6f4:	f004 fbe2 	bl	8013ebc <LoRaMacClassBSetFPendingBit>
 800f6f8:	e018      	b.n	800f72c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f6fa:	f004 fb5d 	bl	8013db8 <LoRaMacClassBIsMulticastExpected>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d013      	beq.n	800f72c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f704:	2000      	movs	r0, #0
 800f706:	f004 fb11 	bl	8013d2c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f70a:	2000      	movs	r0, #0
 800f70c:	f004 fb31 	bl	8013d72 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f710:	4b74      	ldr	r3, [pc, #464]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f712:	2205      	movs	r2, #5
 800f714:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f71a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f71e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f722:	b2db      	uxtb	r3, r3
 800f724:	4619      	mov	r1, r3
 800f726:	4610      	mov	r0, r2
 800f728:	f004 fbc8 	bl	8013ebc <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f72e:	4a6d      	ldr	r2, [pc, #436]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f730:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f734:	1dba      	adds	r2, r7, #6
 800f736:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f002 fd1f 	bl	8012180 <DetermineFrameType>
 800f742:	4603      	mov	r3, r0
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f748:	4b66      	ldr	r3, [pc, #408]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f750:	f7ff fd96 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f754:	e26c      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800f75c:	2300      	movs	r3, #0
 800f75e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f760:	2300      	movs	r3, #0
 800f762:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800f766:	e049      	b.n	800f7fc <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f768:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f76c:	4a5e      	ldr	r2, [pc, #376]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f76e:	212c      	movs	r1, #44	@ 0x2c
 800f770:	fb01 f303 	mul.w	r3, r1, r3
 800f774:	4413      	add	r3, r2
 800f776:	33dc      	adds	r3, #220	@ 0xdc
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d138      	bne.n	800f7f2 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f780:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f784:	4a58      	ldr	r2, [pc, #352]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f786:	212c      	movs	r1, #44	@ 0x2c
 800f788:	fb01 f303 	mul.w	r3, r1, r3
 800f78c:	4413      	add	r3, r2
 800f78e:	33da      	adds	r3, #218	@ 0xda
 800f790:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f792:	2b00      	cmp	r3, #0
 800f794:	d02d      	beq.n	800f7f2 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800f796:	2301      	movs	r3, #1
 800f798:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f79c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f7a0:	4a51      	ldr	r2, [pc, #324]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f7a2:	212c      	movs	r1, #44	@ 0x2c
 800f7a4:	fb01 f303 	mul.w	r3, r1, r3
 800f7a8:	4413      	add	r3, r2
 800f7aa:	33db      	adds	r3, #219	@ 0xdb
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f7b2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f7b6:	4a4c      	ldr	r2, [pc, #304]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f7b8:	212c      	movs	r1, #44	@ 0x2c
 800f7ba:	fb01 f303 	mul.w	r3, r1, r3
 800f7be:	4413      	add	r3, r2
 800f7c0:	33f8      	adds	r3, #248	@ 0xf8
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f7c8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f7cc:	4a46      	ldr	r2, [pc, #280]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f7ce:	212c      	movs	r1, #44	@ 0x2c
 800f7d0:	fb01 f303 	mul.w	r3, r1, r3
 800f7d4:	4413      	add	r3, r2
 800f7d6:	33dc      	adds	r3, #220	@ 0xdc
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f7de:	4b42      	ldr	r3, [pc, #264]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f7e0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d10e      	bne.n	800f806 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f7ea:	2203      	movs	r2, #3
 800f7ec:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800f7f0:	e009      	b.n	800f806 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f7f2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800f7fc:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f800:	2b00      	cmp	r3, #0
 800f802:	d0b1      	beq.n	800f768 <ProcessRadioRxDone+0x49c>
 800f804:	e000      	b.n	800f808 <ProcessRadioRxDone+0x53c>
                    break;
 800f806:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f808:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d117      	bne.n	800f840 <ProcessRadioRxDone+0x574>
 800f810:	79bb      	ldrb	r3, [r7, #6]
 800f812:	2b03      	cmp	r3, #3
 800f814:	d10d      	bne.n	800f832 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f816:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f81a:	f003 0320 	and.w	r3, r3, #32
 800f81e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f820:	2b00      	cmp	r3, #0
 800f822:	d106      	bne.n	800f832 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f824:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f82c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d006      	beq.n	800f840 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f832:	4b2c      	ldr	r3, [pc, #176]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f834:	2201      	movs	r2, #1
 800f836:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f83a:	f7ff fd21 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f83e:	e1f7      	b.n	800fc30 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f840:	79b9      	ldrb	r1, [r7, #6]
 800f842:	4c29      	ldr	r4, [pc, #164]	@ (800f8e8 <ProcessRadioRxDone+0x61c>)
 800f844:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f848:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f84c:	f107 0308 	add.w	r3, r7, #8
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	1dfb      	adds	r3, r7, #7
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800f85a:	f000 fee7 	bl	801062c <GetFCntDown>
 800f85e:	4603      	mov	r3, r0
 800f860:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f864:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d017      	beq.n	800f89c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f86c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f870:	2b07      	cmp	r3, #7
 800f872:	d104      	bne.n	800f87e <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f874:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f876:	2208      	movs	r2, #8
 800f878:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f87c:	e003      	b.n	800f886 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f87e:	4b19      	ldr	r3, [pc, #100]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	4a16      	ldr	r2, [pc, #88]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f88a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	4a14      	ldr	r2, [pc, #80]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f892:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800f896:	f7ff fcf3 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f89a:	e1c9      	b.n	800fc30 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f89c:	79fa      	ldrb	r2, [r7, #7]
 800f89e:	68b9      	ldr	r1, [r7, #8]
 800f8a0:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f8a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800f8b0:	f005 fd86 	bl	80153c0 <LoRaMacCryptoUnsecureMessage>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f8ba:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d016      	beq.n	800f8f0 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f8c2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d104      	bne.n	800f8d4 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f8ca:	4b06      	ldr	r3, [pc, #24]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f8cc:	220a      	movs	r2, #10
 800f8ce:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f8d2:	e003      	b.n	800f8dc <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f8d4:	4b03      	ldr	r3, [pc, #12]	@ (800f8e4 <ProcessRadioRxDone+0x618>)
 800f8d6:	220b      	movs	r2, #11
 800f8d8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800f8dc:	f7ff fcd0 	bl	800f280 <PrepareRxDoneAbort>
                return;
 800f8e0:	e1a6      	b.n	800fc30 <ProcessRadioRxDone+0x964>
 800f8e2:	bf00      	nop
 800f8e4:	200008d0 	.word	0x200008d0
 800f8e8:	20000df0 	.word	0x20000df0
 800f8ec:	20000b08 	.word	0x20000b08
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f8f0:	4bb5      	ldr	r3, [pc, #724]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800f8f8:	4ab3      	ldr	r2, [pc, #716]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f8fa:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f8fe:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f902:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f906:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	461a      	mov	r2, r3
 800f90e:	4bae      	ldr	r3, [pc, #696]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f910:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800f914:	4bac      	ldr	r3, [pc, #688]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f916:	2200      	movs	r2, #0
 800f918:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800f91c:	4baa      	ldr	r3, [pc, #680]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	4aa8      	ldr	r2, [pc, #672]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f928:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	4aa6      	ldr	r2, [pc, #664]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f930:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f934:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f938:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	bf14      	ite	ne
 800f942:	2301      	movne	r3, #1
 800f944:	2300      	moveq	r3, #0
 800f946:	b2da      	uxtb	r2, r3
 800f948:	4b9f      	ldr	r3, [pc, #636]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f94a:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f94e:	4b9e      	ldr	r3, [pc, #632]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f956:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f95a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	bf14      	ite	ne
 800f964:	2301      	movne	r3, #1
 800f966:	2300      	moveq	r3, #0
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	4b97      	ldr	r3, [pc, #604]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f96c:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f970:	4b95      	ldr	r3, [pc, #596]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f972:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f976:	2b00      	cmp	r3, #0
 800f978:	d004      	beq.n	800f984 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f97a:	4b93      	ldr	r3, [pc, #588]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f97c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f980:	2b01      	cmp	r3, #1
 800f982:	d106      	bne.n	800f992 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f984:	4b91      	ldr	r3, [pc, #580]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f986:	2200      	movs	r2, #0
 800f988:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f98a:	4b90      	ldr	r3, [pc, #576]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f992:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f996:	2b01      	cmp	r3, #1
 800f998:	d104      	bne.n	800f9a4 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f99a:	4b8b      	ldr	r3, [pc, #556]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f99c:	2202      	movs	r2, #2
 800f99e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800f9a2:	e034      	b.n	800fa0e <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f9a4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f9a8:	f023 031f 	bic.w	r3, r3, #31
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	2ba0      	cmp	r3, #160	@ 0xa0
 800f9b0:	d125      	bne.n	800f9fe <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f9b2:	4b86      	ldr	r3, [pc, #536]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f9ba:	4b84      	ldr	r3, [pc, #528]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f9bc:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d102      	bne.n	800f9ca <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9c6:	4a81      	ldr	r2, [pc, #516]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f9c8:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f9ca:	4b7f      	ldr	r3, [pc, #508]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f9d2:	4b7d      	ldr	r3, [pc, #500]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f9d4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d018      	beq.n	800fa0e <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f9dc:	4b7a      	ldr	r3, [pc, #488]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f9de:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d013      	beq.n	800fa0e <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f9e6:	4b79      	ldr	r3, [pc, #484]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800f9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9ec:	4a76      	ldr	r2, [pc, #472]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f9ee:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f9f2:	4b77      	ldr	r3, [pc, #476]	@ (800fbd0 <ProcessRadioRxDone+0x904>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4a74      	ldr	r2, [pc, #464]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800f9f8:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800f9fc:	e007      	b.n	800fa0e <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f9fe:	4b73      	ldr	r3, [pc, #460]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fa06:	4b70      	ldr	r3, [pc, #448]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fa0e:	4b6e      	ldr	r3, [pc, #440]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa10:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800fa14:	4a6c      	ldr	r2, [pc, #432]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa16:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800fa1a:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f001 ff96 	bl	8011950 <RemoveMacCommands>

            switch( fType )
 800fa24:	79bb      	ldrb	r3, [r7, #6]
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	d873      	bhi.n	800fb12 <ProcessRadioRxDone+0x846>
 800fa2a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa30 <ProcessRadioRxDone+0x764>)
 800fa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa30:	0800fa41 	.word	0x0800fa41
 800fa34:	0800fa91 	.word	0x0800fa91
 800fa38:	0800fac7 	.word	0x0800fac7
 800fa3c:	0800faed 	.word	0x0800faed
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fa40:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800fa44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	461c      	mov	r4, r3
 800fa4c:	4b5e      	ldr	r3, [pc, #376]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa4e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800fa52:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800fa56:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fa5a:	f102 0010 	add.w	r0, r2, #16
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	460b      	mov	r3, r1
 800fa62:	4622      	mov	r2, r4
 800fa64:	2100      	movs	r1, #0
 800fa66:	f000 ff45 	bl	80108f4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa6a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fa6e:	4b56      	ldr	r3, [pc, #344]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa70:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fa74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa76:	4a54      	ldr	r2, [pc, #336]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa78:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fa7c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fa80:	4b51      	ldr	r3, [pc, #324]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa82:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800fa86:	4b50      	ldr	r3, [pc, #320]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800fa8e:	e047      	b.n	800fb20 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fa90:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800fa94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	461c      	mov	r4, r3
 800fa9c:	4b4a      	ldr	r3, [pc, #296]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fa9e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800faa2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800faa6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800faaa:	f102 0010 	add.w	r0, r2, #16
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	460b      	mov	r3, r1
 800fab2:	4622      	mov	r2, r4
 800fab4:	2100      	movs	r1, #0
 800fab6:	f000 ff1d 	bl	80108f4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faba:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fabe:	4b42      	ldr	r3, [pc, #264]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fac0:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800fac4:	e02c      	b.n	800fb20 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fac6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fac8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800facc:	4b3e      	ldr	r3, [pc, #248]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800face:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800fad2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	460b      	mov	r3, r1
 800fada:	2100      	movs	r1, #0
 800fadc:	f000 ff0a 	bl	80108f4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fae0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fae4:	4b38      	ldr	r3, [pc, #224]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fae6:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800faea:	e019      	b.n	800fb20 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faec:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800faf0:	4b35      	ldr	r3, [pc, #212]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800faf2:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800faf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faf8:	4a33      	ldr	r2, [pc, #204]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fafa:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fafe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fb02:	4b31      	ldr	r3, [pc, #196]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb04:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800fb08:	4b2f      	ldr	r3, [pc, #188]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800fb10:	e006      	b.n	800fb20 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb12:	4b2d      	ldr	r3, [pc, #180]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800fb1a:	f7ff fbb1 	bl	800f280 <PrepareRxDoneAbort>
                    break;
 800fb1e:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800fb20:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fb24:	2be0      	cmp	r3, #224	@ 0xe0
 800fb26:	d118      	bne.n	800fb5a <ProcessRadioRxDone+0x88e>
 800fb28:	4b28      	ldr	r3, [pc, #160]	@ (800fbcc <ProcessRadioRxDone+0x900>)
 800fb2a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800fb2e:	f083 0301 	eor.w	r3, r3, #1
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d010      	beq.n	800fb5a <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb38:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fb3c:	4b22      	ldr	r3, [pc, #136]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb3e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800fb42:	4b21      	ldr	r3, [pc, #132]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800fb4a:	4b1f      	ldr	r3, [pc, #124]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800fb52:	4b1d      	ldr	r3, [pc, #116]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb5a:	4a1b      	ldr	r2, [pc, #108]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb5c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fb60:	f043 0302 	orr.w	r3, r3, #2
 800fb64:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800fb68:	e03d      	b.n	800fbe6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fb6a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800fb6e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fb72:	18d1      	adds	r1, r2, r3
 800fb74:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	461a      	mov	r2, r3
 800fb84:	4813      	ldr	r0, [pc, #76]	@ (800fbd4 <ProcessRadioRxDone+0x908>)
 800fb86:	f008 fae6 	bl	8018156 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fb8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb8c:	2203      	movs	r2, #3
 800fb8e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb92:	4b0d      	ldr	r3, [pc, #52]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fb9c:	4a0d      	ldr	r2, [pc, #52]	@ (800fbd4 <ProcessRadioRxDone+0x908>)
 800fb9e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fba2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	4b05      	ldr	r3, [pc, #20]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fbb2:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fbb6:	4a04      	ldr	r2, [pc, #16]	@ (800fbc8 <ProcessRadioRxDone+0x8fc>)
 800fbb8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fbbc:	f043 0302 	orr.w	r3, r3, #2
 800fbc0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800fbc4:	e00f      	b.n	800fbe6 <ProcessRadioRxDone+0x91a>
 800fbc6:	bf00      	nop
 800fbc8:	200008d0 	.word	0x200008d0
 800fbcc:	20000df0 	.word	0x20000df0
 800fbd0:	20001980 	.word	0x20001980
 800fbd4:	20000b08 	.word	0x20000b08
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbd8:	4b17      	ldr	r3, [pc, #92]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800fbe0:	f7ff fb4e 	bl	800f280 <PrepareRxDoneAbort>
            break;
 800fbe4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fbe6:	4b14      	ldr	r3, [pc, #80]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fbe8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d004      	beq.n	800fbfa <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800fbf0:	4b11      	ldr	r3, [pc, #68]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fbf2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d10c      	bne.n	800fc14 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fbfc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d007      	beq.n	800fc14 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800fc04:	4b0c      	ldr	r3, [pc, #48]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fc06:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d002      	beq.n	800fc14 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800fc0e:	2000      	movs	r0, #0
 800fc10:	f000 fce4 	bl	80105dc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800fc14:	4b08      	ldr	r3, [pc, #32]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fc16:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d006      	beq.n	800fc2c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fc1e:	4a06      	ldr	r2, [pc, #24]	@ (800fc38 <ProcessRadioRxDone+0x96c>)
 800fc20:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc24:	f043 0320 	orr.w	r3, r3, #32
 800fc28:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fc2c:	f7ff fa82 	bl	800f134 <UpdateRxSlotIdleState>
}
 800fc30:	3794      	adds	r7, #148	@ 0x94
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd90      	pop	{r4, r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200008d0 	.word	0x200008d0

0800fc3c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc40:	4b11      	ldr	r3, [pc, #68]	@ (800fc88 <ProcessRadioTxTimeout+0x4c>)
 800fc42:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d002      	beq.n	800fc50 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fc4a:	4b10      	ldr	r3, [pc, #64]	@ (800fc8c <ProcessRadioTxTimeout+0x50>)
 800fc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fc50:	f7ff fa70 	bl	800f134 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fc54:	4b0e      	ldr	r3, [pc, #56]	@ (800fc90 <ProcessRadioTxTimeout+0x54>)
 800fc56:	2202      	movs	r2, #2
 800fc58:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fc5c:	2002      	movs	r0, #2
 800fc5e:	f004 fd57 	bl	8014710 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fc62:	4b0b      	ldr	r3, [pc, #44]	@ (800fc90 <ProcessRadioTxTimeout+0x54>)
 800fc64:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d003      	beq.n	800fc74 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800fc6c:	4b08      	ldr	r3, [pc, #32]	@ (800fc90 <ProcessRadioTxTimeout+0x54>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fc74:	4a06      	ldr	r2, [pc, #24]	@ (800fc90 <ProcessRadioTxTimeout+0x54>)
 800fc76:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc7a:	f043 0320 	orr.w	r3, r3, #32
 800fc7e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800fc82:	bf00      	nop
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	20000df0 	.word	0x20000df0
 800fc8c:	08020714 	.word	0x08020714
 800fc90:	200008d0 	.word	0x200008d0

0800fc94 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	460a      	mov	r2, r1
 800fc9e:	71fb      	strb	r3, [r7, #7]
 800fca0:	4613      	mov	r3, r2
 800fca2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fca4:	2300      	movs	r3, #0
 800fca6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fca8:	4b3d      	ldr	r3, [pc, #244]	@ (800fda0 <HandleRadioRxErrorTimeout+0x10c>)
 800fcaa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d002      	beq.n	800fcb8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fcb2:	4b3c      	ldr	r3, [pc, #240]	@ (800fda4 <HandleRadioRxErrorTimeout+0x110>)
 800fcb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fcb8:	f004 f870 	bl	8013d9c <LoRaMacClassBIsBeaconExpected>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d007      	beq.n	800fcd2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fcc2:	2002      	movs	r0, #2
 800fcc4:	f004 f81e 	bl	8013d04 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fcc8:	2000      	movs	r0, #0
 800fcca:	f004 f840 	bl	8013d4e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fcd2:	4b33      	ldr	r3, [pc, #204]	@ (800fda0 <HandleRadioRxErrorTimeout+0x10c>)
 800fcd4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d119      	bne.n	800fd10 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fcdc:	f004 f865 	bl	8013daa <LoRaMacClassBIsPingExpected>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d007      	beq.n	800fcf6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fce6:	2000      	movs	r0, #0
 800fce8:	f004 f816 	bl	8013d18 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fcec:	2000      	movs	r0, #0
 800fcee:	f004 f837 	bl	8013d60 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fcf6:	f004 f85f 	bl	8013db8 <LoRaMacClassBIsMulticastExpected>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d007      	beq.n	800fd10 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd00:	2000      	movs	r0, #0
 800fd02:	f004 f813 	bl	8013d2c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fd06:	2000      	movs	r0, #0
 800fd08:	f004 f833 	bl	8013d72 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
 800fd12:	f083 0301 	eor.w	r3, r3, #1
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d03b      	beq.n	800fd94 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fd1c:	4b22      	ldr	r3, [pc, #136]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d122      	bne.n	800fd6c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fd26:	4b20      	ldr	r3, [pc, #128]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd28:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d003      	beq.n	800fd38 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fd30:	4a1d      	ldr	r2, [pc, #116]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f004 fce8 	bl	8014710 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fd40:	4b17      	ldr	r3, [pc, #92]	@ (800fda0 <HandleRadioRxErrorTimeout+0x10c>)
 800fd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd44:	4618      	mov	r0, r3
 800fd46:	f00c fc77 	bl	801c638 <UTIL_TIMER_GetElapsedTime>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	4b16      	ldr	r3, [pc, #88]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd4e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d31e      	bcc.n	800fd94 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fd56:	4815      	ldr	r0, [pc, #84]	@ (800fdac <HandleRadioRxErrorTimeout+0x118>)
 800fd58:	f00c fb42 	bl	801c3e0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fd5c:	4a12      	ldr	r2, [pc, #72]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd5e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fd62:	f043 0320 	orr.w	r3, r3, #32
 800fd66:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800fd6a:	e013      	b.n	800fd94 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fd6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd6e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fd76:	4a0c      	ldr	r2, [pc, #48]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd78:	79bb      	ldrb	r3, [r7, #6]
 800fd7a:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fd7e:	79bb      	ldrb	r3, [r7, #6]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f004 fcc5 	bl	8014710 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800fd86:	4a08      	ldr	r2, [pc, #32]	@ (800fda8 <HandleRadioRxErrorTimeout+0x114>)
 800fd88:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fd8c:	f043 0320 	orr.w	r3, r3, #32
 800fd90:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fd94:	f7ff f9ce 	bl	800f134 <UpdateRxSlotIdleState>
}
 800fd98:	bf00      	nop
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20000df0 	.word	0x20000df0
 800fda4:	08020714 	.word	0x08020714
 800fda8:	200008d0 	.word	0x200008d0
 800fdac:	20000c68 	.word	0x20000c68

0800fdb0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fdb4:	2106      	movs	r1, #6
 800fdb6:	2005      	movs	r0, #5
 800fdb8:	f7ff ff6c 	bl	800fc94 <HandleRadioRxErrorTimeout>
}
 800fdbc:	bf00      	nop
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fdc4:	2104      	movs	r1, #4
 800fdc6:	2003      	movs	r0, #3
 800fdc8:	f7ff ff64 	bl	800fc94 <HandleRadioRxErrorTimeout>
}
 800fdcc:	bf00      	nop
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdd6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdda:	607b      	str	r3, [r7, #4]
  return(result);
 800fddc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fdde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fde0:	b672      	cpsid	i
}
 800fde2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800fde4:	4b1d      	ldr	r3, [pc, #116]	@ (800fe5c <LoRaMacHandleIrqEvents+0x8c>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fdea:	4b1c      	ldr	r3, [pc, #112]	@ (800fe5c <LoRaMacHandleIrqEvents+0x8c>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	f383 8810 	msr	PRIMASK, r3
}
 800fdfa:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d027      	beq.n	800fe52 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800fe02:	783b      	ldrb	r3, [r7, #0]
 800fe04:	f003 0320 	and.w	r3, r3, #32
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800fe0e:	f7ff f9a9 	bl	800f164 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fe12:	783b      	ldrb	r3, [r7, #0]
 800fe14:	f003 0310 	and.w	r3, r3, #16
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800fe1e:	f7ff fa55 	bl	800f2cc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fe22:	783b      	ldrb	r3, [r7, #0]
 800fe24:	f003 0308 	and.w	r3, r3, #8
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800fe2e:	f7ff ff05 	bl	800fc3c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fe32:	783b      	ldrb	r3, [r7, #0]
 800fe34:	f003 0304 	and.w	r3, r3, #4
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800fe3e:	f7ff ffb7 	bl	800fdb0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fe42:	783b      	ldrb	r3, [r7, #0]
 800fe44:	f003 0302 	and.w	r3, r3, #2
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d001      	beq.n	800fe52 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800fe4e:	f7ff ffb7 	bl	800fdc0 <ProcessRadioRxTimeout>
        }
    }
}
 800fe52:	bf00      	nop
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	20001978 	.word	0x20001978

0800fe60 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800fe60:	b480      	push	{r7}
 800fe62:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800fe64:	4b0c      	ldr	r3, [pc, #48]	@ (800fe98 <LoRaMacIsBusy+0x38>)
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <LoRaMacIsBusy+0x16>
    {
        return true;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e00c      	b.n	800fe90 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fe76:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <LoRaMacIsBusy+0x3c>)
 800fe78:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d106      	bne.n	800fe8e <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fe80:	4b06      	ldr	r3, [pc, #24]	@ (800fe9c <LoRaMacIsBusy+0x3c>)
 800fe82:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d101      	bne.n	800fe8e <LoRaMacIsBusy+0x2e>
    {
        return false;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e000      	b.n	800fe90 <LoRaMacIsBusy+0x30>
    }
    return true;
 800fe8e:	2301      	movs	r3, #1
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bc80      	pop	{r7}
 800fe96:	4770      	bx	lr
 800fe98:	20001978 	.word	0x20001978
 800fe9c:	200008d0 	.word	0x200008d0

0800fea0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	4603      	mov	r3, r0
 800fea8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800feaa:	4a04      	ldr	r2, [pc, #16]	@ (800febc <LoRaMacEnableRequests+0x1c>)
 800feac:	79fb      	ldrb	r3, [r7, #7]
 800feae:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800feb2:	bf00      	nop
 800feb4:	370c      	adds	r7, #12
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bc80      	pop	{r7}
 800feba:	4770      	bx	lr
 800febc:	200008d0 	.word	0x200008d0

0800fec0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800fec6:	4b2c      	ldr	r3, [pc, #176]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800fec8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fecc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800fece:	4b2a      	ldr	r3, [pc, #168]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800fed0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d14a      	bne.n	800ff6e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fed8:	4b27      	ldr	r3, [pc, #156]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800feda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d006      	beq.n	800fef6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800fee8:	4a23      	ldr	r2, [pc, #140]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800feea:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800feee:	f36f 0300 	bfc	r3, #0, #1
 800fef2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fef6:	4b20      	ldr	r3, [pc, #128]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800fef8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fefc:	f003 0304 	and.w	r3, r3, #4
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d006      	beq.n	800ff14 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff06:	4a1c      	ldr	r2, [pc, #112]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800ff08:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ff0c:	f36f 0382 	bfc	r3, #2, #1
 800ff10:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ff14:	2001      	movs	r0, #1
 800ff16:	f7ff ffc3 	bl	800fea0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ff1a:	793b      	ldrb	r3, [r7, #4]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d005      	beq.n	800ff32 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ff26:	4b14      	ldr	r3, [pc, #80]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800ff28:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4813      	ldr	r0, [pc, #76]	@ (800ff7c <LoRaMacHandleRequestEvents+0xbc>)
 800ff30:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ff32:	793b      	ldrb	r3, [r7, #4]
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00e      	beq.n	800ff5c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ff3e:	4810      	ldr	r0, [pc, #64]	@ (800ff80 <LoRaMacHandleRequestEvents+0xc0>)
 800ff40:	f004 fc34 	bl	80147ac <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ff44:	f004 fc7e 	bl	8014844 <LoRaMacConfirmQueueGetCnt>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d006      	beq.n	800ff5c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ff4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800ff50:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ff54:	f043 0304 	orr.w	r3, r3, #4
 800ff58:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ff5c:	f003 ff4a 	bl	8013df4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ff60:	4a05      	ldr	r2, [pc, #20]	@ (800ff78 <LoRaMacHandleRequestEvents+0xb8>)
 800ff62:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ff66:	f36f 1345 	bfc	r3, #5, #1
 800ff6a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800ff6e:	bf00      	nop
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	200008d0 	.word	0x200008d0
 800ff7c:	20000d14 	.word	0x20000d14
 800ff80:	20000d28 	.word	0x20000d28

0800ff84 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ff8a:	4b07      	ldr	r3, [pc, #28]	@ (800ffa8 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800ff8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d105      	bne.n	800ffa0 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ff94:	2300      	movs	r3, #0
 800ff96:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ff98:	1dfb      	adds	r3, r7, #7
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f004 f9ec 	bl	8014378 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800ffa0:	bf00      	nop
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	200008d0 	.word	0x200008d0

0800ffac <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ffb0:	4b16      	ldr	r3, [pc, #88]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800ffb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ffb6:	f003 0308 	and.w	r3, r3, #8
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00d      	beq.n	800ffdc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ffc0:	4a12      	ldr	r2, [pc, #72]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800ffc2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ffc6:	f36f 03c3 	bfc	r3, #3, #1
 800ffca:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ffce:	4b0f      	ldr	r3, [pc, #60]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800ffd0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	490e      	ldr	r1, [pc, #56]	@ (8010010 <LoRaMacHandleIndicationEvents+0x64>)
 800ffd8:	480e      	ldr	r0, [pc, #56]	@ (8010014 <LoRaMacHandleIndicationEvents+0x68>)
 800ffda:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ffdc:	4b0b      	ldr	r3, [pc, #44]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800ffde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ffe2:	f003 0302 	and.w	r3, r3, #2
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00d      	beq.n	8010008 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ffec:	4a07      	ldr	r2, [pc, #28]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800ffee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fff2:	f36f 0341 	bfc	r3, #1, #1
 800fff6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800fffa:	4b04      	ldr	r3, [pc, #16]	@ (801000c <LoRaMacHandleIndicationEvents+0x60>)
 800fffc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	4903      	ldr	r1, [pc, #12]	@ (8010010 <LoRaMacHandleIndicationEvents+0x64>)
 8010004:	4804      	ldr	r0, [pc, #16]	@ (8010018 <LoRaMacHandleIndicationEvents+0x6c>)
 8010006:	4798      	blx	r3
    }
}
 8010008:	bf00      	nop
 801000a:	bd80      	pop	{r7, pc}
 801000c:	200008d0 	.word	0x200008d0
 8010010:	20000d60 	.word	0x20000d60
 8010014:	20000d3c 	.word	0x20000d3c
 8010018:	20000cf4 	.word	0x20000cf4

0801001c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010022:	4b2a      	ldr	r3, [pc, #168]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 8010024:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d048      	beq.n	80100c4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010032:	2300      	movs	r3, #0
 8010034:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010036:	2300      	movs	r3, #0
 8010038:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801003a:	4b24      	ldr	r3, [pc, #144]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 801003c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8010040:	2b00      	cmp	r3, #0
 8010042:	d004      	beq.n	801004e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010044:	4b21      	ldr	r3, [pc, #132]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 8010046:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801004a:	2b03      	cmp	r3, #3
 801004c:	d104      	bne.n	8010058 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801004e:	f002 f8f9 	bl	8012244 <CheckRetransUnconfirmedUplink>
 8010052:	4603      	mov	r3, r0
 8010054:	71fb      	strb	r3, [r7, #7]
 8010056:	e010      	b.n	801007a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010058:	4b1c      	ldr	r3, [pc, #112]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 801005a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 801005e:	2b01      	cmp	r3, #1
 8010060:	d10b      	bne.n	801007a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010062:	4b1a      	ldr	r3, [pc, #104]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 8010064:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8010068:	2b00      	cmp	r3, #0
 801006a:	d004      	beq.n	8010076 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801006c:	f002 f916 	bl	801229c <CheckRetransConfirmedUplink>
 8010070:	4603      	mov	r3, r0
 8010072:	71fb      	strb	r3, [r7, #7]
 8010074:	e001      	b.n	801007a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010076:	2301      	movs	r3, #1
 8010078:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00d      	beq.n	801009c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010080:	4813      	ldr	r0, [pc, #76]	@ (80100d0 <LoRaMacHandleMcpsRequest+0xb4>)
 8010082:	f00c f9ad 	bl	801c3e0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010086:	4b11      	ldr	r3, [pc, #68]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 8010088:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801008c:	f023 0320 	bic.w	r3, r3, #32
 8010090:	4a0e      	ldr	r2, [pc, #56]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 8010092:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 8010096:	f002 f93b 	bl	8012310 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801009a:	e013      	b.n	80100c4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 801009c:	79bb      	ldrb	r3, [r7, #6]
 801009e:	f083 0301 	eor.w	r3, r3, #1
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00d      	beq.n	80100c4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80100a8:	4a08      	ldr	r2, [pc, #32]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 80100aa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80100ae:	f36f 1345 	bfc	r3, #5, #1
 80100b2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 80100b6:	4b05      	ldr	r3, [pc, #20]	@ (80100cc <LoRaMacHandleMcpsRequest+0xb0>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 80100be:	2000      	movs	r0, #0
 80100c0:	f000 f9c8 	bl	8010454 <OnTxDelayedTimerEvent>
}
 80100c4:	bf00      	nop
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	200008d0 	.word	0x200008d0
 80100d0:	20000c38 	.word	0x20000c38

080100d4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80100d8:	4b18      	ldr	r3, [pc, #96]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 80100da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80100de:	f003 0304 	and.w	r3, r3, #4
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d026      	beq.n	8010136 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80100e8:	2001      	movs	r0, #1
 80100ea:	f004 fb45 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d012      	beq.n	801011a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80100f4:	2001      	movs	r0, #1
 80100f6:	f004 fae1 	bl	80146bc <LoRaMacConfirmQueueGetStatus>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d103      	bne.n	8010108 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010100:	4b0e      	ldr	r3, [pc, #56]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 8010102:	2200      	movs	r2, #0
 8010104:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010108:	4b0c      	ldr	r3, [pc, #48]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 801010a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801010e:	f023 0302 	bic.w	r3, r3, #2
 8010112:	4a0a      	ldr	r2, [pc, #40]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 8010114:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010118:	e00d      	b.n	8010136 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801011a:	2005      	movs	r0, #5
 801011c:	f004 fb2c 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d007      	beq.n	8010136 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010126:	4b05      	ldr	r3, [pc, #20]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 8010128:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801012c:	f023 0302 	bic.w	r3, r3, #2
 8010130:	4a02      	ldr	r2, [pc, #8]	@ (801013c <LoRaMacHandleMlmeRequest+0x68>)
 8010132:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010136:	bf00      	nop
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	200008d0 	.word	0x200008d0

08010140 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010144:	200b      	movs	r0, #11
 8010146:	f004 fb17 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d019      	beq.n	8010184 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010150:	4b0e      	ldr	r3, [pc, #56]	@ (801018c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010152:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801015c:	2b00      	cmp	r3, #0
 801015e:	d111      	bne.n	8010184 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010160:	4b0a      	ldr	r3, [pc, #40]	@ (801018c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010162:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010166:	f003 0304 	and.w	r3, r3, #4
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d009      	beq.n	8010184 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010170:	4b06      	ldr	r3, [pc, #24]	@ (801018c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010172:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010176:	f023 0302 	bic.w	r3, r3, #2
 801017a:	4a04      	ldr	r2, [pc, #16]	@ (801018c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801017c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8010180:	2301      	movs	r3, #1
 8010182:	e000      	b.n	8010186 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	200008d0 	.word	0x200008d0

08010190 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	71fb      	strb	r3, [r7, #7]
 801019a:	460b      	mov	r3, r1
 801019c:	71bb      	strb	r3, [r7, #6]
 801019e:	4613      	mov	r3, r2
 80101a0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80101a2:	79fb      	ldrb	r3, [r7, #7]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00a      	beq.n	80101be <CheckForMinimumAbpDatarate+0x2e>
 80101a8:	79bb      	ldrb	r3, [r7, #6]
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d107      	bne.n	80101be <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80101ae:	797b      	ldrb	r3, [r7, #5]
 80101b0:	f083 0301 	eor.w	r3, r3, #1
 80101b4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bc80      	pop	{r7}
 80101c8:	4770      	bx	lr
	...

080101cc <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80101cc:	b480      	push	{r7}
 80101ce:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80101d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010208 <LoRaMacCheckForRxAbort+0x3c>)
 80101d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00f      	beq.n	80101fe <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80101de:	4b0a      	ldr	r3, [pc, #40]	@ (8010208 <LoRaMacCheckForRxAbort+0x3c>)
 80101e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101e8:	4a07      	ldr	r2, [pc, #28]	@ (8010208 <LoRaMacCheckForRxAbort+0x3c>)
 80101ea:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80101ee:	4b06      	ldr	r3, [pc, #24]	@ (8010208 <LoRaMacCheckForRxAbort+0x3c>)
 80101f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80101f4:	f023 0302 	bic.w	r3, r3, #2
 80101f8:	4a03      	ldr	r2, [pc, #12]	@ (8010208 <LoRaMacCheckForRxAbort+0x3c>)
 80101fa:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 80101fe:	bf00      	nop
 8010200:	46bd      	mov	sp, r7
 8010202:	bc80      	pop	{r7}
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop
 8010208:	200008d0 	.word	0x200008d0

0801020c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010214:	2300      	movs	r3, #0
 8010216:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010218:	2300      	movs	r3, #0
 801021a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801021c:	4b50      	ldr	r3, [pc, #320]	@ (8010360 <LoRaMacHandleNvm+0x154>)
 801021e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010222:	2b00      	cmp	r3, #0
 8010224:	f040 8098 	bne.w	8010358 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2124      	movs	r1, #36	@ 0x24
 801022c:	4618      	mov	r0, r3
 801022e:	f007 ffe7 	bl	8018200 <Crc32>
 8010232:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	429a      	cmp	r2, r3
 801023c:	d006      	beq.n	801024c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010244:	89fb      	ldrh	r3, [r7, #14]
 8010246:	f043 0301 	orr.w	r3, r3, #1
 801024a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	3328      	adds	r3, #40	@ 0x28
 8010250:	2114      	movs	r1, #20
 8010252:	4618      	mov	r0, r3
 8010254:	f007 ffd4 	bl	8018200 <Crc32>
 8010258:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	429a      	cmp	r2, r3
 8010262:	d006      	beq.n	8010272 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801026a:	89fb      	ldrh	r3, [r7, #14]
 801026c:	f043 0302 	orr.w	r3, r3, #2
 8010270:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3340      	adds	r3, #64	@ 0x40
 8010276:	21e0      	movs	r1, #224	@ 0xe0
 8010278:	4618      	mov	r0, r3
 801027a:	f007 ffc1 	bl	8018200 <Crc32>
 801027e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	429a      	cmp	r2, r3
 801028a:	d007      	beq.n	801029c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010294:	89fb      	ldrh	r3, [r7, #14]
 8010296:	f043 0304 	orr.w	r3, r3, #4
 801029a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80102a2:	21bc      	movs	r1, #188	@ 0xbc
 80102a4:	4618      	mov	r0, r3
 80102a6:	f007 ffab 	bl	8018200 <Crc32>
 80102aa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d007      	beq.n	80102c8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68ba      	ldr	r2, [r7, #8]
 80102bc:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80102c0:	89fb      	ldrh	r3, [r7, #14]
 80102c2:	f043 0308 	orr.w	r3, r3, #8
 80102c6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80102ce:	2100      	movs	r1, #0
 80102d0:	4618      	mov	r0, r3
 80102d2:	f007 ff95 	bl	8018200 <Crc32>
 80102d6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d007      	beq.n	80102f4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80102ec:	89fb      	ldrh	r3, [r7, #14]
 80102ee:	f043 0310 	orr.w	r3, r3, #16
 80102f2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80102fa:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80102fe:	4618      	mov	r0, r3
 8010300:	f007 ff7e 	bl	8018200 <Crc32>
 8010304:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 801030c:	68ba      	ldr	r2, [r7, #8]
 801030e:	429a      	cmp	r2, r3
 8010310:	d007      	beq.n	8010322 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801031a:	89fb      	ldrh	r3, [r7, #14]
 801031c:	f043 0320 	orr.w	r3, r3, #32
 8010320:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8010328:	2114      	movs	r1, #20
 801032a:	4618      	mov	r0, r3
 801032c:	f007 ff68 	bl	8018200 <Crc32>
 8010330:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	429a      	cmp	r2, r3
 801033c:	d007      	beq.n	801034e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010346:	89fb      	ldrh	r3, [r7, #14]
 8010348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801034c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801034e:	89fb      	ldrh	r3, [r7, #14]
 8010350:	4618      	mov	r0, r3
 8010352:	f002 f819 	bl	8012388 <CallNvmDataChangeCallback>
 8010356:	e000      	b.n	801035a <LoRaMacHandleNvm+0x14e>
        return;
 8010358:	bf00      	nop
}
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	200008d0 	.word	0x200008d0

08010364 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00d      	beq.n	8010390 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010374:	6838      	ldr	r0, [r7, #0]
 8010376:	f00c f95f 	bl	801c638 <UTIL_TIMER_GetElapsedTime>
 801037a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	429a      	cmp	r2, r3
 8010382:	d905      	bls.n	8010390 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010384:	4b05      	ldr	r3, [pc, #20]	@ (801039c <LoRaMacHandleResponseTimeout+0x38>)
 8010386:	2200      	movs	r2, #0
 8010388:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 801038c:	2301      	movs	r3, #1
 801038e:	e000      	b.n	8010392 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	20000df0 	.word	0x20000df0

080103a0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80103a6:	2300      	movs	r3, #0
 80103a8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80103aa:	f7ff fd11 	bl	800fdd0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80103ae:	f003 fd90 	bl	8013ed2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80103b2:	4b26      	ldr	r3, [pc, #152]	@ (801044c <LoRaMacProcess+0xac>)
 80103b4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80103b8:	f003 0320 	and.w	r3, r3, #32
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d025      	beq.n	801040e <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80103c2:	2000      	movs	r0, #0
 80103c4:	f7ff fd6c 	bl	800fea0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80103c8:	f7ff ff00 	bl	80101cc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80103cc:	f001 fffa 	bl	80123c4 <IsRequestPending>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d006      	beq.n	80103e4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80103d6:	f7ff feb3 	bl	8010140 <LoRaMacCheckForBeaconAcquisition>
 80103da:	4603      	mov	r3, r0
 80103dc:	461a      	mov	r2, r3
 80103de:	79fb      	ldrb	r3, [r7, #7]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80103e4:	79fb      	ldrb	r3, [r7, #7]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d103      	bne.n	80103f2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80103ea:	f7ff fe73 	bl	80100d4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80103ee:	f7ff fe15 	bl	801001c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80103f2:	f7ff fd65 	bl	800fec0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80103f6:	f7ff fdc5 	bl	800ff84 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80103fa:	2001      	movs	r0, #1
 80103fc:	f7ff fd50 	bl	800fea0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010400:	4a12      	ldr	r2, [pc, #72]	@ (801044c <LoRaMacProcess+0xac>)
 8010402:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8010406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801040a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 801040e:	f7ff fdcd 	bl	800ffac <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010412:	4b0e      	ldr	r3, [pc, #56]	@ (801044c <LoRaMacProcess+0xac>)
 8010414:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010418:	2b02      	cmp	r3, #2
 801041a:	d101      	bne.n	8010420 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 801041c:	f001 fbee 	bl	8011bfc <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010420:	4b0a      	ldr	r3, [pc, #40]	@ (801044c <LoRaMacProcess+0xac>)
 8010422:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801042a:	b2db      	uxtb	r3, r3
 801042c:	2b00      	cmp	r3, #0
 801042e:	d009      	beq.n	8010444 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010430:	4a06      	ldr	r2, [pc, #24]	@ (801044c <LoRaMacProcess+0xac>)
 8010432:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8010436:	f36f 1386 	bfc	r3, #6, #1
 801043a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 801043e:	4804      	ldr	r0, [pc, #16]	@ (8010450 <LoRaMacProcess+0xb0>)
 8010440:	f7ff fee4 	bl	801020c <LoRaMacHandleNvm>
    }
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	200008d0 	.word	0x200008d0
 8010450:	20000df0 	.word	0x20000df0

08010454 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801045c:	481e      	ldr	r0, [pc, #120]	@ (80104d8 <OnTxDelayedTimerEvent+0x84>)
 801045e:	f00b ffbf 	bl	801c3e0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010462:	4b1e      	ldr	r3, [pc, #120]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 8010464:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010468:	f023 0320 	bic.w	r3, r3, #32
 801046c:	4a1b      	ldr	r2, [pc, #108]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 801046e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010472:	4b1b      	ldr	r3, [pc, #108]	@ (80104e0 <OnTxDelayedTimerEvent+0x8c>)
 8010474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010478:	4a18      	ldr	r2, [pc, #96]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 801047a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff ff6f 	bl	8010364 <LoRaMacHandleResponseTimeout>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d11e      	bne.n	80104ca <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801048c:	2001      	movs	r0, #1
 801048e:	f001 f93b 	bl	8011708 <ScheduleTx>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d01a      	beq.n	80104ce <OnTxDelayedTimerEvent+0x7a>
 8010498:	2b0b      	cmp	r3, #11
 801049a:	d018      	beq.n	80104ce <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801049c:	4b10      	ldr	r3, [pc, #64]	@ (80104e0 <OnTxDelayedTimerEvent+0x8c>)
 801049e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80104a2:	b2da      	uxtb	r2, r3
 80104a4:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 80104a6:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80104aa:	4b0c      	ldr	r3, [pc, #48]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 80104ac:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80104b0:	4b0a      	ldr	r3, [pc, #40]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 80104b2:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80104b6:	4b09      	ldr	r3, [pc, #36]	@ (80104dc <OnTxDelayedTimerEvent+0x88>)
 80104b8:	2209      	movs	r2, #9
 80104ba:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80104be:	2009      	movs	r0, #9
 80104c0:	f004 f926 	bl	8014710 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80104c4:	f001 ff24 	bl	8012310 <StopRetransmission>
            break;
 80104c8:	e002      	b.n	80104d0 <OnTxDelayedTimerEvent+0x7c>
        return;
 80104ca:	bf00      	nop
 80104cc:	e000      	b.n	80104d0 <OnTxDelayedTimerEvent+0x7c>
            break;
 80104ce:	bf00      	nop
        }
    }
}
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20000c38 	.word	0x20000c38
 80104dc:	200008d0 	.word	0x200008d0
 80104e0:	20000df0 	.word	0x20000df0

080104e4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80104ec:	4b17      	ldr	r3, [pc, #92]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 80104ee:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80104f2:	4b16      	ldr	r3, [pc, #88]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 80104f4:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80104f8:	4b15      	ldr	r3, [pc, #84]	@ (8010550 <OnRxWindow1TimerEvent+0x6c>)
 80104fa:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80104fe:	b25a      	sxtb	r2, r3
 8010500:	4b12      	ldr	r3, [pc, #72]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 8010502:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010506:	4b12      	ldr	r3, [pc, #72]	@ (8010550 <OnRxWindow1TimerEvent+0x6c>)
 8010508:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 801050c:	4b0f      	ldr	r3, [pc, #60]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 801050e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010512:	4b0f      	ldr	r3, [pc, #60]	@ (8010550 <OnRxWindow1TimerEvent+0x6c>)
 8010514:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010518:	4b0c      	ldr	r3, [pc, #48]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 801051a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801051e:	4b0b      	ldr	r3, [pc, #44]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 8010520:	2200      	movs	r2, #0
 8010522:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010526:	4b09      	ldr	r3, [pc, #36]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 8010528:	2200      	movs	r2, #0
 801052a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801052e:	4b08      	ldr	r3, [pc, #32]	@ (8010550 <OnRxWindow1TimerEvent+0x6c>)
 8010530:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010534:	4b05      	ldr	r3, [pc, #20]	@ (801054c <OnRxWindow1TimerEvent+0x68>)
 8010536:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801053a:	4906      	ldr	r1, [pc, #24]	@ (8010554 <OnRxWindow1TimerEvent+0x70>)
 801053c:	4806      	ldr	r0, [pc, #24]	@ (8010558 <OnRxWindow1TimerEvent+0x74>)
 801053e:	f001 fb29 	bl	8011b94 <RxWindowSetup>
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	200008d0 	.word	0x200008d0
 8010550:	20000df0 	.word	0x20000df0
 8010554:	20000c88 	.word	0x20000c88
 8010558:	20000c50 	.word	0x20000c50

0801055c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010564:	4b19      	ldr	r3, [pc, #100]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 8010566:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801056a:	2b00      	cmp	r3, #0
 801056c:	d029      	beq.n	80105c2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801056e:	4b17      	ldr	r3, [pc, #92]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 8010570:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010574:	4b15      	ldr	r3, [pc, #84]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 8010576:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801057a:	4b15      	ldr	r3, [pc, #84]	@ (80105d0 <OnRxWindow2TimerEvent+0x74>)
 801057c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801057e:	4a13      	ldr	r2, [pc, #76]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 8010580:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010584:	4b12      	ldr	r3, [pc, #72]	@ (80105d0 <OnRxWindow2TimerEvent+0x74>)
 8010586:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 801058a:	4b10      	ldr	r3, [pc, #64]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 801058c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010590:	4b0f      	ldr	r3, [pc, #60]	@ (80105d0 <OnRxWindow2TimerEvent+0x74>)
 8010592:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010596:	4b0d      	ldr	r3, [pc, #52]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 8010598:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801059c:	4b0b      	ldr	r3, [pc, #44]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 801059e:	2200      	movs	r2, #0
 80105a0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80105a4:	4b09      	ldr	r3, [pc, #36]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80105ac:	4b08      	ldr	r3, [pc, #32]	@ (80105d0 <OnRxWindow2TimerEvent+0x74>)
 80105ae:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80105b2:	4b06      	ldr	r3, [pc, #24]	@ (80105cc <OnRxWindow2TimerEvent+0x70>)
 80105b4:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80105b8:	4906      	ldr	r1, [pc, #24]	@ (80105d4 <OnRxWindow2TimerEvent+0x78>)
 80105ba:	4807      	ldr	r0, [pc, #28]	@ (80105d8 <OnRxWindow2TimerEvent+0x7c>)
 80105bc:	f001 faea 	bl	8011b94 <RxWindowSetup>
 80105c0:	e000      	b.n	80105c4 <OnRxWindow2TimerEvent+0x68>
        return;
 80105c2:	bf00      	nop
}
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	200008d0 	.word	0x200008d0
 80105d0:	20000df0 	.word	0x20000df0
 80105d4:	20000ca0 	.word	0x20000ca0
 80105d8:	20000c68 	.word	0x20000c68

080105dc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80105e4:	480f      	ldr	r0, [pc, #60]	@ (8010624 <OnRetransmitTimeoutTimerEvent+0x48>)
 80105e6:	f00b fefb 	bl	801c3e0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80105ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010628 <OnRetransmitTimeoutTimerEvent+0x4c>)
 80105ec:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d003      	beq.n	80105fc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 80105f4:	4b0c      	ldr	r3, [pc, #48]	@ (8010628 <OnRetransmitTimeoutTimerEvent+0x4c>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80105fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010628 <OnRetransmitTimeoutTimerEvent+0x4c>)
 80105fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00a      	beq.n	801061c <OnRetransmitTimeoutTimerEvent+0x40>
 8010606:	4b08      	ldr	r3, [pc, #32]	@ (8010628 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010608:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801060c:	691b      	ldr	r3, [r3, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d004      	beq.n	801061c <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010612:	4b05      	ldr	r3, [pc, #20]	@ (8010628 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010614:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	4798      	blx	r3
    }
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20000cd4 	.word	0x20000cd4
 8010628:	200008d0 	.word	0x200008d0

0801062c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	60ba      	str	r2, [r7, #8]
 8010634:	607b      	str	r3, [r7, #4]
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]
 801063a:	460b      	mov	r3, r1
 801063c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d005      	beq.n	8010650 <GetFCntDown+0x24>
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <GetFCntDown+0x24>
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010650:	2309      	movs	r3, #9
 8010652:	e028      	b.n	80106a6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010654:	7bfb      	ldrb	r3, [r7, #15]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d016      	beq.n	8010688 <GetFCntDown+0x5c>
 801065a:	2b01      	cmp	r3, #1
 801065c:	d118      	bne.n	8010690 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801065e:	79bb      	ldrb	r3, [r7, #6]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d10d      	bne.n	8010680 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010664:	7bbb      	ldrb	r3, [r7, #14]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <GetFCntDown+0x44>
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	2b03      	cmp	r3, #3
 801066e:	d103      	bne.n	8010678 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010670:	69bb      	ldr	r3, [r7, #24]
 8010672:	2202      	movs	r2, #2
 8010674:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010676:	e00d      	b.n	8010694 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	2201      	movs	r2, #1
 801067c:	701a      	strb	r2, [r3, #0]
            break;
 801067e:	e009      	b.n	8010694 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010680:	69bb      	ldr	r3, [r7, #24]
 8010682:	2203      	movs	r2, #3
 8010684:	701a      	strb	r2, [r3, #0]
            break;
 8010686:	e005      	b.n	8010694 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	2204      	movs	r2, #4
 801068c:	701a      	strb	r2, [r3, #0]
            break;
 801068e:	e001      	b.n	8010694 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010690:	2305      	movs	r3, #5
 8010692:	e008      	b.n	80106a6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	7818      	ldrb	r0, [r3, #0]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	89db      	ldrh	r3, [r3, #14]
 801069c:	69fa      	ldr	r2, [r7, #28]
 801069e:	4619      	mov	r1, r3
 80106a0:	f004 fc60 	bl	8014f64 <LoRaMacCryptoGetFCntDown>
 80106a4:	4603      	mov	r3, r0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
	...

080106b0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80106b0:	b5b0      	push	{r4, r5, r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	4603      	mov	r3, r0
 80106b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106ba:	2303      	movs	r3, #3
 80106bc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80106be:	4b62      	ldr	r3, [pc, #392]	@ (8010848 <SwitchClass+0x198>)
 80106c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	f000 80a7 	beq.w	8010818 <SwitchClass+0x168>
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	f300 80b6 	bgt.w	801083c <SwitchClass+0x18c>
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d003      	beq.n	80106dc <SwitchClass+0x2c>
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	f000 8091 	beq.w	80107fc <SwitchClass+0x14c>
 80106da:	e0af      	b.n	801083c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80106dc:	79fb      	ldrb	r3, [r7, #7]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d107      	bne.n	80106f2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80106e2:	4b59      	ldr	r3, [pc, #356]	@ (8010848 <SwitchClass+0x198>)
 80106e4:	4a58      	ldr	r2, [pc, #352]	@ (8010848 <SwitchClass+0x198>)
 80106e6:	336c      	adds	r3, #108	@ 0x6c
 80106e8:	3264      	adds	r2, #100	@ 0x64
 80106ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ee:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80106f2:	79fb      	ldrb	r3, [r7, #7]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d10c      	bne.n	8010712 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f003 fb80 	bl	8013e00 <LoRaMacClassBSwitchClass>
 8010700:	4603      	mov	r3, r0
 8010702:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d103      	bne.n	8010712 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801070a:	4a4f      	ldr	r2, [pc, #316]	@ (8010848 <SwitchClass+0x198>)
 801070c:	79fb      	ldrb	r3, [r7, #7]
 801070e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8010712:	79fb      	ldrb	r3, [r7, #7]
 8010714:	2b02      	cmp	r3, #2
 8010716:	f040 808c 	bne.w	8010832 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801071a:	4a4b      	ldr	r2, [pc, #300]	@ (8010848 <SwitchClass+0x198>)
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010722:	4a4a      	ldr	r2, [pc, #296]	@ (801084c <SwitchClass+0x19c>)
 8010724:	4b49      	ldr	r3, [pc, #292]	@ (801084c <SwitchClass+0x19c>)
 8010726:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801072a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 801072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010732:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010736:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801073a:	4b44      	ldr	r3, [pc, #272]	@ (801084c <SwitchClass+0x19c>)
 801073c:	2202      	movs	r2, #2
 801073e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010742:	2300      	movs	r3, #0
 8010744:	73bb      	strb	r3, [r7, #14]
 8010746:	e049      	b.n	80107dc <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801074c:	4a3e      	ldr	r2, [pc, #248]	@ (8010848 <SwitchClass+0x198>)
 801074e:	212c      	movs	r1, #44	@ 0x2c
 8010750:	fb01 f303 	mul.w	r3, r1, r3
 8010754:	4413      	add	r3, r2
 8010756:	33da      	adds	r3, #218	@ 0xda
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d038      	beq.n	80107d0 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 801075e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010762:	4a39      	ldr	r2, [pc, #228]	@ (8010848 <SwitchClass+0x198>)
 8010764:	212c      	movs	r1, #44	@ 0x2c
 8010766:	fb01 f303 	mul.w	r3, r1, r3
 801076a:	4413      	add	r3, r2
 801076c:	33f0      	adds	r3, #240	@ 0xf0
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4a35      	ldr	r2, [pc, #212]	@ (8010848 <SwitchClass+0x198>)
 8010772:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010778:	4a33      	ldr	r2, [pc, #204]	@ (8010848 <SwitchClass+0x198>)
 801077a:	212c      	movs	r1, #44	@ 0x2c
 801077c:	fb01 f303 	mul.w	r3, r1, r3
 8010780:	4413      	add	r3, r2
 8010782:	33f4      	adds	r3, #244	@ 0xf4
 8010784:	f993 3000 	ldrsb.w	r3, [r3]
 8010788:	b2da      	uxtb	r2, r3
 801078a:	4b2f      	ldr	r3, [pc, #188]	@ (8010848 <SwitchClass+0x198>)
 801078c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010790:	4b2e      	ldr	r3, [pc, #184]	@ (801084c <SwitchClass+0x19c>)
 8010792:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010796:	4b2d      	ldr	r3, [pc, #180]	@ (801084c <SwitchClass+0x19c>)
 8010798:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801079c:	4b2a      	ldr	r3, [pc, #168]	@ (8010848 <SwitchClass+0x198>)
 801079e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107a0:	4a2a      	ldr	r2, [pc, #168]	@ (801084c <SwitchClass+0x19c>)
 80107a2:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107a6:	4b28      	ldr	r3, [pc, #160]	@ (8010848 <SwitchClass+0x198>)
 80107a8:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80107ac:	4b27      	ldr	r3, [pc, #156]	@ (801084c <SwitchClass+0x19c>)
 80107ae:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80107b2:	4b25      	ldr	r3, [pc, #148]	@ (8010848 <SwitchClass+0x198>)
 80107b4:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80107b8:	4b24      	ldr	r3, [pc, #144]	@ (801084c <SwitchClass+0x19c>)
 80107ba:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80107be:	4b23      	ldr	r3, [pc, #140]	@ (801084c <SwitchClass+0x19c>)
 80107c0:	2203      	movs	r2, #3
 80107c2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80107c6:	4b21      	ldr	r3, [pc, #132]	@ (801084c <SwitchClass+0x19c>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 80107ce:	e009      	b.n	80107e4 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80107d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	3301      	adds	r3, #1
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	73bb      	strb	r3, [r7, #14]
 80107dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	ddb1      	ble.n	8010748 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80107e4:	4b19      	ldr	r3, [pc, #100]	@ (801084c <SwitchClass+0x19c>)
 80107e6:	2200      	movs	r2, #0
 80107e8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80107ec:	4b18      	ldr	r3, [pc, #96]	@ (8010850 <SwitchClass+0x1a0>)
 80107ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80107f2:	f001 fa03 	bl	8011bfc <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80107f6:	2300      	movs	r3, #0
 80107f8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80107fa:	e01a      	b.n	8010832 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80107fc:	79fb      	ldrb	r3, [r7, #7]
 80107fe:	4618      	mov	r0, r3
 8010800:	f003 fafe 	bl	8013e00 <LoRaMacClassBSwitchClass>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010808:	7bfb      	ldrb	r3, [r7, #15]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d113      	bne.n	8010836 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801080e:	4a0e      	ldr	r2, [pc, #56]	@ (8010848 <SwitchClass+0x198>)
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 8010816:	e00e      	b.n	8010836 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010818:	79fb      	ldrb	r3, [r7, #7]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10d      	bne.n	801083a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801081e:	4a0a      	ldr	r2, [pc, #40]	@ (8010848 <SwitchClass+0x198>)
 8010820:	79fb      	ldrb	r3, [r7, #7]
 8010822:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010826:	4b0a      	ldr	r3, [pc, #40]	@ (8010850 <SwitchClass+0x1a0>)
 8010828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801082c:	2300      	movs	r3, #0
 801082e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010830:	e003      	b.n	801083a <SwitchClass+0x18a>
            break;
 8010832:	bf00      	nop
 8010834:	e002      	b.n	801083c <SwitchClass+0x18c>
            break;
 8010836:	bf00      	nop
 8010838:	e000      	b.n	801083c <SwitchClass+0x18c>
            break;
 801083a:	bf00      	nop
        }
    }

    return status;
 801083c:	7bfb      	ldrb	r3, [r7, #15]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bdb0      	pop	{r4, r5, r7, pc}
 8010846:	bf00      	nop
 8010848:	20000df0 	.word	0x20000df0
 801084c:	200008d0 	.word	0x200008d0
 8010850:	08020714 	.word	0x08020714

08010854 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b086      	sub	sp, #24
 8010858:	af00      	add	r7, sp, #0
 801085a:	4603      	mov	r3, r0
 801085c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801085e:	4b10      	ldr	r3, [pc, #64]	@ (80108a0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010860:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010864:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801086a:	230d      	movs	r3, #13
 801086c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801086e:	4b0c      	ldr	r3, [pc, #48]	@ (80108a0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010870:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010874:	2b00      	cmp	r3, #0
 8010876:	d001      	beq.n	801087c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010878:	230e      	movs	r3, #14
 801087a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801087c:	4b08      	ldr	r3, [pc, #32]	@ (80108a0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801087e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010882:	f107 0210 	add.w	r2, r7, #16
 8010886:	4611      	mov	r1, r2
 8010888:	4618      	mov	r0, r3
 801088a:	f005 f9c3 	bl	8015c14 <RegionGetPhyParam>
 801088e:	4603      	mov	r3, r0
 8010890:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	b2db      	uxtb	r3, r3
}
 8010896:	4618      	mov	r0, r3
 8010898:	3718      	adds	r7, #24
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20000df0 	.word	0x20000df0

080108a4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	71fb      	strb	r3, [r7, #7]
 80108ae:	460b      	mov	r3, r1
 80108b0:	71bb      	strb	r3, [r7, #6]
 80108b2:	4613      	mov	r3, r2
 80108b4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80108be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff ffc6 	bl	8010854 <GetMaxAppPayloadWithoutFOptsLength>
 80108c8:	4603      	mov	r3, r0
 80108ca:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80108cc:	79fb      	ldrb	r3, [r7, #7]
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	797b      	ldrb	r3, [r7, #5]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4413      	add	r3, r2
 80108d6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80108d8:	89ba      	ldrh	r2, [r7, #12]
 80108da:	89fb      	ldrh	r3, [r7, #14]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d804      	bhi.n	80108ea <ValidatePayloadLength+0x46>
 80108e0:	89bb      	ldrh	r3, [r7, #12]
 80108e2:	2bff      	cmp	r3, #255	@ 0xff
 80108e4:	d801      	bhi.n	80108ea <ValidatePayloadLength+0x46>
    {
        return true;
 80108e6:	2301      	movs	r3, #1
 80108e8:	e000      	b.n	80108ec <ValidatePayloadLength+0x48>
    }
    return false;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80108f4:	b590      	push	{r4, r7, lr}
 80108f6:	b0a5      	sub	sp, #148	@ 0x94
 80108f8:	af02      	add	r7, sp, #8
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	4608      	mov	r0, r1
 80108fe:	4611      	mov	r1, r2
 8010900:	461a      	mov	r2, r3
 8010902:	4603      	mov	r3, r0
 8010904:	70fb      	strb	r3, [r7, #3]
 8010906:	460b      	mov	r3, r1
 8010908:	70bb      	strb	r3, [r7, #2]
 801090a:	4613      	mov	r3, r2
 801090c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010914:	2300      	movs	r3, #0
 8010916:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801091a:	2300      	movs	r3, #0
 801091c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010920:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010924:	2b00      	cmp	r3, #0
 8010926:	f000 84b9 	beq.w	801129c <ProcessMacCommands+0x9a8>
 801092a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801092e:	2b01      	cmp	r3, #1
 8010930:	f040 84ba 	bne.w	80112a8 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010934:	f000 bcb2 	b.w	801129c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010938:	78fb      	ldrb	r3, [r7, #3]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	4413      	add	r3, r2
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	4618      	mov	r0, r3
 8010942:	f003 fd41 	bl	80143c8 <LoRaMacCommandsGetCmdSize>
 8010946:	4603      	mov	r3, r0
 8010948:	461a      	mov	r2, r3
 801094a:	78fb      	ldrb	r3, [r7, #3]
 801094c:	441a      	add	r2, r3
 801094e:	78bb      	ldrb	r3, [r7, #2]
 8010950:	429a      	cmp	r2, r3
 8010952:	f300 84ab 	bgt.w	80112ac <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010956:	78fb      	ldrb	r3, [r7, #3]
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	70fa      	strb	r2, [r7, #3]
 801095c:	461a      	mov	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4413      	add	r3, r2
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	3b02      	subs	r3, #2
 8010966:	2b11      	cmp	r3, #17
 8010968:	f200 84a2 	bhi.w	80112b0 <ProcessMacCommands+0x9bc>
 801096c:	a201      	add	r2, pc, #4	@ (adr r2, 8010974 <ProcessMacCommands+0x80>)
 801096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010972:	bf00      	nop
 8010974:	080109bd 	.word	0x080109bd
 8010978:	080109ff 	.word	0x080109ff
 801097c:	08010b7b 	.word	0x08010b7b
 8010980:	08010bb9 	.word	0x08010bb9
 8010984:	08010cb1 	.word	0x08010cb1
 8010988:	08010d01 	.word	0x08010d01
 801098c:	08010dbd 	.word	0x08010dbd
 8010990:	08010e13 	.word	0x08010e13
 8010994:	08010ef7 	.word	0x08010ef7
 8010998:	080112b1 	.word	0x080112b1
 801099c:	080112b1 	.word	0x080112b1
 80109a0:	08010fa1 	.word	0x08010fa1
 80109a4:	080112b1 	.word	0x080112b1
 80109a8:	080112b1 	.word	0x080112b1
 80109ac:	080110c1 	.word	0x080110c1
 80109b0:	080110f5 	.word	0x080110f5
 80109b4:	08011185 	.word	0x08011185
 80109b8:	080111fd 	.word	0x080111fd
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80109bc:	2004      	movs	r0, #4
 80109be:	f003 fedb 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f000 845c 	beq.w	8011282 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80109ca:	2104      	movs	r1, #4
 80109cc:	2000      	movs	r0, #0
 80109ce:	f003 fe47 	bl	8014660 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80109d2:	78fb      	ldrb	r3, [r7, #3]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	70fa      	strb	r2, [r7, #3]
 80109d8:	461a      	mov	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4413      	add	r3, r2
 80109de:	781a      	ldrb	r2, [r3, #0]
 80109e0:	4bb0      	ldr	r3, [pc, #704]	@ (8010ca4 <ProcessMacCommands+0x3b0>)
 80109e2:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80109e6:	78fb      	ldrb	r3, [r7, #3]
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	70fa      	strb	r2, [r7, #3]
 80109ec:	461a      	mov	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4413      	add	r3, r2
 80109f2:	781a      	ldrb	r2, [r3, #0]
 80109f4:	4bab      	ldr	r3, [pc, #684]	@ (8010ca4 <ProcessMacCommands+0x3b0>)
 80109f6:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 80109fa:	f000 bc42 	b.w	8011282 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 8010a16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010a1a:	f083 0301 	eor.w	r3, r3, #1
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 80a6 	beq.w	8010b72 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 8010a26:	2301      	movs	r3, #1
 8010a28:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010a2c:	78fb      	ldrb	r3, [r7, #3]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	4413      	add	r3, r2
 8010a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010a36:	4b9c      	ldr	r3, [pc, #624]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a38:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010a3c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a40:	4b99      	ldr	r3, [pc, #612]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a42:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010a46:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a4a:	4b97      	ldr	r3, [pc, #604]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a4c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010a50:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010a54:	4b94      	ldr	r3, [pc, #592]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a56:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010a5a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010a5e:	4b92      	ldr	r3, [pc, #584]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a60:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8010a64:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010a68:	4b8f      	ldr	r3, [pc, #572]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010a6e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010a70:	4b8d      	ldr	r3, [pc, #564]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a72:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d008      	beq.n	8010a8c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010a7a:	78ba      	ldrb	r2, [r7, #2]
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	3301      	adds	r3, #1
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8010a8a:	e002      	b.n	8010a92 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8010a8c:	2305      	movs	r3, #5
 8010a8e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010a92:	4b85      	ldr	r3, [pc, #532]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010a94:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010a98:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8010a9c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8010aa0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8010aa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	4623      	mov	r3, r4
 8010ab2:	f005 f96c 	bl	8015d8e <RegionLinkAdrReq>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010abc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010ac0:	f003 0307 	and.w	r3, r3, #7
 8010ac4:	2b07      	cmp	r3, #7
 8010ac6:	d119      	bne.n	8010afc <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010ac8:	4b77      	ldr	r3, [pc, #476]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010aca:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010ace:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	da03      	bge.n	8010ade <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010ad6:	4b74      	ldr	r3, [pc, #464]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010ad8:	2201      	movs	r2, #1
 8010ada:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010ade:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8010ae2:	4b71      	ldr	r3, [pc, #452]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010ae4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010ae8:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8010aec:	4b6e      	ldr	r3, [pc, #440]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010af2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8010af6:	4b6c      	ldr	r3, [pc, #432]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010af8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010afc:	2300      	movs	r3, #0
 8010afe:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010b02:	e00b      	b.n	8010b1c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010b04:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8010b08:	2201      	movs	r2, #1
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	2003      	movs	r0, #3
 8010b0e:	f003 fb0b 	bl	8014128 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b12:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8010b16:	3301      	adds	r3, #1
 8010b18:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010b1c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010b20:	4a62      	ldr	r2, [pc, #392]	@ (8010cac <ProcessMacCommands+0x3b8>)
 8010b22:	fba2 2303 	umull	r2, r3, r2, r3
 8010b26:	089b      	lsrs	r3, r3, #2
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d3e8      	bcc.n	8010b04 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010b32:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8010b36:	78fb      	ldrb	r3, [r7, #3]
 8010b38:	4413      	add	r3, r2
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010b40:	78fa      	ldrb	r2, [r7, #3]
 8010b42:	78bb      	ldrb	r3, [r7, #2]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d20a      	bcs.n	8010b5e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8010b48:	78fb      	ldrb	r3, [r7, #3]
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	70fa      	strb	r2, [r7, #3]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4413      	add	r3, r2
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b03      	cmp	r3, #3
 8010b58:	f43f af68 	beq.w	8010a2c <ProcessMacCommands+0x138>
 8010b5c:	e000      	b.n	8010b60 <ProcessMacCommands+0x26c>
                            break;
 8010b5e:	bf00      	nop

                    if( macIndex < commandsSize )
 8010b60:	78fa      	ldrb	r2, [r7, #3]
 8010b62:	78bb      	ldrb	r3, [r7, #2]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	f080 838e 	bcs.w	8011286 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8010b6a:	78fb      	ldrb	r3, [r7, #3]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010b70:	e389      	b.n	8011286 <ProcessMacCommands+0x992>
                    macIndex += 4;
 8010b72:	78fb      	ldrb	r3, [r7, #3]
 8010b74:	3304      	adds	r3, #4
 8010b76:	70fb      	strb	r3, [r7, #3]
                break;
 8010b78:	e385      	b.n	8011286 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010b7a:	78fb      	ldrb	r3, [r7, #3]
 8010b7c:	1c5a      	adds	r2, r3, #1
 8010b7e:	70fa      	strb	r2, [r7, #3]
 8010b80:	461a      	mov	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4413      	add	r3, r2
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	f003 030f 	and.w	r3, r3, #15
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	4b46      	ldr	r3, [pc, #280]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010b90:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010b94:	4b44      	ldr	r3, [pc, #272]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010b96:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	4093      	lsls	r3, r2
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	4b41      	ldr	r3, [pc, #260]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010ba4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010ba8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010bac:	2200      	movs	r2, #0
 8010bae:	4619      	mov	r1, r3
 8010bb0:	2004      	movs	r0, #4
 8010bb2:	f003 fab9 	bl	8014128 <LoRaMacCommandsAddCmd>
                break;
 8010bb6:	e371      	b.n	801129c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010bb8:	2307      	movs	r3, #7
 8010bba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010bbe:	78fb      	ldrb	r3, [r7, #3]
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	091b      	lsrs	r3, r3, #4
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	b25b      	sxtb	r3, r3
 8010bcc:	f003 0307 	and.w	r3, r3, #7
 8010bd0:	b25b      	sxtb	r3, r3
 8010bd2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010bd6:	78fb      	ldrb	r3, [r7, #3]
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	4413      	add	r3, r2
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b25b      	sxtb	r3, r3
 8010be0:	f003 030f 	and.w	r3, r3, #15
 8010be4:	b25b      	sxtb	r3, r3
 8010be6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010bea:	78fb      	ldrb	r3, [r7, #3]
 8010bec:	3301      	adds	r3, #1
 8010bee:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	1c5a      	adds	r2, r3, #1
 8010bf4:	70fa      	strb	r2, [r7, #3]
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	70fa      	strb	r2, [r7, #3]
 8010c06:	461a      	mov	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	021a      	lsls	r2, r3, #8
 8010c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c12:	4313      	orrs	r3, r2
 8010c14:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c16:	78fb      	ldrb	r3, [r7, #3]
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	70fa      	strb	r2, [r7, #3]
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4413      	add	r3, r2
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	041a      	lsls	r2, r3, #16
 8010c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c2e:	2264      	movs	r2, #100	@ 0x64
 8010c30:	fb02 f303 	mul.w	r3, r2, r3
 8010c34:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010c36:	4b1c      	ldr	r3, [pc, #112]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c3c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010c40:	4611      	mov	r1, r2
 8010c42:	4618      	mov	r0, r3
 8010c44:	f005 f8bd 	bl	8015dc2 <RegionRxParamSetupReq>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010c4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c52:	f003 0307 	and.w	r3, r3, #7
 8010c56:	2b07      	cmp	r3, #7
 8010c58:	d117      	bne.n	8010c8a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010c5a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	4b11      	ldr	r3, [pc, #68]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c62:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010c66:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010c6a:	b2da      	uxtb	r2, r3
 8010c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c6e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c74:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c76:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c7c:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010c7e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	4b08      	ldr	r3, [pc, #32]	@ (8010ca8 <ProcessMacCommands+0x3b4>)
 8010c86:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 8010c8a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c8e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010c92:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010c96:	2201      	movs	r2, #1
 8010c98:	4619      	mov	r1, r3
 8010c9a:	2005      	movs	r0, #5
 8010c9c:	f003 fa44 	bl	8014128 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010ca0:	e2fc      	b.n	801129c <ProcessMacCommands+0x9a8>
 8010ca2:	bf00      	nop
 8010ca4:	200008d0 	.word	0x200008d0
 8010ca8:	20000df0 	.word	0x20000df0
 8010cac:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010cb0:	23ff      	movs	r3, #255	@ 0xff
 8010cb2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010cb6:	4bb7      	ldr	r3, [pc, #732]	@ (8010f94 <ProcessMacCommands+0x6a0>)
 8010cb8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d00d      	beq.n	8010cdc <ProcessMacCommands+0x3e8>
 8010cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8010f94 <ProcessMacCommands+0x6a0>)
 8010cc2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d007      	beq.n	8010cdc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8010f94 <ProcessMacCommands+0x6a0>)
 8010cce:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	4798      	blx	r3
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010cdc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8010ce0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010ce4:	787b      	ldrb	r3, [r7, #1]
 8010ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010cf0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	2006      	movs	r0, #6
 8010cfa:	f003 fa15 	bl	8014128 <LoRaMacCommandsAddCmd>
                break;
 8010cfe:	e2cd      	b.n	801129c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010d00:	2303      	movs	r3, #3
 8010d02:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010d06:	78fb      	ldrb	r3, [r7, #3]
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	70fa      	strb	r2, [r7, #3]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4413      	add	r3, r2
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	b25b      	sxtb	r3, r3
 8010d16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010d1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010d1e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010d20:	78fb      	ldrb	r3, [r7, #3]
 8010d22:	1c5a      	adds	r2, r3, #1
 8010d24:	70fa      	strb	r2, [r7, #3]
 8010d26:	461a      	mov	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010d30:	78fb      	ldrb	r3, [r7, #3]
 8010d32:	1c5a      	adds	r2, r3, #1
 8010d34:	70fa      	strb	r2, [r7, #3]
 8010d36:	461a      	mov	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	021a      	lsls	r2, r3, #8
 8010d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d42:	4313      	orrs	r3, r2
 8010d44:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	1c5a      	adds	r2, r3, #1
 8010d4a:	70fa      	strb	r2, [r7, #3]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4413      	add	r3, r2
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	041a      	lsls	r2, r3, #16
 8010d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	2264      	movs	r2, #100	@ 0x64
 8010d60:	fb02 f303 	mul.w	r3, r2, r3
 8010d64:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010d6a:	78fb      	ldrb	r3, [r7, #3]
 8010d6c:	1c5a      	adds	r2, r3, #1
 8010d6e:	70fa      	strb	r2, [r7, #3]
 8010d70:	461a      	mov	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4413      	add	r3, r2
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	b25b      	sxtb	r3, r3
 8010d7a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010d7e:	4b86      	ldr	r3, [pc, #536]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010d80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d84:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010d88:	4611      	mov	r1, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f005 f82c 	bl	8015de8 <RegionNewChannelReq>
 8010d90:	4603      	mov	r3, r0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010d98:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010d9c:	b25b      	sxtb	r3, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f2c0 8273 	blt.w	801128a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 8010da4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010da8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010dac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010db0:	2201      	movs	r2, #1
 8010db2:	4619      	mov	r1, r3
 8010db4:	2007      	movs	r0, #7
 8010db6:	f003 f9b7 	bl	8014128 <LoRaMacCommandsAddCmd>
                }
                break;
 8010dba:	e266      	b.n	801128a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010dbc:	78fb      	ldrb	r3, [r7, #3]
 8010dbe:	1c5a      	adds	r2, r3, #1
 8010dc0:	70fa      	strb	r2, [r7, #3]
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	f003 030f 	and.w	r3, r3, #15
 8010dce:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8010dd2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d104      	bne.n	8010de4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8010dda:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010dde:	3301      	adds	r3, #1
 8010de0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010de4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010de8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010dec:	fb02 f303 	mul.w	r3, r2, r3
 8010df0:	461a      	mov	r2, r3
 8010df2:	4b69      	ldr	r3, [pc, #420]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010df4:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010df6:	4b68      	ldr	r3, [pc, #416]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010dfa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010dfe:	4a66      	ldr	r2, [pc, #408]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010e00:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010e02:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e06:	2200      	movs	r2, #0
 8010e08:	4619      	mov	r1, r3
 8010e0a:	2008      	movs	r0, #8
 8010e0c:	f003 f98c 	bl	8014128 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010e10:	e244      	b.n	801129c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010e12:	78fb      	ldrb	r3, [r7, #3]
 8010e14:	1c5a      	adds	r2, r3, #1
 8010e16:	70fa      	strb	r2, [r7, #3]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010e24:	2300      	movs	r3, #0
 8010e26:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010e30:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010e34:	f003 0320 	and.w	r3, r3, #32
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010e42:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010e46:	f003 0310 	and.w	r3, r3, #16
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d002      	beq.n	8010e54 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010e54:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010e58:	f003 030f 	and.w	r3, r3, #15
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010e62:	4b4d      	ldr	r3, [pc, #308]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010e64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e68:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f004 ffcd 	bl	8015e0e <RegionTxParamSetupReq>
 8010e74:	4603      	mov	r3, r0
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e7a:	f000 8208 	beq.w	801128e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010e7e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8010e82:	4b45      	ldr	r3, [pc, #276]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010e84:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010e88:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010e8c:	4b42      	ldr	r3, [pc, #264]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010e8e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010e92:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010e96:	461a      	mov	r2, r3
 8010e98:	4b40      	ldr	r3, [pc, #256]	@ (8010f9c <ProcessMacCommands+0x6a8>)
 8010e9a:	5c9b      	ldrb	r3, [r3, r2]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ef ff11 	bl	8000cc4 <__aeabi_ui2f>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010ea6:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010eae:	4b3a      	ldr	r3, [pc, #232]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010eb4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eb8:	4b37      	ldr	r3, [pc, #220]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ebe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f004 fea5 	bl	8015c14 <RegionGetPhyParam>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed0:	b25a      	sxtb	r2, r3
 8010ed2:	4b31      	ldr	r3, [pc, #196]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010ed4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	bfb8      	it	lt
 8010edc:	4613      	movlt	r3, r2
 8010ede:	b25a      	sxtb	r2, r3
 8010ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010ee2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010ee6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010eea:	2200      	movs	r2, #0
 8010eec:	4619      	mov	r1, r3
 8010eee:	2009      	movs	r0, #9
 8010ef0:	f003 f91a 	bl	8014128 <LoRaMacCommandsAddCmd>
                }
                break;
 8010ef4:	e1cb      	b.n	801128e <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010efc:	78fb      	ldrb	r3, [r7, #3]
 8010efe:	1c5a      	adds	r2, r3, #1
 8010f00:	70fa      	strb	r2, [r7, #3]
 8010f02:	461a      	mov	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4413      	add	r3, r2
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010f0e:	78fb      	ldrb	r3, [r7, #3]
 8010f10:	1c5a      	adds	r2, r3, #1
 8010f12:	70fa      	strb	r2, [r7, #3]
 8010f14:	461a      	mov	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010f1e:	78fb      	ldrb	r3, [r7, #3]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	70fa      	strb	r2, [r7, #3]
 8010f24:	461a      	mov	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4413      	add	r3, r2
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	021a      	lsls	r2, r3, #8
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f30:	4313      	orrs	r3, r2
 8010f32:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010f34:	78fb      	ldrb	r3, [r7, #3]
 8010f36:	1c5a      	adds	r2, r3, #1
 8010f38:	70fa      	strb	r2, [r7, #3]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4413      	add	r3, r2
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	041a      	lsls	r2, r3, #16
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	4313      	orrs	r3, r2
 8010f48:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4c:	2264      	movs	r2, #100	@ 0x64
 8010f4e:	fb02 f303 	mul.w	r3, r2, r3
 8010f52:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010f54:	4b10      	ldr	r3, [pc, #64]	@ (8010f98 <ProcessMacCommands+0x6a4>)
 8010f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f5a:	f107 0220 	add.w	r2, r7, #32
 8010f5e:	4611      	mov	r1, r2
 8010f60:	4618      	mov	r0, r3
 8010f62:	f004 ff67 	bl	8015e34 <RegionDlChannelReq>
 8010f66:	4603      	mov	r3, r0
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010f6e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010f72:	b25b      	sxtb	r3, r3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f2c0 818c 	blt.w	8011292 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 8010f7a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010f7e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010f82:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f86:	2201      	movs	r2, #1
 8010f88:	4619      	mov	r1, r3
 8010f8a:	200a      	movs	r0, #10
 8010f8c:	f003 f8cc 	bl	8014128 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8010f90:	e17f      	b.n	8011292 <ProcessMacCommands+0x99e>
 8010f92:	bf00      	nop
 8010f94:	200008d0 	.word	0x200008d0
 8010f98:	20000df0 	.word	0x20000df0
 8010f9c:	08020644 	.word	0x08020644
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010fa0:	2009      	movs	r0, #9
 8010fa2:	f003 fbe9 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f000 8084 	beq.w	80110b6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010fae:	2109      	movs	r1, #9
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	f003 fb55 	bl	8014660 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010fb6:	f107 0318 	add.w	r3, r7, #24
 8010fba:	2200      	movs	r2, #0
 8010fbc:	601a      	str	r2, [r3, #0]
 8010fbe:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010fc0:	f107 0310 	add.w	r3, r7, #16
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	601a      	str	r2, [r3, #0]
 8010fc8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010fca:	f107 0308 	add.w	r3, r7, #8
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010fd4:	78fb      	ldrb	r3, [r7, #3]
 8010fd6:	1c5a      	adds	r2, r3, #1
 8010fd8:	70fa      	strb	r2, [r7, #3]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4413      	add	r3, r2
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010fe4:	78fb      	ldrb	r3, [r7, #3]
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	70fa      	strb	r2, [r7, #3]
 8010fea:	461a      	mov	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4413      	add	r3, r2
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	021a      	lsls	r2, r3, #8
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010ffa:	78fb      	ldrb	r3, [r7, #3]
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	70fa      	strb	r2, [r7, #3]
 8011000:	461a      	mov	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4413      	add	r3, r2
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	041a      	lsls	r2, r3, #16
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	4313      	orrs	r3, r2
 801100e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011010:	78fb      	ldrb	r3, [r7, #3]
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	70fa      	strb	r2, [r7, #3]
 8011016:	461a      	mov	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	4413      	add	r3, r2
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	061a      	lsls	r2, r3, #24
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	4313      	orrs	r3, r2
 8011024:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011026:	78fb      	ldrb	r3, [r7, #3]
 8011028:	1c5a      	adds	r2, r3, #1
 801102a:	70fa      	strb	r2, [r7, #3]
 801102c:	461a      	mov	r2, r3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4413      	add	r3, r2
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	b21b      	sxth	r3, r3
 8011036:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011038:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801103c:	461a      	mov	r2, r3
 801103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011042:	fb02 f303 	mul.w	r3, r2, r3
 8011046:	121b      	asrs	r3, r3, #8
 8011048:	b21b      	sxth	r3, r3
 801104a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801104c:	f107 0310 	add.w	r3, r7, #16
 8011050:	f107 0218 	add.w	r2, r7, #24
 8011054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011058:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	4b96      	ldr	r3, [pc, #600]	@ (80112b8 <ProcessMacCommands+0x9c4>)
 8011060:	4413      	add	r3, r2
 8011062:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011064:	f107 0308 	add.w	r3, r7, #8
 8011068:	4618      	mov	r0, r3
 801106a:	f00a fc53 	bl	801b914 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801106e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8011072:	4b92      	ldr	r3, [pc, #584]	@ (80112bc <ProcessMacCommands+0x9c8>)
 8011074:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8011078:	9200      	str	r2, [sp, #0]
 801107a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 801107e:	f107 0210 	add.w	r2, r7, #16
 8011082:	ca06      	ldmia	r2, {r1, r2}
 8011084:	f00a fbdf 	bl	801b846 <SysTimeSub>
 8011088:	f107 0010 	add.w	r0, r7, #16
 801108c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011092:	f107 0208 	add.w	r2, r7, #8
 8011096:	ca06      	ldmia	r2, {r1, r2}
 8011098:	f00a fb9c 	bl	801b7d4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801109c:	f107 0310 	add.w	r3, r7, #16
 80110a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80110a4:	f00a fc08 	bl	801b8b8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80110a8:	f002 fee8 	bl	8013e7c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80110ac:	4b83      	ldr	r3, [pc, #524]	@ (80112bc <ProcessMacCommands+0x9c8>)
 80110ae:	2201      	movs	r2, #1
 80110b0:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80110b4:	e0f2      	b.n	801129c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80110b6:	4b81      	ldr	r3, [pc, #516]	@ (80112bc <ProcessMacCommands+0x9c8>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 80110be:	e0ed      	b.n	801129c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80110c0:	200c      	movs	r0, #12
 80110c2:	f003 fb59 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 80e4 	beq.w	8011296 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80110ce:	210c      	movs	r1, #12
 80110d0:	2000      	movs	r0, #0
 80110d2:	f003 fac5 	bl	8014660 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80110d6:	4b79      	ldr	r3, [pc, #484]	@ (80112bc <ProcessMacCommands+0x9c8>)
 80110d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80110dc:	2b04      	cmp	r3, #4
 80110de:	f000 80da 	beq.w	8011296 <ProcessMacCommands+0x9a2>
 80110e2:	4b76      	ldr	r3, [pc, #472]	@ (80112bc <ProcessMacCommands+0x9c8>)
 80110e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80110e8:	2b05      	cmp	r3, #5
 80110ea:	f000 80d4 	beq.w	8011296 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80110ee:	f002 fea6 	bl	8013e3e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80110f2:	e0d0      	b.n	8011296 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80110f4:	2303      	movs	r3, #3
 80110f6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80110fe:	78fb      	ldrb	r3, [r7, #3]
 8011100:	1c5a      	adds	r2, r3, #1
 8011102:	70fa      	strb	r2, [r7, #3]
 8011104:	461a      	mov	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801110e:	78fb      	ldrb	r3, [r7, #3]
 8011110:	1c5a      	adds	r2, r3, #1
 8011112:	70fa      	strb	r2, [r7, #3]
 8011114:	461a      	mov	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	021b      	lsls	r3, r3, #8
 801111e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011120:	4313      	orrs	r3, r2
 8011122:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	70fa      	strb	r2, [r7, #3]
 801112a:	461a      	mov	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4413      	add	r3, r2
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	041b      	lsls	r3, r3, #16
 8011134:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011136:	4313      	orrs	r3, r2
 8011138:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801113a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801113c:	2264      	movs	r2, #100	@ 0x64
 801113e:	fb02 f303 	mul.w	r3, r2, r3
 8011142:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011144:	78fb      	ldrb	r3, [r7, #3]
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	70fa      	strb	r2, [r7, #3]
 801114a:	461a      	mov	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4413      	add	r3, r2
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	f003 030f 	and.w	r3, r3, #15
 8011156:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801115a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801115e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011160:	4618      	mov	r0, r3
 8011162:	f002 fe72 	bl	8013e4a <LoRaMacClassBPingSlotChannelReq>
 8011166:	4603      	mov	r3, r0
 8011168:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 801116c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8011170:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8011174:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011178:	2201      	movs	r2, #1
 801117a:	4619      	mov	r1, r3
 801117c:	2011      	movs	r0, #17
 801117e:	f002 ffd3 	bl	8014128 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8011182:	e08b      	b.n	801129c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011184:	200d      	movs	r0, #13
 8011186:	f003 faf7 	bl	8014778 <LoRaMacConfirmQueueIsCmdActive>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 8084 	beq.w	801129a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011192:	210d      	movs	r1, #13
 8011194:	2000      	movs	r0, #0
 8011196:	f003 fa63 	bl	8014660 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80111a6:	78fb      	ldrb	r3, [r7, #3]
 80111a8:	1c5a      	adds	r2, r3, #1
 80111aa:	70fa      	strb	r2, [r7, #3]
 80111ac:	461a      	mov	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4413      	add	r3, r2
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	1c5a      	adds	r2, r3, #1
 80111bc:	70fa      	strb	r2, [r7, #3]
 80111be:	461a      	mov	r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4413      	add	r3, r2
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	021b      	lsls	r3, r3, #8
 80111c8:	b21a      	sxth	r2, r3
 80111ca:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80111ce:	4313      	orrs	r3, r2
 80111d0:	b21b      	sxth	r3, r3
 80111d2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	70fa      	strb	r2, [r7, #3]
 80111dc:	461a      	mov	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4413      	add	r3, r2
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80111e8:	4b35      	ldr	r3, [pc, #212]	@ (80112c0 <ProcessMacCommands+0x9cc>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 80111f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80111f4:	4618      	mov	r0, r3
 80111f6:	f002 fe34 	bl	8013e62 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80111fa:	e04e      	b.n	801129a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80111fc:	2300      	movs	r3, #0
 80111fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011202:	78fb      	ldrb	r3, [r7, #3]
 8011204:	1c5a      	adds	r2, r3, #1
 8011206:	70fa      	strb	r2, [r7, #3]
 8011208:	461a      	mov	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4413      	add	r3, r2
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011214:	78fb      	ldrb	r3, [r7, #3]
 8011216:	1c5a      	adds	r2, r3, #1
 8011218:	70fa      	strb	r2, [r7, #3]
 801121a:	461a      	mov	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4413      	add	r3, r2
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	021b      	lsls	r3, r3, #8
 8011224:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011228:	4313      	orrs	r3, r2
 801122a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801122e:	78fb      	ldrb	r3, [r7, #3]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	70fa      	strb	r2, [r7, #3]
 8011234:	461a      	mov	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4413      	add	r3, r2
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	041b      	lsls	r3, r3, #16
 801123e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011242:	4313      	orrs	r3, r2
 8011244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8011248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801124c:	2264      	movs	r2, #100	@ 0x64
 801124e:	fb02 f303 	mul.w	r3, r2, r3
 8011252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011256:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801125a:	f002 fe15 	bl	8013e88 <LoRaMacClassBBeaconFreqReq>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d003      	beq.n	801126c <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8011264:	2301      	movs	r3, #1
 8011266:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 801126a:	e002      	b.n	8011272 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801126c:	2300      	movs	r3, #0
 801126e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011272:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011276:	2201      	movs	r2, #1
 8011278:	4619      	mov	r1, r3
 801127a:	2013      	movs	r0, #19
 801127c:	f002 ff54 	bl	8014128 <LoRaMacCommandsAddCmd>
                }
                break;
 8011280:	e00c      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 8011282:	bf00      	nop
 8011284:	e00a      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 8011286:	bf00      	nop
 8011288:	e008      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 801128a:	bf00      	nop
 801128c:	e006      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 801128e:	bf00      	nop
 8011290:	e004      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 8011292:	bf00      	nop
 8011294:	e002      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 8011296:	bf00      	nop
 8011298:	e000      	b.n	801129c <ProcessMacCommands+0x9a8>
                break;
 801129a:	bf00      	nop
    while( macIndex < commandsSize )
 801129c:	78fa      	ldrb	r2, [r7, #3]
 801129e:	78bb      	ldrb	r3, [r7, #2]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	f4ff ab49 	bcc.w	8010938 <ProcessMacCommands+0x44>
 80112a6:	e004      	b.n	80112b2 <ProcessMacCommands+0x9be>
        return;
 80112a8:	bf00      	nop
 80112aa:	e002      	b.n	80112b2 <ProcessMacCommands+0x9be>
            return;
 80112ac:	bf00      	nop
 80112ae:	e000      	b.n	80112b2 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80112b0:	bf00      	nop
        }
    }
}
 80112b2:	378c      	adds	r7, #140	@ 0x8c
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd90      	pop	{r4, r7, pc}
 80112b8:	12d53d80 	.word	0x12d53d80
 80112bc:	200008d0 	.word	0x200008d0
 80112c0:	20001980 	.word	0x20001980

080112c4 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08e      	sub	sp, #56	@ 0x38
 80112c8:	af02      	add	r7, sp, #8
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	607a      	str	r2, [r7, #4]
 80112ce:	461a      	mov	r2, r3
 80112d0:	460b      	mov	r3, r1
 80112d2:	72fb      	strb	r3, [r7, #11]
 80112d4:	4613      	mov	r3, r2
 80112d6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112d8:	2303      	movs	r3, #3
 80112da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80112de:	4b66      	ldr	r3, [pc, #408]	@ (8011478 <Send+0x1b4>)
 80112e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80112e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80112e8:	4b63      	ldr	r3, [pc, #396]	@ (8011478 <Send+0x1b4>)
 80112ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80112ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80112f2:	4b61      	ldr	r3, [pc, #388]	@ (8011478 <Send+0x1b4>)
 80112f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80112f8:	4b5f      	ldr	r3, [pc, #380]	@ (8011478 <Send+0x1b4>)
 80112fa:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d101      	bne.n	8011306 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011302:	2307      	movs	r3, #7
 8011304:	e0b4      	b.n	8011470 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011306:	4b5c      	ldr	r3, [pc, #368]	@ (8011478 <Send+0x1b4>)
 8011308:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011310:	4b59      	ldr	r3, [pc, #356]	@ (8011478 <Send+0x1b4>)
 8011312:	2200      	movs	r2, #0
 8011314:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8011316:	2300      	movs	r3, #0
 8011318:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801131c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011320:	f36f 0303 	bfc	r3, #0, #4
 8011324:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011328:	4b53      	ldr	r3, [pc, #332]	@ (8011478 <Send+0x1b4>)
 801132a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801132e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011332:	f362 13c7 	bfi	r3, r2, #7, #1
 8011336:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801133a:	4b4f      	ldr	r3, [pc, #316]	@ (8011478 <Send+0x1b4>)
 801133c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011340:	2b01      	cmp	r3, #1
 8011342:	d106      	bne.n	8011352 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011344:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011348:	f043 0310 	orr.w	r3, r3, #16
 801134c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011350:	e005      	b.n	801135e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011352:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011356:	f36f 1304 	bfc	r3, #4, #1
 801135a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801135e:	4b46      	ldr	r3, [pc, #280]	@ (8011478 <Send+0x1b4>)
 8011360:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011364:	2b00      	cmp	r3, #0
 8011366:	d005      	beq.n	8011374 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011368:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801136c:	f043 0320 	orr.w	r3, r3, #32
 8011370:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8011374:	2301      	movs	r3, #1
 8011376:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011378:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801137c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011380:	b2db      	uxtb	r3, r3
 8011382:	2b00      	cmp	r3, #0
 8011384:	bf14      	ite	ne
 8011386:	2301      	movne	r3, #1
 8011388:	2300      	moveq	r3, #0
 801138a:	b2db      	uxtb	r3, r3
 801138c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801138e:	4b3a      	ldr	r3, [pc, #232]	@ (8011478 <Send+0x1b4>)
 8011390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011392:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011394:	4b39      	ldr	r3, [pc, #228]	@ (801147c <Send+0x1b8>)
 8011396:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 801139a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801139c:	4b37      	ldr	r3, [pc, #220]	@ (801147c <Send+0x1b8>)
 801139e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80113a2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80113a4:	4b34      	ldr	r3, [pc, #208]	@ (8011478 <Send+0x1b4>)
 80113a6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80113aa:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80113ae:	4b32      	ldr	r3, [pc, #200]	@ (8011478 <Send+0x1b4>)
 80113b0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80113b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80113b8:	4b2f      	ldr	r3, [pc, #188]	@ (8011478 <Send+0x1b4>)
 80113ba:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80113be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80113c2:	4b2d      	ldr	r3, [pc, #180]	@ (8011478 <Send+0x1b4>)
 80113c4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80113c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80113cc:	4b2a      	ldr	r3, [pc, #168]	@ (8011478 <Send+0x1b4>)
 80113ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80113d6:	f107 0014 	add.w	r0, r7, #20
 80113da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	4b27      	ldr	r3, [pc, #156]	@ (8011480 <Send+0x1bc>)
 80113e2:	4a28      	ldr	r2, [pc, #160]	@ (8011484 <Send+0x1c0>)
 80113e4:	4928      	ldr	r1, [pc, #160]	@ (8011488 <Send+0x1c4>)
 80113e6:	f002 fbc9 	bl	8013b7c <LoRaMacAdrCalcNext>
 80113ea:	4603      	mov	r3, r0
 80113ec:	461a      	mov	r2, r3
 80113ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80113f2:	f362 1386 	bfi	r3, r2, #6, #1
 80113f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80113fa:	7afa      	ldrb	r2, [r7, #11]
 80113fc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011400:	893b      	ldrh	r3, [r7, #8]
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f000 fc42 	bl	8011c90 <PrepareFrame>
 801140c:	4603      	mov	r3, r0
 801140e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011416:	2b00      	cmp	r3, #0
 8011418:	d003      	beq.n	8011422 <Send+0x15e>
 801141a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801141e:	2b0a      	cmp	r3, #10
 8011420:	d107      	bne.n	8011432 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011422:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011426:	4618      	mov	r0, r3
 8011428:	f000 f96e 	bl	8011708 <ScheduleTx>
 801142c:	4603      	mov	r3, r0
 801142e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00a      	beq.n	8011450 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801143a:	4a0f      	ldr	r2, [pc, #60]	@ (8011478 <Send+0x1b4>)
 801143c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011440:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011444:	4a0c      	ldr	r2, [pc, #48]	@ (8011478 <Send+0x1b4>)
 8011446:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801144a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 801144e:	e00d      	b.n	801146c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011450:	4b09      	ldr	r3, [pc, #36]	@ (8011478 <Send+0x1b4>)
 8011452:	2200      	movs	r2, #0
 8011454:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801145a:	4a07      	ldr	r2, [pc, #28]	@ (8011478 <Send+0x1b4>)
 801145c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801145e:	f002 fedb 	bl	8014218 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011468:	2313      	movs	r3, #19
 801146a:	e001      	b.n	8011470 <Send+0x1ac>
        }
    }
    return status;
 801146c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011470:	4618      	mov	r0, r3
 8011472:	3730      	adds	r7, #48	@ 0x30
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	20000df0 	.word	0x20000df0
 801147c:	200008d0 	.word	0x200008d0
 8011480:	20000e50 	.word	0x20000e50
 8011484:	20000e28 	.word	0x20000e28
 8011488:	20000e29 	.word	0x20000e29

0801148c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	4603      	mov	r3, r0
 8011494:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801149e:	2301      	movs	r3, #1
 80114a0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80114a2:	79fb      	ldrb	r3, [r7, #7]
 80114a4:	2bff      	cmp	r3, #255	@ 0xff
 80114a6:	d129      	bne.n	80114fc <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80114a8:	2000      	movs	r0, #0
 80114aa:	f7ff f901 	bl	80106b0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80114ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011518 <SendReJoinReq+0x8c>)
 80114b0:	2200      	movs	r2, #0
 80114b2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80114b6:	4b18      	ldr	r3, [pc, #96]	@ (8011518 <SendReJoinReq+0x8c>)
 80114b8:	4a18      	ldr	r2, [pc, #96]	@ (801151c <SendReJoinReq+0x90>)
 80114ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80114be:	4b16      	ldr	r3, [pc, #88]	@ (8011518 <SendReJoinReq+0x8c>)
 80114c0:	22ff      	movs	r2, #255	@ 0xff
 80114c2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80114c6:	7b3b      	ldrb	r3, [r7, #12]
 80114c8:	f36f 1347 	bfc	r3, #5, #3
 80114cc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80114ce:	7b3a      	ldrb	r2, [r7, #12]
 80114d0:	4b11      	ldr	r3, [pc, #68]	@ (8011518 <SendReJoinReq+0x8c>)
 80114d2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80114d6:	f7fc f869 	bl	800d5ac <SecureElementGetJoinEui>
 80114da:	4603      	mov	r3, r0
 80114dc:	2208      	movs	r2, #8
 80114de:	4619      	mov	r1, r3
 80114e0:	480f      	ldr	r0, [pc, #60]	@ (8011520 <SendReJoinReq+0x94>)
 80114e2:	f006 fe38 	bl	8018156 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80114e6:	f7fc f83f 	bl	800d568 <SecureElementGetDevEui>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2208      	movs	r2, #8
 80114ee:	4619      	mov	r1, r3
 80114f0:	480c      	ldr	r0, [pc, #48]	@ (8011524 <SendReJoinReq+0x98>)
 80114f2:	f006 fe30 	bl	8018156 <memcpy1>

            allowDelayedTx = false;
 80114f6:	2300      	movs	r3, #0
 80114f8:	73fb      	strb	r3, [r7, #15]

            break;
 80114fa:	e002      	b.n	8011502 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80114fc:	2302      	movs	r3, #2
 80114fe:	73bb      	strb	r3, [r7, #14]
            break;
 8011500:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011502:	7bfb      	ldrb	r3, [r7, #15]
 8011504:	4618      	mov	r0, r3
 8011506:	f000 f8ff 	bl	8011708 <ScheduleTx>
 801150a:	4603      	mov	r3, r0
 801150c:	73bb      	strb	r3, [r7, #14]
    return status;
 801150e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3710      	adds	r7, #16
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	200008d0 	.word	0x200008d0
 801151c:	200008d2 	.word	0x200008d2
 8011520:	200009de 	.word	0x200009de
 8011524:	200009e6 	.word	0x200009e6

08011528 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801152c:	f002 fc36 	bl	8013d9c <LoRaMacClassBIsBeaconExpected>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011536:	230e      	movs	r3, #14
 8011538:	e013      	b.n	8011562 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801153a:	4b0b      	ldr	r3, [pc, #44]	@ (8011568 <CheckForClassBCollision+0x40>)
 801153c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011540:	2b01      	cmp	r3, #1
 8011542:	d10d      	bne.n	8011560 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011544:	f002 fc31 	bl	8013daa <LoRaMacClassBIsPingExpected>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801154e:	230f      	movs	r3, #15
 8011550:	e007      	b.n	8011562 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011552:	f002 fc31 	bl	8013db8 <LoRaMacClassBIsMulticastExpected>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801155c:	230f      	movs	r3, #15
 801155e:	e000      	b.n	8011562 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	20000df0 	.word	0x20000df0

0801156c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801156c:	b590      	push	{r4, r7, lr}
 801156e:	b083      	sub	sp, #12
 8011570:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011572:	4b2d      	ldr	r3, [pc, #180]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 8011574:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011578:	4b2b      	ldr	r3, [pc, #172]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 801157a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801157e:	4b2a      	ldr	r3, [pc, #168]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 8011580:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 8011584:	4b28      	ldr	r3, [pc, #160]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 8011586:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801158a:	4b27      	ldr	r3, [pc, #156]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 801158c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011590:	b25b      	sxtb	r3, r3
 8011592:	f004 fc94 	bl	8015ebe <RegionApplyDrOffset>
 8011596:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011598:	b259      	sxtb	r1, r3
 801159a:	4b23      	ldr	r3, [pc, #140]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 801159c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80115a0:	4b21      	ldr	r3, [pc, #132]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115a4:	4821      	ldr	r0, [pc, #132]	@ (801162c <ComputeRxWindowParameters+0xc0>)
 80115a6:	9000      	str	r0, [sp, #0]
 80115a8:	4620      	mov	r0, r4
 80115aa:	f004 fbaa 	bl	8015d02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115ae:	4b1e      	ldr	r3, [pc, #120]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115b0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80115b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115ba:	b259      	sxtb	r1, r3
 80115bc:	4b1a      	ldr	r3, [pc, #104]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115be:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80115c2:	4b19      	ldr	r3, [pc, #100]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115c6:	4c1a      	ldr	r4, [pc, #104]	@ (8011630 <ComputeRxWindowParameters+0xc4>)
 80115c8:	9400      	str	r4, [sp, #0]
 80115ca:	f004 fb9a 	bl	8015d02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80115ce:	4b16      	ldr	r3, [pc, #88]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115d2:	4a18      	ldr	r2, [pc, #96]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 80115d4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80115d8:	4413      	add	r3, r2
 80115da:	4a16      	ldr	r2, [pc, #88]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 80115dc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80115e0:	4b11      	ldr	r3, [pc, #68]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115e4:	4a13      	ldr	r2, [pc, #76]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 80115e6:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80115ea:	4413      	add	r3, r2
 80115ec:	4a11      	ldr	r2, [pc, #68]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 80115ee:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80115f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115f4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d111      	bne.n	8011620 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80115fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 80115fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011600:	4a0c      	ldr	r2, [pc, #48]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 8011602:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011606:	4413      	add	r3, r2
 8011608:	4a0a      	ldr	r2, [pc, #40]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 801160a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801160e:	4b06      	ldr	r3, [pc, #24]	@ (8011628 <ComputeRxWindowParameters+0xbc>)
 8011610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011612:	4a08      	ldr	r2, [pc, #32]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 8011614:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011618:	4413      	add	r3, r2
 801161a:	4a06      	ldr	r2, [pc, #24]	@ (8011634 <ComputeRxWindowParameters+0xc8>)
 801161c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8011620:	bf00      	nop
 8011622:	3704      	adds	r7, #4
 8011624:	46bd      	mov	sp, r7
 8011626:	bd90      	pop	{r4, r7, pc}
 8011628:	20000df0 	.word	0x20000df0
 801162c:	20000c88 	.word	0x20000c88
 8011630:	20000ca0 	.word	0x20000ca0
 8011634:	200008d0 	.word	0x200008d0

08011638 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011642:	4b13      	ldr	r3, [pc, #76]	@ (8011690 <VerifyTxFrame+0x58>)
 8011644:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011648:	2b00      	cmp	r3, #0
 801164a:	d01b      	beq.n	8011684 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801164c:	1d3b      	adds	r3, r7, #4
 801164e:	4618      	mov	r0, r3
 8011650:	f002 fe28 	bl	80142a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801165a:	2313      	movs	r3, #19
 801165c:	e013      	b.n	8011686 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801165e:	4b0d      	ldr	r3, [pc, #52]	@ (8011694 <VerifyTxFrame+0x5c>)
 8011660:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011664:	4a0a      	ldr	r2, [pc, #40]	@ (8011690 <VerifyTxFrame+0x58>)
 8011666:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	b2d2      	uxtb	r2, r2
 801166e:	4618      	mov	r0, r3
 8011670:	f7ff f918 	bl	80108a4 <ValidatePayloadLength>
 8011674:	4603      	mov	r3, r0
 8011676:	f083 0301 	eor.w	r3, r3, #1
 801167a:	b2db      	uxtb	r3, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011680:	2308      	movs	r3, #8
 8011682:	e000      	b.n	8011686 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	20000df0 	.word	0x20000df0
 8011694:	200008d0 	.word	0x200008d0

08011698 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801169e:	4b18      	ldr	r3, [pc, #96]	@ (8011700 <SerializeTxFrame+0x68>)
 80116a0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <SerializeTxFrame+0x16>
 80116a8:	2b04      	cmp	r3, #4
 80116aa:	d011      	beq.n	80116d0 <SerializeTxFrame+0x38>
 80116ac:	e021      	b.n	80116f2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80116ae:	4815      	ldr	r0, [pc, #84]	@ (8011704 <SerializeTxFrame+0x6c>)
 80116b0:	f004 f929 	bl	8015906 <LoRaMacSerializerJoinRequest>
 80116b4:	4603      	mov	r3, r0
 80116b6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d001      	beq.n	80116c2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80116be:	2311      	movs	r3, #17
 80116c0:	e01a      	b.n	80116f8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80116c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011700 <SerializeTxFrame+0x68>)
 80116c4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80116c8:	461a      	mov	r2, r3
 80116ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011700 <SerializeTxFrame+0x68>)
 80116cc:	801a      	strh	r2, [r3, #0]
            break;
 80116ce:	e012      	b.n	80116f6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80116d0:	480c      	ldr	r0, [pc, #48]	@ (8011704 <SerializeTxFrame+0x6c>)
 80116d2:	f004 f99a 	bl	8015a0a <LoRaMacSerializerData>
 80116d6:	4603      	mov	r3, r0
 80116d8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80116da:	79fb      	ldrb	r3, [r7, #7]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80116e0:	2311      	movs	r3, #17
 80116e2:	e009      	b.n	80116f8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80116e4:	4b06      	ldr	r3, [pc, #24]	@ (8011700 <SerializeTxFrame+0x68>)
 80116e6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80116ea:	461a      	mov	r2, r3
 80116ec:	4b04      	ldr	r3, [pc, #16]	@ (8011700 <SerializeTxFrame+0x68>)
 80116ee:	801a      	strh	r2, [r3, #0]
            break;
 80116f0:	e001      	b.n	80116f6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80116f2:	2303      	movs	r3, #3
 80116f4:	e000      	b.n	80116f8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3708      	adds	r7, #8
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	200008d0 	.word	0x200008d0
 8011704:	200009d8 	.word	0x200009d8

08011708 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b090      	sub	sp, #64	@ 0x40
 801170c:	af02      	add	r7, sp, #8
 801170e:	4603      	mov	r3, r0
 8011710:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011712:	2303      	movs	r3, #3
 8011714:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011718:	f7ff ff06 	bl	8011528 <CheckForClassBCollision>
 801171c:	4603      	mov	r3, r0
 801171e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011722:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011726:	2b00      	cmp	r3, #0
 8011728:	d002      	beq.n	8011730 <ScheduleTx+0x28>
    {
        return status;
 801172a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801172e:	e08f      	b.n	8011850 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011730:	f000 f8f4 	bl	801191c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011734:	f7ff ffb0 	bl	8011698 <SerializeTxFrame>
 8011738:	4603      	mov	r3, r0
 801173a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801173e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011742:	2b00      	cmp	r3, #0
 8011744:	d002      	beq.n	801174c <ScheduleTx+0x44>
    {
        return status;
 8011746:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801174a:	e081      	b.n	8011850 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801174c:	4b42      	ldr	r3, [pc, #264]	@ (8011858 <ScheduleTx+0x150>)
 801174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011750:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011752:	4b41      	ldr	r3, [pc, #260]	@ (8011858 <ScheduleTx+0x150>)
 8011754:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011758:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801175a:	4b3f      	ldr	r3, [pc, #252]	@ (8011858 <ScheduleTx+0x150>)
 801175c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8011760:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011766:	4618      	mov	r0, r3
 8011768:	f00a f90c 	bl	801b984 <SysTimeGetMcuTime>
 801176c:	4638      	mov	r0, r7
 801176e:	4b3a      	ldr	r3, [pc, #232]	@ (8011858 <ScheduleTx+0x150>)
 8011770:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8011774:	9200      	str	r2, [sp, #0]
 8011776:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801177a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801177e:	ca06      	ldmia	r2, {r1, r2}
 8011780:	f00a f861 	bl	801b846 <SysTimeSub>
 8011784:	f107 0320 	add.w	r3, r7, #32
 8011788:	463a      	mov	r2, r7
 801178a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801178e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011792:	4b31      	ldr	r3, [pc, #196]	@ (8011858 <ScheduleTx+0x150>)
 8011794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011796:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011798:	2300      	movs	r3, #0
 801179a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801179e:	2301      	movs	r3, #1
 80117a0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80117a2:	4b2e      	ldr	r3, [pc, #184]	@ (801185c <ScheduleTx+0x154>)
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80117a8:	4b2b      	ldr	r3, [pc, #172]	@ (8011858 <ScheduleTx+0x150>)
 80117aa:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d104      	bne.n	80117bc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80117b2:	2301      	movs	r3, #1
 80117b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80117b8:	2300      	movs	r3, #0
 80117ba:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80117bc:	4b26      	ldr	r3, [pc, #152]	@ (8011858 <ScheduleTx+0x150>)
 80117be:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80117c2:	f107 0114 	add.w	r1, r7, #20
 80117c6:	4b26      	ldr	r3, [pc, #152]	@ (8011860 <ScheduleTx+0x158>)
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	4b26      	ldr	r3, [pc, #152]	@ (8011864 <ScheduleTx+0x15c>)
 80117cc:	4a26      	ldr	r2, [pc, #152]	@ (8011868 <ScheduleTx+0x160>)
 80117ce:	f004 fb5e 	bl	8015e8e <RegionNextChannel>
 80117d2:	4603      	mov	r3, r0
 80117d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80117d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d022      	beq.n	8011826 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80117e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117e4:	2b0b      	cmp	r3, #11
 80117e6:	d11b      	bne.n	8011820 <ScheduleTx+0x118>
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d018      	beq.n	8011820 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80117ee:	4b1b      	ldr	r3, [pc, #108]	@ (801185c <ScheduleTx+0x154>)
 80117f0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d011      	beq.n	801181c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80117f8:	4b18      	ldr	r3, [pc, #96]	@ (801185c <ScheduleTx+0x154>)
 80117fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80117fe:	f043 0320 	orr.w	r3, r3, #32
 8011802:	4a16      	ldr	r2, [pc, #88]	@ (801185c <ScheduleTx+0x154>)
 8011804:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011808:	4b14      	ldr	r3, [pc, #80]	@ (801185c <ScheduleTx+0x154>)
 801180a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 801180e:	4619      	mov	r1, r3
 8011810:	4816      	ldr	r0, [pc, #88]	@ (801186c <ScheduleTx+0x164>)
 8011812:	f00a fe55 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011816:	4815      	ldr	r0, [pc, #84]	@ (801186c <ScheduleTx+0x164>)
 8011818:	f00a fd74 	bl	801c304 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801181c:	2300      	movs	r3, #0
 801181e:	e017      	b.n	8011850 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011824:	e014      	b.n	8011850 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011826:	f7ff fea1 	bl	801156c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801182a:	f7ff ff05 	bl	8011638 <VerifyTxFrame>
 801182e:	4603      	mov	r3, r0
 8011830:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <ScheduleTx+0x13a>
    {
        return status;
 801183c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011840:	e006      	b.n	8011850 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011842:	4b06      	ldr	r3, [pc, #24]	@ (801185c <ScheduleTx+0x154>)
 8011844:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8011848:	4618      	mov	r0, r3
 801184a:	f000 fb3b 	bl	8011ec4 <SendFrameOnChannel>
 801184e:	4603      	mov	r3, r0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3738      	adds	r7, #56	@ 0x38
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	20000df0 	.word	0x20000df0
 801185c:	200008d0 	.word	0x200008d0
 8011860:	20000e20 	.word	0x20000e20
 8011864:	20000d68 	.word	0x20000d68
 8011868:	20000cef 	.word	0x20000cef
 801186c:	20000c38 	.word	0x20000c38

08011870 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	4603      	mov	r3, r0
 8011878:	460a      	mov	r2, r1
 801187a:	71fb      	strb	r3, [r7, #7]
 801187c:	4613      	mov	r3, r2
 801187e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011880:	2312      	movs	r3, #18
 8011882:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011884:	2300      	movs	r3, #0
 8011886:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011888:	4b22      	ldr	r3, [pc, #136]	@ (8011914 <SecureFrame+0xa4>)
 801188a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801188e:	2b00      	cmp	r3, #0
 8011890:	d002      	beq.n	8011898 <SecureFrame+0x28>
 8011892:	2b04      	cmp	r3, #4
 8011894:	d011      	beq.n	80118ba <SecureFrame+0x4a>
 8011896:	e036      	b.n	8011906 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011898:	481f      	ldr	r0, [pc, #124]	@ (8011918 <SecureFrame+0xa8>)
 801189a:	f003 fc07 	bl	80150ac <LoRaMacCryptoPrepareJoinRequest>
 801189e:	4603      	mov	r3, r0
 80118a0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d001      	beq.n	80118ac <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80118a8:	2311      	movs	r3, #17
 80118aa:	e02f      	b.n	801190c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80118ac:	4b19      	ldr	r3, [pc, #100]	@ (8011914 <SecureFrame+0xa4>)
 80118ae:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80118b2:	461a      	mov	r2, r3
 80118b4:	4b17      	ldr	r3, [pc, #92]	@ (8011914 <SecureFrame+0xa4>)
 80118b6:	801a      	strh	r2, [r3, #0]
            break;
 80118b8:	e027      	b.n	801190a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80118ba:	f107 0308 	add.w	r3, r7, #8
 80118be:	4618      	mov	r0, r3
 80118c0:	f003 fb38 	bl	8014f34 <LoRaMacCryptoGetFCntUp>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d001      	beq.n	80118ce <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80118ca:	2312      	movs	r3, #18
 80118cc:	e01e      	b.n	801190c <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80118ce:	4b11      	ldr	r3, [pc, #68]	@ (8011914 <SecureFrame+0xa4>)
 80118d0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d002      	beq.n	80118de <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	3b01      	subs	r3, #1
 80118dc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80118de:	68b8      	ldr	r0, [r7, #8]
 80118e0:	79ba      	ldrb	r2, [r7, #6]
 80118e2:	79f9      	ldrb	r1, [r7, #7]
 80118e4:	4b0c      	ldr	r3, [pc, #48]	@ (8011918 <SecureFrame+0xa8>)
 80118e6:	f003 fcf3 	bl	80152d0 <LoRaMacCryptoSecureMessage>
 80118ea:	4603      	mov	r3, r0
 80118ec:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80118ee:	7bfb      	ldrb	r3, [r7, #15]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80118f4:	2311      	movs	r3, #17
 80118f6:	e009      	b.n	801190c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80118f8:	4b06      	ldr	r3, [pc, #24]	@ (8011914 <SecureFrame+0xa4>)
 80118fa:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80118fe:	461a      	mov	r2, r3
 8011900:	4b04      	ldr	r3, [pc, #16]	@ (8011914 <SecureFrame+0xa4>)
 8011902:	801a      	strh	r2, [r3, #0]
            break;
 8011904:	e001      	b.n	801190a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011906:	2303      	movs	r3, #3
 8011908:	e000      	b.n	801190c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	200008d0 	.word	0x200008d0
 8011918:	200009d8 	.word	0x200009d8

0801191c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801191c:	b480      	push	{r7}
 801191e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011920:	4b09      	ldr	r3, [pc, #36]	@ (8011948 <CalculateBackOff+0x2c>)
 8011922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011924:	2b00      	cmp	r3, #0
 8011926:	d10a      	bne.n	801193e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011928:	4b07      	ldr	r3, [pc, #28]	@ (8011948 <CalculateBackOff+0x2c>)
 801192a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 801192e:	3b01      	subs	r3, #1
 8011930:	4a06      	ldr	r2, [pc, #24]	@ (801194c <CalculateBackOff+0x30>)
 8011932:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8011936:	fb02 f303 	mul.w	r3, r2, r3
 801193a:	4a03      	ldr	r2, [pc, #12]	@ (8011948 <CalculateBackOff+0x2c>)
 801193c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801193e:	bf00      	nop
 8011940:	46bd      	mov	sp, r7
 8011942:	bc80      	pop	{r7}
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	20000df0 	.word	0x20000df0
 801194c:	200008d0 	.word	0x200008d0

08011950 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	7139      	strb	r1, [r7, #4]
 801195a:	71fb      	strb	r3, [r7, #7]
 801195c:	4613      	mov	r3, r2
 801195e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011960:	79fb      	ldrb	r3, [r7, #7]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d002      	beq.n	801196c <RemoveMacCommands+0x1c>
 8011966:	79fb      	ldrb	r3, [r7, #7]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d10d      	bne.n	8011988 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801196c:	79bb      	ldrb	r3, [r7, #6]
 801196e:	2b01      	cmp	r3, #1
 8011970:	d108      	bne.n	8011984 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011972:	793b      	ldrb	r3, [r7, #4]
 8011974:	f003 0320 	and.w	r3, r3, #32
 8011978:	b2db      	uxtb	r3, r3
 801197a:	2b00      	cmp	r3, #0
 801197c:	d004      	beq.n	8011988 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801197e:	f002 fc6f 	bl	8014260 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011982:	e001      	b.n	8011988 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011984:	f002 fc6c 	bl	8014260 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011988:	bf00      	nop
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011990:	b5b0      	push	{r4, r5, r7, lr}
 8011992:	b090      	sub	sp, #64	@ 0x40
 8011994:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011996:	4b70      	ldr	r3, [pc, #448]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011998:	2200      	movs	r2, #0
 801199a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801199e:	4b6e      	ldr	r3, [pc, #440]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80119a4:	4b6d      	ldr	r3, [pc, #436]	@ (8011b5c <ResetMacParameters+0x1cc>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80119ac:	4b6b      	ldr	r3, [pc, #428]	@ (8011b5c <ResetMacParameters+0x1cc>)
 80119ae:	2200      	movs	r2, #0
 80119b0:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80119b4:	4b69      	ldr	r3, [pc, #420]	@ (8011b5c <ResetMacParameters+0x1cc>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80119bc:	4b66      	ldr	r3, [pc, #408]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80119c4:	4b64      	ldr	r3, [pc, #400]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119c6:	2201      	movs	r2, #1
 80119c8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80119cc:	4b62      	ldr	r3, [pc, #392]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119ce:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80119d2:	4b61      	ldr	r3, [pc, #388]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80119d8:	4b5f      	ldr	r3, [pc, #380]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119da:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80119de:	4b5e      	ldr	r3, [pc, #376]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80119e4:	4b5c      	ldr	r3, [pc, #368]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119e6:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80119ea:	4b5b      	ldr	r3, [pc, #364]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80119f0:	4b59      	ldr	r3, [pc, #356]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119f2:	4a59      	ldr	r2, [pc, #356]	@ (8011b58 <ResetMacParameters+0x1c8>)
 80119f4:	3364      	adds	r3, #100	@ 0x64
 80119f6:	32a8      	adds	r2, #168	@ 0xa8
 80119f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119fc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011a00:	4b55      	ldr	r3, [pc, #340]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a02:	4a55      	ldr	r2, [pc, #340]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a04:	336c      	adds	r3, #108	@ 0x6c
 8011a06:	32b0      	adds	r2, #176	@ 0xb0
 8011a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a0c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011a10:	4b51      	ldr	r3, [pc, #324]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a12:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8011a16:	4b50      	ldr	r3, [pc, #320]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a18:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a1e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8011a22:	4b4d      	ldr	r3, [pc, #308]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a24:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011a28:	4b4b      	ldr	r3, [pc, #300]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a30:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011a32:	4b49      	ldr	r3, [pc, #292]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011a38:	4a47      	ldr	r2, [pc, #284]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a3a:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8011a3c:	4b47      	ldr	r3, [pc, #284]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8011a44:	4b44      	ldr	r3, [pc, #272]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011a4c:	4b42      	ldr	r3, [pc, #264]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8011a54:	4b40      	ldr	r3, [pc, #256]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011a60:	4b3f      	ldr	r3, [pc, #252]	@ (8011b60 <ResetMacParameters+0x1d0>)
 8011a62:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011a64:	4b3f      	ldr	r3, [pc, #252]	@ (8011b64 <ResetMacParameters+0x1d4>)
 8011a66:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8011a68:	4b3f      	ldr	r3, [pc, #252]	@ (8011b68 <ResetMacParameters+0x1d8>)
 8011a6a:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a72:	1d3a      	adds	r2, r7, #4
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f004 f8f5 	bl	8015c66 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011a7c:	4b37      	ldr	r3, [pc, #220]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011a84:	4b35      	ldr	r3, [pc, #212]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011a86:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8011a8a:	4b34      	ldr	r3, [pc, #208]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011a8c:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011a90:	4b31      	ldr	r3, [pc, #196]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a94:	4a31      	ldr	r2, [pc, #196]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011a96:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011a9c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011aa2:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011aa8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011aac:	4b2b      	ldr	r3, [pc, #172]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011aae:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011aba:	4b28      	ldr	r3, [pc, #160]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011abc:	2201      	movs	r2, #1
 8011abe:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011ac2:	4b25      	ldr	r3, [pc, #148]	@ (8011b58 <ResetMacParameters+0x1c8>)
 8011ac4:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011ac8:	4b24      	ldr	r3, [pc, #144]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011aca:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011ace:	4a23      	ldr	r2, [pc, #140]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011ad0:	4b22      	ldr	r3, [pc, #136]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011ad2:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8011ad6:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8011ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011ae2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011aee:	4b1b      	ldr	r3, [pc, #108]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011af0:	2202      	movs	r2, #2
 8011af2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011af6:	2300      	movs	r3, #0
 8011af8:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011afe:	4b17      	ldr	r3, [pc, #92]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011b00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d009      	beq.n	8011b1c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011b08:	4b14      	ldr	r3, [pc, #80]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011b0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011b12:	4b12      	ldr	r3, [pc, #72]	@ (8011b5c <ResetMacParameters+0x1cc>)
 8011b14:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011b1c:	4b13      	ldr	r3, [pc, #76]	@ (8011b6c <ResetMacParameters+0x1dc>)
 8011b1e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011b20:	4b13      	ldr	r3, [pc, #76]	@ (8011b70 <ResetMacParameters+0x1e0>)
 8011b22:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011b24:	4b13      	ldr	r3, [pc, #76]	@ (8011b74 <ResetMacParameters+0x1e4>)
 8011b26:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011b28:	4b13      	ldr	r3, [pc, #76]	@ (8011b78 <ResetMacParameters+0x1e8>)
 8011b2a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011b2c:	4b13      	ldr	r3, [pc, #76]	@ (8011b7c <ResetMacParameters+0x1ec>)
 8011b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011b30:	4b13      	ldr	r3, [pc, #76]	@ (8011b80 <ResetMacParameters+0x1f0>)
 8011b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011b34:	4b13      	ldr	r3, [pc, #76]	@ (8011b84 <ResetMacParameters+0x1f4>)
 8011b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011b38:	4b13      	ldr	r3, [pc, #76]	@ (8011b88 <ResetMacParameters+0x1f8>)
 8011b3a:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011b3c:	4b13      	ldr	r3, [pc, #76]	@ (8011b8c <ResetMacParameters+0x1fc>)
 8011b3e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011b40:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011b44:	f107 0314 	add.w	r3, r7, #20
 8011b48:	4a11      	ldr	r2, [pc, #68]	@ (8011b90 <ResetMacParameters+0x200>)
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f002 f8cf 	bl	8013cee <LoRaMacClassBInit>
}
 8011b50:	bf00      	nop
 8011b52:	3740      	adds	r7, #64	@ 0x40
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bdb0      	pop	{r4, r5, r7, pc}
 8011b58:	20000df0 	.word	0x20000df0
 8011b5c:	200008d0 	.word	0x200008d0
 8011b60:	20000fd4 	.word	0x20000fd4
 8011b64:	20000fd8 	.word	0x20000fd8
 8011b68:	200018e8 	.word	0x200018e8
 8011b6c:	20000d3c 	.word	0x20000d3c
 8011b70:	20000cf4 	.word	0x20000cf4
 8011b74:	20000d28 	.word	0x20000d28
 8011b78:	20000d65 	.word	0x20000d65
 8011b7c:	20000ec4 	.word	0x20000ec4
 8011b80:	20000e30 	.word	0x20000e30
 8011b84:	20000e34 	.word	0x20000e34
 8011b88:	20000ec8 	.word	0x20000ec8
 8011b8c:	20000f0c 	.word	0x20000f0c
 8011b90:	20001354 	.word	0x20001354

08011b94 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f00a fc1e 	bl	801c3e0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011ba4:	4b11      	ldr	r3, [pc, #68]	@ (8011bec <RxWindowSetup+0x58>)
 8011ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ba8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011baa:	4b11      	ldr	r3, [pc, #68]	@ (8011bf0 <RxWindowSetup+0x5c>)
 8011bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011bb0:	4a10      	ldr	r2, [pc, #64]	@ (8011bf4 <RxWindowSetup+0x60>)
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f004 f8be 	bl	8015d36 <RegionRxConfig>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d010      	beq.n	8011be2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf8 <RxWindowSetup+0x64>)
 8011bc2:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8011bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8011bf8 <RxWindowSetup+0x64>)
 8011bc8:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011bcc:	4b07      	ldr	r3, [pc, #28]	@ (8011bec <RxWindowSetup+0x58>)
 8011bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bd0:	4a07      	ldr	r2, [pc, #28]	@ (8011bf0 <RxWindowSetup+0x5c>)
 8011bd2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	7cda      	ldrb	r2, [r3, #19]
 8011bdc:	4b06      	ldr	r3, [pc, #24]	@ (8011bf8 <RxWindowSetup+0x64>)
 8011bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8011be2:	bf00      	nop
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	08020714 	.word	0x08020714
 8011bf0:	20000df0 	.word	0x20000df0
 8011bf4:	20000cf8 	.word	0x20000cf8
 8011bf8:	200008d0 	.word	0x200008d0

08011bfc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011bfc:	b590      	push	{r4, r7, lr}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011c02:	4b1e      	ldr	r3, [pc, #120]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c04:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011c08:	4b1c      	ldr	r3, [pc, #112]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c0a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011c0e:	b259      	sxtb	r1, r3
 8011c10:	4b1a      	ldr	r3, [pc, #104]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c12:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011c16:	4b19      	ldr	r3, [pc, #100]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c1a:	4c19      	ldr	r4, [pc, #100]	@ (8011c80 <OpenContinuousRxCWindow+0x84>)
 8011c1c:	9400      	str	r4, [sp, #0]
 8011c1e:	f004 f870 	bl	8015d02 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011c22:	4b18      	ldr	r3, [pc, #96]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c24:	2202      	movs	r2, #2
 8011c26:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011c2a:	4b14      	ldr	r3, [pc, #80]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c2c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011c30:	4b14      	ldr	r3, [pc, #80]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c32:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011c36:	4b13      	ldr	r3, [pc, #76]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011c7c <OpenContinuousRxCWindow+0x80>)
 8011c40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c44:	4a10      	ldr	r2, [pc, #64]	@ (8011c88 <OpenContinuousRxCWindow+0x8c>)
 8011c46:	490e      	ldr	r1, [pc, #56]	@ (8011c80 <OpenContinuousRxCWindow+0x84>)
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f004 f874 	bl	8015d36 <RegionRxConfig>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00f      	beq.n	8011c74 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011c54:	4b0b      	ldr	r3, [pc, #44]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c56:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8011c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c5c:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8011c60:	4b0a      	ldr	r3, [pc, #40]	@ (8011c8c <OpenContinuousRxCWindow+0x90>)
 8011c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c64:	2000      	movs	r0, #0
 8011c66:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011c68:	4b06      	ldr	r3, [pc, #24]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c6a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8011c6e:	4b05      	ldr	r3, [pc, #20]	@ (8011c84 <OpenContinuousRxCWindow+0x88>)
 8011c70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8011c74:	bf00      	nop
 8011c76:	3704      	adds	r7, #4
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd90      	pop	{r4, r7, pc}
 8011c7c:	20000df0 	.word	0x20000df0
 8011c80:	20000cb8 	.word	0x20000cb8
 8011c84:	200008d0 	.word	0x200008d0
 8011c88:	20000cf8 	.word	0x20000cf8
 8011c8c:	08020714 	.word	0x08020714

08011c90 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b088      	sub	sp, #32
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	603b      	str	r3, [r7, #0]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011ca0:	4b81      	ldr	r3, [pc, #516]	@ (8011ea8 <PrepareFrame+0x218>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011ca6:	4b80      	ldr	r3, [pc, #512]	@ (8011ea8 <PrepareFrame+0x218>)
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011cc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	6839      	ldr	r1, [r7, #0]
 8011cca:	4878      	ldr	r0, [pc, #480]	@ (8011eac <PrepareFrame+0x21c>)
 8011ccc:	f006 fa43 	bl	8018156 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011cd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	4b74      	ldr	r3, [pc, #464]	@ (8011ea8 <PrepareFrame+0x218>)
 8011cd6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	781a      	ldrb	r2, [r3, #0]
 8011cde:	4b72      	ldr	r3, [pc, #456]	@ (8011ea8 <PrepareFrame+0x218>)
 8011ce0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b07      	cmp	r3, #7
 8011cee:	f000 80b9 	beq.w	8011e64 <PrepareFrame+0x1d4>
 8011cf2:	2b07      	cmp	r3, #7
 8011cf4:	f300 80ce 	bgt.w	8011e94 <PrepareFrame+0x204>
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d006      	beq.n	8011d0a <PrepareFrame+0x7a>
 8011cfc:	2b04      	cmp	r3, #4
 8011cfe:	f040 80c9 	bne.w	8011e94 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011d02:	4b69      	ldr	r3, [pc, #420]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d04:	2201      	movs	r2, #1
 8011d06:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011d0a:	4b67      	ldr	r3, [pc, #412]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d0c:	2204      	movs	r2, #4
 8011d0e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011d12:	4b65      	ldr	r3, [pc, #404]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d14:	4a66      	ldr	r2, [pc, #408]	@ (8011eb0 <PrepareFrame+0x220>)
 8011d16:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011d1a:	4b63      	ldr	r3, [pc, #396]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d1c:	22ff      	movs	r2, #255	@ 0xff
 8011d1e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	781a      	ldrb	r2, [r3, #0]
 8011d26:	4b60      	ldr	r3, [pc, #384]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d28:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011d34:	4b5f      	ldr	r3, [pc, #380]	@ (8011eb4 <PrepareFrame+0x224>)
 8011d36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d3c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	781a      	ldrb	r2, [r3, #0]
 8011d44:	4b58      	ldr	r3, [pc, #352]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d46:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011d4a:	4b57      	ldr	r3, [pc, #348]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d4c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011d50:	4b55      	ldr	r3, [pc, #340]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d52:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011d56:	4b54      	ldr	r3, [pc, #336]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d58:	4a54      	ldr	r2, [pc, #336]	@ (8011eac <PrepareFrame+0x21c>)
 8011d5a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011d5e:	f107 0318 	add.w	r3, r7, #24
 8011d62:	4618      	mov	r0, r3
 8011d64:	f003 f8e6 	bl	8014f34 <LoRaMacCryptoGetFCntUp>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011d6e:	2312      	movs	r3, #18
 8011d70:	e096      	b.n	8011ea0 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	4b4c      	ldr	r3, [pc, #304]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d78:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011d84:	4b48      	ldr	r3, [pc, #288]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	4a46      	ldr	r2, [pc, #280]	@ (8011ea8 <PrepareFrame+0x218>)
 8011d90:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011d94:	f107 0314 	add.w	r3, r7, #20
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f002 fa83 	bl	80142a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d001      	beq.n	8011da8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011da4:	2313      	movs	r3, #19
 8011da6:	e07b      	b.n	8011ea0 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d074      	beq.n	8011e98 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011dae:	4b41      	ldr	r3, [pc, #260]	@ (8011eb4 <PrepareFrame+0x224>)
 8011db0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fe fd4d 	bl	8010854 <GetMaxAppPayloadWithoutFOptsLength>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8011ea8 <PrepareFrame+0x218>)
 8011dc0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d01d      	beq.n	8011e04 <PrepareFrame+0x174>
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2b0f      	cmp	r3, #15
 8011dcc:	d81a      	bhi.n	8011e04 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011dce:	f107 0314 	add.w	r3, r7, #20
 8011dd2:	4a39      	ldr	r2, [pc, #228]	@ (8011eb8 <PrepareFrame+0x228>)
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	200f      	movs	r0, #15
 8011dd8:	f002 fa7a 	bl	80142d0 <LoRaMacCommandsSerializeCmds>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d001      	beq.n	8011de6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011de2:	2313      	movs	r3, #19
 8011de4:	e05c      	b.n	8011ea0 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	f003 030f 	and.w	r3, r3, #15
 8011dec:	b2d9      	uxtb	r1, r3
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	7813      	ldrb	r3, [r2, #0]
 8011df2:	f361 0303 	bfi	r3, r1, #0, #4
 8011df6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	781a      	ldrb	r2, [r3, #0]
 8011dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8011ea8 <PrepareFrame+0x218>)
 8011dfe:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011e02:	e049      	b.n	8011e98 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011e04:	4b28      	ldr	r3, [pc, #160]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e06:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d010      	beq.n	8011e30 <PrepareFrame+0x1a0>
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	2b0f      	cmp	r3, #15
 8011e12:	d90d      	bls.n	8011e30 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011e14:	7ffb      	ldrb	r3, [r7, #31]
 8011e16:	f107 0114 	add.w	r1, r7, #20
 8011e1a:	4a28      	ldr	r2, [pc, #160]	@ (8011ebc <PrepareFrame+0x22c>)
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f002 fa57 	bl	80142d0 <LoRaMacCommandsSerializeCmds>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d001      	beq.n	8011e2c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e28:	2313      	movs	r3, #19
 8011e2a:	e039      	b.n	8011ea0 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011e2c:	230a      	movs	r3, #10
 8011e2e:	e037      	b.n	8011ea0 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011e30:	7ffb      	ldrb	r3, [r7, #31]
 8011e32:	f107 0114 	add.w	r1, r7, #20
 8011e36:	4a21      	ldr	r2, [pc, #132]	@ (8011ebc <PrepareFrame+0x22c>)
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f002 fa49 	bl	80142d0 <LoRaMacCommandsSerializeCmds>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e44:	2313      	movs	r3, #19
 8011e46:	e02b      	b.n	8011ea0 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011e48:	4b17      	ldr	r3, [pc, #92]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011e50:	4b15      	ldr	r3, [pc, #84]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e52:	4a1a      	ldr	r2, [pc, #104]	@ (8011ebc <PrepareFrame+0x22c>)
 8011e54:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	4b12      	ldr	r3, [pc, #72]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e5e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8011e62:	e019      	b.n	8011e98 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d018      	beq.n	8011e9c <PrepareFrame+0x20c>
 8011e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e6c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d013      	beq.n	8011e9c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011e74:	4812      	ldr	r0, [pc, #72]	@ (8011ec0 <PrepareFrame+0x230>)
 8011e76:	4b0c      	ldr	r3, [pc, #48]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e78:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	6839      	ldr	r1, [r7, #0]
 8011e80:	f006 f969 	bl	8018156 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011e84:	4b08      	ldr	r3, [pc, #32]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e86:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	4b06      	ldr	r3, [pc, #24]	@ (8011ea8 <PrepareFrame+0x218>)
 8011e90:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011e92:	e003      	b.n	8011e9c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e94:	2302      	movs	r3, #2
 8011e96:	e003      	b.n	8011ea0 <PrepareFrame+0x210>
            break;
 8011e98:	bf00      	nop
 8011e9a:	e000      	b.n	8011e9e <PrepareFrame+0x20e>
            break;
 8011e9c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3720      	adds	r7, #32
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	200008d0 	.word	0x200008d0
 8011eac:	20000a08 	.word	0x20000a08
 8011eb0:	200008d2 	.word	0x200008d2
 8011eb4:	20000df0 	.word	0x20000df0
 8011eb8:	200009e8 	.word	0x200009e8
 8011ebc:	20000d70 	.word	0x20000d70
 8011ec0:	200008d3 	.word	0x200008d3

08011ec4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b08a      	sub	sp, #40	@ 0x28
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ece:	2303      	movs	r3, #3
 8011ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011ed8:	79fb      	ldrb	r3, [r7, #7]
 8011eda:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011edc:	4b4a      	ldr	r3, [pc, #296]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011ede:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011ee2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011ee4:	4b48      	ldr	r3, [pc, #288]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011ee6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011eea:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011eec:	4b46      	ldr	r3, [pc, #280]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ef0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011ef2:	4b45      	ldr	r3, [pc, #276]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ef6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011ef8:	4b44      	ldr	r3, [pc, #272]	@ (801200c <SendFrameOnChannel+0x148>)
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011efe:	4b42      	ldr	r3, [pc, #264]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011f00:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011f04:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011f06:	4b40      	ldr	r3, [pc, #256]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011f08:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011f0c:	f107 020f 	add.w	r2, r7, #15
 8011f10:	f107 0110 	add.w	r1, r7, #16
 8011f14:	4b3e      	ldr	r3, [pc, #248]	@ (8012010 <SendFrameOnChannel+0x14c>)
 8011f16:	f003 ff23 	bl	8015d60 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f1a:	4b3c      	ldr	r3, [pc, #240]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f1c:	2201      	movs	r2, #1
 8011f1e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011f22:	4b39      	ldr	r3, [pc, #228]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011f24:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b38      	ldr	r3, [pc, #224]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f2c:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011f30:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011f34:	4b35      	ldr	r3, [pc, #212]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f36:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	4a33      	ldr	r2, [pc, #204]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f3e:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f42:	4b32      	ldr	r3, [pc, #200]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f44:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011f48:	4a30      	ldr	r2, [pc, #192]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f4a:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f4e:	4b2f      	ldr	r3, [pc, #188]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f50:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011f54:	4a2d      	ldr	r2, [pc, #180]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f56:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011f5a:	f001 ff34 	bl	8013dc6 <LoRaMacClassBIsBeaconModeActive>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00b      	beq.n	8011f7c <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011f64:	4b29      	ldr	r3, [pc, #164]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f66:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f001 ff96 	bl	8013e9c <LoRaMacClassBIsUplinkCollision>
 8011f70:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d001      	beq.n	8011f7c <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011f78:	2310      	movs	r3, #16
 8011f7a:	e040      	b.n	8011ffe <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011f7c:	4b22      	ldr	r3, [pc, #136]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011f7e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d101      	bne.n	8011f8a <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011f86:	f001 ff93 	bl	8013eb0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011f8a:	f001 ff2d 	bl	8013de8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8012008 <SendFrameOnChannel+0x144>)
 8011f90:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	4a1d      	ldr	r2, [pc, #116]	@ (801200c <SendFrameOnChannel+0x148>)
 8011f98:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8011f9c:	4611      	mov	r1, r2
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff fc66 	bl	8011870 <SecureFrame>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d002      	beq.n	8011fb8 <SendFrameOnChannel+0xf4>
    {
        return status;
 8011fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fb6:	e022      	b.n	8011ffe <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011fb8:	4b14      	ldr	r3, [pc, #80]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011fbe:	f043 0302 	orr.w	r3, r3, #2
 8011fc2:	4a12      	ldr	r2, [pc, #72]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fc4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011fc8:	4b10      	ldr	r3, [pc, #64]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fca:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011fce:	3301      	adds	r3, #1
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	4b0e      	ldr	r3, [pc, #56]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fd4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011fd8:	4b0c      	ldr	r3, [pc, #48]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fda:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011fde:	4b0b      	ldr	r3, [pc, #44]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fe0:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8011fe4:	4b09      	ldr	r3, [pc, #36]	@ (801200c <SendFrameOnChannel+0x148>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011fec:	4b09      	ldr	r3, [pc, #36]	@ (8012014 <SendFrameOnChannel+0x150>)
 8011fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ff0:	4a06      	ldr	r2, [pc, #24]	@ (801200c <SendFrameOnChannel+0x148>)
 8011ff2:	8812      	ldrh	r2, [r2, #0]
 8011ff4:	b2d2      	uxtb	r2, r2
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	4807      	ldr	r0, [pc, #28]	@ (8012018 <SendFrameOnChannel+0x154>)
 8011ffa:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3728      	adds	r7, #40	@ 0x28
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	20000df0 	.word	0x20000df0
 801200c:	200008d0 	.word	0x200008d0
 8012010:	20000cf0 	.word	0x20000cf0
 8012014:	08020714 	.word	0x08020714
 8012018:	200008d2 	.word	0x200008d2

0801201c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	4603      	mov	r3, r0
 8012024:	6039      	str	r1, [r7, #0]
 8012026:	80fb      	strh	r3, [r7, #6]
 8012028:	4613      	mov	r3, r2
 801202a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801202c:	4b09      	ldr	r3, [pc, #36]	@ (8012054 <SetTxContinuousWave+0x38>)
 801202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012030:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012034:	88fa      	ldrh	r2, [r7, #6]
 8012036:	6838      	ldr	r0, [r7, #0]
 8012038:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801203a:	4b07      	ldr	r3, [pc, #28]	@ (8012058 <SetTxContinuousWave+0x3c>)
 801203c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012040:	f043 0302 	orr.w	r3, r3, #2
 8012044:	4a04      	ldr	r2, [pc, #16]	@ (8012058 <SetTxContinuousWave+0x3c>)
 8012046:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	08020714 	.word	0x08020714
 8012058:	200008d0 	.word	0x200008d0

0801205c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012066:	4b3e      	ldr	r3, [pc, #248]	@ (8012160 <RestoreNvmData+0x104>)
 8012068:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801206c:	2b01      	cmp	r3, #1
 801206e:	d001      	beq.n	8012074 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012070:	2301      	movs	r3, #1
 8012072:	e071      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012074:	2124      	movs	r1, #36	@ 0x24
 8012076:	483b      	ldr	r0, [pc, #236]	@ (8012164 <RestoreNvmData+0x108>)
 8012078:	f006 f8c2 	bl	8018200 <Crc32>
 801207c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801207e:	4b39      	ldr	r3, [pc, #228]	@ (8012164 <RestoreNvmData+0x108>)
 8012080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	429a      	cmp	r2, r3
 8012086:	d001      	beq.n	801208c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012088:	2317      	movs	r3, #23
 801208a:	e065      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801208c:	2114      	movs	r1, #20
 801208e:	4836      	ldr	r0, [pc, #216]	@ (8012168 <RestoreNvmData+0x10c>)
 8012090:	f006 f8b6 	bl	8018200 <Crc32>
 8012094:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012096:	4b33      	ldr	r3, [pc, #204]	@ (8012164 <RestoreNvmData+0x108>)
 8012098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	429a      	cmp	r2, r3
 801209e:	d001      	beq.n	80120a4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120a0:	2317      	movs	r3, #23
 80120a2:	e059      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80120a4:	21e0      	movs	r1, #224	@ 0xe0
 80120a6:	4831      	ldr	r0, [pc, #196]	@ (801216c <RestoreNvmData+0x110>)
 80120a8:	f006 f8aa 	bl	8018200 <Crc32>
 80120ac:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80120ae:	4b2d      	ldr	r3, [pc, #180]	@ (8012164 <RestoreNvmData+0x108>)
 80120b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d001      	beq.n	80120be <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120ba:	2317      	movs	r3, #23
 80120bc:	e04c      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80120be:	21bc      	movs	r1, #188	@ 0xbc
 80120c0:	482b      	ldr	r0, [pc, #172]	@ (8012170 <RestoreNvmData+0x114>)
 80120c2:	f006 f89d 	bl	8018200 <Crc32>
 80120c6:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80120c8:	4b26      	ldr	r3, [pc, #152]	@ (8012164 <RestoreNvmData+0x108>)
 80120ca:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d001      	beq.n	80120d8 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120d4:	2317      	movs	r3, #23
 80120d6:	e03f      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80120d8:	2100      	movs	r1, #0
 80120da:	4826      	ldr	r0, [pc, #152]	@ (8012174 <RestoreNvmData+0x118>)
 80120dc:	f006 f890 	bl	8018200 <Crc32>
 80120e0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80120e2:	4b20      	ldr	r3, [pc, #128]	@ (8012164 <RestoreNvmData+0x108>)
 80120e4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d001      	beq.n	80120f2 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120ee:	2317      	movs	r3, #23
 80120f0:	e032      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80120f2:	2114      	movs	r1, #20
 80120f4:	4820      	ldr	r0, [pc, #128]	@ (8012178 <RestoreNvmData+0x11c>)
 80120f6:	f006 f883 	bl	8018200 <Crc32>
 80120fa:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80120fc:	4b19      	ldr	r3, [pc, #100]	@ (8012164 <RestoreNvmData+0x108>)
 80120fe:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	429a      	cmp	r2, r3
 8012106:	d001      	beq.n	801210c <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012108:	2317      	movs	r3, #23
 801210a:	e025      	b.n	8012158 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801210c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8012110:	4914      	ldr	r1, [pc, #80]	@ (8012164 <RestoreNvmData+0x108>)
 8012112:	481a      	ldr	r0, [pc, #104]	@ (801217c <RestoreNvmData+0x120>)
 8012114:	f006 f81f 	bl	8018156 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012118:	f240 527c 	movw	r2, #1404	@ 0x57c
 801211c:	2100      	movs	r1, #0
 801211e:	4811      	ldr	r0, [pc, #68]	@ (8012164 <RestoreNvmData+0x108>)
 8012120:	f006 f854 	bl	80181cc <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012124:	4b0e      	ldr	r3, [pc, #56]	@ (8012160 <RestoreNvmData+0x104>)
 8012126:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801212a:	4b0d      	ldr	r3, [pc, #52]	@ (8012160 <RestoreNvmData+0x104>)
 801212c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012130:	4b12      	ldr	r3, [pc, #72]	@ (801217c <RestoreNvmData+0x120>)
 8012132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012134:	4a0a      	ldr	r2, [pc, #40]	@ (8012160 <RestoreNvmData+0x104>)
 8012136:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801213a:	4b10      	ldr	r3, [pc, #64]	@ (801217c <RestoreNvmData+0x120>)
 801213c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8012140:	4b07      	ldr	r3, [pc, #28]	@ (8012160 <RestoreNvmData+0x104>)
 8012142:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012146:	4b06      	ldr	r3, [pc, #24]	@ (8012160 <RestoreNvmData+0x104>)
 8012148:	2201      	movs	r2, #1
 801214a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801214e:	4b04      	ldr	r3, [pc, #16]	@ (8012160 <RestoreNvmData+0x104>)
 8012150:	2202      	movs	r2, #2
 8012152:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8012156:	2300      	movs	r3, #0
}
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	200008d0 	.word	0x200008d0
 8012164:	2000136c 	.word	0x2000136c
 8012168:	20001394 	.word	0x20001394
 801216c:	200013ac 	.word	0x200013ac
 8012170:	20001490 	.word	0x20001490
 8012174:	20001550 	.word	0x20001550
 8012178:	200018d0 	.word	0x200018d0
 801217c:	20000df0 	.word	0x20000df0

08012180 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <DetermineFrameType+0x16>
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012196:	2303      	movs	r3, #3
 8012198:	e03b      	b.n	8012212 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	7b1b      	ldrb	r3, [r3, #12]
 801219e:	f003 030f 	and.w	r3, r3, #15
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d008      	beq.n	80121ba <DetermineFrameType+0x3a>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d003      	beq.n	80121ba <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	2200      	movs	r2, #0
 80121b6:	701a      	strb	r2, [r3, #0]
 80121b8:	e02a      	b.n	8012210 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d103      	bne.n	80121cc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	2201      	movs	r2, #1
 80121c8:	701a      	strb	r2, [r3, #0]
 80121ca:	e021      	b.n	8012210 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	7b1b      	ldrb	r3, [r3, #12]
 80121d0:	f003 030f 	and.w	r3, r3, #15
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d108      	bne.n	80121ec <DetermineFrameType+0x6c>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d103      	bne.n	80121ec <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2202      	movs	r2, #2
 80121e8:	701a      	strb	r2, [r3, #0]
 80121ea:	e011      	b.n	8012210 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	7b1b      	ldrb	r3, [r3, #12]
 80121f0:	f003 030f 	and.w	r3, r3, #15
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d108      	bne.n	801220c <DetermineFrameType+0x8c>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d003      	beq.n	801220c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	2203      	movs	r2, #3
 8012208:	701a      	strb	r2, [r3, #0]
 801220a:	e001      	b.n	8012210 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801220c:	2318      	movs	r3, #24
 801220e:	e000      	b.n	8012212 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	bc80      	pop	{r7}
 801221a:	4770      	bx	lr

0801221c <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	4603      	mov	r3, r0
 8012224:	460a      	mov	r2, r1
 8012226:	71fb      	strb	r3, [r7, #7]
 8012228:	4613      	mov	r3, r2
 801222a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801222c:	79fa      	ldrb	r2, [r7, #7]
 801222e:	79bb      	ldrb	r3, [r7, #6]
 8012230:	429a      	cmp	r2, r3
 8012232:	d301      	bcc.n	8012238 <CheckRetrans+0x1c>
    {
        return true;
 8012234:	2301      	movs	r3, #1
 8012236:	e000      	b.n	801223a <CheckRetrans+0x1e>
    }
    return false;
 8012238:	2300      	movs	r3, #0
}
 801223a:	4618      	mov	r0, r3
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	bc80      	pop	{r7}
 8012242:	4770      	bx	lr

08012244 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012248:	4b12      	ldr	r3, [pc, #72]	@ (8012294 <CheckRetransUnconfirmedUplink+0x50>)
 801224a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801224e:	4a12      	ldr	r2, [pc, #72]	@ (8012298 <CheckRetransUnconfirmedUplink+0x54>)
 8012250:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8012254:	4611      	mov	r1, r2
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff ffe0 	bl	801221c <CheckRetrans>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012262:	2301      	movs	r3, #1
 8012264:	e014      	b.n	8012290 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012266:	4b0b      	ldr	r3, [pc, #44]	@ (8012294 <CheckRetransUnconfirmedUplink+0x50>)
 8012268:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801226c:	f003 0302 	and.w	r3, r3, #2
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b00      	cmp	r3, #0
 8012274:	d00b      	beq.n	801228e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012276:	4b07      	ldr	r3, [pc, #28]	@ (8012294 <CheckRetransUnconfirmedUplink+0x50>)
 8012278:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 801227c:	2b00      	cmp	r3, #0
 801227e:	d004      	beq.n	801228a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012280:	4b04      	ldr	r3, [pc, #16]	@ (8012294 <CheckRetransUnconfirmedUplink+0x50>)
 8012282:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012286:	2b01      	cmp	r3, #1
 8012288:	d101      	bne.n	801228e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801228a:	2301      	movs	r3, #1
 801228c:	e000      	b.n	8012290 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	bd80      	pop	{r7, pc}
 8012294:	200008d0 	.word	0x200008d0
 8012298:	20000df0 	.word	0x20000df0

0801229c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80122a0:	4b10      	ldr	r3, [pc, #64]	@ (80122e4 <CheckRetransConfirmedUplink+0x48>)
 80122a2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80122a6:	4a10      	ldr	r2, [pc, #64]	@ (80122e8 <CheckRetransConfirmedUplink+0x4c>)
 80122a8:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80122ac:	4611      	mov	r1, r2
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff ffb4 	bl	801221c <CheckRetrans>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80122ba:	2301      	movs	r3, #1
 80122bc:	e00f      	b.n	80122de <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80122be:	4b09      	ldr	r3, [pc, #36]	@ (80122e4 <CheckRetransConfirmedUplink+0x48>)
 80122c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80122c4:	f003 0302 	and.w	r3, r3, #2
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d006      	beq.n	80122dc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80122ce:	4b05      	ldr	r3, [pc, #20]	@ (80122e4 <CheckRetransConfirmedUplink+0x48>)
 80122d0:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80122d8:	2301      	movs	r3, #1
 80122da:	e000      	b.n	80122de <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	200008d0 	.word	0x200008d0
 80122e8:	20000df0 	.word	0x20000df0

080122ec <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fa:	d002      	beq.n	8012302 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3301      	adds	r3, #1
 8012300:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012302:	687b      	ldr	r3, [r7, #4]
}
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	bc80      	pop	{r7}
 801230c:	4770      	bx	lr
	...

08012310 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012310:	b580      	push	{r7, lr}
 8012312:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012314:	4b1a      	ldr	r3, [pc, #104]	@ (8012380 <StopRetransmission+0x70>)
 8012316:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801231a:	f003 0302 	and.w	r3, r3, #2
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	d009      	beq.n	8012338 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012324:	4b16      	ldr	r3, [pc, #88]	@ (8012380 <StopRetransmission+0x70>)
 8012326:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801232a:	2b00      	cmp	r3, #0
 801232c:	d011      	beq.n	8012352 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801232e:	4b14      	ldr	r3, [pc, #80]	@ (8012380 <StopRetransmission+0x70>)
 8012330:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012334:	2b01      	cmp	r3, #1
 8012336:	d00c      	beq.n	8012352 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012338:	4b12      	ldr	r3, [pc, #72]	@ (8012384 <StopRetransmission+0x74>)
 801233a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801233e:	2b00      	cmp	r3, #0
 8012340:	d007      	beq.n	8012352 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012342:	4b10      	ldr	r3, [pc, #64]	@ (8012384 <StopRetransmission+0x74>)
 8012344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012346:	4618      	mov	r0, r3
 8012348:	f7ff ffd0 	bl	80122ec <IncreaseAdrAckCounter>
 801234c:	4603      	mov	r3, r0
 801234e:	4a0d      	ldr	r2, [pc, #52]	@ (8012384 <StopRetransmission+0x74>)
 8012350:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012352:	4b0b      	ldr	r3, [pc, #44]	@ (8012380 <StopRetransmission+0x70>)
 8012354:	2200      	movs	r2, #0
 8012356:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 801235a:	4b09      	ldr	r3, [pc, #36]	@ (8012380 <StopRetransmission+0x70>)
 801235c:	2200      	movs	r2, #0
 801235e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8012362:	4b07      	ldr	r3, [pc, #28]	@ (8012380 <StopRetransmission+0x70>)
 8012364:	2200      	movs	r2, #0
 8012366:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801236a:	4b05      	ldr	r3, [pc, #20]	@ (8012380 <StopRetransmission+0x70>)
 801236c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012370:	f023 0302 	bic.w	r3, r3, #2
 8012374:	4a02      	ldr	r2, [pc, #8]	@ (8012380 <StopRetransmission+0x70>)
 8012376:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801237a:	2301      	movs	r3, #1
}
 801237c:	4618      	mov	r0, r3
 801237e:	bd80      	pop	{r7, pc}
 8012380:	200008d0 	.word	0x200008d0
 8012384:	20000df0 	.word	0x20000df0

08012388 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	4603      	mov	r3, r0
 8012390:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8012392:	4b0b      	ldr	r3, [pc, #44]	@ (80123c0 <CallNvmDataChangeCallback+0x38>)
 8012394:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00c      	beq.n	80123b6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801239c:	4b08      	ldr	r3, [pc, #32]	@ (80123c0 <CallNvmDataChangeCallback+0x38>)
 801239e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80123a2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d006      	beq.n	80123b6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80123a8:	4b05      	ldr	r3, [pc, #20]	@ (80123c0 <CallNvmDataChangeCallback+0x38>)
 80123aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	88fa      	ldrh	r2, [r7, #6]
 80123b2:	4610      	mov	r0, r2
 80123b4:	4798      	blx	r3
    }
}
 80123b6:	bf00      	nop
 80123b8:	3708      	adds	r7, #8
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	200008d0 	.word	0x200008d0

080123c4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80123c4:	b480      	push	{r7}
 80123c6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80123c8:	4b0b      	ldr	r3, [pc, #44]	@ (80123f8 <IsRequestPending+0x34>)
 80123ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80123ce:	f003 0304 	and.w	r3, r3, #4
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d107      	bne.n	80123e8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80123d8:	4b07      	ldr	r3, [pc, #28]	@ (80123f8 <IsRequestPending+0x34>)
 80123da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80123de:	f003 0301 	and.w	r3, r3, #1
 80123e2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d001      	beq.n	80123ec <IsRequestPending+0x28>
    {
        return 1;
 80123e8:	2301      	movs	r3, #1
 80123ea:	e000      	b.n	80123ee <IsRequestPending+0x2a>
    }
    return 0;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bc80      	pop	{r7}
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	200008d0 	.word	0x200008d0

080123fc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80123fc:	b590      	push	{r4, r7, lr}
 80123fe:	b091      	sub	sp, #68	@ 0x44
 8012400:	af02      	add	r7, sp, #8
 8012402:	6178      	str	r0, [r7, #20]
 8012404:	6139      	str	r1, [r7, #16]
 8012406:	4613      	mov	r3, r2
 8012408:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <LoRaMacInitialization+0x1a>
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012416:	2303      	movs	r3, #3
 8012418:	e27c      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d00b      	beq.n	801243a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012426:	2b00      	cmp	r3, #0
 8012428:	d007      	beq.n	801243a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801242e:	2b00      	cmp	r3, #0
 8012430:	d003      	beq.n	801243a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012436:	2b00      	cmp	r3, #0
 8012438:	d101      	bne.n	801243e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801243a:	2303      	movs	r3, #3
 801243c:	e26a      	b.n	8012914 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801243e:	7bfb      	ldrb	r3, [r7, #15]
 8012440:	4618      	mov	r0, r3
 8012442:	f003 fbd7 	bl	8015bf4 <RegionIsActive>
 8012446:	4603      	mov	r3, r0
 8012448:	f083 0301 	eor.w	r3, r3, #1
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	d001      	beq.n	8012456 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012452:	2309      	movs	r3, #9
 8012454:	e25e      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012456:	6978      	ldr	r0, [r7, #20]
 8012458:	f002 f884 	bl	8014564 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801245c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8012460:	2100      	movs	r1, #0
 8012462:	48c7      	ldr	r0, [pc, #796]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012464:	f005 feb2 	bl	80181cc <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012468:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 801246c:	2100      	movs	r1, #0
 801246e:	48c5      	ldr	r0, [pc, #788]	@ (8012784 <LoRaMacInitialization+0x388>)
 8012470:	f005 feac 	bl	80181cc <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012474:	4ac2      	ldr	r2, [pc, #776]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012476:	7bfb      	ldrb	r3, [r7, #15]
 8012478:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801247c:	4bc0      	ldr	r3, [pc, #768]	@ (8012780 <LoRaMacInitialization+0x384>)
 801247e:	2200      	movs	r2, #0
 8012480:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8012484:	4bbe      	ldr	r3, [pc, #760]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012486:	2200      	movs	r2, #0
 8012488:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801248c:	4bbc      	ldr	r3, [pc, #752]	@ (8012780 <LoRaMacInitialization+0x384>)
 801248e:	4abe      	ldr	r2, [pc, #760]	@ (8012788 <LoRaMacInitialization+0x38c>)
 8012490:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012494:	2300      	movs	r3, #0
 8012496:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801249a:	4bbc      	ldr	r3, [pc, #752]	@ (801278c <LoRaMacInitialization+0x390>)
 801249c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801249e:	4bbc      	ldr	r3, [pc, #752]	@ (8012790 <LoRaMacInitialization+0x394>)
 80124a0:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80124a2:	4bbc      	ldr	r3, [pc, #752]	@ (8012794 <LoRaMacInitialization+0x398>)
 80124a4:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80124a6:	4bb6      	ldr	r3, [pc, #728]	@ (8012780 <LoRaMacInitialization+0x384>)
 80124a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124ac:	f107 021c 	add.w	r2, r7, #28
 80124b0:	4611      	mov	r1, r2
 80124b2:	4618      	mov	r0, r3
 80124b4:	f003 fbd7 	bl	8015c66 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80124b8:	230f      	movs	r3, #15
 80124ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124be:	4bb0      	ldr	r3, [pc, #704]	@ (8012780 <LoRaMacInitialization+0x384>)
 80124c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80124c8:	4611      	mov	r1, r2
 80124ca:	4618      	mov	r0, r3
 80124cc:	f003 fba2 	bl	8015c14 <RegionGetPhyParam>
 80124d0:	4603      	mov	r3, r0
 80124d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80124d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	bf14      	ite	ne
 80124da:	2301      	movne	r3, #1
 80124dc:	2300      	moveq	r3, #0
 80124de:	b2da      	uxtb	r2, r3
 80124e0:	4ba7      	ldr	r3, [pc, #668]	@ (8012780 <LoRaMacInitialization+0x384>)
 80124e2:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80124e6:	230a      	movs	r3, #10
 80124e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124ec:	4ba4      	ldr	r3, [pc, #656]	@ (8012780 <LoRaMacInitialization+0x384>)
 80124ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f003 fb8b 	bl	8015c14 <RegionGetPhyParam>
 80124fe:	4603      	mov	r3, r0
 8012500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012504:	b25a      	sxtb	r2, r3
 8012506:	4b9e      	ldr	r3, [pc, #632]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012508:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801250c:	2306      	movs	r3, #6
 801250e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012512:	4b9b      	ldr	r3, [pc, #620]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012518:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801251c:	4611      	mov	r1, r2
 801251e:	4618      	mov	r0, r3
 8012520:	f003 fb78 	bl	8015c14 <RegionGetPhyParam>
 8012524:	4603      	mov	r3, r0
 8012526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801252a:	b25a      	sxtb	r2, r3
 801252c:	4b94      	ldr	r3, [pc, #592]	@ (8012780 <LoRaMacInitialization+0x384>)
 801252e:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012532:	2310      	movs	r3, #16
 8012534:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012538:	4b91      	ldr	r3, [pc, #580]	@ (8012780 <LoRaMacInitialization+0x384>)
 801253a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801253e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012542:	4611      	mov	r1, r2
 8012544:	4618      	mov	r0, r3
 8012546:	f003 fb65 	bl	8015c14 <RegionGetPhyParam>
 801254a:	4603      	mov	r3, r0
 801254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801254e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012550:	4a8b      	ldr	r2, [pc, #556]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012556:	2311      	movs	r3, #17
 8012558:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801255c:	4b88      	ldr	r3, [pc, #544]	@ (8012780 <LoRaMacInitialization+0x384>)
 801255e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012562:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012566:	4611      	mov	r1, r2
 8012568:	4618      	mov	r0, r3
 801256a:	f003 fb53 	bl	8015c14 <RegionGetPhyParam>
 801256e:	4603      	mov	r3, r0
 8012570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012574:	4a82      	ldr	r2, [pc, #520]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801257a:	2312      	movs	r3, #18
 801257c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012580:	4b7f      	ldr	r3, [pc, #508]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012586:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801258a:	4611      	mov	r1, r2
 801258c:	4618      	mov	r0, r3
 801258e:	f003 fb41 	bl	8015c14 <RegionGetPhyParam>
 8012592:	4603      	mov	r3, r0
 8012594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012598:	4a79      	ldr	r2, [pc, #484]	@ (8012780 <LoRaMacInitialization+0x384>)
 801259a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801259e:	2313      	movs	r3, #19
 80125a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125a4:	4b76      	ldr	r3, [pc, #472]	@ (8012780 <LoRaMacInitialization+0x384>)
 80125a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80125ae:	4611      	mov	r1, r2
 80125b0:	4618      	mov	r0, r3
 80125b2:	f003 fb2f 	bl	8015c14 <RegionGetPhyParam>
 80125b6:	4603      	mov	r3, r0
 80125b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80125ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125bc:	4a70      	ldr	r2, [pc, #448]	@ (8012780 <LoRaMacInitialization+0x384>)
 80125be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80125c2:	2314      	movs	r3, #20
 80125c4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125c8:	4b6d      	ldr	r3, [pc, #436]	@ (8012780 <LoRaMacInitialization+0x384>)
 80125ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f003 fb1d 	bl	8015c14 <RegionGetPhyParam>
 80125da:	4603      	mov	r3, r0
 80125dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80125de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e0:	4a67      	ldr	r2, [pc, #412]	@ (8012780 <LoRaMacInitialization+0x384>)
 80125e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80125e6:	2316      	movs	r3, #22
 80125e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125ec:	4b64      	ldr	r3, [pc, #400]	@ (8012780 <LoRaMacInitialization+0x384>)
 80125ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80125f6:	4611      	mov	r1, r2
 80125f8:	4618      	mov	r0, r3
 80125fa:	f003 fb0b 	bl	8015c14 <RegionGetPhyParam>
 80125fe:	4603      	mov	r3, r0
 8012600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012604:	b2da      	uxtb	r2, r3
 8012606:	4b5e      	ldr	r3, [pc, #376]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012608:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801260c:	2317      	movs	r3, #23
 801260e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012612:	4b5b      	ldr	r3, [pc, #364]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012614:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012618:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801261c:	4611      	mov	r1, r2
 801261e:	4618      	mov	r0, r3
 8012620:	f003 faf8 	bl	8015c14 <RegionGetPhyParam>
 8012624:	4603      	mov	r3, r0
 8012626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262a:	4a55      	ldr	r2, [pc, #340]	@ (8012780 <LoRaMacInitialization+0x384>)
 801262c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012632:	4a53      	ldr	r2, [pc, #332]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012634:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012638:	2318      	movs	r3, #24
 801263a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801263e:	4b50      	ldr	r3, [pc, #320]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012644:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012648:	4611      	mov	r1, r2
 801264a:	4618      	mov	r0, r3
 801264c:	f003 fae2 	bl	8015c14 <RegionGetPhyParam>
 8012650:	4603      	mov	r3, r0
 8012652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012656:	b2da      	uxtb	r2, r3
 8012658:	4b49      	ldr	r3, [pc, #292]	@ (8012780 <LoRaMacInitialization+0x384>)
 801265a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801265e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012660:	b2da      	uxtb	r2, r3
 8012662:	4b47      	ldr	r3, [pc, #284]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012664:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012668:	231d      	movs	r3, #29
 801266a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801266e:	4b44      	ldr	r3, [pc, #272]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012674:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012678:	4611      	mov	r1, r2
 801267a:	4618      	mov	r0, r3
 801267c:	f003 faca 	bl	8015c14 <RegionGetPhyParam>
 8012680:	4603      	mov	r3, r0
 8012682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012686:	b2da      	uxtb	r2, r3
 8012688:	4b3d      	ldr	r3, [pc, #244]	@ (8012780 <LoRaMacInitialization+0x384>)
 801268a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801268e:	231e      	movs	r3, #30
 8012690:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012694:	4b3a      	ldr	r3, [pc, #232]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801269a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801269e:	4611      	mov	r1, r2
 80126a0:	4618      	mov	r0, r3
 80126a2:	f003 fab7 	bl	8015c14 <RegionGetPhyParam>
 80126a6:	4603      	mov	r3, r0
 80126a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80126aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	4b34      	ldr	r3, [pc, #208]	@ (8012780 <LoRaMacInitialization+0x384>)
 80126b0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80126b4:	231f      	movs	r3, #31
 80126b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126ba:	4b31      	ldr	r3, [pc, #196]	@ (8012780 <LoRaMacInitialization+0x384>)
 80126bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126c4:	4611      	mov	r1, r2
 80126c6:	4618      	mov	r0, r3
 80126c8:	f003 faa4 	bl	8015c14 <RegionGetPhyParam>
 80126cc:	4603      	mov	r3, r0
 80126ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80126d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126d2:	4a2b      	ldr	r2, [pc, #172]	@ (8012780 <LoRaMacInitialization+0x384>)
 80126d4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80126d8:	2320      	movs	r3, #32
 80126da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126de:	4b28      	ldr	r3, [pc, #160]	@ (8012780 <LoRaMacInitialization+0x384>)
 80126e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126e8:	4611      	mov	r1, r2
 80126ea:	4618      	mov	r0, r3
 80126ec:	f003 fa92 	bl	8015c14 <RegionGetPhyParam>
 80126f0:	4603      	mov	r3, r0
 80126f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80126f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f6:	4a22      	ldr	r2, [pc, #136]	@ (8012780 <LoRaMacInitialization+0x384>)
 80126f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80126fc:	230b      	movs	r3, #11
 80126fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012702:	4b1f      	ldr	r3, [pc, #124]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012708:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801270c:	4611      	mov	r1, r2
 801270e:	4618      	mov	r0, r3
 8012710:	f003 fa80 	bl	8015c14 <RegionGetPhyParam>
 8012714:	4603      	mov	r3, r0
 8012716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8012718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271a:	b29a      	uxth	r2, r3
 801271c:	4b19      	ldr	r3, [pc, #100]	@ (8012784 <LoRaMacInitialization+0x388>)
 801271e:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012722:	230c      	movs	r3, #12
 8012724:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012728:	4b15      	ldr	r3, [pc, #84]	@ (8012780 <LoRaMacInitialization+0x384>)
 801272a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801272e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012732:	4611      	mov	r1, r2
 8012734:	4618      	mov	r0, r3
 8012736:	f003 fa6d 	bl	8015c14 <RegionGetPhyParam>
 801273a:	4603      	mov	r3, r0
 801273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b10      	ldr	r3, [pc, #64]	@ (8012784 <LoRaMacInitialization+0x388>)
 8012744:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012748:	4b0d      	ldr	r3, [pc, #52]	@ (8012780 <LoRaMacInitialization+0x384>)
 801274a:	2201      	movs	r2, #1
 801274c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012750:	4b0b      	ldr	r3, [pc, #44]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012752:	220a      	movs	r2, #10
 8012754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012758:	4b09      	ldr	r3, [pc, #36]	@ (8012780 <LoRaMacInitialization+0x384>)
 801275a:	2206      	movs	r2, #6
 801275c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012760:	4b07      	ldr	r3, [pc, #28]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012766:	4a06      	ldr	r2, [pc, #24]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012768:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801276a:	4b05      	ldr	r3, [pc, #20]	@ (8012780 <LoRaMacInitialization+0x384>)
 801276c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012770:	4b03      	ldr	r3, [pc, #12]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012772:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012776:	4b02      	ldr	r3, [pc, #8]	@ (8012780 <LoRaMacInitialization+0x384>)
 8012778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801277c:	e00c      	b.n	8012798 <LoRaMacInitialization+0x39c>
 801277e:	bf00      	nop
 8012780:	20000df0 	.word	0x20000df0
 8012784:	200008d0 	.word	0x200008d0
 8012788:	01000400 	.word	0x01000400
 801278c:	20000fd4 	.word	0x20000fd4
 8012790:	20000fd8 	.word	0x20000fd8
 8012794:	200018e8 	.word	0x200018e8
 8012798:	4a60      	ldr	r2, [pc, #384]	@ (801291c <LoRaMacInitialization+0x520>)
 801279a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801279c:	4b5f      	ldr	r3, [pc, #380]	@ (801291c <LoRaMacInitialization+0x520>)
 801279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80127a2:	4a5e      	ldr	r2, [pc, #376]	@ (801291c <LoRaMacInitialization+0x520>)
 80127a4:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80127a6:	4b5d      	ldr	r3, [pc, #372]	@ (801291c <LoRaMacInitialization+0x520>)
 80127a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80127ac:	4a5b      	ldr	r2, [pc, #364]	@ (801291c <LoRaMacInitialization+0x520>)
 80127ae:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80127b0:	4b5a      	ldr	r3, [pc, #360]	@ (801291c <LoRaMacInitialization+0x520>)
 80127b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80127b6:	4a59      	ldr	r2, [pc, #356]	@ (801291c <LoRaMacInitialization+0x520>)
 80127b8:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80127ba:	4b58      	ldr	r3, [pc, #352]	@ (801291c <LoRaMacInitialization+0x520>)
 80127bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80127c0:	4a56      	ldr	r2, [pc, #344]	@ (801291c <LoRaMacInitialization+0x520>)
 80127c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80127c4:	4b55      	ldr	r3, [pc, #340]	@ (801291c <LoRaMacInitialization+0x520>)
 80127c6:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80127ca:	4b54      	ldr	r3, [pc, #336]	@ (801291c <LoRaMacInitialization+0x520>)
 80127cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80127d0:	4b52      	ldr	r3, [pc, #328]	@ (801291c <LoRaMacInitialization+0x520>)
 80127d2:	2201      	movs	r2, #1
 80127d4:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80127d8:	4a51      	ldr	r2, [pc, #324]	@ (8012920 <LoRaMacInitialization+0x524>)
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80127e0:	f7ff f8d6 	bl	8011990 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80127e4:	4b4d      	ldr	r3, [pc, #308]	@ (801291c <LoRaMacInitialization+0x520>)
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80127ec:	4a4c      	ldr	r2, [pc, #304]	@ (8012920 <LoRaMacInitialization+0x524>)
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80127f4:	4b4a      	ldr	r3, [pc, #296]	@ (8012920 <LoRaMacInitialization+0x524>)
 80127f6:	2200      	movs	r2, #0
 80127f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80127fc:	4b48      	ldr	r3, [pc, #288]	@ (8012920 <LoRaMacInitialization+0x524>)
 80127fe:	2201      	movs	r2, #1
 8012800:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012804:	4b45      	ldr	r3, [pc, #276]	@ (801291c <LoRaMacInitialization+0x520>)
 8012806:	2200      	movs	r2, #0
 8012808:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801280a:	4b44      	ldr	r3, [pc, #272]	@ (801291c <LoRaMacInitialization+0x520>)
 801280c:	2200      	movs	r2, #0
 801280e:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012810:	2300      	movs	r3, #0
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	4b43      	ldr	r3, [pc, #268]	@ (8012924 <LoRaMacInitialization+0x528>)
 8012816:	2200      	movs	r2, #0
 8012818:	f04f 31ff 	mov.w	r1, #4294967295
 801281c:	4842      	ldr	r0, [pc, #264]	@ (8012928 <LoRaMacInitialization+0x52c>)
 801281e:	f009 fd3b 	bl	801c298 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012822:	2300      	movs	r3, #0
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	4b41      	ldr	r3, [pc, #260]	@ (801292c <LoRaMacInitialization+0x530>)
 8012828:	2200      	movs	r2, #0
 801282a:	f04f 31ff 	mov.w	r1, #4294967295
 801282e:	4840      	ldr	r0, [pc, #256]	@ (8012930 <LoRaMacInitialization+0x534>)
 8012830:	f009 fd32 	bl	801c298 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012834:	2300      	movs	r3, #0
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	4b3e      	ldr	r3, [pc, #248]	@ (8012934 <LoRaMacInitialization+0x538>)
 801283a:	2200      	movs	r2, #0
 801283c:	f04f 31ff 	mov.w	r1, #4294967295
 8012840:	483d      	ldr	r0, [pc, #244]	@ (8012938 <LoRaMacInitialization+0x53c>)
 8012842:	f009 fd29 	bl	801c298 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012846:	2300      	movs	r3, #0
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	4b3c      	ldr	r3, [pc, #240]	@ (801293c <LoRaMacInitialization+0x540>)
 801284c:	2200      	movs	r2, #0
 801284e:	f04f 31ff 	mov.w	r1, #4294967295
 8012852:	483b      	ldr	r0, [pc, #236]	@ (8012940 <LoRaMacInitialization+0x544>)
 8012854:	f009 fd20 	bl	801c298 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012858:	4c30      	ldr	r4, [pc, #192]	@ (801291c <LoRaMacInitialization+0x520>)
 801285a:	463b      	mov	r3, r7
 801285c:	4618      	mov	r0, r3
 801285e:	f009 f891 	bl	801b984 <SysTimeGetMcuTime>
 8012862:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8012866:	463a      	mov	r2, r7
 8012868:	e892 0003 	ldmia.w	r2, {r0, r1}
 801286c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012870:	4b34      	ldr	r3, [pc, #208]	@ (8012944 <LoRaMacInitialization+0x548>)
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012876:	4b2a      	ldr	r3, [pc, #168]	@ (8012920 <LoRaMacInitialization+0x524>)
 8012878:	4a33      	ldr	r2, [pc, #204]	@ (8012948 <LoRaMacInitialization+0x54c>)
 801287a:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801287e:	4b28      	ldr	r3, [pc, #160]	@ (8012920 <LoRaMacInitialization+0x524>)
 8012880:	4a32      	ldr	r2, [pc, #200]	@ (801294c <LoRaMacInitialization+0x550>)
 8012882:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012886:	4b26      	ldr	r3, [pc, #152]	@ (8012920 <LoRaMacInitialization+0x524>)
 8012888:	4a31      	ldr	r2, [pc, #196]	@ (8012950 <LoRaMacInitialization+0x554>)
 801288a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801288e:	4b24      	ldr	r3, [pc, #144]	@ (8012920 <LoRaMacInitialization+0x524>)
 8012890:	4a30      	ldr	r2, [pc, #192]	@ (8012954 <LoRaMacInitialization+0x558>)
 8012892:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012896:	4b22      	ldr	r3, [pc, #136]	@ (8012920 <LoRaMacInitialization+0x524>)
 8012898:	4a2f      	ldr	r2, [pc, #188]	@ (8012958 <LoRaMacInitialization+0x55c>)
 801289a:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801289e:	4b2f      	ldr	r3, [pc, #188]	@ (801295c <LoRaMacInitialization+0x560>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	482f      	ldr	r0, [pc, #188]	@ (8012960 <LoRaMacInitialization+0x564>)
 80128a4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	4619      	mov	r1, r3
 80128ac:	482d      	ldr	r0, [pc, #180]	@ (8012964 <LoRaMacInitialization+0x568>)
 80128ae:	f7fa fb85 	bl	800cfbc <SecureElementInit>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d001      	beq.n	80128bc <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128b8:	2311      	movs	r3, #17
 80128ba:	e02b      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80128bc:	4817      	ldr	r0, [pc, #92]	@ (801291c <LoRaMacInitialization+0x520>)
 80128be:	f002 fafd 	bl	8014ebc <LoRaMacCryptoInit>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128c8:	2311      	movs	r3, #17
 80128ca:	e023      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80128cc:	f001 fc1c 	bl	8014108 <LoRaMacCommandsInit>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d001      	beq.n	80128da <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128d6:	2313      	movs	r3, #19
 80128d8:	e01c      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80128da:	4823      	ldr	r0, [pc, #140]	@ (8012968 <LoRaMacInitialization+0x56c>)
 80128dc:	f002 fb8e 	bl	8014ffc <LoRaMacCryptoSetMulticastReference>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128e6:	2311      	movs	r3, #17
 80128e8:	e014      	b.n	8012914 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80128ea:	4b1c      	ldr	r3, [pc, #112]	@ (801295c <LoRaMacInitialization+0x560>)
 80128ec:	695b      	ldr	r3, [r3, #20]
 80128ee:	4798      	blx	r3
 80128f0:	4603      	mov	r3, r0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f005 fc0a 	bl	801810c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80128f8:	4b18      	ldr	r3, [pc, #96]	@ (801295c <LoRaMacInitialization+0x560>)
 80128fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128fc:	4a07      	ldr	r2, [pc, #28]	@ (801291c <LoRaMacInitialization+0x520>)
 80128fe:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8012902:	4610      	mov	r0, r2
 8012904:	4798      	blx	r3
    Radio.Sleep( );
 8012906:	4b15      	ldr	r3, [pc, #84]	@ (801295c <LoRaMacInitialization+0x560>)
 8012908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801290a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801290c:	2001      	movs	r0, #1
 801290e:	f7fd fac7 	bl	800fea0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	373c      	adds	r7, #60	@ 0x3c
 8012918:	46bd      	mov	sp, r7
 801291a:	bd90      	pop	{r4, r7, pc}
 801291c:	20000df0 	.word	0x20000df0
 8012920:	200008d0 	.word	0x200008d0
 8012924:	08010455 	.word	0x08010455
 8012928:	20000c38 	.word	0x20000c38
 801292c:	080104e5 	.word	0x080104e5
 8012930:	20000c50 	.word	0x20000c50
 8012934:	0801055d 	.word	0x0801055d
 8012938:	20000c68 	.word	0x20000c68
 801293c:	080105dd 	.word	0x080105dd
 8012940:	20000cd4 	.word	0x20000cd4
 8012944:	20001978 	.word	0x20001978
 8012948:	0800ef55 	.word	0x0800ef55
 801294c:	0800efcd 	.word	0x0800efcd
 8012950:	0800f0ad 	.word	0x0800f0ad
 8012954:	0800f061 	.word	0x0800f061
 8012958:	0800f0e9 	.word	0x0800f0e9
 801295c:	08020714 	.word	0x08020714
 8012960:	20000c1c 	.word	0x20000c1c
 8012964:	20000f14 	.word	0x20000f14
 8012968:	20000ec8 	.word	0x20000ec8

0801296c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801296c:	b480      	push	{r7}
 801296e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012970:	4b04      	ldr	r3, [pc, #16]	@ (8012984 <LoRaMacStart+0x18>)
 8012972:	2200      	movs	r2, #0
 8012974:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	46bd      	mov	sp, r7
 801297e:	bc80      	pop	{r7}
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	200008d0 	.word	0x200008d0

08012988 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012988:	b580      	push	{r7, lr}
 801298a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801298c:	f7fd fa68 	bl	800fe60 <LoRaMacIsBusy>
 8012990:	4603      	mov	r3, r0
 8012992:	f083 0301 	eor.w	r3, r3, #1
 8012996:	b2db      	uxtb	r3, r3
 8012998:	2b00      	cmp	r3, #0
 801299a:	d005      	beq.n	80129a8 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 801299c:	4b07      	ldr	r3, [pc, #28]	@ (80129bc <LoRaMacStop+0x34>)
 801299e:	2201      	movs	r2, #1
 80129a0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	e007      	b.n	80129b8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80129a8:	4b04      	ldr	r3, [pc, #16]	@ (80129bc <LoRaMacStop+0x34>)
 80129aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	d101      	bne.n	80129b6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80129b2:	2300      	movs	r3, #0
 80129b4:	e000      	b.n	80129b8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80129b6:	2301      	movs	r3, #1
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	200008d0 	.word	0x200008d0

080129c0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80129c4:	4812      	ldr	r0, [pc, #72]	@ (8012a10 <LoRaMacHalt+0x50>)
 80129c6:	f009 fd0b 	bl	801c3e0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80129ca:	4812      	ldr	r0, [pc, #72]	@ (8012a14 <LoRaMacHalt+0x54>)
 80129cc:	f009 fd08 	bl	801c3e0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80129d0:	4811      	ldr	r0, [pc, #68]	@ (8012a18 <LoRaMacHalt+0x58>)
 80129d2:	f009 fd05 	bl	801c3e0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80129d6:	4811      	ldr	r0, [pc, #68]	@ (8012a1c <LoRaMacHalt+0x5c>)
 80129d8:	f009 fd02 	bl	801c3e0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80129dc:	f001 fa04 	bl	8013de8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80129e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012a20 <LoRaMacHalt+0x60>)
 80129e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80129e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012a24 <LoRaMacHalt+0x64>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80129ee:	480e      	ldr	r0, [pc, #56]	@ (8012a28 <LoRaMacHalt+0x68>)
 80129f0:	f7fd fc0c 	bl	801020c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80129f4:	f240 527c 	movw	r2, #1404	@ 0x57c
 80129f8:	490b      	ldr	r1, [pc, #44]	@ (8012a28 <LoRaMacHalt+0x68>)
 80129fa:	480c      	ldr	r0, [pc, #48]	@ (8012a2c <LoRaMacHalt+0x6c>)
 80129fc:	f005 fbab 	bl	8018156 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012a00:	4b08      	ldr	r3, [pc, #32]	@ (8012a24 <LoRaMacHalt+0x64>)
 8012a02:	2201      	movs	r2, #1
 8012a04:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	20000c38 	.word	0x20000c38
 8012a14:	20000c50 	.word	0x20000c50
 8012a18:	20000c68 	.word	0x20000c68
 8012a1c:	20000cd4 	.word	0x20000cd4
 8012a20:	08020714 	.word	0x08020714
 8012a24:	200008d0 	.word	0x200008d0
 8012a28:	20000df0 	.word	0x20000df0
 8012a2c:	2000136c 	.word	0x2000136c

08012a30 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b08d      	sub	sp, #52	@ 0x34
 8012a34:	af02      	add	r7, sp, #8
 8012a36:	4603      	mov	r3, r0
 8012a38:	6039      	str	r1, [r7, #0]
 8012a3a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012a3c:	4b42      	ldr	r3, [pc, #264]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a40:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012a42:	4b41      	ldr	r3, [pc, #260]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a44:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8012a48:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a4c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8012a50:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8012a52:	4b3e      	ldr	r3, [pc, #248]	@ (8012b4c <LoRaMacQueryTxPossible+0x11c>)
 8012a54:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012a58:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d101      	bne.n	8012a68 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a64:	2303      	movs	r3, #3
 8012a66:	e06b      	b.n	8012b40 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012a6c:	4b36      	ldr	r3, [pc, #216]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a6e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012a72:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012a74:	4b34      	ldr	r3, [pc, #208]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a78:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012a7a:	4b34      	ldr	r3, [pc, #208]	@ (8012b4c <LoRaMacQueryTxPossible+0x11c>)
 8012a7c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8012a80:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012a82:	4b32      	ldr	r3, [pc, #200]	@ (8012b4c <LoRaMacQueryTxPossible+0x11c>)
 8012a84:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8012a88:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a8c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012a90:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a94:	4b2c      	ldr	r3, [pc, #176]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012a96:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012a9a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8012b4c <LoRaMacQueryTxPossible+0x11c>)
 8012aa0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012aa8:	4b27      	ldr	r3, [pc, #156]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012aaa:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012ab2:	4b25      	ldr	r3, [pc, #148]	@ (8012b48 <LoRaMacQueryTxPossible+0x118>)
 8012ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ab8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012abc:	f107 040d 	add.w	r4, r7, #13
 8012ac0:	f107 020e 	add.w	r2, r7, #14
 8012ac4:	f107 010f 	add.w	r1, r7, #15
 8012ac8:	f107 0014 	add.w	r0, r7, #20
 8012acc:	f107 0310 	add.w	r3, r7, #16
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	4623      	mov	r3, r4
 8012ad4:	f001 f852 	bl	8013b7c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fd feb9 	bl	8010854 <GetMaxAppPayloadWithoutFOptsLength>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012aea:	f107 0308 	add.w	r3, r7, #8
 8012aee:	4618      	mov	r0, r3
 8012af0:	f001 fbd8 	bl	80142a4 <LoRaMacCommandsGetSizeSerializedCmds>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d001      	beq.n	8012afe <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012afa:	2313      	movs	r3, #19
 8012afc:	e020      	b.n	8012b40 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	2b0f      	cmp	r3, #15
 8012b02:	d819      	bhi.n	8012b38 <LoRaMacQueryTxPossible+0x108>
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	785b      	ldrb	r3, [r3, #1]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d313      	bcc.n	8012b38 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	785a      	ldrb	r2, [r3, #1]
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	1ad3      	subs	r3, r2, r3
 8012b1a:	b2da      	uxtb	r2, r3
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	785b      	ldrb	r3, [r3, #1]
 8012b24:	4619      	mov	r1, r3
 8012b26:	79fa      	ldrb	r2, [r7, #7]
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	4299      	cmp	r1, r3
 8012b2e:	d301      	bcc.n	8012b34 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012b30:	2300      	movs	r3, #0
 8012b32:	e005      	b.n	8012b40 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012b34:	2308      	movs	r3, #8
 8012b36:	e003      	b.n	8012b40 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012b3e:	2308      	movs	r3, #8
    }
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	372c      	adds	r7, #44	@ 0x2c
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd90      	pop	{r4, r7, pc}
 8012b48:	20000df0 	.word	0x20000df0
 8012b4c:	200008d0 	.word	0x200008d0

08012b50 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012b50:	b590      	push	{r4, r7, lr}
 8012b52:	b087      	sub	sp, #28
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d101      	bne.n	8012b66 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b62:	2303      	movs	r3, #3
 8012b64:	e191      	b.n	8012e8a <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2b39      	cmp	r3, #57	@ 0x39
 8012b6c:	f200 8186 	bhi.w	8012e7c <LoRaMacMibGetRequestConfirm+0x32c>
 8012b70:	a201      	add	r2, pc, #4	@ (adr r2, 8012b78 <LoRaMacMibGetRequestConfirm+0x28>)
 8012b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b76:	bf00      	nop
 8012b78:	08012c61 	.word	0x08012c61
 8012b7c:	08012c6d 	.word	0x08012c6d
 8012b80:	08012c79 	.word	0x08012c79
 8012b84:	08012c85 	.word	0x08012c85
 8012b88:	08012c91 	.word	0x08012c91
 8012b8c:	08012c9d 	.word	0x08012c9d
 8012b90:	08012ca9 	.word	0x08012ca9
 8012b94:	08012e7d 	.word	0x08012e7d
 8012b98:	08012e7d 	.word	0x08012e7d
 8012b9c:	08012e7d 	.word	0x08012e7d
 8012ba0:	08012e7d 	.word	0x08012e7d
 8012ba4:	08012e7d 	.word	0x08012e7d
 8012ba8:	08012e7d 	.word	0x08012e7d
 8012bac:	08012e7d 	.word	0x08012e7d
 8012bb0:	08012e7d 	.word	0x08012e7d
 8012bb4:	08012cb5 	.word	0x08012cb5
 8012bb8:	08012cc1 	.word	0x08012cc1
 8012bbc:	08012ccd 	.word	0x08012ccd
 8012bc0:	08012cef 	.word	0x08012cef
 8012bc4:	08012d01 	.word	0x08012d01
 8012bc8:	08012d13 	.word	0x08012d13
 8012bcc:	08012d25 	.word	0x08012d25
 8012bd0:	08012d59 	.word	0x08012d59
 8012bd4:	08012d37 	.word	0x08012d37
 8012bd8:	08012d7b 	.word	0x08012d7b
 8012bdc:	08012d87 	.word	0x08012d87
 8012be0:	08012d91 	.word	0x08012d91
 8012be4:	08012d9b 	.word	0x08012d9b
 8012be8:	08012da5 	.word	0x08012da5
 8012bec:	08012daf 	.word	0x08012daf
 8012bf0:	08012db9 	.word	0x08012db9
 8012bf4:	08012de5 	.word	0x08012de5
 8012bf8:	08012df1 	.word	0x08012df1
 8012bfc:	08012e09 	.word	0x08012e09
 8012c00:	08012dfd 	.word	0x08012dfd
 8012c04:	08012e15 	.word	0x08012e15
 8012c08:	08012e1f 	.word	0x08012e1f
 8012c0c:	08012e2b 	.word	0x08012e2b
 8012c10:	08012e45 	.word	0x08012e45
 8012c14:	08012e35 	.word	0x08012e35
 8012c18:	08012e3d 	.word	0x08012e3d
 8012c1c:	08012e7d 	.word	0x08012e7d
 8012c20:	08012e51 	.word	0x08012e51
 8012c24:	08012e7d 	.word	0x08012e7d
 8012c28:	08012e7d 	.word	0x08012e7d
 8012c2c:	08012e7d 	.word	0x08012e7d
 8012c30:	08012e7d 	.word	0x08012e7d
 8012c34:	08012e7d 	.word	0x08012e7d
 8012c38:	08012e7d 	.word	0x08012e7d
 8012c3c:	08012e7d 	.word	0x08012e7d
 8012c40:	08012e7d 	.word	0x08012e7d
 8012c44:	08012e7d 	.word	0x08012e7d
 8012c48:	08012e7d 	.word	0x08012e7d
 8012c4c:	08012e7d 	.word	0x08012e7d
 8012c50:	08012e7d 	.word	0x08012e7d
 8012c54:	08012e7d 	.word	0x08012e7d
 8012c58:	08012e65 	.word	0x08012e65
 8012c5c:	08012e71 	.word	0x08012e71
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012c60:	4b8c      	ldr	r3, [pc, #560]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c62:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	711a      	strb	r2, [r3, #4]
            break;
 8012c6a:	e10d      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012c6c:	4b89      	ldr	r3, [pc, #548]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c6e:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	711a      	strb	r2, [r3, #4]
            break;
 8012c76:	e107      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012c78:	f7fa fc76 	bl	800d568 <SecureElementGetDevEui>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	605a      	str	r2, [r3, #4]
            break;
 8012c82:	e101      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012c84:	f7fa fc92 	bl	800d5ac <SecureElementGetJoinEui>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	605a      	str	r2, [r3, #4]
            break;
 8012c8e:	e0fb      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012c90:	4b80      	ldr	r3, [pc, #512]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c92:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	711a      	strb	r2, [r3, #4]
            break;
 8012c9a:	e0f5      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012c9c:	4b7d      	ldr	r3, [pc, #500]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012c9e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	605a      	str	r2, [r3, #4]
            break;
 8012ca6:	e0ef      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8012ca8:	4b7a      	ldr	r3, [pc, #488]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012caa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	605a      	str	r2, [r3, #4]
            break;
 8012cb2:	e0e9      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012cb4:	4b77      	ldr	r3, [pc, #476]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cb6:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	711a      	strb	r2, [r3, #4]
            break;
 8012cbe:	e0e3      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012cc0:	4b74      	ldr	r3, [pc, #464]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cc2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	711a      	strb	r2, [r3, #4]
            break;
 8012cca:	e0dd      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012ccc:	231c      	movs	r3, #28
 8012cce:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cd0:	4b70      	ldr	r3, [pc, #448]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012cd6:	f107 0210 	add.w	r2, r7, #16
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f002 ff99 	bl	8015c14 <RegionGetPhyParam>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	605a      	str	r2, [r3, #4]
            break;
 8012cec:	e0cc      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4a68      	ldr	r2, [pc, #416]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	3264      	adds	r2, #100	@ 0x64
 8012cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cfa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012cfe:	e0c3      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	4a64      	ldr	r2, [pc, #400]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d04:	3304      	adds	r3, #4
 8012d06:	32a8      	adds	r2, #168	@ 0xa8
 8012d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d0c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d10:	e0ba      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4a5f      	ldr	r2, [pc, #380]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d16:	3304      	adds	r3, #4
 8012d18:	326c      	adds	r2, #108	@ 0x6c
 8012d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d1e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d22:	e0b1      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4a5b      	ldr	r2, [pc, #364]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d28:	3304      	adds	r3, #4
 8012d2a:	32b0      	adds	r2, #176	@ 0xb0
 8012d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d30:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d34:	e0a8      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012d36:	231a      	movs	r3, #26
 8012d38:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d3a:	4b56      	ldr	r3, [pc, #344]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d40:	f107 0210 	add.w	r2, r7, #16
 8012d44:	4611      	mov	r1, r2
 8012d46:	4618      	mov	r0, r3
 8012d48:	f002 ff64 	bl	8015c14 <RegionGetPhyParam>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012d50:	68fa      	ldr	r2, [r7, #12]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	605a      	str	r2, [r3, #4]
            break;
 8012d56:	e097      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012d58:	2319      	movs	r3, #25
 8012d5a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d62:	f107 0210 	add.w	r2, r7, #16
 8012d66:	4611      	mov	r1, r2
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f002 ff53 	bl	8015c14 <RegionGetPhyParam>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	605a      	str	r2, [r3, #4]
            break;
 8012d78:	e086      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012d7a:	4b46      	ldr	r3, [pc, #280]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d7c:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	711a      	strb	r2, [r3, #4]
            break;
 8012d84:	e080      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012d86:	4b43      	ldr	r3, [pc, #268]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	605a      	str	r2, [r3, #4]
            break;
 8012d8e:	e07b      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012d90:	4b40      	ldr	r3, [pc, #256]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	605a      	str	r2, [r3, #4]
            break;
 8012d98:	e076      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	605a      	str	r2, [r3, #4]
            break;
 8012da2:	e071      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012da4:	4b3b      	ldr	r3, [pc, #236]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012da6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	605a      	str	r2, [r3, #4]
            break;
 8012dac:	e06c      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012dae:	4b39      	ldr	r3, [pc, #228]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012db0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	605a      	str	r2, [r3, #4]
            break;
 8012db6:	e067      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012db8:	2302      	movs	r3, #2
 8012dba:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012dbc:	4b35      	ldr	r3, [pc, #212]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012dbe:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012dc2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dc4:	4b33      	ldr	r3, [pc, #204]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012dca:	f107 0210 	add.w	r2, r7, #16
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f002 ff1f 	bl	8015c14 <RegionGetPhyParam>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	b25a      	sxtb	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	711a      	strb	r2, [r3, #4]
            break;
 8012de2:	e051      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012de4:	4b2b      	ldr	r3, [pc, #172]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012de6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	711a      	strb	r2, [r3, #4]
            break;
 8012dee:	e04b      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012df0:	4b28      	ldr	r3, [pc, #160]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012df2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	711a      	strb	r2, [r3, #4]
            break;
 8012dfa:	e045      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012dfc:	4b25      	ldr	r3, [pc, #148]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012dfe:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	711a      	strb	r2, [r3, #4]
            break;
 8012e06:	e03f      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e08:	4b22      	ldr	r3, [pc, #136]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e0a:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	711a      	strb	r2, [r3, #4]
            break;
 8012e12:	e039      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012e14:	4b1f      	ldr	r3, [pc, #124]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	605a      	str	r2, [r3, #4]
            break;
 8012e1c:	e034      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e20:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	711a      	strb	r2, [r3, #4]
            break;
 8012e28:	e02e      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e2c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	605a      	str	r2, [r3, #4]
            break;
 8012e32:	e029      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4a17      	ldr	r2, [pc, #92]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e38:	605a      	str	r2, [r3, #4]
            break;
 8012e3a:	e025      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4a16      	ldr	r2, [pc, #88]	@ (8012e98 <LoRaMacMibGetRequestConfirm+0x348>)
 8012e40:	605a      	str	r2, [r3, #4]
            break;
 8012e42:	e021      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012e44:	4b13      	ldr	r3, [pc, #76]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	605a      	str	r2, [r3, #4]
            break;
 8012e4e:	e01b      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	4a10      	ldr	r2, [pc, #64]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e54:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8012e58:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012e5a:	687c      	ldr	r4, [r7, #4]
 8012e5c:	f003 f850 	bl	8015f00 <RegionGetVersion>
 8012e60:	60a0      	str	r0, [r4, #8]
            break;
 8012e62:	e011      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012e64:	4b0b      	ldr	r3, [pc, #44]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e66:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	605a      	str	r2, [r3, #4]
            break;
 8012e6e:	e00b      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012e70:	4b08      	ldr	r3, [pc, #32]	@ (8012e94 <LoRaMacMibGetRequestConfirm+0x344>)
 8012e72:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	711a      	strb	r2, [r3, #4]
            break;
 8012e7a:	e005      	b.n	8012e88 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 ffca 	bl	8013e16 <LoRaMacClassBMibGetRequestConfirm>
 8012e82:	4603      	mov	r3, r0
 8012e84:	75fb      	strb	r3, [r7, #23]
            break;
 8012e86:	bf00      	nop
        }
    }
    return status;
 8012e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	371c      	adds	r7, #28
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd90      	pop	{r4, r7, pc}
 8012e92:	bf00      	nop
 8012e94:	20000df0 	.word	0x20000df0
 8012e98:	2000136c 	.word	0x2000136c

08012e9c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d101      	bne.n	8012eb2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012eae:	2303      	movs	r3, #3
 8012eb0:	e35c      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012eb2:	4bb9      	ldr	r3, [pc, #740]	@ (8013198 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012eb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012eb8:	f003 0302 	and.w	r3, r3, #2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e353      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	2b39      	cmp	r3, #57	@ 0x39
 8012eca:	f200 8323 	bhi.w	8013514 <LoRaMacMibSetRequestConfirm+0x678>
 8012ece:	a201      	add	r2, pc, #4	@ (adr r2, 8012ed4 <LoRaMacMibSetRequestConfirm+0x38>)
 8012ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed4:	08012fbd 	.word	0x08012fbd
 8012ed8:	08012fcd 	.word	0x08012fcd
 8012edc:	08012fe7 	.word	0x08012fe7
 8012ee0:	08012fff 	.word	0x08012fff
 8012ee4:	08013017 	.word	0x08013017
 8012ee8:	08013023 	.word	0x08013023
 8012eec:	0801302f 	.word	0x0801302f
 8012ef0:	0801303b 	.word	0x0801303b
 8012ef4:	08013061 	.word	0x08013061
 8012ef8:	08013087 	.word	0x08013087
 8012efc:	080130ad 	.word	0x080130ad
 8012f00:	080130d3 	.word	0x080130d3
 8012f04:	080130f9 	.word	0x080130f9
 8012f08:	0801311f 	.word	0x0801311f
 8012f0c:	08013145 	.word	0x08013145
 8012f10:	0801316b 	.word	0x0801316b
 8012f14:	0801318b 	.word	0x0801318b
 8012f18:	08013515 	.word	0x08013515
 8012f1c:	080131a5 	.word	0x080131a5
 8012f20:	08013215 	.word	0x08013215
 8012f24:	08013255 	.word	0x08013255
 8012f28:	080132b7 	.word	0x080132b7
 8012f2c:	08013327 	.word	0x08013327
 8012f30:	080132f7 	.word	0x080132f7
 8012f34:	08013357 	.word	0x08013357
 8012f38:	08013379 	.word	0x08013379
 8012f3c:	08013383 	.word	0x08013383
 8012f40:	0801338d 	.word	0x0801338d
 8012f44:	08013397 	.word	0x08013397
 8012f48:	080133a1 	.word	0x080133a1
 8012f4c:	08013515 	.word	0x08013515
 8012f50:	080133ab 	.word	0x080133ab
 8012f54:	080133dd 	.word	0x080133dd
 8012f58:	08013449 	.word	0x08013449
 8012f5c:	08013417 	.word	0x08013417
 8012f60:	08013485 	.word	0x08013485
 8012f64:	0801349b 	.word	0x0801349b
 8012f68:	080134b3 	.word	0x080134b3
 8012f6c:	080134bd 	.word	0x080134bd
 8012f70:	080134c9 	.word	0x080134c9
 8012f74:	08013515 	.word	0x08013515
 8012f78:	080134d3 	.word	0x080134d3
 8012f7c:	08013515 	.word	0x08013515
 8012f80:	08013515 	.word	0x08013515
 8012f84:	08013515 	.word	0x08013515
 8012f88:	08013515 	.word	0x08013515
 8012f8c:	08013515 	.word	0x08013515
 8012f90:	08013515 	.word	0x08013515
 8012f94:	08013515 	.word	0x08013515
 8012f98:	08013515 	.word	0x08013515
 8012f9c:	08013515 	.word	0x08013515
 8012fa0:	08013515 	.word	0x08013515
 8012fa4:	08013515 	.word	0x08013515
 8012fa8:	08013515 	.word	0x08013515
 8012fac:	08013515 	.word	0x08013515
 8012fb0:	08013515 	.word	0x08013515
 8012fb4:	080134fd 	.word	0x080134fd
 8012fb8:	08013509 	.word	0x08013509
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	791b      	ldrb	r3, [r3, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fd fb75 	bl	80106b0 <SwitchClass>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	75fb      	strb	r3, [r7, #23]
            break;
 8012fca:	e2c4      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	791b      	ldrb	r3, [r3, #4]
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d005      	beq.n	8012fe0 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	791a      	ldrb	r2, [r3, #4]
 8012fd8:	4b70      	ldr	r3, [pc, #448]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 8012fda:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012fde:	e2ba      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	75fb      	strb	r3, [r7, #23]
            break;
 8012fe4:	e2b7      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fa faa4 	bl	800d538 <SecureElementSetDevEui>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	f000 8294 	beq.w	8013520 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ff8:	2303      	movs	r3, #3
 8012ffa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012ffc:	e290      	b.n	8013520 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	4618      	mov	r0, r3
 8013004:	f7fa faba 	bl	800d57c <SecureElementSetJoinEui>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 828a 	beq.w	8013524 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013010:	2303      	movs	r3, #3
 8013012:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013014:	e286      	b.n	8013524 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	791a      	ldrb	r2, [r3, #4]
 801301a:	4b60      	ldr	r3, [pc, #384]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 801301c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8013020:	e299      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	4a5d      	ldr	r2, [pc, #372]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 8013028:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 801302c:	e293      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	4a5a      	ldr	r2, [pc, #360]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 8013034:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8013038:	e28d      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d00b      	beq.n	801305a <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	4619      	mov	r1, r3
 8013048:	2000      	movs	r0, #0
 801304a:	f001 ffff 	bl	801504c <LoRaMacCryptoSetKey>
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	f000 8269 	beq.w	8013528 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013056:	2311      	movs	r3, #17
 8013058:	e288      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801305a:	2303      	movs	r3, #3
 801305c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801305e:	e263      	b.n	8013528 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00b      	beq.n	8013080 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	4619      	mov	r1, r3
 801306e:	2001      	movs	r0, #1
 8013070:	f001 ffec 	bl	801504c <LoRaMacCryptoSetKey>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	f000 8258 	beq.w	801352c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801307c:	2311      	movs	r3, #17
 801307e:	e275      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013080:	2303      	movs	r3, #3
 8013082:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013084:	e252      	b.n	801352c <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00b      	beq.n	80130a6 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	4619      	mov	r1, r3
 8013094:	2002      	movs	r0, #2
 8013096:	f001 ffd9 	bl	801504c <LoRaMacCryptoSetKey>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	f000 8247 	beq.w	8013530 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130a2:	2311      	movs	r3, #17
 80130a4:	e262      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130a6:	2303      	movs	r3, #3
 80130a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130aa:	e241      	b.n	8013530 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00b      	beq.n	80130cc <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	4619      	mov	r1, r3
 80130ba:	2003      	movs	r0, #3
 80130bc:	f001 ffc6 	bl	801504c <LoRaMacCryptoSetKey>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 8236 	beq.w	8013534 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130c8:	2311      	movs	r3, #17
 80130ca:	e24f      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130cc:	2303      	movs	r3, #3
 80130ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130d0:	e230      	b.n	8013534 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00b      	beq.n	80130f2 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	4619      	mov	r1, r3
 80130e0:	207f      	movs	r0, #127	@ 0x7f
 80130e2:	f001 ffb3 	bl	801504c <LoRaMacCryptoSetKey>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f000 8225 	beq.w	8013538 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130ee:	2311      	movs	r3, #17
 80130f0:	e23c      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130f2:	2303      	movs	r3, #3
 80130f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130f6:	e21f      	b.n	8013538 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00b      	beq.n	8013118 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	4619      	mov	r1, r3
 8013106:	2080      	movs	r0, #128	@ 0x80
 8013108:	f001 ffa0 	bl	801504c <LoRaMacCryptoSetKey>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	f000 8214 	beq.w	801353c <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013114:	2311      	movs	r3, #17
 8013116:	e229      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013118:	2303      	movs	r3, #3
 801311a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801311c:	e20e      	b.n	801353c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00b      	beq.n	801313e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4619      	mov	r1, r3
 801312c:	2081      	movs	r0, #129	@ 0x81
 801312e:	f001 ff8d 	bl	801504c <LoRaMacCryptoSetKey>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 8203 	beq.w	8013540 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801313a:	2311      	movs	r3, #17
 801313c:	e216      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801313e:	2303      	movs	r3, #3
 8013140:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013142:	e1fd      	b.n	8013540 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00b      	beq.n	8013164 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	4619      	mov	r1, r3
 8013152:	2082      	movs	r0, #130	@ 0x82
 8013154:	f001 ff7a 	bl	801504c <LoRaMacCryptoSetKey>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	f000 81f2 	beq.w	8013544 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013160:	2311      	movs	r3, #17
 8013162:	e203      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013164:	2303      	movs	r3, #3
 8013166:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013168:	e1ec      	b.n	8013544 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	791a      	ldrb	r2, [r3, #4]
 801316e:	4b0b      	ldr	r3, [pc, #44]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 8013170:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013174:	4b0a      	ldr	r3, [pc, #40]	@ (80131a0 <LoRaMacMibSetRequestConfirm+0x304>)
 8013176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013178:	4a08      	ldr	r2, [pc, #32]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 801317a:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 801317e:	4610      	mov	r0, r2
 8013180:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013182:	4b07      	ldr	r3, [pc, #28]	@ (80131a0 <LoRaMacMibSetRequestConfirm+0x304>)
 8013184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013186:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013188:	e1e5      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	791a      	ldrb	r2, [r3, #4]
 801318e:	4b03      	ldr	r3, [pc, #12]	@ (801319c <LoRaMacMibSetRequestConfirm+0x300>)
 8013190:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8013194:	e1df      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
 8013196:	bf00      	nop
 8013198:	200008d0 	.word	0x200008d0
 801319c:	20000df0 	.word	0x20000df0
 80131a0:	08020714 	.word	0x08020714
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	7a1b      	ldrb	r3, [r3, #8]
 80131a8:	b25b      	sxtb	r3, r3
 80131aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80131ac:	4bb3      	ldr	r3, [pc, #716]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131ae:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80131b2:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80131b4:	4bb1      	ldr	r3, [pc, #708]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80131ba:	f107 0108 	add.w	r1, r7, #8
 80131be:	2207      	movs	r2, #7
 80131c0:	4618      	mov	r0, r3
 80131c2:	f002 fd62 	bl	8015c8a <RegionVerify>
 80131c6:	4603      	mov	r3, r0
 80131c8:	f083 0301 	eor.w	r3, r3, #1
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d002      	beq.n	80131d8 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131d2:	2303      	movs	r3, #3
 80131d4:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80131d6:	e1be      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80131de:	4ba7      	ldr	r3, [pc, #668]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80131e4:	f107 0108 	add.w	r1, r7, #8
 80131e8:	2200      	movs	r2, #0
 80131ea:	4618      	mov	r0, r3
 80131ec:	f002 fd4d 	bl	8015c8a <RegionVerify>
 80131f0:	4603      	mov	r3, r0
 80131f2:	f083 0301 	eor.w	r3, r3, #1
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d002      	beq.n	8013202 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131fc:	2303      	movs	r3, #3
 80131fe:	75fb      	strb	r3, [r7, #23]
            break;
 8013200:	e1a9      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013202:	4b9e      	ldr	r3, [pc, #632]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	3364      	adds	r3, #100	@ 0x64
 8013208:	3204      	adds	r2, #4
 801320a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801320e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013212:	e1a0      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	7a1b      	ldrb	r3, [r3, #8]
 8013218:	b25b      	sxtb	r3, r3
 801321a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801321c:	4b97      	ldr	r3, [pc, #604]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801321e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8013222:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013224:	4b95      	ldr	r3, [pc, #596]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801322a:	f107 0108 	add.w	r1, r7, #8
 801322e:	2207      	movs	r2, #7
 8013230:	4618      	mov	r0, r3
 8013232:	f002 fd2a 	bl	8015c8a <RegionVerify>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d008      	beq.n	801324e <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801323c:	4b8f      	ldr	r3, [pc, #572]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	33a8      	adds	r3, #168	@ 0xa8
 8013242:	3204      	adds	r2, #4
 8013244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013248:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801324c:	e183      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801324e:	2303      	movs	r3, #3
 8013250:	75fb      	strb	r3, [r7, #23]
            break;
 8013252:	e180      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	7a1b      	ldrb	r3, [r3, #8]
 8013258:	b25b      	sxtb	r3, r3
 801325a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801325c:	4b87      	ldr	r3, [pc, #540]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801325e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8013262:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013264:	4b85      	ldr	r3, [pc, #532]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801326a:	f107 0108 	add.w	r1, r7, #8
 801326e:	2207      	movs	r2, #7
 8013270:	4618      	mov	r0, r3
 8013272:	f002 fd0a 	bl	8015c8a <RegionVerify>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d019      	beq.n	80132b0 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801327c:	4b7f      	ldr	r3, [pc, #508]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	336c      	adds	r3, #108	@ 0x6c
 8013282:	3204      	adds	r2, #4
 8013284:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013288:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801328c:	4b7b      	ldr	r3, [pc, #492]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801328e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8013292:	2b02      	cmp	r3, #2
 8013294:	f040 8158 	bne.w	8013548 <LoRaMacMibSetRequestConfirm+0x6ac>
 8013298:	4b78      	ldr	r3, [pc, #480]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801329a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801329e:	2b00      	cmp	r3, #0
 80132a0:	f000 8152 	beq.w	8013548 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80132a4:	4b76      	ldr	r3, [pc, #472]	@ (8013480 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80132a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132a8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80132aa:	f7fe fca7 	bl	8011bfc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132ae:	e14b      	b.n	8013548 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132b0:	2303      	movs	r3, #3
 80132b2:	75fb      	strb	r3, [r7, #23]
            break;
 80132b4:	e148      	b.n	8013548 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	7a1b      	ldrb	r3, [r3, #8]
 80132ba:	b25b      	sxtb	r3, r3
 80132bc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80132be:	4b6f      	ldr	r3, [pc, #444]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132c0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80132c4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80132c6:	4b6d      	ldr	r3, [pc, #436]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80132cc:	f107 0108 	add.w	r1, r7, #8
 80132d0:	2207      	movs	r2, #7
 80132d2:	4618      	mov	r0, r3
 80132d4:	f002 fcd9 	bl	8015c8a <RegionVerify>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d008      	beq.n	80132f0 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80132de:	4b67      	ldr	r3, [pc, #412]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	33b0      	adds	r3, #176	@ 0xb0
 80132e4:	3204      	adds	r2, #4
 80132e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132ea:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132ee:	e132      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132f0:	2303      	movs	r3, #3
 80132f2:	75fb      	strb	r3, [r7, #23]
            break;
 80132f4:	e12f      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80132fc:	2301      	movs	r3, #1
 80132fe:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013300:	4b5e      	ldr	r3, [pc, #376]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013306:	f107 020c 	add.w	r2, r7, #12
 801330a:	4611      	mov	r1, r2
 801330c:	4618      	mov	r0, r3
 801330e:	f002 fce5 	bl	8015cdc <RegionChanMaskSet>
 8013312:	4603      	mov	r3, r0
 8013314:	f083 0301 	eor.w	r3, r3, #1
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b00      	cmp	r3, #0
 801331c:	f000 8116 	beq.w	801354c <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013320:	2303      	movs	r3, #3
 8013322:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013324:	e112      	b.n	801354c <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801332c:	2300      	movs	r3, #0
 801332e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013330:	4b52      	ldr	r3, [pc, #328]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013336:	f107 020c 	add.w	r2, r7, #12
 801333a:	4611      	mov	r1, r2
 801333c:	4618      	mov	r0, r3
 801333e:	f002 fccd 	bl	8015cdc <RegionChanMaskSet>
 8013342:	4603      	mov	r3, r0
 8013344:	f083 0301 	eor.w	r3, r3, #1
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	f000 8100 	beq.w	8013550 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013350:	2303      	movs	r3, #3
 8013352:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013354:	e0fc      	b.n	8013550 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	791b      	ldrb	r3, [r3, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d009      	beq.n	8013372 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013362:	2b0f      	cmp	r3, #15
 8013364:	d805      	bhi.n	8013372 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	791a      	ldrb	r2, [r3, #4]
 801336a:	4b44      	ldr	r3, [pc, #272]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801336c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013370:	e0f1      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013372:	2303      	movs	r3, #3
 8013374:	75fb      	strb	r3, [r7, #23]
            break;
 8013376:	e0ee      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	4a3f      	ldr	r2, [pc, #252]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801337e:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8013380:	e0e9      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	4a3d      	ldr	r2, [pc, #244]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013388:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 801338a:	e0e4      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	4a3a      	ldr	r2, [pc, #232]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013392:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013394:	e0df      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	4a38      	ldr	r2, [pc, #224]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801339c:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801339e:	e0da      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	4a35      	ldr	r2, [pc, #212]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80133a8:	e0d5      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80133b0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80133b2:	4b32      	ldr	r3, [pc, #200]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80133b8:	f107 0108 	add.w	r1, r7, #8
 80133bc:	2206      	movs	r2, #6
 80133be:	4618      	mov	r0, r3
 80133c0:	f002 fc63 	bl	8015c8a <RegionVerify>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d005      	beq.n	80133d6 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80133ca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80133ce:	4b2b      	ldr	r3, [pc, #172]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133d0:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133d4:	e0bf      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133d6:	2303      	movs	r3, #3
 80133d8:	75fb      	strb	r3, [r7, #23]
            break;
 80133da:	e0bc      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80133e2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80133e4:	4b25      	ldr	r3, [pc, #148]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133e6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80133ea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80133ec:	4b23      	ldr	r3, [pc, #140]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80133ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80133f2:	f107 0108 	add.w	r1, r7, #8
 80133f6:	2205      	movs	r2, #5
 80133f8:	4618      	mov	r0, r3
 80133fa:	f002 fc46 	bl	8015c8a <RegionVerify>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d005      	beq.n	8013410 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013404:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013408:	4b1c      	ldr	r3, [pc, #112]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801340a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801340e:	e0a2      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013410:	2303      	movs	r3, #3
 8013412:	75fb      	strb	r3, [r7, #23]
            break;
 8013414:	e09f      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801341c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801341e:	4b17      	ldr	r3, [pc, #92]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013424:	f107 0108 	add.w	r1, r7, #8
 8013428:	220a      	movs	r2, #10
 801342a:	4618      	mov	r0, r3
 801342c:	f002 fc2d 	bl	8015c8a <RegionVerify>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013436:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801343a:	4b10      	ldr	r3, [pc, #64]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801343c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013440:	e089      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013442:	2303      	movs	r3, #3
 8013444:	75fb      	strb	r3, [r7, #23]
            break;
 8013446:	e086      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801344e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013450:	4b0a      	ldr	r3, [pc, #40]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013456:	f107 0108 	add.w	r1, r7, #8
 801345a:	2209      	movs	r2, #9
 801345c:	4618      	mov	r0, r3
 801345e:	f002 fc14 	bl	8015c8a <RegionVerify>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d005      	beq.n	8013474 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013468:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801346c:	4b03      	ldr	r3, [pc, #12]	@ (801347c <LoRaMacMibSetRequestConfirm+0x5e0>)
 801346e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013472:	e070      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013474:	2303      	movs	r3, #3
 8013476:	75fb      	strb	r3, [r7, #23]
            break;
 8013478:	e06d      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
 801347a:	bf00      	nop
 801347c:	20000df0 	.word	0x20000df0
 8013480:	08020714 	.word	0x08020714
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	4a3a      	ldr	r2, [pc, #232]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801348a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 801348e:	4b39      	ldr	r3, [pc, #228]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013494:	4a37      	ldr	r2, [pc, #220]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013496:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8013498:	e05d      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	791a      	ldrb	r2, [r3, #4]
 801349e:	4b35      	ldr	r3, [pc, #212]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134a0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80134a4:	4b33      	ldr	r3, [pc, #204]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134a6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80134aa:	4b32      	ldr	r3, [pc, #200]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80134b0:	e051      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	4a2f      	ldr	r2, [pc, #188]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134b8:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 80134ba:	e04c      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	4a2c      	ldr	r2, [pc, #176]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 80134c6:	e046      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80134c8:	f7fe fdc8 	bl	801205c <RestoreNvmData>
 80134cc:	4603      	mov	r3, r0
 80134ce:	75fb      	strb	r3, [r7, #23]
            break;
 80134d0:	e041      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	799b      	ldrb	r3, [r3, #6]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d80d      	bhi.n	80134f6 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80134da:	4a26      	ldr	r2, [pc, #152]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6858      	ldr	r0, [r3, #4]
 80134e8:	f001 fd14 	bl	8014f14 <LoRaMacCryptoSetLrWanVersion>
 80134ec:	4603      	mov	r3, r0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d030      	beq.n	8013554 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80134f2:	2311      	movs	r3, #17
 80134f4:	e03a      	b.n	801356c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134f6:	2303      	movs	r3, #3
 80134f8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80134fa:	e02b      	b.n	8013554 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	4a1c      	ldr	r2, [pc, #112]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013502:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8013506:	e026      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	791a      	ldrb	r2, [r3, #4]
 801350c:	4b19      	ldr	r3, [pc, #100]	@ (8013574 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801350e:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8013512:	e020      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fc88 	bl	8013e2a <LoRaMacMibClassBSetRequestConfirm>
 801351a:	4603      	mov	r3, r0
 801351c:	75fb      	strb	r3, [r7, #23]
            break;
 801351e:	e01a      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013520:	bf00      	nop
 8013522:	e018      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013524:	bf00      	nop
 8013526:	e016      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013528:	bf00      	nop
 801352a:	e014      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801352c:	bf00      	nop
 801352e:	e012      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013530:	bf00      	nop
 8013532:	e010      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013534:	bf00      	nop
 8013536:	e00e      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013538:	bf00      	nop
 801353a:	e00c      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801353c:	bf00      	nop
 801353e:	e00a      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013540:	bf00      	nop
 8013542:	e008      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013544:	bf00      	nop
 8013546:	e006      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013548:	bf00      	nop
 801354a:	e004      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801354c:	bf00      	nop
 801354e:	e002      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013550:	bf00      	nop
 8013552:	e000      	b.n	8013556 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013554:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8013556:	7dfb      	ldrb	r3, [r7, #23]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d106      	bne.n	801356a <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801355c:	4a06      	ldr	r2, [pc, #24]	@ (8013578 <LoRaMacMibSetRequestConfirm+0x6dc>)
 801355e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8013562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013566:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 801356a:	7dfb      	ldrb	r3, [r7, #23]
}
 801356c:	4618      	mov	r0, r3
 801356e:	3718      	adds	r7, #24
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	20000df0 	.word	0x20000df0
 8013578:	200008d0 	.word	0x200008d0

0801357c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b08a      	sub	sp, #40	@ 0x28
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013584:	2302      	movs	r3, #2
 8013586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801358a:	2300      	movs	r3, #0
 801358c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d101      	bne.n	8013598 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013594:	2303      	movs	r3, #3
 8013596:	e16c      	b.n	8013872 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801359e:	f7fc fc5f 	bl	800fe60 <LoRaMacIsBusy>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d001      	beq.n	80135ac <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80135a8:	2301      	movs	r3, #1
 80135aa:	e162      	b.n	8013872 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80135ac:	f001 f956 	bl	801485c <LoRaMacConfirmQueueIsFull>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d001      	beq.n	80135ba <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80135b6:	2301      	movs	r3, #1
 80135b8:	e15b      	b.n	8013872 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80135ba:	f001 f943 	bl	8014844 <LoRaMacConfirmQueueGetCnt>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d104      	bne.n	80135ce <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80135c4:	2214      	movs	r2, #20
 80135c6:	2100      	movs	r1, #0
 80135c8:	48ac      	ldr	r0, [pc, #688]	@ (801387c <LoRaMacMlmeRequest+0x300>)
 80135ca:	f004 fdff 	bl	80181cc <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80135ce:	4bac      	ldr	r3, [pc, #688]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 80135d0:	2201      	movs	r2, #1
 80135d2:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80135d6:	4aaa      	ldr	r2, [pc, #680]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 80135d8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80135dc:	f043 0304 	orr.w	r3, r3, #4
 80135e0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80135ec:	2301      	movs	r3, #1
 80135ee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80135f2:	2300      	movs	r3, #0
 80135f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 80135f8:	2300      	movs	r3, #0
 80135fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	3b01      	subs	r3, #1
 8013604:	2b0c      	cmp	r3, #12
 8013606:	f200 8108 	bhi.w	801381a <LoRaMacMlmeRequest+0x29e>
 801360a:	a201      	add	r2, pc, #4	@ (adr r2, 8013610 <LoRaMacMlmeRequest+0x94>)
 801360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013610:	08013645 	.word	0x08013645
 8013614:	0801381b 	.word	0x0801381b
 8013618:	0801381b 	.word	0x0801381b
 801361c:	0801371b 	.word	0x0801371b
 8013620:	0801373d 	.word	0x0801373d
 8013624:	0801381b 	.word	0x0801381b
 8013628:	0801381b 	.word	0x0801381b
 801362c:	0801381b 	.word	0x0801381b
 8013630:	0801375b 	.word	0x0801375b
 8013634:	0801381b 	.word	0x0801381b
 8013638:	080137e9 	.word	0x080137e9
 801363c:	0801377d 	.word	0x0801377d
 8013640:	080137c7 	.word	0x080137c7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013644:	4b8e      	ldr	r3, [pc, #568]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 8013646:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801364a:	f003 0320 	and.w	r3, r3, #32
 801364e:	2b00      	cmp	r3, #0
 8013650:	d001      	beq.n	8013656 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8013652:	2301      	movs	r3, #1
 8013654:	e10d      	b.n	8013872 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	791b      	ldrb	r3, [r3, #4]
 801365a:	2b02      	cmp	r3, #2
 801365c:	d12e      	bne.n	80136bc <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 801365e:	f7fe f997 	bl	8011990 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013662:	4b88      	ldr	r3, [pc, #544]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 8013664:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	795b      	ldrb	r3, [r3, #5]
 801366c:	b25b      	sxtb	r3, r3
 801366e:	2200      	movs	r2, #0
 8013670:	4619      	mov	r1, r3
 8013672:	f002 fbf2 	bl	8015e5a <RegionAlternateDr>
 8013676:	4603      	mov	r3, r0
 8013678:	461a      	mov	r2, r3
 801367a:	4b82      	ldr	r3, [pc, #520]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 801367c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013680:	2307      	movs	r3, #7
 8013682:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013686:	20ff      	movs	r0, #255	@ 0xff
 8013688:	f7fd ff00 	bl	801148c <SendReJoinReq>
 801368c:	4603      	mov	r3, r0
 801368e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8013692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 80c1 	beq.w	801381e <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801369c:	4b79      	ldr	r3, [pc, #484]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 801369e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	795b      	ldrb	r3, [r3, #5]
 80136a6:	b25b      	sxtb	r3, r3
 80136a8:	2201      	movs	r2, #1
 80136aa:	4619      	mov	r1, r3
 80136ac:	f002 fbd5 	bl	8015e5a <RegionAlternateDr>
 80136b0:	4603      	mov	r3, r0
 80136b2:	461a      	mov	r2, r3
 80136b4:	4b73      	ldr	r3, [pc, #460]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 80136b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80136ba:	e0b0      	b.n	801381e <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	791b      	ldrb	r3, [r3, #4]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	f040 80ac 	bne.w	801381e <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80136c6:	4b6f      	ldr	r3, [pc, #444]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 80136c8:	2200      	movs	r2, #0
 80136ca:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80136ce:	2302      	movs	r3, #2
 80136d0:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80136d2:	4b6c      	ldr	r3, [pc, #432]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 80136d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80136d8:	f107 020c 	add.w	r2, r7, #12
 80136dc:	4611      	mov	r1, r2
 80136de:	4618      	mov	r0, r3
 80136e0:	f002 fac1 	bl	8015c66 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	791a      	ldrb	r2, [r3, #4]
 80136e8:	4b66      	ldr	r3, [pc, #408]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 80136ea:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80136ee:	2300      	movs	r3, #0
 80136f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80136f4:	2301      	movs	r3, #1
 80136f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80136fa:	4b61      	ldr	r3, [pc, #388]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 80136fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8013700:	691b      	ldr	r3, [r3, #16]
 8013702:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013704:	4a5e      	ldr	r2, [pc, #376]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 8013706:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801370a:	f043 0320 	orr.w	r3, r3, #32
 801370e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8013712:	2300      	movs	r3, #0
 8013714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013718:	e081      	b.n	801381e <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013720:	f107 031c 	add.w	r3, r7, #28
 8013724:	2200      	movs	r2, #0
 8013726:	4619      	mov	r1, r3
 8013728:	2002      	movs	r0, #2
 801372a:	f000 fcfd 	bl	8014128 <LoRaMacCommandsAddCmd>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	d076      	beq.n	8013822 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013734:	2313      	movs	r3, #19
 8013736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801373a:	e072      	b.n	8013822 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	8898      	ldrh	r0, [r3, #4]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6899      	ldr	r1, [r3, #8]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801374a:	b2db      	uxtb	r3, r3
 801374c:	461a      	mov	r2, r3
 801374e:	f7fe fc65 	bl	801201c <SetTxContinuousWave>
 8013752:	4603      	mov	r3, r0
 8013754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013758:	e06a      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801375a:	2300      	movs	r3, #0
 801375c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013760:	f107 031c 	add.w	r3, r7, #28
 8013764:	2200      	movs	r2, #0
 8013766:	4619      	mov	r1, r3
 8013768:	200d      	movs	r0, #13
 801376a:	f000 fcdd 	bl	8014128 <LoRaMacCommandsAddCmd>
 801376e:	4603      	mov	r3, r0
 8013770:	2b00      	cmp	r3, #0
 8013772:	d058      	beq.n	8013826 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013774:	2313      	movs	r3, #19
 8013776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801377a:	e054      	b.n	8013826 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801377c:	4b41      	ldr	r3, [pc, #260]	@ (8013884 <LoRaMacMlmeRequest+0x308>)
 801377e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8013782:	2b00      	cmp	r3, #0
 8013784:	d151      	bne.n	801382a <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	791b      	ldrb	r3, [r3, #4]
 801378a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	791b      	ldrb	r3, [r3, #4]
 8013792:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013796:	b2db      	uxtb	r3, r3
 8013798:	4618      	mov	r0, r3
 801379a:	f000 fb1b 	bl	8013dd4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801379e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80137a2:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80137a4:	2300      	movs	r3, #0
 80137a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80137aa:	f107 031c 	add.w	r3, r7, #28
 80137ae:	2201      	movs	r2, #1
 80137b0:	4619      	mov	r1, r3
 80137b2:	2010      	movs	r0, #16
 80137b4:	f000 fcb8 	bl	8014128 <LoRaMacCommandsAddCmd>
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d035      	beq.n	801382a <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137be:	2313      	movs	r3, #19
 80137c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80137c4:	e031      	b.n	801382a <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80137c6:	2300      	movs	r3, #0
 80137c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80137cc:	f107 031c 	add.w	r3, r7, #28
 80137d0:	2200      	movs	r2, #0
 80137d2:	4619      	mov	r1, r3
 80137d4:	2012      	movs	r0, #18
 80137d6:	f000 fca7 	bl	8014128 <LoRaMacCommandsAddCmd>
 80137da:	4603      	mov	r3, r0
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d026      	beq.n	801382e <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137e0:	2313      	movs	r3, #19
 80137e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80137e6:	e022      	b.n	801382e <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80137e8:	2301      	movs	r3, #1
 80137ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80137ee:	f000 faa7 	bl	8013d40 <LoRaMacClassBIsAcquisitionInProgress>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f083 0301 	eor.w	r3, r3, #1
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d009      	beq.n	8013812 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80137fe:	2000      	movs	r0, #0
 8013800:	f000 fa80 	bl	8013d04 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013804:	2000      	movs	r0, #0
 8013806:	f000 faa2 	bl	8013d4e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801380a:	2300      	movs	r3, #0
 801380c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013810:	e00e      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8013812:	2301      	movs	r3, #1
 8013814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013818:	e00a      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801381a:	bf00      	nop
 801381c:	e008      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
            break;
 801381e:	bf00      	nop
 8013820:	e006      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013822:	bf00      	nop
 8013824:	e004      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013826:	bf00      	nop
 8013828:	e002      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
            break;
 801382a:	bf00      	nop
 801382c:	e000      	b.n	8013830 <LoRaMacMlmeRequest+0x2b4>
            break;
 801382e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013830:	4b13      	ldr	r3, [pc, #76]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 8013832:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801383a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801383e:	2b00      	cmp	r3, #0
 8013840:	d010      	beq.n	8013864 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013842:	f000 ffff 	bl	8014844 <LoRaMacConfirmQueueGetCnt>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d110      	bne.n	801386e <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 801384c:	4b0c      	ldr	r3, [pc, #48]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 801384e:	2200      	movs	r2, #0
 8013850:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013854:	4a0a      	ldr	r2, [pc, #40]	@ (8013880 <LoRaMacMlmeRequest+0x304>)
 8013856:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801385a:	f36f 0382 	bfc	r3, #2, #1
 801385e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8013862:	e004      	b.n	801386e <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013864:	f107 0320 	add.w	r3, r7, #32
 8013868:	4618      	mov	r0, r3
 801386a:	f000 fe9d 	bl	80145a8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801386e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013872:	4618      	mov	r0, r3
 8013874:	3728      	adds	r7, #40	@ 0x28
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	20000d28 	.word	0x20000d28
 8013880:	200008d0 	.word	0x200008d0
 8013884:	20000df0 	.word	0x20000df0

08013888 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013888:	b5b0      	push	{r4, r5, r7, lr}
 801388a:	b092      	sub	sp, #72	@ 0x48
 801388c:	af02      	add	r7, sp, #8
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	460b      	mov	r3, r1
 8013892:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013894:	2302      	movs	r3, #2
 8013896:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801389a:	2300      	movs	r3, #0
 801389c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80138a0:	2300      	movs	r3, #0
 80138a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80138a4:	2300      	movs	r3, #0
 80138a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80138aa:	2300      	movs	r3, #0
 80138ac:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d101      	bne.n	80138ba <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80138b6:	2303      	movs	r3, #3
 80138b8:	e113      	b.n	8013ae2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80138c0:	f7fc face 	bl	800fe60 <LoRaMacIsBusy>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d001      	beq.n	80138ce <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80138ca:	2301      	movs	r3, #1
 80138cc:	e109      	b.n	8013ae2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f107 040c 	add.w	r4, r7, #12
 80138d4:	461d      	mov	r5, r3
 80138d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138da:	682b      	ldr	r3, [r5, #0]
 80138dc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80138de:	2300      	movs	r3, #0
 80138e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80138e4:	2214      	movs	r2, #20
 80138e6:	2100      	movs	r1, #0
 80138e8:	4880      	ldr	r0, [pc, #512]	@ (8013aec <LoRaMacMcpsRequest+0x264>)
 80138ea:	f004 fc6f 	bl	80181cc <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80138ee:	4b80      	ldr	r3, [pc, #512]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 80138f0:	2201      	movs	r2, #1
 80138f2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80138f6:	4b7f      	ldr	r3, [pc, #508]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80138f8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80138fc:	2b02      	cmp	r3, #2
 80138fe:	d111      	bne.n	8013924 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013900:	4b7c      	ldr	r3, [pc, #496]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013902:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013906:	2b02      	cmp	r3, #2
 8013908:	d10c      	bne.n	8013924 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801390a:	4b7a      	ldr	r3, [pc, #488]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 801390c:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8013910:	f083 0301 	eor.w	r3, r3, #1
 8013914:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013916:	2b00      	cmp	r3, #0
 8013918:	d004      	beq.n	8013924 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801391a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801391c:	2b00      	cmp	r3, #0
 801391e:	d101      	bne.n	8013924 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013920:	2301      	movs	r3, #1
 8013922:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013924:	7b3b      	ldrb	r3, [r7, #12]
 8013926:	2b03      	cmp	r3, #3
 8013928:	d030      	beq.n	801398c <LoRaMacMcpsRequest+0x104>
 801392a:	2b03      	cmp	r3, #3
 801392c:	dc3f      	bgt.n	80139ae <LoRaMacMcpsRequest+0x126>
 801392e:	2b00      	cmp	r3, #0
 8013930:	d002      	beq.n	8013938 <LoRaMacMcpsRequest+0xb0>
 8013932:	2b01      	cmp	r3, #1
 8013934:	d015      	beq.n	8013962 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013936:	e03a      	b.n	80139ae <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013938:	2301      	movs	r3, #1
 801393a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801393e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013942:	2202      	movs	r2, #2
 8013944:	f362 1347 	bfi	r3, r2, #5, #3
 8013948:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801394c:	7c3b      	ldrb	r3, [r7, #16]
 801394e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8013956:	8b3b      	ldrh	r3, [r7, #24]
 8013958:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801395a:	7ebb      	ldrb	r3, [r7, #26]
 801395c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013960:	e026      	b.n	80139b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013962:	2301      	movs	r3, #1
 8013964:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801396c:	2204      	movs	r2, #4
 801396e:	f362 1347 	bfi	r3, r2, #5, #3
 8013972:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8013976:	7c3b      	ldrb	r3, [r7, #16]
 8013978:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013980:	8b3b      	ldrh	r3, [r7, #24]
 8013982:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013984:	7ebb      	ldrb	r3, [r7, #26]
 8013986:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801398a:	e011      	b.n	80139b0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801398c:	2301      	movs	r3, #1
 801398e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013992:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013996:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801399a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80139a2:	8abb      	ldrh	r3, [r7, #20]
 80139a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80139a6:	7dbb      	ldrb	r3, [r7, #22]
 80139a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80139ac:	e000      	b.n	80139b0 <LoRaMacMcpsRequest+0x128>
            break;
 80139ae:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80139b0:	2302      	movs	r3, #2
 80139b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139b6:	4b4f      	ldr	r3, [pc, #316]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80139b8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80139bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80139c0:	4b4c      	ldr	r3, [pc, #304]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80139c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80139c6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80139ca:	4611      	mov	r1, r2
 80139cc:	4618      	mov	r0, r3
 80139ce:	f002 f921 	bl	8015c14 <RegionGetPhyParam>
 80139d2:	4603      	mov	r3, r0
 80139d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80139d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139d8:	b25b      	sxtb	r3, r3
 80139da:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80139de:	4293      	cmp	r3, r2
 80139e0:	bfb8      	it	lt
 80139e2:	4613      	movlt	r3, r2
 80139e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80139e8:	4b42      	ldr	r3, [pc, #264]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80139ea:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80139ee:	4a41      	ldr	r2, [pc, #260]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80139f0:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80139f4:	4a3f      	ldr	r2, [pc, #252]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 80139f6:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fc fbc8 	bl	8010190 <CheckForMinimumAbpDatarate>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013a0c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d05f      	beq.n	8013ad4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013a14:	4b37      	ldr	r3, [pc, #220]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a16:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8013a1a:	f083 0301 	eor.w	r3, r3, #1
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10e      	bne.n	8013a42 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013a24:	4b33      	ldr	r3, [pc, #204]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a26:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8013a2a:	4a32      	ldr	r2, [pc, #200]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a2c:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8013a30:	4a30      	ldr	r2, [pc, #192]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a32:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fc fbaa 	bl	8010190 <CheckForMinimumAbpDatarate>
 8013a3c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d01c      	beq.n	8013a7c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013a42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013a46:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a4c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8013a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013a54:	4b27      	ldr	r3, [pc, #156]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013a5a:	f107 0120 	add.w	r1, r7, #32
 8013a5e:	2205      	movs	r2, #5
 8013a60:	4618      	mov	r0, r3
 8013a62:	f002 f912 	bl	8015c8a <RegionVerify>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d005      	beq.n	8013a78 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013a6c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013a70:	4b20      	ldr	r3, [pc, #128]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013a76:	e001      	b.n	8013a7c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a78:	2303      	movs	r3, #3
 8013a7a:	e032      	b.n	8013ae2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8013af4 <LoRaMacMcpsRequest+0x26c>)
 8013a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013a82:	4a1b      	ldr	r2, [pc, #108]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 8013a84:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8013a88:	4611      	mov	r1, r2
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fc fc6a 	bl	8010364 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013a90:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013a92:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8013a96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013a9a:	78fb      	ldrb	r3, [r7, #3]
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013aa2:	f7fd fc0f 	bl	80112c4 <Send>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013aac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d10b      	bne.n	8013acc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013ab4:	7b3a      	ldrb	r2, [r7, #12]
 8013ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 8013ab8:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013abc:	4a0c      	ldr	r2, [pc, #48]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 8013abe:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8013ac2:	f043 0301 	orr.w	r3, r3, #1
 8013ac6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8013aca:	e003      	b.n	8013ad4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013acc:	4b08      	ldr	r3, [pc, #32]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 8013ace:	2200      	movs	r2, #0
 8013ad0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013ad4:	4b06      	ldr	r3, [pc, #24]	@ (8013af0 <LoRaMacMcpsRequest+0x268>)
 8013ad6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	611a      	str	r2, [r3, #16]

    return status;
 8013ade:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3740      	adds	r7, #64	@ 0x40
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8013aea:	bf00      	nop
 8013aec:	20000d14 	.word	0x20000d14
 8013af0:	200008d0 	.word	0x200008d0
 8013af4:	20000df0 	.word	0x20000df0

08013af8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	4603      	mov	r3, r0
 8013b00:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013b02:	79fb      	ldrb	r3, [r7, #7]
 8013b04:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013b06:	4b0a      	ldr	r3, [pc, #40]	@ (8013b30 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013b08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013b0c:	f107 010c 	add.w	r1, r7, #12
 8013b10:	220f      	movs	r2, #15
 8013b12:	4618      	mov	r0, r3
 8013b14:	f002 f8b9 	bl	8015c8a <RegionVerify>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d003      	beq.n	8013b26 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013b1e:	4a04      	ldr	r2, [pc, #16]	@ (8013b30 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013b20:	79fb      	ldrb	r3, [r7, #7]
 8013b22:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8013b26:	bf00      	nop
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	20000df0 	.word	0x20000df0

08013b34 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013b38:	f7fe ff26 	bl	8012988 <LoRaMacStop>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d111      	bne.n	8013b66 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013b42:	480a      	ldr	r0, [pc, #40]	@ (8013b6c <LoRaMacDeInitialization+0x38>)
 8013b44:	f008 fc4c 	bl	801c3e0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013b48:	4809      	ldr	r0, [pc, #36]	@ (8013b70 <LoRaMacDeInitialization+0x3c>)
 8013b4a:	f008 fc49 	bl	801c3e0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013b4e:	4809      	ldr	r0, [pc, #36]	@ (8013b74 <LoRaMacDeInitialization+0x40>)
 8013b50:	f008 fc46 	bl	801c3e0 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013b54:	f000 f948 	bl	8013de8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013b58:	f7fd ff1a 	bl	8011990 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013b5c:	4b06      	ldr	r3, [pc, #24]	@ (8013b78 <LoRaMacDeInitialization+0x44>)
 8013b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b60:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e000      	b.n	8013b68 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013b66:	2301      	movs	r3, #1
    }
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	20000c38 	.word	0x20000c38
 8013b70:	20000c50 	.word	0x20000c50
 8013b74:	20000c68 	.word	0x20000c68
 8013b78:	08020714 	.word	0x08020714

08013b7c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08c      	sub	sp, #48	@ 0x30
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	7b1b      	ldrb	r3, [r3, #12]
 8013b94:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	7b5b      	ldrb	r3, [r3, #13]
 8013b9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	7b9b      	ldrb	r3, [r3, #14]
 8013ba4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bae:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	785b      	ldrb	r3, [r3, #1]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f000 8088 	beq.w	8013cca <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013bba:	2302      	movs	r3, #2
 8013bbc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	7bdb      	ldrb	r3, [r3, #15]
 8013bc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7c1b      	ldrb	r3, [r3, #16]
 8013bcc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f002 f81e 	bl	8015c14 <RegionGetPhyParam>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013bdc:	6a3b      	ldr	r3, [r7, #32]
 8013bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013be2:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8013be6:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8013bea:	4293      	cmp	r3, r2
 8013bec:	bfb8      	it	lt
 8013bee:	4613      	movlt	r3, r2
 8013bf0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	8912      	ldrh	r2, [r2, #8]
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d302      	bcc.n	8013c06 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013c00:	2301      	movs	r3, #1
 8013c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	68fa      	ldr	r2, [r7, #12]
 8013c0c:	8912      	ldrh	r2, [r2, #8]
 8013c0e:	4611      	mov	r1, r2
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	8952      	ldrh	r2, [r2, #10]
 8013c14:	440a      	add	r2, r1
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d30f      	bcc.n	8013c3a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013c1a:	230a      	movs	r3, #10
 8013c1c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	7c1b      	ldrb	r3, [r3, #16]
 8013c24:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013c28:	4611      	mov	r1, r2
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f001 fff2 	bl	8015c14 <RegionGetPhyParam>
 8013c30:	4603      	mov	r3, r0
 8013c32:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013c34:	6a3b      	ldr	r3, [r7, #32]
 8013c36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	8912      	ldrh	r2, [r2, #8]
 8013c42:	4611      	mov	r1, r2
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	8952      	ldrh	r2, [r2, #10]
 8013c48:	0052      	lsls	r2, r2, #1
 8013c4a:	440a      	add	r2, r1
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d33c      	bcc.n	8013cca <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	8912      	ldrh	r2, [r2, #8]
 8013c58:	1a9b      	subs	r3, r3, r2
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	8952      	ldrh	r2, [r2, #10]
 8013c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c62:	fb01 f202 	mul.w	r2, r1, r2
 8013c66:	1a9b      	subs	r3, r3, r2
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d12e      	bne.n	8013cca <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013c6c:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8013c70:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d110      	bne.n	8013c9a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d009      	beq.n	8013c94 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013c80:	2302      	movs	r3, #2
 8013c82:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	7c1b      	ldrb	r3, [r3, #16]
 8013c88:	f107 0210 	add.w	r2, r7, #16
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f001 ffe9 	bl	8015c66 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013c94:	2301      	movs	r3, #1
 8013c96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013c9a:	2321      	movs	r3, #33	@ 0x21
 8013c9c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8013ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	7bdb      	ldrb	r3, [r3, #15]
 8013cac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	7c1b      	ldrb	r3, [r3, #16]
 8013cb4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013cb8:	4611      	mov	r1, r2
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f001 ffaa 	bl	8015c14 <RegionGetPhyParam>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013cc4:	6a3b      	ldr	r3, [r7, #32]
 8013cc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8013cd0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013cd8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013ce0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3730      	adds	r7, #48	@ 0x30
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013cee:	b480      	push	{r7}
 8013cf0:	b085      	sub	sp, #20
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cfa:	bf00      	nop
 8013cfc:	3714      	adds	r7, #20
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bc80      	pop	{r7}
 8013d02:	4770      	bx	lr

08013d04 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d0e:	bf00      	nop
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bc80      	pop	{r7}
 8013d16:	4770      	bx	lr

08013d18 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	4603      	mov	r3, r0
 8013d20:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d22:	bf00      	nop
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bc80      	pop	{r7}
 8013d2a:	4770      	bx	lr

08013d2c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d36:	bf00      	nop
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bc80      	pop	{r7}
 8013d3e:	4770      	bx	lr

08013d40 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013d40:	b480      	push	{r7}
 8013d42:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013d44:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bc80      	pop	{r7}
 8013d4c:	4770      	bx	lr

08013d4e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013d4e:	b480      	push	{r7}
 8013d50:	b083      	sub	sp, #12
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d56:	bf00      	nop
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bc80      	pop	{r7}
 8013d5e:	4770      	bx	lr

08013d60 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d68:	bf00      	nop
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bc80      	pop	{r7}
 8013d70:	4770      	bx	lr

08013d72 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013d72:	b480      	push	{r7}
 8013d74:	b083      	sub	sp, #12
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d7a:	bf00      	nop
 8013d7c:	370c      	adds	r7, #12
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bc80      	pop	{r7}
 8013d82:	4770      	bx	lr

08013d84 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013d90:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bc80      	pop	{r7}
 8013d9a:	4770      	bx	lr

08013d9c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013da0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bc80      	pop	{r7}
 8013da8:	4770      	bx	lr

08013daa <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013daa:	b480      	push	{r7}
 8013dac:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013dae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bc80      	pop	{r7}
 8013db6:	4770      	bx	lr

08013db8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013db8:	b480      	push	{r7}
 8013dba:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013dbc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bc80      	pop	{r7}
 8013dc4:	4770      	bx	lr

08013dc6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013dc6:	b480      	push	{r7}
 8013dc8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013dca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bc80      	pop	{r7}
 8013dd2:	4770      	bx	lr

08013dd4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	4603      	mov	r3, r0
 8013ddc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dde:	bf00      	nop
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bc80      	pop	{r7}
 8013de6:	4770      	bx	lr

08013de8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013de8:	b480      	push	{r7}
 8013dea:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dec:	bf00      	nop
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bc80      	pop	{r7}
 8013df2:	4770      	bx	lr

08013df4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013df4:	b480      	push	{r7}
 8013df6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013df8:	bf00      	nop
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bc80      	pop	{r7}
 8013dfe:	4770      	bx	lr

08013e00 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e0a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bc80      	pop	{r7}
 8013e14:	4770      	bx	lr

08013e16 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013e16:	b480      	push	{r7}
 8013e18:	b083      	sub	sp, #12
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e1e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bc80      	pop	{r7}
 8013e28:	4770      	bx	lr

08013e2a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013e2a:	b480      	push	{r7}
 8013e2c:	b083      	sub	sp, #12
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e32:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bc80      	pop	{r7}
 8013e3c:	4770      	bx	lr

08013e3e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013e3e:	b480      	push	{r7}
 8013e40:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e42:	bf00      	nop
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bc80      	pop	{r7}
 8013e48:	4770      	bx	lr

08013e4a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013e4a:	b480      	push	{r7}
 8013e4c:	b083      	sub	sp, #12
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	4603      	mov	r3, r0
 8013e52:	6039      	str	r1, [r7, #0]
 8013e54:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013e56:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bc80      	pop	{r7}
 8013e60:	4770      	bx	lr

08013e62 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013e62:	b480      	push	{r7}
 8013e64:	b083      	sub	sp, #12
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	4603      	mov	r3, r0
 8013e6a:	603a      	str	r2, [r7, #0]
 8013e6c:	80fb      	strh	r3, [r7, #6]
 8013e6e:	460b      	mov	r3, r1
 8013e70:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e72:	bf00      	nop
 8013e74:	370c      	adds	r7, #12
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bc80      	pop	{r7}
 8013e7a:	4770      	bx	lr

08013e7c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e80:	bf00      	nop
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bc80      	pop	{r7}
 8013e86:	4770      	bx	lr

08013e88 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b083      	sub	sp, #12
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013e90:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	370c      	adds	r7, #12
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bc80      	pop	{r7}
 8013e9a:	4770      	bx	lr

08013e9c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013e9c:	b480      	push	{r7}
 8013e9e:	b083      	sub	sp, #12
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013ea4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	370c      	adds	r7, #12
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bc80      	pop	{r7}
 8013eae:	4770      	bx	lr

08013eb0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013eb4:	bf00      	nop
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bc80      	pop	{r7}
 8013eba:	4770      	bx	lr

08013ebc <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ec8:	bf00      	nop
 8013eca:	370c      	adds	r7, #12
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bc80      	pop	{r7}
 8013ed0:	4770      	bx	lr

08013ed2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013ed2:	b480      	push	{r7}
 8013ed4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ed6:	bf00      	nop
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bc80      	pop	{r7}
 8013edc:	4770      	bx	lr

08013ede <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013ede:	b480      	push	{r7}
 8013ee0:	b085      	sub	sp, #20
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013eea:	2300      	movs	r3, #0
 8013eec:	81fb      	strh	r3, [r7, #14]
 8013eee:	e00a      	b.n	8013f06 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013ef0:	89fb      	ldrh	r3, [r7, #14]
 8013ef2:	68ba      	ldr	r2, [r7, #8]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d001      	beq.n	8013f00 <IsSlotFree+0x22>
        {
            return false;
 8013efc:	2300      	movs	r3, #0
 8013efe:	e006      	b.n	8013f0e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013f00:	89fb      	ldrh	r3, [r7, #14]
 8013f02:	3301      	adds	r3, #1
 8013f04:	81fb      	strh	r3, [r7, #14]
 8013f06:	89fb      	ldrh	r3, [r7, #14]
 8013f08:	2b0f      	cmp	r3, #15
 8013f0a:	d9f1      	bls.n	8013ef0 <IsSlotFree+0x12>
        }
    }
    return true;
 8013f0c:	2301      	movs	r3, #1
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3714      	adds	r7, #20
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bc80      	pop	{r7}
 8013f16:	4770      	bx	lr

08013f18 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013f22:	e007      	b.n	8013f34 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013f24:	79fb      	ldrb	r3, [r7, #7]
 8013f26:	3301      	adds	r3, #1
 8013f28:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013f2a:	79fb      	ldrb	r3, [r7, #7]
 8013f2c:	2b20      	cmp	r3, #32
 8013f2e:	d101      	bne.n	8013f34 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013f30:	2300      	movs	r3, #0
 8013f32:	e012      	b.n	8013f5a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013f34:	79fb      	ldrb	r3, [r7, #7]
 8013f36:	011b      	lsls	r3, r3, #4
 8013f38:	3308      	adds	r3, #8
 8013f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8013f64 <MallocNewMacCommandSlot+0x4c>)
 8013f3c:	4413      	add	r3, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff ffcd 	bl	8013ede <IsSlotFree>
 8013f44:	4603      	mov	r3, r0
 8013f46:	f083 0301 	eor.w	r3, r3, #1
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d1e9      	bne.n	8013f24 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013f50:	79fb      	ldrb	r3, [r7, #7]
 8013f52:	011b      	lsls	r3, r3, #4
 8013f54:	3308      	adds	r3, #8
 8013f56:	4a03      	ldr	r2, [pc, #12]	@ (8013f64 <MallocNewMacCommandSlot+0x4c>)
 8013f58:	4413      	add	r3, r2
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	20001990 	.word	0x20001990

08013f68 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d101      	bne.n	8013f7a <FreeMacCommandSlot+0x12>
    {
        return false;
 8013f76:	2300      	movs	r3, #0
 8013f78:	e005      	b.n	8013f86 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013f7a:	2210      	movs	r2, #16
 8013f7c:	2100      	movs	r1, #0
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f004 f924 	bl	80181cc <memset1>

    return true;
 8013f84:	2301      	movs	r3, #1
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d101      	bne.n	8013fa0 <LinkedListInit+0x12>
    {
        return false;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	e006      	b.n	8013fae <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	605a      	str	r2, [r3, #4]

    return true;
 8013fac:	2301      	movs	r3, #1
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	370c      	adds	r7, #12
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bc80      	pop	{r7}
 8013fb6:	4770      	bx	lr

08013fb8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b083      	sub	sp, #12
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d002      	beq.n	8013fce <LinkedListAdd+0x16>
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d101      	bne.n	8013fd2 <LinkedListAdd+0x1a>
    {
        return false;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e015      	b.n	8013ffe <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d102      	bne.n	8013fe0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d003      	beq.n	8013ff0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	683a      	ldr	r2, [r7, #0]
 8013ffa:	605a      	str	r2, [r3, #4]

    return true;
 8013ffc:	2301      	movs	r3, #1
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	370c      	adds	r7, #12
 8014002:	46bd      	mov	sp, r7
 8014004:	bc80      	pop	{r7}
 8014006:	4770      	bx	lr

08014008 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d002      	beq.n	801401e <LinkedListGetPrevious+0x16>
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d101      	bne.n	8014022 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801401e:	2300      	movs	r3, #0
 8014020:	e016      	b.n	8014050 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014028:	683a      	ldr	r2, [r7, #0]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	429a      	cmp	r2, r3
 801402e:	d00c      	beq.n	801404a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014030:	e002      	b.n	8014038 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d007      	beq.n	801404e <LinkedListGetPrevious+0x46>
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	429a      	cmp	r2, r3
 8014046:	d1f4      	bne.n	8014032 <LinkedListGetPrevious+0x2a>
 8014048:	e001      	b.n	801404e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801404a:	2300      	movs	r3, #0
 801404c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801404e:	68fb      	ldr	r3, [r7, #12]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3714      	adds	r7, #20
 8014054:	46bd      	mov	sp, r7
 8014056:	bc80      	pop	{r7}
 8014058:	4770      	bx	lr

0801405a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b084      	sub	sp, #16
 801405e:	af00      	add	r7, sp, #0
 8014060:	6078      	str	r0, [r7, #4]
 8014062:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d002      	beq.n	8014070 <LinkedListRemove+0x16>
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d101      	bne.n	8014074 <LinkedListRemove+0x1a>
    {
        return false;
 8014070:	2300      	movs	r3, #0
 8014072:	e020      	b.n	80140b6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014074:	6839      	ldr	r1, [r7, #0]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff ffc6 	bl	8014008 <LinkedListGetPrevious>
 801407c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	683a      	ldr	r2, [r7, #0]
 8014084:	429a      	cmp	r2, r3
 8014086:	d103      	bne.n	8014090 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	683a      	ldr	r2, [r7, #0]
 8014096:	429a      	cmp	r2, r3
 8014098:	d102      	bne.n	80140a0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d003      	beq.n	80140ae <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	2200      	movs	r2, #0
 80140b2:	601a      	str	r2, [r3, #0]

    return true;
 80140b4:	2301      	movs	r3, #1
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
	...

080140c0 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80140c0:	b480      	push	{r7}
 80140c2:	b083      	sub	sp, #12
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	4603      	mov	r3, r0
 80140c8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80140ca:	79fb      	ldrb	r3, [r7, #7]
 80140cc:	2b11      	cmp	r3, #17
 80140ce:	bf8c      	ite	hi
 80140d0:	2201      	movhi	r2, #1
 80140d2:	2200      	movls	r2, #0
 80140d4:	b2d2      	uxtb	r2, r2
 80140d6:	2a00      	cmp	r2, #0
 80140d8:	d10d      	bne.n	80140f6 <IsSticky+0x36>
 80140da:	4a0a      	ldr	r2, [pc, #40]	@ (8014104 <IsSticky+0x44>)
 80140dc:	fa22 f303 	lsr.w	r3, r2, r3
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	bf14      	ite	ne
 80140e8:	2301      	movne	r3, #1
 80140ea:	2300      	moveq	r3, #0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d001      	beq.n	80140f6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80140f2:	2301      	movs	r3, #1
 80140f4:	e000      	b.n	80140f8 <IsSticky+0x38>
        default:
            return false;
 80140f6:	2300      	movs	r3, #0
    }
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bc80      	pop	{r7}
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	00020720 	.word	0x00020720

08014108 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014108:	b580      	push	{r7, lr}
 801410a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801410c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014110:	2100      	movs	r1, #0
 8014112:	4804      	ldr	r0, [pc, #16]	@ (8014124 <LoRaMacCommandsInit+0x1c>)
 8014114:	f004 f85a 	bl	80181cc <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014118:	4802      	ldr	r0, [pc, #8]	@ (8014124 <LoRaMacCommandsInit+0x1c>)
 801411a:	f7ff ff38 	bl	8013f8e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801411e:	2300      	movs	r3, #0
}
 8014120:	4618      	mov	r0, r3
 8014122:	bd80      	pop	{r7, pc}
 8014124:	20001990 	.word	0x20001990

08014128 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	4603      	mov	r3, r0
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d101      	bne.n	8014140 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801413c:	2301      	movs	r3, #1
 801413e:	e033      	b.n	80141a8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014140:	f7ff feea 	bl	8013f18 <MallocNewMacCommandSlot>
 8014144:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d101      	bne.n	8014150 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801414c:	2302      	movs	r3, #2
 801414e:	e02b      	b.n	80141a8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014150:	6979      	ldr	r1, [r7, #20]
 8014152:	4817      	ldr	r0, [pc, #92]	@ (80141b0 <LoRaMacCommandsAddCmd+0x88>)
 8014154:	f7ff ff30 	bl	8013fb8 <LinkedListAdd>
 8014158:	4603      	mov	r3, r0
 801415a:	f083 0301 	eor.w	r3, r3, #1
 801415e:	b2db      	uxtb	r3, r3
 8014160:	2b00      	cmp	r3, #0
 8014162:	d001      	beq.n	8014168 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014164:	2305      	movs	r3, #5
 8014166:	e01f      	b.n	80141a8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	7bfa      	ldrb	r2, [r7, #15]
 801416c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	3305      	adds	r3, #5
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	b292      	uxth	r2, r2
 801417c:	68b9      	ldr	r1, [r7, #8]
 801417e:	4618      	mov	r0, r3
 8014180:	f003 ffe9 	bl	8018156 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014184:	7bfb      	ldrb	r3, [r7, #15]
 8014186:	4618      	mov	r0, r3
 8014188:	f7ff ff9a 	bl	80140c0 <IsSticky>
 801418c:	4603      	mov	r3, r0
 801418e:	461a      	mov	r2, r3
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014194:	4b06      	ldr	r3, [pc, #24]	@ (80141b0 <LoRaMacCommandsAddCmd+0x88>)
 8014196:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	4413      	add	r3, r2
 801419e:	3301      	adds	r3, #1
 80141a0:	4a03      	ldr	r2, [pc, #12]	@ (80141b0 <LoRaMacCommandsAddCmd+0x88>)
 80141a2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80141a6:	2300      	movs	r3, #0
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3718      	adds	r7, #24
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20001990 	.word	0x20001990

080141b4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d101      	bne.n	80141c6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80141c2:	2301      	movs	r3, #1
 80141c4:	e021      	b.n	801420a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80141c6:	6879      	ldr	r1, [r7, #4]
 80141c8:	4812      	ldr	r0, [pc, #72]	@ (8014214 <LoRaMacCommandsRemoveCmd+0x60>)
 80141ca:	f7ff ff46 	bl	801405a <LinkedListRemove>
 80141ce:	4603      	mov	r3, r0
 80141d0:	f083 0301 	eor.w	r3, r3, #1
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d001      	beq.n	80141de <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80141da:	2303      	movs	r3, #3
 80141dc:	e015      	b.n	801420a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80141de:	4b0d      	ldr	r3, [pc, #52]	@ (8014214 <LoRaMacCommandsRemoveCmd+0x60>)
 80141e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	3b01      	subs	r3, #1
 80141ec:	4a09      	ldr	r2, [pc, #36]	@ (8014214 <LoRaMacCommandsRemoveCmd+0x60>)
 80141ee:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7ff feb8 	bl	8013f68 <FreeMacCommandSlot>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f083 0301 	eor.w	r3, r3, #1
 80141fe:	b2db      	uxtb	r3, r3
 8014200:	2b00      	cmp	r3, #0
 8014202:	d001      	beq.n	8014208 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014204:	2305      	movs	r3, #5
 8014206:	e000      	b.n	801420a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014208:	2300      	movs	r3, #0
}
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	20001990 	.word	0x20001990

08014218 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801421e:	4b0f      	ldr	r3, [pc, #60]	@ (801425c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014224:	e012      	b.n	801424c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	7b1b      	ldrb	r3, [r3, #12]
 801422a:	f083 0301 	eor.w	r3, r3, #1
 801422e:	b2db      	uxtb	r3, r3
 8014230:	2b00      	cmp	r3, #0
 8014232:	d008      	beq.n	8014246 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7ff ffba 	bl	80141b4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	607b      	str	r3, [r7, #4]
 8014244:	e002      	b.n	801424c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d1e9      	bne.n	8014226 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}
 801425c:	20001990 	.word	0x20001990

08014260 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014266:	4b0e      	ldr	r3, [pc, #56]	@ (80142a0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801426c:	e00f      	b.n	801428e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	791b      	ldrb	r3, [r3, #4]
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff ff21 	bl	80140c0 <IsSticky>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d002      	beq.n	801428a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7ff ff95 	bl	80141b4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1ec      	bne.n	801426e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014294:	2300      	movs	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	20001990 	.word	0x20001990

080142a4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142b2:	2301      	movs	r3, #1
 80142b4:	e005      	b.n	80142c2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80142b6:	4b05      	ldr	r3, [pc, #20]	@ (80142cc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80142b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bc80      	pop	{r7}
 80142ca:	4770      	bx	lr
 80142cc:	20001990 	.word	0x20001990

080142d0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b088      	sub	sp, #32
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80142dc:	4b25      	ldr	r3, [pc, #148]	@ (8014374 <LoRaMacCommandsSerializeCmds+0xa4>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80142e2:	2300      	movs	r3, #0
 80142e4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <LoRaMacCommandsSerializeCmds+0x22>
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d126      	bne.n	8014340 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142f2:	2301      	movs	r3, #1
 80142f4:	e039      	b.n	801436a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80142f6:	7efb      	ldrb	r3, [r7, #27]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	1ad2      	subs	r2, r2, r3
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	689b      	ldr	r3, [r3, #8]
 8014300:	3301      	adds	r3, #1
 8014302:	429a      	cmp	r2, r3
 8014304:	d320      	bcc.n	8014348 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014306:	7efb      	ldrb	r3, [r7, #27]
 8014308:	1c5a      	adds	r2, r3, #1
 801430a:	76fa      	strb	r2, [r7, #27]
 801430c:	461a      	mov	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4413      	add	r3, r2
 8014312:	69fa      	ldr	r2, [r7, #28]
 8014314:	7912      	ldrb	r2, [r2, #4]
 8014316:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014318:	7efb      	ldrb	r3, [r7, #27]
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	18d0      	adds	r0, r2, r3
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	1d59      	adds	r1, r3, #5
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	b29b      	uxth	r3, r3
 8014328:	461a      	mov	r2, r3
 801432a:	f003 ff14 	bl	8018156 <memcpy1>
            itr += curElement->PayloadSize;
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	689b      	ldr	r3, [r3, #8]
 8014332:	b2da      	uxtb	r2, r3
 8014334:	7efb      	ldrb	r3, [r7, #27]
 8014336:	4413      	add	r3, r2
 8014338:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d1d7      	bne.n	80142f6 <LoRaMacCommandsSerializeCmds+0x26>
 8014346:	e009      	b.n	801435c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014348:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801434a:	e007      	b.n	801435c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014352:	69f8      	ldr	r0, [r7, #28]
 8014354:	f7ff ff2e 	bl	80141b4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801435c:	69fb      	ldr	r3, [r7, #28]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d1f4      	bne.n	801434c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014362:	68b8      	ldr	r0, [r7, #8]
 8014364:	f7ff ff9e 	bl	80142a4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3720      	adds	r7, #32
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	20001990 	.word	0x20001990

08014378 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014378:	b480      	push	{r7}
 801437a:	b085      	sub	sp, #20
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014386:	2301      	movs	r3, #1
 8014388:	e016      	b.n	80143b8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801438a:	4b0e      	ldr	r3, [pc, #56]	@ (80143c4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014396:	e00b      	b.n	80143b0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	7b1b      	ldrb	r3, [r3, #12]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d004      	beq.n	80143aa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2201      	movs	r2, #1
 80143a4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80143a6:	2300      	movs	r3, #0
 80143a8:	e006      	b.n	80143b8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1f0      	bne.n	8014398 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3714      	adds	r7, #20
 80143bc:	46bd      	mov	sp, r7
 80143be:	bc80      	pop	{r7}
 80143c0:	4770      	bx	lr
 80143c2:	bf00      	nop
 80143c4:	20001990 	.word	0x20001990

080143c8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b085      	sub	sp, #20
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	4603      	mov	r3, r0
 80143d0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80143d2:	2300      	movs	r3, #0
 80143d4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80143d6:	79fb      	ldrb	r3, [r7, #7]
 80143d8:	3b02      	subs	r3, #2
 80143da:	2b11      	cmp	r3, #17
 80143dc:	d850      	bhi.n	8014480 <LoRaMacCommandsGetCmdSize+0xb8>
 80143de:	a201      	add	r2, pc, #4	@ (adr r2, 80143e4 <LoRaMacCommandsGetCmdSize+0x1c>)
 80143e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e4:	0801442d 	.word	0x0801442d
 80143e8:	08014433 	.word	0x08014433
 80143ec:	08014439 	.word	0x08014439
 80143f0:	0801443f 	.word	0x0801443f
 80143f4:	08014445 	.word	0x08014445
 80143f8:	0801444b 	.word	0x0801444b
 80143fc:	08014451 	.word	0x08014451
 8014400:	08014457 	.word	0x08014457
 8014404:	0801445d 	.word	0x0801445d
 8014408:	08014481 	.word	0x08014481
 801440c:	08014481 	.word	0x08014481
 8014410:	08014463 	.word	0x08014463
 8014414:	08014481 	.word	0x08014481
 8014418:	08014481 	.word	0x08014481
 801441c:	08014469 	.word	0x08014469
 8014420:	0801446f 	.word	0x0801446f
 8014424:	08014475 	.word	0x08014475
 8014428:	0801447b 	.word	0x0801447b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801442c:	2303      	movs	r3, #3
 801442e:	73fb      	strb	r3, [r7, #15]
            break;
 8014430:	e027      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014432:	2305      	movs	r3, #5
 8014434:	73fb      	strb	r3, [r7, #15]
            break;
 8014436:	e024      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014438:	2302      	movs	r3, #2
 801443a:	73fb      	strb	r3, [r7, #15]
            break;
 801443c:	e021      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801443e:	2305      	movs	r3, #5
 8014440:	73fb      	strb	r3, [r7, #15]
            break;
 8014442:	e01e      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014444:	2301      	movs	r3, #1
 8014446:	73fb      	strb	r3, [r7, #15]
            break;
 8014448:	e01b      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801444a:	2306      	movs	r3, #6
 801444c:	73fb      	strb	r3, [r7, #15]
            break;
 801444e:	e018      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014450:	2302      	movs	r3, #2
 8014452:	73fb      	strb	r3, [r7, #15]
            break;
 8014454:	e015      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014456:	2302      	movs	r3, #2
 8014458:	73fb      	strb	r3, [r7, #15]
            break;
 801445a:	e012      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801445c:	2305      	movs	r3, #5
 801445e:	73fb      	strb	r3, [r7, #15]
            break;
 8014460:	e00f      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014462:	2306      	movs	r3, #6
 8014464:	73fb      	strb	r3, [r7, #15]
            break;
 8014466:	e00c      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014468:	2301      	movs	r3, #1
 801446a:	73fb      	strb	r3, [r7, #15]
            break;
 801446c:	e009      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801446e:	2305      	movs	r3, #5
 8014470:	73fb      	strb	r3, [r7, #15]
            break;
 8014472:	e006      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014474:	2304      	movs	r3, #4
 8014476:	73fb      	strb	r3, [r7, #15]
            break;
 8014478:	e003      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801447a:	2304      	movs	r3, #4
 801447c:	73fb      	strb	r3, [r7, #15]
            break;
 801447e:	e000      	b.n	8014482 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014480:	bf00      	nop
        }
    }
    return cidSize;
 8014482:	7bfb      	ldrb	r3, [r7, #15]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3714      	adds	r7, #20
 8014488:	46bd      	mov	sp, r7
 801448a:	bc80      	pop	{r7}
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop

08014490 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	4a07      	ldr	r2, [pc, #28]	@ (80144b8 <IncreaseBufferPointer+0x28>)
 801449c:	4293      	cmp	r3, r2
 801449e:	d102      	bne.n	80144a6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80144a0:	4b06      	ldr	r3, [pc, #24]	@ (80144bc <IncreaseBufferPointer+0x2c>)
 80144a2:	607b      	str	r3, [r7, #4]
 80144a4:	e002      	b.n	80144ac <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	3304      	adds	r3, #4
 80144aa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80144ac:	687b      	ldr	r3, [r7, #4]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	370c      	adds	r7, #12
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bc80      	pop	{r7}
 80144b6:	4770      	bx	lr
 80144b8:	20001bb8 	.word	0x20001bb8
 80144bc:	20001ba8 	.word	0x20001ba8

080144c0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	4603      	mov	r3, r0
 80144c8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80144ca:	79fb      	ldrb	r3, [r7, #7]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d101      	bne.n	80144d4 <IsListEmpty+0x14>
    {
        return true;
 80144d0:	2301      	movs	r3, #1
 80144d2:	e000      	b.n	80144d6 <IsListEmpty+0x16>
    }
    return false;
 80144d4:	2300      	movs	r3, #0
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	370c      	adds	r7, #12
 80144da:	46bd      	mov	sp, r7
 80144dc:	bc80      	pop	{r7}
 80144de:	4770      	bx	lr

080144e0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80144e0:	b480      	push	{r7}
 80144e2:	b083      	sub	sp, #12
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	4603      	mov	r3, r0
 80144e8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80144ea:	79fb      	ldrb	r3, [r7, #7]
 80144ec:	2b04      	cmp	r3, #4
 80144ee:	d901      	bls.n	80144f4 <IsListFull+0x14>
    {
        return true;
 80144f0:	2301      	movs	r3, #1
 80144f2:	e000      	b.n	80144f6 <IsListFull+0x16>
    }
    return false;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	370c      	adds	r7, #12
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bc80      	pop	{r7}
 80144fe:	4770      	bx	lr

08014500 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	4603      	mov	r3, r0
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	607a      	str	r2, [r7, #4]
 801450c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014512:	4b13      	ldr	r3, [pc, #76]	@ (8014560 <GetElement+0x60>)
 8014514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014518:	4618      	mov	r0, r3
 801451a:	f7ff ffd1 	bl	80144c0 <IsListEmpty>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <GetElement+0x28>
    {
        return NULL;
 8014524:	2300      	movs	r3, #0
 8014526:	e017      	b.n	8014558 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014528:	2300      	movs	r3, #0
 801452a:	74fb      	strb	r3, [r7, #19]
 801452c:	e00d      	b.n	801454a <GetElement+0x4a>
    {
        if( element->Request == request )
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	7bfa      	ldrb	r2, [r7, #15]
 8014534:	429a      	cmp	r2, r3
 8014536:	d101      	bne.n	801453c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	e00d      	b.n	8014558 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801453c:	6978      	ldr	r0, [r7, #20]
 801453e:	f7ff ffa7 	bl	8014490 <IncreaseBufferPointer>
 8014542:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014544:	7cfb      	ldrb	r3, [r7, #19]
 8014546:	3301      	adds	r3, #1
 8014548:	74fb      	strb	r3, [r7, #19]
 801454a:	4b05      	ldr	r3, [pc, #20]	@ (8014560 <GetElement+0x60>)
 801454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014550:	7cfa      	ldrb	r2, [r7, #19]
 8014552:	429a      	cmp	r2, r3
 8014554:	d3eb      	bcc.n	801452e <GetElement+0x2e>
    }

    return NULL;
 8014556:	2300      	movs	r3, #0
}
 8014558:	4618      	mov	r0, r3
 801455a:	3718      	adds	r7, #24
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	20001b9c 	.word	0x20001b9c

08014564 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801456c:	4a0c      	ldr	r2, [pc, #48]	@ (80145a0 <LoRaMacConfirmQueueInit+0x3c>)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014572:	4b0b      	ldr	r3, [pc, #44]	@ (80145a0 <LoRaMacConfirmQueueInit+0x3c>)
 8014574:	2200      	movs	r2, #0
 8014576:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801457a:	4b09      	ldr	r3, [pc, #36]	@ (80145a0 <LoRaMacConfirmQueueInit+0x3c>)
 801457c:	4a09      	ldr	r2, [pc, #36]	@ (80145a4 <LoRaMacConfirmQueueInit+0x40>)
 801457e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014580:	4b07      	ldr	r3, [pc, #28]	@ (80145a0 <LoRaMacConfirmQueueInit+0x3c>)
 8014582:	4a08      	ldr	r2, [pc, #32]	@ (80145a4 <LoRaMacConfirmQueueInit+0x40>)
 8014584:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014586:	2214      	movs	r2, #20
 8014588:	21ff      	movs	r1, #255	@ 0xff
 801458a:	4806      	ldr	r0, [pc, #24]	@ (80145a4 <LoRaMacConfirmQueueInit+0x40>)
 801458c:	f003 fe1e 	bl	80181cc <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014590:	4b03      	ldr	r3, [pc, #12]	@ (80145a0 <LoRaMacConfirmQueueInit+0x3c>)
 8014592:	2201      	movs	r2, #1
 8014594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014598:	bf00      	nop
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	20001b9c 	.word	0x20001b9c
 80145a4:	20001ba8 	.word	0x20001ba8

080145a8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80145b0:	4b19      	ldr	r3, [pc, #100]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7ff ff92 	bl	80144e0 <IsListFull>
 80145bc:	4603      	mov	r3, r0
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80145c2:	2300      	movs	r3, #0
 80145c4:	e024      	b.n	8014610 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80145c6:	4b14      	ldr	r3, [pc, #80]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145c8:	689b      	ldr	r3, [r3, #8]
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	7812      	ldrb	r2, [r2, #0]
 80145ce:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80145d0:	4b11      	ldr	r3, [pc, #68]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	7852      	ldrb	r2, [r2, #1]
 80145d8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80145da:	4b0f      	ldr	r3, [pc, #60]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	78d2      	ldrb	r2, [r2, #3]
 80145e2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80145e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	7892      	ldrb	r2, [r2, #2]
 80145ec:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80145ee:	4b0a      	ldr	r3, [pc, #40]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145f4:	3301      	adds	r3, #1
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	4b07      	ldr	r3, [pc, #28]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 80145fa:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80145fe:	4b06      	ldr	r3, [pc, #24]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 8014600:	689b      	ldr	r3, [r3, #8]
 8014602:	4618      	mov	r0, r3
 8014604:	f7ff ff44 	bl	8014490 <IncreaseBufferPointer>
 8014608:	4603      	mov	r3, r0
 801460a:	4a03      	ldr	r2, [pc, #12]	@ (8014618 <LoRaMacConfirmQueueAdd+0x70>)
 801460c:	6093      	str	r3, [r2, #8]

    return true;
 801460e:	2301      	movs	r3, #1
}
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	20001b9c 	.word	0x20001b9c

0801461c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014620:	4b0e      	ldr	r3, [pc, #56]	@ (801465c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014626:	4618      	mov	r0, r3
 8014628:	f7ff ff4a 	bl	80144c0 <IsListEmpty>
 801462c:	4603      	mov	r3, r0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014632:	2300      	movs	r3, #0
 8014634:	e010      	b.n	8014658 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014636:	4b09      	ldr	r3, [pc, #36]	@ (801465c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014638:	f893 3020 	ldrb.w	r3, [r3, #32]
 801463c:	3b01      	subs	r3, #1
 801463e:	b2da      	uxtb	r2, r3
 8014640:	4b06      	ldr	r3, [pc, #24]	@ (801465c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014642:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014646:	4b05      	ldr	r3, [pc, #20]	@ (801465c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014648:	685b      	ldr	r3, [r3, #4]
 801464a:	4618      	mov	r0, r3
 801464c:	f7ff ff20 	bl	8014490 <IncreaseBufferPointer>
 8014650:	4603      	mov	r3, r0
 8014652:	4a02      	ldr	r2, [pc, #8]	@ (801465c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014654:	6053      	str	r3, [r2, #4]

    return true;
 8014656:	2301      	movs	r3, #1
}
 8014658:	4618      	mov	r0, r3
 801465a:	bd80      	pop	{r7, pc}
 801465c:	20001b9c 	.word	0x20001b9c

08014660 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b084      	sub	sp, #16
 8014664:	af00      	add	r7, sp, #0
 8014666:	4603      	mov	r3, r0
 8014668:	460a      	mov	r2, r1
 801466a:	71fb      	strb	r3, [r7, #7]
 801466c:	4613      	mov	r3, r2
 801466e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014670:	2300      	movs	r3, #0
 8014672:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014674:	4b10      	ldr	r3, [pc, #64]	@ (80146b8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014676:	f893 3020 	ldrb.w	r3, [r3, #32]
 801467a:	4618      	mov	r0, r3
 801467c:	f7ff ff20 	bl	80144c0 <IsListEmpty>
 8014680:	4603      	mov	r3, r0
 8014682:	f083 0301 	eor.w	r3, r3, #1
 8014686:	b2db      	uxtb	r3, r3
 8014688:	2b00      	cmp	r3, #0
 801468a:	d011      	beq.n	80146b0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801468c:	4b0a      	ldr	r3, [pc, #40]	@ (80146b8 <LoRaMacConfirmQueueSetStatus+0x58>)
 801468e:	6859      	ldr	r1, [r3, #4]
 8014690:	4b09      	ldr	r3, [pc, #36]	@ (80146b8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014692:	689a      	ldr	r2, [r3, #8]
 8014694:	79bb      	ldrb	r3, [r7, #6]
 8014696:	4618      	mov	r0, r3
 8014698:	f7ff ff32 	bl	8014500 <GetElement>
 801469c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d005      	beq.n	80146b0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	79fa      	ldrb	r2, [r7, #7]
 80146a8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	2201      	movs	r2, #1
 80146ae:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80146b0:	bf00      	nop
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	20001b9c 	.word	0x20001b9c

080146bc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	4603      	mov	r3, r0
 80146c4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80146c6:	2300      	movs	r3, #0
 80146c8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80146ca:	4b10      	ldr	r3, [pc, #64]	@ (801470c <LoRaMacConfirmQueueGetStatus+0x50>)
 80146cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7ff fef5 	bl	80144c0 <IsListEmpty>
 80146d6:	4603      	mov	r3, r0
 80146d8:	f083 0301 	eor.w	r3, r3, #1
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d00e      	beq.n	8014700 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80146e2:	4b0a      	ldr	r3, [pc, #40]	@ (801470c <LoRaMacConfirmQueueGetStatus+0x50>)
 80146e4:	6859      	ldr	r1, [r3, #4]
 80146e6:	4b09      	ldr	r3, [pc, #36]	@ (801470c <LoRaMacConfirmQueueGetStatus+0x50>)
 80146e8:	689a      	ldr	r2, [r3, #8]
 80146ea:	79fb      	ldrb	r3, [r7, #7]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7ff ff07 	bl	8014500 <GetElement>
 80146f2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d002      	beq.n	8014700 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	785b      	ldrb	r3, [r3, #1]
 80146fe:	e000      	b.n	8014702 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014700:	2301      	movs	r3, #1
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	20001b9c 	.word	0x20001b9c

08014710 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	4603      	mov	r3, r0
 8014718:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801471a:	4b16      	ldr	r3, [pc, #88]	@ (8014774 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014720:	4a14      	ldr	r2, [pc, #80]	@ (8014774 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014722:	79fb      	ldrb	r3, [r7, #7]
 8014724:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014728:	4b12      	ldr	r3, [pc, #72]	@ (8014774 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801472a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801472e:	4618      	mov	r0, r3
 8014730:	f7ff fec6 	bl	80144c0 <IsListEmpty>
 8014734:	4603      	mov	r3, r0
 8014736:	f083 0301 	eor.w	r3, r3, #1
 801473a:	b2db      	uxtb	r3, r3
 801473c:	2b00      	cmp	r3, #0
 801473e:	d015      	beq.n	801476c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	79fa      	ldrb	r2, [r7, #7]
 8014744:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	78db      	ldrb	r3, [r3, #3]
 801474a:	f083 0301 	eor.w	r3, r3, #1
 801474e:	b2db      	uxtb	r3, r3
 8014750:	2b00      	cmp	r3, #0
 8014752:	d002      	beq.n	801475a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2201      	movs	r2, #1
 8014758:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f7ff fe98 	bl	8014490 <IncreaseBufferPointer>
 8014760:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014762:	4b04      	ldr	r3, [pc, #16]	@ (8014774 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014764:	689b      	ldr	r3, [r3, #8]
 8014766:	68fa      	ldr	r2, [r7, #12]
 8014768:	429a      	cmp	r2, r3
 801476a:	d1e9      	bne.n	8014740 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801476c:	bf00      	nop
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	20001b9c 	.word	0x20001b9c

08014778 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	4603      	mov	r3, r0
 8014780:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014782:	4b09      	ldr	r3, [pc, #36]	@ (80147a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014784:	6859      	ldr	r1, [r3, #4]
 8014786:	4b08      	ldr	r3, [pc, #32]	@ (80147a8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014788:	689a      	ldr	r2, [r3, #8]
 801478a:	79fb      	ldrb	r3, [r7, #7]
 801478c:	4618      	mov	r0, r3
 801478e:	f7ff feb7 	bl	8014500 <GetElement>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	d001      	beq.n	801479c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014798:	2301      	movs	r3, #1
 801479a:	e000      	b.n	801479e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20001b9c 	.word	0x20001b9c

080147ac <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80147b4:	4b22      	ldr	r3, [pc, #136]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80147ba:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80147bc:	2300      	movs	r3, #0
 80147be:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80147c0:	2300      	movs	r3, #0
 80147c2:	73fb      	strb	r3, [r7, #15]
 80147c4:	e032      	b.n	801482c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80147c6:	4b1e      	ldr	r3, [pc, #120]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	781a      	ldrb	r2, [r3, #0]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80147d0:	4b1b      	ldr	r3, [pc, #108]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	785a      	ldrb	r2, [r3, #1]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80147da:	4b19      	ldr	r3, [pc, #100]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	789b      	ldrb	r3, [r3, #2]
 80147e0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80147e2:	7b7b      	ldrb	r3, [r7, #13]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d005      	beq.n	80147f4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80147e8:	4b15      	ldr	r3, [pc, #84]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	689b      	ldr	r3, [r3, #8]
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	4798      	blx	r3
 80147f2:	e00b      	b.n	801480c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80147f4:	4b12      	ldr	r3, [pc, #72]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80147fc:	4b10      	ldr	r3, [pc, #64]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	785b      	ldrb	r3, [r3, #1]
 8014802:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014804:	4b0e      	ldr	r3, [pc, #56]	@ (8014840 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	78db      	ldrb	r3, [r3, #3]
 801480a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801480c:	f7ff ff06 	bl	801461c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014810:	7b7b      	ldrb	r3, [r7, #13]
 8014812:	f083 0301 	eor.w	r3, r3, #1
 8014816:	b2db      	uxtb	r3, r3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d004      	beq.n	8014826 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801481c:	f107 0308 	add.w	r3, r7, #8
 8014820:	4618      	mov	r0, r3
 8014822:	f7ff fec1 	bl	80145a8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014826:	7bfb      	ldrb	r3, [r7, #15]
 8014828:	3301      	adds	r3, #1
 801482a:	73fb      	strb	r3, [r7, #15]
 801482c:	7bfa      	ldrb	r2, [r7, #15]
 801482e:	7bbb      	ldrb	r3, [r7, #14]
 8014830:	429a      	cmp	r2, r3
 8014832:	d3c8      	bcc.n	80147c6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014834:	bf00      	nop
 8014836:	bf00      	nop
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	20001b9c 	.word	0x20001b9c

08014844 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014844:	b480      	push	{r7}
 8014846:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014848:	4b03      	ldr	r3, [pc, #12]	@ (8014858 <LoRaMacConfirmQueueGetCnt+0x14>)
 801484a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801484e:	4618      	mov	r0, r3
 8014850:	46bd      	mov	sp, r7
 8014852:	bc80      	pop	{r7}
 8014854:	4770      	bx	lr
 8014856:	bf00      	nop
 8014858:	20001b9c 	.word	0x20001b9c

0801485c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801485c:	b580      	push	{r7, lr}
 801485e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014860:	4b06      	ldr	r3, [pc, #24]	@ (801487c <LoRaMacConfirmQueueIsFull+0x20>)
 8014862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014866:	4618      	mov	r0, r3
 8014868:	f7ff fe3a 	bl	80144e0 <IsListFull>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014872:	2301      	movs	r3, #1
 8014874:	e000      	b.n	8014878 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014876:	2300      	movs	r3, #0
    }
}
 8014878:	4618      	mov	r0, r3
 801487a:	bd80      	pop	{r7, pc}
 801487c:	20001b9c 	.word	0x20001b9c

08014880 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b08e      	sub	sp, #56	@ 0x38
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	607b      	str	r3, [r7, #4]
 801488a:	460b      	mov	r3, r1
 801488c:	817b      	strh	r3, [r7, #10]
 801488e:	4613      	mov	r3, r2
 8014890:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d101      	bne.n	801489c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014898:	2309      	movs	r3, #9
 801489a:	e086      	b.n	80149aa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801489c:	2300      	movs	r3, #0
 801489e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80148a2:	2301      	movs	r3, #1
 80148a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80148a6:	2300      	movs	r3, #0
 80148a8:	623b      	str	r3, [r7, #32]
 80148aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80148ae:	2200      	movs	r2, #0
 80148b0:	601a      	str	r2, [r3, #0]
 80148b2:	605a      	str	r2, [r3, #4]
 80148b4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80148b6:	2300      	movs	r3, #0
 80148b8:	613b      	str	r3, [r7, #16]
 80148ba:	f107 0314 	add.w	r3, r7, #20
 80148be:	2200      	movs	r2, #0
 80148c0:	601a      	str	r2, [r3, #0]
 80148c2:	605a      	str	r2, [r3, #4]
 80148c4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80148c6:	2301      	movs	r3, #1
 80148c8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80148ca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80148ce:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	b2db      	uxtb	r3, r3
 80148d4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	0a1b      	lsrs	r3, r3, #8
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	0c1b      	lsrs	r3, r3, #16
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	0e1b      	lsrs	r3, r3, #24
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80148ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80148f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148f6:	0a1b      	lsrs	r3, r3, #8
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80148fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148fe:	0c1b      	lsrs	r3, r3, #16
 8014900:	b2db      	uxtb	r3, r3
 8014902:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014906:	0e1b      	lsrs	r3, r3, #24
 8014908:	b2db      	uxtb	r3, r3
 801490a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801490c:	e048      	b.n	80149a0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801490e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014910:	b2db      	uxtb	r3, r3
 8014912:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014914:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014916:	3301      	adds	r3, #1
 8014918:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801491a:	f107 0320 	add.w	r3, r7, #32
 801491e:	7a7a      	ldrb	r2, [r7, #9]
 8014920:	f107 0010 	add.w	r0, r7, #16
 8014924:	2110      	movs	r1, #16
 8014926:	f7f8 fce2 	bl	800d2ee <SecureElementAesEncrypt>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014930:	230e      	movs	r3, #14
 8014932:	e03a      	b.n	80149aa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014934:	2300      	movs	r3, #0
 8014936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801493a:	e01e      	b.n	801497a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801493c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014940:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014944:	4413      	add	r3, r2
 8014946:	461a      	mov	r2, r3
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	4413      	add	r3, r2
 801494c:	7819      	ldrb	r1, [r3, #0]
 801494e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014952:	3338      	adds	r3, #56	@ 0x38
 8014954:	443b      	add	r3, r7
 8014956:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801495a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801495e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014962:	4403      	add	r3, r0
 8014964:	4618      	mov	r0, r3
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	4403      	add	r3, r0
 801496a:	404a      	eors	r2, r1
 801496c:	b2d2      	uxtb	r2, r2
 801496e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014974:	3301      	adds	r3, #1
 8014976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801497a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801497e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014982:	2a10      	cmp	r2, #16
 8014984:	bfa8      	it	ge
 8014986:	2210      	movge	r2, #16
 8014988:	b212      	sxth	r2, r2
 801498a:	4293      	cmp	r3, r2
 801498c:	dbd6      	blt.n	801493c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801498e:	897b      	ldrh	r3, [r7, #10]
 8014990:	3b10      	subs	r3, #16
 8014992:	b29b      	uxth	r3, r3
 8014994:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014996:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801499a:	3310      	adds	r3, #16
 801499c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80149a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	dcb2      	bgt.n	801490e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80149a8:	2300      	movs	r3, #0
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3738      	adds	r7, #56	@ 0x38
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80149b2:	b490      	push	{r4, r7}
 80149b4:	b082      	sub	sp, #8
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	4604      	mov	r4, r0
 80149ba:	4608      	mov	r0, r1
 80149bc:	4611      	mov	r1, r2
 80149be:	461a      	mov	r2, r3
 80149c0:	4623      	mov	r3, r4
 80149c2:	80fb      	strh	r3, [r7, #6]
 80149c4:	4603      	mov	r3, r0
 80149c6:	717b      	strb	r3, [r7, #5]
 80149c8:	460b      	mov	r3, r1
 80149ca:	713b      	strb	r3, [r7, #4]
 80149cc:	4613      	mov	r3, r2
 80149ce:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d101      	bne.n	80149da <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149d6:	2309      	movs	r3, #9
 80149d8:	e04e      	b.n	8014a78 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	2249      	movs	r2, #73	@ 0x49
 80149de:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	3301      	adds	r3, #1
 80149e4:	2200      	movs	r2, #0
 80149e6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	3302      	adds	r3, #2
 80149ec:	2200      	movs	r2, #0
 80149ee:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	3303      	adds	r3, #3
 80149f4:	2200      	movs	r2, #0
 80149f6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80149f8:	69bb      	ldr	r3, [r7, #24]
 80149fa:	3304      	adds	r3, #4
 80149fc:	2200      	movs	r2, #0
 80149fe:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	3305      	adds	r3, #5
 8014a04:	78fa      	ldrb	r2, [r7, #3]
 8014a06:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014a08:	69bb      	ldr	r3, [r7, #24]
 8014a0a:	3306      	adds	r3, #6
 8014a0c:	693a      	ldr	r2, [r7, #16]
 8014a0e:	b2d2      	uxtb	r2, r2
 8014a10:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	0a1a      	lsrs	r2, r3, #8
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	3307      	adds	r3, #7
 8014a1a:	b2d2      	uxtb	r2, r2
 8014a1c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	0c1a      	lsrs	r2, r3, #16
 8014a22:	69bb      	ldr	r3, [r7, #24]
 8014a24:	3308      	adds	r3, #8
 8014a26:	b2d2      	uxtb	r2, r2
 8014a28:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	0e1a      	lsrs	r2, r3, #24
 8014a2e:	69bb      	ldr	r3, [r7, #24]
 8014a30:	3309      	adds	r3, #9
 8014a32:	b2d2      	uxtb	r2, r2
 8014a34:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	330a      	adds	r3, #10
 8014a3a:	697a      	ldr	r2, [r7, #20]
 8014a3c:	b2d2      	uxtb	r2, r2
 8014a3e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	0a1a      	lsrs	r2, r3, #8
 8014a44:	69bb      	ldr	r3, [r7, #24]
 8014a46:	330b      	adds	r3, #11
 8014a48:	b2d2      	uxtb	r2, r2
 8014a4a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	0c1a      	lsrs	r2, r3, #16
 8014a50:	69bb      	ldr	r3, [r7, #24]
 8014a52:	330c      	adds	r3, #12
 8014a54:	b2d2      	uxtb	r2, r2
 8014a56:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	0e1a      	lsrs	r2, r3, #24
 8014a5c:	69bb      	ldr	r3, [r7, #24]
 8014a5e:	330d      	adds	r3, #13
 8014a60:	b2d2      	uxtb	r2, r2
 8014a62:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014a64:	69bb      	ldr	r3, [r7, #24]
 8014a66:	330e      	adds	r3, #14
 8014a68:	2200      	movs	r2, #0
 8014a6a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014a6c:	69bb      	ldr	r3, [r7, #24]
 8014a6e:	330f      	adds	r3, #15
 8014a70:	88fa      	ldrh	r2, [r7, #6]
 8014a72:	b2d2      	uxtb	r2, r2
 8014a74:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a76:	2300      	movs	r3, #0
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bc90      	pop	{r4, r7}
 8014a80:	4770      	bx	lr

08014a82 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014a82:	b590      	push	{r4, r7, lr}
 8014a84:	b08b      	sub	sp, #44	@ 0x2c
 8014a86:	af04      	add	r7, sp, #16
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	4608      	mov	r0, r1
 8014a8c:	4611      	mov	r1, r2
 8014a8e:	461a      	mov	r2, r3
 8014a90:	4603      	mov	r3, r0
 8014a92:	807b      	strh	r3, [r7, #2]
 8014a94:	460b      	mov	r3, r1
 8014a96:	707b      	strb	r3, [r7, #1]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d002      	beq.n	8014aa8 <ComputeCmacB0+0x26>
 8014aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d101      	bne.n	8014aac <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014aa8:	2309      	movs	r3, #9
 8014aaa:	e024      	b.n	8014af6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014aac:	887b      	ldrh	r3, [r7, #2]
 8014aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014ab2:	d901      	bls.n	8014ab8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014ab4:	230d      	movs	r3, #13
 8014ab6:	e01e      	b.n	8014af6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014ab8:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014abc:	783a      	ldrb	r2, [r7, #0]
 8014abe:	7879      	ldrb	r1, [r7, #1]
 8014ac0:	8878      	ldrh	r0, [r7, #2]
 8014ac2:	f107 0308 	add.w	r3, r7, #8
 8014ac6:	9302      	str	r3, [sp, #8]
 8014ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aca:	9301      	str	r3, [sp, #4]
 8014acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	4623      	mov	r3, r4
 8014ad2:	f7ff ff6e 	bl	80149b2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014ad6:	7879      	ldrb	r1, [r7, #1]
 8014ad8:	887a      	ldrh	r2, [r7, #2]
 8014ada:	f107 0008 	add.w	r0, r7, #8
 8014ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	6879      	ldr	r1, [r7, #4]
 8014ae6:	f7f8 fbb5 	bl	800d254 <SecureElementComputeAesCmac>
 8014aea:	4603      	mov	r3, r0
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d001      	beq.n	8014af4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014af0:	230e      	movs	r3, #14
 8014af2:	e000      	b.n	8014af6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	371c      	adds	r7, #28
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd90      	pop	{r4, r7, pc}

08014afe <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014afe:	b590      	push	{r4, r7, lr}
 8014b00:	b0cd      	sub	sp, #308	@ 0x134
 8014b02:	af04      	add	r7, sp, #16
 8014b04:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014b08:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014b0c:	6020      	str	r0, [r4, #0]
 8014b0e:	460c      	mov	r4, r1
 8014b10:	4610      	mov	r0, r2
 8014b12:	4619      	mov	r1, r3
 8014b14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b18:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b1c:	4622      	mov	r2, r4
 8014b1e:	801a      	strh	r2, [r3, #0]
 8014b20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b24:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014b28:	4602      	mov	r2, r0
 8014b2a:	701a      	strb	r2, [r3, #0]
 8014b2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b34:	460a      	mov	r2, r1
 8014b36:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014b38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d101      	bne.n	8014b4a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b46:	2309      	movs	r3, #9
 8014b48:	e063      	b.n	8014c12 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014b4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b4e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014b58:	d901      	bls.n	8014b5e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014b5a:	230d      	movs	r3, #13
 8014b5c:	e059      	b.n	8014c12 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014b5e:	f107 030c 	add.w	r3, r7, #12
 8014b62:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8014b66:	2100      	movs	r1, #0
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f003 fb2f 	bl	80181cc <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014b6e:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8014b72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b7a:	781a      	ldrb	r2, [r3, #0]
 8014b7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b80:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014b84:	7819      	ldrb	r1, [r3, #0]
 8014b86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b8a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b8e:	8818      	ldrh	r0, [r3, #0]
 8014b90:	f107 030c 	add.w	r3, r7, #12
 8014b94:	9302      	str	r3, [sp, #8]
 8014b96:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	4623      	mov	r3, r4
 8014ba4:	f7ff ff05 	bl	80149b2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014ba8:	f107 030c 	add.w	r3, r7, #12
 8014bac:	3310      	adds	r3, #16
 8014bae:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8014bb2:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8014bb6:	8812      	ldrh	r2, [r2, #0]
 8014bb8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8014bbc:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8014bc0:	6809      	ldr	r1, [r1, #0]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f003 fac7 	bl	8018156 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014bc8:	2306      	movs	r3, #6
 8014bca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014bce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014bd2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014bd6:	881b      	ldrh	r3, [r3, #0]
 8014bd8:	3310      	adds	r3, #16
 8014bda:	b299      	uxth	r1, r3
 8014bdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014be0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	f107 000c 	add.w	r0, r7, #12
 8014bea:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014bee:	f7f8 fb4f 	bl	800d290 <SecureElementVerifyAesCmac>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d101      	bne.n	8014c04 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e006      	b.n	8014c12 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014c04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d101      	bne.n	8014c10 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e000      	b.n	8014c12 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c10:	230e      	movs	r3, #14
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd90      	pop	{r4, r7, pc}

08014c1c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	6039      	str	r1, [r7, #0]
 8014c26:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014c28:	2300      	movs	r3, #0
 8014c2a:	73fb      	strb	r3, [r7, #15]
 8014c2c:	e011      	b.n	8014c52 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014c2e:	7bfb      	ldrb	r3, [r7, #15]
 8014c30:	4a0c      	ldr	r2, [pc, #48]	@ (8014c64 <GetKeyAddrItem+0x48>)
 8014c32:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014c36:	79fa      	ldrb	r2, [r7, #7]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d107      	bne.n	8014c4c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	4a08      	ldr	r2, [pc, #32]	@ (8014c64 <GetKeyAddrItem+0x48>)
 8014c42:	441a      	add	r2, r3
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	e006      	b.n	8014c5a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014c4c:	7bfb      	ldrb	r3, [r7, #15]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	73fb      	strb	r3, [r7, #15]
 8014c52:	7bfb      	ldrb	r3, [r7, #15]
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d9ea      	bls.n	8014c2e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014c58:	230b      	movs	r3, #11
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3714      	adds	r7, #20
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bc80      	pop	{r7}
 8014c62:	4770      	bx	lr
 8014c64:	20000108 	.word	0x20000108

08014c68 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b088      	sub	sp, #32
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60b9      	str	r1, [r7, #8]
 8014c70:	607a      	str	r2, [r7, #4]
 8014c72:	461a      	mov	r2, r3
 8014c74:	4603      	mov	r3, r0
 8014c76:	73fb      	strb	r3, [r7, #15]
 8014c78:	4613      	mov	r3, r2
 8014c7a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	613b      	str	r3, [r7, #16]
 8014c80:	f107 0314 	add.w	r3, r7, #20
 8014c84:	2200      	movs	r2, #0
 8014c86:	601a      	str	r2, [r3, #0]
 8014c88:	605a      	str	r2, [r3, #4]
 8014c8a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014c8c:	7bfb      	ldrb	r3, [r7, #15]
 8014c8e:	2b02      	cmp	r3, #2
 8014c90:	d002      	beq.n	8014c98 <DeriveSessionKey10x+0x30>
 8014c92:	2b03      	cmp	r3, #3
 8014c94:	d003      	beq.n	8014c9e <DeriveSessionKey10x+0x36>
 8014c96:	e005      	b.n	8014ca4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	743b      	strb	r3, [r7, #16]
            break;
 8014c9c:	e004      	b.n	8014ca8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014c9e:	2302      	movs	r3, #2
 8014ca0:	743b      	strb	r3, [r7, #16]
            break;
 8014ca2:	e001      	b.n	8014ca8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014ca4:	230a      	movs	r3, #10
 8014ca6:	e02a      	b.n	8014cfe <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	0a1b      	lsrs	r3, r3, #8
 8014cb2:	b2db      	uxtb	r3, r3
 8014cb4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	0c1b      	lsrs	r3, r3, #16
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	0a1b      	lsrs	r3, r3, #8
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	0c1b      	lsrs	r3, r3, #16
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014cd4:	89bb      	ldrh	r3, [r7, #12]
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014cda:	89bb      	ldrh	r3, [r7, #12]
 8014cdc:	0a1b      	lsrs	r3, r3, #8
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014ce4:	7bfa      	ldrb	r2, [r7, #15]
 8014ce6:	f107 0310 	add.w	r3, r7, #16
 8014cea:	2101      	movs	r1, #1
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7f8 fb65 	bl	800d3bc <SecureElementDeriveAndStoreKey>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d001      	beq.n	8014cfc <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014cf8:	230e      	movs	r3, #14
 8014cfa:	e000      	b.n	8014cfe <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014cfc:	2300      	movs	r3, #0
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3720      	adds	r7, #32
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
	...

08014d08 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	4603      	mov	r3, r0
 8014d10:	6039      	str	r1, [r7, #0]
 8014d12:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d101      	bne.n	8014d1e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d1a:	2309      	movs	r3, #9
 8014d1c:	e03b      	b.n	8014d96 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014d1e:	79fb      	ldrb	r3, [r7, #7]
 8014d20:	3b01      	subs	r3, #1
 8014d22:	2b03      	cmp	r3, #3
 8014d24:	d834      	bhi.n	8014d90 <GetLastFcntDown+0x88>
 8014d26:	a201      	add	r2, pc, #4	@ (adr r2, 8014d2c <GetLastFcntDown+0x24>)
 8014d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d2c:	08014d3d 	.word	0x08014d3d
 8014d30:	08014d55 	.word	0x08014d55
 8014d34:	08014d6d 	.word	0x08014d6d
 8014d38:	08014d85 	.word	0x08014d85
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014d3c:	4b18      	ldr	r3, [pc, #96]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	691a      	ldr	r2, [r3, #16]
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014d46:	4b16      	ldr	r3, [pc, #88]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	4b15      	ldr	r3, [pc, #84]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	6912      	ldr	r2, [r2, #16]
 8014d50:	621a      	str	r2, [r3, #32]
            break;
 8014d52:	e01f      	b.n	8014d94 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014d54:	4b12      	ldr	r3, [pc, #72]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	695a      	ldr	r2, [r3, #20]
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014d5e:	4b10      	ldr	r3, [pc, #64]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4b0f      	ldr	r3, [pc, #60]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	6952      	ldr	r2, [r2, #20]
 8014d68:	621a      	str	r2, [r3, #32]
            break;
 8014d6a:	e013      	b.n	8014d94 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	699a      	ldr	r2, [r3, #24]
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014d76:	4b0a      	ldr	r3, [pc, #40]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	4b09      	ldr	r3, [pc, #36]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	6992      	ldr	r2, [r2, #24]
 8014d80:	621a      	str	r2, [r3, #32]
            break;
 8014d82:	e007      	b.n	8014d94 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014d84:	4b06      	ldr	r3, [pc, #24]	@ (8014da0 <GetLastFcntDown+0x98>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	69da      	ldr	r2, [r3, #28]
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	601a      	str	r2, [r3, #0]
            break;
 8014d8e:	e001      	b.n	8014d94 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014d90:	2305      	movs	r3, #5
 8014d92:	e000      	b.n	8014d96 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014d94:	2300      	movs	r3, #0
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	370c      	adds	r7, #12
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bc80      	pop	{r7}
 8014d9e:	4770      	bx	lr
 8014da0:	20001bc0 	.word	0x20001bc0

08014da4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	4603      	mov	r3, r0
 8014dac:	6039      	str	r1, [r7, #0]
 8014dae:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014db0:	2300      	movs	r3, #0
 8014db2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014db4:	f107 020c 	add.w	r2, r7, #12
 8014db8:	79fb      	ldrb	r3, [r7, #7]
 8014dba:	4611      	mov	r1, r2
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7ff ffa3 	bl	8014d08 <GetLastFcntDown>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d001      	beq.n	8014dcc <CheckFCntDown+0x28>
    {
        return false;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	e00a      	b.n	8014de2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	683a      	ldr	r2, [r7, #0]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d803      	bhi.n	8014ddc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014dd4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dda:	d101      	bne.n	8014de0 <CheckFCntDown+0x3c>
    {
        return true;
 8014ddc:	2301      	movs	r3, #1
 8014dde:	e000      	b.n	8014de2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014de0:	2300      	movs	r3, #0
    }
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3710      	adds	r7, #16
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
	...

08014dec <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	4603      	mov	r3, r0
 8014df4:	6039      	str	r1, [r7, #0]
 8014df6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014df8:	79fb      	ldrb	r3, [r7, #7]
 8014dfa:	3b01      	subs	r3, #1
 8014dfc:	2b03      	cmp	r3, #3
 8014dfe:	d81f      	bhi.n	8014e40 <UpdateFCntDown+0x54>
 8014e00:	a201      	add	r2, pc, #4	@ (adr r2, 8014e08 <UpdateFCntDown+0x1c>)
 8014e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e06:	bf00      	nop
 8014e08:	08014e19 	.word	0x08014e19
 8014e0c:	08014e23 	.word	0x08014e23
 8014e10:	08014e2d 	.word	0x08014e2d
 8014e14:	08014e37 	.word	0x08014e37
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014e18:	4b0c      	ldr	r3, [pc, #48]	@ (8014e4c <UpdateFCntDown+0x60>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	683a      	ldr	r2, [r7, #0]
 8014e1e:	611a      	str	r2, [r3, #16]
            break;
 8014e20:	e00f      	b.n	8014e42 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014e22:	4b0a      	ldr	r3, [pc, #40]	@ (8014e4c <UpdateFCntDown+0x60>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	683a      	ldr	r2, [r7, #0]
 8014e28:	615a      	str	r2, [r3, #20]
            break;
 8014e2a:	e00a      	b.n	8014e42 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014e2c:	4b07      	ldr	r3, [pc, #28]	@ (8014e4c <UpdateFCntDown+0x60>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	683a      	ldr	r2, [r7, #0]
 8014e32:	619a      	str	r2, [r3, #24]
            break;
 8014e34:	e005      	b.n	8014e42 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014e36:	4b05      	ldr	r3, [pc, #20]	@ (8014e4c <UpdateFCntDown+0x60>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	683a      	ldr	r2, [r7, #0]
 8014e3c:	61da      	str	r2, [r3, #28]
            break;
 8014e3e:	e000      	b.n	8014e42 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014e40:	bf00      	nop
    }
}
 8014e42:	bf00      	nop
 8014e44:	370c      	adds	r7, #12
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bc80      	pop	{r7}
 8014e4a:	4770      	bx	lr
 8014e4c:	20001bc0 	.word	0x20001bc0

08014e50 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014e56:	4b18      	ldr	r3, [pc, #96]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014e5e:	4b16      	ldr	r3, [pc, #88]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f04f 32ff 	mov.w	r2, #4294967295
 8014e66:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014e68:	4b13      	ldr	r3, [pc, #76]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e70:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014e72:	4b11      	ldr	r3, [pc, #68]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f04f 32ff 	mov.w	r2, #4294967295
 8014e7a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	4b0d      	ldr	r3, [pc, #52]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	6992      	ldr	r2, [r2, #24]
 8014e86:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014e88:	2300      	movs	r3, #0
 8014e8a:	607b      	str	r3, [r7, #4]
 8014e8c:	e00b      	b.n	8014ea6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8014eb8 <ResetFCnts+0x68>)
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	3306      	adds	r3, #6
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	4413      	add	r3, r2
 8014e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e9e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	607b      	str	r3, [r7, #4]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	ddf0      	ble.n	8014e8e <ResetFCnts+0x3e>
    }
}
 8014eac:	bf00      	nop
 8014eae:	bf00      	nop
 8014eb0:	370c      	adds	r7, #12
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bc80      	pop	{r7}
 8014eb6:	4770      	bx	lr
 8014eb8:	20001bc0 	.word	0x20001bc0

08014ebc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d101      	bne.n	8014ece <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014eca:	2308      	movs	r3, #8
 8014ecc:	e01c      	b.n	8014f08 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014ece:	4a10      	ldr	r2, [pc, #64]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2228      	movs	r2, #40	@ 0x28
 8014eda:	2100      	movs	r1, #0
 8014edc:	4618      	mov	r0, r3
 8014ede:	f003 f975 	bl	80181cc <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014eea:	4b09      	ldr	r3, [pc, #36]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2201      	movs	r2, #1
 8014ef0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014ef2:	4b07      	ldr	r3, [pc, #28]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014efa:	4b05      	ldr	r3, [pc, #20]	@ (8014f10 <LoRaMacCryptoInit+0x54>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	2200      	movs	r2, #0
 8014f00:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014f02:	f7ff ffa5 	bl	8014e50 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014f06:	2300      	movs	r3, #0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	20001bc0 	.word	0x20001bc0

08014f14 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014f1c:	4b04      	ldr	r3, [pc, #16]	@ (8014f30 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	687a      	ldr	r2, [r7, #4]
 8014f22:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014f24:	2300      	movs	r3, #0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bc80      	pop	{r7}
 8014f2e:	4770      	bx	lr
 8014f30:	20001bc0 	.word	0x20001bc0

08014f34 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d101      	bne.n	8014f46 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f42:	2309      	movs	r3, #9
 8014f44:	e006      	b.n	8014f54 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014f46:	4b06      	ldr	r3, [pc, #24]	@ (8014f60 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	68db      	ldr	r3, [r3, #12]
 8014f4c:	1c5a      	adds	r2, r3, #1
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014f52:	2300      	movs	r3, #0
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	370c      	adds	r7, #12
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bc80      	pop	{r7}
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	20001bc0 	.word	0x20001bc0

08014f64 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014f72:	2300      	movs	r3, #0
 8014f74:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8014f76:	2300      	movs	r3, #0
 8014f78:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014f7a:	2312      	movs	r3, #18
 8014f7c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d101      	bne.n	8014f88 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f84:	2309      	movs	r3, #9
 8014f86:	e035      	b.n	8014ff4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014f88:	f107 0214 	add.w	r2, r7, #20
 8014f8c:	7bfb      	ldrb	r3, [r7, #15]
 8014f8e:	4611      	mov	r1, r2
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff feb9 	bl	8014d08 <GetLastFcntDown>
 8014f96:	4603      	mov	r3, r0
 8014f98:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014f9a:	7efb      	ldrb	r3, [r7, #27]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d001      	beq.n	8014fa4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014fa0:	7efb      	ldrb	r3, [r7, #27]
 8014fa2:	e027      	b.n	8014ff4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014faa:	d103      	bne.n	8014fb4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	601a      	str	r2, [r3, #0]
 8014fb2:	e01e      	b.n	8014ff2 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	68ba      	ldr	r2, [r7, #8]
 8014fba:	1ad3      	subs	r3, r2, r3
 8014fbc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	dd05      	ble.n	8014fd0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014fc4:	697a      	ldr	r2, [r7, #20]
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	441a      	add	r2, r3
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	601a      	str	r2, [r3, #0]
 8014fce:	e010      	b.n	8014ff2 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d104      	bne.n	8014fe0 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014fdc:	2307      	movs	r3, #7
 8014fde:	e009      	b.n	8014ff4 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	0c1b      	lsrs	r3, r3, #16
 8014fe4:	041b      	lsls	r3, r3, #16
 8014fe6:	68ba      	ldr	r2, [r7, #8]
 8014fe8:	4413      	add	r3, r2
 8014fea:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ff2:	2300      	movs	r3, #0
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3720      	adds	r7, #32
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b085      	sub	sp, #20
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801500a:	2309      	movs	r3, #9
 801500c:	e017      	b.n	801503e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801500e:	2300      	movs	r3, #0
 8015010:	60fb      	str	r3, [r7, #12]
 8015012:	e010      	b.n	8015036 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015014:	4b0c      	ldr	r3, [pc, #48]	@ (8015048 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8015016:	6819      	ldr	r1, [r3, #0]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	222c      	movs	r2, #44	@ 0x2c
 801501c:	fb02 f303 	mul.w	r3, r2, r3
 8015020:	687a      	ldr	r2, [r7, #4]
 8015022:	4413      	add	r3, r2
 8015024:	68fa      	ldr	r2, [r7, #12]
 8015026:	3206      	adds	r2, #6
 8015028:	0092      	lsls	r2, r2, #2
 801502a:	440a      	add	r2, r1
 801502c:	3204      	adds	r2, #4
 801502e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3301      	adds	r3, #1
 8015034:	60fb      	str	r3, [r7, #12]
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	ddeb      	ble.n	8015014 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801503c:	2300      	movs	r3, #0
}
 801503e:	4618      	mov	r0, r3
 8015040:	3714      	adds	r7, #20
 8015042:	46bd      	mov	sp, r7
 8015044:	bc80      	pop	{r7}
 8015046:	4770      	bx	lr
 8015048:	20001bc0 	.word	0x20001bc0

0801504c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	4603      	mov	r3, r0
 8015054:	6039      	str	r1, [r7, #0]
 8015056:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015058:	79fb      	ldrb	r3, [r7, #7]
 801505a:	6839      	ldr	r1, [r7, #0]
 801505c:	4618      	mov	r0, r3
 801505e:	f7f8 f89b 	bl	800d198 <SecureElementSetKey>
 8015062:	4603      	mov	r3, r0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d001      	beq.n	801506c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015068:	230e      	movs	r3, #14
 801506a:	e018      	b.n	801509e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801506c:	79fb      	ldrb	r3, [r7, #7]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d114      	bne.n	801509c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015072:	4b0d      	ldr	r3, [pc, #52]	@ (80150a8 <LoRaMacCryptoSetKey+0x5c>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	789b      	ldrb	r3, [r3, #2]
 8015078:	79fa      	ldrb	r2, [r7, #7]
 801507a:	4611      	mov	r1, r2
 801507c:	4618      	mov	r0, r3
 801507e:	f000 fa37 	bl	80154f0 <LoRaMacCryptoDeriveMcRootKey>
 8015082:	4603      	mov	r3, r0
 8015084:	2b00      	cmp	r3, #0
 8015086:	d001      	beq.n	801508c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015088:	230e      	movs	r3, #14
 801508a:	e008      	b.n	801509e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801508c:	2004      	movs	r0, #4
 801508e:	f000 fa5a 	bl	8015546 <LoRaMacCryptoDeriveMcKEKey>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d001      	beq.n	801509c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015098:	230e      	movs	r3, #14
 801509a:	e000      	b.n	801509e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801509c:	2300      	movs	r3, #0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3708      	adds	r7, #8
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	20001bc0 	.word	0x20001bc0

080150ac <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d101      	bne.n	80150be <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150ba:	2309      	movs	r3, #9
 80150bc:	e02d      	b.n	801511a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80150be:	2301      	movs	r3, #1
 80150c0:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80150c2:	4b18      	ldr	r3, [pc, #96]	@ (8015124 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	889a      	ldrh	r2, [r3, #4]
 80150c8:	3201      	adds	r2, #1
 80150ca:	b292      	uxth	r2, r2
 80150cc:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80150ce:	4b15      	ldr	r3, [pc, #84]	@ (8015124 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	889a      	ldrh	r2, [r3, #4]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 fc14 	bl	8015906 <LoRaMacSerializerJoinRequest>
 80150de:	4603      	mov	r3, r0
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d001      	beq.n	80150e8 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80150e4:	2310      	movs	r3, #16
 80150e6:	e018      	b.n	801511a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6819      	ldr	r1, [r3, #0]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	3318      	adds	r3, #24
 80150f0:	7bfa      	ldrb	r2, [r7, #15]
 80150f2:	9300      	str	r3, [sp, #0]
 80150f4:	4613      	mov	r3, r2
 80150f6:	2213      	movs	r2, #19
 80150f8:	2000      	movs	r0, #0
 80150fa:	f7f8 f8ab 	bl	800d254 <SecureElementComputeAesCmac>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d001      	beq.n	8015108 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015104:	230e      	movs	r3, #14
 8015106:	e008      	b.n	801511a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f000 fbfc 	bl	8015906 <LoRaMacSerializerJoinRequest>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015114:	2310      	movs	r3, #16
 8015116:	e000      	b.n	801511a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015118:	2300      	movs	r3, #0
}
 801511a:	4618      	mov	r0, r3
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	20001bc0 	.word	0x20001bc0

08015128 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015128:	b590      	push	{r4, r7, lr}
 801512a:	b097      	sub	sp, #92	@ 0x5c
 801512c:	af04      	add	r7, sp, #16
 801512e:	4603      	mov	r3, r0
 8015130:	60b9      	str	r1, [r7, #8]
 8015132:	607a      	str	r2, [r7, #4]
 8015134:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d002      	beq.n	8015142 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d101      	bne.n	8015146 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015142:	2309      	movs	r3, #9
 8015144:	e0bd      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015146:	2312      	movs	r3, #18
 8015148:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801514c:	2300      	movs	r3, #0
 801514e:	61bb      	str	r3, [r7, #24]
 8015150:	f107 031c 	add.w	r3, r7, #28
 8015154:	221d      	movs	r2, #29
 8015156:	2100      	movs	r1, #0
 8015158:	4618      	mov	r0, r3
 801515a:	f008 fc25 	bl	801d9a8 <memset>
    uint8_t versionMinor         = 0;
 801515e:	2300      	movs	r3, #0
 8015160:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015162:	4b5a      	ldr	r3, [pc, #360]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	889b      	ldrh	r3, [r3, #4]
 8015168:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681c      	ldr	r4, [r3, #0]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	791b      	ldrb	r3, [r3, #4]
 8015174:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015178:	7bf8      	ldrb	r0, [r7, #15]
 801517a:	f107 0217 	add.w	r2, r7, #23
 801517e:	9202      	str	r2, [sp, #8]
 8015180:	f107 0218 	add.w	r2, r7, #24
 8015184:	9201      	str	r2, [sp, #4]
 8015186:	9300      	str	r3, [sp, #0]
 8015188:	4623      	mov	r3, r4
 801518a:	460a      	mov	r2, r1
 801518c:	68b9      	ldr	r1, [r7, #8]
 801518e:	f7f8 f955 	bl	800d43c <SecureElementProcessJoinAccept>
 8015192:	4603      	mov	r3, r0
 8015194:	2b00      	cmp	r3, #0
 8015196:	d001      	beq.n	801519c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015198:	230e      	movs	r3, #14
 801519a:	e092      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6818      	ldr	r0, [r3, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	791b      	ldrb	r3, [r3, #4]
 80151a4:	461a      	mov	r2, r3
 80151a6:	f107 0318 	add.w	r3, r7, #24
 80151aa:	4619      	mov	r1, r3
 80151ac:	f002 ffd3 	bl	8018156 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f000 f9eb 	bl	801558c <LoRaMacParserJoinAccept>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d001      	beq.n	80151c0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80151bc:	230f      	movs	r3, #15
 80151be:	e080      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	799b      	ldrb	r3, [r3, #6]
 80151c4:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	79db      	ldrb	r3, [r3, #7]
 80151ca:	021b      	lsls	r3, r3, #8
 80151cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151ce:	4313      	orrs	r3, r2
 80151d0:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	7a1b      	ldrb	r3, [r3, #8]
 80151d6:	041b      	lsls	r3, r3, #16
 80151d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151da:	4313      	orrs	r3, r2
 80151dc:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80151de:	4b3b      	ldr	r3, [pc, #236]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	689b      	ldr	r3, [r3, #8]
 80151e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d010      	beq.n	801520c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80151ea:	4b38      	ldr	r3, [pc, #224]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80151f0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80151f2:	7dfb      	ldrb	r3, [r7, #23]
 80151f4:	2100      	movs	r1, #0
 80151f6:	4618      	mov	r0, r3
 80151f8:	f000 f97a 	bl	80154f0 <LoRaMacCryptoDeriveMcRootKey>
 80151fc:	4603      	mov	r3, r0
 80151fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015202:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015206:	2b00      	cmp	r3, #0
 8015208:	d005      	beq.n	8015216 <LoRaMacCryptoHandleJoinAccept+0xee>
 801520a:	e001      	b.n	8015210 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801520c:	2303      	movs	r3, #3
 801520e:	e058      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8015210:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015214:	e055      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015216:	2004      	movs	r0, #4
 8015218:	f000 f995 	bl	8015546 <LoRaMacCryptoDeriveMcKEKey>
 801521c:	4603      	mov	r3, r0
 801521e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015222:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015226:	2b00      	cmp	r3, #0
 8015228:	d002      	beq.n	8015230 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801522a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801522e:	e048      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	7a5b      	ldrb	r3, [r3, #9]
 8015234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	7a9b      	ldrb	r3, [r3, #10]
 801523a:	021b      	lsls	r3, r3, #8
 801523c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801523e:	4313      	orrs	r3, r2
 8015240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	7adb      	ldrb	r3, [r3, #11]
 8015246:	041b      	lsls	r3, r3, #16
 8015248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801524a:	4313      	orrs	r3, r2
 801524c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801524e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015252:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015256:	2003      	movs	r0, #3
 8015258:	f7ff fd06 	bl	8014c68 <DeriveSessionKey10x>
 801525c:	4603      	mov	r3, r0
 801525e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015262:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015266:	2b00      	cmp	r3, #0
 8015268:	d002      	beq.n	8015270 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801526a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801526e:	e028      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015274:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015278:	2002      	movs	r0, #2
 801527a:	f7ff fcf5 	bl	8014c68 <DeriveSessionKey10x>
 801527e:	4603      	mov	r3, r0
 8015280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015284:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015288:	2b00      	cmp	r3, #0
 801528a:	d002      	beq.n	8015292 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801528c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015290:	e017      	b.n	80152c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015292:	4b0e      	ldr	r3, [pc, #56]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	7dfa      	ldrb	r2, [r7, #23]
 8015298:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801529a:	4b0c      	ldr	r3, [pc, #48]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2200      	movs	r2, #0
 80152a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80152a2:	4b0a      	ldr	r3, [pc, #40]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f04f 32ff 	mov.w	r2, #4294967295
 80152aa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80152ac:	4b07      	ldr	r3, [pc, #28]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	f04f 32ff 	mov.w	r2, #4294967295
 80152b4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80152b6:	4b05      	ldr	r3, [pc, #20]	@ (80152cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f04f 32ff 	mov.w	r2, #4294967295
 80152be:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	374c      	adds	r7, #76	@ 0x4c
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd90      	pop	{r4, r7, pc}
 80152ca:	bf00      	nop
 80152cc:	20001bc0 	.word	0x20001bc0

080152d0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80152d0:	b590      	push	{r4, r7, lr}
 80152d2:	b08b      	sub	sp, #44	@ 0x2c
 80152d4:	af04      	add	r7, sp, #16
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	607b      	str	r3, [r7, #4]
 80152da:	460b      	mov	r3, r1
 80152dc:	72fb      	strb	r3, [r7, #11]
 80152de:	4613      	mov	r3, r2
 80152e0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80152e2:	2312      	movs	r3, #18
 80152e4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80152e6:	2303      	movs	r3, #3
 80152e8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d101      	bne.n	80152f4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152f0:	2309      	movs	r3, #9
 80152f2:	e05e      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80152f4:	4b31      	ldr	r3, [pc, #196]	@ (80153bc <LoRaMacCryptoSecureMessage+0xec>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	68fa      	ldr	r2, [r7, #12]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d201      	bcs.n	8015304 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015300:	2306      	movs	r3, #6
 8015302:	e056      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f893 3020 	ldrb.w	r3, [r3, #32]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d101      	bne.n	8015312 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801530e:	2302      	movs	r3, #2
 8015310:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015312:	4b2a      	ldr	r3, [pc, #168]	@ (80153bc <LoRaMacCryptoSecureMessage+0xec>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	68fa      	ldr	r2, [r7, #12]
 801531a:	429a      	cmp	r2, r3
 801531c:	d916      	bls.n	801534c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015328:	b219      	sxth	r1, r3
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	689c      	ldr	r4, [r3, #8]
 801532e:	7dfa      	ldrb	r2, [r7, #23]
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	9301      	str	r3, [sp, #4]
 8015334:	2300      	movs	r3, #0
 8015336:	9300      	str	r3, [sp, #0]
 8015338:	4623      	mov	r3, r4
 801533a:	f7ff faa1 	bl	8014880 <PayloadEncrypt>
 801533e:	4603      	mov	r3, r0
 8015340:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015342:	7dbb      	ldrb	r3, [r7, #22]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d001      	beq.n	801534c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015348:	7dbb      	ldrb	r3, [r7, #22]
 801534a:	e032      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 fb5c 	bl	8015a0a <LoRaMacSerializerData>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d001      	beq.n	801535c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015358:	2310      	movs	r3, #16
 801535a:	e02a      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801535c:	2302      	movs	r3, #2
 801535e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6818      	ldr	r0, [r3, #0]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	791b      	ldrb	r3, [r3, #4]
 8015368:	3b04      	subs	r3, #4
 801536a:	b299      	uxth	r1, r3
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	689b      	ldr	r3, [r3, #8]
 8015370:	687a      	ldr	r2, [r7, #4]
 8015372:	322c      	adds	r2, #44	@ 0x2c
 8015374:	7dfc      	ldrb	r4, [r7, #23]
 8015376:	9203      	str	r2, [sp, #12]
 8015378:	68fa      	ldr	r2, [r7, #12]
 801537a:	9202      	str	r2, [sp, #8]
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	2300      	movs	r3, #0
 8015380:	9300      	str	r3, [sp, #0]
 8015382:	2300      	movs	r3, #0
 8015384:	4622      	mov	r2, r4
 8015386:	f7ff fb7c 	bl	8014a82 <ComputeCmacB0>
 801538a:	4603      	mov	r3, r0
 801538c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801538e:	7dbb      	ldrb	r3, [r7, #22]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d001      	beq.n	8015398 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015394:	7dbb      	ldrb	r3, [r7, #22]
 8015396:	e00c      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f000 fb36 	bl	8015a0a <LoRaMacSerializerData>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d001      	beq.n	80153a8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80153a4:	2310      	movs	r3, #16
 80153a6:	e004      	b.n	80153b2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80153a8:	4b04      	ldr	r3, [pc, #16]	@ (80153bc <LoRaMacCryptoSecureMessage+0xec>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80153b0:	2300      	movs	r3, #0
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	371c      	adds	r7, #28
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd90      	pop	{r4, r7, pc}
 80153ba:	bf00      	nop
 80153bc:	20001bc0 	.word	0x20001bc0

080153c0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80153c0:	b590      	push	{r4, r7, lr}
 80153c2:	b08b      	sub	sp, #44	@ 0x2c
 80153c4:	af04      	add	r7, sp, #16
 80153c6:	60b9      	str	r1, [r7, #8]
 80153c8:	607b      	str	r3, [r7, #4]
 80153ca:	4603      	mov	r3, r0
 80153cc:	73fb      	strb	r3, [r7, #15]
 80153ce:	4613      	mov	r3, r2
 80153d0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80153d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d101      	bne.n	80153dc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80153d8:	2309      	movs	r3, #9
 80153da:	e083      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80153dc:	7bbb      	ldrb	r3, [r7, #14]
 80153de:	6879      	ldr	r1, [r7, #4]
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7ff fcdf 	bl	8014da4 <CheckFCntDown>
 80153e6:	4603      	mov	r3, r0
 80153e8:	f083 0301 	eor.w	r3, r3, #1
 80153ec:	b2db      	uxtb	r3, r3
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d001      	beq.n	80153f6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80153f2:	2306      	movs	r3, #6
 80153f4:	e076      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80153f6:	2312      	movs	r3, #18
 80153f8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80153fa:	2303      	movs	r3, #3
 80153fc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80153fe:	2302      	movs	r3, #2
 8015400:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015404:	f000 f98d 	bl	8015722 <LoRaMacParserData>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801540e:	230f      	movs	r3, #15
 8015410:	e068      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015412:	f107 0210 	add.w	r2, r7, #16
 8015416:	7bfb      	ldrb	r3, [r7, #15]
 8015418:	4611      	mov	r1, r2
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff fbfe 	bl	8014c1c <GetKeyAddrItem>
 8015420:	4603      	mov	r3, r0
 8015422:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015424:	7d7b      	ldrb	r3, [r7, #21]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d001      	beq.n	801542e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801542a:	7d7b      	ldrb	r3, [r7, #21]
 801542c:	e05a      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	785b      	ldrb	r3, [r3, #1]
 8015432:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	789b      	ldrb	r3, [r3, #2]
 8015438:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801543c:	689b      	ldr	r3, [r3, #8]
 801543e:	68ba      	ldr	r2, [r7, #8]
 8015440:	429a      	cmp	r2, r3
 8015442:	d001      	beq.n	8015448 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015444:	2302      	movs	r3, #2
 8015446:	e04d      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801544a:	7b1b      	ldrb	r3, [r3, #12]
 801544c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015450:	b2db      	uxtb	r3, r3
 8015452:	2b00      	cmp	r3, #0
 8015454:	bf14      	ite	ne
 8015456:	2301      	movne	r3, #1
 8015458:	2300      	moveq	r3, #0
 801545a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801545c:	4b23      	ldr	r3, [pc, #140]	@ (80154ec <LoRaMacCryptoUnsecureMessage+0x12c>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	789b      	ldrb	r3, [r3, #2]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d101      	bne.n	801546a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015466:	2300      	movs	r3, #0
 8015468:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801546a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801546c:	6818      	ldr	r0, [r3, #0]
 801546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015470:	791b      	ldrb	r3, [r3, #4]
 8015472:	3b04      	subs	r3, #4
 8015474:	b299      	uxth	r1, r3
 8015476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801547a:	7dbc      	ldrb	r4, [r7, #22]
 801547c:	7d3a      	ldrb	r2, [r7, #20]
 801547e:	9303      	str	r3, [sp, #12]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	9302      	str	r3, [sp, #8]
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	2301      	movs	r3, #1
 801548a:	9300      	str	r3, [sp, #0]
 801548c:	4623      	mov	r3, r4
 801548e:	f7ff fb36 	bl	8014afe <VerifyCmacB0>
 8015492:	4603      	mov	r3, r0
 8015494:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015496:	7d7b      	ldrb	r3, [r7, #21]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d001      	beq.n	80154a0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 801549c:	7d7b      	ldrb	r3, [r7, #21]
 801549e:	e021      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80154a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d101      	bne.n	80154ae <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80154aa:	2302      	movs	r3, #2
 80154ac:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80154ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80154b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80154b8:	b219      	sxth	r1, r3
 80154ba:	7dfa      	ldrb	r2, [r7, #23]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	9301      	str	r3, [sp, #4]
 80154c0:	2301      	movs	r3, #1
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	f7ff f9db 	bl	8014880 <PayloadEncrypt>
 80154ca:	4603      	mov	r3, r0
 80154cc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80154ce:	7d7b      	ldrb	r3, [r7, #21]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d001      	beq.n	80154d8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80154d4:	7d7b      	ldrb	r3, [r7, #21]
 80154d6:	e005      	b.n	80154e4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80154d8:	7bbb      	ldrb	r3, [r7, #14]
 80154da:	6879      	ldr	r1, [r7, #4]
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff fc85 	bl	8014dec <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80154e2:	2300      	movs	r3, #0
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	371c      	adds	r7, #28
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd90      	pop	{r4, r7, pc}
 80154ec:	20001bc0 	.word	0x20001bc0

080154f0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	4603      	mov	r3, r0
 80154f8:	460a      	mov	r2, r1
 80154fa:	71fb      	strb	r3, [r7, #7]
 80154fc:	4613      	mov	r3, r2
 80154fe:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015500:	79bb      	ldrb	r3, [r7, #6]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d001      	beq.n	801550a <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015506:	230a      	movs	r3, #10
 8015508:	e019      	b.n	801553e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801550a:	2300      	movs	r3, #0
 801550c:	60bb      	str	r3, [r7, #8]
 801550e:	f107 030c 	add.w	r3, r7, #12
 8015512:	2200      	movs	r2, #0
 8015514:	601a      	str	r2, [r3, #0]
 8015516:	605a      	str	r2, [r3, #4]
 8015518:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	2b01      	cmp	r3, #1
 801551e:	d101      	bne.n	8015524 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8015520:	2320      	movs	r3, #32
 8015522:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015524:	79b9      	ldrb	r1, [r7, #6]
 8015526:	f107 0308 	add.w	r3, r7, #8
 801552a:	2204      	movs	r2, #4
 801552c:	4618      	mov	r0, r3
 801552e:	f7f7 ff45 	bl	800d3bc <SecureElementDeriveAndStoreKey>
 8015532:	4603      	mov	r3, r0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d001      	beq.n	801553c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015538:	230e      	movs	r3, #14
 801553a:	e000      	b.n	801553e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801553c:	2300      	movs	r3, #0
}
 801553e:	4618      	mov	r0, r3
 8015540:	3718      	adds	r7, #24
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b086      	sub	sp, #24
 801554a:	af00      	add	r7, sp, #0
 801554c:	4603      	mov	r3, r0
 801554e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015550:	79fb      	ldrb	r3, [r7, #7]
 8015552:	2b04      	cmp	r3, #4
 8015554:	d001      	beq.n	801555a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015556:	230a      	movs	r3, #10
 8015558:	e014      	b.n	8015584 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801555a:	2300      	movs	r3, #0
 801555c:	60bb      	str	r3, [r7, #8]
 801555e:	f107 030c 	add.w	r3, r7, #12
 8015562:	2200      	movs	r2, #0
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	605a      	str	r2, [r3, #4]
 8015568:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801556a:	79f9      	ldrb	r1, [r7, #7]
 801556c:	f107 0308 	add.w	r3, r7, #8
 8015570:	227f      	movs	r2, #127	@ 0x7f
 8015572:	4618      	mov	r0, r3
 8015574:	f7f7 ff22 	bl	800d3bc <SecureElementDeriveAndStoreKey>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d001      	beq.n	8015582 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801557e:	230e      	movs	r3, #14
 8015580:	e000      	b.n	8015584 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015582:	2300      	movs	r3, #0
}
 8015584:	4618      	mov	r0, r3
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d003      	beq.n	80155a2 <LoRaMacParserJoinAccept+0x16>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80155a2:	2302      	movs	r3, #2
 80155a4:	e0b9      	b.n	801571a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	89fb      	ldrh	r3, [r7, #14]
 80155b0:	1c59      	adds	r1, r3, #1
 80155b2:	81f9      	strh	r1, [r7, #14]
 80155b4:	4413      	add	r3, r2
 80155b6:	781a      	ldrb	r2, [r3, #0]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	1d98      	adds	r0, r3, #6
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	89fb      	ldrh	r3, [r7, #14]
 80155c6:	4413      	add	r3, r2
 80155c8:	2203      	movs	r2, #3
 80155ca:	4619      	mov	r1, r3
 80155cc:	f002 fdc3 	bl	8018156 <memcpy1>
    bufItr = bufItr + 3;
 80155d0:	89fb      	ldrh	r3, [r7, #14]
 80155d2:	3303      	adds	r3, #3
 80155d4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f103 0009 	add.w	r0, r3, #9
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	89fb      	ldrh	r3, [r7, #14]
 80155e2:	4413      	add	r3, r2
 80155e4:	2203      	movs	r2, #3
 80155e6:	4619      	mov	r1, r3
 80155e8:	f002 fdb5 	bl	8018156 <memcpy1>
    bufItr = bufItr + 3;
 80155ec:	89fb      	ldrh	r3, [r7, #14]
 80155ee:	3303      	adds	r3, #3
 80155f0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681a      	ldr	r2, [r3, #0]
 80155f6:	89fb      	ldrh	r3, [r7, #14]
 80155f8:	1c59      	adds	r1, r3, #1
 80155fa:	81f9      	strh	r1, [r7, #14]
 80155fc:	4413      	add	r3, r2
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	461a      	mov	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	89fb      	ldrh	r3, [r7, #14]
 801560c:	1c59      	adds	r1, r3, #1
 801560e:	81f9      	strh	r1, [r7, #14]
 8015610:	4413      	add	r3, r2
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	021a      	lsls	r2, r3, #8
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	431a      	orrs	r2, r3
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	89fb      	ldrh	r3, [r7, #14]
 8015626:	1c59      	adds	r1, r3, #1
 8015628:	81f9      	strh	r1, [r7, #14]
 801562a:	4413      	add	r3, r2
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	041a      	lsls	r2, r3, #16
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	431a      	orrs	r2, r3
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	89fb      	ldrh	r3, [r7, #14]
 8015640:	1c59      	adds	r1, r3, #1
 8015642:	81f9      	strh	r1, [r7, #14]
 8015644:	4413      	add	r3, r2
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	061a      	lsls	r2, r3, #24
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	431a      	orrs	r2, r3
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	89fb      	ldrh	r3, [r7, #14]
 801565a:	1c59      	adds	r1, r3, #1
 801565c:	81f9      	strh	r1, [r7, #14]
 801565e:	4413      	add	r3, r2
 8015660:	781a      	ldrb	r2, [r3, #0]
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681a      	ldr	r2, [r3, #0]
 801566a:	89fb      	ldrh	r3, [r7, #14]
 801566c:	1c59      	adds	r1, r3, #1
 801566e:	81f9      	strh	r1, [r7, #14]
 8015670:	4413      	add	r3, r2
 8015672:	781a      	ldrb	r2, [r3, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	791b      	ldrb	r3, [r3, #4]
 801567c:	1f1a      	subs	r2, r3, #4
 801567e:	89fb      	ldrh	r3, [r7, #14]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	2b10      	cmp	r3, #16
 8015684:	d10e      	bne.n	80156a4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f103 0012 	add.w	r0, r3, #18
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	89fb      	ldrh	r3, [r7, #14]
 8015692:	4413      	add	r3, r2
 8015694:	2210      	movs	r2, #16
 8015696:	4619      	mov	r1, r3
 8015698:	f002 fd5d 	bl	8018156 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801569c:	89fb      	ldrh	r3, [r7, #14]
 801569e:	3310      	adds	r3, #16
 80156a0:	81fb      	strh	r3, [r7, #14]
 80156a2:	e008      	b.n	80156b6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	791b      	ldrb	r3, [r3, #4]
 80156a8:	1f1a      	subs	r2, r3, #4
 80156aa:	89fb      	ldrh	r3, [r7, #14]
 80156ac:	1ad3      	subs	r3, r2, r3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	dd01      	ble.n	80156b6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80156b2:	2301      	movs	r3, #1
 80156b4:	e031      	b.n	801571a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681a      	ldr	r2, [r3, #0]
 80156ba:	89fb      	ldrh	r3, [r7, #14]
 80156bc:	1c59      	adds	r1, r3, #1
 80156be:	81f9      	strh	r1, [r7, #14]
 80156c0:	4413      	add	r3, r2
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	461a      	mov	r2, r3
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	89fb      	ldrh	r3, [r7, #14]
 80156d0:	1c59      	adds	r1, r3, #1
 80156d2:	81f9      	strh	r1, [r7, #14]
 80156d4:	4413      	add	r3, r2
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	021a      	lsls	r2, r3, #8
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156de:	431a      	orrs	r2, r3
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	89fb      	ldrh	r3, [r7, #14]
 80156ea:	1c59      	adds	r1, r3, #1
 80156ec:	81f9      	strh	r1, [r7, #14]
 80156ee:	4413      	add	r3, r2
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	041a      	lsls	r2, r3, #16
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156f8:	431a      	orrs	r2, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	89fb      	ldrh	r3, [r7, #14]
 8015704:	1c59      	adds	r1, r3, #1
 8015706:	81f9      	strh	r1, [r7, #14]
 8015708:	4413      	add	r3, r2
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	061a      	lsls	r2, r3, #24
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015712:	431a      	orrs	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015718:	2300      	movs	r3, #0
}
 801571a:	4618      	mov	r0, r3
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b084      	sub	sp, #16
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d003      	beq.n	8015738 <LoRaMacParserData+0x16>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015738:	2302      	movs	r3, #2
 801573a:	e0e0      	b.n	80158fe <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801573c:	2300      	movs	r3, #0
 801573e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	89fb      	ldrh	r3, [r7, #14]
 8015746:	1c59      	adds	r1, r3, #1
 8015748:	81f9      	strh	r1, [r7, #14]
 801574a:	4413      	add	r3, r2
 801574c:	781a      	ldrb	r2, [r3, #0]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	89fb      	ldrh	r3, [r7, #14]
 8015758:	1c59      	adds	r1, r3, #1
 801575a:	81f9      	strh	r1, [r7, #14]
 801575c:	4413      	add	r3, r2
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	461a      	mov	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	89fb      	ldrh	r3, [r7, #14]
 801576c:	1c59      	adds	r1, r3, #1
 801576e:	81f9      	strh	r1, [r7, #14]
 8015770:	4413      	add	r3, r2
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	021a      	lsls	r2, r3, #8
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	431a      	orrs	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681a      	ldr	r2, [r3, #0]
 8015784:	89fb      	ldrh	r3, [r7, #14]
 8015786:	1c59      	adds	r1, r3, #1
 8015788:	81f9      	strh	r1, [r7, #14]
 801578a:	4413      	add	r3, r2
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	041a      	lsls	r2, r3, #16
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	431a      	orrs	r2, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681a      	ldr	r2, [r3, #0]
 801579e:	89fb      	ldrh	r3, [r7, #14]
 80157a0:	1c59      	adds	r1, r3, #1
 80157a2:	81f9      	strh	r1, [r7, #14]
 80157a4:	4413      	add	r3, r2
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	061a      	lsls	r2, r3, #24
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	689b      	ldr	r3, [r3, #8]
 80157ae:	431a      	orrs	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681a      	ldr	r2, [r3, #0]
 80157b8:	89fb      	ldrh	r3, [r7, #14]
 80157ba:	1c59      	adds	r1, r3, #1
 80157bc:	81f9      	strh	r1, [r7, #14]
 80157be:	4413      	add	r3, r2
 80157c0:	781a      	ldrb	r2, [r3, #0]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	89fb      	ldrh	r3, [r7, #14]
 80157cc:	1c59      	adds	r1, r3, #1
 80157ce:	81f9      	strh	r1, [r7, #14]
 80157d0:	4413      	add	r3, r2
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	461a      	mov	r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681a      	ldr	r2, [r3, #0]
 80157de:	89fb      	ldrh	r3, [r7, #14]
 80157e0:	1c59      	adds	r1, r3, #1
 80157e2:	81f9      	strh	r1, [r7, #14]
 80157e4:	4413      	add	r3, r2
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	0219      	lsls	r1, r3, #8
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	89db      	ldrh	r3, [r3, #14]
 80157ee:	b21a      	sxth	r2, r3
 80157f0:	b20b      	sxth	r3, r1
 80157f2:	4313      	orrs	r3, r2
 80157f4:	b21b      	sxth	r3, r3
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f103 0010 	add.w	r0, r3, #16
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	89fb      	ldrh	r3, [r7, #14]
 8015808:	18d1      	adds	r1, r2, r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	7b1b      	ldrb	r3, [r3, #12]
 801580e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015812:	b2db      	uxtb	r3, r3
 8015814:	461a      	mov	r2, r3
 8015816:	f002 fc9e 	bl	8018156 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	7b1b      	ldrb	r3, [r3, #12]
 801581e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015822:	b2db      	uxtb	r3, r3
 8015824:	461a      	mov	r2, r3
 8015826:	89fb      	ldrh	r3, [r7, #14]
 8015828:	4413      	add	r3, r2
 801582a:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2200      	movs	r2, #0
 8015838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	791b      	ldrb	r3, [r3, #4]
 8015840:	461a      	mov	r2, r3
 8015842:	89fb      	ldrh	r3, [r7, #14]
 8015844:	1ad3      	subs	r3, r2, r3
 8015846:	2b04      	cmp	r3, #4
 8015848:	dd27      	ble.n	801589a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	89fb      	ldrh	r3, [r7, #14]
 8015850:	1c59      	adds	r1, r3, #1
 8015852:	81f9      	strh	r1, [r7, #14]
 8015854:	4413      	add	r3, r2
 8015856:	781a      	ldrb	r2, [r3, #0]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	791a      	ldrb	r2, [r3, #4]
 8015862:	89fb      	ldrh	r3, [r7, #14]
 8015864:	b2db      	uxtb	r3, r3
 8015866:	1ad3      	subs	r3, r2, r3
 8015868:	b2db      	uxtb	r3, r3
 801586a:	3b04      	subs	r3, #4
 801586c:	b2da      	uxtb	r2, r3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	89fb      	ldrh	r3, [r7, #14]
 801587e:	18d1      	adds	r1, r2, r3
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015886:	461a      	mov	r2, r3
 8015888:	f002 fc65 	bl	8018156 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015892:	461a      	mov	r2, r3
 8015894:	89fb      	ldrh	r3, [r7, #14]
 8015896:	4413      	add	r3, r2
 8015898:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	791b      	ldrb	r3, [r3, #4]
 80158a2:	3b04      	subs	r3, #4
 80158a4:	4413      	add	r3, r2
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	461a      	mov	r2, r3
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	6819      	ldr	r1, [r3, #0]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	791b      	ldrb	r3, [r3, #4]
 80158ba:	3b03      	subs	r3, #3
 80158bc:	440b      	add	r3, r1
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	021b      	lsls	r3, r3, #8
 80158c2:	431a      	orrs	r2, r3
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6819      	ldr	r1, [r3, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	791b      	ldrb	r3, [r3, #4]
 80158d4:	3b02      	subs	r3, #2
 80158d6:	440b      	add	r3, r1
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	041b      	lsls	r3, r3, #16
 80158dc:	431a      	orrs	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6819      	ldr	r1, [r3, #0]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	791b      	ldrb	r3, [r3, #4]
 80158ee:	3b01      	subs	r3, #1
 80158f0:	440b      	add	r3, r1
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	061b      	lsls	r3, r3, #24
 80158f6:	431a      	orrs	r2, r3
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80158fc:	2300      	movs	r3, #0
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}

08015906 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015906:	b580      	push	{r7, lr}
 8015908:	b084      	sub	sp, #16
 801590a:	af00      	add	r7, sp, #0
 801590c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d003      	beq.n	801591c <LoRaMacSerializerJoinRequest+0x16>
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d101      	bne.n	8015920 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801591c:	2301      	movs	r3, #1
 801591e:	e070      	b.n	8015a02 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015920:	2300      	movs	r3, #0
 8015922:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	791b      	ldrb	r3, [r3, #4]
 8015928:	2b16      	cmp	r3, #22
 801592a:	d801      	bhi.n	8015930 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801592c:	2302      	movs	r3, #2
 801592e:	e068      	b.n	8015a02 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	89fb      	ldrh	r3, [r7, #14]
 8015936:	1c59      	adds	r1, r3, #1
 8015938:	81f9      	strh	r1, [r7, #14]
 801593a:	4413      	add	r3, r2
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	7952      	ldrb	r2, [r2, #5]
 8015940:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	89fb      	ldrh	r3, [r7, #14]
 8015948:	18d0      	adds	r0, r2, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	3306      	adds	r3, #6
 801594e:	2208      	movs	r2, #8
 8015950:	4619      	mov	r1, r3
 8015952:	f002 fc1b 	bl	801818c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015956:	89fb      	ldrh	r3, [r7, #14]
 8015958:	3308      	adds	r3, #8
 801595a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	89fb      	ldrh	r3, [r7, #14]
 8015962:	18d0      	adds	r0, r2, r3
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	330e      	adds	r3, #14
 8015968:	2208      	movs	r2, #8
 801596a:	4619      	mov	r1, r3
 801596c:	f002 fc0e 	bl	801818c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015970:	89fb      	ldrh	r3, [r7, #14]
 8015972:	3308      	adds	r3, #8
 8015974:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	8ad9      	ldrh	r1, [r3, #22]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	89fb      	ldrh	r3, [r7, #14]
 8015980:	1c58      	adds	r0, r3, #1
 8015982:	81f8      	strh	r0, [r7, #14]
 8015984:	4413      	add	r3, r2
 8015986:	b2ca      	uxtb	r2, r1
 8015988:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8adb      	ldrh	r3, [r3, #22]
 801598e:	0a1b      	lsrs	r3, r3, #8
 8015990:	b299      	uxth	r1, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	89fb      	ldrh	r3, [r7, #14]
 8015998:	1c58      	adds	r0, r3, #1
 801599a:	81f8      	strh	r0, [r7, #14]
 801599c:	4413      	add	r3, r2
 801599e:	b2ca      	uxtb	r2, r1
 80159a0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6999      	ldr	r1, [r3, #24]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	89fb      	ldrh	r3, [r7, #14]
 80159ac:	1c58      	adds	r0, r3, #1
 80159ae:	81f8      	strh	r0, [r7, #14]
 80159b0:	4413      	add	r3, r2
 80159b2:	b2ca      	uxtb	r2, r1
 80159b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	699b      	ldr	r3, [r3, #24]
 80159ba:	0a19      	lsrs	r1, r3, #8
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	89fb      	ldrh	r3, [r7, #14]
 80159c2:	1c58      	adds	r0, r3, #1
 80159c4:	81f8      	strh	r0, [r7, #14]
 80159c6:	4413      	add	r3, r2
 80159c8:	b2ca      	uxtb	r2, r1
 80159ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	699b      	ldr	r3, [r3, #24]
 80159d0:	0c19      	lsrs	r1, r3, #16
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	89fb      	ldrh	r3, [r7, #14]
 80159d8:	1c58      	adds	r0, r3, #1
 80159da:	81f8      	strh	r0, [r7, #14]
 80159dc:	4413      	add	r3, r2
 80159de:	b2ca      	uxtb	r2, r1
 80159e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	699b      	ldr	r3, [r3, #24]
 80159e6:	0e19      	lsrs	r1, r3, #24
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	89fb      	ldrh	r3, [r7, #14]
 80159ee:	1c58      	adds	r0, r3, #1
 80159f0:	81f8      	strh	r0, [r7, #14]
 80159f2:	4413      	add	r3, r2
 80159f4:	b2ca      	uxtb	r2, r1
 80159f6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80159f8:	89fb      	ldrh	r3, [r7, #14]
 80159fa:	b2da      	uxtb	r2, r3
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3710      	adds	r7, #16
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}

08015a0a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b084      	sub	sp, #16
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d003      	beq.n	8015a20 <LoRaMacSerializerData+0x16>
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d101      	bne.n	8015a24 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015a20:	2301      	movs	r3, #1
 8015a22:	e0e3      	b.n	8015bec <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8015a24:	2300      	movs	r3, #0
 8015a26:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015a28:	2308      	movs	r3, #8
 8015a2a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	7b1b      	ldrb	r3, [r3, #12]
 8015a30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015a34:	b2db      	uxtb	r3, r3
 8015a36:	461a      	mov	r2, r3
 8015a38:	89bb      	ldrh	r3, [r7, #12]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d002      	beq.n	8015a4e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015a48:	89bb      	ldrh	r3, [r7, #12]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a54:	461a      	mov	r2, r3
 8015a56:	89bb      	ldrh	r3, [r7, #12]
 8015a58:	4413      	add	r3, r2
 8015a5a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015a5c:	89bb      	ldrh	r3, [r7, #12]
 8015a5e:	3304      	adds	r3, #4
 8015a60:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	791b      	ldrb	r3, [r3, #4]
 8015a66:	461a      	mov	r2, r3
 8015a68:	89bb      	ldrh	r3, [r7, #12]
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	d901      	bls.n	8015a72 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015a6e:	2302      	movs	r3, #2
 8015a70:	e0bc      	b.n	8015bec <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	89fb      	ldrh	r3, [r7, #14]
 8015a78:	1c59      	adds	r1, r3, #1
 8015a7a:	81f9      	strh	r1, [r7, #14]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	7952      	ldrb	r2, [r2, #5]
 8015a82:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6899      	ldr	r1, [r3, #8]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	89fb      	ldrh	r3, [r7, #14]
 8015a8e:	1c58      	adds	r0, r3, #1
 8015a90:	81f8      	strh	r0, [r7, #14]
 8015a92:	4413      	add	r3, r2
 8015a94:	b2ca      	uxtb	r2, r1
 8015a96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	0a19      	lsrs	r1, r3, #8
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681a      	ldr	r2, [r3, #0]
 8015aa2:	89fb      	ldrh	r3, [r7, #14]
 8015aa4:	1c58      	adds	r0, r3, #1
 8015aa6:	81f8      	strh	r0, [r7, #14]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	b2ca      	uxtb	r2, r1
 8015aac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	689b      	ldr	r3, [r3, #8]
 8015ab2:	0c19      	lsrs	r1, r3, #16
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681a      	ldr	r2, [r3, #0]
 8015ab8:	89fb      	ldrh	r3, [r7, #14]
 8015aba:	1c58      	adds	r0, r3, #1
 8015abc:	81f8      	strh	r0, [r7, #14]
 8015abe:	4413      	add	r3, r2
 8015ac0:	b2ca      	uxtb	r2, r1
 8015ac2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	689b      	ldr	r3, [r3, #8]
 8015ac8:	0e19      	lsrs	r1, r3, #24
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	1c58      	adds	r0, r3, #1
 8015ad2:	81f8      	strh	r0, [r7, #14]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	b2ca      	uxtb	r2, r1
 8015ad8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	89fb      	ldrh	r3, [r7, #14]
 8015ae0:	1c59      	adds	r1, r3, #1
 8015ae2:	81f9      	strh	r1, [r7, #14]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	7b12      	ldrb	r2, [r2, #12]
 8015aea:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	89d9      	ldrh	r1, [r3, #14]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	89fb      	ldrh	r3, [r7, #14]
 8015af6:	1c58      	adds	r0, r3, #1
 8015af8:	81f8      	strh	r0, [r7, #14]
 8015afa:	4413      	add	r3, r2
 8015afc:	b2ca      	uxtb	r2, r1
 8015afe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	89db      	ldrh	r3, [r3, #14]
 8015b04:	0a1b      	lsrs	r3, r3, #8
 8015b06:	b299      	uxth	r1, r3
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	89fb      	ldrh	r3, [r7, #14]
 8015b0e:	1c58      	adds	r0, r3, #1
 8015b10:	81f8      	strh	r0, [r7, #14]
 8015b12:	4413      	add	r3, r2
 8015b14:	b2ca      	uxtb	r2, r1
 8015b16:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	89fb      	ldrh	r3, [r7, #14]
 8015b1e:	18d0      	adds	r0, r2, r3
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f103 0110 	add.w	r1, r3, #16
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	7b1b      	ldrb	r3, [r3, #12]
 8015b2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	461a      	mov	r2, r3
 8015b32:	f002 fb10 	bl	8018156 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	7b1b      	ldrb	r3, [r3, #12]
 8015b3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	461a      	mov	r2, r3
 8015b42:	89fb      	ldrh	r3, [r7, #14]
 8015b44:	4413      	add	r3, r2
 8015b46:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d009      	beq.n	8015b66 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	89fb      	ldrh	r3, [r7, #14]
 8015b58:	1c59      	adds	r1, r3, #1
 8015b5a:	81f9      	strh	r1, [r7, #14]
 8015b5c:	4413      	add	r3, r2
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015b64:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	89fb      	ldrh	r3, [r7, #14]
 8015b6c:	18d0      	adds	r0, r2, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b78:	461a      	mov	r2, r3
 8015b7a:	f002 faec 	bl	8018156 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015b84:	461a      	mov	r2, r3
 8015b86:	89fb      	ldrh	r3, [r7, #14]
 8015b88:	4413      	add	r3, r2
 8015b8a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	89fb      	ldrh	r3, [r7, #14]
 8015b96:	1c58      	adds	r0, r3, #1
 8015b98:	81f8      	strh	r0, [r7, #14]
 8015b9a:	4413      	add	r3, r2
 8015b9c:	b2ca      	uxtb	r2, r1
 8015b9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ba4:	0a19      	lsrs	r1, r3, #8
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	89fb      	ldrh	r3, [r7, #14]
 8015bac:	1c58      	adds	r0, r3, #1
 8015bae:	81f8      	strh	r0, [r7, #14]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	b2ca      	uxtb	r2, r1
 8015bb4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bba:	0c19      	lsrs	r1, r3, #16
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	89fb      	ldrh	r3, [r7, #14]
 8015bc2:	1c58      	adds	r0, r3, #1
 8015bc4:	81f8      	strh	r0, [r7, #14]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	b2ca      	uxtb	r2, r1
 8015bca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bd0:	0e19      	lsrs	r1, r3, #24
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681a      	ldr	r2, [r3, #0]
 8015bd6:	89fb      	ldrh	r3, [r7, #14]
 8015bd8:	1c58      	adds	r0, r3, #1
 8015bda:	81f8      	strh	r0, [r7, #14]
 8015bdc:	4413      	add	r3, r2
 8015bde:	b2ca      	uxtb	r2, r1
 8015be0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015be2:	89fb      	ldrh	r3, [r7, #14]
 8015be4:	b2da      	uxtb	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015bea:	2300      	movs	r3, #0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3710      	adds	r7, #16
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d101      	bne.n	8015c08 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8015c04:	2301      	movs	r3, #1
 8015c06:	e000      	b.n	8015c0a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015c08:	2300      	movs	r3, #0
        }
    }
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	370c      	adds	r7, #12
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bc80      	pop	{r7}
 8015c12:	4770      	bx	lr

08015c14 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b084      	sub	sp, #16
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015c20:	2300      	movs	r3, #0
 8015c22:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015c24:	79fb      	ldrb	r3, [r7, #7]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d105      	bne.n	8015c36 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8015c2a:	6838      	ldr	r0, [r7, #0]
 8015c2c:	f000 f9ec 	bl	8016008 <RegionAS923GetPhyParam>
 8015c30:	4603      	mov	r3, r0
 8015c32:	60fb      	str	r3, [r7, #12]
 8015c34:	e001      	b.n	8015c3a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3710      	adds	r7, #16
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	6039      	str	r1, [r7, #0]
 8015c4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c50:	79fb      	ldrb	r3, [r7, #7]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d103      	bne.n	8015c5e <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8015c56:	6838      	ldr	r0, [r7, #0]
 8015c58:	f000 fb4c 	bl	80162f4 <RegionAS923SetBandTxDone>
 8015c5c:	e000      	b.n	8015c60 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015c5e:	bf00      	nop
        }
    }
}
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b082      	sub	sp, #8
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	6039      	str	r1, [r7, #0]
 8015c70:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d103      	bne.n	8015c80 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8015c78:	6838      	ldr	r0, [r7, #0]
 8015c7a:	f000 fb67 	bl	801634c <RegionAS923InitDefaults>
 8015c7e:	e000      	b.n	8015c82 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015c80:	bf00      	nop
        }
    }
}
 8015c82:	bf00      	nop
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b082      	sub	sp, #8
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	4603      	mov	r3, r0
 8015c92:	6039      	str	r1, [r7, #0]
 8015c94:	71fb      	strb	r3, [r7, #7]
 8015c96:	4613      	mov	r3, r2
 8015c98:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015c9a:	79fb      	ldrb	r3, [r7, #7]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d106      	bne.n	8015cae <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8015ca0:	79bb      	ldrb	r3, [r7, #6]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	6838      	ldr	r0, [r7, #0]
 8015ca6:	f000 fbe3 	bl	8016470 <RegionAS923Verify>
 8015caa:	4603      	mov	r3, r0
 8015cac:	e000      	b.n	8015cb0 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8015cae:	2300      	movs	r3, #0
        }
    }
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	6039      	str	r1, [r7, #0]
 8015cc2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d103      	bne.n	8015cd2 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8015cca:	6838      	ldr	r0, [r7, #0]
 8015ccc:	f000 fc6e 	bl	80165ac <RegionAS923ApplyCFList>
 8015cd0:	e000      	b.n	8015cd4 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015cd2:	bf00      	nop
        }
    }
}
 8015cd4:	bf00      	nop
 8015cd6:	3708      	adds	r7, #8
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}

08015cdc <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	6039      	str	r1, [r7, #0]
 8015ce6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015ce8:	79fb      	ldrb	r3, [r7, #7]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d104      	bne.n	8015cf8 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8015cee:	6838      	ldr	r0, [r7, #0]
 8015cf0:	f000 fcd0 	bl	8016694 <RegionAS923ChanMaskSet>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	e000      	b.n	8015cfa <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015cf8:	2300      	movs	r3, #0
        }
    }
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}

08015d02 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b082      	sub	sp, #8
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	603b      	str	r3, [r7, #0]
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	71fb      	strb	r3, [r7, #7]
 8015d0e:	460b      	mov	r3, r1
 8015d10:	71bb      	strb	r3, [r7, #6]
 8015d12:	4613      	mov	r3, r2
 8015d14:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015d16:	79fb      	ldrb	r3, [r7, #7]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d107      	bne.n	8015d2c <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015d1c:	7979      	ldrb	r1, [r7, #5]
 8015d1e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	683a      	ldr	r2, [r7, #0]
 8015d26:	f000 fcdf 	bl	80166e8 <RegionAS923ComputeRxWindowParameters>
 8015d2a:	e000      	b.n	8015d2e <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015d2c:	bf00      	nop
        }
    }
}
 8015d2e:	bf00      	nop
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b084      	sub	sp, #16
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	60b9      	str	r1, [r7, #8]
 8015d40:	607a      	str	r2, [r7, #4]
 8015d42:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015d44:	7bfb      	ldrb	r3, [r7, #15]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d105      	bne.n	8015d56 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8015d4a:	6879      	ldr	r1, [r7, #4]
 8015d4c:	68b8      	ldr	r0, [r7, #8]
 8015d4e:	f000 fd25 	bl	801679c <RegionAS923RxConfig>
 8015d52:	4603      	mov	r3, r0
 8015d54:	e000      	b.n	8015d58 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015d56:	2300      	movs	r3, #0
        }
    }
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3710      	adds	r7, #16
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b084      	sub	sp, #16
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60b9      	str	r1, [r7, #8]
 8015d68:	607a      	str	r2, [r7, #4]
 8015d6a:	603b      	str	r3, [r7, #0]
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015d70:	7bfb      	ldrb	r3, [r7, #15]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d106      	bne.n	8015d84 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8015d76:	683a      	ldr	r2, [r7, #0]
 8015d78:	6879      	ldr	r1, [r7, #4]
 8015d7a:	68b8      	ldr	r0, [r7, #8]
 8015d7c:	f000 fdde 	bl	801693c <RegionAS923TxConfig>
 8015d80:	4603      	mov	r3, r0
 8015d82:	e000      	b.n	8015d86 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015d84:	2300      	movs	r3, #0
        }
    }
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3710      	adds	r7, #16
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b086      	sub	sp, #24
 8015d92:	af02      	add	r7, sp, #8
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	607a      	str	r2, [r7, #4]
 8015d98:	603b      	str	r3, [r7, #0]
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015d9e:	7bfb      	ldrb	r3, [r7, #15]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d109      	bne.n	8015db8 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	9300      	str	r3, [sp, #0]
 8015da8:	69bb      	ldr	r3, [r7, #24]
 8015daa:	683a      	ldr	r2, [r7, #0]
 8015dac:	6879      	ldr	r1, [r7, #4]
 8015dae:	68b8      	ldr	r0, [r7, #8]
 8015db0:	f000 fe94 	bl	8016adc <RegionAS923LinkAdrReq>
 8015db4:	4603      	mov	r3, r0
 8015db6:	e000      	b.n	8015dba <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015db8:	2300      	movs	r3, #0
        }
    }
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}

08015dc2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	4603      	mov	r3, r0
 8015dca:	6039      	str	r1, [r7, #0]
 8015dcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015dce:	79fb      	ldrb	r3, [r7, #7]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d104      	bne.n	8015dde <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8015dd4:	6838      	ldr	r0, [r7, #0]
 8015dd6:	f000 ffa3 	bl	8016d20 <RegionAS923RxParamSetupReq>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	e000      	b.n	8015de0 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015dde:	2300      	movs	r3, #0
        }
    }
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3708      	adds	r7, #8
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	4603      	mov	r3, r0
 8015df0:	6039      	str	r1, [r7, #0]
 8015df2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015df4:	79fb      	ldrb	r3, [r7, #7]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d104      	bne.n	8015e04 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8015dfa:	6838      	ldr	r0, [r7, #0]
 8015dfc:	f000 ffc8 	bl	8016d90 <RegionAS923NewChannelReq>
 8015e00:	4603      	mov	r3, r0
 8015e02:	e000      	b.n	8015e06 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015e04:	2300      	movs	r3, #0
        }
    }
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3708      	adds	r7, #8
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e0e:	b580      	push	{r7, lr}
 8015e10:	b082      	sub	sp, #8
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	4603      	mov	r3, r0
 8015e16:	6039      	str	r1, [r7, #0]
 8015e18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e1a:	79fb      	ldrb	r3, [r7, #7]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d104      	bne.n	8015e2a <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8015e20:	6838      	ldr	r0, [r7, #0]
 8015e22:	f001 f813 	bl	8016e4c <RegionAS923TxParamSetupReq>
 8015e26:	4603      	mov	r3, r0
 8015e28:	e000      	b.n	8015e2c <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015e2a:	2300      	movs	r3, #0
        }
    }
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	6039      	str	r1, [r7, #0]
 8015e3e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e40:	79fb      	ldrb	r3, [r7, #7]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d104      	bne.n	8015e50 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8015e46:	6838      	ldr	r0, [r7, #0]
 8015e48:	f001 f80a 	bl	8016e60 <RegionAS923DlChannelReq>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	e000      	b.n	8015e52 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015e50:	2300      	movs	r3, #0
        }
    }
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3708      	adds	r7, #8
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}

08015e5a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015e5a:	b580      	push	{r7, lr}
 8015e5c:	b082      	sub	sp, #8
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	4603      	mov	r3, r0
 8015e62:	71fb      	strb	r3, [r7, #7]
 8015e64:	460b      	mov	r3, r1
 8015e66:	71bb      	strb	r3, [r7, #6]
 8015e68:	4613      	mov	r3, r2
 8015e6a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015e6c:	79fb      	ldrb	r3, [r7, #7]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d108      	bne.n	8015e84 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8015e72:	797a      	ldrb	r2, [r7, #5]
 8015e74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e78:	4611      	mov	r1, r2
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f001 f830 	bl	8016ee0 <RegionAS923AlternateDr>
 8015e80:	4603      	mov	r3, r0
 8015e82:	e000      	b.n	8015e86 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015e84:	2300      	movs	r3, #0
        }
    }
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b084      	sub	sp, #16
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	607a      	str	r2, [r7, #4]
 8015e98:	603b      	str	r3, [r7, #0]
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015e9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d107      	bne.n	8015eb4 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8015ea4:	69bb      	ldr	r3, [r7, #24]
 8015ea6:	683a      	ldr	r2, [r7, #0]
 8015ea8:	6879      	ldr	r1, [r7, #4]
 8015eaa:	68b8      	ldr	r0, [r7, #8]
 8015eac:	f001 f826 	bl	8016efc <RegionAS923NextChannel>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	e000      	b.n	8015eb6 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015eb4:	2309      	movs	r3, #9
        }
    }
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015ebe:	b590      	push	{r4, r7, lr}
 8015ec0:	b083      	sub	sp, #12
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	4608      	mov	r0, r1
 8015ec8:	4611      	mov	r1, r2
 8015eca:	461a      	mov	r2, r3
 8015ecc:	4623      	mov	r3, r4
 8015ece:	71fb      	strb	r3, [r7, #7]
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	71bb      	strb	r3, [r7, #6]
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	717b      	strb	r3, [r7, #5]
 8015ed8:	4613      	mov	r3, r2
 8015eda:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015edc:	79fb      	ldrb	r3, [r7, #7]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d109      	bne.n	8015ef6 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8015ee2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015ee6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015eea:	79bb      	ldrb	r3, [r7, #6]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f001 f979 	bl	80171e4 <RegionAS923ApplyDrOffset>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	e000      	b.n	8015ef8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015ef6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd90      	pop	{r4, r7, pc}

08015f00 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015f00:	b480      	push	{r7}
 8015f02:	b083      	sub	sp, #12
 8015f04:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015f06:	4b04      	ldr	r3, [pc, #16]	@ (8015f18 <RegionGetVersion+0x18>)
 8015f08:	607b      	str	r3, [r7, #4]

    return version;
 8015f0a:	687b      	ldr	r3, [r7, #4]
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	370c      	adds	r7, #12
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bc80      	pop	{r7}
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	02010001 	.word	0x02010001

08015f1c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015f24:	4b0d      	ldr	r3, [pc, #52]	@ (8015f5c <VerifyRfFreq+0x40>)
 8015f26:	6a1b      	ldr	r3, [r3, #32]
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	4798      	blx	r3
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	f083 0301 	eor.w	r3, r3, #1
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d001      	beq.n	8015f3c <VerifyRfFreq+0x20>
    {
        return false;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	e00a      	b.n	8015f52 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	4a08      	ldr	r2, [pc, #32]	@ (8015f60 <VerifyRfFreq+0x44>)
 8015f40:	4293      	cmp	r3, r2
 8015f42:	d903      	bls.n	8015f4c <VerifyRfFreq+0x30>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	4a07      	ldr	r2, [pc, #28]	@ (8015f64 <VerifyRfFreq+0x48>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d901      	bls.n	8015f50 <VerifyRfFreq+0x34>
    {
        return false;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e000      	b.n	8015f52 <VerifyRfFreq+0x36>
    }
    return true;
 8015f50:	2301      	movs	r3, #1
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	08020714 	.word	0x08020714
 8015f60:	3689cabf 	.word	0x3689cabf
 8015f64:	37502800 	.word	0x37502800

08015f68 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015f68:	b590      	push	{r4, r7, lr}
 8015f6a:	b08b      	sub	sp, #44	@ 0x2c
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	4603      	mov	r3, r0
 8015f70:	460a      	mov	r2, r1
 8015f72:	71fb      	strb	r3, [r7, #7]
 8015f74:	4613      	mov	r3, r2
 8015f76:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8015f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8015ffc <GetTimeOnAir+0x94>)
 8015f7e:	5cd3      	ldrb	r3, [r2, r3]
 8015f80:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8015f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f86:	491e      	ldr	r1, [pc, #120]	@ (8016000 <GetTimeOnAir+0x98>)
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f002 f835 	bl	8017ff8 <RegionCommonGetBandwidth>
 8015f8e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015f90:	2300      	movs	r3, #0
 8015f92:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f98:	2b07      	cmp	r3, #7
 8015f9a:	d118      	bne.n	8015fce <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015f9c:	4b19      	ldr	r3, [pc, #100]	@ (8016004 <GetTimeOnAir+0x9c>)
 8015f9e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015fa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015fa4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015fa8:	fb02 f303 	mul.w	r3, r2, r3
 8015fac:	4619      	mov	r1, r3
 8015fae:	88bb      	ldrh	r3, [r7, #4]
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	9203      	str	r2, [sp, #12]
 8015fb6:	9302      	str	r3, [sp, #8]
 8015fb8:	2300      	movs	r3, #0
 8015fba:	9301      	str	r3, [sp, #4]
 8015fbc:	2305      	movs	r3, #5
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	460a      	mov	r2, r1
 8015fc4:	68f9      	ldr	r1, [r7, #12]
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	47a0      	blx	r4
 8015fca:	6178      	str	r0, [r7, #20]
 8015fcc:	e011      	b.n	8015ff2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015fce:	4b0d      	ldr	r3, [pc, #52]	@ (8016004 <GetTimeOnAir+0x9c>)
 8015fd0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015fd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015fd6:	88bb      	ldrh	r3, [r7, #4]
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2101      	movs	r1, #1
 8015fdc:	9103      	str	r1, [sp, #12]
 8015fde:	9302      	str	r3, [sp, #8]
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	9301      	str	r3, [sp, #4]
 8015fe4:	2308      	movs	r3, #8
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	2301      	movs	r3, #1
 8015fea:	68f9      	ldr	r1, [r7, #12]
 8015fec:	2001      	movs	r0, #1
 8015fee:	47a0      	blx	r4
 8015ff0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015ff2:	697b      	ldr	r3, [r7, #20]
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	371c      	adds	r7, #28
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd90      	pop	{r4, r7, pc}
 8015ffc:	08020654 	.word	0x08020654
 8016000:	0802065c 	.word	0x0802065c
 8016004:	08020714 	.word	0x08020714

08016008 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b088      	sub	sp, #32
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016010:	2300      	movs	r3, #0
 8016012:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	3b01      	subs	r3, #1
 801601a:	2b37      	cmp	r3, #55	@ 0x37
 801601c:	f200 814e 	bhi.w	80162bc <RegionAS923GetPhyParam+0x2b4>
 8016020:	a201      	add	r2, pc, #4	@ (adr r2, 8016028 <RegionAS923GetPhyParam+0x20>)
 8016022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016026:	bf00      	nop
 8016028:	08016109 	.word	0x08016109
 801602c:	0801611d 	.word	0x0801611d
 8016030:	080162bd 	.word	0x080162bd
 8016034:	080162bd 	.word	0x080162bd
 8016038:	080162bd 	.word	0x080162bd
 801603c:	08016131 	.word	0x08016131
 8016040:	080162bd 	.word	0x080162bd
 8016044:	08016177 	.word	0x08016177
 8016048:	080162bd 	.word	0x080162bd
 801604c:	0801617d 	.word	0x0801617d
 8016050:	08016183 	.word	0x08016183
 8016054:	08016189 	.word	0x08016189
 8016058:	0801618f 	.word	0x0801618f
 801605c:	080161b7 	.word	0x080161b7
 8016060:	080161df 	.word	0x080161df
 8016064:	080161e5 	.word	0x080161e5
 8016068:	080161ed 	.word	0x080161ed
 801606c:	080161f5 	.word	0x080161f5
 8016070:	080161fd 	.word	0x080161fd
 8016074:	08016205 	.word	0x08016205
 8016078:	0801620d 	.word	0x0801620d
 801607c:	08016221 	.word	0x08016221
 8016080:	08016227 	.word	0x08016227
 8016084:	0801622d 	.word	0x0801622d
 8016088:	08016233 	.word	0x08016233
 801608c:	0801623f 	.word	0x0801623f
 8016090:	0801624b 	.word	0x0801624b
 8016094:	08016251 	.word	0x08016251
 8016098:	08016259 	.word	0x08016259
 801609c:	0801625f 	.word	0x0801625f
 80160a0:	08016265 	.word	0x08016265
 80160a4:	0801626d 	.word	0x0801626d
 80160a8:	08016137 	.word	0x08016137
 80160ac:	080162bd 	.word	0x080162bd
 80160b0:	080162bd 	.word	0x080162bd
 80160b4:	080162bd 	.word	0x080162bd
 80160b8:	080162bd 	.word	0x080162bd
 80160bc:	080162bd 	.word	0x080162bd
 80160c0:	080162bd 	.word	0x080162bd
 80160c4:	080162bd 	.word	0x080162bd
 80160c8:	080162bd 	.word	0x080162bd
 80160cc:	080162bd 	.word	0x080162bd
 80160d0:	080162bd 	.word	0x080162bd
 80160d4:	080162bd 	.word	0x080162bd
 80160d8:	080162bd 	.word	0x080162bd
 80160dc:	080162bd 	.word	0x080162bd
 80160e0:	08016273 	.word	0x08016273
 80160e4:	08016279 	.word	0x08016279
 80160e8:	08016287 	.word	0x08016287
 80160ec:	080162bd 	.word	0x080162bd
 80160f0:	080162bd 	.word	0x080162bd
 80160f4:	0801628d 	.word	0x0801628d
 80160f8:	08016293 	.word	0x08016293
 80160fc:	080162bd 	.word	0x080162bd
 8016100:	08016299 	.word	0x08016299
 8016104:	080162a9 	.word	0x080162a9
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	78db      	ldrb	r3, [r3, #3]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d102      	bne.n	8016116 <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8016110:	2300      	movs	r3, #0
 8016112:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8016114:	e0d3      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8016116:	2302      	movs	r3, #2
 8016118:	61bb      	str	r3, [r7, #24]
            break;
 801611a:	e0d0      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	789b      	ldrb	r3, [r3, #2]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d102      	bne.n	801612a <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8016124:	2300      	movs	r3, #0
 8016126:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8016128:	e0c9      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801612a:	2302      	movs	r3, #2
 801612c:	61bb      	str	r3, [r7, #24]
            break;
 801612e:	e0c6      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8016130:	2302      	movs	r3, #2
 8016132:	61bb      	str	r3, [r7, #24]
            break;
 8016134:	e0c3      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801613c:	733b      	strb	r3, [r7, #12]
 801613e:	2307      	movs	r3, #7
 8016140:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	789b      	ldrb	r3, [r3, #2]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d101      	bne.n	801614e <RegionAS923GetPhyParam+0x146>
 801614a:	2300      	movs	r3, #0
 801614c:	e000      	b.n	8016150 <RegionAS923GetPhyParam+0x148>
 801614e:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016150:	73bb      	strb	r3, [r7, #14]
 8016152:	2310      	movs	r3, #16
 8016154:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016156:	4b5d      	ldr	r3, [pc, #372]	@ (80162cc <RegionAS923GetPhyParam+0x2c4>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801615e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016160:	4b5a      	ldr	r3, [pc, #360]	@ (80162cc <RegionAS923GetPhyParam+0x2c4>)
 8016162:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016164:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016166:	f107 030c 	add.w	r3, r7, #12
 801616a:	4618      	mov	r0, r3
 801616c:	f001 fef1 	bl	8017f52 <RegionCommonGetNextLowerTxDr>
 8016170:	4603      	mov	r3, r0
 8016172:	61bb      	str	r3, [r7, #24]
            break;
 8016174:	e0a3      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8016176:	2300      	movs	r3, #0
 8016178:	61bb      	str	r3, [r7, #24]
            break;
 801617a:	e0a0      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 801617c:	2300      	movs	r3, #0
 801617e:	61bb      	str	r3, [r7, #24]
            break;
 8016180:	e09d      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016182:	2340      	movs	r3, #64	@ 0x40
 8016184:	61bb      	str	r3, [r7, #24]
            break;
 8016186:	e09a      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016188:	2320      	movs	r3, #32
 801618a:	61bb      	str	r3, [r7, #24]
            break;
 801618c:	e097      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	789b      	ldrb	r3, [r3, #2]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d107      	bne.n	80161a6 <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801619c:	461a      	mov	r2, r3
 801619e:	4b4c      	ldr	r3, [pc, #304]	@ (80162d0 <RegionAS923GetPhyParam+0x2c8>)
 80161a0:	5c9b      	ldrb	r3, [r3, r2]
 80161a2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80161a4:	e08b      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161ac:	461a      	mov	r2, r3
 80161ae:	4b49      	ldr	r3, [pc, #292]	@ (80162d4 <RegionAS923GetPhyParam+0x2cc>)
 80161b0:	5c9b      	ldrb	r3, [r3, r2]
 80161b2:	61bb      	str	r3, [r7, #24]
            break;
 80161b4:	e083      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	789b      	ldrb	r3, [r3, #2]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d107      	bne.n	80161ce <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161c4:	461a      	mov	r2, r3
 80161c6:	4b44      	ldr	r3, [pc, #272]	@ (80162d8 <RegionAS923GetPhyParam+0x2d0>)
 80161c8:	5c9b      	ldrb	r3, [r3, r2]
 80161ca:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80161cc:	e077      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161d4:	461a      	mov	r2, r3
 80161d6:	4b3f      	ldr	r3, [pc, #252]	@ (80162d4 <RegionAS923GetPhyParam+0x2cc>)
 80161d8:	5c9b      	ldrb	r3, [r3, r2]
 80161da:	61bb      	str	r3, [r7, #24]
            break;
 80161dc:	e06f      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80161de:	2300      	movs	r3, #0
 80161e0:	61bb      	str	r3, [r7, #24]
            break;
 80161e2:	e06c      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80161e4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80161e8:	61bb      	str	r3, [r7, #24]
            break;
 80161ea:	e068      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80161ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80161f0:	61bb      	str	r3, [r7, #24]
            break;
 80161f2:	e064      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80161f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80161f8:	61bb      	str	r3, [r7, #24]
            break;
 80161fa:	e060      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80161fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016200:	61bb      	str	r3, [r7, #24]
            break;
 8016202:	e05c      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016204:	f241 7370 	movw	r3, #6000	@ 0x1770
 8016208:	61bb      	str	r3, [r7, #24]
            break;
 801620a:	e058      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801620c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016210:	4832      	ldr	r0, [pc, #200]	@ (80162dc <RegionAS923GetPhyParam+0x2d4>)
 8016212:	f001 ff89 	bl	8018128 <randr>
 8016216:	4603      	mov	r3, r0
 8016218:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801621c:	61bb      	str	r3, [r7, #24]
            break;
 801621e:	e04e      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016220:	2300      	movs	r3, #0
 8016222:	61bb      	str	r3, [r7, #24]
            break;
 8016224:	e04b      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8016226:	4b2e      	ldr	r3, [pc, #184]	@ (80162e0 <RegionAS923GetPhyParam+0x2d8>)
 8016228:	61bb      	str	r3, [r7, #24]
            break;
 801622a:	e048      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 801622c:	2302      	movs	r3, #2
 801622e:	61bb      	str	r3, [r7, #24]
            break;
 8016230:	e045      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016232:	4b26      	ldr	r3, [pc, #152]	@ (80162cc <RegionAS923GetPhyParam+0x2c4>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801623a:	61bb      	str	r3, [r7, #24]
            break;
 801623c:	e03f      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801623e:	4b23      	ldr	r3, [pc, #140]	@ (80162cc <RegionAS923GetPhyParam+0x2c4>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016246:	61bb      	str	r3, [r7, #24]
            break;
 8016248:	e039      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801624a:	2310      	movs	r3, #16
 801624c:	61bb      	str	r3, [r7, #24]
            break;
 801624e:	e036      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016250:	4b1e      	ldr	r3, [pc, #120]	@ (80162cc <RegionAS923GetPhyParam+0x2c4>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	61bb      	str	r3, [r7, #24]
            break;
 8016256:	e032      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8016258:	2301      	movs	r3, #1
 801625a:	61bb      	str	r3, [r7, #24]
            break;
 801625c:	e02f      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801625e:	2300      	movs	r3, #0
 8016260:	61bb      	str	r3, [r7, #24]
            break;
 8016262:	e02c      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8016264:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8016268:	61bb      	str	r3, [r7, #24]
            break;
 801626a:	e028      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 801626c:	4b1d      	ldr	r3, [pc, #116]	@ (80162e4 <RegionAS923GetPhyParam+0x2dc>)
 801626e:	61bb      	str	r3, [r7, #24]
            break;
 8016270:	e025      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8016272:	4b1d      	ldr	r3, [pc, #116]	@ (80162e8 <RegionAS923GetPhyParam+0x2e0>)
 8016274:	61bb      	str	r3, [r7, #24]
            break;
 8016276:	e022      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8016278:	2311      	movs	r3, #17
 801627a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 801627c:	2301      	movs	r3, #1
 801627e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8016280:	2300      	movs	r3, #0
 8016282:	76bb      	strb	r3, [r7, #26]
            break;
 8016284:	e01b      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8016286:	2303      	movs	r3, #3
 8016288:	61bb      	str	r3, [r7, #24]
            break;
 801628a:	e018      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 801628c:	4b16      	ldr	r3, [pc, #88]	@ (80162e8 <RegionAS923GetPhyParam+0x2e0>)
 801628e:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8016290:	e015      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8016292:	2303      	movs	r3, #3
 8016294:	61bb      	str	r3, [r7, #24]
            break;
 8016296:	e012      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801629e:	461a      	mov	r2, r3
 80162a0:	4b12      	ldr	r3, [pc, #72]	@ (80162ec <RegionAS923GetPhyParam+0x2e4>)
 80162a2:	5c9b      	ldrb	r3, [r3, r2]
 80162a4:	61bb      	str	r3, [r7, #24]
            break;
 80162a6:	e00a      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162ae:	4910      	ldr	r1, [pc, #64]	@ (80162f0 <RegionAS923GetPhyParam+0x2e8>)
 80162b0:	4618      	mov	r0, r3
 80162b2:	f001 fea1 	bl	8017ff8 <RegionCommonGetBandwidth>
 80162b6:	4603      	mov	r3, r0
 80162b8:	61bb      	str	r3, [r7, #24]
            break;
 80162ba:	e000      	b.n	80162be <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 80162bc:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	61fb      	str	r3, [r7, #28]
 80162c2:	69fb      	ldr	r3, [r7, #28]
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3720      	adds	r7, #32
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	20001bc4 	.word	0x20001bc4
 80162d0:	0802067c 	.word	0x0802067c
 80162d4:	0802068c 	.word	0x0802068c
 80162d8:	08020684 	.word	0x08020684
 80162dc:	fffffc18 	.word	0xfffffc18
 80162e0:	3706ea00 	.word	0x3706ea00
 80162e4:	4009999a 	.word	0x4009999a
 80162e8:	3709f740 	.word	0x3709f740
 80162ec:	08020654 	.word	0x08020654
 80162f0:	0802065c 	.word	0x0802065c

080162f4 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80162f4:	b590      	push	{r4, r7, lr}
 80162f6:	b085      	sub	sp, #20
 80162f8:	af02      	add	r7, sp, #8
 80162fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80162fc:	4b11      	ldr	r3, [pc, #68]	@ (8016344 <RegionAS923SetBandTxDone+0x50>)
 80162fe:	681a      	ldr	r2, [r3, #0]
 8016300:	4b11      	ldr	r3, [pc, #68]	@ (8016348 <RegionAS923SetBandTxDone+0x54>)
 8016302:	6819      	ldr	r1, [r3, #0]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	4618      	mov	r0, r3
 801630a:	4603      	mov	r3, r0
 801630c:	005b      	lsls	r3, r3, #1
 801630e:	4403      	add	r3, r0
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	440b      	add	r3, r1
 8016314:	3309      	adds	r3, #9
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	4619      	mov	r1, r3
 801631a:	460b      	mov	r3, r1
 801631c:	005b      	lsls	r3, r3, #1
 801631e:	440b      	add	r3, r1
 8016320:	00db      	lsls	r3, r3, #3
 8016322:	18d0      	adds	r0, r2, r3
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6899      	ldr	r1, [r3, #8]
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	785c      	ldrb	r4, [r3, #1]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	691a      	ldr	r2, [r3, #16]
 8016330:	9200      	str	r2, [sp, #0]
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	4622      	mov	r2, r4
 8016336:	f001 f9e5 	bl	8017704 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801633a:	bf00      	nop
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	bd90      	pop	{r4, r7, pc}
 8016342:	bf00      	nop
 8016344:	20001bc8 	.word	0x20001bc8
 8016348:	20001bc4 	.word	0x20001bc4

0801634c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b08e      	sub	sp, #56	@ 0x38
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8016354:	2364      	movs	r3, #100	@ 0x64
 8016356:	843b      	strh	r3, [r7, #32]
 8016358:	2300      	movs	r3, #0
 801635a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801635e:	2300      	movs	r3, #0
 8016360:	627b      	str	r3, [r7, #36]	@ 0x24
 8016362:	2300      	movs	r3, #0
 8016364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016366:	2300      	movs	r3, #0
 8016368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801636a:	2300      	movs	r3, #0
 801636c:	633b      	str	r3, [r7, #48]	@ 0x30
 801636e:	2300      	movs	r3, #0
 8016370:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	7b1b      	ldrb	r3, [r3, #12]
 8016378:	2b02      	cmp	r3, #2
 801637a:	d05e      	beq.n	801643a <RegionAS923InitDefaults+0xee>
 801637c:	2b02      	cmp	r3, #2
 801637e:	dc6b      	bgt.n	8016458 <RegionAS923InitDefaults+0x10c>
 8016380:	2b00      	cmp	r3, #0
 8016382:	d002      	beq.n	801638a <RegionAS923InitDefaults+0x3e>
 8016384:	2b01      	cmp	r3, #1
 8016386:	d043      	beq.n	8016410 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016388:	e066      	b.n	8016458 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d063      	beq.n	801645a <RegionAS923InitDefaults+0x10e>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	685b      	ldr	r3, [r3, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d05f      	beq.n	801645a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	4a30      	ldr	r2, [pc, #192]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163a0:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	689b      	ldr	r3, [r3, #8]
 80163a6:	4a2f      	ldr	r2, [pc, #188]	@ (8016464 <RegionAS923InitDefaults+0x118>)
 80163a8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80163aa:	4b2e      	ldr	r3, [pc, #184]	@ (8016464 <RegionAS923InitDefaults+0x118>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f107 0120 	add.w	r1, r7, #32
 80163b2:	2218      	movs	r2, #24
 80163b4:	4618      	mov	r0, r3
 80163b6:	f001 fece 	bl	8018156 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80163ba:	4b29      	ldr	r3, [pc, #164]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4a2a      	ldr	r2, [pc, #168]	@ (8016468 <RegionAS923InitDefaults+0x11c>)
 80163c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80163c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80163c6:	4b26      	ldr	r3, [pc, #152]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4a28      	ldr	r2, [pc, #160]	@ (801646c <RegionAS923InitDefaults+0x120>)
 80163cc:	330c      	adds	r3, #12
 80163ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80163d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80163d4:	4b22      	ldr	r3, [pc, #136]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	4b21      	ldr	r3, [pc, #132]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	6812      	ldr	r2, [r2, #0]
 80163de:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80163e0:	4b1f      	ldr	r3, [pc, #124]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163e2:	681a      	ldr	r2, [r3, #0]
 80163e4:	4b1e      	ldr	r3, [pc, #120]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	68d2      	ldr	r2, [r2, #12]
 80163ea:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80163ec:	4b1c      	ldr	r3, [pc, #112]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2203      	movs	r2, #3
 80163f2:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80163f6:	4b1a      	ldr	r3, [pc, #104]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80163fe:	4b18      	ldr	r3, [pc, #96]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016406:	2201      	movs	r2, #1
 8016408:	4619      	mov	r1, r3
 801640a:	f001 f955 	bl	80176b8 <RegionCommonChanMaskCopy>
 801640e:	e024      	b.n	801645a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016410:	4b13      	ldr	r3, [pc, #76]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2200      	movs	r2, #0
 8016416:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016418:	4b11      	ldr	r3, [pc, #68]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2200      	movs	r2, #0
 801641e:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016420:	4b0f      	ldr	r3, [pc, #60]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016428:	4b0d      	ldr	r3, [pc, #52]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016430:	2201      	movs	r2, #1
 8016432:	4619      	mov	r1, r3
 8016434:	f001 f940 	bl	80176b8 <RegionCommonChanMaskCopy>
            break;
 8016438:	e00f      	b.n	801645a <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801643a:	4b09      	ldr	r3, [pc, #36]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8016442:	4b07      	ldr	r3, [pc, #28]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801644a:	4b05      	ldr	r3, [pc, #20]	@ (8016460 <RegionAS923InitDefaults+0x114>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	430a      	orrs	r2, r1
 8016450:	b292      	uxth	r2, r2
 8016452:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8016456:	e000      	b.n	801645a <RegionAS923InitDefaults+0x10e>
            break;
 8016458:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801645a:	3738      	adds	r7, #56	@ 0x38
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	20001bc4 	.word	0x20001bc4
 8016464:	20001bc8 	.word	0x20001bc8
 8016468:	0802007c 	.word	0x0802007c
 801646c:	08020088 	.word	0x08020088

08016470 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	460b      	mov	r3, r1
 801647a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 801647c:	78fb      	ldrb	r3, [r7, #3]
 801647e:	2b0f      	cmp	r3, #15
 8016480:	f200 808f 	bhi.w	80165a2 <RegionAS923Verify+0x132>
 8016484:	a201      	add	r2, pc, #4	@ (adr r2, 801648c <RegionAS923Verify+0x1c>)
 8016486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801648a:	bf00      	nop
 801648c:	080164cd 	.word	0x080164cd
 8016490:	080165a3 	.word	0x080165a3
 8016494:	080165a3 	.word	0x080165a3
 8016498:	080165a3 	.word	0x080165a3
 801649c:	080165a3 	.word	0x080165a3
 80164a0:	080164db 	.word	0x080164db
 80164a4:	0801651f 	.word	0x0801651f
 80164a8:	0801653d 	.word	0x0801653d
 80164ac:	080165a3 	.word	0x080165a3
 80164b0:	08016581 	.word	0x08016581
 80164b4:	08016581 	.word	0x08016581
 80164b8:	080165a3 	.word	0x080165a3
 80164bc:	080165a3 	.word	0x080165a3
 80164c0:	080165a3 	.word	0x080165a3
 80164c4:	080165a3 	.word	0x080165a3
 80164c8:	0801659f 	.word	0x0801659f
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7ff fd23 	bl	8015f1c <VerifyRfFreq>
 80164d6:	4603      	mov	r3, r0
 80164d8:	e064      	b.n	80165a4 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	789b      	ldrb	r3, [r3, #2]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d10e      	bne.n	8016500 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f993 3000 	ldrsb.w	r3, [r3]
 80164e8:	2207      	movs	r2, #7
 80164ea:	2100      	movs	r1, #0
 80164ec:	4618      	mov	r0, r3
 80164ee:	f001 f866 	bl	80175be <RegionCommonValueInRange>
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	bf14      	ite	ne
 80164f8:	2301      	movne	r3, #1
 80164fa:	2300      	moveq	r3, #0
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	e051      	b.n	80165a4 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f993 3000 	ldrsb.w	r3, [r3]
 8016506:	2207      	movs	r2, #7
 8016508:	2102      	movs	r1, #2
 801650a:	4618      	mov	r0, r3
 801650c:	f001 f857 	bl	80175be <RegionCommonValueInRange>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	bf14      	ite	ne
 8016516:	2301      	movne	r3, #1
 8016518:	2300      	moveq	r3, #0
 801651a:	b2db      	uxtb	r3, r3
 801651c:	e042      	b.n	80165a4 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f993 3000 	ldrsb.w	r3, [r3]
 8016524:	2205      	movs	r2, #5
 8016526:	2100      	movs	r1, #0
 8016528:	4618      	mov	r0, r3
 801652a:	f001 f848 	bl	80175be <RegionCommonValueInRange>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	bf14      	ite	ne
 8016534:	2301      	movne	r3, #1
 8016536:	2300      	moveq	r3, #0
 8016538:	b2db      	uxtb	r3, r3
 801653a:	e033      	b.n	80165a4 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	785b      	ldrb	r3, [r3, #1]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d10e      	bne.n	8016562 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f993 3000 	ldrsb.w	r3, [r3]
 801654a:	2207      	movs	r2, #7
 801654c:	2100      	movs	r1, #0
 801654e:	4618      	mov	r0, r3
 8016550:	f001 f835 	bl	80175be <RegionCommonValueInRange>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	bf14      	ite	ne
 801655a:	2301      	movne	r3, #1
 801655c:	2300      	moveq	r3, #0
 801655e:	b2db      	uxtb	r3, r3
 8016560:	e020      	b.n	80165a4 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f993 3000 	ldrsb.w	r3, [r3]
 8016568:	2207      	movs	r2, #7
 801656a:	2102      	movs	r1, #2
 801656c:	4618      	mov	r0, r3
 801656e:	f001 f826 	bl	80175be <RegionCommonValueInRange>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	bf14      	ite	ne
 8016578:	2301      	movne	r3, #1
 801657a:	2300      	moveq	r3, #0
 801657c:	b2db      	uxtb	r3, r3
 801657e:	e011      	b.n	80165a4 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f993 3000 	ldrsb.w	r3, [r3]
 8016586:	2207      	movs	r2, #7
 8016588:	2100      	movs	r1, #0
 801658a:	4618      	mov	r0, r3
 801658c:	f001 f817 	bl	80175be <RegionCommonValueInRange>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	bf14      	ite	ne
 8016596:	2301      	movne	r3, #1
 8016598:	2300      	moveq	r3, #0
 801659a:	b2db      	uxtb	r3, r3
 801659c:	e002      	b.n	80165a4 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 801659e:	2300      	movs	r3, #0
 80165a0:	e000      	b.n	80165a4 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 80165a2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3708      	adds	r7, #8
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}

080165ac <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b08a      	sub	sp, #40	@ 0x28
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80165b4:	2350      	movs	r3, #80	@ 0x50
 80165b6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	7a1b      	ldrb	r3, [r3, #8]
 80165be:	2b10      	cmp	r3, #16
 80165c0:	d162      	bne.n	8016688 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	685b      	ldr	r3, [r3, #4]
 80165c6:	330f      	adds	r3, #15
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d15e      	bne.n	801668c <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80165ce:	2300      	movs	r3, #0
 80165d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80165d4:	2302      	movs	r3, #2
 80165d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80165da:	e050      	b.n	801667e <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 80165dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80165e0:	2b06      	cmp	r3, #6
 80165e2:	d824      	bhi.n	801662e <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	685a      	ldr	r2, [r3, #4]
 80165e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165ec:	4413      	add	r3, r2
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80165f2:	69ba      	ldr	r2, [r7, #24]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	6859      	ldr	r1, [r3, #4]
 80165f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165fc:	3301      	adds	r3, #1
 80165fe:	440b      	add	r3, r1
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	021b      	lsls	r3, r3, #8
 8016604:	4313      	orrs	r3, r2
 8016606:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016608:	69ba      	ldr	r2, [r7, #24]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6859      	ldr	r1, [r3, #4]
 801660e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016612:	3302      	adds	r3, #2
 8016614:	440b      	add	r3, r1
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	041b      	lsls	r3, r3, #16
 801661a:	4313      	orrs	r3, r2
 801661c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	2264      	movs	r2, #100	@ 0x64
 8016622:	fb02 f303 	mul.w	r3, r2, r3
 8016626:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	61fb      	str	r3, [r7, #28]
 801662c:	e006      	b.n	801663c <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801662e:	2300      	movs	r3, #0
 8016630:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016632:	2300      	movs	r3, #0
 8016634:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016638:	2300      	movs	r3, #0
 801663a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801663c:	69bb      	ldr	r3, [r7, #24]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d00b      	beq.n	801665a <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016642:	f107 0318 	add.w	r3, r7, #24
 8016646:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801664c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 801664e:	f107 0310 	add.w	r3, r7, #16
 8016652:	4618      	mov	r0, r3
 8016654:	f000 fd00 	bl	8017058 <RegionAS923ChannelAdd>
 8016658:	e007      	b.n	801666a <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801665a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801665e:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8016660:	f107 030c 	add.w	r3, r7, #12
 8016664:	4618      	mov	r0, r3
 8016666:	f000 fd93 	bl	8017190 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801666a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801666e:	3303      	adds	r3, #3
 8016670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016674:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016678:	3301      	adds	r3, #1
 801667a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801667e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016682:	2b0f      	cmp	r3, #15
 8016684:	d9aa      	bls.n	80165dc <RegionAS923ApplyCFList+0x30>
 8016686:	e002      	b.n	801668e <RegionAS923ApplyCFList+0xe2>
        return;
 8016688:	bf00      	nop
 801668a:	e000      	b.n	801668e <RegionAS923ApplyCFList+0xe2>
        return;
 801668c:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801668e:	3728      	adds	r7, #40	@ 0x28
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	791b      	ldrb	r3, [r3, #4]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <RegionAS923ChanMaskSet+0x16>
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d00b      	beq.n	80166c0 <RegionAS923ChanMaskSet+0x2c>
 80166a8:	e015      	b.n	80166d6 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80166aa:	4b0e      	ldr	r3, [pc, #56]	@ (80166e4 <RegionAS923ChanMaskSet+0x50>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	2201      	movs	r2, #1
 80166b8:	4619      	mov	r1, r3
 80166ba:	f000 fffd 	bl	80176b8 <RegionCommonChanMaskCopy>
            break;
 80166be:	e00c      	b.n	80166da <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80166c0:	4b08      	ldr	r3, [pc, #32]	@ (80166e4 <RegionAS923ChanMaskSet+0x50>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2201      	movs	r2, #1
 80166ce:	4619      	mov	r1, r3
 80166d0:	f000 fff2 	bl	80176b8 <RegionCommonChanMaskCopy>
            break;
 80166d4:	e001      	b.n	80166da <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 80166d6:	2300      	movs	r3, #0
 80166d8:	e000      	b.n	80166dc <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 80166da:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3708      	adds	r7, #8
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}
 80166e4:	20001bc4 	.word	0x20001bc4

080166e8 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b088      	sub	sp, #32
 80166ec:	af02      	add	r7, sp, #8
 80166ee:	60ba      	str	r2, [r7, #8]
 80166f0:	607b      	str	r3, [r7, #4]
 80166f2:	4603      	mov	r3, r0
 80166f4:	73fb      	strb	r3, [r7, #15]
 80166f6:	460b      	mov	r3, r1
 80166f8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 80166fa:	2300      	movs	r3, #0
 80166fc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 80166fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016702:	2b07      	cmp	r3, #7
 8016704:	bfa8      	it	ge
 8016706:	2307      	movge	r3, #7
 8016708:	b25a      	sxtb	r2, r3
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016714:	491e      	ldr	r1, [pc, #120]	@ (8016790 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8016716:	4618      	mov	r0, r3
 8016718:	f001 fc6e 	bl	8017ff8 <RegionCommonGetBandwidth>
 801671c:	4603      	mov	r3, r0
 801671e:	b2da      	uxtb	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801672a:	2b07      	cmp	r3, #7
 801672c:	d10a      	bne.n	8016744 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016734:	461a      	mov	r2, r3
 8016736:	4b17      	ldr	r3, [pc, #92]	@ (8016794 <RegionAS923ComputeRxWindowParameters+0xac>)
 8016738:	5c9b      	ldrb	r3, [r3, r2]
 801673a:	4618      	mov	r0, r3
 801673c:	f001 f9f0 	bl	8017b20 <RegionCommonComputeSymbolTimeFsk>
 8016740:	6178      	str	r0, [r7, #20]
 8016742:	e011      	b.n	8016768 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801674a:	461a      	mov	r2, r3
 801674c:	4b11      	ldr	r3, [pc, #68]	@ (8016794 <RegionAS923ComputeRxWindowParameters+0xac>)
 801674e:	5c9a      	ldrb	r2, [r3, r2]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016756:	4619      	mov	r1, r3
 8016758:	4b0d      	ldr	r3, [pc, #52]	@ (8016790 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801675a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801675e:	4619      	mov	r1, r3
 8016760:	4610      	mov	r0, r2
 8016762:	f001 f9c7 	bl	8017af4 <RegionCommonComputeSymbolTimeLoRa>
 8016766:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016768:	4b0b      	ldr	r3, [pc, #44]	@ (8016798 <RegionAS923ComputeRxWindowParameters+0xb0>)
 801676a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801676c:	4798      	blx	r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	3308      	adds	r3, #8
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	320c      	adds	r2, #12
 8016776:	7bb9      	ldrb	r1, [r7, #14]
 8016778:	9201      	str	r2, [sp, #4]
 801677a:	9300      	str	r3, [sp, #0]
 801677c:	4603      	mov	r3, r0
 801677e:	68ba      	ldr	r2, [r7, #8]
 8016780:	6978      	ldr	r0, [r7, #20]
 8016782:	f001 f9dd 	bl	8017b40 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8016786:	bf00      	nop
 8016788:	3718      	adds	r7, #24
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}
 801678e:	bf00      	nop
 8016790:	0802065c 	.word	0x0802065c
 8016794:	08020654 	.word	0x08020654
 8016798:	08020714 	.word	0x08020714

0801679c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801679c:	b5b0      	push	{r4, r5, r7, lr}
 801679e:	b090      	sub	sp, #64	@ 0x40
 80167a0:	af0a      	add	r7, sp, #40	@ 0x28
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	785b      	ldrb	r3, [r3, #1]
 80167aa:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80167ac:	2300      	movs	r3, #0
 80167ae:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80167b0:	2300      	movs	r3, #0
 80167b2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80167ba:	4b5a      	ldr	r3, [pc, #360]	@ (8016924 <RegionAS923RxConfig+0x188>)
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	4798      	blx	r3
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d001      	beq.n	80167ca <RegionAS923RxConfig+0x2e>
    {
        return false;
 80167c6:	2300      	movs	r3, #0
 80167c8:	e0a8      	b.n	801691c <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	7cdb      	ldrb	r3, [r3, #19]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d126      	bne.n	8016820 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80167d2:	4b55      	ldr	r3, [pc, #340]	@ (8016928 <RegionAS923RxConfig+0x18c>)
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	4619      	mov	r1, r3
 80167dc:	460b      	mov	r3, r1
 80167de:	005b      	lsls	r3, r3, #1
 80167e0:	440b      	add	r3, r1
 80167e2:	009b      	lsls	r3, r3, #2
 80167e4:	4413      	add	r3, r2
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80167ea:	4b4f      	ldr	r3, [pc, #316]	@ (8016928 <RegionAS923RxConfig+0x18c>)
 80167ec:	681a      	ldr	r2, [r3, #0]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	4619      	mov	r1, r3
 80167f4:	460b      	mov	r3, r1
 80167f6:	005b      	lsls	r3, r3, #1
 80167f8:	440b      	add	r3, r1
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	4413      	add	r3, r2
 80167fe:	3304      	adds	r3, #4
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d00c      	beq.n	8016820 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016806:	4b48      	ldr	r3, [pc, #288]	@ (8016928 <RegionAS923RxConfig+0x18c>)
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	4619      	mov	r1, r3
 8016810:	460b      	mov	r3, r1
 8016812:	005b      	lsls	r3, r3, #1
 8016814:	440b      	add	r3, r1
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	4413      	add	r3, r2
 801681a:	3304      	adds	r3, #4
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8016820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016824:	4a41      	ldr	r2, [pc, #260]	@ (801692c <RegionAS923RxConfig+0x190>)
 8016826:	5cd3      	ldrb	r3, [r2, r3]
 8016828:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801682a:	4b3e      	ldr	r3, [pc, #248]	@ (8016924 <RegionAS923RxConfig+0x188>)
 801682c:	68db      	ldr	r3, [r3, #12]
 801682e:	6938      	ldr	r0, [r7, #16]
 8016830:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016836:	2b07      	cmp	r3, #7
 8016838:	d128      	bne.n	801688c <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801683a:	2300      	movs	r3, #0
 801683c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801683e:	4b39      	ldr	r3, [pc, #228]	@ (8016924 <RegionAS923RxConfig+0x188>)
 8016840:	699c      	ldr	r4, [r3, #24]
 8016842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801684a:	fb02 f303 	mul.w	r3, r2, r3
 801684e:	4619      	mov	r1, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	689b      	ldr	r3, [r3, #8]
 8016854:	b29b      	uxth	r3, r3
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	7c92      	ldrb	r2, [r2, #18]
 801685a:	7df8      	ldrb	r0, [r7, #23]
 801685c:	9209      	str	r2, [sp, #36]	@ 0x24
 801685e:	2200      	movs	r2, #0
 8016860:	9208      	str	r2, [sp, #32]
 8016862:	2200      	movs	r2, #0
 8016864:	9207      	str	r2, [sp, #28]
 8016866:	2200      	movs	r2, #0
 8016868:	9206      	str	r2, [sp, #24]
 801686a:	2201      	movs	r2, #1
 801686c:	9205      	str	r2, [sp, #20]
 801686e:	2200      	movs	r2, #0
 8016870:	9204      	str	r2, [sp, #16]
 8016872:	2200      	movs	r2, #0
 8016874:	9203      	str	r2, [sp, #12]
 8016876:	9302      	str	r3, [sp, #8]
 8016878:	2305      	movs	r3, #5
 801687a:	9301      	str	r3, [sp, #4]
 801687c:	4b2c      	ldr	r3, [pc, #176]	@ (8016930 <RegionAS923RxConfig+0x194>)
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	2300      	movs	r3, #0
 8016882:	460a      	mov	r2, r1
 8016884:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016888:	47a0      	blx	r4
 801688a:	e024      	b.n	80168d6 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801688c:	2301      	movs	r3, #1
 801688e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016890:	4b24      	ldr	r3, [pc, #144]	@ (8016924 <RegionAS923RxConfig+0x188>)
 8016892:	699c      	ldr	r4, [r3, #24]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	789b      	ldrb	r3, [r3, #2]
 8016898:	461d      	mov	r5, r3
 801689a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	689b      	ldr	r3, [r3, #8]
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	7c92      	ldrb	r2, [r2, #18]
 80168a8:	7df8      	ldrb	r0, [r7, #23]
 80168aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80168ac:	2201      	movs	r2, #1
 80168ae:	9208      	str	r2, [sp, #32]
 80168b0:	2200      	movs	r2, #0
 80168b2:	9207      	str	r2, [sp, #28]
 80168b4:	2200      	movs	r2, #0
 80168b6:	9206      	str	r2, [sp, #24]
 80168b8:	2200      	movs	r2, #0
 80168ba:	9205      	str	r2, [sp, #20]
 80168bc:	2200      	movs	r2, #0
 80168be:	9204      	str	r2, [sp, #16]
 80168c0:	2200      	movs	r2, #0
 80168c2:	9203      	str	r2, [sp, #12]
 80168c4:	9302      	str	r3, [sp, #8]
 80168c6:	2308      	movs	r3, #8
 80168c8:	9301      	str	r3, [sp, #4]
 80168ca:	2300      	movs	r3, #0
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	2301      	movs	r3, #1
 80168d0:	460a      	mov	r2, r1
 80168d2:	4629      	mov	r1, r5
 80168d4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	7c5b      	ldrb	r3, [r3, #17]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d005      	beq.n	80168ea <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80168de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168e2:	4a14      	ldr	r2, [pc, #80]	@ (8016934 <RegionAS923RxConfig+0x198>)
 80168e4:	5cd3      	ldrb	r3, [r2, r3]
 80168e6:	75bb      	strb	r3, [r7, #22]
 80168e8:	e004      	b.n	80168f4 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 80168ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168ee:	4a12      	ldr	r2, [pc, #72]	@ (8016938 <RegionAS923RxConfig+0x19c>)
 80168f0:	5cd3      	ldrb	r3, [r2, r3]
 80168f2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80168f4:	4b0b      	ldr	r3, [pc, #44]	@ (8016924 <RegionAS923RxConfig+0x188>)
 80168f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80168f8:	7dba      	ldrb	r2, [r7, #22]
 80168fa:	320d      	adds	r2, #13
 80168fc:	b2d1      	uxtb	r1, r2
 80168fe:	7dfa      	ldrb	r2, [r7, #23]
 8016900:	4610      	mov	r0, r2
 8016902:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	7cdb      	ldrb	r3, [r3, #19]
 8016908:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801690c:	6939      	ldr	r1, [r7, #16]
 801690e:	4618      	mov	r0, r3
 8016910:	f001 fb90 	bl	8018034 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	7bfa      	ldrb	r2, [r7, #15]
 8016918:	701a      	strb	r2, [r3, #0]
    return true;
 801691a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 801691c:	4618      	mov	r0, r3
 801691e:	3718      	adds	r7, #24
 8016920:	46bd      	mov	sp, r7
 8016922:	bdb0      	pop	{r4, r5, r7, pc}
 8016924:	08020714 	.word	0x08020714
 8016928:	20001bc4 	.word	0x20001bc4
 801692c:	08020654 	.word	0x08020654
 8016930:	00014585 	.word	0x00014585
 8016934:	08020684 	.word	0x08020684
 8016938:	0802067c 	.word	0x0802067c

0801693c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801693c:	b590      	push	{r4, r7, lr}
 801693e:	b093      	sub	sp, #76	@ 0x4c
 8016940:	af0a      	add	r7, sp, #40	@ 0x28
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801694e:	461a      	mov	r2, r3
 8016950:	4b5d      	ldr	r3, [pc, #372]	@ (8016ac8 <RegionAS923TxConfig+0x18c>)
 8016952:	5c9b      	ldrb	r3, [r3, r2]
 8016954:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801695c:	4b5b      	ldr	r3, [pc, #364]	@ (8016acc <RegionAS923TxConfig+0x190>)
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	4b5b      	ldr	r3, [pc, #364]	@ (8016ad0 <RegionAS923TxConfig+0x194>)
 8016962:	6819      	ldr	r1, [r3, #0]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	461c      	mov	r4, r3
 801696a:	4623      	mov	r3, r4
 801696c:	005b      	lsls	r3, r3, #1
 801696e:	4423      	add	r3, r4
 8016970:	009b      	lsls	r3, r3, #2
 8016972:	440b      	add	r3, r1
 8016974:	3309      	adds	r3, #9
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	4619      	mov	r1, r3
 801697a:	460b      	mov	r3, r1
 801697c:	005b      	lsls	r3, r3, #1
 801697e:	440b      	add	r3, r1
 8016980:	00db      	lsls	r3, r3, #3
 8016982:	4413      	add	r3, r2
 8016984:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016988:	4619      	mov	r1, r3
 801698a:	f001 fb20 	bl	8017fce <RegionCommonLimitTxPower>
 801698e:	4603      	mov	r3, r0
 8016990:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016998:	494e      	ldr	r1, [pc, #312]	@ (8016ad4 <RegionAS923TxConfig+0x198>)
 801699a:	4618      	mov	r0, r3
 801699c:	f001 fb2c 	bl	8017ff8 <RegionCommonGetBandwidth>
 80169a0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80169a2:	2300      	movs	r3, #0
 80169a4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	6859      	ldr	r1, [r3, #4]
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	689a      	ldr	r2, [r3, #8]
 80169ae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f001 f97c 	bl	8017cb0 <RegionCommonComputeTxPower>
 80169b8:	4603      	mov	r3, r0
 80169ba:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80169bc:	4b46      	ldr	r3, [pc, #280]	@ (8016ad8 <RegionAS923TxConfig+0x19c>)
 80169be:	68da      	ldr	r2, [r3, #12]
 80169c0:	4b43      	ldr	r3, [pc, #268]	@ (8016ad0 <RegionAS923TxConfig+0x194>)
 80169c2:	6819      	ldr	r1, [r3, #0]
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	4618      	mov	r0, r3
 80169ca:	4603      	mov	r3, r0
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4403      	add	r3, r0
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	440b      	add	r3, r1
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169e0:	2b07      	cmp	r3, #7
 80169e2:	d124      	bne.n	8016a2e <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80169e4:	2300      	movs	r3, #0
 80169e6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80169e8:	4b3b      	ldr	r3, [pc, #236]	@ (8016ad8 <RegionAS923TxConfig+0x19c>)
 80169ea:	69dc      	ldr	r4, [r3, #28]
 80169ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80169f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80169f4:	fb02 f303 	mul.w	r3, r2, r3
 80169f8:	461a      	mov	r2, r3
 80169fa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80169fe:	7ff8      	ldrb	r0, [r7, #31]
 8016a00:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016a04:	9308      	str	r3, [sp, #32]
 8016a06:	2300      	movs	r3, #0
 8016a08:	9307      	str	r3, [sp, #28]
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	9306      	str	r3, [sp, #24]
 8016a0e:	2300      	movs	r3, #0
 8016a10:	9305      	str	r3, [sp, #20]
 8016a12:	2301      	movs	r3, #1
 8016a14:	9304      	str	r3, [sp, #16]
 8016a16:	2300      	movs	r3, #0
 8016a18:	9303      	str	r3, [sp, #12]
 8016a1a:	2305      	movs	r3, #5
 8016a1c:	9302      	str	r3, [sp, #8]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	9301      	str	r3, [sp, #4]
 8016a22:	9200      	str	r2, [sp, #0]
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8016a2a:	47a0      	blx	r4
 8016a2c:	e01d      	b.n	8016a6a <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8016a2e:	2301      	movs	r3, #1
 8016a30:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016a32:	4b29      	ldr	r3, [pc, #164]	@ (8016ad8 <RegionAS923TxConfig+0x19c>)
 8016a34:	69dc      	ldr	r4, [r3, #28]
 8016a36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016a3a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016a3e:	7ff8      	ldrb	r0, [r7, #31]
 8016a40:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016a44:	9208      	str	r2, [sp, #32]
 8016a46:	2200      	movs	r2, #0
 8016a48:	9207      	str	r2, [sp, #28]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	9206      	str	r2, [sp, #24]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	9205      	str	r2, [sp, #20]
 8016a52:	2201      	movs	r2, #1
 8016a54:	9204      	str	r2, [sp, #16]
 8016a56:	2200      	movs	r2, #0
 8016a58:	9203      	str	r2, [sp, #12]
 8016a5a:	2208      	movs	r2, #8
 8016a5c:	9202      	str	r2, [sp, #8]
 8016a5e:	2201      	movs	r2, #1
 8016a60:	9201      	str	r2, [sp, #4]
 8016a62:	9300      	str	r3, [sp, #0]
 8016a64:	69bb      	ldr	r3, [r7, #24]
 8016a66:	2200      	movs	r2, #0
 8016a68:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016a6a:	4b19      	ldr	r3, [pc, #100]	@ (8016ad0 <RegionAS923TxConfig+0x194>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	4619      	mov	r1, r3
 8016a74:	460b      	mov	r3, r1
 8016a76:	005b      	lsls	r3, r3, #1
 8016a78:	440b      	add	r3, r1
 8016a7a:	009b      	lsls	r3, r3, #2
 8016a7c:	4413      	add	r3, r2
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a86:	4619      	mov	r1, r3
 8016a88:	4610      	mov	r0, r2
 8016a8a:	f001 fb05 	bl	8018098 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	899b      	ldrh	r3, [r3, #12]
 8016a98:	4619      	mov	r1, r3
 8016a9a:	4610      	mov	r0, r2
 8016a9c:	f7ff fa64 	bl	8015f68 <GetTimeOnAir>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8016ad8 <RegionAS923TxConfig+0x19c>)
 8016aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	8992      	ldrh	r2, [r2, #12]
 8016aae:	b2d1      	uxtb	r1, r2
 8016ab0:	7ffa      	ldrb	r2, [r7, #31]
 8016ab2:	4610      	mov	r0, r2
 8016ab4:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	7f7a      	ldrb	r2, [r7, #29]
 8016aba:	701a      	strb	r2, [r3, #0]
    return true;
 8016abc:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3724      	adds	r7, #36	@ 0x24
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd90      	pop	{r4, r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	08020654 	.word	0x08020654
 8016acc:	20001bc8 	.word	0x20001bc8
 8016ad0:	20001bc4 	.word	0x20001bc4
 8016ad4:	0802065c 	.word	0x0802065c
 8016ad8:	08020714 	.word	0x08020714

08016adc <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016adc:	b590      	push	{r4, r7, lr}
 8016ade:	b093      	sub	sp, #76	@ 0x4c
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	607a      	str	r2, [r7, #4]
 8016ae8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016aea:	2307      	movs	r3, #7
 8016aec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016af0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016af4:	2200      	movs	r2, #0
 8016af6:	601a      	str	r2, [r3, #0]
 8016af8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016afa:	2300      	movs	r3, #0
 8016afc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016b00:	2300      	movs	r3, #0
 8016b02:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8016b06:	2300      	movs	r3, #0
 8016b08:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016b0a:	e085      	b.n	8016c18 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	685a      	ldr	r2, [r3, #4]
 8016b10:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016b14:	4413      	add	r3, r2
 8016b16:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f000 ff0f 	bl	8017940 <RegionCommonParseLinkAdrReq>
 8016b22:	4603      	mov	r3, r0
 8016b24:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8016b28:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d07b      	beq.n	8016c28 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016b30:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016b34:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016b38:	4413      	add	r3, r2
 8016b3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016b3e:	2307      	movs	r3, #7
 8016b40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016b48:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d109      	bne.n	8016b66 <RegionAS923LinkAdrReq+0x8a>
 8016b52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d106      	bne.n	8016b66 <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8016b58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016b5c:	f023 0301 	bic.w	r3, r3, #1
 8016b60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016b64:	e058      	b.n	8016c18 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016b66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d003      	beq.n	8016b76 <RegionAS923LinkAdrReq+0x9a>
 8016b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016b72:	2b05      	cmp	r3, #5
 8016b74:	d903      	bls.n	8016b7e <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016b76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016b7a:	2b06      	cmp	r3, #6
 8016b7c:	d906      	bls.n	8016b8c <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016b7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016b82:	f023 0301 	bic.w	r3, r3, #1
 8016b86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016b8a:	e045      	b.n	8016c18 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016b92:	e03d      	b.n	8016c10 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016b94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016b98:	2b06      	cmp	r3, #6
 8016b9a:	d118      	bne.n	8016bce <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8016d1c <RegionAS923LinkAdrReq+0x240>)
 8016b9e:	6819      	ldr	r1, [r3, #0]
 8016ba0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	005b      	lsls	r3, r3, #1
 8016ba8:	4413      	add	r3, r2
 8016baa:	009b      	lsls	r3, r3, #2
 8016bac:	440b      	add	r3, r1
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d028      	beq.n	8016c06 <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016bb4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016bb8:	2201      	movs	r2, #1
 8016bba:	fa02 f303 	lsl.w	r3, r2, r3
 8016bbe:	b21a      	sxth	r2, r3
 8016bc0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016bc2:	b21b      	sxth	r3, r3
 8016bc4:	4313      	orrs	r3, r2
 8016bc6:	b21b      	sxth	r3, r3
 8016bc8:	b29b      	uxth	r3, r3
 8016bca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016bcc:	e01b      	b.n	8016c06 <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016bce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016bd6:	fa42 f303 	asr.w	r3, r2, r3
 8016bda:	f003 0301 	and.w	r3, r3, #1
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d011      	beq.n	8016c06 <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016be2:	4b4e      	ldr	r3, [pc, #312]	@ (8016d1c <RegionAS923LinkAdrReq+0x240>)
 8016be4:	6819      	ldr	r1, [r3, #0]
 8016be6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016bea:	4613      	mov	r3, r2
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	4413      	add	r3, r2
 8016bf0:	009b      	lsls	r3, r3, #2
 8016bf2:	440b      	add	r3, r1
 8016bf4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d105      	bne.n	8016c06 <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016bfe:	f023 0301 	bic.w	r3, r3, #1
 8016c02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8016c06:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016c10:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016c14:	2b0f      	cmp	r3, #15
 8016c16:	d9bd      	bls.n	8016b94 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	7a1b      	ldrb	r3, [r3, #8]
 8016c1c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016c20:	429a      	cmp	r2, r3
 8016c22:	f4ff af73 	bcc.w	8016b0c <RegionAS923LinkAdrReq+0x30>
 8016c26:	e000      	b.n	8016c2a <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016c28:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016c2a:	2302      	movs	r3, #2
 8016c2c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	7a5b      	ldrb	r3, [r3, #9]
 8016c34:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8016c38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7ff f9e3 	bl	8016008 <RegionAS923GetPhyParam>
 8016c42:	4603      	mov	r3, r0
 8016c44:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8016c46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016c4a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	7a9b      	ldrb	r3, [r3, #10]
 8016c50:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016c52:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8016c56:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016c58:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8016c5c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016c5e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016c62:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016c6a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016c72:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	7b5b      	ldrb	r3, [r3, #13]
 8016c78:	b25b      	sxtb	r3, r3
 8016c7a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8016c7c:	2310      	movs	r3, #16
 8016c7e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016c80:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016c84:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c88:	b25b      	sxtb	r3, r3
 8016c8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8016c8e:	2307      	movs	r3, #7
 8016c90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016c94:	4b21      	ldr	r3, [pc, #132]	@ (8016d1c <RegionAS923LinkAdrReq+0x240>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8016c9a:	2307      	movs	r3, #7
 8016c9c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016cac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016cb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016cb4:	1c9a      	adds	r2, r3, #2
 8016cb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016cba:	1c59      	adds	r1, r3, #1
 8016cbc:	f107 0010 	add.w	r0, r7, #16
 8016cc0:	4623      	mov	r3, r4
 8016cc2:	f000 fe8e 	bl	80179e2 <RegionCommonLinkAdrReqVerifyParams>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016cd0:	2b07      	cmp	r3, #7
 8016cd2:	d10d      	bne.n	8016cf0 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016cd4:	4b11      	ldr	r3, [pc, #68]	@ (8016d1c <RegionAS923LinkAdrReq+0x240>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016cdc:	220c      	movs	r2, #12
 8016cde:	2100      	movs	r1, #0
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f001 fa73 	bl	80181cc <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d1c <RegionAS923LinkAdrReq+0x240>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016cec:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016cf0:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016cf8:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016d00:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016d0a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016d0e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8016d10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	374c      	adds	r7, #76	@ 0x4c
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd90      	pop	{r4, r7, pc}
 8016d1c:	20001bc4 	.word	0x20001bc4

08016d20 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016d28:	2307      	movs	r3, #7
 8016d2a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	685b      	ldr	r3, [r3, #4]
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7ff f8f3 	bl	8015f1c <VerifyRfFreq>
 8016d36:	4603      	mov	r3, r0
 8016d38:	f083 0301 	eor.w	r3, r3, #1
 8016d3c:	b2db      	uxtb	r3, r3
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d003      	beq.n	8016d4a <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8016d42:	7bfb      	ldrb	r3, [r7, #15]
 8016d44:	f023 0301 	bic.w	r3, r3, #1
 8016d48:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8016d50:	2207      	movs	r2, #7
 8016d52:	2100      	movs	r1, #0
 8016d54:	4618      	mov	r0, r3
 8016d56:	f000 fc32 	bl	80175be <RegionCommonValueInRange>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d103      	bne.n	8016d68 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8016d60:	7bfb      	ldrb	r3, [r7, #15]
 8016d62:	f023 0302 	bic.w	r3, r3, #2
 8016d66:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d6e:	2207      	movs	r2, #7
 8016d70:	2100      	movs	r1, #0
 8016d72:	4618      	mov	r0, r3
 8016d74:	f000 fc23 	bl	80175be <RegionCommonValueInRange>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d103      	bne.n	8016d86 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016d7e:	7bfb      	ldrb	r3, [r7, #15]
 8016d80:	f023 0304 	bic.w	r3, r3, #4
 8016d84:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8016d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3710      	adds	r7, #16
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b086      	sub	sp, #24
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016d98:	2303      	movs	r3, #3
 8016d9a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d114      	bne.n	8016dd0 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8016db0:	f107 0308 	add.w	r3, r7, #8
 8016db4:	4618      	mov	r0, r3
 8016db6:	f000 f9eb 	bl	8017190 <RegionAS923ChannelsRemove>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	f083 0301 	eor.w	r3, r3, #1
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d03b      	beq.n	8016e3e <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016dc6:	7dfb      	ldrb	r3, [r7, #23]
 8016dc8:	f023 0303 	bic.w	r3, r3, #3
 8016dcc:	75fb      	strb	r3, [r7, #23]
 8016dce:	e036      	b.n	8016e3e <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8016de0:	f107 030c 	add.w	r3, r7, #12
 8016de4:	4618      	mov	r0, r3
 8016de6:	f000 f937 	bl	8017058 <RegionAS923ChannelAdd>
 8016dea:	4603      	mov	r3, r0
 8016dec:	2b06      	cmp	r3, #6
 8016dee:	d820      	bhi.n	8016e32 <RegionAS923NewChannelReq+0xa2>
 8016df0:	a201      	add	r2, pc, #4	@ (adr r2, 8016df8 <RegionAS923NewChannelReq+0x68>)
 8016df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016df6:	bf00      	nop
 8016df8:	08016e3d 	.word	0x08016e3d
 8016dfc:	08016e33 	.word	0x08016e33
 8016e00:	08016e33 	.word	0x08016e33
 8016e04:	08016e33 	.word	0x08016e33
 8016e08:	08016e15 	.word	0x08016e15
 8016e0c:	08016e1f 	.word	0x08016e1f
 8016e10:	08016e29 	.word	0x08016e29
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016e14:	7dfb      	ldrb	r3, [r7, #23]
 8016e16:	f023 0301 	bic.w	r3, r3, #1
 8016e1a:	75fb      	strb	r3, [r7, #23]
                break;
 8016e1c:	e00f      	b.n	8016e3e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016e1e:	7dfb      	ldrb	r3, [r7, #23]
 8016e20:	f023 0302 	bic.w	r3, r3, #2
 8016e24:	75fb      	strb	r3, [r7, #23]
                break;
 8016e26:	e00a      	b.n	8016e3e <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016e28:	7dfb      	ldrb	r3, [r7, #23]
 8016e2a:	f023 0303 	bic.w	r3, r3, #3
 8016e2e:	75fb      	strb	r3, [r7, #23]
                break;
 8016e30:	e005      	b.n	8016e3e <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016e32:	7dfb      	ldrb	r3, [r7, #23]
 8016e34:	f023 0303 	bic.w	r3, r3, #3
 8016e38:	75fb      	strb	r3, [r7, #23]
                break;
 8016e3a:	e000      	b.n	8016e3e <RegionAS923NewChannelReq+0xae>
                break;
 8016e3c:	bf00      	nop
            }
        }
    }

    return status;
 8016e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3718      	adds	r7, #24
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop

08016e4c <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b083      	sub	sp, #12
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8016e54:	2300      	movs	r3, #0
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	370c      	adds	r7, #12
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bc80      	pop	{r7}
 8016e5e:	4770      	bx	lr

08016e60 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b084      	sub	sp, #16
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016e68:	2303      	movs	r3, #3
 8016e6a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	685b      	ldr	r3, [r3, #4]
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ff f853 	bl	8015f1c <VerifyRfFreq>
 8016e76:	4603      	mov	r3, r0
 8016e78:	f083 0301 	eor.w	r3, r3, #1
 8016e7c:	b2db      	uxtb	r3, r3
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d003      	beq.n	8016e8a <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8016e82:	7bfb      	ldrb	r3, [r7, #15]
 8016e84:	f023 0301 	bic.w	r3, r3, #1
 8016e88:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016e8a:	4b14      	ldr	r3, [pc, #80]	@ (8016edc <RegionAS923DlChannelReq+0x7c>)
 8016e8c:	681a      	ldr	r2, [r3, #0]
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	4619      	mov	r1, r3
 8016e94:	460b      	mov	r3, r1
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	440b      	add	r3, r1
 8016e9a:	009b      	lsls	r3, r3, #2
 8016e9c:	4413      	add	r3, r2
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d103      	bne.n	8016eac <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8016ea4:	7bfb      	ldrb	r3, [r7, #15]
 8016ea6:	f023 0302 	bic.w	r3, r3, #2
 8016eaa:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016eac:	7bfb      	ldrb	r3, [r7, #15]
 8016eae:	2b03      	cmp	r3, #3
 8016eb0:	d10d      	bne.n	8016ece <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8016edc <RegionAS923DlChannelReq+0x7c>)
 8016eb4:	6819      	ldr	r1, [r3, #0]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	685a      	ldr	r2, [r3, #4]
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	4403      	add	r3, r0
 8016ec6:	009b      	lsls	r3, r3, #2
 8016ec8:	440b      	add	r3, r1
 8016eca:	3304      	adds	r3, #4
 8016ecc:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8016ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	3710      	adds	r7, #16
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	bd80      	pop	{r7, pc}
 8016eda:	bf00      	nop
 8016edc:	20001bc4 	.word	0x20001bc4

08016ee0 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	460a      	mov	r2, r1
 8016eea:	71fb      	strb	r3, [r7, #7]
 8016eec:	4613      	mov	r3, r2
 8016eee:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8016ef0:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	370c      	adds	r7, #12
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bc80      	pop	{r7}
 8016efa:	4770      	bx	lr

08016efc <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b09a      	sub	sp, #104	@ 0x68
 8016f00:	af02      	add	r7, sp, #8
 8016f02:	60f8      	str	r0, [r7, #12]
 8016f04:	60b9      	str	r1, [r7, #8]
 8016f06:	607a      	str	r2, [r7, #4]
 8016f08:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016f10:	2300      	movs	r3, #0
 8016f12:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8016f16:	2300      	movs	r3, #0
 8016f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016f1a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016f1e:	2200      	movs	r2, #0
 8016f20:	601a      	str	r2, [r3, #0]
 8016f22:	605a      	str	r2, [r3, #4]
 8016f24:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016f26:	230c      	movs	r3, #12
 8016f28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8016f2c:	2303      	movs	r3, #3
 8016f2e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016f30:	4b47      	ldr	r3, [pc, #284]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016f38:	2201      	movs	r2, #1
 8016f3a:	2100      	movs	r1, #0
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f000 fb8f 	bl	8017660 <RegionCommonCountChannels>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d10a      	bne.n	8016f5e <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016f48:	4b41      	ldr	r3, [pc, #260]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016f50:	4b3f      	ldr	r3, [pc, #252]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	f042 0203 	orr.w	r2, r2, #3
 8016f58:	b292      	uxth	r2, r2
 8016f5a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	7a5b      	ldrb	r3, [r3, #9]
 8016f62:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016f6e:	4b38      	ldr	r3, [pc, #224]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016f76:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016f78:	4b35      	ldr	r3, [pc, #212]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016f7e:	4b35      	ldr	r3, [pc, #212]	@ (8017054 <RegionAS923NextChannel+0x158>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8016f84:	2310      	movs	r3, #16
 8016f86:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016f88:	f107 0312 	add.w	r3, r7, #18
 8016f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	7a9b      	ldrb	r3, [r3, #10]
 8016f9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016fa8:	68fa      	ldr	r2, [r7, #12]
 8016faa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016fae:	320c      	adds	r2, #12
 8016fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fb4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	7d1b      	ldrb	r3, [r3, #20]
 8016fbc:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	8adb      	ldrh	r3, [r3, #22]
 8016fca:	4619      	mov	r1, r3
 8016fcc:	4610      	mov	r0, r2
 8016fce:	f7fe ffcb 	bl	8015f68 <GetTimeOnAir>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016fd6:	f107 0314 	add.w	r3, r7, #20
 8016fda:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016fdc:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8016fe0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016fe4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	9301      	str	r3, [sp, #4]
 8016fec:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8016ff0:	9300      	str	r3, [sp, #0]
 8016ff2:	460b      	mov	r3, r1
 8016ff4:	6839      	ldr	r1, [r7, #0]
 8016ff6:	f000 ff4a 	bl	8017e8e <RegionCommonIdentifyChannels>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017004:	2b00      	cmp	r3, #0
 8017006:	d10e      	bne.n	8017026 <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017008:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801700c:	3b01      	subs	r3, #1
 801700e:	4619      	mov	r1, r3
 8017010:	2000      	movs	r0, #0
 8017012:	f001 f889 	bl	8018128 <randr>
 8017016:	4603      	mov	r3, r0
 8017018:	3360      	adds	r3, #96	@ 0x60
 801701a:	443b      	add	r3, r7
 801701c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	701a      	strb	r2, [r3, #0]
 8017024:	e00e      	b.n	8017044 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017026:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801702a:	2b0c      	cmp	r3, #12
 801702c:	d10a      	bne.n	8017044 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801702e:	4b08      	ldr	r3, [pc, #32]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8017036:	4b06      	ldr	r3, [pc, #24]	@ (8017050 <RegionAS923NextChannel+0x154>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	f042 0203 	orr.w	r2, r2, #3
 801703e:	b292      	uxth	r2, r2
 8017040:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8017044:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8017048:	4618      	mov	r0, r3
 801704a:	3760      	adds	r7, #96	@ 0x60
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}
 8017050:	20001bc4 	.word	0x20001bc4
 8017054:	20001bc8 	.word	0x20001bc8

08017058 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8017060:	2300      	movs	r3, #0
 8017062:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017064:	2300      	movs	r3, #0
 8017066:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	791b      	ldrb	r3, [r3, #4]
 801706c:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801706e:	7b7b      	ldrb	r3, [r7, #13]
 8017070:	2b01      	cmp	r3, #1
 8017072:	d801      	bhi.n	8017078 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017074:	2306      	movs	r3, #6
 8017076:	e085      	b.n	8017184 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8017078:	7b7b      	ldrb	r3, [r7, #13]
 801707a:	2b0f      	cmp	r3, #15
 801707c:	d901      	bls.n	8017082 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801707e:	2303      	movs	r3, #3
 8017080:	e080      	b.n	8017184 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	7a1b      	ldrb	r3, [r3, #8]
 8017088:	f343 0303 	sbfx	r3, r3, #0, #4
 801708c:	b25b      	sxtb	r3, r3
 801708e:	2207      	movs	r2, #7
 8017090:	2100      	movs	r1, #0
 8017092:	4618      	mov	r0, r3
 8017094:	f000 fa93 	bl	80175be <RegionCommonValueInRange>
 8017098:	4603      	mov	r3, r0
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 801709e:	2301      	movs	r3, #1
 80170a0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	7a1b      	ldrb	r3, [r3, #8]
 80170a8:	f343 1303 	sbfx	r3, r3, #4, #4
 80170ac:	b25b      	sxtb	r3, r3
 80170ae:	2207      	movs	r2, #7
 80170b0:	2100      	movs	r1, #0
 80170b2:	4618      	mov	r0, r3
 80170b4:	f000 fa83 	bl	80175be <RegionCommonValueInRange>
 80170b8:	4603      	mov	r3, r0
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d101      	bne.n	80170c2 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 80170be:	2301      	movs	r3, #1
 80170c0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	7a1b      	ldrb	r3, [r3, #8]
 80170c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80170cc:	b25a      	sxtb	r2, r3
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	7a1b      	ldrb	r3, [r3, #8]
 80170d4:	f343 1303 	sbfx	r3, r3, #4, #4
 80170d8:	b25b      	sxtb	r3, r3
 80170da:	429a      	cmp	r2, r3
 80170dc:	dd01      	ble.n	80170e2 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 80170de:	2301      	movs	r3, #1
 80170e0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80170e2:	7bbb      	ldrb	r3, [r7, #14]
 80170e4:	f083 0301 	eor.w	r3, r3, #1
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d00d      	beq.n	801710a <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7fe ff11 	bl	8015f1c <VerifyRfFreq>
 80170fa:	4603      	mov	r3, r0
 80170fc:	f083 0301 	eor.w	r3, r3, #1
 8017100:	b2db      	uxtb	r3, r3
 8017102:	2b00      	cmp	r3, #0
 8017104:	d001      	beq.n	801710a <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8017106:	2301      	movs	r3, #1
 8017108:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801710a:	7bfb      	ldrb	r3, [r7, #15]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d004      	beq.n	801711a <RegionAS923ChannelAdd+0xc2>
 8017110:	7bbb      	ldrb	r3, [r7, #14]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d001      	beq.n	801711a <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017116:	2306      	movs	r3, #6
 8017118:	e034      	b.n	8017184 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 801711a:	7bfb      	ldrb	r3, [r7, #15]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d001      	beq.n	8017124 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017120:	2305      	movs	r3, #5
 8017122:	e02f      	b.n	8017184 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8017124:	7bbb      	ldrb	r3, [r7, #14]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d001      	beq.n	801712e <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801712a:	2304      	movs	r3, #4
 801712c:	e02a      	b.n	8017184 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801712e:	4b17      	ldr	r3, [pc, #92]	@ (801718c <RegionAS923ChannelAdd+0x134>)
 8017130:	6819      	ldr	r1, [r3, #0]
 8017132:	7b7a      	ldrb	r2, [r7, #13]
 8017134:	4613      	mov	r3, r2
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	4413      	add	r3, r2
 801713a:	009b      	lsls	r3, r3, #2
 801713c:	18c8      	adds	r0, r1, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	220c      	movs	r2, #12
 8017144:	4619      	mov	r1, r3
 8017146:	f001 f806 	bl	8018156 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801714a:	4b10      	ldr	r3, [pc, #64]	@ (801718c <RegionAS923ChannelAdd+0x134>)
 801714c:	6819      	ldr	r1, [r3, #0]
 801714e:	7b7a      	ldrb	r2, [r7, #13]
 8017150:	4613      	mov	r3, r2
 8017152:	005b      	lsls	r3, r3, #1
 8017154:	4413      	add	r3, r2
 8017156:	009b      	lsls	r3, r3, #2
 8017158:	440b      	add	r3, r1
 801715a:	3309      	adds	r3, #9
 801715c:	2200      	movs	r2, #0
 801715e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017160:	4b0a      	ldr	r3, [pc, #40]	@ (801718c <RegionAS923ChannelAdd+0x134>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8017168:	b21a      	sxth	r2, r3
 801716a:	7b7b      	ldrb	r3, [r7, #13]
 801716c:	2101      	movs	r1, #1
 801716e:	fa01 f303 	lsl.w	r3, r1, r3
 8017172:	b21b      	sxth	r3, r3
 8017174:	4313      	orrs	r3, r2
 8017176:	b21a      	sxth	r2, r3
 8017178:	4b04      	ldr	r3, [pc, #16]	@ (801718c <RegionAS923ChannelAdd+0x134>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	b292      	uxth	r2, r2
 801717e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8017182:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8017184:	4618      	mov	r0, r3
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	20001bc4 	.word	0x20001bc4

08017190 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b086      	sub	sp, #24
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801719e:	7dfb      	ldrb	r3, [r7, #23]
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d801      	bhi.n	80171a8 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80171a4:	2300      	movs	r3, #0
 80171a6:	e016      	b.n	80171d6 <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80171a8:	4b0d      	ldr	r3, [pc, #52]	@ (80171e0 <RegionAS923ChannelsRemove+0x50>)
 80171aa:	6819      	ldr	r1, [r3, #0]
 80171ac:	7dfa      	ldrb	r2, [r7, #23]
 80171ae:	4613      	mov	r3, r2
 80171b0:	005b      	lsls	r3, r3, #1
 80171b2:	4413      	add	r3, r2
 80171b4:	009b      	lsls	r3, r3, #2
 80171b6:	440b      	add	r3, r1
 80171b8:	461a      	mov	r2, r3
 80171ba:	2300      	movs	r3, #0
 80171bc:	6013      	str	r3, [r2, #0]
 80171be:	6053      	str	r3, [r2, #4]
 80171c0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80171c2:	4b07      	ldr	r3, [pc, #28]	@ (80171e0 <RegionAS923ChannelsRemove+0x50>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80171ca:	7df9      	ldrb	r1, [r7, #23]
 80171cc:	2210      	movs	r2, #16
 80171ce:	4618      	mov	r0, r3
 80171d0:	f000 fa12 	bl	80175f8 <RegionCommonChanDisable>
 80171d4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3718      	adds	r7, #24
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	20001bc4 	.word	0x20001bc4

080171e4 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80171e4:	b480      	push	{r7}
 80171e6:	b085      	sub	sp, #20
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	4603      	mov	r3, r0
 80171ec:	71fb      	strb	r3, [r7, #7]
 80171ee:	460b      	mov	r3, r1
 80171f0:	71bb      	strb	r3, [r7, #6]
 80171f2:	4613      	mov	r3, r2
 80171f4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 80171f6:	79fb      	ldrb	r3, [r7, #7]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10a      	bne.n	8017212 <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 80171fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017200:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017204:	490b      	ldr	r1, [pc, #44]	@ (8017234 <RegionAS923ApplyDrOffset+0x50>)
 8017206:	00d2      	lsls	r2, r2, #3
 8017208:	440a      	add	r2, r1
 801720a:	4413      	add	r3, r2
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	73fb      	strb	r3, [r7, #15]
 8017210:	e009      	b.n	8017226 <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8017212:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017216:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801721a:	4907      	ldr	r1, [pc, #28]	@ (8017238 <RegionAS923ApplyDrOffset+0x54>)
 801721c:	00d2      	lsls	r2, r2, #3
 801721e:	440a      	add	r2, r1
 8017220:	4413      	add	r3, r2
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8017226:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8017228:	4618      	mov	r0, r3
 801722a:	3714      	adds	r7, #20
 801722c:	46bd      	mov	sp, r7
 801722e:	bc80      	pop	{r7}
 8017230:	4770      	bx	lr
 8017232:	bf00      	nop
 8017234:	08020694 	.word	0x08020694
 8017238:	080206d4 	.word	0x080206d4

0801723c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801723c:	b480      	push	{r7}
 801723e:	b087      	sub	sp, #28
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	4608      	mov	r0, r1
 8017246:	4639      	mov	r1, r7
 8017248:	e881 000c 	stmia.w	r1, {r2, r3}
 801724c:	4603      	mov	r3, r0
 801724e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	881b      	ldrh	r3, [r3, #0]
 8017254:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017256:	7afb      	ldrb	r3, [r7, #11]
 8017258:	f083 0301 	eor.w	r3, r3, #1
 801725c:	b2db      	uxtb	r3, r3
 801725e:	2b00      	cmp	r3, #0
 8017260:	d01b      	beq.n	801729a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017262:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017266:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801726e:	d202      	bcs.n	8017276 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017270:	2364      	movs	r3, #100	@ 0x64
 8017272:	82bb      	strh	r3, [r7, #20]
 8017274:	e00b      	b.n	801728e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801727c:	4293      	cmp	r3, r2
 801727e:	d803      	bhi.n	8017288 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017284:	82bb      	strh	r3, [r7, #20]
 8017286:	e002      	b.n	801728e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017288:	f242 7310 	movw	r3, #10000	@ 0x2710
 801728c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801728e:	8aba      	ldrh	r2, [r7, #20]
 8017290:	8afb      	ldrh	r3, [r7, #22]
 8017292:	4293      	cmp	r3, r2
 8017294:	bf38      	it	cc
 8017296:	4613      	movcc	r3, r2
 8017298:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801729a:	8afb      	ldrh	r3, [r7, #22]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d101      	bne.n	80172a4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80172a0:	2301      	movs	r3, #1
 80172a2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80172a4:	8afb      	ldrh	r3, [r7, #22]
}
 80172a6:	4618      	mov	r0, r3
 80172a8:	371c      	adds	r7, #28
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bc80      	pop	{r7}
 80172ae:	4770      	bx	lr

080172b0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b08e      	sub	sp, #56	@ 0x38
 80172b4:	af02      	add	r7, sp, #8
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	4608      	mov	r0, r1
 80172ba:	4639      	mov	r1, r7
 80172bc:	e881 000c 	stmia.w	r1, {r2, r3}
 80172c0:	4603      	mov	r3, r0
 80172c2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	881b      	ldrh	r3, [r3, #0]
 80172c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80172ca:	4b4b      	ldr	r3, [pc, #300]	@ (80173f8 <SetMaxTimeCredits+0x148>)
 80172cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80172ce:	463b      	mov	r3, r7
 80172d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80172d4:	f004 fb76 	bl	801b9c4 <SysTimeToMs>
 80172d8:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80172da:	f107 0314 	add.w	r3, r7, #20
 80172de:	2200      	movs	r2, #0
 80172e0:	601a      	str	r2, [r3, #0]
 80172e2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80172e4:	7af9      	ldrb	r1, [r7, #11]
 80172e6:	463b      	mov	r3, r7
 80172e8:	cb0c      	ldmia	r3, {r2, r3}
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f7ff ffa6 	bl	801723c <GetDutyCycle>
 80172f0:	4603      	mov	r3, r0
 80172f2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80172f4:	7afb      	ldrb	r3, [r7, #11]
 80172f6:	f083 0301 	eor.w	r3, r3, #1
 80172fa:	b2db      	uxtb	r3, r3
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d062      	beq.n	80173c6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017300:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017302:	2b64      	cmp	r3, #100	@ 0x64
 8017304:	d105      	bne.n	8017312 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017306:	4b3c      	ldr	r3, [pc, #240]	@ (80173f8 <SetMaxTimeCredits+0x148>)
 8017308:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801730e:	609a      	str	r2, [r3, #8]
 8017310:	e00b      	b.n	801732a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017312:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017318:	d105      	bne.n	8017326 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801731a:	4b38      	ldr	r3, [pc, #224]	@ (80173fc <SetMaxTimeCredits+0x14c>)
 801731c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017322:	609a      	str	r2, [r3, #8]
 8017324:	e001      	b.n	801732a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017326:	4b36      	ldr	r3, [pc, #216]	@ (8017400 <SetMaxTimeCredits+0x150>)
 8017328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	689a      	ldr	r2, [r3, #8]
 801732e:	f107 031c 	add.w	r3, r7, #28
 8017332:	4611      	mov	r1, r2
 8017334:	4618      	mov	r0, r3
 8017336:	f004 fb6d 	bl	801ba14 <SysTimeFromMs>
 801733a:	f107 0014 	add.w	r0, r7, #20
 801733e:	6a3b      	ldr	r3, [r7, #32]
 8017340:	9300      	str	r3, [sp, #0]
 8017342:	69fb      	ldr	r3, [r7, #28]
 8017344:	463a      	mov	r2, r7
 8017346:	ca06      	ldmia	r2, {r1, r2}
 8017348:	f004 fa7d 	bl	801b846 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801734c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017350:	f083 0301 	eor.w	r3, r3, #1
 8017354:	b2db      	uxtb	r3, r3
 8017356:	2b00      	cmp	r3, #0
 8017358:	d006      	beq.n	8017368 <SetMaxTimeCredits+0xb8>
 801735a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801735e:	f083 0301 	eor.w	r3, r3, #1
 8017362:	b2db      	uxtb	r3, r3
 8017364:	2b00      	cmp	r3, #0
 8017366:	d108      	bne.n	801737a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801736c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801736e:	429a      	cmp	r2, r3
 8017370:	d103      	bne.n	801737a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017372:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017374:	4a23      	ldr	r2, [pc, #140]	@ (8017404 <SetMaxTimeCredits+0x154>)
 8017376:	4293      	cmp	r3, r2
 8017378:	d92f      	bls.n	80173da <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801737e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	4a21      	ldr	r2, [pc, #132]	@ (8017408 <SetMaxTimeCredits+0x158>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d928      	bls.n	80173da <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801738e:	3b30      	subs	r3, #48	@ 0x30
 8017390:	4a1e      	ldr	r2, [pc, #120]	@ (801740c <SetMaxTimeCredits+0x15c>)
 8017392:	fba2 2303 	umull	r2, r3, r2, r3
 8017396:	0c1b      	lsrs	r3, r3, #16
 8017398:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	4a1c      	ldr	r2, [pc, #112]	@ (8017410 <SetMaxTimeCredits+0x160>)
 801739e:	fb02 f303 	mul.w	r3, r2, r3
 80173a2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80173aa:	3330      	adds	r3, #48	@ 0x30
 80173ac:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80173b2:	f107 0314 	add.w	r3, r7, #20
 80173b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173ba:	f004 fb03 	bl	801b9c4 <SysTimeToMs>
 80173be:	4602      	mov	r2, r0
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	609a      	str	r2, [r3, #8]
 80173c4:	e009      	b.n	80173da <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80173c6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80173ca:	f083 0301 	eor.w	r3, r3, #1
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d002      	beq.n	80173da <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80173d8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d102      	bne.n	80173e8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80173e6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80173ec:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80173ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3730      	adds	r7, #48	@ 0x30
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	001b7740 	.word	0x001b7740
 80173fc:	0112a880 	.word	0x0112a880
 8017400:	02932e00 	.word	0x02932e00
 8017404:	0001517f 	.word	0x0001517f
 8017408:	0001ec2f 	.word	0x0001ec2f
 801740c:	c22e4507 	.word	0xc22e4507
 8017410:	00015180 	.word	0x00015180

08017414 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b086      	sub	sp, #24
 8017418:	af02      	add	r7, sp, #8
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	4608      	mov	r0, r1
 801741e:	4611      	mov	r1, r2
 8017420:	461a      	mov	r2, r3
 8017422:	4603      	mov	r3, r0
 8017424:	70fb      	strb	r3, [r7, #3]
 8017426:	460b      	mov	r3, r1
 8017428:	70bb      	strb	r3, [r7, #2]
 801742a:	4613      	mov	r3, r2
 801742c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801742e:	78f9      	ldrb	r1, [r7, #3]
 8017430:	787b      	ldrb	r3, [r7, #1]
 8017432:	9301      	str	r3, [sp, #4]
 8017434:	78bb      	ldrb	r3, [r7, #2]
 8017436:	9300      	str	r3, [sp, #0]
 8017438:	f107 0318 	add.w	r3, r7, #24
 801743c:	cb0c      	ldmia	r3, {r2, r3}
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7ff ff36 	bl	80172b0 <SetMaxTimeCredits>
 8017444:	4603      	mov	r3, r0
 8017446:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017448:	78fb      	ldrb	r3, [r7, #3]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00a      	beq.n	8017464 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	4618      	mov	r0, r3
 8017454:	f005 f8f0 	bl	801c638 <UTIL_TIMER_GetElapsedTime>
 8017458:	4602      	mov	r2, r0
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	441a      	add	r2, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	68da      	ldr	r2, [r3, #12]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	691b      	ldr	r3, [r3, #16]
 801746c:	429a      	cmp	r2, r3
 801746e:	d903      	bls.n	8017478 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	691a      	ldr	r2, [r3, #16]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6a3a      	ldr	r2, [r7, #32]
 801747c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801747e:	89fb      	ldrh	r3, [r7, #14]
}
 8017480:	4618      	mov	r0, r3
 8017482:	3710      	adds	r7, #16
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017488:	b480      	push	{r7}
 801748a:	b085      	sub	sp, #20
 801748c:	af00      	add	r7, sp, #0
 801748e:	4603      	mov	r3, r0
 8017490:	460a      	mov	r2, r1
 8017492:	80fb      	strh	r3, [r7, #6]
 8017494:	4613      	mov	r3, r2
 8017496:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017498:	2300      	movs	r3, #0
 801749a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801749c:	2300      	movs	r3, #0
 801749e:	73bb      	strb	r3, [r7, #14]
 80174a0:	e011      	b.n	80174c6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80174a2:	88fa      	ldrh	r2, [r7, #6]
 80174a4:	7bbb      	ldrb	r3, [r7, #14]
 80174a6:	2101      	movs	r1, #1
 80174a8:	fa01 f303 	lsl.w	r3, r1, r3
 80174ac:	401a      	ands	r2, r3
 80174ae:	7bbb      	ldrb	r3, [r7, #14]
 80174b0:	2101      	movs	r1, #1
 80174b2:	fa01 f303 	lsl.w	r3, r1, r3
 80174b6:	429a      	cmp	r2, r3
 80174b8:	d102      	bne.n	80174c0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80174ba:	7bfb      	ldrb	r3, [r7, #15]
 80174bc:	3301      	adds	r3, #1
 80174be:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80174c0:	7bbb      	ldrb	r3, [r7, #14]
 80174c2:	3301      	adds	r3, #1
 80174c4:	73bb      	strb	r3, [r7, #14]
 80174c6:	7bba      	ldrb	r2, [r7, #14]
 80174c8:	797b      	ldrb	r3, [r7, #5]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d3e9      	bcc.n	80174a2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80174ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3714      	adds	r7, #20
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bc80      	pop	{r7}
 80174d8:	4770      	bx	lr

080174da <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80174da:	b580      	push	{r7, lr}
 80174dc:	b084      	sub	sp, #16
 80174de:	af00      	add	r7, sp, #0
 80174e0:	6039      	str	r1, [r7, #0]
 80174e2:	4611      	mov	r1, r2
 80174e4:	461a      	mov	r2, r3
 80174e6:	4603      	mov	r3, r0
 80174e8:	71fb      	strb	r3, [r7, #7]
 80174ea:	460b      	mov	r3, r1
 80174ec:	71bb      	strb	r3, [r7, #6]
 80174ee:	4613      	mov	r3, r2
 80174f0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80174f2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80174f6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80174fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80174fe:	4618      	mov	r0, r3
 8017500:	f000 f85d 	bl	80175be <RegionCommonValueInRange>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	d101      	bne.n	801750e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801750a:	2300      	movs	r3, #0
 801750c:	e053      	b.n	80175b6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801750e:	2300      	movs	r3, #0
 8017510:	73fb      	strb	r3, [r7, #15]
 8017512:	2300      	movs	r3, #0
 8017514:	73bb      	strb	r3, [r7, #14]
 8017516:	e049      	b.n	80175ac <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017518:	2300      	movs	r3, #0
 801751a:	737b      	strb	r3, [r7, #13]
 801751c:	e03d      	b.n	801759a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801751e:	7bbb      	ldrb	r3, [r7, #14]
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	683a      	ldr	r2, [r7, #0]
 8017524:	4413      	add	r3, r2
 8017526:	881b      	ldrh	r3, [r3, #0]
 8017528:	461a      	mov	r2, r3
 801752a:	7b7b      	ldrb	r3, [r7, #13]
 801752c:	fa42 f303 	asr.w	r3, r2, r3
 8017530:	f003 0301 	and.w	r3, r3, #1
 8017534:	2b00      	cmp	r3, #0
 8017536:	d02d      	beq.n	8017594 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017538:	7bfa      	ldrb	r2, [r7, #15]
 801753a:	7b7b      	ldrb	r3, [r7, #13]
 801753c:	4413      	add	r3, r2
 801753e:	461a      	mov	r2, r3
 8017540:	4613      	mov	r3, r2
 8017542:	005b      	lsls	r3, r3, #1
 8017544:	4413      	add	r3, r2
 8017546:	009b      	lsls	r3, r3, #2
 8017548:	461a      	mov	r2, r3
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	4413      	add	r3, r2
 801754e:	7a1b      	ldrb	r3, [r3, #8]
 8017550:	f343 0303 	sbfx	r3, r3, #0, #4
 8017554:	b25b      	sxtb	r3, r3
 8017556:	f003 030f 	and.w	r3, r3, #15
 801755a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801755c:	7bfa      	ldrb	r2, [r7, #15]
 801755e:	7b7b      	ldrb	r3, [r7, #13]
 8017560:	4413      	add	r3, r2
 8017562:	461a      	mov	r2, r3
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	461a      	mov	r2, r3
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	4413      	add	r3, r2
 8017572:	7a1b      	ldrb	r3, [r3, #8]
 8017574:	f343 1303 	sbfx	r3, r3, #4, #4
 8017578:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801757a:	f003 030f 	and.w	r3, r3, #15
 801757e:	b25a      	sxtb	r2, r3
 8017580:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017584:	4618      	mov	r0, r3
 8017586:	f000 f81a 	bl	80175be <RegionCommonValueInRange>
 801758a:	4603      	mov	r3, r0
 801758c:	2b01      	cmp	r3, #1
 801758e:	d101      	bne.n	8017594 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017590:	2301      	movs	r3, #1
 8017592:	e010      	b.n	80175b6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017594:	7b7b      	ldrb	r3, [r7, #13]
 8017596:	3301      	adds	r3, #1
 8017598:	737b      	strb	r3, [r7, #13]
 801759a:	7b7b      	ldrb	r3, [r7, #13]
 801759c:	2b0f      	cmp	r3, #15
 801759e:	d9be      	bls.n	801751e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80175a0:	7bfb      	ldrb	r3, [r7, #15]
 80175a2:	3310      	adds	r3, #16
 80175a4:	73fb      	strb	r3, [r7, #15]
 80175a6:	7bbb      	ldrb	r3, [r7, #14]
 80175a8:	3301      	adds	r3, #1
 80175aa:	73bb      	strb	r3, [r7, #14]
 80175ac:	7bfa      	ldrb	r2, [r7, #15]
 80175ae:	79fb      	ldrb	r3, [r7, #7]
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d3b1      	bcc.n	8017518 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80175b4:	2300      	movs	r3, #0
}
 80175b6:	4618      	mov	r0, r3
 80175b8:	3710      	adds	r7, #16
 80175ba:	46bd      	mov	sp, r7
 80175bc:	bd80      	pop	{r7, pc}

080175be <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80175be:	b480      	push	{r7}
 80175c0:	b083      	sub	sp, #12
 80175c2:	af00      	add	r7, sp, #0
 80175c4:	4603      	mov	r3, r0
 80175c6:	71fb      	strb	r3, [r7, #7]
 80175c8:	460b      	mov	r3, r1
 80175ca:	71bb      	strb	r3, [r7, #6]
 80175cc:	4613      	mov	r3, r2
 80175ce:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80175d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80175d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80175d8:	429a      	cmp	r2, r3
 80175da:	db07      	blt.n	80175ec <RegionCommonValueInRange+0x2e>
 80175dc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80175e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	dc01      	bgt.n	80175ec <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80175e8:	2301      	movs	r3, #1
 80175ea:	e000      	b.n	80175ee <RegionCommonValueInRange+0x30>
    }
    return 0;
 80175ec:	2300      	movs	r3, #0
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	370c      	adds	r7, #12
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bc80      	pop	{r7}
 80175f6:	4770      	bx	lr

080175f8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80175f8:	b480      	push	{r7}
 80175fa:	b085      	sub	sp, #20
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	460b      	mov	r3, r1
 8017602:	70fb      	strb	r3, [r7, #3]
 8017604:	4613      	mov	r3, r2
 8017606:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017608:	78fb      	ldrb	r3, [r7, #3]
 801760a:	091b      	lsrs	r3, r3, #4
 801760c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801760e:	78bb      	ldrb	r3, [r7, #2]
 8017610:	091b      	lsrs	r3, r3, #4
 8017612:	b2db      	uxtb	r3, r3
 8017614:	7bfa      	ldrb	r2, [r7, #15]
 8017616:	429a      	cmp	r2, r3
 8017618:	d803      	bhi.n	8017622 <RegionCommonChanDisable+0x2a>
 801761a:	78fa      	ldrb	r2, [r7, #3]
 801761c:	78bb      	ldrb	r3, [r7, #2]
 801761e:	429a      	cmp	r2, r3
 8017620:	d301      	bcc.n	8017626 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017622:	2300      	movs	r3, #0
 8017624:	e017      	b.n	8017656 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017626:	7bfb      	ldrb	r3, [r7, #15]
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	4413      	add	r3, r2
 801762e:	881b      	ldrh	r3, [r3, #0]
 8017630:	b21a      	sxth	r2, r3
 8017632:	78fb      	ldrb	r3, [r7, #3]
 8017634:	f003 030f 	and.w	r3, r3, #15
 8017638:	2101      	movs	r1, #1
 801763a:	fa01 f303 	lsl.w	r3, r1, r3
 801763e:	b21b      	sxth	r3, r3
 8017640:	43db      	mvns	r3, r3
 8017642:	b21b      	sxth	r3, r3
 8017644:	4013      	ands	r3, r2
 8017646:	b219      	sxth	r1, r3
 8017648:	7bfb      	ldrb	r3, [r7, #15]
 801764a:	005b      	lsls	r3, r3, #1
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	4413      	add	r3, r2
 8017650:	b28a      	uxth	r2, r1
 8017652:	801a      	strh	r2, [r3, #0]

    return true;
 8017654:	2301      	movs	r3, #1
}
 8017656:	4618      	mov	r0, r3
 8017658:	3714      	adds	r7, #20
 801765a:	46bd      	mov	sp, r7
 801765c:	bc80      	pop	{r7}
 801765e:	4770      	bx	lr

08017660 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
 8017668:	460b      	mov	r3, r1
 801766a:	70fb      	strb	r3, [r7, #3]
 801766c:	4613      	mov	r3, r2
 801766e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017670:	2300      	movs	r3, #0
 8017672:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d101      	bne.n	801767e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801767a:	2300      	movs	r3, #0
 801767c:	e018      	b.n	80176b0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801767e:	78fb      	ldrb	r3, [r7, #3]
 8017680:	73bb      	strb	r3, [r7, #14]
 8017682:	e010      	b.n	80176a6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017684:	7bbb      	ldrb	r3, [r7, #14]
 8017686:	005b      	lsls	r3, r3, #1
 8017688:	687a      	ldr	r2, [r7, #4]
 801768a:	4413      	add	r3, r2
 801768c:	881b      	ldrh	r3, [r3, #0]
 801768e:	2110      	movs	r1, #16
 8017690:	4618      	mov	r0, r3
 8017692:	f7ff fef9 	bl	8017488 <CountChannels>
 8017696:	4603      	mov	r3, r0
 8017698:	461a      	mov	r2, r3
 801769a:	7bfb      	ldrb	r3, [r7, #15]
 801769c:	4413      	add	r3, r2
 801769e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80176a0:	7bbb      	ldrb	r3, [r7, #14]
 80176a2:	3301      	adds	r3, #1
 80176a4:	73bb      	strb	r3, [r7, #14]
 80176a6:	7bba      	ldrb	r2, [r7, #14]
 80176a8:	78bb      	ldrb	r3, [r7, #2]
 80176aa:	429a      	cmp	r2, r3
 80176ac:	d3ea      	bcc.n	8017684 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80176ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	3710      	adds	r7, #16
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bd80      	pop	{r7, pc}

080176b8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80176b8:	b480      	push	{r7}
 80176ba:	b087      	sub	sp, #28
 80176bc:	af00      	add	r7, sp, #0
 80176be:	60f8      	str	r0, [r7, #12]
 80176c0:	60b9      	str	r1, [r7, #8]
 80176c2:	4613      	mov	r3, r2
 80176c4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d016      	beq.n	80176fa <RegionCommonChanMaskCopy+0x42>
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d013      	beq.n	80176fa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80176d2:	2300      	movs	r3, #0
 80176d4:	75fb      	strb	r3, [r7, #23]
 80176d6:	e00c      	b.n	80176f2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80176d8:	7dfb      	ldrb	r3, [r7, #23]
 80176da:	005b      	lsls	r3, r3, #1
 80176dc:	68ba      	ldr	r2, [r7, #8]
 80176de:	441a      	add	r2, r3
 80176e0:	7dfb      	ldrb	r3, [r7, #23]
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	68f9      	ldr	r1, [r7, #12]
 80176e6:	440b      	add	r3, r1
 80176e8:	8812      	ldrh	r2, [r2, #0]
 80176ea:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80176ec:	7dfb      	ldrb	r3, [r7, #23]
 80176ee:	3301      	adds	r3, #1
 80176f0:	75fb      	strb	r3, [r7, #23]
 80176f2:	7dfa      	ldrb	r2, [r7, #23]
 80176f4:	79fb      	ldrb	r3, [r7, #7]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d3ee      	bcc.n	80176d8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80176fa:	bf00      	nop
 80176fc:	371c      	adds	r7, #28
 80176fe:	46bd      	mov	sp, r7
 8017700:	bc80      	pop	{r7}
 8017702:	4770      	bx	lr

08017704 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017704:	b082      	sub	sp, #8
 8017706:	b580      	push	{r7, lr}
 8017708:	b086      	sub	sp, #24
 801770a:	af00      	add	r7, sp, #0
 801770c:	60f8      	str	r0, [r7, #12]
 801770e:	60b9      	str	r1, [r7, #8]
 8017710:	627b      	str	r3, [r7, #36]	@ 0x24
 8017712:	4613      	mov	r3, r2
 8017714:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017716:	79f9      	ldrb	r1, [r7, #7]
 8017718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801771c:	cb0c      	ldmia	r3, {r2, r3}
 801771e:	68f8      	ldr	r0, [r7, #12]
 8017720:	f7ff fd8c 	bl	801723c <GetDutyCycle>
 8017724:	4603      	mov	r3, r0
 8017726:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	68da      	ldr	r2, [r3, #12]
 801772c:	8afb      	ldrh	r3, [r7, #22]
 801772e:	68b9      	ldr	r1, [r7, #8]
 8017730:	fb01 f303 	mul.w	r3, r1, r3
 8017734:	429a      	cmp	r2, r3
 8017736:	d909      	bls.n	801774c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	68da      	ldr	r2, [r3, #12]
 801773c:	8afb      	ldrh	r3, [r7, #22]
 801773e:	68b9      	ldr	r1, [r7, #8]
 8017740:	fb01 f303 	mul.w	r3, r1, r3
 8017744:	1ad2      	subs	r2, r2, r3
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801774a:	e002      	b.n	8017752 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2200      	movs	r2, #0
 8017750:	60da      	str	r2, [r3, #12]
}
 8017752:	bf00      	nop
 8017754:	3718      	adds	r7, #24
 8017756:	46bd      	mov	sp, r7
 8017758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801775c:	b002      	add	sp, #8
 801775e:	4770      	bx	lr

08017760 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017762:	b08f      	sub	sp, #60	@ 0x3c
 8017764:	af04      	add	r7, sp, #16
 8017766:	6039      	str	r1, [r7, #0]
 8017768:	4611      	mov	r1, r2
 801776a:	461a      	mov	r2, r3
 801776c:	4603      	mov	r3, r0
 801776e:	71fb      	strb	r3, [r7, #7]
 8017770:	460b      	mov	r3, r1
 8017772:	71bb      	strb	r3, [r7, #6]
 8017774:	4613      	mov	r3, r2
 8017776:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017778:	f04f 33ff 	mov.w	r3, #4294967295
 801777c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801777e:	f004 ff49 	bl	801c614 <UTIL_TIMER_GetCurrentTime>
 8017782:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017784:	2300      	movs	r3, #0
 8017786:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017788:	2301      	movs	r3, #1
 801778a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801778c:	2300      	movs	r3, #0
 801778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017792:	2300      	movs	r3, #0
 8017794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017798:	e0ba      	b.n	8017910 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801779a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801779e:	4613      	mov	r3, r2
 80177a0:	005b      	lsls	r3, r3, #1
 80177a2:	4413      	add	r3, r2
 80177a4:	00db      	lsls	r3, r3, #3
 80177a6:	461a      	mov	r2, r3
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	189c      	adds	r4, r3, r2
 80177ac:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80177b0:	797a      	ldrb	r2, [r7, #5]
 80177b2:	79fd      	ldrb	r5, [r7, #7]
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	9302      	str	r3, [sp, #8]
 80177b8:	46ec      	mov	ip, sp
 80177ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80177be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80177c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80177c6:	4633      	mov	r3, r6
 80177c8:	4629      	mov	r1, r5
 80177ca:	4620      	mov	r0, r4
 80177cc:	f7ff fe22 	bl	8017414 <UpdateTimeCredits>
 80177d0:	4603      	mov	r3, r0
 80177d2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80177d4:	8afa      	ldrh	r2, [r7, #22]
 80177d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177d8:	fb02 f303 	mul.w	r3, r2, r3
 80177dc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80177de:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80177e2:	4613      	mov	r3, r2
 80177e4:	005b      	lsls	r3, r3, #1
 80177e6:	4413      	add	r3, r2
 80177e8:	00db      	lsls	r3, r3, #3
 80177ea:	461a      	mov	r2, r3
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	4413      	add	r3, r2
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	69ba      	ldr	r2, [r7, #24]
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d308      	bcc.n	801780a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80177f8:	797b      	ldrb	r3, [r7, #5]
 80177fa:	f083 0301 	eor.w	r3, r3, #1
 80177fe:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017800:	2b00      	cmp	r3, #0
 8017802:	d013      	beq.n	801782c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017804:	79fb      	ldrb	r3, [r7, #7]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d010      	beq.n	801782c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801780a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801780e:	4613      	mov	r3, r2
 8017810:	005b      	lsls	r3, r3, #1
 8017812:	4413      	add	r3, r2
 8017814:	00db      	lsls	r3, r3, #3
 8017816:	461a      	mov	r2, r3
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	4413      	add	r3, r2
 801781c:	2201      	movs	r2, #1
 801781e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017820:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017824:	3301      	adds	r3, #1
 8017826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801782a:	e06c      	b.n	8017906 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801782c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017830:	4613      	mov	r3, r2
 8017832:	005b      	lsls	r3, r3, #1
 8017834:	4413      	add	r3, r2
 8017836:	00db      	lsls	r3, r3, #3
 8017838:	461a      	mov	r2, r3
 801783a:	683b      	ldr	r3, [r7, #0]
 801783c:	4413      	add	r3, r2
 801783e:	2200      	movs	r2, #0
 8017840:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017842:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017846:	4613      	mov	r3, r2
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	4413      	add	r3, r2
 801784c:	00db      	lsls	r3, r3, #3
 801784e:	461a      	mov	r2, r3
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	4413      	add	r3, r2
 8017854:	691b      	ldr	r3, [r3, #16]
 8017856:	69ba      	ldr	r2, [r7, #24]
 8017858:	429a      	cmp	r2, r3
 801785a:	d215      	bcs.n	8017888 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801785c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017860:	4613      	mov	r3, r2
 8017862:	005b      	lsls	r3, r3, #1
 8017864:	4413      	add	r3, r2
 8017866:	00db      	lsls	r3, r3, #3
 8017868:	461a      	mov	r2, r3
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	4413      	add	r3, r2
 801786e:	68db      	ldr	r3, [r3, #12]
 8017870:	69ba      	ldr	r2, [r7, #24]
 8017872:	1ad3      	subs	r3, r2, r3
 8017874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017876:	4293      	cmp	r3, r2
 8017878:	bf28      	it	cs
 801787a:	4613      	movcs	r3, r2
 801787c:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801787e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017882:	3301      	adds	r3, #1
 8017884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017888:	79fb      	ldrb	r3, [r7, #7]
 801788a:	f083 0301 	eor.w	r3, r3, #1
 801788e:	b2db      	uxtb	r3, r3
 8017890:	2b00      	cmp	r3, #0
 8017892:	d038      	beq.n	8017906 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017894:	2300      	movs	r3, #0
 8017896:	60fb      	str	r3, [r7, #12]
 8017898:	2300      	movs	r3, #0
 801789a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801789c:	8afb      	ldrh	r3, [r7, #22]
 801789e:	2b64      	cmp	r3, #100	@ 0x64
 80178a0:	d103      	bne.n	80178aa <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80178a2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80178a6:	60fb      	str	r3, [r7, #12]
 80178a8:	e009      	b.n	80178be <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80178aa:	8afb      	ldrh	r3, [r7, #22]
 80178ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80178b0:	d103      	bne.n	80178ba <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80178b2:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80178b6:	60fb      	str	r3, [r7, #12]
 80178b8:	e001      	b.n	80178be <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80178ba:	4b1e      	ldr	r3, [pc, #120]	@ (8017934 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80178bc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80178be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80178c0:	4a1c      	ldr	r2, [pc, #112]	@ (8017934 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d90e      	bls.n	80178e4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80178c6:	68fa      	ldr	r2, [r7, #12]
 80178c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80178ca:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80178ce:	3b30      	subs	r3, #48	@ 0x30
 80178d0:	4919      	ldr	r1, [pc, #100]	@ (8017938 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80178d2:	fba1 1303 	umull	r1, r3, r1, r3
 80178d6:	0c1b      	lsrs	r3, r3, #16
 80178d8:	3301      	adds	r3, #1
 80178da:	4918      	ldr	r1, [pc, #96]	@ (801793c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80178dc:	fb01 f303 	mul.w	r3, r1, r3
 80178e0:	4413      	add	r3, r2
 80178e2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80178e4:	f107 000c 	add.w	r0, r7, #12
 80178e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80178ea:	9300      	str	r3, [sp, #0]
 80178ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80178ee:	f107 020c 	add.w	r2, r7, #12
 80178f2:	ca06      	ldmia	r2, {r1, r2}
 80178f4:	f003 ffa7 	bl	801b846 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80178f8:	f107 030c 	add.w	r3, r7, #12
 80178fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017900:	f004 f860 	bl	801b9c4 <SysTimeToMs>
 8017904:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017906:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801790a:	3301      	adds	r3, #1
 801790c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017910:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017914:	79bb      	ldrb	r3, [r7, #6]
 8017916:	429a      	cmp	r2, r3
 8017918:	f4ff af3f 	bcc.w	801779a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801791c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017920:	2b00      	cmp	r3, #0
 8017922:	d102      	bne.n	801792a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017924:	f04f 33ff 	mov.w	r3, #4294967295
 8017928:	e000      	b.n	801792c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801792c:	4618      	mov	r0, r3
 801792e:	372c      	adds	r7, #44	@ 0x2c
 8017930:	46bd      	mov	sp, r7
 8017932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017934:	0001ec30 	.word	0x0001ec30
 8017938:	c22e4507 	.word	0xc22e4507
 801793c:	00015180 	.word	0x00015180

08017940 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017940:	b480      	push	{r7}
 8017942:	b085      	sub	sp, #20
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801794a:	2300      	movs	r3, #0
 801794c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	2b03      	cmp	r3, #3
 8017954:	d13f      	bne.n	80179d6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	3301      	adds	r3, #1
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	b25a      	sxtb	r2, r3
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017968:	f003 030f 	and.w	r3, r3, #15
 801796c:	b25a      	sxtb	r2, r3
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017978:	b2db      	uxtb	r3, r3
 801797a:	091b      	lsrs	r3, r3, #4
 801797c:	b2db      	uxtb	r3, r3
 801797e:	b25a      	sxtb	r2, r3
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	3302      	adds	r3, #2
 8017988:	781b      	ldrb	r3, [r3, #0]
 801798a:	461a      	mov	r2, r3
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	889b      	ldrh	r3, [r3, #4]
 8017994:	b21a      	sxth	r2, r3
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	3303      	adds	r3, #3
 801799a:	781b      	ldrb	r3, [r3, #0]
 801799c:	021b      	lsls	r3, r3, #8
 801799e:	b21b      	sxth	r3, r3
 80179a0:	4313      	orrs	r3, r2
 80179a2:	b21b      	sxth	r3, r3
 80179a4:	b29a      	uxth	r2, r3
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	791a      	ldrb	r2, [r3, #4]
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	781b      	ldrb	r3, [r3, #0]
 80179b6:	091b      	lsrs	r3, r3, #4
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	f003 0307 	and.w	r3, r3, #7
 80179be:	b2da      	uxtb	r2, r3
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	781b      	ldrb	r3, [r3, #0]
 80179c8:	f003 030f 	and.w	r3, r3, #15
 80179cc:	b2da      	uxtb	r2, r3
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80179d2:	2305      	movs	r3, #5
 80179d4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80179d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80179d8:	4618      	mov	r0, r3
 80179da:	3714      	adds	r7, #20
 80179dc:	46bd      	mov	sp, r7
 80179de:	bc80      	pop	{r7}
 80179e0:	4770      	bx	lr

080179e2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80179e2:	b5b0      	push	{r4, r5, r7, lr}
 80179e4:	b088      	sub	sp, #32
 80179e6:	af02      	add	r7, sp, #8
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	60b9      	str	r1, [r7, #8]
 80179ec:	607a      	str	r2, [r7, #4]
 80179ee:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	791b      	ldrb	r3, [r3, #4]
 80179f4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	799b      	ldrb	r3, [r3, #6]
 80179fa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	79db      	ldrb	r3, [r3, #7]
 8017a00:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	7a1b      	ldrb	r3, [r3, #8]
 8017a06:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	795b      	ldrb	r3, [r3, #5]
 8017a0c:	f083 0301 	eor.w	r3, r3, #1
 8017a10:	b2db      	uxtb	r3, r3
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d008      	beq.n	8017a28 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	7adb      	ldrb	r3, [r3, #11]
 8017a1a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	7a5b      	ldrb	r3, [r3, #9]
 8017a20:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	7a9b      	ldrb	r3, [r3, #10]
 8017a26:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017a28:	7dfb      	ldrb	r3, [r7, #23]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d04a      	beq.n	8017ac4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017a2e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017a32:	2b0f      	cmp	r3, #15
 8017a34:	d103      	bne.n	8017a3e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	7a5b      	ldrb	r3, [r3, #9]
 8017a3a:	75bb      	strb	r3, [r7, #22]
 8017a3c:	e01d      	b.n	8017a7a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	7b18      	ldrb	r0, [r3, #12]
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	6919      	ldr	r1, [r3, #16]
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017a52:	68fa      	ldr	r2, [r7, #12]
 8017a54:	6992      	ldr	r2, [r2, #24]
 8017a56:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017a5a:	9201      	str	r2, [sp, #4]
 8017a5c:	9300      	str	r3, [sp, #0]
 8017a5e:	462b      	mov	r3, r5
 8017a60:	4622      	mov	r2, r4
 8017a62:	f7ff fd3a 	bl	80174da <RegionCommonChanVerifyDr>
 8017a66:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017a68:	f083 0301 	eor.w	r3, r3, #1
 8017a6c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d003      	beq.n	8017a7a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017a72:	7dfb      	ldrb	r3, [r7, #23]
 8017a74:	f023 0302 	bic.w	r3, r3, #2
 8017a78:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017a7a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017a7e:	2b0f      	cmp	r3, #15
 8017a80:	d103      	bne.n	8017a8a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	7a9b      	ldrb	r3, [r3, #10]
 8017a86:	757b      	strb	r3, [r7, #21]
 8017a88:	e01c      	b.n	8017ac4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017a96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7ff fd8f 	bl	80175be <RegionCommonValueInRange>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d10e      	bne.n	8017ac4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017aac:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	da03      	bge.n	8017abc <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	7f5b      	ldrb	r3, [r3, #29]
 8017ab8:	757b      	strb	r3, [r7, #21]
 8017aba:	e003      	b.n	8017ac4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017abc:	7dfb      	ldrb	r3, [r7, #23]
 8017abe:	f023 0304 	bic.w	r3, r3, #4
 8017ac2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017ac4:	7dfb      	ldrb	r3, [r7, #23]
 8017ac6:	2b07      	cmp	r3, #7
 8017ac8:	d105      	bne.n	8017ad6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017aca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d101      	bne.n	8017ad6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	7dba      	ldrb	r2, [r7, #22]
 8017ada:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	7d7a      	ldrb	r2, [r7, #21]
 8017ae0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017ae2:	7d3a      	ldrb	r2, [r7, #20]
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	701a      	strb	r2, [r3, #0]

    return status;
 8017ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	3718      	adds	r7, #24
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017af4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	4603      	mov	r3, r0
 8017afc:	6039      	str	r1, [r7, #0]
 8017afe:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017b00:	79fb      	ldrb	r3, [r7, #7]
 8017b02:	4a06      	ldr	r2, [pc, #24]	@ (8017b1c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017b04:	fa02 f303 	lsl.w	r3, r2, r3
 8017b08:	461a      	mov	r2, r3
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	370c      	adds	r7, #12
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bc80      	pop	{r7}
 8017b18:	4770      	bx	lr
 8017b1a:	bf00      	nop
 8017b1c:	000f4240 	.word	0x000f4240

08017b20 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	4603      	mov	r3, r0
 8017b28:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017b2a:	79fb      	ldrb	r3, [r7, #7]
 8017b2c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017b30:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	370c      	adds	r7, #12
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bc80      	pop	{r7}
 8017b3c:	4770      	bx	lr
	...

08017b40 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017b40:	b480      	push	{r7}
 8017b42:	b085      	sub	sp, #20
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	60f8      	str	r0, [r7, #12]
 8017b48:	607a      	str	r2, [r7, #4]
 8017b4a:	603b      	str	r3, [r7, #0]
 8017b4c:	460b      	mov	r3, r1
 8017b4e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017b50:	7afa      	ldrb	r2, [r7, #11]
 8017b52:	7afb      	ldrb	r3, [r7, #11]
 8017b54:	3b04      	subs	r3, #4
 8017b56:	4619      	mov	r1, r3
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	fb03 f101 	mul.w	r1, r3, r1
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017b64:	fb00 f303 	mul.w	r3, r0, r3
 8017b68:	440b      	add	r3, r1
 8017b6a:	005b      	lsls	r3, r3, #1
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d013      	beq.n	8017b98 <RegionCommonComputeRxWindowParameters+0x58>
 8017b70:	7afb      	ldrb	r3, [r7, #11]
 8017b72:	3b04      	subs	r3, #4
 8017b74:	4619      	mov	r1, r3
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	fb03 f101 	mul.w	r1, r3, r1
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017b82:	fb00 f303 	mul.w	r3, r0, r3
 8017b86:	440b      	add	r3, r1
 8017b88:	0059      	lsls	r1, r3, #1
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	440b      	add	r3, r1
 8017b8e:	1e59      	subs	r1, r3, #1
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8017b96:	e00f      	b.n	8017bb8 <RegionCommonComputeRxWindowParameters+0x78>
 8017b98:	7afb      	ldrb	r3, [r7, #11]
 8017b9a:	3b04      	subs	r3, #4
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	fb03 f101 	mul.w	r1, r3, r1
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017baa:	fb00 f303 	mul.w	r3, r0, r3
 8017bae:	440b      	add	r3, r1
 8017bb0:	0059      	lsls	r1, r3, #1
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	bf38      	it	cc
 8017bbc:	461a      	movcc	r2, r3
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	009b      	lsls	r3, r3, #2
 8017bc6:	4619      	mov	r1, r3
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	68fa      	ldr	r2, [r7, #12]
 8017bce:	fb02 f303 	mul.w	r3, r2, r3
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d007      	beq.n	8017be6 <RegionCommonComputeRxWindowParameters+0xa6>
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	68fa      	ldr	r2, [r7, #12]
 8017bdc:	fb02 f303 	mul.w	r3, r2, r3
 8017be0:	3301      	adds	r3, #1
 8017be2:	085b      	lsrs	r3, r3, #1
 8017be4:	e005      	b.n	8017bf2 <RegionCommonComputeRxWindowParameters+0xb2>
 8017be6:	69bb      	ldr	r3, [r7, #24]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	68fa      	ldr	r2, [r7, #12]
 8017bec:	fb02 f303 	mul.w	r3, r2, r3
 8017bf0:	085b      	lsrs	r3, r3, #1
 8017bf2:	1acb      	subs	r3, r1, r3
 8017bf4:	683a      	ldr	r2, [r7, #0]
 8017bf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017bfa:	fb01 f202 	mul.w	r2, r1, r2
 8017bfe:	1a9b      	subs	r3, r3, r2
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	dd27      	ble.n	8017c54 <RegionCommonComputeRxWindowParameters+0x114>
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	009b      	lsls	r3, r3, #2
 8017c08:	4619      	mov	r1, r3
 8017c0a:	69bb      	ldr	r3, [r7, #24]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	fb02 f303 	mul.w	r3, r2, r3
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d007      	beq.n	8017c28 <RegionCommonComputeRxWindowParameters+0xe8>
 8017c18:	69bb      	ldr	r3, [r7, #24]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	68fa      	ldr	r2, [r7, #12]
 8017c1e:	fb02 f303 	mul.w	r3, r2, r3
 8017c22:	3301      	adds	r3, #1
 8017c24:	085b      	lsrs	r3, r3, #1
 8017c26:	e005      	b.n	8017c34 <RegionCommonComputeRxWindowParameters+0xf4>
 8017c28:	69bb      	ldr	r3, [r7, #24]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	68fa      	ldr	r2, [r7, #12]
 8017c2e:	fb02 f303 	mul.w	r3, r2, r3
 8017c32:	085b      	lsrs	r3, r3, #1
 8017c34:	1acb      	subs	r3, r1, r3
 8017c36:	683a      	ldr	r2, [r7, #0]
 8017c38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017c3c:	fb01 f202 	mul.w	r2, r1, r2
 8017c40:	1a9b      	subs	r3, r3, r2
 8017c42:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8017c46:	4a19      	ldr	r2, [pc, #100]	@ (8017cac <RegionCommonComputeRxWindowParameters+0x16c>)
 8017c48:	fb82 1203 	smull	r1, r2, r2, r3
 8017c4c:	1192      	asrs	r2, r2, #6
 8017c4e:	17db      	asrs	r3, r3, #31
 8017c50:	1ad3      	subs	r3, r2, r3
 8017c52:	e024      	b.n	8017c9e <RegionCommonComputeRxWindowParameters+0x15e>
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	4619      	mov	r1, r3
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	68fa      	ldr	r2, [r7, #12]
 8017c60:	fb02 f303 	mul.w	r3, r2, r3
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d007      	beq.n	8017c78 <RegionCommonComputeRxWindowParameters+0x138>
 8017c68:	69bb      	ldr	r3, [r7, #24]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	68fa      	ldr	r2, [r7, #12]
 8017c6e:	fb02 f303 	mul.w	r3, r2, r3
 8017c72:	3301      	adds	r3, #1
 8017c74:	085b      	lsrs	r3, r3, #1
 8017c76:	e005      	b.n	8017c84 <RegionCommonComputeRxWindowParameters+0x144>
 8017c78:	69bb      	ldr	r3, [r7, #24]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	68fa      	ldr	r2, [r7, #12]
 8017c7e:	fb02 f303 	mul.w	r3, r2, r3
 8017c82:	085b      	lsrs	r3, r3, #1
 8017c84:	1acb      	subs	r3, r1, r3
 8017c86:	683a      	ldr	r2, [r7, #0]
 8017c88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017c8c:	fb01 f202 	mul.w	r2, r1, r2
 8017c90:	1a9b      	subs	r3, r3, r2
 8017c92:	4a06      	ldr	r2, [pc, #24]	@ (8017cac <RegionCommonComputeRxWindowParameters+0x16c>)
 8017c94:	fb82 1203 	smull	r1, r2, r2, r3
 8017c98:	1192      	asrs	r2, r2, #6
 8017c9a:	17db      	asrs	r3, r3, #31
 8017c9c:	1ad3      	subs	r3, r2, r3
 8017c9e:	69fa      	ldr	r2, [r7, #28]
 8017ca0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017ca2:	bf00      	nop
 8017ca4:	3714      	adds	r7, #20
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bc80      	pop	{r7}
 8017caa:	4770      	bx	lr
 8017cac:	10624dd3 	.word	0x10624dd3

08017cb0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b086      	sub	sp, #24
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	60b9      	str	r1, [r7, #8]
 8017cba:	607a      	str	r2, [r7, #4]
 8017cbc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cc6:	005b      	lsls	r3, r3, #1
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7e8 fffb 	bl	8000cc4 <__aeabi_ui2f>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	68b8      	ldr	r0, [r7, #8]
 8017cd4:	f7e8 ff44 	bl	8000b60 <__aeabi_fsub>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	6879      	ldr	r1, [r7, #4]
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7e8 ff3f 	bl	8000b60 <__aeabi_fsub>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7e8 fc07 	bl	80004f8 <__aeabi_f2d>
 8017cea:	4602      	mov	r2, r0
 8017cec:	460b      	mov	r3, r1
 8017cee:	4610      	mov	r0, r2
 8017cf0:	4619      	mov	r1, r3
 8017cf2:	f007 fce5 	bl	801f6c0 <floor>
 8017cf6:	4602      	mov	r2, r0
 8017cf8:	460b      	mov	r3, r1
 8017cfa:	4610      	mov	r0, r2
 8017cfc:	4619      	mov	r1, r3
 8017cfe:	f7e8 ff03 	bl	8000b08 <__aeabi_d2iz>
 8017d02:	4603      	mov	r3, r0
 8017d04:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3718      	adds	r7, #24
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017d12:	b590      	push	{r4, r7, lr}
 8017d14:	b087      	sub	sp, #28
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	60f8      	str	r0, [r7, #12]
 8017d1a:	60b9      	str	r1, [r7, #8]
 8017d1c:	607a      	str	r2, [r7, #4]
 8017d1e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017d20:	2300      	movs	r3, #0
 8017d22:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017d24:	2300      	movs	r3, #0
 8017d26:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017d28:	2300      	movs	r3, #0
 8017d2a:	757b      	strb	r3, [r7, #21]
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	753b      	strb	r3, [r7, #20]
 8017d30:	e09c      	b.n	8017e6c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017d32:	2300      	movs	r3, #0
 8017d34:	74fb      	strb	r3, [r7, #19]
 8017d36:	e08f      	b.n	8017e58 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	685a      	ldr	r2, [r3, #4]
 8017d3c:	7d3b      	ldrb	r3, [r7, #20]
 8017d3e:	005b      	lsls	r3, r3, #1
 8017d40:	4413      	add	r3, r2
 8017d42:	881b      	ldrh	r3, [r3, #0]
 8017d44:	461a      	mov	r2, r3
 8017d46:	7cfb      	ldrb	r3, [r7, #19]
 8017d48:	fa42 f303 	asr.w	r3, r2, r3
 8017d4c:	f003 0301 	and.w	r3, r3, #1
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d07e      	beq.n	8017e52 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	689a      	ldr	r2, [r3, #8]
 8017d58:	7d79      	ldrb	r1, [r7, #21]
 8017d5a:	7cfb      	ldrb	r3, [r7, #19]
 8017d5c:	440b      	add	r3, r1
 8017d5e:	4619      	mov	r1, r3
 8017d60:	460b      	mov	r3, r1
 8017d62:	005b      	lsls	r3, r3, #1
 8017d64:	440b      	add	r3, r1
 8017d66:	009b      	lsls	r3, r3, #2
 8017d68:	4413      	add	r3, r2
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d06b      	beq.n	8017e48 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	f083 0301 	eor.w	r3, r3, #1
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d011      	beq.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d00d      	beq.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	695a      	ldr	r2, [r3, #20]
 8017d8a:	7d3b      	ldrb	r3, [r7, #20]
 8017d8c:	005b      	lsls	r3, r3, #1
 8017d8e:	4413      	add	r3, r2
 8017d90:	881b      	ldrh	r3, [r3, #0]
 8017d92:	461a      	mov	r2, r3
 8017d94:	7cfb      	ldrb	r3, [r7, #19]
 8017d96:	fa42 f303 	asr.w	r3, r2, r3
 8017d9a:	f003 0301 	and.w	r3, r3, #1
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d054      	beq.n	8017e4c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	785b      	ldrb	r3, [r3, #1]
 8017da6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	689a      	ldr	r2, [r3, #8]
 8017dac:	7d79      	ldrb	r1, [r7, #21]
 8017dae:	7cfb      	ldrb	r3, [r7, #19]
 8017db0:	440b      	add	r3, r1
 8017db2:	4619      	mov	r1, r3
 8017db4:	460b      	mov	r3, r1
 8017db6:	005b      	lsls	r3, r3, #1
 8017db8:	440b      	add	r3, r1
 8017dba:	009b      	lsls	r3, r3, #2
 8017dbc:	4413      	add	r3, r2
 8017dbe:	7a1b      	ldrb	r3, [r3, #8]
 8017dc0:	f343 0303 	sbfx	r3, r3, #0, #4
 8017dc4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017dc6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	689a      	ldr	r2, [r3, #8]
 8017dcc:	7d79      	ldrb	r1, [r7, #21]
 8017dce:	7cfb      	ldrb	r3, [r7, #19]
 8017dd0:	440b      	add	r3, r1
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	460b      	mov	r3, r1
 8017dd6:	005b      	lsls	r3, r3, #1
 8017dd8:	440b      	add	r3, r1
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	4413      	add	r3, r2
 8017dde:	7a1b      	ldrb	r3, [r3, #8]
 8017de0:	f343 1303 	sbfx	r3, r3, #4, #4
 8017de4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017de6:	461a      	mov	r2, r3
 8017de8:	4621      	mov	r1, r4
 8017dea:	f7ff fbe8 	bl	80175be <RegionCommonValueInRange>
 8017dee:	4603      	mov	r3, r0
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d02d      	beq.n	8017e50 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	68da      	ldr	r2, [r3, #12]
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	6899      	ldr	r1, [r3, #8]
 8017dfc:	7d78      	ldrb	r0, [r7, #21]
 8017dfe:	7cfb      	ldrb	r3, [r7, #19]
 8017e00:	4403      	add	r3, r0
 8017e02:	4618      	mov	r0, r3
 8017e04:	4603      	mov	r3, r0
 8017e06:	005b      	lsls	r3, r3, #1
 8017e08:	4403      	add	r3, r0
 8017e0a:	009b      	lsls	r3, r3, #2
 8017e0c:	440b      	add	r3, r1
 8017e0e:	7a5b      	ldrb	r3, [r3, #9]
 8017e10:	4619      	mov	r1, r3
 8017e12:	460b      	mov	r3, r1
 8017e14:	005b      	lsls	r3, r3, #1
 8017e16:	440b      	add	r3, r1
 8017e18:	00db      	lsls	r3, r3, #3
 8017e1a:	4413      	add	r3, r2
 8017e1c:	7d1b      	ldrb	r3, [r3, #20]
 8017e1e:	f083 0301 	eor.w	r3, r3, #1
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d003      	beq.n	8017e30 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017e28:	7dbb      	ldrb	r3, [r7, #22]
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017e2e:	e010      	b.n	8017e52 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017e30:	7dfb      	ldrb	r3, [r7, #23]
 8017e32:	1c5a      	adds	r2, r3, #1
 8017e34:	75fa      	strb	r2, [r7, #23]
 8017e36:	461a      	mov	r2, r3
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	4413      	add	r3, r2
 8017e3c:	7d79      	ldrb	r1, [r7, #21]
 8017e3e:	7cfa      	ldrb	r2, [r7, #19]
 8017e40:	440a      	add	r2, r1
 8017e42:	b2d2      	uxtb	r2, r2
 8017e44:	701a      	strb	r2, [r3, #0]
 8017e46:	e004      	b.n	8017e52 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017e48:	bf00      	nop
 8017e4a:	e002      	b.n	8017e52 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017e4c:	bf00      	nop
 8017e4e:	e000      	b.n	8017e52 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017e50:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017e52:	7cfb      	ldrb	r3, [r7, #19]
 8017e54:	3301      	adds	r3, #1
 8017e56:	74fb      	strb	r3, [r7, #19]
 8017e58:	7cfb      	ldrb	r3, [r7, #19]
 8017e5a:	2b0f      	cmp	r3, #15
 8017e5c:	f67f af6c 	bls.w	8017d38 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017e60:	7d7b      	ldrb	r3, [r7, #21]
 8017e62:	3310      	adds	r3, #16
 8017e64:	757b      	strb	r3, [r7, #21]
 8017e66:	7d3b      	ldrb	r3, [r7, #20]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	753b      	strb	r3, [r7, #20]
 8017e6c:	7d7b      	ldrb	r3, [r7, #21]
 8017e6e:	b29a      	uxth	r2, r3
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	8a1b      	ldrh	r3, [r3, #16]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	f4ff af5c 	bcc.w	8017d32 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	7dfa      	ldrb	r2, [r7, #23]
 8017e7e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	7dba      	ldrb	r2, [r7, #22]
 8017e84:	701a      	strb	r2, [r3, #0]
}
 8017e86:	bf00      	nop
 8017e88:	371c      	adds	r7, #28
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd90      	pop	{r4, r7, pc}

08017e8e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e90:	b08b      	sub	sp, #44	@ 0x2c
 8017e92:	af04      	add	r7, sp, #16
 8017e94:	60f8      	str	r0, [r7, #12]
 8017e96:	60b9      	str	r1, [r7, #8]
 8017e98:	607a      	str	r2, [r7, #4]
 8017e9a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f004 fbc9 	bl	801c638 <UTIL_TIMER_GetElapsedTime>
 8017ea6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	1ad2      	subs	r2, r2, r3
 8017eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017eb2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eb6:	2201      	movs	r2, #1
 8017eb8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d004      	beq.n	8017ed2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017ecc:	697a      	ldr	r2, [r7, #20]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d32b      	bcc.n	8017f2a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	69db      	ldr	r3, [r3, #28]
 8017edc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017ee2:	68dd      	ldr	r5, [r3, #12]
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	7a5e      	ldrb	r6, [r3, #9]
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	7d1b      	ldrb	r3, [r3, #20]
 8017ef2:	68fa      	ldr	r2, [r7, #12]
 8017ef4:	6992      	ldr	r2, [r2, #24]
 8017ef6:	9203      	str	r2, [sp, #12]
 8017ef8:	68fa      	ldr	r2, [r7, #12]
 8017efa:	f10d 0e04 	add.w	lr, sp, #4
 8017efe:	320c      	adds	r2, #12
 8017f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f04:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017f08:	9300      	str	r3, [sp, #0]
 8017f0a:	4663      	mov	r3, ip
 8017f0c:	4632      	mov	r2, r6
 8017f0e:	4629      	mov	r1, r5
 8017f10:	4620      	mov	r0, r4
 8017f12:	f7ff fc25 	bl	8017760 <RegionCommonUpdateBandTimeOff>
 8017f16:	4602      	mov	r2, r0
 8017f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f1a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	69d8      	ldr	r0, [r3, #28]
 8017f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f22:	683a      	ldr	r2, [r7, #0]
 8017f24:	6879      	ldr	r1, [r7, #4]
 8017f26:	f7ff fef4 	bl	8017d12 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d004      	beq.n	8017f3c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f34:	2200      	movs	r2, #0
 8017f36:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	e006      	b.n	8017f4a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f3e:	781b      	ldrb	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d001      	beq.n	8017f48 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017f44:	230b      	movs	r3, #11
 8017f46:	e000      	b.n	8017f4a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017f48:	230c      	movs	r3, #12
    }
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	371c      	adds	r7, #28
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f52 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017f52:	b5b0      	push	{r4, r5, r7, lr}
 8017f54:	b086      	sub	sp, #24
 8017f56:	af02      	add	r7, sp, #8
 8017f58:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	781b      	ldrb	r3, [r3, #0]
 8017f5e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f993 2000 	ldrsb.w	r2, [r3]
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d103      	bne.n	8017f78 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017f76:	e026      	b.n	8017fc6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017f78:	7bfb      	ldrb	r3, [r7, #15]
 8017f7a:	3b01      	subs	r3, #1
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017f86:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d019      	beq.n	8017fc2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	78d8      	ldrb	r0, [r3, #3]
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6859      	ldr	r1, [r3, #4]
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017fa2:	687a      	ldr	r2, [r7, #4]
 8017fa4:	6892      	ldr	r2, [r2, #8]
 8017fa6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017faa:	9201      	str	r2, [sp, #4]
 8017fac:	9300      	str	r3, [sp, #0]
 8017fae:	462b      	mov	r3, r5
 8017fb0:	4622      	mov	r2, r4
 8017fb2:	f7ff fa92 	bl	80174da <RegionCommonChanVerifyDr>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	f083 0301 	eor.w	r3, r3, #1
 8017fbc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d1da      	bne.n	8017f78 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3710      	adds	r7, #16
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bdb0      	pop	{r4, r5, r7, pc}

08017fce <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017fce:	b480      	push	{r7}
 8017fd0:	b083      	sub	sp, #12
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	460a      	mov	r2, r1
 8017fd8:	71fb      	strb	r3, [r7, #7]
 8017fda:	4613      	mov	r3, r2
 8017fdc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017fde:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	bfb8      	it	lt
 8017fea:	4613      	movlt	r3, r2
 8017fec:	b25b      	sxtb	r3, r3
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	370c      	adds	r7, #12
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bc80      	pop	{r7}
 8017ff6:	4770      	bx	lr

08017ff8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b083      	sub	sp, #12
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
 8018000:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	683a      	ldr	r2, [r7, #0]
 8018008:	4413      	add	r3, r2
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4a07      	ldr	r2, [pc, #28]	@ (801802c <RegionCommonGetBandwidth+0x34>)
 801800e:	4293      	cmp	r3, r2
 8018010:	d004      	beq.n	801801c <RegionCommonGetBandwidth+0x24>
 8018012:	4a07      	ldr	r2, [pc, #28]	@ (8018030 <RegionCommonGetBandwidth+0x38>)
 8018014:	4293      	cmp	r3, r2
 8018016:	d003      	beq.n	8018020 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018018:	2300      	movs	r3, #0
 801801a:	e002      	b.n	8018022 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801801c:	2301      	movs	r3, #1
 801801e:	e000      	b.n	8018022 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018020:	2302      	movs	r3, #2
    }
}
 8018022:	4618      	mov	r0, r3
 8018024:	370c      	adds	r7, #12
 8018026:	46bd      	mov	sp, r7
 8018028:	bc80      	pop	{r7}
 801802a:	4770      	bx	lr
 801802c:	0003d090 	.word	0x0003d090
 8018030:	0007a120 	.word	0x0007a120

08018034 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b086      	sub	sp, #24
 8018038:	af04      	add	r7, sp, #16
 801803a:	4603      	mov	r3, r0
 801803c:	6039      	str	r1, [r7, #0]
 801803e:	71fb      	strb	r3, [r7, #7]
 8018040:	4613      	mov	r3, r2
 8018042:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018044:	79fb      	ldrb	r3, [r7, #7]
 8018046:	2b05      	cmp	r3, #5
 8018048:	d810      	bhi.n	801806c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801804a:	79fb      	ldrb	r3, [r7, #7]
 801804c:	4a0f      	ldr	r2, [pc, #60]	@ (801808c <RegionCommonRxConfigPrint+0x58>)
 801804e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018052:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018056:	9202      	str	r2, [sp, #8]
 8018058:	683a      	ldr	r2, [r7, #0]
 801805a:	9201      	str	r2, [sp, #4]
 801805c:	9300      	str	r3, [sp, #0]
 801805e:	4b0c      	ldr	r3, [pc, #48]	@ (8018090 <RegionCommonRxConfigPrint+0x5c>)
 8018060:	2201      	movs	r2, #1
 8018062:	2100      	movs	r1, #0
 8018064:	2002      	movs	r0, #2
 8018066:	f004 fbc5 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801806a:	e00a      	b.n	8018082 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801806c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018070:	9301      	str	r3, [sp, #4]
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	9300      	str	r3, [sp, #0]
 8018076:	4b07      	ldr	r3, [pc, #28]	@ (8018094 <RegionCommonRxConfigPrint+0x60>)
 8018078:	2201      	movs	r2, #1
 801807a:	2100      	movs	r1, #0
 801807c:	2002      	movs	r0, #2
 801807e:	f004 fbb9 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 8018082:	bf00      	nop
 8018084:	3708      	adds	r7, #8
 8018086:	46bd      	mov	sp, r7
 8018088:	bd80      	pop	{r7, pc}
 801808a:	bf00      	nop
 801808c:	20000110 	.word	0x20000110
 8018090:	080200d4 	.word	0x080200d4
 8018094:	080200f4 	.word	0x080200f4

08018098 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af02      	add	r7, sp, #8
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	460b      	mov	r3, r1
 80180a2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80180a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80180a8:	9301      	str	r3, [sp, #4]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	4b05      	ldr	r3, [pc, #20]	@ (80180c4 <RegionCommonTxConfigPrint+0x2c>)
 80180b0:	2201      	movs	r2, #1
 80180b2:	2100      	movs	r1, #0
 80180b4:	2002      	movs	r0, #2
 80180b6:	f004 fb9d 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 80180ba:	bf00      	nop
 80180bc:	3708      	adds	r7, #8
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	08020110 	.word	0x08020110

080180c8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80180c8:	b480      	push	{r7}
 80180ca:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80180cc:	4b0d      	ldr	r3, [pc, #52]	@ (8018104 <rand1+0x3c>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	4a0d      	ldr	r2, [pc, #52]	@ (8018108 <rand1+0x40>)
 80180d2:	fb02 f303 	mul.w	r3, r2, r3
 80180d6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180da:	3339      	adds	r3, #57	@ 0x39
 80180dc:	4a09      	ldr	r2, [pc, #36]	@ (8018104 <rand1+0x3c>)
 80180de:	6013      	str	r3, [r2, #0]
 80180e0:	4b08      	ldr	r3, [pc, #32]	@ (8018104 <rand1+0x3c>)
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	2303      	movs	r3, #3
 80180e6:	fba3 1302 	umull	r1, r3, r3, r2
 80180ea:	1ad1      	subs	r1, r2, r3
 80180ec:	0849      	lsrs	r1, r1, #1
 80180ee:	440b      	add	r3, r1
 80180f0:	0f99      	lsrs	r1, r3, #30
 80180f2:	460b      	mov	r3, r1
 80180f4:	07db      	lsls	r3, r3, #31
 80180f6:	1a5b      	subs	r3, r3, r1
 80180f8:	1ad1      	subs	r1, r2, r3
 80180fa:	460b      	mov	r3, r1
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	46bd      	mov	sp, r7
 8018100:	bc80      	pop	{r7}
 8018102:	4770      	bx	lr
 8018104:	20000128 	.word	0x20000128
 8018108:	41c64e6d 	.word	0x41c64e6d

0801810c <srand1>:

void srand1( uint32_t seed )
{
 801810c:	b480      	push	{r7}
 801810e:	b083      	sub	sp, #12
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
    next = seed;
 8018114:	4a03      	ldr	r2, [pc, #12]	@ (8018124 <srand1+0x18>)
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6013      	str	r3, [r2, #0]
}
 801811a:	bf00      	nop
 801811c:	370c      	adds	r7, #12
 801811e:	46bd      	mov	sp, r7
 8018120:	bc80      	pop	{r7}
 8018122:	4770      	bx	lr
 8018124:	20000128 	.word	0x20000128

08018128 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018132:	f7ff ffc9 	bl	80180c8 <rand1>
 8018136:	4602      	mov	r2, r0
 8018138:	6839      	ldr	r1, [r7, #0]
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	1acb      	subs	r3, r1, r3
 801813e:	3301      	adds	r3, #1
 8018140:	fb92 f1f3 	sdiv	r1, r2, r3
 8018144:	fb01 f303 	mul.w	r3, r1, r3
 8018148:	1ad2      	subs	r2, r2, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	4413      	add	r3, r2
}
 801814e:	4618      	mov	r0, r3
 8018150:	3708      	adds	r7, #8
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}

08018156 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018156:	b480      	push	{r7}
 8018158:	b085      	sub	sp, #20
 801815a:	af00      	add	r7, sp, #0
 801815c:	60f8      	str	r0, [r7, #12]
 801815e:	60b9      	str	r1, [r7, #8]
 8018160:	4613      	mov	r3, r2
 8018162:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018164:	e007      	b.n	8018176 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018166:	68ba      	ldr	r2, [r7, #8]
 8018168:	1c53      	adds	r3, r2, #1
 801816a:	60bb      	str	r3, [r7, #8]
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	1c59      	adds	r1, r3, #1
 8018170:	60f9      	str	r1, [r7, #12]
 8018172:	7812      	ldrb	r2, [r2, #0]
 8018174:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018176:	88fb      	ldrh	r3, [r7, #6]
 8018178:	1e5a      	subs	r2, r3, #1
 801817a:	80fa      	strh	r2, [r7, #6]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d1f2      	bne.n	8018166 <memcpy1+0x10>
    }
}
 8018180:	bf00      	nop
 8018182:	bf00      	nop
 8018184:	3714      	adds	r7, #20
 8018186:	46bd      	mov	sp, r7
 8018188:	bc80      	pop	{r7}
 801818a:	4770      	bx	lr

0801818c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801818c:	b480      	push	{r7}
 801818e:	b085      	sub	sp, #20
 8018190:	af00      	add	r7, sp, #0
 8018192:	60f8      	str	r0, [r7, #12]
 8018194:	60b9      	str	r1, [r7, #8]
 8018196:	4613      	mov	r3, r2
 8018198:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801819a:	88fb      	ldrh	r3, [r7, #6]
 801819c:	3b01      	subs	r3, #1
 801819e:	68fa      	ldr	r2, [r7, #12]
 80181a0:	4413      	add	r3, r2
 80181a2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80181a4:	e007      	b.n	80181b6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80181a6:	68ba      	ldr	r2, [r7, #8]
 80181a8:	1c53      	adds	r3, r2, #1
 80181aa:	60bb      	str	r3, [r7, #8]
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	1e59      	subs	r1, r3, #1
 80181b0:	60f9      	str	r1, [r7, #12]
 80181b2:	7812      	ldrb	r2, [r2, #0]
 80181b4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80181b6:	88fb      	ldrh	r3, [r7, #6]
 80181b8:	1e5a      	subs	r2, r3, #1
 80181ba:	80fa      	strh	r2, [r7, #6]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d1f2      	bne.n	80181a6 <memcpyr+0x1a>
    }
}
 80181c0:	bf00      	nop
 80181c2:	bf00      	nop
 80181c4:	3714      	adds	r7, #20
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bc80      	pop	{r7}
 80181ca:	4770      	bx	lr

080181cc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80181cc:	b480      	push	{r7}
 80181ce:	b083      	sub	sp, #12
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	460b      	mov	r3, r1
 80181d6:	70fb      	strb	r3, [r7, #3]
 80181d8:	4613      	mov	r3, r2
 80181da:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80181dc:	e004      	b.n	80181e8 <memset1+0x1c>
    {
        *dst++ = value;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	1c5a      	adds	r2, r3, #1
 80181e2:	607a      	str	r2, [r7, #4]
 80181e4:	78fa      	ldrb	r2, [r7, #3]
 80181e6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80181e8:	883b      	ldrh	r3, [r7, #0]
 80181ea:	1e5a      	subs	r2, r3, #1
 80181ec:	803a      	strh	r2, [r7, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d1f5      	bne.n	80181de <memset1+0x12>
    }
}
 80181f2:	bf00      	nop
 80181f4:	bf00      	nop
 80181f6:	370c      	adds	r7, #12
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bc80      	pop	{r7}
 80181fc:	4770      	bx	lr
	...

08018200 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	460b      	mov	r3, r1
 801820a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801820c:	f04f 33ff 	mov.w	r3, #4294967295
 8018210:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d101      	bne.n	801821c <Crc32+0x1c>
    {
        return 0;
 8018218:	2300      	movs	r3, #0
 801821a:	e026      	b.n	801826a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801821c:	2300      	movs	r3, #0
 801821e:	817b      	strh	r3, [r7, #10]
 8018220:	e01d      	b.n	801825e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018222:	897b      	ldrh	r3, [r7, #10]
 8018224:	687a      	ldr	r2, [r7, #4]
 8018226:	4413      	add	r3, r2
 8018228:	781b      	ldrb	r3, [r3, #0]
 801822a:	461a      	mov	r2, r3
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	4053      	eors	r3, r2
 8018230:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018232:	2300      	movs	r3, #0
 8018234:	813b      	strh	r3, [r7, #8]
 8018236:	e00c      	b.n	8018252 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	085a      	lsrs	r2, r3, #1
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	f003 0301 	and.w	r3, r3, #1
 8018242:	425b      	negs	r3, r3
 8018244:	490b      	ldr	r1, [pc, #44]	@ (8018274 <Crc32+0x74>)
 8018246:	400b      	ands	r3, r1
 8018248:	4053      	eors	r3, r2
 801824a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801824c:	893b      	ldrh	r3, [r7, #8]
 801824e:	3301      	adds	r3, #1
 8018250:	813b      	strh	r3, [r7, #8]
 8018252:	893b      	ldrh	r3, [r7, #8]
 8018254:	2b07      	cmp	r3, #7
 8018256:	d9ef      	bls.n	8018238 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018258:	897b      	ldrh	r3, [r7, #10]
 801825a:	3301      	adds	r3, #1
 801825c:	817b      	strh	r3, [r7, #10]
 801825e:	897a      	ldrh	r2, [r7, #10]
 8018260:	887b      	ldrh	r3, [r7, #2]
 8018262:	429a      	cmp	r2, r3
 8018264:	d3dd      	bcc.n	8018222 <Crc32+0x22>
        }
    }

    return ~crc;
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	43db      	mvns	r3, r3
}
 801826a:	4618      	mov	r0, r3
 801826c:	3714      	adds	r7, #20
 801826e:	46bd      	mov	sp, r7
 8018270:	bc80      	pop	{r7}
 8018272:	4770      	bx	lr
 8018274:	edb88320 	.word	0xedb88320

08018278 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af02      	add	r7, sp, #8
 801827e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018280:	4a24      	ldr	r2, [pc, #144]	@ (8018314 <RadioInit+0x9c>)
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018286:	4b24      	ldr	r3, [pc, #144]	@ (8018318 <RadioInit+0xa0>)
 8018288:	2200      	movs	r2, #0
 801828a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801828c:	4b22      	ldr	r3, [pc, #136]	@ (8018318 <RadioInit+0xa0>)
 801828e:	2200      	movs	r2, #0
 8018290:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018292:	4b21      	ldr	r3, [pc, #132]	@ (8018318 <RadioInit+0xa0>)
 8018294:	2200      	movs	r2, #0
 8018296:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018298:	4b1f      	ldr	r3, [pc, #124]	@ (8018318 <RadioInit+0xa0>)
 801829a:	2200      	movs	r2, #0
 801829c:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801829e:	481f      	ldr	r0, [pc, #124]	@ (801831c <RadioInit+0xa4>)
 80182a0:	f001 ff88 	bl	801a1b4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80182a4:	4b1c      	ldr	r3, [pc, #112]	@ (8018318 <RadioInit+0xa0>)
 80182a6:	2200      	movs	r2, #0
 80182a8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80182aa:	4b1b      	ldr	r3, [pc, #108]	@ (8018318 <RadioInit+0xa0>)
 80182ac:	2200      	movs	r2, #0
 80182ae:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80182b0:	f002 fa16 	bl	801a6e0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80182b4:	2100      	movs	r1, #0
 80182b6:	2000      	movs	r0, #0
 80182b8:	f002 fdde 	bl	801ae78 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80182bc:	2204      	movs	r2, #4
 80182be:	2100      	movs	r1, #0
 80182c0:	2001      	movs	r0, #1
 80182c2:	f002 fb9b 	bl	801a9fc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80182c6:	2300      	movs	r3, #0
 80182c8:	2200      	movs	r2, #0
 80182ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80182ce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80182d2:	f002 facb 	bl	801a86c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80182d6:	f000 fe83 	bl	8018fe0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80182da:	2300      	movs	r3, #0
 80182dc:	9300      	str	r3, [sp, #0]
 80182de:	4b10      	ldr	r3, [pc, #64]	@ (8018320 <RadioInit+0xa8>)
 80182e0:	2200      	movs	r2, #0
 80182e2:	f04f 31ff 	mov.w	r1, #4294967295
 80182e6:	480f      	ldr	r0, [pc, #60]	@ (8018324 <RadioInit+0xac>)
 80182e8:	f003 ffd6 	bl	801c298 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80182ec:	2300      	movs	r3, #0
 80182ee:	9300      	str	r3, [sp, #0]
 80182f0:	4b0d      	ldr	r3, [pc, #52]	@ (8018328 <RadioInit+0xb0>)
 80182f2:	2200      	movs	r2, #0
 80182f4:	f04f 31ff 	mov.w	r1, #4294967295
 80182f8:	480c      	ldr	r0, [pc, #48]	@ (801832c <RadioInit+0xb4>)
 80182fa:	f003 ffcd 	bl	801c298 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80182fe:	4809      	ldr	r0, [pc, #36]	@ (8018324 <RadioInit+0xac>)
 8018300:	f004 f86e 	bl	801c3e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018304:	4809      	ldr	r0, [pc, #36]	@ (801832c <RadioInit+0xb4>)
 8018306:	f004 f86b 	bl	801c3e0 <UTIL_TIMER_Stop>
}
 801830a:	bf00      	nop
 801830c:	3708      	adds	r7, #8
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	20001ccc 	.word	0x20001ccc
 8018318:	20001cd0 	.word	0x20001cd0
 801831c:	080193c9 	.word	0x080193c9
 8018320:	08019351 	.word	0x08019351
 8018324:	20001d2c 	.word	0x20001d2c
 8018328:	08019365 	.word	0x08019365
 801832c:	20001d44 	.word	0x20001d44

08018330 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018330:	b580      	push	{r7, lr}
 8018332:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018334:	f001 ff80 	bl	801a238 <SUBGRF_GetOperatingMode>
 8018338:	4603      	mov	r3, r0
 801833a:	2b07      	cmp	r3, #7
 801833c:	d00a      	beq.n	8018354 <RadioGetStatus+0x24>
 801833e:	2b07      	cmp	r3, #7
 8018340:	dc0a      	bgt.n	8018358 <RadioGetStatus+0x28>
 8018342:	2b04      	cmp	r3, #4
 8018344:	d002      	beq.n	801834c <RadioGetStatus+0x1c>
 8018346:	2b05      	cmp	r3, #5
 8018348:	d002      	beq.n	8018350 <RadioGetStatus+0x20>
 801834a:	e005      	b.n	8018358 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801834c:	2302      	movs	r3, #2
 801834e:	e004      	b.n	801835a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018350:	2301      	movs	r3, #1
 8018352:	e002      	b.n	801835a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018354:	2303      	movs	r3, #3
 8018356:	e000      	b.n	801835a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018358:	2300      	movs	r3, #0
    }
}
 801835a:	4618      	mov	r0, r3
 801835c:	bd80      	pop	{r7, pc}
	...

08018360 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	af00      	add	r7, sp, #0
 8018366:	4603      	mov	r3, r0
 8018368:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801836a:	4a2a      	ldr	r2, [pc, #168]	@ (8018414 <RadioSetModem+0xb4>)
 801836c:	79fb      	ldrb	r3, [r7, #7]
 801836e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018370:	79fb      	ldrb	r3, [r7, #7]
 8018372:	4618      	mov	r0, r3
 8018374:	f003 f943 	bl	801b5fe <RFW_SetRadioModem>
    switch( modem )
 8018378:	79fb      	ldrb	r3, [r7, #7]
 801837a:	2b05      	cmp	r3, #5
 801837c:	d80e      	bhi.n	801839c <RadioSetModem+0x3c>
 801837e:	a201      	add	r2, pc, #4	@ (adr r2, 8018384 <RadioSetModem+0x24>)
 8018380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018384:	080183ab 	.word	0x080183ab
 8018388:	080183b9 	.word	0x080183b9
 801838c:	0801839d 	.word	0x0801839d
 8018390:	080183df 	.word	0x080183df
 8018394:	080183ed 	.word	0x080183ed
 8018398:	080183fb 	.word	0x080183fb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801839c:	2003      	movs	r0, #3
 801839e:	f002 fb07 	bl	801a9b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183a2:	4b1c      	ldr	r3, [pc, #112]	@ (8018414 <RadioSetModem+0xb4>)
 80183a4:	2200      	movs	r2, #0
 80183a6:	735a      	strb	r2, [r3, #13]
        break;
 80183a8:	e02f      	b.n	801840a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80183aa:	2000      	movs	r0, #0
 80183ac:	f002 fb00 	bl	801a9b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183b0:	4b18      	ldr	r3, [pc, #96]	@ (8018414 <RadioSetModem+0xb4>)
 80183b2:	2200      	movs	r2, #0
 80183b4:	735a      	strb	r2, [r3, #13]
        break;
 80183b6:	e028      	b.n	801840a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80183b8:	2001      	movs	r0, #1
 80183ba:	f002 faf9 	bl	801a9b0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80183be:	4b15      	ldr	r3, [pc, #84]	@ (8018414 <RadioSetModem+0xb4>)
 80183c0:	7b5a      	ldrb	r2, [r3, #13]
 80183c2:	4b14      	ldr	r3, [pc, #80]	@ (8018414 <RadioSetModem+0xb4>)
 80183c4:	7b1b      	ldrb	r3, [r3, #12]
 80183c6:	429a      	cmp	r2, r3
 80183c8:	d01e      	beq.n	8018408 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80183ca:	4b12      	ldr	r3, [pc, #72]	@ (8018414 <RadioSetModem+0xb4>)
 80183cc:	7b1a      	ldrb	r2, [r3, #12]
 80183ce:	4b11      	ldr	r3, [pc, #68]	@ (8018414 <RadioSetModem+0xb4>)
 80183d0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80183d2:	4b10      	ldr	r3, [pc, #64]	@ (8018414 <RadioSetModem+0xb4>)
 80183d4:	7b5b      	ldrb	r3, [r3, #13]
 80183d6:	4618      	mov	r0, r3
 80183d8:	f000 ff84 	bl	80192e4 <RadioSetPublicNetwork>
        }
        break;
 80183dc:	e014      	b.n	8018408 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80183de:	2002      	movs	r0, #2
 80183e0:	f002 fae6 	bl	801a9b0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183e4:	4b0b      	ldr	r3, [pc, #44]	@ (8018414 <RadioSetModem+0xb4>)
 80183e6:	2200      	movs	r2, #0
 80183e8:	735a      	strb	r2, [r3, #13]
        break;
 80183ea:	e00e      	b.n	801840a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80183ec:	2002      	movs	r0, #2
 80183ee:	f002 fadf 	bl	801a9b0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80183f2:	4b08      	ldr	r3, [pc, #32]	@ (8018414 <RadioSetModem+0xb4>)
 80183f4:	2200      	movs	r2, #0
 80183f6:	735a      	strb	r2, [r3, #13]
        break;
 80183f8:	e007      	b.n	801840a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80183fa:	2000      	movs	r0, #0
 80183fc:	f002 fad8 	bl	801a9b0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018400:	4b04      	ldr	r3, [pc, #16]	@ (8018414 <RadioSetModem+0xb4>)
 8018402:	2200      	movs	r2, #0
 8018404:	735a      	strb	r2, [r3, #13]
        break;
 8018406:	e000      	b.n	801840a <RadioSetModem+0xaa>
        break;
 8018408:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801840a:	bf00      	nop
 801840c:	3708      	adds	r7, #8
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	20001cd0 	.word	0x20001cd0

08018418 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f002 fa7f 	bl	801a924 <SUBGRF_SetRfFrequency>
}
 8018426:	bf00      	nop
 8018428:	3708      	adds	r7, #8
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}

0801842e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801842e:	b580      	push	{r7, lr}
 8018430:	b090      	sub	sp, #64	@ 0x40
 8018432:	af0a      	add	r7, sp, #40	@ 0x28
 8018434:	60f8      	str	r0, [r7, #12]
 8018436:	60b9      	str	r1, [r7, #8]
 8018438:	603b      	str	r3, [r7, #0]
 801843a:	4613      	mov	r3, r2
 801843c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801843e:	2301      	movs	r3, #1
 8018440:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018446:	2300      	movs	r3, #0
 8018448:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801844a:	f000 fddc 	bl	8019006 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801844e:	2000      	movs	r0, #0
 8018450:	f7ff ff86 	bl	8018360 <RadioSetModem>

    RadioSetChannel( freq );
 8018454:	68f8      	ldr	r0, [r7, #12]
 8018456:	f7ff ffdf 	bl	8018418 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801845a:	2301      	movs	r3, #1
 801845c:	9309      	str	r3, [sp, #36]	@ 0x24
 801845e:	2300      	movs	r3, #0
 8018460:	9308      	str	r3, [sp, #32]
 8018462:	2300      	movs	r3, #0
 8018464:	9307      	str	r3, [sp, #28]
 8018466:	2300      	movs	r3, #0
 8018468:	9306      	str	r3, [sp, #24]
 801846a:	2300      	movs	r3, #0
 801846c:	9305      	str	r3, [sp, #20]
 801846e:	2300      	movs	r3, #0
 8018470:	9304      	str	r3, [sp, #16]
 8018472:	2300      	movs	r3, #0
 8018474:	9303      	str	r3, [sp, #12]
 8018476:	2300      	movs	r3, #0
 8018478:	9302      	str	r3, [sp, #8]
 801847a:	2303      	movs	r3, #3
 801847c:	9301      	str	r3, [sp, #4]
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	9300      	str	r3, [sp, #0]
 8018482:	2300      	movs	r3, #0
 8018484:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018488:	68b9      	ldr	r1, [r7, #8]
 801848a:	2000      	movs	r0, #0
 801848c:	f000 f83c 	bl	8018508 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018490:	2000      	movs	r0, #0
 8018492:	f000 fdbf 	bl	8019014 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018496:	f000 ff53 	bl	8019340 <RadioGetWakeupTime>
 801849a:	4603      	mov	r3, r0
 801849c:	4618      	mov	r0, r3
 801849e:	f7ea fa0d 	bl	80028bc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80184a2:	f004 f8b7 	bl	801c614 <UTIL_TIMER_GetCurrentTime>
 80184a6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80184a8:	e00d      	b.n	80184c6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80184aa:	2000      	movs	r0, #0
 80184ac:	f000 fe9a 	bl	80191e4 <RadioRssi>
 80184b0:	4603      	mov	r3, r0
 80184b2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80184b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80184b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80184bc:	429a      	cmp	r2, r3
 80184be:	dd02      	ble.n	80184c6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80184c0:	2300      	movs	r3, #0
 80184c2:	75fb      	strb	r3, [r7, #23]
            break;
 80184c4:	e006      	b.n	80184d4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80184c6:	6938      	ldr	r0, [r7, #16]
 80184c8:	f004 f8b6 	bl	801c638 <UTIL_TIMER_GetElapsedTime>
 80184cc:	4602      	mov	r2, r0
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	4293      	cmp	r3, r2
 80184d2:	d8ea      	bhi.n	80184aa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80184d4:	f000 fd97 	bl	8019006 <RadioStandby>

    return status;
 80184d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3718      	adds	r7, #24
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}

080184e2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80184e2:	b580      	push	{r7, lr}
 80184e4:	b082      	sub	sp, #8
 80184e6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80184e8:	2300      	movs	r3, #0
 80184ea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80184ec:	2300      	movs	r3, #0
 80184ee:	2200      	movs	r2, #0
 80184f0:	2100      	movs	r1, #0
 80184f2:	2000      	movs	r0, #0
 80184f4:	f002 f9ba 	bl	801a86c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80184f8:	f001 ff6f 	bl	801a3da <SUBGRF_GetRandom>
 80184fc:	6078      	str	r0, [r7, #4]

    return rnd;
 80184fe:	687b      	ldr	r3, [r7, #4]
}
 8018500:	4618      	mov	r0, r3
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b08a      	sub	sp, #40	@ 0x28
 801850c:	af00      	add	r7, sp, #0
 801850e:	60b9      	str	r1, [r7, #8]
 8018510:	607a      	str	r2, [r7, #4]
 8018512:	461a      	mov	r2, r3
 8018514:	4603      	mov	r3, r0
 8018516:	73fb      	strb	r3, [r7, #15]
 8018518:	4613      	mov	r3, r2
 801851a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801851c:	4ab9      	ldr	r2, [pc, #740]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801851e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018522:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018524:	f003 f829 	bl	801b57a <RFW_DeInit>
    if( rxContinuous == true )
 8018528:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801852c:	2b00      	cmp	r3, #0
 801852e:	d001      	beq.n	8018534 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018530:	2300      	movs	r3, #0
 8018532:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8018534:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018538:	2b00      	cmp	r3, #0
 801853a:	d004      	beq.n	8018546 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801853c:	4ab2      	ldr	r2, [pc, #712]	@ (8018808 <RadioSetRxConfig+0x300>)
 801853e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018542:	7013      	strb	r3, [r2, #0]
 8018544:	e002      	b.n	801854c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018546:	4bb0      	ldr	r3, [pc, #704]	@ (8018808 <RadioSetRxConfig+0x300>)
 8018548:	22ff      	movs	r2, #255	@ 0xff
 801854a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801854c:	7bfb      	ldrb	r3, [r7, #15]
 801854e:	2b05      	cmp	r3, #5
 8018550:	d009      	beq.n	8018566 <RadioSetRxConfig+0x5e>
 8018552:	2b05      	cmp	r3, #5
 8018554:	f300 81ca 	bgt.w	80188ec <RadioSetRxConfig+0x3e4>
 8018558:	2b00      	cmp	r3, #0
 801855a:	f000 80bf 	beq.w	80186dc <RadioSetRxConfig+0x1d4>
 801855e:	2b01      	cmp	r3, #1
 8018560:	f000 8124 	beq.w	80187ac <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018564:	e1c2      	b.n	80188ec <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018566:	2001      	movs	r0, #1
 8018568:	f002 f87c 	bl	801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801856c:	4ba5      	ldr	r3, [pc, #660]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801856e:	2200      	movs	r2, #0
 8018570:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018574:	4aa3      	ldr	r2, [pc, #652]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801857a:	4ba2      	ldr	r3, [pc, #648]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801857c:	2209      	movs	r2, #9
 801857e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018582:	4ba0      	ldr	r3, [pc, #640]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018584:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018588:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801858a:	68b8      	ldr	r0, [r7, #8]
 801858c:	f002 ff28 	bl	801b3e0 <SUBGRF_GetFskBandwidthRegValue>
 8018590:	4603      	mov	r3, r0
 8018592:	461a      	mov	r2, r3
 8018594:	4b9b      	ldr	r3, [pc, #620]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801859a:	4b9a      	ldr	r3, [pc, #616]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801859c:	2200      	movs	r2, #0
 801859e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80185a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80185a2:	00db      	lsls	r3, r3, #3
 80185a4:	b29a      	uxth	r2, r3
 80185a6:	4b97      	ldr	r3, [pc, #604]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80185aa:	4b96      	ldr	r3, [pc, #600]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185ac:	2200      	movs	r2, #0
 80185ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80185b0:	4b94      	ldr	r3, [pc, #592]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185b2:	2210      	movs	r2, #16
 80185b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80185b6:	4b93      	ldr	r3, [pc, #588]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185b8:	2200      	movs	r2, #0
 80185ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80185bc:	4b91      	ldr	r3, [pc, #580]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185be:	2200      	movs	r2, #0
 80185c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80185c2:	4b91      	ldr	r3, [pc, #580]	@ (8018808 <RadioSetRxConfig+0x300>)
 80185c4:	781a      	ldrb	r2, [r3, #0]
 80185c6:	4b8f      	ldr	r3, [pc, #572]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185c8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80185ca:	4b8e      	ldr	r3, [pc, #568]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185cc:	2201      	movs	r2, #1
 80185ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80185d0:	4b8c      	ldr	r3, [pc, #560]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80185d2:	2200      	movs	r2, #0
 80185d4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80185d6:	2005      	movs	r0, #5
 80185d8:	f7ff fec2 	bl	8018360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185dc:	488b      	ldr	r0, [pc, #556]	@ (801880c <RadioSetRxConfig+0x304>)
 80185de:	f002 fadb 	bl	801ab98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185e2:	488b      	ldr	r0, [pc, #556]	@ (8018810 <RadioSetRxConfig+0x308>)
 80185e4:	f002 fbaa 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80185e8:	4a8a      	ldr	r2, [pc, #552]	@ (8018814 <RadioSetRxConfig+0x30c>)
 80185ea:	f107 031c 	add.w	r3, r7, #28
 80185ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80185f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80185f6:	f107 031c 	add.w	r3, r7, #28
 80185fa:	4618      	mov	r0, r3
 80185fc:	f001 fe6b 	bl	801a2d6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018600:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018604:	f001 feb6 	bl	801a374 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018608:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801860c:	f000 fe08 	bl	8019220 <RadioRead>
 8018610:	4603      	mov	r3, r0
 8018612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801861a:	f023 0310 	bic.w	r3, r3, #16
 801861e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018626:	4619      	mov	r1, r3
 8018628:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801862c:	f000 fde6 	bl	80191fc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018630:	2104      	movs	r1, #4
 8018632:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8018636:	f000 fde1 	bl	80191fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801863a:	f640 009b 	movw	r0, #2203	@ 0x89b
 801863e:	f000 fdef 	bl	8019220 <RadioRead>
 8018642:	4603      	mov	r3, r0
 8018644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801864c:	f023 031c 	bic.w	r3, r3, #28
 8018650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018658:	f043 0308 	orr.w	r3, r3, #8
 801865c:	b2db      	uxtb	r3, r3
 801865e:	4619      	mov	r1, r3
 8018660:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018664:	f000 fdca 	bl	80191fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018668:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801866c:	f000 fdd8 	bl	8019220 <RadioRead>
 8018670:	4603      	mov	r3, r0
 8018672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801867a:	f023 0318 	bic.w	r3, r3, #24
 801867e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018686:	f043 0318 	orr.w	r3, r3, #24
 801868a:	b2db      	uxtb	r3, r3
 801868c:	4619      	mov	r1, r3
 801868e:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018692:	f000 fdb3 	bl	80191fc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018696:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801869a:	f000 fdc1 	bl	8019220 <RadioRead>
 801869e:	4603      	mov	r3, r0
 80186a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80186a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80186a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80186ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80186b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80186b4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	4619      	mov	r1, r3
 80186bc:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80186c0:	f000 fd9c 	bl	80191fc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80186c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80186c6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80186ca:	fb02 f303 	mul.w	r3, r2, r3
 80186ce:	461a      	mov	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80186d6:	4a4b      	ldr	r2, [pc, #300]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80186d8:	6093      	str	r3, [r2, #8]
            break;
 80186da:	e108      	b.n	80188ee <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80186dc:	2000      	movs	r0, #0
 80186de:	f001 ffc1 	bl	801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186e2:	4b48      	ldr	r3, [pc, #288]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80186e4:	2200      	movs	r2, #0
 80186e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80186ea:	4a46      	ldr	r2, [pc, #280]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80186f0:	4b44      	ldr	r3, [pc, #272]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80186f2:	220b      	movs	r2, #11
 80186f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80186f8:	68b8      	ldr	r0, [r7, #8]
 80186fa:	f002 fe71 	bl	801b3e0 <SUBGRF_GetFskBandwidthRegValue>
 80186fe:	4603      	mov	r3, r0
 8018700:	461a      	mov	r2, r3
 8018702:	4b40      	ldr	r3, [pc, #256]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018708:	4b3e      	ldr	r3, [pc, #248]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801870a:	2200      	movs	r2, #0
 801870c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801870e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	b29a      	uxth	r2, r3
 8018714:	4b3b      	ldr	r3, [pc, #236]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018716:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018718:	4b3a      	ldr	r3, [pc, #232]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801871a:	2204      	movs	r2, #4
 801871c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801871e:	4b39      	ldr	r3, [pc, #228]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018720:	2218      	movs	r2, #24
 8018722:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018724:	4b37      	ldr	r3, [pc, #220]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018726:	2200      	movs	r2, #0
 8018728:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801872a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801872e:	f083 0301 	eor.w	r3, r3, #1
 8018732:	b2db      	uxtb	r3, r3
 8018734:	461a      	mov	r2, r3
 8018736:	4b33      	ldr	r3, [pc, #204]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018738:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801873a:	4b33      	ldr	r3, [pc, #204]	@ (8018808 <RadioSetRxConfig+0x300>)
 801873c:	781a      	ldrb	r2, [r3, #0]
 801873e:	4b31      	ldr	r3, [pc, #196]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018740:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018742:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018746:	2b00      	cmp	r3, #0
 8018748:	d003      	beq.n	8018752 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801874a:	4b2e      	ldr	r3, [pc, #184]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801874c:	22f2      	movs	r2, #242	@ 0xf2
 801874e:	75da      	strb	r2, [r3, #23]
 8018750:	e002      	b.n	8018758 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018752:	4b2c      	ldr	r3, [pc, #176]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 8018754:	2201      	movs	r2, #1
 8018756:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018758:	4b2a      	ldr	r3, [pc, #168]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 801875a:	2201      	movs	r2, #1
 801875c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801875e:	f000 fc52 	bl	8019006 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018762:	2000      	movs	r0, #0
 8018764:	f7ff fdfc 	bl	8018360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018768:	4828      	ldr	r0, [pc, #160]	@ (801880c <RadioSetRxConfig+0x304>)
 801876a:	f002 fa15 	bl	801ab98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801876e:	4828      	ldr	r0, [pc, #160]	@ (8018810 <RadioSetRxConfig+0x308>)
 8018770:	f002 fae4 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018774:	4a28      	ldr	r2, [pc, #160]	@ (8018818 <RadioSetRxConfig+0x310>)
 8018776:	f107 0314 	add.w	r3, r7, #20
 801877a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801877e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018782:	f107 0314 	add.w	r3, r7, #20
 8018786:	4618      	mov	r0, r3
 8018788:	f001 fda5 	bl	801a2d6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801878c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018790:	f001 fdf0 	bl	801a374 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018794:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018796:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801879a:	fb02 f303 	mul.w	r3, r2, r3
 801879e:	461a      	mov	r2, r3
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80187a6:	4a17      	ldr	r2, [pc, #92]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187a8:	6093      	str	r3, [r2, #8]
            break;
 80187aa:	e0a0      	b.n	80188ee <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80187ac:	2000      	movs	r0, #0
 80187ae:	f001 ff59 	bl	801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80187b2:	4b14      	ldr	r3, [pc, #80]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187b4:	2201      	movs	r2, #1
 80187b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	b2da      	uxtb	r2, r3
 80187be:	4b11      	ldr	r3, [pc, #68]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80187c4:	4a15      	ldr	r2, [pc, #84]	@ (801881c <RadioSetRxConfig+0x314>)
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	4413      	add	r3, r2
 80187ca:	781a      	ldrb	r2, [r3, #0]
 80187cc:	4b0d      	ldr	r3, [pc, #52]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80187d2:	4a0c      	ldr	r2, [pc, #48]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187d4:	7bbb      	ldrb	r3, [r7, #14]
 80187d6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d105      	bne.n	80187ec <RadioSetRxConfig+0x2e4>
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2b0b      	cmp	r3, #11
 80187e4:	d008      	beq.n	80187f8 <RadioSetRxConfig+0x2f0>
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b0c      	cmp	r3, #12
 80187ea:	d005      	beq.n	80187f8 <RadioSetRxConfig+0x2f0>
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	2b01      	cmp	r3, #1
 80187f0:	d116      	bne.n	8018820 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	2b0c      	cmp	r3, #12
 80187f6:	d113      	bne.n	8018820 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80187f8:	4b02      	ldr	r3, [pc, #8]	@ (8018804 <RadioSetRxConfig+0x2fc>)
 80187fa:	2201      	movs	r2, #1
 80187fc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018800:	e012      	b.n	8018828 <RadioSetRxConfig+0x320>
 8018802:	bf00      	nop
 8018804:	20001cd0 	.word	0x20001cd0
 8018808:	2000012c 	.word	0x2000012c
 801880c:	20001d08 	.word	0x20001d08
 8018810:	20001cde 	.word	0x20001cde
 8018814:	0802012c 	.word	0x0802012c
 8018818:	08020134 	.word	0x08020134
 801881c:	08020798 	.word	0x08020798
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018820:	4b35      	ldr	r3, [pc, #212]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 8018822:	2200      	movs	r2, #0
 8018824:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018828:	4b33      	ldr	r3, [pc, #204]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801882a:	2201      	movs	r2, #1
 801882c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801882e:	4b32      	ldr	r3, [pc, #200]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 8018830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018834:	2b05      	cmp	r3, #5
 8018836:	d004      	beq.n	8018842 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018838:	4b2f      	ldr	r3, [pc, #188]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801883a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801883e:	2b06      	cmp	r3, #6
 8018840:	d10a      	bne.n	8018858 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018842:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018844:	2b0b      	cmp	r3, #11
 8018846:	d803      	bhi.n	8018850 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018848:	4b2b      	ldr	r3, [pc, #172]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801884a:	220c      	movs	r2, #12
 801884c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801884e:	e006      	b.n	801885e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018850:	4a29      	ldr	r2, [pc, #164]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 8018852:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018854:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018856:	e002      	b.n	801885e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018858:	4a27      	ldr	r2, [pc, #156]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801885a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801885c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801885e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018862:	4b25      	ldr	r3, [pc, #148]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 8018864:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018866:	4b25      	ldr	r3, [pc, #148]	@ (80188fc <RadioSetRxConfig+0x3f4>)
 8018868:	781a      	ldrb	r2, [r3, #0]
 801886a:	4b23      	ldr	r3, [pc, #140]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801886c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801886e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018872:	4b21      	ldr	r3, [pc, #132]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 8018874:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018878:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801887c:	4b1e      	ldr	r3, [pc, #120]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 801887e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018882:	f000 fbc0 	bl	8019006 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018886:	2001      	movs	r0, #1
 8018888:	f7ff fd6a 	bl	8018360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801888c:	481c      	ldr	r0, [pc, #112]	@ (8018900 <RadioSetRxConfig+0x3f8>)
 801888e:	f002 f983 	bl	801ab98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018892:	481c      	ldr	r0, [pc, #112]	@ (8018904 <RadioSetRxConfig+0x3fc>)
 8018894:	f002 fa52 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018898:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801889a:	b2db      	uxtb	r3, r3
 801889c:	4618      	mov	r0, r3
 801889e:	f001 fef0 	bl	801a682 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80188a2:	4b15      	ldr	r3, [pc, #84]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 80188a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80188a8:	2b01      	cmp	r3, #1
 80188aa:	d10d      	bne.n	80188c8 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80188ac:	f240 7036 	movw	r0, #1846	@ 0x736
 80188b0:	f002 fba0 	bl	801aff4 <SUBGRF_ReadRegister>
 80188b4:	4603      	mov	r3, r0
 80188b6:	f023 0304 	bic.w	r3, r3, #4
 80188ba:	b2db      	uxtb	r3, r3
 80188bc:	4619      	mov	r1, r3
 80188be:	f240 7036 	movw	r0, #1846	@ 0x736
 80188c2:	f002 fb83 	bl	801afcc <SUBGRF_WriteRegister>
 80188c6:	e00c      	b.n	80188e2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80188c8:	f240 7036 	movw	r0, #1846	@ 0x736
 80188cc:	f002 fb92 	bl	801aff4 <SUBGRF_ReadRegister>
 80188d0:	4603      	mov	r3, r0
 80188d2:	f043 0304 	orr.w	r3, r3, #4
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	4619      	mov	r1, r3
 80188da:	f240 7036 	movw	r0, #1846	@ 0x736
 80188de:	f002 fb75 	bl	801afcc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80188e2:	4b05      	ldr	r3, [pc, #20]	@ (80188f8 <RadioSetRxConfig+0x3f0>)
 80188e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80188e8:	609a      	str	r2, [r3, #8]
            break;
 80188ea:	e000      	b.n	80188ee <RadioSetRxConfig+0x3e6>
            break;
 80188ec:	bf00      	nop
    }
}
 80188ee:	bf00      	nop
 80188f0:	3728      	adds	r7, #40	@ 0x28
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd80      	pop	{r7, pc}
 80188f6:	bf00      	nop
 80188f8:	20001cd0 	.word	0x20001cd0
 80188fc:	2000012c 	.word	0x2000012c
 8018900:	20001d08 	.word	0x20001d08
 8018904:	20001cde 	.word	0x20001cde

08018908 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b086      	sub	sp, #24
 801890c:	af00      	add	r7, sp, #0
 801890e:	60ba      	str	r2, [r7, #8]
 8018910:	607b      	str	r3, [r7, #4]
 8018912:	4603      	mov	r3, r0
 8018914:	73fb      	strb	r3, [r7, #15]
 8018916:	460b      	mov	r3, r1
 8018918:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801891a:	f002 fe2e 	bl	801b57a <RFW_DeInit>
    switch( modem )
 801891e:	7bfb      	ldrb	r3, [r7, #15]
 8018920:	2b04      	cmp	r3, #4
 8018922:	f000 80c7 	beq.w	8018ab4 <RadioSetTxConfig+0x1ac>
 8018926:	2b04      	cmp	r3, #4
 8018928:	f300 80d6 	bgt.w	8018ad8 <RadioSetTxConfig+0x1d0>
 801892c:	2b00      	cmp	r3, #0
 801892e:	d002      	beq.n	8018936 <RadioSetTxConfig+0x2e>
 8018930:	2b01      	cmp	r3, #1
 8018932:	d059      	beq.n	80189e8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018934:	e0d0      	b.n	8018ad8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018936:	4b74      	ldr	r3, [pc, #464]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018938:	2200      	movs	r2, #0
 801893a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801893e:	4a72      	ldr	r2, [pc, #456]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018940:	6a3b      	ldr	r3, [r7, #32]
 8018942:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018944:	4b70      	ldr	r3, [pc, #448]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018946:	220b      	movs	r2, #11
 8018948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f002 fd47 	bl	801b3e0 <SUBGRF_GetFskBandwidthRegValue>
 8018952:	4603      	mov	r3, r0
 8018954:	461a      	mov	r2, r3
 8018956:	4b6c      	ldr	r3, [pc, #432]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801895c:	4a6a      	ldr	r2, [pc, #424]	@ (8018b08 <RadioSetTxConfig+0x200>)
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018962:	4b69      	ldr	r3, [pc, #420]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018964:	2200      	movs	r2, #0
 8018966:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018968:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801896a:	00db      	lsls	r3, r3, #3
 801896c:	b29a      	uxth	r2, r3
 801896e:	4b66      	ldr	r3, [pc, #408]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018970:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018972:	4b65      	ldr	r3, [pc, #404]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018974:	2204      	movs	r2, #4
 8018976:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018978:	4b63      	ldr	r3, [pc, #396]	@ (8018b08 <RadioSetTxConfig+0x200>)
 801897a:	2218      	movs	r2, #24
 801897c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801897e:	4b62      	ldr	r3, [pc, #392]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018980:	2200      	movs	r2, #0
 8018982:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018984:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018988:	f083 0301 	eor.w	r3, r3, #1
 801898c:	b2db      	uxtb	r3, r3
 801898e:	461a      	mov	r2, r3
 8018990:	4b5d      	ldr	r3, [pc, #372]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018992:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018994:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018998:	2b00      	cmp	r3, #0
 801899a:	d003      	beq.n	80189a4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801899c:	4b5a      	ldr	r3, [pc, #360]	@ (8018b08 <RadioSetTxConfig+0x200>)
 801899e:	22f2      	movs	r2, #242	@ 0xf2
 80189a0:	75da      	strb	r2, [r3, #23]
 80189a2:	e002      	b.n	80189aa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80189a4:	4b58      	ldr	r3, [pc, #352]	@ (8018b08 <RadioSetTxConfig+0x200>)
 80189a6:	2201      	movs	r2, #1
 80189a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80189aa:	4b57      	ldr	r3, [pc, #348]	@ (8018b08 <RadioSetTxConfig+0x200>)
 80189ac:	2201      	movs	r2, #1
 80189ae:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80189b0:	f000 fb29 	bl	8019006 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80189b4:	2000      	movs	r0, #0
 80189b6:	f7ff fcd3 	bl	8018360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189ba:	4854      	ldr	r0, [pc, #336]	@ (8018b0c <RadioSetTxConfig+0x204>)
 80189bc:	f002 f8ec 	bl	801ab98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189c0:	4853      	ldr	r0, [pc, #332]	@ (8018b10 <RadioSetTxConfig+0x208>)
 80189c2:	f002 f9bb 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80189c6:	4a53      	ldr	r2, [pc, #332]	@ (8018b14 <RadioSetTxConfig+0x20c>)
 80189c8:	f107 0310 	add.w	r3, r7, #16
 80189cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80189d4:	f107 0310 	add.w	r3, r7, #16
 80189d8:	4618      	mov	r0, r3
 80189da:	f001 fc7c 	bl	801a2d6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80189de:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80189e2:	f001 fcc7 	bl	801a374 <SUBGRF_SetWhiteningSeed>
            break;
 80189e6:	e078      	b.n	8018ada <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80189e8:	4b47      	ldr	r3, [pc, #284]	@ (8018b08 <RadioSetTxConfig+0x200>)
 80189ea:	2201      	movs	r2, #1
 80189ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80189f0:	6a3b      	ldr	r3, [r7, #32]
 80189f2:	b2da      	uxtb	r2, r3
 80189f4:	4b44      	ldr	r3, [pc, #272]	@ (8018b08 <RadioSetTxConfig+0x200>)
 80189f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80189fa:	4a47      	ldr	r2, [pc, #284]	@ (8018b18 <RadioSetTxConfig+0x210>)
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	4413      	add	r3, r2
 8018a00:	781a      	ldrb	r2, [r3, #0]
 8018a02:	4b41      	ldr	r3, [pc, #260]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018a08:	4a3f      	ldr	r2, [pc, #252]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018a0e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d105      	bne.n	8018a24 <RadioSetTxConfig+0x11c>
 8018a18:	6a3b      	ldr	r3, [r7, #32]
 8018a1a:	2b0b      	cmp	r3, #11
 8018a1c:	d008      	beq.n	8018a30 <RadioSetTxConfig+0x128>
 8018a1e:	6a3b      	ldr	r3, [r7, #32]
 8018a20:	2b0c      	cmp	r3, #12
 8018a22:	d005      	beq.n	8018a30 <RadioSetTxConfig+0x128>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	2b01      	cmp	r3, #1
 8018a28:	d107      	bne.n	8018a3a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018a2a:	6a3b      	ldr	r3, [r7, #32]
 8018a2c:	2b0c      	cmp	r3, #12
 8018a2e:	d104      	bne.n	8018a3a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018a30:	4b35      	ldr	r3, [pc, #212]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a32:	2201      	movs	r2, #1
 8018a34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018a38:	e003      	b.n	8018a42 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018a3a:	4b33      	ldr	r3, [pc, #204]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018a42:	4b31      	ldr	r3, [pc, #196]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a44:	2201      	movs	r2, #1
 8018a46:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018a48:	4b2f      	ldr	r3, [pc, #188]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018a4e:	2b05      	cmp	r3, #5
 8018a50:	d004      	beq.n	8018a5c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018a52:	4b2d      	ldr	r3, [pc, #180]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018a58:	2b06      	cmp	r3, #6
 8018a5a:	d10a      	bne.n	8018a72 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018a5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018a5e:	2b0b      	cmp	r3, #11
 8018a60:	d803      	bhi.n	8018a6a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018a62:	4b29      	ldr	r3, [pc, #164]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a64:	220c      	movs	r2, #12
 8018a66:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018a68:	e006      	b.n	8018a78 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018a6a:	4a27      	ldr	r2, [pc, #156]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018a6e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018a70:	e002      	b.n	8018a78 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018a72:	4a25      	ldr	r2, [pc, #148]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018a76:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018a78:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018a7c:	4b22      	ldr	r3, [pc, #136]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a7e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018a80:	4b26      	ldr	r3, [pc, #152]	@ (8018b1c <RadioSetTxConfig+0x214>)
 8018a82:	781a      	ldrb	r2, [r3, #0]
 8018a84:	4b20      	ldr	r3, [pc, #128]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a86:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018a88:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a8e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018a92:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018a96:	4b1c      	ldr	r3, [pc, #112]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018a98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018a9c:	f000 fab3 	bl	8019006 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018aa0:	2001      	movs	r0, #1
 8018aa2:	f7ff fc5d 	bl	8018360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018aa6:	4819      	ldr	r0, [pc, #100]	@ (8018b0c <RadioSetTxConfig+0x204>)
 8018aa8:	f002 f876 	bl	801ab98 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018aac:	4818      	ldr	r0, [pc, #96]	@ (8018b10 <RadioSetTxConfig+0x208>)
 8018aae:	f002 f945 	bl	801ad3c <SUBGRF_SetPacketParams>
            break;
 8018ab2:	e012      	b.n	8018ada <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018ab4:	2004      	movs	r0, #4
 8018ab6:	f7ff fc53 	bl	8018360 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018aba:	4b13      	ldr	r3, [pc, #76]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018abc:	2202      	movs	r2, #2
 8018abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018ac2:	4a11      	ldr	r2, [pc, #68]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018ac4:	6a3b      	ldr	r3, [r7, #32]
 8018ac6:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018aca:	2216      	movs	r2, #22
 8018acc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ad0:	480e      	ldr	r0, [pc, #56]	@ (8018b0c <RadioSetTxConfig+0x204>)
 8018ad2:	f002 f861 	bl	801ab98 <SUBGRF_SetModulationParams>
            break;
 8018ad6:	e000      	b.n	8018ada <RadioSetTxConfig+0x1d2>
            break;
 8018ad8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f002 fb90 	bl	801b204 <SUBGRF_SetRfTxPower>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	4b07      	ldr	r3, [pc, #28]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018aea:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018aee:	4b06      	ldr	r3, [pc, #24]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018af0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018af4:	4618      	mov	r0, r3
 8018af6:	f002 fd54 	bl	801b5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018afa:	4a03      	ldr	r2, [pc, #12]	@ (8018b08 <RadioSetTxConfig+0x200>)
 8018afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018afe:	6053      	str	r3, [r2, #4]
}
 8018b00:	bf00      	nop
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	20001cd0 	.word	0x20001cd0
 8018b0c:	20001d08 	.word	0x20001d08
 8018b10:	20001cde 	.word	0x20001cde
 8018b14:	08020134 	.word	0x08020134
 8018b18:	08020798 	.word	0x08020798
 8018b1c:	2000012c 	.word	0x2000012c

08018b20 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
    return true;
 8018b28:	2301      	movs	r3, #1
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	370c      	adds	r7, #12
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bc80      	pop	{r7}
 8018b32:	4770      	bx	lr

08018b34 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018b34:	b480      	push	{r7}
 8018b36:	b085      	sub	sp, #20
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018b42:	79fb      	ldrb	r3, [r7, #7]
 8018b44:	2b0a      	cmp	r3, #10
 8018b46:	d83e      	bhi.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
 8018b48:	a201      	add	r2, pc, #4	@ (adr r2, 8018b50 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b4e:	bf00      	nop
 8018b50:	08018b7d 	.word	0x08018b7d
 8018b54:	08018b8d 	.word	0x08018b8d
 8018b58:	08018b9d 	.word	0x08018b9d
 8018b5c:	08018bad 	.word	0x08018bad
 8018b60:	08018bb5 	.word	0x08018bb5
 8018b64:	08018bbb 	.word	0x08018bbb
 8018b68:	08018bc1 	.word	0x08018bc1
 8018b6c:	08018bc7 	.word	0x08018bc7
 8018b70:	08018b85 	.word	0x08018b85
 8018b74:	08018b95 	.word	0x08018b95
 8018b78:	08018ba5 	.word	0x08018ba5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018b7c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018b80:	60fb      	str	r3, [r7, #12]
        break;
 8018b82:	e020      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018b84:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018b88:	60fb      	str	r3, [r7, #12]
        break;
 8018b8a:	e01c      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018b8c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018b90:	60fb      	str	r3, [r7, #12]
        break;
 8018b92:	e018      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018b94:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018b98:	60fb      	str	r3, [r7, #12]
        break;
 8018b9a:	e014      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018b9c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018ba0:	60fb      	str	r3, [r7, #12]
        break;
 8018ba2:	e010      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018ba4:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018ba8:	60fb      	str	r3, [r7, #12]
        break;
 8018baa:	e00c      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018bac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018bb0:	60fb      	str	r3, [r7, #12]
        break;
 8018bb2:	e008      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018bb4:	4b07      	ldr	r3, [pc, #28]	@ (8018bd4 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018bb6:	60fb      	str	r3, [r7, #12]
        break;
 8018bb8:	e005      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018bba:	4b07      	ldr	r3, [pc, #28]	@ (8018bd8 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018bbc:	60fb      	str	r3, [r7, #12]
        break;
 8018bbe:	e002      	b.n	8018bc6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018bc0:	4b06      	ldr	r3, [pc, #24]	@ (8018bdc <RadioGetLoRaBandwidthInHz+0xa8>)
 8018bc2:	60fb      	str	r3, [r7, #12]
        break;
 8018bc4:	bf00      	nop
    }

    return bandwidthInHz;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3714      	adds	r7, #20
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bc80      	pop	{r7}
 8018bd0:	4770      	bx	lr
 8018bd2:	bf00      	nop
 8018bd4:	0001e848 	.word	0x0001e848
 8018bd8:	0003d090 	.word	0x0003d090
 8018bdc:	0007a120 	.word	0x0007a120

08018be0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018be0:	b480      	push	{r7}
 8018be2:	b083      	sub	sp, #12
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	4608      	mov	r0, r1
 8018bea:	4611      	mov	r1, r2
 8018bec:	461a      	mov	r2, r3
 8018bee:	4603      	mov	r3, r0
 8018bf0:	70fb      	strb	r3, [r7, #3]
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	803b      	strh	r3, [r7, #0]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018bfa:	883b      	ldrh	r3, [r7, #0]
 8018bfc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018bfe:	78ba      	ldrb	r2, [r7, #2]
 8018c00:	f082 0201 	eor.w	r2, r2, #1
 8018c04:	b2d2      	uxtb	r2, r2
 8018c06:	2a00      	cmp	r2, #0
 8018c08:	d001      	beq.n	8018c0e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018c0a:	2208      	movs	r2, #8
 8018c0c:	e000      	b.n	8018c10 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018c0e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018c10:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018c12:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018c16:	7c3b      	ldrb	r3, [r7, #16]
 8018c18:	7d39      	ldrb	r1, [r7, #20]
 8018c1a:	2900      	cmp	r1, #0
 8018c1c:	d001      	beq.n	8018c22 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018c1e:	2102      	movs	r1, #2
 8018c20:	e000      	b.n	8018c24 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018c22:	2100      	movs	r1, #0
 8018c24:	440b      	add	r3, r1
 8018c26:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018c28:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	370c      	adds	r7, #12
 8018c2e:	46bd      	mov	sp, r7
 8018c30:	bc80      	pop	{r7}
 8018c32:	4770      	bx	lr

08018c34 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018c34:	b480      	push	{r7}
 8018c36:	b08b      	sub	sp, #44	@ 0x2c
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	4611      	mov	r1, r2
 8018c40:	461a      	mov	r2, r3
 8018c42:	460b      	mov	r3, r1
 8018c44:	71fb      	strb	r3, [r7, #7]
 8018c46:	4613      	mov	r3, r2
 8018c48:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018c4a:	79fb      	ldrb	r3, [r7, #7]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018c50:	2300      	movs	r3, #0
 8018c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018c56:	68bb      	ldr	r3, [r7, #8]
 8018c58:	2b05      	cmp	r3, #5
 8018c5a:	d002      	beq.n	8018c62 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	2b06      	cmp	r3, #6
 8018c60:	d104      	bne.n	8018c6c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018c62:	88bb      	ldrh	r3, [r7, #4]
 8018c64:	2b0b      	cmp	r3, #11
 8018c66:	d801      	bhi.n	8018c6c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018c68:	230c      	movs	r3, #12
 8018c6a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d105      	bne.n	8018c7e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	2b0b      	cmp	r3, #11
 8018c76:	d008      	beq.n	8018c8a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	2b0c      	cmp	r3, #12
 8018c7c:	d005      	beq.n	8018c8a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	2b01      	cmp	r3, #1
 8018c82:	d105      	bne.n	8018c90 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	2b0c      	cmp	r3, #12
 8018c88:	d102      	bne.n	8018c90 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018c8a:	2301      	movs	r3, #1
 8018c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018c90:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018c94:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018c96:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018c9a:	2a00      	cmp	r2, #0
 8018c9c:	d001      	beq.n	8018ca2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018c9e:	2210      	movs	r2, #16
 8018ca0:	e000      	b.n	8018ca4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018ca2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018ca4:	4413      	add	r3, r2
 8018ca6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018cac:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018cae:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018cb2:	2a00      	cmp	r2, #0
 8018cb4:	d001      	beq.n	8018cba <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	e000      	b.n	8018cbc <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018cba:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018cbc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018cbe:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018cc0:	68bb      	ldr	r3, [r7, #8]
 8018cc2:	2b06      	cmp	r3, #6
 8018cc4:	d803      	bhi.n	8018cce <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	009b      	lsls	r3, r3, #2
 8018cca:	623b      	str	r3, [r7, #32]
 8018ccc:	e00e      	b.n	8018cec <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018cce:	69fb      	ldr	r3, [r7, #28]
 8018cd0:	3308      	adds	r3, #8
 8018cd2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d004      	beq.n	8018ce6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	3b02      	subs	r3, #2
 8018ce0:	009b      	lsls	r3, r3, #2
 8018ce2:	623b      	str	r3, [r7, #32]
 8018ce4:	e002      	b.n	8018cec <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	009b      	lsls	r3, r3, #2
 8018cea:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018cec:	69fb      	ldr	r3, [r7, #28]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	da01      	bge.n	8018cf6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018cf6:	69fa      	ldr	r2, [r7, #28]
 8018cf8:	6a3b      	ldr	r3, [r7, #32]
 8018cfa:	4413      	add	r3, r2
 8018cfc:	1e5a      	subs	r2, r3, #1
 8018cfe:	6a3b      	ldr	r3, [r7, #32]
 8018d00:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d04:	697a      	ldr	r2, [r7, #20]
 8018d06:	fb03 f202 	mul.w	r2, r3, r2
 8018d0a:	88bb      	ldrh	r3, [r7, #4]
 8018d0c:	4413      	add	r3, r2
    int32_t intermediate =
 8018d0e:	330c      	adds	r3, #12
 8018d10:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018d12:	68bb      	ldr	r3, [r7, #8]
 8018d14:	2b06      	cmp	r3, #6
 8018d16:	d802      	bhi.n	8018d1e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018d18:	69bb      	ldr	r3, [r7, #24]
 8018d1a:	3302      	adds	r3, #2
 8018d1c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018d1e:	69bb      	ldr	r3, [r7, #24]
 8018d20:	009b      	lsls	r3, r3, #2
 8018d22:	1c5a      	adds	r2, r3, #1
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	3b02      	subs	r3, #2
 8018d28:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	372c      	adds	r7, #44	@ 0x2c
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bc80      	pop	{r7}
 8018d34:	4770      	bx	lr
	...

08018d38 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b08a      	sub	sp, #40	@ 0x28
 8018d3c:	af04      	add	r7, sp, #16
 8018d3e:	60b9      	str	r1, [r7, #8]
 8018d40:	607a      	str	r2, [r7, #4]
 8018d42:	461a      	mov	r2, r3
 8018d44:	4603      	mov	r3, r0
 8018d46:	73fb      	strb	r3, [r7, #15]
 8018d48:	4613      	mov	r3, r2
 8018d4a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018d50:	2301      	movs	r3, #1
 8018d52:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018d54:	7bfb      	ldrb	r3, [r7, #15]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d002      	beq.n	8018d60 <RadioTimeOnAir+0x28>
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d017      	beq.n	8018d8e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018d5e:	e035      	b.n	8018dcc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018d60:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8018d64:	8c3a      	ldrh	r2, [r7, #32]
 8018d66:	7bb9      	ldrb	r1, [r7, #14]
 8018d68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018d6c:	9301      	str	r3, [sp, #4]
 8018d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	4603      	mov	r3, r0
 8018d76:	6878      	ldr	r0, [r7, #4]
 8018d78:	f7ff ff32 	bl	8018be0 <RadioGetGfskTimeOnAirNumerator>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018d82:	fb02 f303 	mul.w	r3, r2, r3
 8018d86:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	613b      	str	r3, [r7, #16]
        break;
 8018d8c:	e01e      	b.n	8018dcc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018d8e:	8c39      	ldrh	r1, [r7, #32]
 8018d90:	7bba      	ldrb	r2, [r7, #14]
 8018d92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018d96:	9302      	str	r3, [sp, #8]
 8018d98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018d9c:	9301      	str	r3, [sp, #4]
 8018d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	460b      	mov	r3, r1
 8018da6:	6879      	ldr	r1, [r7, #4]
 8018da8:	68b8      	ldr	r0, [r7, #8]
 8018daa:	f7ff ff43 	bl	8018c34 <RadioGetLoRaTimeOnAirNumerator>
 8018dae:	4603      	mov	r3, r0
 8018db0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018db4:	fb02 f303 	mul.w	r3, r2, r3
 8018db8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018dba:	4a0a      	ldr	r2, [pc, #40]	@ (8018de4 <RadioTimeOnAir+0xac>)
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7ff feb6 	bl	8018b34 <RadioGetLoRaBandwidthInHz>
 8018dc8:	6138      	str	r0, [r7, #16]
        break;
 8018dca:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018dcc:	697a      	ldr	r2, [r7, #20]
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	1e5a      	subs	r2, r3, #1
 8018dd4:	693b      	ldr	r3, [r7, #16]
 8018dd6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3718      	adds	r7, #24
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	08020798 	.word	0x08020798

08018de8 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
 8018df0:	460b      	mov	r3, r1
 8018df2:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018df4:	2300      	movs	r3, #0
 8018df6:	2200      	movs	r2, #0
 8018df8:	f240 2101 	movw	r1, #513	@ 0x201
 8018dfc:	f240 2001 	movw	r0, #513	@ 0x201
 8018e00:	f001 fd34 	bl	801a86c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018e04:	4b71      	ldr	r3, [pc, #452]	@ (8018fcc <RadioSend+0x1e4>)
 8018e06:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018e0a:	2101      	movs	r1, #1
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f002 f9d1 	bl	801b1b4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018e12:	4b6e      	ldr	r3, [pc, #440]	@ (8018fcc <RadioSend+0x1e4>)
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d112      	bne.n	8018e40 <RadioSend+0x58>
 8018e1a:	4b6c      	ldr	r3, [pc, #432]	@ (8018fcc <RadioSend+0x1e4>)
 8018e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018e20:	2b06      	cmp	r3, #6
 8018e22:	d10d      	bne.n	8018e40 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018e24:	f640 0089 	movw	r0, #2185	@ 0x889
 8018e28:	f002 f8e4 	bl	801aff4 <SUBGRF_ReadRegister>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	f023 0304 	bic.w	r3, r3, #4
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	4619      	mov	r1, r3
 8018e36:	f640 0089 	movw	r0, #2185	@ 0x889
 8018e3a:	f002 f8c7 	bl	801afcc <SUBGRF_WriteRegister>
 8018e3e:	e00c      	b.n	8018e5a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018e40:	f640 0089 	movw	r0, #2185	@ 0x889
 8018e44:	f002 f8d6 	bl	801aff4 <SUBGRF_ReadRegister>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	f043 0304 	orr.w	r3, r3, #4
 8018e4e:	b2db      	uxtb	r3, r3
 8018e50:	4619      	mov	r1, r3
 8018e52:	f640 0089 	movw	r0, #2185	@ 0x889
 8018e56:	f002 f8b9 	bl	801afcc <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8018fcc <RadioSend+0x1e4>)
 8018e5c:	781b      	ldrb	r3, [r3, #0]
 8018e5e:	2b04      	cmp	r3, #4
 8018e60:	f200 80a7 	bhi.w	8018fb2 <RadioSend+0x1ca>
 8018e64:	a201      	add	r2, pc, #4	@ (adr r2, 8018e6c <RadioSend+0x84>)
 8018e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e6a:	bf00      	nop
 8018e6c:	08018e9b 	.word	0x08018e9b
 8018e70:	08018e81 	.word	0x08018e81
 8018e74:	08018e9b 	.word	0x08018e9b
 8018e78:	08018efb 	.word	0x08018efb
 8018e7c:	08018f1b 	.word	0x08018f1b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018e80:	4a52      	ldr	r2, [pc, #328]	@ (8018fcc <RadioSend+0x1e4>)
 8018e82:	78fb      	ldrb	r3, [r7, #3]
 8018e84:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e86:	4852      	ldr	r0, [pc, #328]	@ (8018fd0 <RadioSend+0x1e8>)
 8018e88:	f001 ff58 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018e8c:	78fb      	ldrb	r3, [r7, #3]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	4619      	mov	r1, r3
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f001 fa0c 	bl	801a2b0 <SUBGRF_SendPayload>
            break;
 8018e98:	e08c      	b.n	8018fb4 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018e9a:	f002 fb74 	bl	801b586 <RFW_Is_Init>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b01      	cmp	r3, #1
 8018ea2:	d11d      	bne.n	8018ee0 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018ea4:	f107 020d 	add.w	r2, r7, #13
 8018ea8:	78fb      	ldrb	r3, [r7, #3]
 8018eaa:	4619      	mov	r1, r3
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f002 fb82 	bl	801b5b6 <RFW_TransmitInit>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d10c      	bne.n	8018ed2 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018eb8:	7b7a      	ldrb	r2, [r7, #13]
 8018eba:	4b44      	ldr	r3, [pc, #272]	@ (8018fcc <RadioSend+0x1e4>)
 8018ebc:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ebe:	4844      	ldr	r0, [pc, #272]	@ (8018fd0 <RadioSend+0x1e8>)
 8018ec0:	f001 ff3c 	bl	801ad3c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018ec4:	7b7b      	ldrb	r3, [r7, #13]
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	4619      	mov	r1, r3
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f001 f9f0 	bl	801a2b0 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018ed0:	e070      	b.n	8018fb4 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018ed2:	4b40      	ldr	r3, [pc, #256]	@ (8018fd4 <RadioSend+0x1ec>)
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	2100      	movs	r1, #0
 8018ed8:	2002      	movs	r0, #2
 8018eda:	f003 fc8b 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
 8018ede:	e072      	b.n	8018fc6 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8018fcc <RadioSend+0x1e4>)
 8018ee2:	78fb      	ldrb	r3, [r7, #3]
 8018ee4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ee6:	483a      	ldr	r0, [pc, #232]	@ (8018fd0 <RadioSend+0x1e8>)
 8018ee8:	f001 ff28 	bl	801ad3c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018eec:	78fb      	ldrb	r3, [r7, #3]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	4619      	mov	r1, r3
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f001 f9dc 	bl	801a2b0 <SUBGRF_SendPayload>
            break;
 8018ef8:	e05c      	b.n	8018fb4 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018efa:	4b34      	ldr	r3, [pc, #208]	@ (8018fcc <RadioSend+0x1e4>)
 8018efc:	2202      	movs	r2, #2
 8018efe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018f00:	4a32      	ldr	r2, [pc, #200]	@ (8018fcc <RadioSend+0x1e4>)
 8018f02:	78fb      	ldrb	r3, [r7, #3]
 8018f04:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f06:	4832      	ldr	r0, [pc, #200]	@ (8018fd0 <RadioSend+0x1e8>)
 8018f08:	f001 ff18 	bl	801ad3c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018f0c:	78fb      	ldrb	r3, [r7, #3]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	4619      	mov	r1, r3
 8018f12:	6878      	ldr	r0, [r7, #4]
 8018f14:	f001 f9cc 	bl	801a2b0 <SUBGRF_SendPayload>
            break;
 8018f18:	e04c      	b.n	8018fb4 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018f1a:	78fb      	ldrb	r3, [r7, #3]
 8018f1c:	461a      	mov	r2, r3
 8018f1e:	6879      	ldr	r1, [r7, #4]
 8018f20:	482d      	ldr	r0, [pc, #180]	@ (8018fd8 <RadioSend+0x1f0>)
 8018f22:	f000 fcbc 	bl	801989e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018f26:	4b29      	ldr	r3, [pc, #164]	@ (8018fcc <RadioSend+0x1e4>)
 8018f28:	2202      	movs	r2, #2
 8018f2a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018f2c:	78fb      	ldrb	r3, [r7, #3]
 8018f2e:	3301      	adds	r3, #1
 8018f30:	b2da      	uxtb	r2, r3
 8018f32:	4b26      	ldr	r3, [pc, #152]	@ (8018fcc <RadioSend+0x1e4>)
 8018f34:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f36:	4826      	ldr	r0, [pc, #152]	@ (8018fd0 <RadioSend+0x1e8>)
 8018f38:	f001 ff00 	bl	801ad3c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018f3c:	2100      	movs	r1, #0
 8018f3e:	20f1      	movs	r0, #241	@ 0xf1
 8018f40:	f000 f95c 	bl	80191fc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018f44:	2100      	movs	r1, #0
 8018f46:	20f0      	movs	r0, #240	@ 0xf0
 8018f48:	f000 f958 	bl	80191fc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8018fcc <RadioSend+0x1e4>)
 8018f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018f50:	2b64      	cmp	r3, #100	@ 0x64
 8018f52:	d108      	bne.n	8018f66 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018f54:	2170      	movs	r1, #112	@ 0x70
 8018f56:	20f3      	movs	r0, #243	@ 0xf3
 8018f58:	f000 f950 	bl	80191fc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018f5c:	211d      	movs	r1, #29
 8018f5e:	20f2      	movs	r0, #242	@ 0xf2
 8018f60:	f000 f94c 	bl	80191fc <RadioWrite>
 8018f64:	e007      	b.n	8018f76 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018f66:	21e1      	movs	r1, #225	@ 0xe1
 8018f68:	20f3      	movs	r0, #243	@ 0xf3
 8018f6a:	f000 f947 	bl	80191fc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018f6e:	2104      	movs	r1, #4
 8018f70:	20f2      	movs	r0, #242	@ 0xf2
 8018f72:	f000 f943 	bl	80191fc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018f76:	78fb      	ldrb	r3, [r7, #3]
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	00db      	lsls	r3, r3, #3
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	3302      	adds	r3, #2
 8018f80:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018f82:	89fb      	ldrh	r3, [r7, #14]
 8018f84:	0a1b      	lsrs	r3, r3, #8
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	4619      	mov	r1, r3
 8018f8c:	20f4      	movs	r0, #244	@ 0xf4
 8018f8e:	f000 f935 	bl	80191fc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018f92:	89fb      	ldrh	r3, [r7, #14]
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	4619      	mov	r1, r3
 8018f98:	20f5      	movs	r0, #245	@ 0xf5
 8018f9a:	f000 f92f 	bl	80191fc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8018f9e:	78fb      	ldrb	r3, [r7, #3]
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	b2db      	uxtb	r3, r3
 8018fa4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018fa8:	4619      	mov	r1, r3
 8018faa:	480b      	ldr	r0, [pc, #44]	@ (8018fd8 <RadioSend+0x1f0>)
 8018fac:	f001 f980 	bl	801a2b0 <SUBGRF_SendPayload>
            break;
 8018fb0:	e000      	b.n	8018fb4 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018fb2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018fb4:	4b05      	ldr	r3, [pc, #20]	@ (8018fcc <RadioSend+0x1e4>)
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	4619      	mov	r1, r3
 8018fba:	4808      	ldr	r0, [pc, #32]	@ (8018fdc <RadioSend+0x1f4>)
 8018fbc:	f003 fa80 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018fc0:	4806      	ldr	r0, [pc, #24]	@ (8018fdc <RadioSend+0x1f4>)
 8018fc2:	f003 f99f 	bl	801c304 <UTIL_TIMER_Start>
}
 8018fc6:	3710      	adds	r7, #16
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}
 8018fcc:	20001cd0 	.word	0x20001cd0
 8018fd0:	20001cde 	.word	0x20001cde
 8018fd4:	0802013c 	.word	0x0802013c
 8018fd8:	20001bcc 	.word	0x20001bcc
 8018fdc:	20001d2c 	.word	0x20001d2c

08018fe0 <RadioSleep>:

static void RadioSleep( void )
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018fea:	793b      	ldrb	r3, [r7, #4]
 8018fec:	f043 0304 	orr.w	r3, r3, #4
 8018ff0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018ff2:	7938      	ldrb	r0, [r7, #4]
 8018ff4:	f001 fa38 	bl	801a468 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018ff8:	2002      	movs	r0, #2
 8018ffa:	f7e9 fc5f 	bl	80028bc <HAL_Delay>
}
 8018ffe:	bf00      	nop
 8019000:	3708      	adds	r7, #8
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <RadioStandby>:

static void RadioStandby( void )
{
 8019006:	b580      	push	{r7, lr}
 8019008:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801900a:	2000      	movs	r0, #0
 801900c:	f001 fa5e 	bl	801a4cc <SUBGRF_SetStandby>
}
 8019010:	bf00      	nop
 8019012:	bd80      	pop	{r7, pc}

08019014 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b082      	sub	sp, #8
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801901c:	f002 fab3 	bl	801b586 <RFW_Is_Init>
 8019020:	4603      	mov	r3, r0
 8019022:	2b01      	cmp	r3, #1
 8019024:	d102      	bne.n	801902c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019026:	f002 fad6 	bl	801b5d6 <RFW_ReceiveInit>
 801902a:	e007      	b.n	801903c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801902c:	2300      	movs	r3, #0
 801902e:	2200      	movs	r2, #0
 8019030:	f240 2162 	movw	r1, #610	@ 0x262
 8019034:	f240 2062 	movw	r0, #610	@ 0x262
 8019038:	f001 fc18 	bl	801a86c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d006      	beq.n	8019050 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019042:	6879      	ldr	r1, [r7, #4]
 8019044:	4811      	ldr	r0, [pc, #68]	@ (801908c <RadioRx+0x78>)
 8019046:	f003 fa3b 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801904a:	4810      	ldr	r0, [pc, #64]	@ (801908c <RadioRx+0x78>)
 801904c:	f003 f95a 	bl	801c304 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019050:	4b0f      	ldr	r3, [pc, #60]	@ (8019090 <RadioRx+0x7c>)
 8019052:	2200      	movs	r2, #0
 8019054:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019056:	4b0e      	ldr	r3, [pc, #56]	@ (8019090 <RadioRx+0x7c>)
 8019058:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801905c:	2100      	movs	r1, #0
 801905e:	4618      	mov	r0, r3
 8019060:	f002 f8a8 	bl	801b1b4 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019064:	4b0a      	ldr	r3, [pc, #40]	@ (8019090 <RadioRx+0x7c>)
 8019066:	785b      	ldrb	r3, [r3, #1]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d004      	beq.n	8019076 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801906c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019070:	f001 fa68 	bl	801a544 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019074:	e005      	b.n	8019082 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019076:	4b06      	ldr	r3, [pc, #24]	@ (8019090 <RadioRx+0x7c>)
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	019b      	lsls	r3, r3, #6
 801907c:	4618      	mov	r0, r3
 801907e:	f001 fa61 	bl	801a544 <SUBGRF_SetRx>
}
 8019082:	bf00      	nop
 8019084:	3708      	adds	r7, #8
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}
 801908a:	bf00      	nop
 801908c:	20001d44 	.word	0x20001d44
 8019090:	20001cd0 	.word	0x20001cd0

08019094 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801909c:	f002 fa73 	bl	801b586 <RFW_Is_Init>
 80190a0:	4603      	mov	r3, r0
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	d102      	bne.n	80190ac <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80190a6:	f002 fa96 	bl	801b5d6 <RFW_ReceiveInit>
 80190aa:	e007      	b.n	80190bc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80190ac:	2300      	movs	r3, #0
 80190ae:	2200      	movs	r2, #0
 80190b0:	f240 2162 	movw	r1, #610	@ 0x262
 80190b4:	f240 2062 	movw	r0, #610	@ 0x262
 80190b8:	f001 fbd8 	bl	801a86c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d006      	beq.n	80190d0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80190c2:	6879      	ldr	r1, [r7, #4]
 80190c4:	4811      	ldr	r0, [pc, #68]	@ (801910c <RadioRxBoosted+0x78>)
 80190c6:	f003 f9fb 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80190ca:	4810      	ldr	r0, [pc, #64]	@ (801910c <RadioRxBoosted+0x78>)
 80190cc:	f003 f91a 	bl	801c304 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80190d0:	4b0f      	ldr	r3, [pc, #60]	@ (8019110 <RadioRxBoosted+0x7c>)
 80190d2:	2200      	movs	r2, #0
 80190d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80190d6:	4b0e      	ldr	r3, [pc, #56]	@ (8019110 <RadioRxBoosted+0x7c>)
 80190d8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80190dc:	2100      	movs	r1, #0
 80190de:	4618      	mov	r0, r3
 80190e0:	f002 f868 	bl	801b1b4 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80190e4:	4b0a      	ldr	r3, [pc, #40]	@ (8019110 <RadioRxBoosted+0x7c>)
 80190e6:	785b      	ldrb	r3, [r3, #1]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d004      	beq.n	80190f6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80190ec:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80190f0:	f001 fa48 	bl	801a584 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80190f4:	e005      	b.n	8019102 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80190f6:	4b06      	ldr	r3, [pc, #24]	@ (8019110 <RadioRxBoosted+0x7c>)
 80190f8:	689b      	ldr	r3, [r3, #8]
 80190fa:	019b      	lsls	r3, r3, #6
 80190fc:	4618      	mov	r0, r3
 80190fe:	f001 fa41 	bl	801a584 <SUBGRF_SetRxBoosted>
}
 8019102:	bf00      	nop
 8019104:	3708      	adds	r7, #8
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}
 801910a:	bf00      	nop
 801910c:	20001d44 	.word	0x20001d44
 8019110:	20001cd0 	.word	0x20001cd0

08019114 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b082      	sub	sp, #8
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
 801911c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	005a      	lsls	r2, r3, #1
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	4413      	add	r3, r2
 8019126:	4a0c      	ldr	r2, [pc, #48]	@ (8019158 <RadioSetRxDutyCycle+0x44>)
 8019128:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801912a:	2300      	movs	r3, #0
 801912c:	2200      	movs	r2, #0
 801912e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019132:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019136:	f001 fb99 	bl	801a86c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801913a:	4b07      	ldr	r3, [pc, #28]	@ (8019158 <RadioSetRxDutyCycle+0x44>)
 801913c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019140:	2100      	movs	r1, #0
 8019142:	4618      	mov	r0, r3
 8019144:	f002 f836 	bl	801b1b4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019148:	6839      	ldr	r1, [r7, #0]
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f001 fa3e 	bl	801a5cc <SUBGRF_SetRxDutyCycle>
}
 8019150:	bf00      	nop
 8019152:	3708      	adds	r7, #8
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	20001cd0 	.word	0x20001cd0

0801915c <RadioStartCad>:

static void RadioStartCad( void )
{
 801915c:	b580      	push	{r7, lr}
 801915e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019160:	4b09      	ldr	r3, [pc, #36]	@ (8019188 <RadioStartCad+0x2c>)
 8019162:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019166:	2100      	movs	r1, #0
 8019168:	4618      	mov	r0, r3
 801916a:	f002 f823 	bl	801b1b4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801916e:	2300      	movs	r3, #0
 8019170:	2200      	movs	r2, #0
 8019172:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8019176:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801917a:	f001 fb77 	bl	801a86c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801917e:	f001 fa51 	bl	801a624 <SUBGRF_SetCad>
}
 8019182:	bf00      	nop
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	20001cd0 	.word	0x20001cd0

0801918c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b084      	sub	sp, #16
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	460b      	mov	r3, r1
 8019196:	70fb      	strb	r3, [r7, #3]
 8019198:	4613      	mov	r3, r2
 801919a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801919c:	883b      	ldrh	r3, [r7, #0]
 801919e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80191a2:	fb02 f303 	mul.w	r3, r2, r3
 80191a6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80191a8:	6878      	ldr	r0, [r7, #4]
 80191aa:	f001 fbbb 	bl	801a924 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80191ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80191b2:	4618      	mov	r0, r3
 80191b4:	f002 f826 	bl	801b204 <SUBGRF_SetRfTxPower>
 80191b8:	4603      	mov	r3, r0
 80191ba:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80191bc:	7afb      	ldrb	r3, [r7, #11]
 80191be:	2101      	movs	r1, #1
 80191c0:	4618      	mov	r0, r3
 80191c2:	f001 fff7 	bl	801b1b4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80191c6:	f001 fa3b 	bl	801a640 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80191ca:	68f9      	ldr	r1, [r7, #12]
 80191cc:	4804      	ldr	r0, [pc, #16]	@ (80191e0 <RadioSetTxContinuousWave+0x54>)
 80191ce:	f003 f977 	bl	801c4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80191d2:	4803      	ldr	r0, [pc, #12]	@ (80191e0 <RadioSetTxContinuousWave+0x54>)
 80191d4:	f003 f896 	bl	801c304 <UTIL_TIMER_Start>
}
 80191d8:	bf00      	nop
 80191da:	3710      	adds	r7, #16
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	20001d2c 	.word	0x20001d2c

080191e4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b082      	sub	sp, #8
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	4603      	mov	r3, r0
 80191ec:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80191ee:	f001 fe5a 	bl	801aea6 <SUBGRF_GetRssiInst>
 80191f2:	4603      	mov	r3, r0
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3708      	adds	r7, #8
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b082      	sub	sp, #8
 8019200:	af00      	add	r7, sp, #0
 8019202:	4603      	mov	r3, r0
 8019204:	460a      	mov	r2, r1
 8019206:	80fb      	strh	r3, [r7, #6]
 8019208:	4613      	mov	r3, r2
 801920a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801920c:	797a      	ldrb	r2, [r7, #5]
 801920e:	88fb      	ldrh	r3, [r7, #6]
 8019210:	4611      	mov	r1, r2
 8019212:	4618      	mov	r0, r3
 8019214:	f001 feda 	bl	801afcc <SUBGRF_WriteRegister>
}
 8019218:	bf00      	nop
 801921a:	3708      	adds	r7, #8
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}

08019220 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	af00      	add	r7, sp, #0
 8019226:	4603      	mov	r3, r0
 8019228:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801922a:	88fb      	ldrh	r3, [r7, #6]
 801922c:	4618      	mov	r0, r3
 801922e:	f001 fee1 	bl	801aff4 <SUBGRF_ReadRegister>
 8019232:	4603      	mov	r3, r0
}
 8019234:	4618      	mov	r0, r3
 8019236:	3708      	adds	r7, #8
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	4603      	mov	r3, r0
 8019244:	6039      	str	r1, [r7, #0]
 8019246:	80fb      	strh	r3, [r7, #6]
 8019248:	4613      	mov	r3, r2
 801924a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801924c:	797b      	ldrb	r3, [r7, #5]
 801924e:	b29a      	uxth	r2, r3
 8019250:	88fb      	ldrh	r3, [r7, #6]
 8019252:	6839      	ldr	r1, [r7, #0]
 8019254:	4618      	mov	r0, r3
 8019256:	f001 fee1 	bl	801b01c <SUBGRF_WriteRegisters>
}
 801925a:	bf00      	nop
 801925c:	3708      	adds	r7, #8
 801925e:	46bd      	mov	sp, r7
 8019260:	bd80      	pop	{r7, pc}

08019262 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019262:	b580      	push	{r7, lr}
 8019264:	b082      	sub	sp, #8
 8019266:	af00      	add	r7, sp, #0
 8019268:	4603      	mov	r3, r0
 801926a:	6039      	str	r1, [r7, #0]
 801926c:	80fb      	strh	r3, [r7, #6]
 801926e:	4613      	mov	r3, r2
 8019270:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019272:	797b      	ldrb	r3, [r7, #5]
 8019274:	b29a      	uxth	r2, r3
 8019276:	88fb      	ldrh	r3, [r7, #6]
 8019278:	6839      	ldr	r1, [r7, #0]
 801927a:	4618      	mov	r0, r3
 801927c:	f001 fef0 	bl	801b060 <SUBGRF_ReadRegisters>
}
 8019280:	bf00      	nop
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
 801928e:	4603      	mov	r3, r0
 8019290:	460a      	mov	r2, r1
 8019292:	71fb      	strb	r3, [r7, #7]
 8019294:	4613      	mov	r3, r2
 8019296:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019298:	79fb      	ldrb	r3, [r7, #7]
 801929a:	2b01      	cmp	r3, #1
 801929c:	d10a      	bne.n	80192b4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801929e:	4a0e      	ldr	r2, [pc, #56]	@ (80192d8 <RadioSetMaxPayloadLength+0x50>)
 80192a0:	79bb      	ldrb	r3, [r7, #6]
 80192a2:	7013      	strb	r3, [r2, #0]
 80192a4:	4b0c      	ldr	r3, [pc, #48]	@ (80192d8 <RadioSetMaxPayloadLength+0x50>)
 80192a6:	781a      	ldrb	r2, [r3, #0]
 80192a8:	4b0c      	ldr	r3, [pc, #48]	@ (80192dc <RadioSetMaxPayloadLength+0x54>)
 80192aa:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192ac:	480c      	ldr	r0, [pc, #48]	@ (80192e0 <RadioSetMaxPayloadLength+0x58>)
 80192ae:	f001 fd45 	bl	801ad3c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80192b2:	e00d      	b.n	80192d0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80192b4:	4b09      	ldr	r3, [pc, #36]	@ (80192dc <RadioSetMaxPayloadLength+0x54>)
 80192b6:	7d5b      	ldrb	r3, [r3, #21]
 80192b8:	2b01      	cmp	r3, #1
 80192ba:	d109      	bne.n	80192d0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80192bc:	4a06      	ldr	r2, [pc, #24]	@ (80192d8 <RadioSetMaxPayloadLength+0x50>)
 80192be:	79bb      	ldrb	r3, [r7, #6]
 80192c0:	7013      	strb	r3, [r2, #0]
 80192c2:	4b05      	ldr	r3, [pc, #20]	@ (80192d8 <RadioSetMaxPayloadLength+0x50>)
 80192c4:	781a      	ldrb	r2, [r3, #0]
 80192c6:	4b05      	ldr	r3, [pc, #20]	@ (80192dc <RadioSetMaxPayloadLength+0x54>)
 80192c8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192ca:	4805      	ldr	r0, [pc, #20]	@ (80192e0 <RadioSetMaxPayloadLength+0x58>)
 80192cc:	f001 fd36 	bl	801ad3c <SUBGRF_SetPacketParams>
}
 80192d0:	bf00      	nop
 80192d2:	3708      	adds	r7, #8
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	2000012c 	.word	0x2000012c
 80192dc:	20001cd0 	.word	0x20001cd0
 80192e0:	20001cde 	.word	0x20001cde

080192e4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b082      	sub	sp, #8
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	4603      	mov	r3, r0
 80192ec:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80192ee:	4a13      	ldr	r2, [pc, #76]	@ (801933c <RadioSetPublicNetwork+0x58>)
 80192f0:	79fb      	ldrb	r3, [r7, #7]
 80192f2:	7313      	strb	r3, [r2, #12]
 80192f4:	4b11      	ldr	r3, [pc, #68]	@ (801933c <RadioSetPublicNetwork+0x58>)
 80192f6:	7b1a      	ldrb	r2, [r3, #12]
 80192f8:	4b10      	ldr	r3, [pc, #64]	@ (801933c <RadioSetPublicNetwork+0x58>)
 80192fa:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80192fc:	2001      	movs	r0, #1
 80192fe:	f7ff f82f 	bl	8018360 <RadioSetModem>
    if( enable == true )
 8019302:	79fb      	ldrb	r3, [r7, #7]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d00a      	beq.n	801931e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019308:	2134      	movs	r1, #52	@ 0x34
 801930a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801930e:	f001 fe5d 	bl	801afcc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019312:	2144      	movs	r1, #68	@ 0x44
 8019314:	f240 7041 	movw	r0, #1857	@ 0x741
 8019318:	f001 fe58 	bl	801afcc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801931c:	e009      	b.n	8019332 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801931e:	2114      	movs	r1, #20
 8019320:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019324:	f001 fe52 	bl	801afcc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019328:	2124      	movs	r1, #36	@ 0x24
 801932a:	f240 7041 	movw	r0, #1857	@ 0x741
 801932e:	f001 fe4d 	bl	801afcc <SUBGRF_WriteRegister>
}
 8019332:	bf00      	nop
 8019334:	3708      	adds	r7, #8
 8019336:	46bd      	mov	sp, r7
 8019338:	bd80      	pop	{r7, pc}
 801933a:	bf00      	nop
 801933c:	20001cd0 	.word	0x20001cd0

08019340 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019340:	b580      	push	{r7, lr}
 8019342:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019344:	f001 ff92 	bl	801b26c <SUBGRF_GetRadioWakeUpTime>
 8019348:	4603      	mov	r3, r0
 801934a:	3303      	adds	r3, #3
}
 801934c:	4618      	mov	r0, r3
 801934e:	bd80      	pop	{r7, pc}

08019350 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019358:	f000 f80e 	bl	8019378 <RadioOnTxTimeoutProcess>
}
 801935c:	bf00      	nop
 801935e:	3708      	adds	r7, #8
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}

08019364 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801936c:	f000 f818 	bl	80193a0 <RadioOnRxTimeoutProcess>
}
 8019370:	bf00      	nop
 8019372:	3708      	adds	r7, #8
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019378:	b580      	push	{r7, lr}
 801937a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801937c:	4b07      	ldr	r3, [pc, #28]	@ (801939c <RadioOnTxTimeoutProcess+0x24>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d008      	beq.n	8019396 <RadioOnTxTimeoutProcess+0x1e>
 8019384:	4b05      	ldr	r3, [pc, #20]	@ (801939c <RadioOnTxTimeoutProcess+0x24>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d003      	beq.n	8019396 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801938e:	4b03      	ldr	r3, [pc, #12]	@ (801939c <RadioOnTxTimeoutProcess+0x24>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	4798      	blx	r3
    }
}
 8019396:	bf00      	nop
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	20001ccc 	.word	0x20001ccc

080193a0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80193a4:	4b07      	ldr	r3, [pc, #28]	@ (80193c4 <RadioOnRxTimeoutProcess+0x24>)
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d008      	beq.n	80193be <RadioOnRxTimeoutProcess+0x1e>
 80193ac:	4b05      	ldr	r3, [pc, #20]	@ (80193c4 <RadioOnRxTimeoutProcess+0x24>)
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	68db      	ldr	r3, [r3, #12]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d003      	beq.n	80193be <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80193b6:	4b03      	ldr	r3, [pc, #12]	@ (80193c4 <RadioOnRxTimeoutProcess+0x24>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	68db      	ldr	r3, [r3, #12]
 80193bc:	4798      	blx	r3
    }
}
 80193be:	bf00      	nop
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	20001ccc 	.word	0x20001ccc

080193c8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b082      	sub	sp, #8
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	4603      	mov	r3, r0
 80193d0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80193d2:	4a05      	ldr	r2, [pc, #20]	@ (80193e8 <RadioOnDioIrq+0x20>)
 80193d4:	88fb      	ldrh	r3, [r7, #6]
 80193d6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80193da:	f000 f807 	bl	80193ec <RadioIrqProcess>
}
 80193de:	bf00      	nop
 80193e0:	3708      	adds	r7, #8
 80193e2:	46bd      	mov	sp, r7
 80193e4:	bd80      	pop	{r7, pc}
 80193e6:	bf00      	nop
 80193e8:	20001cd0 	.word	0x20001cd0

080193ec <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80193ec:	b5b0      	push	{r4, r5, r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80193f2:	2300      	movs	r3, #0
 80193f4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80193f6:	2300      	movs	r3, #0
 80193f8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80193fa:	4ba8      	ldr	r3, [pc, #672]	@ (801969c <RadioIrqProcess+0x2b0>)
 80193fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019404:	f000 810d 	beq.w	8019622 <RadioIrqProcess+0x236>
 8019408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801940c:	f300 81e8 	bgt.w	80197e0 <RadioIrqProcess+0x3f4>
 8019410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019414:	f000 80f1 	beq.w	80195fa <RadioIrqProcess+0x20e>
 8019418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801941c:	f300 81e0 	bgt.w	80197e0 <RadioIrqProcess+0x3f4>
 8019420:	2b80      	cmp	r3, #128	@ 0x80
 8019422:	f000 80d6 	beq.w	80195d2 <RadioIrqProcess+0x1e6>
 8019426:	2b80      	cmp	r3, #128	@ 0x80
 8019428:	f300 81da 	bgt.w	80197e0 <RadioIrqProcess+0x3f4>
 801942c:	2b20      	cmp	r3, #32
 801942e:	dc49      	bgt.n	80194c4 <RadioIrqProcess+0xd8>
 8019430:	2b00      	cmp	r3, #0
 8019432:	f340 81d5 	ble.w	80197e0 <RadioIrqProcess+0x3f4>
 8019436:	3b01      	subs	r3, #1
 8019438:	2b1f      	cmp	r3, #31
 801943a:	f200 81d1 	bhi.w	80197e0 <RadioIrqProcess+0x3f4>
 801943e:	a201      	add	r2, pc, #4	@ (adr r2, 8019444 <RadioIrqProcess+0x58>)
 8019440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019444:	080194cd 	.word	0x080194cd
 8019448:	08019507 	.word	0x08019507
 801944c:	080197e1 	.word	0x080197e1
 8019450:	080196bd 	.word	0x080196bd
 8019454:	080197e1 	.word	0x080197e1
 8019458:	080197e1 	.word	0x080197e1
 801945c:	080197e1 	.word	0x080197e1
 8019460:	08019739 	.word	0x08019739
 8019464:	080197e1 	.word	0x080197e1
 8019468:	080197e1 	.word	0x080197e1
 801946c:	080197e1 	.word	0x080197e1
 8019470:	080197e1 	.word	0x080197e1
 8019474:	080197e1 	.word	0x080197e1
 8019478:	080197e1 	.word	0x080197e1
 801947c:	080197e1 	.word	0x080197e1
 8019480:	08019755 	.word	0x08019755
 8019484:	080197e1 	.word	0x080197e1
 8019488:	080197e1 	.word	0x080197e1
 801948c:	080197e1 	.word	0x080197e1
 8019490:	080197e1 	.word	0x080197e1
 8019494:	080197e1 	.word	0x080197e1
 8019498:	080197e1 	.word	0x080197e1
 801949c:	080197e1 	.word	0x080197e1
 80194a0:	080197e1 	.word	0x080197e1
 80194a4:	080197e1 	.word	0x080197e1
 80194a8:	080197e1 	.word	0x080197e1
 80194ac:	080197e1 	.word	0x080197e1
 80194b0:	080197e1 	.word	0x080197e1
 80194b4:	080197e1 	.word	0x080197e1
 80194b8:	080197e1 	.word	0x080197e1
 80194bc:	080197e1 	.word	0x080197e1
 80194c0:	08019763 	.word	0x08019763
 80194c4:	2b40      	cmp	r3, #64	@ 0x40
 80194c6:	f000 816d 	beq.w	80197a4 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80194ca:	e189      	b.n	80197e0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80194cc:	4874      	ldr	r0, [pc, #464]	@ (80196a0 <RadioIrqProcess+0x2b4>)
 80194ce:	f002 ff87 	bl	801c3e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80194d2:	2000      	movs	r0, #0
 80194d4:	f000 fffa 	bl	801a4cc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80194d8:	f002 f85c 	bl	801b594 <RFW_Is_LongPacketModeEnabled>
 80194dc:	4603      	mov	r3, r0
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d101      	bne.n	80194e6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80194e2:	f002 f880 	bl	801b5e6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80194e6:	4b6f      	ldr	r3, [pc, #444]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	f000 817a 	beq.w	80197e4 <RadioIrqProcess+0x3f8>
 80194f0:	4b6c      	ldr	r3, [pc, #432]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	f000 8174 	beq.w	80197e4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80194fc:	4b69      	ldr	r3, [pc, #420]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4798      	blx	r3
        break;
 8019504:	e16e      	b.n	80197e4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019506:	4868      	ldr	r0, [pc, #416]	@ (80196a8 <RadioIrqProcess+0x2bc>)
 8019508:	f002 ff6a 	bl	801c3e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801950c:	4b63      	ldr	r3, [pc, #396]	@ (801969c <RadioIrqProcess+0x2b0>)
 801950e:	785b      	ldrb	r3, [r3, #1]
 8019510:	f083 0301 	eor.w	r3, r3, #1
 8019514:	b2db      	uxtb	r3, r3
 8019516:	2b00      	cmp	r3, #0
 8019518:	d014      	beq.n	8019544 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801951a:	2000      	movs	r0, #0
 801951c:	f000 ffd6 	bl	801a4cc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019520:	2100      	movs	r1, #0
 8019522:	f640 1002 	movw	r0, #2306	@ 0x902
 8019526:	f001 fd51 	bl	801afcc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801952a:	f640 1044 	movw	r0, #2372	@ 0x944
 801952e:	f001 fd61 	bl	801aff4 <SUBGRF_ReadRegister>
 8019532:	4603      	mov	r3, r0
 8019534:	f043 0302 	orr.w	r3, r3, #2
 8019538:	b2db      	uxtb	r3, r3
 801953a:	4619      	mov	r1, r3
 801953c:	f640 1044 	movw	r0, #2372	@ 0x944
 8019540:	f001 fd44 	bl	801afcc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019544:	1dfb      	adds	r3, r7, #7
 8019546:	22ff      	movs	r2, #255	@ 0xff
 8019548:	4619      	mov	r1, r3
 801954a:	4858      	ldr	r0, [pc, #352]	@ (80196ac <RadioIrqProcess+0x2c0>)
 801954c:	f000 fe8e 	bl	801a26c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019550:	4857      	ldr	r0, [pc, #348]	@ (80196b0 <RadioIrqProcess+0x2c4>)
 8019552:	f001 fce9 	bl	801af28 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019556:	4b53      	ldr	r3, [pc, #332]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2b00      	cmp	r3, #0
 801955c:	f000 8144 	beq.w	80197e8 <RadioIrqProcess+0x3fc>
 8019560:	4b50      	ldr	r3, [pc, #320]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	689b      	ldr	r3, [r3, #8]
 8019566:	2b00      	cmp	r3, #0
 8019568:	f000 813e 	beq.w	80197e8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801956c:	4b4b      	ldr	r3, [pc, #300]	@ (801969c <RadioIrqProcess+0x2b0>)
 801956e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019572:	2b01      	cmp	r3, #1
 8019574:	d10e      	bne.n	8019594 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019576:	4b4b      	ldr	r3, [pc, #300]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	689c      	ldr	r4, [r3, #8]
 801957c:	79fb      	ldrb	r3, [r7, #7]
 801957e:	4619      	mov	r1, r3
 8019580:	4b46      	ldr	r3, [pc, #280]	@ (801969c <RadioIrqProcess+0x2b0>)
 8019582:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019586:	461a      	mov	r2, r3
 8019588:	4b44      	ldr	r3, [pc, #272]	@ (801969c <RadioIrqProcess+0x2b0>)
 801958a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801958e:	4847      	ldr	r0, [pc, #284]	@ (80196ac <RadioIrqProcess+0x2c0>)
 8019590:	47a0      	blx	r4
                break;
 8019592:	e01d      	b.n	80195d0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019594:	4b41      	ldr	r3, [pc, #260]	@ (801969c <RadioIrqProcess+0x2b0>)
 8019596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019598:	463a      	mov	r2, r7
 801959a:	4611      	mov	r1, r2
 801959c:	4618      	mov	r0, r3
 801959e:	f001 ff47 	bl	801b430 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80195a2:	4b40      	ldr	r3, [pc, #256]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	689c      	ldr	r4, [r3, #8]
 80195a8:	79fb      	ldrb	r3, [r7, #7]
 80195aa:	4619      	mov	r1, r3
 80195ac:	4b3b      	ldr	r3, [pc, #236]	@ (801969c <RadioIrqProcess+0x2b0>)
 80195ae:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80195b2:	4618      	mov	r0, r3
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80195ba:	4a3e      	ldr	r2, [pc, #248]	@ (80196b4 <RadioIrqProcess+0x2c8>)
 80195bc:	fb82 5203 	smull	r5, r2, r2, r3
 80195c0:	1192      	asrs	r2, r2, #6
 80195c2:	17db      	asrs	r3, r3, #31
 80195c4:	1ad3      	subs	r3, r2, r3
 80195c6:	b25b      	sxtb	r3, r3
 80195c8:	4602      	mov	r2, r0
 80195ca:	4838      	ldr	r0, [pc, #224]	@ (80196ac <RadioIrqProcess+0x2c0>)
 80195cc:	47a0      	blx	r4
                break;
 80195ce:	bf00      	nop
        break;
 80195d0:	e10a      	b.n	80197e8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80195d2:	2000      	movs	r0, #0
 80195d4:	f000 ff7a 	bl	801a4cc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80195d8:	4b32      	ldr	r3, [pc, #200]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	f000 8105 	beq.w	80197ec <RadioIrqProcess+0x400>
 80195e2:	4b30      	ldr	r3, [pc, #192]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	699b      	ldr	r3, [r3, #24]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	f000 80ff 	beq.w	80197ec <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80195ee:	4b2d      	ldr	r3, [pc, #180]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	699b      	ldr	r3, [r3, #24]
 80195f4:	2000      	movs	r0, #0
 80195f6:	4798      	blx	r3
        break;
 80195f8:	e0f8      	b.n	80197ec <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80195fa:	2000      	movs	r0, #0
 80195fc:	f000 ff66 	bl	801a4cc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019600:	4b28      	ldr	r3, [pc, #160]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	f000 80f3 	beq.w	80197f0 <RadioIrqProcess+0x404>
 801960a:	4b26      	ldr	r3, [pc, #152]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	699b      	ldr	r3, [r3, #24]
 8019610:	2b00      	cmp	r3, #0
 8019612:	f000 80ed 	beq.w	80197f0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8019616:	4b23      	ldr	r3, [pc, #140]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	699b      	ldr	r3, [r3, #24]
 801961c:	2001      	movs	r0, #1
 801961e:	4798      	blx	r3
        break;
 8019620:	e0e6      	b.n	80197f0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019622:	4b25      	ldr	r3, [pc, #148]	@ (80196b8 <RadioIrqProcess+0x2cc>)
 8019624:	2201      	movs	r2, #1
 8019626:	2100      	movs	r1, #0
 8019628:	2002      	movs	r0, #2
 801962a:	f003 f8e3 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801962e:	f000 fe03 	bl	801a238 <SUBGRF_GetOperatingMode>
 8019632:	4603      	mov	r3, r0
 8019634:	2b04      	cmp	r3, #4
 8019636:	d115      	bne.n	8019664 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019638:	4819      	ldr	r0, [pc, #100]	@ (80196a0 <RadioIrqProcess+0x2b4>)
 801963a:	f002 fed1 	bl	801c3e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801963e:	2000      	movs	r0, #0
 8019640:	f000 ff44 	bl	801a4cc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019644:	4b17      	ldr	r3, [pc, #92]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	f000 80d3 	beq.w	80197f4 <RadioIrqProcess+0x408>
 801964e:	4b15      	ldr	r3, [pc, #84]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	2b00      	cmp	r3, #0
 8019656:	f000 80cd 	beq.w	80197f4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801965a:	4b12      	ldr	r3, [pc, #72]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	4798      	blx	r3
        break;
 8019662:	e0c7      	b.n	80197f4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019664:	f000 fde8 	bl	801a238 <SUBGRF_GetOperatingMode>
 8019668:	4603      	mov	r3, r0
 801966a:	2b05      	cmp	r3, #5
 801966c:	f040 80c2 	bne.w	80197f4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8019670:	480d      	ldr	r0, [pc, #52]	@ (80196a8 <RadioIrqProcess+0x2bc>)
 8019672:	f002 feb5 	bl	801c3e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019676:	2000      	movs	r0, #0
 8019678:	f000 ff28 	bl	801a4cc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801967c:	4b09      	ldr	r3, [pc, #36]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	2b00      	cmp	r3, #0
 8019682:	f000 80b7 	beq.w	80197f4 <RadioIrqProcess+0x408>
 8019686:	4b07      	ldr	r3, [pc, #28]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	68db      	ldr	r3, [r3, #12]
 801968c:	2b00      	cmp	r3, #0
 801968e:	f000 80b1 	beq.w	80197f4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8019692:	4b04      	ldr	r3, [pc, #16]	@ (80196a4 <RadioIrqProcess+0x2b8>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	68db      	ldr	r3, [r3, #12]
 8019698:	4798      	blx	r3
        break;
 801969a:	e0ab      	b.n	80197f4 <RadioIrqProcess+0x408>
 801969c:	20001cd0 	.word	0x20001cd0
 80196a0:	20001d2c 	.word	0x20001d2c
 80196a4:	20001ccc 	.word	0x20001ccc
 80196a8:	20001d44 	.word	0x20001d44
 80196ac:	20001bcc 	.word	0x20001bcc
 80196b0:	20001cf4 	.word	0x20001cf4
 80196b4:	10624dd3 	.word	0x10624dd3
 80196b8:	08020154 	.word	0x08020154
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80196bc:	4b54      	ldr	r3, [pc, #336]	@ (8019810 <RadioIrqProcess+0x424>)
 80196be:	2201      	movs	r2, #1
 80196c0:	2100      	movs	r1, #0
 80196c2:	2002      	movs	r0, #2
 80196c4:	f003 f896 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80196c8:	4b52      	ldr	r3, [pc, #328]	@ (8019814 <RadioIrqProcess+0x428>)
 80196ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f000 8093 	beq.w	80197f8 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80196d2:	4a51      	ldr	r2, [pc, #324]	@ (8019818 <RadioIrqProcess+0x42c>)
 80196d4:	4b4f      	ldr	r3, [pc, #316]	@ (8019814 <RadioIrqProcess+0x428>)
 80196d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196d8:	0c1b      	lsrs	r3, r3, #16
 80196da:	b2db      	uxtb	r3, r3
 80196dc:	4619      	mov	r1, r3
 80196de:	f640 1003 	movw	r0, #2307	@ 0x903
 80196e2:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80196e4:	4a4c      	ldr	r2, [pc, #304]	@ (8019818 <RadioIrqProcess+0x42c>)
 80196e6:	4b4b      	ldr	r3, [pc, #300]	@ (8019814 <RadioIrqProcess+0x428>)
 80196e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196ea:	0a1b      	lsrs	r3, r3, #8
 80196ec:	b2db      	uxtb	r3, r3
 80196ee:	4619      	mov	r1, r3
 80196f0:	f640 1004 	movw	r0, #2308	@ 0x904
 80196f4:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80196f6:	4a48      	ldr	r2, [pc, #288]	@ (8019818 <RadioIrqProcess+0x42c>)
 80196f8:	4b46      	ldr	r3, [pc, #280]	@ (8019814 <RadioIrqProcess+0x428>)
 80196fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196fc:	b2db      	uxtb	r3, r3
 80196fe:	4619      	mov	r1, r3
 8019700:	f640 1005 	movw	r0, #2309	@ 0x905
 8019704:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8019706:	4c44      	ldr	r4, [pc, #272]	@ (8019818 <RadioIrqProcess+0x42c>)
 8019708:	4b44      	ldr	r3, [pc, #272]	@ (801981c <RadioIrqProcess+0x430>)
 801970a:	f640 1002 	movw	r0, #2306	@ 0x902
 801970e:	4798      	blx	r3
 8019710:	4603      	mov	r3, r0
 8019712:	f043 0301 	orr.w	r3, r3, #1
 8019716:	b2db      	uxtb	r3, r3
 8019718:	4619      	mov	r1, r3
 801971a:	f640 1002 	movw	r0, #2306	@ 0x902
 801971e:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019720:	4b3c      	ldr	r3, [pc, #240]	@ (8019814 <RadioIrqProcess+0x428>)
 8019722:	2200      	movs	r2, #0
 8019724:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019726:	2300      	movs	r3, #0
 8019728:	2200      	movs	r2, #0
 801972a:	f240 2162 	movw	r1, #610	@ 0x262
 801972e:	f240 2062 	movw	r0, #610	@ 0x262
 8019732:	f001 f89b 	bl	801a86c <SUBGRF_SetDioIrqParams>
        break;
 8019736:	e05f      	b.n	80197f8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019738:	4b39      	ldr	r3, [pc, #228]	@ (8019820 <RadioIrqProcess+0x434>)
 801973a:	2201      	movs	r2, #1
 801973c:	2100      	movs	r1, #0
 801973e:	2002      	movs	r0, #2
 8019740:	f003 f858 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019744:	f001 ff1f 	bl	801b586 <RFW_Is_Init>
 8019748:	4603      	mov	r3, r0
 801974a:	2b01      	cmp	r3, #1
 801974c:	d156      	bne.n	80197fc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801974e:	f001 ff50 	bl	801b5f2 <RFW_ReceivePayload>
        break;
 8019752:	e053      	b.n	80197fc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019754:	4b33      	ldr	r3, [pc, #204]	@ (8019824 <RadioIrqProcess+0x438>)
 8019756:	2201      	movs	r2, #1
 8019758:	2100      	movs	r1, #0
 801975a:	2002      	movs	r0, #2
 801975c:	f003 f84a 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019760:	e051      	b.n	8019806 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019762:	4831      	ldr	r0, [pc, #196]	@ (8019828 <RadioIrqProcess+0x43c>)
 8019764:	f002 fe3c 	bl	801c3e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019768:	4b2a      	ldr	r3, [pc, #168]	@ (8019814 <RadioIrqProcess+0x428>)
 801976a:	785b      	ldrb	r3, [r3, #1]
 801976c:	f083 0301 	eor.w	r3, r3, #1
 8019770:	b2db      	uxtb	r3, r3
 8019772:	2b00      	cmp	r3, #0
 8019774:	d002      	beq.n	801977c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019776:	2000      	movs	r0, #0
 8019778:	f000 fea8 	bl	801a4cc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801977c:	4b2b      	ldr	r3, [pc, #172]	@ (801982c <RadioIrqProcess+0x440>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d03d      	beq.n	8019800 <RadioIrqProcess+0x414>
 8019784:	4b29      	ldr	r3, [pc, #164]	@ (801982c <RadioIrqProcess+0x440>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	68db      	ldr	r3, [r3, #12]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d038      	beq.n	8019800 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801978e:	4b27      	ldr	r3, [pc, #156]	@ (801982c <RadioIrqProcess+0x440>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	68db      	ldr	r3, [r3, #12]
 8019794:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019796:	4b26      	ldr	r3, [pc, #152]	@ (8019830 <RadioIrqProcess+0x444>)
 8019798:	2201      	movs	r2, #1
 801979a:	2100      	movs	r1, #0
 801979c:	2002      	movs	r0, #2
 801979e:	f003 f829 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80197a2:	e02d      	b.n	8019800 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80197a4:	4b23      	ldr	r3, [pc, #140]	@ (8019834 <RadioIrqProcess+0x448>)
 80197a6:	2201      	movs	r2, #1
 80197a8:	2100      	movs	r1, #0
 80197aa:	2002      	movs	r0, #2
 80197ac:	f003 f822 	bl	801c7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80197b0:	4b18      	ldr	r3, [pc, #96]	@ (8019814 <RadioIrqProcess+0x428>)
 80197b2:	785b      	ldrb	r3, [r3, #1]
 80197b4:	f083 0301 	eor.w	r3, r3, #1
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d002      	beq.n	80197c4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80197be:	2000      	movs	r0, #0
 80197c0:	f000 fe84 	bl	801a4cc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80197c4:	4b19      	ldr	r3, [pc, #100]	@ (801982c <RadioIrqProcess+0x440>)
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d01b      	beq.n	8019804 <RadioIrqProcess+0x418>
 80197cc:	4b17      	ldr	r3, [pc, #92]	@ (801982c <RadioIrqProcess+0x440>)
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	691b      	ldr	r3, [r3, #16]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d016      	beq.n	8019804 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80197d6:	4b15      	ldr	r3, [pc, #84]	@ (801982c <RadioIrqProcess+0x440>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	691b      	ldr	r3, [r3, #16]
 80197dc:	4798      	blx	r3
        break;
 80197de:	e011      	b.n	8019804 <RadioIrqProcess+0x418>
        break;
 80197e0:	bf00      	nop
 80197e2:	e010      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197e4:	bf00      	nop
 80197e6:	e00e      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197e8:	bf00      	nop
 80197ea:	e00c      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197ec:	bf00      	nop
 80197ee:	e00a      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197f0:	bf00      	nop
 80197f2:	e008      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197f4:	bf00      	nop
 80197f6:	e006      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197f8:	bf00      	nop
 80197fa:	e004      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 80197fc:	bf00      	nop
 80197fe:	e002      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 8019800:	bf00      	nop
 8019802:	e000      	b.n	8019806 <RadioIrqProcess+0x41a>
        break;
 8019804:	bf00      	nop
    }
}
 8019806:	bf00      	nop
 8019808:	3708      	adds	r7, #8
 801980a:	46bd      	mov	sp, r7
 801980c:	bdb0      	pop	{r4, r5, r7, pc}
 801980e:	bf00      	nop
 8019810:	08020168 	.word	0x08020168
 8019814:	20001cd0 	.word	0x20001cd0
 8019818:	080191fd 	.word	0x080191fd
 801981c:	08019221 	.word	0x08019221
 8019820:	08020174 	.word	0x08020174
 8019824:	08020180 	.word	0x08020180
 8019828:	20001d44 	.word	0x20001d44
 801982c:	20001ccc 	.word	0x20001ccc
 8019830:	0802018c 	.word	0x0802018c
 8019834:	08020198 	.word	0x08020198

08019838 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019838:	b580      	push	{r7, lr}
 801983a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801983c:	4b09      	ldr	r3, [pc, #36]	@ (8019864 <RadioTxPrbs+0x2c>)
 801983e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019842:	2101      	movs	r1, #1
 8019844:	4618      	mov	r0, r3
 8019846:	f001 fcb5 	bl	801b1b4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801984a:	4b07      	ldr	r3, [pc, #28]	@ (8019868 <RadioTxPrbs+0x30>)
 801984c:	212d      	movs	r1, #45	@ 0x2d
 801984e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019852:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019854:	f000 fefd 	bl	801a652 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019858:	4804      	ldr	r0, [pc, #16]	@ (801986c <RadioTxPrbs+0x34>)
 801985a:	f000 fe53 	bl	801a504 <SUBGRF_SetTx>
}
 801985e:	bf00      	nop
 8019860:	bd80      	pop	{r7, pc}
 8019862:	bf00      	nop
 8019864:	20001cd0 	.word	0x20001cd0
 8019868:	080191fd 	.word	0x080191fd
 801986c:	000fffff 	.word	0x000fffff

08019870 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b084      	sub	sp, #16
 8019874:	af00      	add	r7, sp, #0
 8019876:	4603      	mov	r3, r0
 8019878:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801987a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801987e:	4618      	mov	r0, r3
 8019880:	f001 fcc0 	bl	801b204 <SUBGRF_SetRfTxPower>
 8019884:	4603      	mov	r3, r0
 8019886:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019888:	7bfb      	ldrb	r3, [r7, #15]
 801988a:	2101      	movs	r1, #1
 801988c:	4618      	mov	r0, r3
 801988e:	f001 fc91 	bl	801b1b4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019892:	f000 fed5 	bl	801a640 <SUBGRF_SetTxContinuousWave>
}
 8019896:	bf00      	nop
 8019898:	3710      	adds	r7, #16
 801989a:	46bd      	mov	sp, r7
 801989c:	bd80      	pop	{r7, pc}

0801989e <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801989e:	b480      	push	{r7}
 80198a0:	b089      	sub	sp, #36	@ 0x24
 80198a2:	af00      	add	r7, sp, #0
 80198a4:	60f8      	str	r0, [r7, #12]
 80198a6:	60b9      	str	r1, [r7, #8]
 80198a8:	4613      	mov	r3, r2
 80198aa:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80198ac:	2300      	movs	r3, #0
 80198ae:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80198b0:	2300      	movs	r3, #0
 80198b2:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80198b4:	2300      	movs	r3, #0
 80198b6:	61bb      	str	r3, [r7, #24]
 80198b8:	e011      	b.n	80198de <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80198ba:	69bb      	ldr	r3, [r7, #24]
 80198bc:	68ba      	ldr	r2, [r7, #8]
 80198be:	4413      	add	r3, r2
 80198c0:	781a      	ldrb	r2, [r3, #0]
 80198c2:	69bb      	ldr	r3, [r7, #24]
 80198c4:	68b9      	ldr	r1, [r7, #8]
 80198c6:	440b      	add	r3, r1
 80198c8:	43d2      	mvns	r2, r2
 80198ca:	b2d2      	uxtb	r2, r2
 80198cc:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80198ce:	69bb      	ldr	r3, [r7, #24]
 80198d0:	68fa      	ldr	r2, [r7, #12]
 80198d2:	4413      	add	r3, r2
 80198d4:	2200      	movs	r2, #0
 80198d6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80198d8:	69bb      	ldr	r3, [r7, #24]
 80198da:	3301      	adds	r3, #1
 80198dc:	61bb      	str	r3, [r7, #24]
 80198de:	79fb      	ldrb	r3, [r7, #7]
 80198e0:	69ba      	ldr	r2, [r7, #24]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	dbe9      	blt.n	80198ba <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80198e6:	2300      	movs	r3, #0
 80198e8:	61bb      	str	r3, [r7, #24]
 80198ea:	e049      	b.n	8019980 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80198ec:	69bb      	ldr	r3, [r7, #24]
 80198ee:	425a      	negs	r2, r3
 80198f0:	f003 0307 	and.w	r3, r3, #7
 80198f4:	f002 0207 	and.w	r2, r2, #7
 80198f8:	bf58      	it	pl
 80198fa:	4253      	negpl	r3, r2
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	f1c3 0307 	rsb	r3, r3, #7
 8019902:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019904:	69bb      	ldr	r3, [r7, #24]
 8019906:	2b00      	cmp	r3, #0
 8019908:	da00      	bge.n	801990c <payload_integration+0x6e>
 801990a:	3307      	adds	r3, #7
 801990c:	10db      	asrs	r3, r3, #3
 801990e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019910:	69bb      	ldr	r3, [r7, #24]
 8019912:	3301      	adds	r3, #1
 8019914:	425a      	negs	r2, r3
 8019916:	f003 0307 	and.w	r3, r3, #7
 801991a:	f002 0207 	and.w	r2, r2, #7
 801991e:	bf58      	it	pl
 8019920:	4253      	negpl	r3, r2
 8019922:	b2db      	uxtb	r3, r3
 8019924:	f1c3 0307 	rsb	r3, r3, #7
 8019928:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801992a:	69bb      	ldr	r3, [r7, #24]
 801992c:	3301      	adds	r3, #1
 801992e:	2b00      	cmp	r3, #0
 8019930:	da00      	bge.n	8019934 <payload_integration+0x96>
 8019932:	3307      	adds	r3, #7
 8019934:	10db      	asrs	r3, r3, #3
 8019936:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019938:	7dbb      	ldrb	r3, [r7, #22]
 801993a:	68ba      	ldr	r2, [r7, #8]
 801993c:	4413      	add	r3, r2
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	461a      	mov	r2, r3
 8019942:	7dfb      	ldrb	r3, [r7, #23]
 8019944:	fa42 f303 	asr.w	r3, r2, r3
 8019948:	b2db      	uxtb	r3, r3
 801994a:	f003 0301 	and.w	r3, r3, #1
 801994e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019950:	7ffa      	ldrb	r2, [r7, #31]
 8019952:	7cfb      	ldrb	r3, [r7, #19]
 8019954:	4053      	eors	r3, r2
 8019956:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019958:	7d3b      	ldrb	r3, [r7, #20]
 801995a:	68fa      	ldr	r2, [r7, #12]
 801995c:	4413      	add	r3, r2
 801995e:	781b      	ldrb	r3, [r3, #0]
 8019960:	b25a      	sxtb	r2, r3
 8019962:	7ff9      	ldrb	r1, [r7, #31]
 8019964:	7d7b      	ldrb	r3, [r7, #21]
 8019966:	fa01 f303 	lsl.w	r3, r1, r3
 801996a:	b25b      	sxtb	r3, r3
 801996c:	4313      	orrs	r3, r2
 801996e:	b259      	sxtb	r1, r3
 8019970:	7d3b      	ldrb	r3, [r7, #20]
 8019972:	68fa      	ldr	r2, [r7, #12]
 8019974:	4413      	add	r3, r2
 8019976:	b2ca      	uxtb	r2, r1
 8019978:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801997a:	69bb      	ldr	r3, [r7, #24]
 801997c:	3301      	adds	r3, #1
 801997e:	61bb      	str	r3, [r7, #24]
 8019980:	79fb      	ldrb	r3, [r7, #7]
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	69ba      	ldr	r2, [r7, #24]
 8019986:	429a      	cmp	r2, r3
 8019988:	dbb0      	blt.n	80198ec <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801998a:	7ffb      	ldrb	r3, [r7, #31]
 801998c:	01db      	lsls	r3, r3, #7
 801998e:	b25a      	sxtb	r2, r3
 8019990:	7ffb      	ldrb	r3, [r7, #31]
 8019992:	019b      	lsls	r3, r3, #6
 8019994:	b25b      	sxtb	r3, r3
 8019996:	4313      	orrs	r3, r2
 8019998:	b25b      	sxtb	r3, r3
 801999a:	7ffa      	ldrb	r2, [r7, #31]
 801999c:	2a00      	cmp	r2, #0
 801999e:	d101      	bne.n	80199a4 <payload_integration+0x106>
 80199a0:	2220      	movs	r2, #32
 80199a2:	e000      	b.n	80199a6 <payload_integration+0x108>
 80199a4:	2200      	movs	r2, #0
 80199a6:	4313      	orrs	r3, r2
 80199a8:	b259      	sxtb	r1, r3
 80199aa:	79fb      	ldrb	r3, [r7, #7]
 80199ac:	68fa      	ldr	r2, [r7, #12]
 80199ae:	4413      	add	r3, r2
 80199b0:	b2ca      	uxtb	r2, r1
 80199b2:	701a      	strb	r2, [r3, #0]
}
 80199b4:	bf00      	nop
 80199b6:	3724      	adds	r7, #36	@ 0x24
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bc80      	pop	{r7}
 80199bc:	4770      	bx	lr
	...

080199c0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b08c      	sub	sp, #48	@ 0x30
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	60b9      	str	r1, [r7, #8]
 80199c8:	607a      	str	r2, [r7, #4]
 80199ca:	603b      	str	r3, [r7, #0]
 80199cc:	4603      	mov	r3, r0
 80199ce:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80199d0:	2300      	movs	r3, #0
 80199d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80199d4:	2300      	movs	r3, #0
 80199d6:	623b      	str	r3, [r7, #32]
 80199d8:	2300      	movs	r3, #0
 80199da:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80199dc:	f001 fdcd 	bl	801b57a <RFW_DeInit>

    if( rxContinuous != 0 )
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d001      	beq.n	80199ea <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80199e6:	2300      	movs	r3, #0
 80199e8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	bf14      	ite	ne
 80199f0:	2301      	movne	r3, #1
 80199f2:	2300      	moveq	r3, #0
 80199f4:	b2da      	uxtb	r2, r3
 80199f6:	4ba3      	ldr	r3, [pc, #652]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 80199f8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80199fa:	7bfb      	ldrb	r3, [r7, #15]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d003      	beq.n	8019a08 <RadioSetRxGenericConfig+0x48>
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	f000 80dc 	beq.w	8019bbe <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019a06:	e194      	b.n	8019d32 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	689b      	ldr	r3, [r3, #8]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d003      	beq.n	8019a18 <RadioSetRxGenericConfig+0x58>
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	68db      	ldr	r3, [r3, #12]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d102      	bne.n	8019a1e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019a18:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1c:	e18a      	b.n	8019d34 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	7f9b      	ldrb	r3, [r3, #30]
 8019a22:	2b08      	cmp	r3, #8
 8019a24:	d902      	bls.n	8019a2c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019a26:	f04f 33ff 	mov.w	r3, #4294967295
 8019a2a:	e183      	b.n	8019d34 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	6919      	ldr	r1, [r3, #16]
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	7f9b      	ldrb	r3, [r3, #30]
 8019a34:	461a      	mov	r2, r3
 8019a36:	f107 0320 	add.w	r3, r7, #32
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f001 fe90 	bl	801b760 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	bf14      	ite	ne
 8019a48:	2301      	movne	r3, #1
 8019a4a:	2300      	moveq	r3, #0
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f000 fe08 	bl	801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019a54:	4b8b      	ldr	r3, [pc, #556]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a56:	2200      	movs	r2, #0
 8019a58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019a5c:	68bb      	ldr	r3, [r7, #8]
 8019a5e:	689b      	ldr	r3, [r3, #8]
 8019a60:	4a88      	ldr	r2, [pc, #544]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a62:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019a6a:	4b86      	ldr	r3, [pc, #536]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	685b      	ldr	r3, [r3, #4]
 8019a74:	4618      	mov	r0, r3
 8019a76:	f001 fcb3 	bl	801b3e0 <SUBGRF_GetFskBandwidthRegValue>
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	4b81      	ldr	r3, [pc, #516]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019a84:	4b7f      	ldr	r3, [pc, #508]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a86:	2200      	movs	r2, #0
 8019a88:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	68db      	ldr	r3, [r3, #12]
 8019a8e:	b29b      	uxth	r3, r3
 8019a90:	00db      	lsls	r3, r3, #3
 8019a92:	b29a      	uxth	r2, r3
 8019a94:	4b7b      	ldr	r3, [pc, #492]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a96:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	7fda      	ldrb	r2, [r3, #31]
 8019a9c:	4b79      	ldr	r3, [pc, #484]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019a9e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	7f9b      	ldrb	r3, [r3, #30]
 8019aa4:	00db      	lsls	r3, r3, #3
 8019aa6:	b2da      	uxtb	r2, r3
 8019aa8:	4b76      	ldr	r3, [pc, #472]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019aaa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8019ab2:	4b74      	ldr	r3, [pc, #464]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019ab4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d105      	bne.n	8019acc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	695b      	ldr	r3, [r3, #20]
 8019ac4:	b2da      	uxtb	r2, r3
 8019ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019ac8:	759a      	strb	r2, [r3, #22]
 8019aca:	e00b      	b.n	8019ae4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019acc:	68bb      	ldr	r3, [r7, #8]
 8019ace:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019ad2:	2b02      	cmp	r3, #2
 8019ad4:	d103      	bne.n	8019ade <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019ad8:	22ff      	movs	r2, #255	@ 0xff
 8019ada:	759a      	strb	r2, [r3, #22]
 8019adc:	e002      	b.n	8019ae4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ade:	4b69      	ldr	r3, [pc, #420]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019ae0:	22ff      	movs	r2, #255	@ 0xff
 8019ae2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019aea:	2b02      	cmp	r3, #2
 8019aec:	d004      	beq.n	8019af8 <RadioSetRxGenericConfig+0x138>
 8019aee:	68bb      	ldr	r3, [r7, #8]
 8019af0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019af4:	2b02      	cmp	r3, #2
 8019af6:	d12d      	bne.n	8019b54 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019afe:	2bf1      	cmp	r3, #241	@ 0xf1
 8019b00:	d00c      	beq.n	8019b1c <RadioSetRxGenericConfig+0x15c>
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019b08:	2bf2      	cmp	r3, #242	@ 0xf2
 8019b0a:	d007      	beq.n	8019b1c <RadioSetRxGenericConfig+0x15c>
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d002      	beq.n	8019b1c <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019b16:	f04f 33ff 	mov.w	r3, #4294967295
 8019b1a:	e10b      	b.n	8019d34 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019b24:	4b58      	ldr	r3, [pc, #352]	@ (8019c88 <RadioSetRxGenericConfig+0x2c8>)
 8019b26:	6819      	ldr	r1, [r3, #0]
 8019b28:	f107 0314 	add.w	r3, r7, #20
 8019b2c:	4a57      	ldr	r2, [pc, #348]	@ (8019c8c <RadioSetRxGenericConfig+0x2cc>)
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f001 fd16 	bl	801b560 <RFW_Init>
 8019b34:	4603      	mov	r3, r0
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d002      	beq.n	8019b40 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b3e:	e0f9      	b.n	8019d34 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019b40:	4b50      	ldr	r3, [pc, #320]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b42:	2200      	movs	r2, #0
 8019b44:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019b46:	4b4f      	ldr	r3, [pc, #316]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b48:	2201      	movs	r2, #1
 8019b4a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b4e:	2200      	movs	r2, #0
 8019b50:	755a      	strb	r2, [r3, #21]
        {
 8019b52:	e00e      	b.n	8019b72 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b5c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019b64:	4b47      	ldr	r3, [pc, #284]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b66:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019b6e:	4b45      	ldr	r3, [pc, #276]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019b70:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019b72:	f7ff fa48 	bl	8019006 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019b76:	2000      	movs	r0, #0
 8019b78:	f7fe fbf2 	bl	8018360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019b7c:	4844      	ldr	r0, [pc, #272]	@ (8019c90 <RadioSetRxGenericConfig+0x2d0>)
 8019b7e:	f001 f80b 	bl	801ab98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b82:	4844      	ldr	r0, [pc, #272]	@ (8019c94 <RadioSetRxGenericConfig+0x2d4>)
 8019b84:	f001 f8da 	bl	801ad3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019b88:	f107 0320 	add.w	r3, r7, #32
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	f000 fba2 	bl	801a2d6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	8b9b      	ldrh	r3, [r3, #28]
 8019b96:	4618      	mov	r0, r3
 8019b98:	f000 fbec 	bl	801a374 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	8b1b      	ldrh	r3, [r3, #24]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f000 fbc7 	bl	801a334 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019bac:	fb03 f202 	mul.w	r2, r3, r2
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	689b      	ldr	r3, [r3, #8]
 8019bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bb8:	4a32      	ldr	r2, [pc, #200]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019bba:	6093      	str	r3, [r2, #8]
        break;
 8019bbc:	e0b9      	b.n	8019d32 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d102      	bne.n	8019bcc <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bca:	e0b3      	b.n	8019d34 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	d104      	bne.n	8019be0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	695b      	ldr	r3, [r3, #20]
 8019bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019bde:	e002      	b.n	8019be6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019be0:	23ff      	movs	r3, #255	@ 0xff
 8019be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	bf14      	ite	ne
 8019bee:	2301      	movne	r3, #1
 8019bf0:	2300      	moveq	r3, #0
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f000 fd35 	bl	801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	4618      	mov	r0, r3
 8019c00:	f000 fd3f 	bl	801a682 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019c04:	4b1f      	ldr	r3, [pc, #124]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c06:	2201      	movs	r2, #1
 8019c08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019c0c:	68bb      	ldr	r3, [r7, #8]
 8019c0e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019c12:	4b1c      	ldr	r3, [pc, #112]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019c1e:	4b19      	ldr	r3, [pc, #100]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8019c2a:	4b16      	ldr	r3, [pc, #88]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c2c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019c30:	68bb      	ldr	r3, [r7, #8]
 8019c32:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8019c36:	2b02      	cmp	r3, #2
 8019c38:	d010      	beq.n	8019c5c <RadioSetRxGenericConfig+0x29c>
 8019c3a:	2b02      	cmp	r3, #2
 8019c3c:	dc2c      	bgt.n	8019c98 <RadioSetRxGenericConfig+0x2d8>
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d002      	beq.n	8019c48 <RadioSetRxGenericConfig+0x288>
 8019c42:	2b01      	cmp	r3, #1
 8019c44:	d005      	beq.n	8019c52 <RadioSetRxGenericConfig+0x292>
            break;
 8019c46:	e027      	b.n	8019c98 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019c48:	4b0e      	ldr	r3, [pc, #56]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019c50:	e023      	b.n	8019c9a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019c52:	4b0c      	ldr	r3, [pc, #48]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c54:	2201      	movs	r2, #1
 8019c56:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019c5a:	e01e      	b.n	8019c9a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019c5c:	68bb      	ldr	r3, [r7, #8]
 8019c5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019c62:	2b0b      	cmp	r3, #11
 8019c64:	d004      	beq.n	8019c70 <RadioSetRxGenericConfig+0x2b0>
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019c6c:	2b0c      	cmp	r3, #12
 8019c6e:	d104      	bne.n	8019c7a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019c70:	4b04      	ldr	r3, [pc, #16]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c72:	2201      	movs	r2, #1
 8019c74:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019c78:	e00f      	b.n	8019c9a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019c7a:	4b02      	ldr	r3, [pc, #8]	@ (8019c84 <RadioSetRxGenericConfig+0x2c4>)
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019c82:	e00a      	b.n	8019c9a <RadioSetRxGenericConfig+0x2da>
 8019c84:	20001cd0 	.word	0x20001cd0
 8019c88:	20001ccc 	.word	0x20001ccc
 8019c8c:	20001d44 	.word	0x20001d44
 8019c90:	20001d08 	.word	0x20001d08
 8019c94:	20001cde 	.word	0x20001cde
            break;
 8019c98:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019c9a:	4b28      	ldr	r3, [pc, #160]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019c9c:	2201      	movs	r2, #1
 8019c9e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8019ca4:	4b25      	ldr	r3, [pc, #148]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019ca6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8019cae:	4b23      	ldr	r3, [pc, #140]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019cb0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019cb2:	4a22      	ldr	r2, [pc, #136]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019cb8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8019cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019cc2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8019ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019cce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8019cd2:	f7ff f998 	bl	8019006 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019cd6:	2001      	movs	r0, #1
 8019cd8:	f7fe fb42 	bl	8018360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019cdc:	4818      	ldr	r0, [pc, #96]	@ (8019d40 <RadioSetRxGenericConfig+0x380>)
 8019cde:	f000 ff5b 	bl	801ab98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ce2:	4818      	ldr	r0, [pc, #96]	@ (8019d44 <RadioSetRxGenericConfig+0x384>)
 8019ce4:	f001 f82a 	bl	801ad3c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019ce8:	4b14      	ldr	r3, [pc, #80]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019cea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	d10d      	bne.n	8019d0e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019cf2:	f240 7036 	movw	r0, #1846	@ 0x736
 8019cf6:	f001 f97d 	bl	801aff4 <SUBGRF_ReadRegister>
 8019cfa:	4603      	mov	r3, r0
 8019cfc:	f023 0304 	bic.w	r3, r3, #4
 8019d00:	b2db      	uxtb	r3, r3
 8019d02:	4619      	mov	r1, r3
 8019d04:	f240 7036 	movw	r0, #1846	@ 0x736
 8019d08:	f001 f960 	bl	801afcc <SUBGRF_WriteRegister>
 8019d0c:	e00c      	b.n	8019d28 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019d0e:	f240 7036 	movw	r0, #1846	@ 0x736
 8019d12:	f001 f96f 	bl	801aff4 <SUBGRF_ReadRegister>
 8019d16:	4603      	mov	r3, r0
 8019d18:	f043 0304 	orr.w	r3, r3, #4
 8019d1c:	b2db      	uxtb	r3, r3
 8019d1e:	4619      	mov	r1, r3
 8019d20:	f240 7036 	movw	r0, #1846	@ 0x736
 8019d24:	f001 f952 	bl	801afcc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019d28:	4b04      	ldr	r3, [pc, #16]	@ (8019d3c <RadioSetRxGenericConfig+0x37c>)
 8019d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019d2e:	609a      	str	r2, [r3, #8]
        break;
 8019d30:	bf00      	nop
    }
    return status;
 8019d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3730      	adds	r7, #48	@ 0x30
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	20001cd0 	.word	0x20001cd0
 8019d40:	20001d08 	.word	0x20001d08
 8019d44:	20001cde 	.word	0x20001cde

08019d48 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b08e      	sub	sp, #56	@ 0x38
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60b9      	str	r1, [r7, #8]
 8019d50:	607b      	str	r3, [r7, #4]
 8019d52:	4603      	mov	r3, r0
 8019d54:	73fb      	strb	r3, [r7, #15]
 8019d56:	4613      	mov	r3, r2
 8019d58:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d5e:	2300      	movs	r3, #0
 8019d60:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019d62:	f001 fc0a 	bl	801b57a <RFW_DeInit>
    switch( modem )
 8019d66:	7bfb      	ldrb	r3, [r7, #15]
 8019d68:	2b03      	cmp	r3, #3
 8019d6a:	f200 8204 	bhi.w	801a176 <RadioSetTxGenericConfig+0x42e>
 8019d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8019d74 <RadioSetTxGenericConfig+0x2c>)
 8019d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d74:	08019ef9 	.word	0x08019ef9
 8019d78:	0801a041 	.word	0x0801a041
 8019d7c:	0801a139 	.word	0x0801a139
 8019d80:	08019d85 	.word	0x08019d85
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019d84:	68bb      	ldr	r3, [r7, #8]
 8019d86:	7c9b      	ldrb	r3, [r3, #18]
 8019d88:	2b08      	cmp	r3, #8
 8019d8a:	d902      	bls.n	8019d92 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d90:	e206      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	6899      	ldr	r1, [r3, #8]
 8019d96:	68bb      	ldr	r3, [r7, #8]
 8019d98:	7c9b      	ldrb	r3, [r3, #18]
 8019d9a:	461a      	mov	r2, r3
 8019d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019da0:	4618      	mov	r0, r3
 8019da2:	f001 fcdd 	bl	801b760 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d102      	bne.n	8019db4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019dae:	f04f 33ff 	mov.w	r3, #4294967295
 8019db2:	e1f5      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8019dbc:	4293      	cmp	r3, r2
 8019dbe:	d813      	bhi.n	8019de8 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019dc0:	2302      	movs	r3, #2
 8019dc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019dc6:	4b99      	ldr	r3, [pc, #612]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019dc8:	2203      	movs	r2, #3
 8019dca:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019dcc:	4b97      	ldr	r3, [pc, #604]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019dce:	2203      	movs	r2, #3
 8019dd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019dd4:	68bb      	ldr	r3, [r7, #8]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	4a94      	ldr	r2, [pc, #592]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019dda:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	7cda      	ldrb	r2, [r3, #19]
 8019de0:	4b92      	ldr	r3, [pc, #584]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019de6:	e017      	b.n	8019e18 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019de8:	2300      	movs	r3, #0
 8019dea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019dee:	4b8f      	ldr	r3, [pc, #572]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019df0:	2200      	movs	r2, #0
 8019df2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019df4:	4b8d      	ldr	r3, [pc, #564]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019df6:	2200      	movs	r2, #0
 8019df8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019dfc:	68bb      	ldr	r3, [r7, #8]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	4a8a      	ldr	r2, [pc, #552]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e02:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019e04:	68bb      	ldr	r3, [r7, #8]
 8019e06:	7cda      	ldrb	r2, [r3, #19]
 8019e08:	4b88      	ldr	r3, [pc, #544]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019e0e:	68bb      	ldr	r3, [r7, #8]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	089b      	lsrs	r3, r3, #2
 8019e14:	4a85      	ldr	r2, [pc, #532]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e16:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	00db      	lsls	r3, r3, #3
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	4b82      	ldr	r3, [pc, #520]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019e26:	4b81      	ldr	r3, [pc, #516]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e28:	2204      	movs	r2, #4
 8019e2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019e2c:	68bb      	ldr	r3, [r7, #8]
 8019e2e:	7c9b      	ldrb	r3, [r3, #18]
 8019e30:	00db      	lsls	r3, r3, #3
 8019e32:	b2da      	uxtb	r2, r3
 8019e34:	4b7d      	ldr	r3, [pc, #500]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019e38:	4b7c      	ldr	r3, [pc, #496]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019e3e:	68bb      	ldr	r3, [r7, #8]
 8019e40:	7d9b      	ldrb	r3, [r3, #22]
 8019e42:	2b02      	cmp	r3, #2
 8019e44:	d003      	beq.n	8019e4e <RadioSetTxGenericConfig+0x106>
 8019e46:	68bb      	ldr	r3, [r7, #8]
 8019e48:	7d1b      	ldrb	r3, [r3, #20]
 8019e4a:	2b02      	cmp	r3, #2
 8019e4c:	d12b      	bne.n	8019ea6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	7d5b      	ldrb	r3, [r3, #21]
 8019e52:	2bf1      	cmp	r3, #241	@ 0xf1
 8019e54:	d00a      	beq.n	8019e6c <RadioSetTxGenericConfig+0x124>
 8019e56:	68bb      	ldr	r3, [r7, #8]
 8019e58:	7d5b      	ldrb	r3, [r3, #21]
 8019e5a:	2bf2      	cmp	r3, #242	@ 0xf2
 8019e5c:	d006      	beq.n	8019e6c <RadioSetTxGenericConfig+0x124>
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	7d5b      	ldrb	r3, [r3, #21]
 8019e62:	2b01      	cmp	r3, #1
 8019e64:	d002      	beq.n	8019e6c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019e66:	f04f 33ff 	mov.w	r3, #4294967295
 8019e6a:	e199      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019e70:	2301      	movs	r3, #1
 8019e72:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019e76:	4b6e      	ldr	r3, [pc, #440]	@ (801a030 <RadioSetTxGenericConfig+0x2e8>)
 8019e78:	6819      	ldr	r1, [r3, #0]
 8019e7a:	f107 0320 	add.w	r3, r7, #32
 8019e7e:	4a6d      	ldr	r2, [pc, #436]	@ (801a034 <RadioSetTxGenericConfig+0x2ec>)
 8019e80:	4618      	mov	r0, r3
 8019e82:	f001 fb6d 	bl	801b560 <RFW_Init>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d002      	beq.n	8019e92 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e90:	e186      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019e92:	4b66      	ldr	r3, [pc, #408]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e94:	2200      	movs	r2, #0
 8019e96:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019e98:	4b64      	ldr	r3, [pc, #400]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019e9a:	2201      	movs	r2, #1
 8019e9c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019e9e:	4b63      	ldr	r3, [pc, #396]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	755a      	strb	r2, [r3, #21]
        {
 8019ea4:	e00b      	b.n	8019ebe <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	7d5a      	ldrb	r2, [r3, #21]
 8019eaa:	4b60      	ldr	r3, [pc, #384]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019eac:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	7d9a      	ldrb	r2, [r3, #22]
 8019eb2:	4b5e      	ldr	r3, [pc, #376]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019eb4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019eb6:	68bb      	ldr	r3, [r7, #8]
 8019eb8:	7d1a      	ldrb	r2, [r3, #20]
 8019eba:	4b5c      	ldr	r3, [pc, #368]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019ebc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019ebe:	f7ff f8a2 	bl	8019006 <RadioStandby>
        RadioSetModem( radio_modem );
 8019ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7fe fa4a 	bl	8018360 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019ecc:	485a      	ldr	r0, [pc, #360]	@ (801a038 <RadioSetTxGenericConfig+0x2f0>)
 8019ece:	f000 fe63 	bl	801ab98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ed2:	485a      	ldr	r0, [pc, #360]	@ (801a03c <RadioSetTxGenericConfig+0x2f4>)
 8019ed4:	f000 ff32 	bl	801ad3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019edc:	4618      	mov	r0, r3
 8019ede:	f000 f9fa 	bl	801a2d6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	8a1b      	ldrh	r3, [r3, #16]
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f000 fa44 	bl	801a374 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	899b      	ldrh	r3, [r3, #12]
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f000 fa1f 	bl	801a334 <SUBGRF_SetCrcPolynomial>
        break;
 8019ef6:	e13f      	b.n	801a178 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d102      	bne.n	8019f06 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019f00:	f04f 33ff 	mov.w	r3, #4294967295
 8019f04:	e14c      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	7c9b      	ldrb	r3, [r3, #18]
 8019f0a:	2b08      	cmp	r3, #8
 8019f0c:	d902      	bls.n	8019f14 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f12:	e145      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	6899      	ldr	r1, [r3, #8]
 8019f18:	68bb      	ldr	r3, [r7, #8]
 8019f1a:	7c9b      	ldrb	r3, [r3, #18]
 8019f1c:	461a      	mov	r2, r3
 8019f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019f22:	4618      	mov	r0, r3
 8019f24:	f001 fc1c 	bl	801b760 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019f28:	4b40      	ldr	r3, [pc, #256]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	4a3d      	ldr	r2, [pc, #244]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f36:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	7cda      	ldrb	r2, [r3, #19]
 8019f3c:	4b3b      	ldr	r3, [pc, #236]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	699b      	ldr	r3, [r3, #24]
 8019f46:	4a39      	ldr	r2, [pc, #228]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f48:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019f4a:	4b38      	ldr	r3, [pc, #224]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	00db      	lsls	r3, r3, #3
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	4b34      	ldr	r3, [pc, #208]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f5c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019f5e:	4b33      	ldr	r3, [pc, #204]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f60:	2204      	movs	r2, #4
 8019f62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	7c9b      	ldrb	r3, [r3, #18]
 8019f68:	00db      	lsls	r3, r3, #3
 8019f6a:	b2da      	uxtb	r2, r3
 8019f6c:	4b2f      	ldr	r3, [pc, #188]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019f70:	4b2e      	ldr	r3, [pc, #184]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019f72:	2200      	movs	r2, #0
 8019f74:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	7d9b      	ldrb	r3, [r3, #22]
 8019f7a:	2b02      	cmp	r3, #2
 8019f7c:	d003      	beq.n	8019f86 <RadioSetTxGenericConfig+0x23e>
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	7d1b      	ldrb	r3, [r3, #20]
 8019f82:	2b02      	cmp	r3, #2
 8019f84:	d12a      	bne.n	8019fdc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f86:	68bb      	ldr	r3, [r7, #8]
 8019f88:	7d5b      	ldrb	r3, [r3, #21]
 8019f8a:	2bf1      	cmp	r3, #241	@ 0xf1
 8019f8c:	d00a      	beq.n	8019fa4 <RadioSetTxGenericConfig+0x25c>
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	7d5b      	ldrb	r3, [r3, #21]
 8019f92:	2bf2      	cmp	r3, #242	@ 0xf2
 8019f94:	d006      	beq.n	8019fa4 <RadioSetTxGenericConfig+0x25c>
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	7d5b      	ldrb	r3, [r3, #21]
 8019f9a:	2b01      	cmp	r3, #1
 8019f9c:	d002      	beq.n	8019fa4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa2:	e0fd      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019fac:	4b20      	ldr	r3, [pc, #128]	@ (801a030 <RadioSetTxGenericConfig+0x2e8>)
 8019fae:	6819      	ldr	r1, [r3, #0]
 8019fb0:	f107 0314 	add.w	r3, r7, #20
 8019fb4:	4a1f      	ldr	r2, [pc, #124]	@ (801a034 <RadioSetTxGenericConfig+0x2ec>)
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f001 fad2 	bl	801b560 <RFW_Init>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d002      	beq.n	8019fc8 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8019fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc6:	e0eb      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019fc8:	4b18      	ldr	r3, [pc, #96]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019fca:	2200      	movs	r2, #0
 8019fcc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019fce:	4b17      	ldr	r3, [pc, #92]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019fd0:	2201      	movs	r2, #1
 8019fd2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019fd4:	4b15      	ldr	r3, [pc, #84]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	755a      	strb	r2, [r3, #21]
        {
 8019fda:	e00b      	b.n	8019ff4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	7d5a      	ldrb	r2, [r3, #21]
 8019fe0:	4b12      	ldr	r3, [pc, #72]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019fe2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	7d9a      	ldrb	r2, [r3, #22]
 8019fe8:	4b10      	ldr	r3, [pc, #64]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019fea:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	7d1a      	ldrb	r2, [r3, #20]
 8019ff0:	4b0e      	ldr	r3, [pc, #56]	@ (801a02c <RadioSetTxGenericConfig+0x2e4>)
 8019ff2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019ff4:	f7ff f807 	bl	8019006 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019ff8:	2000      	movs	r0, #0
 8019ffa:	f7fe f9b1 	bl	8018360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019ffe:	480e      	ldr	r0, [pc, #56]	@ (801a038 <RadioSetTxGenericConfig+0x2f0>)
 801a000:	f000 fdca 	bl	801ab98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a004:	480d      	ldr	r0, [pc, #52]	@ (801a03c <RadioSetTxGenericConfig+0x2f4>)
 801a006:	f000 fe99 	bl	801ad3c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a00a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a00e:	4618      	mov	r0, r3
 801a010:	f000 f961 	bl	801a2d6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	8a1b      	ldrh	r3, [r3, #16]
 801a018:	4618      	mov	r0, r3
 801a01a:	f000 f9ab 	bl	801a374 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	899b      	ldrh	r3, [r3, #12]
 801a022:	4618      	mov	r0, r3
 801a024:	f000 f986 	bl	801a334 <SUBGRF_SetCrcPolynomial>
        break;
 801a028:	e0a6      	b.n	801a178 <RadioSetTxGenericConfig+0x430>
 801a02a:	bf00      	nop
 801a02c:	20001cd0 	.word	0x20001cd0
 801a030:	20001ccc 	.word	0x20001ccc
 801a034:	20001d2c 	.word	0x20001d2c
 801a038:	20001d08 	.word	0x20001d08
 801a03c:	20001cde 	.word	0x20001cde
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a040:	4b59      	ldr	r3, [pc, #356]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a042:	2201      	movs	r2, #1
 801a044:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	781a      	ldrb	r2, [r3, #0]
 801a04c:	4b56      	ldr	r3, [pc, #344]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a04e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	785a      	ldrb	r2, [r3, #1]
 801a056:	4b54      	ldr	r3, [pc, #336]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	789a      	ldrb	r2, [r3, #2]
 801a060:	4b51      	ldr	r3, [pc, #324]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a062:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a066:	68bb      	ldr	r3, [r7, #8]
 801a068:	78db      	ldrb	r3, [r3, #3]
 801a06a:	2b02      	cmp	r3, #2
 801a06c:	d010      	beq.n	801a090 <RadioSetTxGenericConfig+0x348>
 801a06e:	2b02      	cmp	r3, #2
 801a070:	dc20      	bgt.n	801a0b4 <RadioSetTxGenericConfig+0x36c>
 801a072:	2b00      	cmp	r3, #0
 801a074:	d002      	beq.n	801a07c <RadioSetTxGenericConfig+0x334>
 801a076:	2b01      	cmp	r3, #1
 801a078:	d005      	beq.n	801a086 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a07a:	e01b      	b.n	801a0b4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a07c:	4b4a      	ldr	r3, [pc, #296]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a07e:	2200      	movs	r2, #0
 801a080:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a084:	e017      	b.n	801a0b6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a086:	4b48      	ldr	r3, [pc, #288]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a088:	2201      	movs	r2, #1
 801a08a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a08e:	e012      	b.n	801a0b6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	781b      	ldrb	r3, [r3, #0]
 801a094:	2b0b      	cmp	r3, #11
 801a096:	d003      	beq.n	801a0a0 <RadioSetTxGenericConfig+0x358>
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	2b0c      	cmp	r3, #12
 801a09e:	d104      	bne.n	801a0aa <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a0a0:	4b41      	ldr	r3, [pc, #260]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0a2:	2201      	movs	r2, #1
 801a0a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a0a8:	e005      	b.n	801a0b6 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a0aa:	4b3f      	ldr	r3, [pc, #252]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a0b2:	e000      	b.n	801a0b6 <RadioSetTxGenericConfig+0x36e>
            break;
 801a0b4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a0b6:	4b3c      	ldr	r3, [pc, #240]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0b8:	2201      	movs	r2, #1
 801a0ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	889a      	ldrh	r2, [r3, #4]
 801a0c0:	4b39      	ldr	r3, [pc, #228]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a0c4:	68bb      	ldr	r3, [r7, #8]
 801a0c6:	799a      	ldrb	r2, [r3, #6]
 801a0c8:	4b37      	ldr	r3, [pc, #220]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0ca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	79da      	ldrb	r2, [r3, #7]
 801a0d0:	4b35      	ldr	r3, [pc, #212]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	7a1a      	ldrb	r2, [r3, #8]
 801a0da:	4b33      	ldr	r3, [pc, #204]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801a0e0:	f7fe ff91 	bl	8019006 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a0e4:	2001      	movs	r0, #1
 801a0e6:	f7fe f93b 	bl	8018360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0ea:	4830      	ldr	r0, [pc, #192]	@ (801a1ac <RadioSetTxGenericConfig+0x464>)
 801a0ec:	f000 fd54 	bl	801ab98 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0f0:	482f      	ldr	r0, [pc, #188]	@ (801a1b0 <RadioSetTxGenericConfig+0x468>)
 801a0f2:	f000 fe23 	bl	801ad3c <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a0f6:	4b2c      	ldr	r3, [pc, #176]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a0f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a0fc:	2b06      	cmp	r3, #6
 801a0fe:	d10d      	bne.n	801a11c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a100:	f640 0089 	movw	r0, #2185	@ 0x889
 801a104:	f000 ff76 	bl	801aff4 <SUBGRF_ReadRegister>
 801a108:	4603      	mov	r3, r0
 801a10a:	f023 0304 	bic.w	r3, r3, #4
 801a10e:	b2db      	uxtb	r3, r3
 801a110:	4619      	mov	r1, r3
 801a112:	f640 0089 	movw	r0, #2185	@ 0x889
 801a116:	f000 ff59 	bl	801afcc <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a11a:	e02d      	b.n	801a178 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a11c:	f640 0089 	movw	r0, #2185	@ 0x889
 801a120:	f000 ff68 	bl	801aff4 <SUBGRF_ReadRegister>
 801a124:	4603      	mov	r3, r0
 801a126:	f043 0304 	orr.w	r3, r3, #4
 801a12a:	b2db      	uxtb	r3, r3
 801a12c:	4619      	mov	r1, r3
 801a12e:	f640 0089 	movw	r0, #2185	@ 0x889
 801a132:	f000 ff4b 	bl	801afcc <SUBGRF_WriteRegister>
        break;
 801a136:	e01f      	b.n	801a178 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d004      	beq.n	801a14a <RadioSetTxGenericConfig+0x402>
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a148:	d902      	bls.n	801a150 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a14a:	f04f 33ff 	mov.w	r3, #4294967295
 801a14e:	e027      	b.n	801a1a0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a150:	2003      	movs	r0, #3
 801a152:	f7fe f905 	bl	8018360 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a156:	4b14      	ldr	r3, [pc, #80]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a158:	2202      	movs	r2, #2
 801a15a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a15e:	68bb      	ldr	r3, [r7, #8]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	4a11      	ldr	r2, [pc, #68]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a164:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a166:	4b10      	ldr	r3, [pc, #64]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a168:	2216      	movs	r2, #22
 801a16a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a16e:	480f      	ldr	r0, [pc, #60]	@ (801a1ac <RadioSetTxGenericConfig+0x464>)
 801a170:	f000 fd12 	bl	801ab98 <SUBGRF_SetModulationParams>
        break;
 801a174:	e000      	b.n	801a178 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a176:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a17c:	4618      	mov	r0, r3
 801a17e:	f001 f841 	bl	801b204 <SUBGRF_SetRfTxPower>
 801a182:	4603      	mov	r3, r0
 801a184:	461a      	mov	r2, r3
 801a186:	4b08      	ldr	r3, [pc, #32]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a188:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a18c:	4b06      	ldr	r3, [pc, #24]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a18e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a192:	4618      	mov	r0, r3
 801a194:	f001 fa05 	bl	801b5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a198:	4a03      	ldr	r2, [pc, #12]	@ (801a1a8 <RadioSetTxGenericConfig+0x460>)
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	6053      	str	r3, [r2, #4]
    return 0;
 801a19e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3738      	adds	r7, #56	@ 0x38
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	20001cd0 	.word	0x20001cd0
 801a1ac:	20001d08 	.word	0x20001d08
 801a1b0:	20001cde 	.word	0x20001cde

0801a1b4 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d002      	beq.n	801a1c8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a1c2:	4a1a      	ldr	r2, [pc, #104]	@ (801a22c <SUBGRF_Init+0x78>)
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a1c8:	f7e8 f9aa 	bl	8002520 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a1cc:	2002      	movs	r0, #2
 801a1ce:	f001 f8e5 	bl	801b39c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a1d2:	4b17      	ldr	r3, [pc, #92]	@ (801a230 <SUBGRF_Init+0x7c>)
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a1d8:	2000      	movs	r0, #0
 801a1da:	f000 f977 	bl	801a4cc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a1de:	f7f1 fd8f 	bl	800bd00 <RBI_IsTCXO>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	2b01      	cmp	r3, #1
 801a1e6:	d10e      	bne.n	801a206 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a1e8:	2140      	movs	r1, #64	@ 0x40
 801a1ea:	2001      	movs	r0, #1
 801a1ec:	f000 fb78 	bl	801a8e0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a1f0:	2100      	movs	r1, #0
 801a1f2:	f640 1011 	movw	r0, #2321	@ 0x911
 801a1f6:	f000 fee9 	bl	801afcc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a1fa:	237f      	movs	r3, #127	@ 0x7f
 801a1fc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a1fe:	7b38      	ldrb	r0, [r7, #12]
 801a200:	f000 fa85 	bl	801a70e <SUBGRF_Calibrate>
 801a204:	e009      	b.n	801a21a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a206:	2120      	movs	r1, #32
 801a208:	f640 1011 	movw	r0, #2321	@ 0x911
 801a20c:	f000 fede 	bl	801afcc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a210:	2120      	movs	r1, #32
 801a212:	f640 1012 	movw	r0, #2322	@ 0x912
 801a216:	f000 fed9 	bl	801afcc <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a21a:	f7f1 fd55 	bl	800bcc8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a21e:	4b05      	ldr	r3, [pc, #20]	@ (801a234 <SUBGRF_Init+0x80>)
 801a220:	2201      	movs	r2, #1
 801a222:	701a      	strb	r2, [r3, #0]
}
 801a224:	bf00      	nop
 801a226:	3710      	adds	r7, #16
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	20001d68 	.word	0x20001d68
 801a230:	20001d64 	.word	0x20001d64
 801a234:	20001d5c 	.word	0x20001d5c

0801a238 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a238:	b480      	push	{r7}
 801a23a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a23c:	4b02      	ldr	r3, [pc, #8]	@ (801a248 <SUBGRF_GetOperatingMode+0x10>)
 801a23e:	781b      	ldrb	r3, [r3, #0]
}
 801a240:	4618      	mov	r0, r3
 801a242:	46bd      	mov	sp, r7
 801a244:	bc80      	pop	{r7}
 801a246:	4770      	bx	lr
 801a248:	20001d5c 	.word	0x20001d5c

0801a24c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b082      	sub	sp, #8
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	460b      	mov	r3, r1
 801a256:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a258:	78fb      	ldrb	r3, [r7, #3]
 801a25a:	461a      	mov	r2, r3
 801a25c:	6879      	ldr	r1, [r7, #4]
 801a25e:	2000      	movs	r0, #0
 801a260:	f000 ff20 	bl	801b0a4 <SUBGRF_WriteBuffer>
}
 801a264:	bf00      	nop
 801a266:	3708      	adds	r7, #8
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}

0801a26c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b086      	sub	sp, #24
 801a270:	af00      	add	r7, sp, #0
 801a272:	60f8      	str	r0, [r7, #12]
 801a274:	60b9      	str	r1, [r7, #8]
 801a276:	4613      	mov	r3, r2
 801a278:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a27a:	2300      	movs	r3, #0
 801a27c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a27e:	f107 0317 	add.w	r3, r7, #23
 801a282:	4619      	mov	r1, r3
 801a284:	68b8      	ldr	r0, [r7, #8]
 801a286:	f000 fe23 	bl	801aed0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	79fa      	ldrb	r2, [r7, #7]
 801a290:	429a      	cmp	r2, r3
 801a292:	d201      	bcs.n	801a298 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a294:	2301      	movs	r3, #1
 801a296:	e007      	b.n	801a2a8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a298:	7df8      	ldrb	r0, [r7, #23]
 801a29a:	68bb      	ldr	r3, [r7, #8]
 801a29c:	781b      	ldrb	r3, [r3, #0]
 801a29e:	461a      	mov	r2, r3
 801a2a0:	68f9      	ldr	r1, [r7, #12]
 801a2a2:	f000 ff21 	bl	801b0e8 <SUBGRF_ReadBuffer>

    return 0;
 801a2a6:	2300      	movs	r3, #0
}
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	3718      	adds	r7, #24
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}

0801a2b0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	460b      	mov	r3, r1
 801a2ba:	607a      	str	r2, [r7, #4]
 801a2bc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a2be:	7afb      	ldrb	r3, [r7, #11]
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	68f8      	ldr	r0, [r7, #12]
 801a2c4:	f7ff ffc2 	bl	801a24c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 f91b 	bl	801a504 <SUBGRF_SetTx>
}
 801a2ce:	bf00      	nop
 801a2d0:	3710      	adds	r7, #16
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	bd80      	pop	{r7, pc}

0801a2d6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a2d6:	b580      	push	{r7, lr}
 801a2d8:	b082      	sub	sp, #8
 801a2da:	af00      	add	r7, sp, #0
 801a2dc:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a2de:	2208      	movs	r2, #8
 801a2e0:	6879      	ldr	r1, [r7, #4]
 801a2e2:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a2e6:	f000 fe99 	bl	801b01c <SUBGRF_WriteRegisters>
    return 0;
 801a2ea:	2300      	movs	r3, #0
}
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	3708      	adds	r7, #8
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}

0801a2f4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b084      	sub	sp, #16
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a2fe:	88fb      	ldrh	r3, [r7, #6]
 801a300:	0a1b      	lsrs	r3, r3, #8
 801a302:	b29b      	uxth	r3, r3
 801a304:	b2db      	uxtb	r3, r3
 801a306:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a308:	88fb      	ldrh	r3, [r7, #6]
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a30e:	f000 fb6b 	bl	801a9e8 <SUBGRF_GetPacketType>
 801a312:	4603      	mov	r3, r0
 801a314:	2b00      	cmp	r3, #0
 801a316:	d108      	bne.n	801a32a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a318:	f107 030c 	add.w	r3, r7, #12
 801a31c:	2202      	movs	r2, #2
 801a31e:	4619      	mov	r1, r3
 801a320:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a324:	f000 fe7a 	bl	801b01c <SUBGRF_WriteRegisters>
            break;
 801a328:	e000      	b.n	801a32c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a32a:	bf00      	nop
    }
}
 801a32c:	bf00      	nop
 801a32e:	3710      	adds	r7, #16
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}

0801a334 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b084      	sub	sp, #16
 801a338:	af00      	add	r7, sp, #0
 801a33a:	4603      	mov	r3, r0
 801a33c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a33e:	88fb      	ldrh	r3, [r7, #6]
 801a340:	0a1b      	lsrs	r3, r3, #8
 801a342:	b29b      	uxth	r3, r3
 801a344:	b2db      	uxtb	r3, r3
 801a346:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a348:	88fb      	ldrh	r3, [r7, #6]
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a34e:	f000 fb4b 	bl	801a9e8 <SUBGRF_GetPacketType>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d108      	bne.n	801a36a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a358:	f107 030c 	add.w	r3, r7, #12
 801a35c:	2202      	movs	r2, #2
 801a35e:	4619      	mov	r1, r3
 801a360:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a364:	f000 fe5a 	bl	801b01c <SUBGRF_WriteRegisters>
            break;
 801a368:	e000      	b.n	801a36c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a36a:	bf00      	nop
    }
}
 801a36c:	bf00      	nop
 801a36e:	3710      	adds	r7, #16
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}

0801a374 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b084      	sub	sp, #16
 801a378:	af00      	add	r7, sp, #0
 801a37a:	4603      	mov	r3, r0
 801a37c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a37e:	2300      	movs	r3, #0
 801a380:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a382:	f000 fb31 	bl	801a9e8 <SUBGRF_GetPacketType>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d121      	bne.n	801a3d0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a38c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a390:	f000 fe30 	bl	801aff4 <SUBGRF_ReadRegister>
 801a394:	4603      	mov	r3, r0
 801a396:	f023 0301 	bic.w	r3, r3, #1
 801a39a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a39c:	88fb      	ldrh	r3, [r7, #6]
 801a39e:	0a1b      	lsrs	r3, r3, #8
 801a3a0:	b29b      	uxth	r3, r3
 801a3a2:	b25b      	sxtb	r3, r3
 801a3a4:	f003 0301 	and.w	r3, r3, #1
 801a3a8:	b25a      	sxtb	r2, r3
 801a3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3ae:	4313      	orrs	r3, r2
 801a3b0:	b25b      	sxtb	r3, r3
 801a3b2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a3b4:	7bfb      	ldrb	r3, [r7, #15]
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a3bc:	f000 fe06 	bl	801afcc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a3c0:	88fb      	ldrh	r3, [r7, #6]
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	4619      	mov	r1, r3
 801a3c6:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a3ca:	f000 fdff 	bl	801afcc <SUBGRF_WriteRegister>
            break;
 801a3ce:	e000      	b.n	801a3d2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a3d0:	bf00      	nop
    }
}
 801a3d2:	bf00      	nop
 801a3d4:	3710      	adds	r7, #16
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}

0801a3da <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a3da:	b580      	push	{r7, lr}
 801a3dc:	b082      	sub	sp, #8
 801a3de:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a3ec:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a3f0:	f000 fe00 	bl	801aff4 <SUBGRF_ReadRegister>
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a3f8:	79fb      	ldrb	r3, [r7, #7]
 801a3fa:	f023 0301 	bic.w	r3, r3, #1
 801a3fe:	b2db      	uxtb	r3, r3
 801a400:	4619      	mov	r1, r3
 801a402:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a406:	f000 fde1 	bl	801afcc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a40a:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a40e:	f000 fdf1 	bl	801aff4 <SUBGRF_ReadRegister>
 801a412:	4603      	mov	r3, r0
 801a414:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a416:	79bb      	ldrb	r3, [r7, #6]
 801a418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	4619      	mov	r1, r3
 801a420:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a424:	f000 fdd2 	bl	801afcc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a428:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a42c:	f000 f88a 	bl	801a544 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a430:	463b      	mov	r3, r7
 801a432:	2204      	movs	r2, #4
 801a434:	4619      	mov	r1, r3
 801a436:	f640 0019 	movw	r0, #2073	@ 0x819
 801a43a:	f000 fe11 	bl	801b060 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a43e:	2000      	movs	r0, #0
 801a440:	f000 f844 	bl	801a4cc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a444:	79fb      	ldrb	r3, [r7, #7]
 801a446:	4619      	mov	r1, r3
 801a448:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a44c:	f000 fdbe 	bl	801afcc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a450:	79bb      	ldrb	r3, [r7, #6]
 801a452:	4619      	mov	r1, r3
 801a454:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a458:	f000 fdb8 	bl	801afcc <SUBGRF_WriteRegister>

    return number;
 801a45c:	683b      	ldr	r3, [r7, #0]
}
 801a45e:	4618      	mov	r0, r3
 801a460:	3708      	adds	r7, #8
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
	...

0801a468 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a470:	2000      	movs	r0, #0
 801a472:	f7f1 fc30 	bl	800bcd6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a476:	2002      	movs	r0, #2
 801a478:	f000 ff90 	bl	801b39c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a47c:	793b      	ldrb	r3, [r7, #4]
 801a47e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a482:	b2db      	uxtb	r3, r3
 801a484:	009b      	lsls	r3, r3, #2
 801a486:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a488:	793b      	ldrb	r3, [r7, #4]
 801a48a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a48e:	b2db      	uxtb	r3, r3
 801a490:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a492:	b25b      	sxtb	r3, r3
 801a494:	4313      	orrs	r3, r2
 801a496:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a498:	793b      	ldrb	r3, [r7, #4]
 801a49a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a4a2:	4313      	orrs	r3, r2
 801a4a4:	b25b      	sxtb	r3, r3
 801a4a6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a4a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a4aa:	f107 030f 	add.w	r3, r7, #15
 801a4ae:	2201      	movs	r2, #1
 801a4b0:	4619      	mov	r1, r3
 801a4b2:	2084      	movs	r0, #132	@ 0x84
 801a4b4:	f000 fe3a 	bl	801b12c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a4b8:	4b03      	ldr	r3, [pc, #12]	@ (801a4c8 <SUBGRF_SetSleep+0x60>)
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	701a      	strb	r2, [r3, #0]
}
 801a4be:	bf00      	nop
 801a4c0:	3710      	adds	r7, #16
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}
 801a4c6:	bf00      	nop
 801a4c8:	20001d5c 	.word	0x20001d5c

0801a4cc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b082      	sub	sp, #8
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a4d6:	1dfb      	adds	r3, r7, #7
 801a4d8:	2201      	movs	r2, #1
 801a4da:	4619      	mov	r1, r3
 801a4dc:	2080      	movs	r0, #128	@ 0x80
 801a4de:	f000 fe25 	bl	801b12c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a4e2:	79fb      	ldrb	r3, [r7, #7]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d103      	bne.n	801a4f0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a4e8:	4b05      	ldr	r3, [pc, #20]	@ (801a500 <SUBGRF_SetStandby+0x34>)
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a4ee:	e002      	b.n	801a4f6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a4f0:	4b03      	ldr	r3, [pc, #12]	@ (801a500 <SUBGRF_SetStandby+0x34>)
 801a4f2:	2202      	movs	r2, #2
 801a4f4:	701a      	strb	r2, [r3, #0]
}
 801a4f6:	bf00      	nop
 801a4f8:	3708      	adds	r7, #8
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
 801a4fe:	bf00      	nop
 801a500:	20001d5c 	.word	0x20001d5c

0801a504 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a50c:	4b0c      	ldr	r3, [pc, #48]	@ (801a540 <SUBGRF_SetTx+0x3c>)
 801a50e:	2204      	movs	r2, #4
 801a510:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	0c1b      	lsrs	r3, r3, #16
 801a516:	b2db      	uxtb	r3, r3
 801a518:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	0a1b      	lsrs	r3, r3, #8
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	b2db      	uxtb	r3, r3
 801a526:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a528:	f107 030c 	add.w	r3, r7, #12
 801a52c:	2203      	movs	r2, #3
 801a52e:	4619      	mov	r1, r3
 801a530:	2083      	movs	r0, #131	@ 0x83
 801a532:	f000 fdfb 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a536:	bf00      	nop
 801a538:	3710      	adds	r7, #16
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	bf00      	nop
 801a540:	20001d5c 	.word	0x20001d5c

0801a544 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a544:	b580      	push	{r7, lr}
 801a546:	b084      	sub	sp, #16
 801a548:	af00      	add	r7, sp, #0
 801a54a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a54c:	4b0c      	ldr	r3, [pc, #48]	@ (801a580 <SUBGRF_SetRx+0x3c>)
 801a54e:	2205      	movs	r2, #5
 801a550:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	0c1b      	lsrs	r3, r3, #16
 801a556:	b2db      	uxtb	r3, r3
 801a558:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	0a1b      	lsrs	r3, r3, #8
 801a55e:	b2db      	uxtb	r3, r3
 801a560:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	b2db      	uxtb	r3, r3
 801a566:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a568:	f107 030c 	add.w	r3, r7, #12
 801a56c:	2203      	movs	r2, #3
 801a56e:	4619      	mov	r1, r3
 801a570:	2082      	movs	r0, #130	@ 0x82
 801a572:	f000 fddb 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a576:	bf00      	nop
 801a578:	3710      	adds	r7, #16
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}
 801a57e:	bf00      	nop
 801a580:	20001d5c 	.word	0x20001d5c

0801a584 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b084      	sub	sp, #16
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a58c:	4b0e      	ldr	r3, [pc, #56]	@ (801a5c8 <SUBGRF_SetRxBoosted+0x44>)
 801a58e:	2205      	movs	r2, #5
 801a590:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a592:	2197      	movs	r1, #151	@ 0x97
 801a594:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a598:	f000 fd18 	bl	801afcc <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	0c1b      	lsrs	r3, r3, #16
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	0a1b      	lsrs	r3, r3, #8
 801a5a8:	b2db      	uxtb	r3, r3
 801a5aa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a5b2:	f107 030c 	add.w	r3, r7, #12
 801a5b6:	2203      	movs	r2, #3
 801a5b8:	4619      	mov	r1, r3
 801a5ba:	2082      	movs	r0, #130	@ 0x82
 801a5bc:	f000 fdb6 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a5c0:	bf00      	nop
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	20001d5c 	.word	0x20001d5c

0801a5cc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	0c1b      	lsrs	r3, r3, #16
 801a5da:	b2db      	uxtb	r3, r3
 801a5dc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	0a1b      	lsrs	r3, r3, #8
 801a5e2:	b2db      	uxtb	r3, r3
 801a5e4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	0c1b      	lsrs	r3, r3, #16
 801a5f0:	b2db      	uxtb	r3, r3
 801a5f2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	0a1b      	lsrs	r3, r3, #8
 801a5f8:	b2db      	uxtb	r3, r3
 801a5fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a5fc:	683b      	ldr	r3, [r7, #0]
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a602:	f107 0308 	add.w	r3, r7, #8
 801a606:	2206      	movs	r2, #6
 801a608:	4619      	mov	r1, r3
 801a60a:	2094      	movs	r0, #148	@ 0x94
 801a60c:	f000 fd8e 	bl	801b12c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a610:	4b03      	ldr	r3, [pc, #12]	@ (801a620 <SUBGRF_SetRxDutyCycle+0x54>)
 801a612:	2206      	movs	r2, #6
 801a614:	701a      	strb	r2, [r3, #0]
}
 801a616:	bf00      	nop
 801a618:	3710      	adds	r7, #16
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	bf00      	nop
 801a620:	20001d5c 	.word	0x20001d5c

0801a624 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a624:	b580      	push	{r7, lr}
 801a626:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a628:	2200      	movs	r2, #0
 801a62a:	2100      	movs	r1, #0
 801a62c:	20c5      	movs	r0, #197	@ 0xc5
 801a62e:	f000 fd7d 	bl	801b12c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a632:	4b02      	ldr	r3, [pc, #8]	@ (801a63c <SUBGRF_SetCad+0x18>)
 801a634:	2207      	movs	r2, #7
 801a636:	701a      	strb	r2, [r3, #0]
}
 801a638:	bf00      	nop
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	20001d5c 	.word	0x20001d5c

0801a640 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a640:	b580      	push	{r7, lr}
 801a642:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a644:	2200      	movs	r2, #0
 801a646:	2100      	movs	r1, #0
 801a648:	20d1      	movs	r0, #209	@ 0xd1
 801a64a:	f000 fd6f 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a64e:	bf00      	nop
 801a650:	bd80      	pop	{r7, pc}

0801a652 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a652:	b580      	push	{r7, lr}
 801a654:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a656:	2200      	movs	r2, #0
 801a658:	2100      	movs	r1, #0
 801a65a:	20d2      	movs	r0, #210	@ 0xd2
 801a65c:	f000 fd66 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a660:	bf00      	nop
 801a662:	bd80      	pop	{r7, pc}

0801a664 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b082      	sub	sp, #8
 801a668:	af00      	add	r7, sp, #0
 801a66a:	4603      	mov	r3, r0
 801a66c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a66e:	1dfb      	adds	r3, r7, #7
 801a670:	2201      	movs	r2, #1
 801a672:	4619      	mov	r1, r3
 801a674:	209f      	movs	r0, #159	@ 0x9f
 801a676:	f000 fd59 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a67a:	bf00      	nop
 801a67c:	3708      	adds	r7, #8
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}

0801a682 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a682:	b580      	push	{r7, lr}
 801a684:	b084      	sub	sp, #16
 801a686:	af00      	add	r7, sp, #0
 801a688:	4603      	mov	r3, r0
 801a68a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a68c:	1dfb      	adds	r3, r7, #7
 801a68e:	2201      	movs	r2, #1
 801a690:	4619      	mov	r1, r3
 801a692:	20a0      	movs	r0, #160	@ 0xa0
 801a694:	f000 fd4a 	bl	801b12c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a698:	79fb      	ldrb	r3, [r7, #7]
 801a69a:	2b3f      	cmp	r3, #63	@ 0x3f
 801a69c:	d91c      	bls.n	801a6d8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a69e:	79fb      	ldrb	r3, [r7, #7]
 801a6a0:	085b      	lsrs	r3, r3, #1
 801a6a2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a6ac:	e005      	b.n	801a6ba <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a6ae:	7bfb      	ldrb	r3, [r7, #15]
 801a6b0:	089b      	lsrs	r3, r3, #2
 801a6b2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a6b4:	7bbb      	ldrb	r3, [r7, #14]
 801a6b6:	3301      	adds	r3, #1
 801a6b8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a6ba:	7bfb      	ldrb	r3, [r7, #15]
 801a6bc:	2b1f      	cmp	r3, #31
 801a6be:	d8f6      	bhi.n	801a6ae <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a6c0:	7bfb      	ldrb	r3, [r7, #15]
 801a6c2:	00db      	lsls	r3, r3, #3
 801a6c4:	b2da      	uxtb	r2, r3
 801a6c6:	7bbb      	ldrb	r3, [r7, #14]
 801a6c8:	4413      	add	r3, r2
 801a6ca:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a6cc:	7b7b      	ldrb	r3, [r7, #13]
 801a6ce:	4619      	mov	r1, r3
 801a6d0:	f240 7006 	movw	r0, #1798	@ 0x706
 801a6d4:	f000 fc7a 	bl	801afcc <SUBGRF_WriteRegister>
    }
}
 801a6d8:	bf00      	nop
 801a6da:	3710      	adds	r7, #16
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}

0801a6e0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b082      	sub	sp, #8
 801a6e4:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a6e6:	f7f1 fb12 	bl	800bd0e <RBI_IsDCDC>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	d102      	bne.n	801a6f6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	71fb      	strb	r3, [r7, #7]
 801a6f4:	e001      	b.n	801a6fa <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a6fa:	1dfb      	adds	r3, r7, #7
 801a6fc:	2201      	movs	r2, #1
 801a6fe:	4619      	mov	r1, r3
 801a700:	2096      	movs	r0, #150	@ 0x96
 801a702:	f000 fd13 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a706:	bf00      	nop
 801a708:	3708      	adds	r7, #8
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}

0801a70e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a70e:	b580      	push	{r7, lr}
 801a710:	b084      	sub	sp, #16
 801a712:	af00      	add	r7, sp, #0
 801a714:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a716:	793b      	ldrb	r3, [r7, #4]
 801a718:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a71c:	b2db      	uxtb	r3, r3
 801a71e:	019b      	lsls	r3, r3, #6
 801a720:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a722:	793b      	ldrb	r3, [r7, #4]
 801a724:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a72c:	b25b      	sxtb	r3, r3
 801a72e:	4313      	orrs	r3, r2
 801a730:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a732:	793b      	ldrb	r3, [r7, #4]
 801a734:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a73c:	b25b      	sxtb	r3, r3
 801a73e:	4313      	orrs	r3, r2
 801a740:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a742:	793b      	ldrb	r3, [r7, #4]
 801a744:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a74c:	b25b      	sxtb	r3, r3
 801a74e:	4313      	orrs	r3, r2
 801a750:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a752:	793b      	ldrb	r3, [r7, #4]
 801a754:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a758:	b2db      	uxtb	r3, r3
 801a75a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a75c:	b25b      	sxtb	r3, r3
 801a75e:	4313      	orrs	r3, r2
 801a760:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a762:	793b      	ldrb	r3, [r7, #4]
 801a764:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a768:	b2db      	uxtb	r3, r3
 801a76a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a76c:	b25b      	sxtb	r3, r3
 801a76e:	4313      	orrs	r3, r2
 801a770:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a772:	793b      	ldrb	r3, [r7, #4]
 801a774:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a778:	b2db      	uxtb	r3, r3
 801a77a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a77c:	4313      	orrs	r3, r2
 801a77e:	b25b      	sxtb	r3, r3
 801a780:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a782:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a784:	f107 030f 	add.w	r3, r7, #15
 801a788:	2201      	movs	r2, #1
 801a78a:	4619      	mov	r1, r3
 801a78c:	2089      	movs	r0, #137	@ 0x89
 801a78e:	f000 fccd 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a792:	bf00      	nop
 801a794:	3710      	adds	r7, #16
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}
	...

0801a79c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b084      	sub	sp, #16
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	4a1b      	ldr	r2, [pc, #108]	@ (801a814 <SUBGRF_CalibrateImage+0x78>)
 801a7a8:	4293      	cmp	r3, r2
 801a7aa:	d904      	bls.n	801a7b6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a7ac:	23e1      	movs	r3, #225	@ 0xe1
 801a7ae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a7b0:	23e9      	movs	r3, #233	@ 0xe9
 801a7b2:	737b      	strb	r3, [r7, #13]
 801a7b4:	e022      	b.n	801a7fc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	4a17      	ldr	r2, [pc, #92]	@ (801a818 <SUBGRF_CalibrateImage+0x7c>)
 801a7ba:	4293      	cmp	r3, r2
 801a7bc:	d904      	bls.n	801a7c8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a7be:	23d7      	movs	r3, #215	@ 0xd7
 801a7c0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a7c2:	23db      	movs	r3, #219	@ 0xdb
 801a7c4:	737b      	strb	r3, [r7, #13]
 801a7c6:	e019      	b.n	801a7fc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	4a14      	ldr	r2, [pc, #80]	@ (801a81c <SUBGRF_CalibrateImage+0x80>)
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	d904      	bls.n	801a7da <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a7d0:	23c1      	movs	r3, #193	@ 0xc1
 801a7d2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a7d4:	23c5      	movs	r3, #197	@ 0xc5
 801a7d6:	737b      	strb	r3, [r7, #13]
 801a7d8:	e010      	b.n	801a7fc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	4a10      	ldr	r2, [pc, #64]	@ (801a820 <SUBGRF_CalibrateImage+0x84>)
 801a7de:	4293      	cmp	r3, r2
 801a7e0:	d904      	bls.n	801a7ec <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a7e2:	2375      	movs	r3, #117	@ 0x75
 801a7e4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a7e6:	2381      	movs	r3, #129	@ 0x81
 801a7e8:	737b      	strb	r3, [r7, #13]
 801a7ea:	e007      	b.n	801a7fc <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	4a0d      	ldr	r2, [pc, #52]	@ (801a824 <SUBGRF_CalibrateImage+0x88>)
 801a7f0:	4293      	cmp	r3, r2
 801a7f2:	d903      	bls.n	801a7fc <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a7f4:	236b      	movs	r3, #107	@ 0x6b
 801a7f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a7f8:	236f      	movs	r3, #111	@ 0x6f
 801a7fa:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a7fc:	f107 030c 	add.w	r3, r7, #12
 801a800:	2202      	movs	r2, #2
 801a802:	4619      	mov	r1, r3
 801a804:	2098      	movs	r0, #152	@ 0x98
 801a806:	f000 fc91 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a80a:	bf00      	nop
 801a80c:	3710      	adds	r7, #16
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd80      	pop	{r7, pc}
 801a812:	bf00      	nop
 801a814:	35a4e900 	.word	0x35a4e900
 801a818:	32a9f880 	.word	0x32a9f880
 801a81c:	2de54480 	.word	0x2de54480
 801a820:	1b6b0b00 	.word	0x1b6b0b00
 801a824:	1954fc40 	.word	0x1954fc40

0801a828 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a828:	b590      	push	{r4, r7, lr}
 801a82a:	b085      	sub	sp, #20
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	4604      	mov	r4, r0
 801a830:	4608      	mov	r0, r1
 801a832:	4611      	mov	r1, r2
 801a834:	461a      	mov	r2, r3
 801a836:	4623      	mov	r3, r4
 801a838:	71fb      	strb	r3, [r7, #7]
 801a83a:	4603      	mov	r3, r0
 801a83c:	71bb      	strb	r3, [r7, #6]
 801a83e:	460b      	mov	r3, r1
 801a840:	717b      	strb	r3, [r7, #5]
 801a842:	4613      	mov	r3, r2
 801a844:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a846:	79fb      	ldrb	r3, [r7, #7]
 801a848:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a84a:	79bb      	ldrb	r3, [r7, #6]
 801a84c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a84e:	797b      	ldrb	r3, [r7, #5]
 801a850:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a852:	793b      	ldrb	r3, [r7, #4]
 801a854:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a856:	f107 030c 	add.w	r3, r7, #12
 801a85a:	2204      	movs	r2, #4
 801a85c:	4619      	mov	r1, r3
 801a85e:	2095      	movs	r0, #149	@ 0x95
 801a860:	f000 fc64 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a864:	bf00      	nop
 801a866:	3714      	adds	r7, #20
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd90      	pop	{r4, r7, pc}

0801a86c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a86c:	b590      	push	{r4, r7, lr}
 801a86e:	b085      	sub	sp, #20
 801a870:	af00      	add	r7, sp, #0
 801a872:	4604      	mov	r4, r0
 801a874:	4608      	mov	r0, r1
 801a876:	4611      	mov	r1, r2
 801a878:	461a      	mov	r2, r3
 801a87a:	4623      	mov	r3, r4
 801a87c:	80fb      	strh	r3, [r7, #6]
 801a87e:	4603      	mov	r3, r0
 801a880:	80bb      	strh	r3, [r7, #4]
 801a882:	460b      	mov	r3, r1
 801a884:	807b      	strh	r3, [r7, #2]
 801a886:	4613      	mov	r3, r2
 801a888:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a88a:	88fb      	ldrh	r3, [r7, #6]
 801a88c:	0a1b      	lsrs	r3, r3, #8
 801a88e:	b29b      	uxth	r3, r3
 801a890:	b2db      	uxtb	r3, r3
 801a892:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a894:	88fb      	ldrh	r3, [r7, #6]
 801a896:	b2db      	uxtb	r3, r3
 801a898:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a89a:	88bb      	ldrh	r3, [r7, #4]
 801a89c:	0a1b      	lsrs	r3, r3, #8
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a8a4:	88bb      	ldrh	r3, [r7, #4]
 801a8a6:	b2db      	uxtb	r3, r3
 801a8a8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a8aa:	887b      	ldrh	r3, [r7, #2]
 801a8ac:	0a1b      	lsrs	r3, r3, #8
 801a8ae:	b29b      	uxth	r3, r3
 801a8b0:	b2db      	uxtb	r3, r3
 801a8b2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a8b4:	887b      	ldrh	r3, [r7, #2]
 801a8b6:	b2db      	uxtb	r3, r3
 801a8b8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a8ba:	883b      	ldrh	r3, [r7, #0]
 801a8bc:	0a1b      	lsrs	r3, r3, #8
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	b2db      	uxtb	r3, r3
 801a8c2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a8c4:	883b      	ldrh	r3, [r7, #0]
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a8ca:	f107 0308 	add.w	r3, r7, #8
 801a8ce:	2208      	movs	r2, #8
 801a8d0:	4619      	mov	r1, r3
 801a8d2:	2008      	movs	r0, #8
 801a8d4:	f000 fc2a 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a8d8:	bf00      	nop
 801a8da:	3714      	adds	r7, #20
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd90      	pop	{r4, r7, pc}

0801a8e0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b084      	sub	sp, #16
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	6039      	str	r1, [r7, #0]
 801a8ea:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a8ec:	79fb      	ldrb	r3, [r7, #7]
 801a8ee:	f003 0307 	and.w	r3, r3, #7
 801a8f2:	b2db      	uxtb	r3, r3
 801a8f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	0c1b      	lsrs	r3, r3, #16
 801a8fa:	b2db      	uxtb	r3, r3
 801a8fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	0a1b      	lsrs	r3, r3, #8
 801a902:	b2db      	uxtb	r3, r3
 801a904:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a90c:	f107 030c 	add.w	r3, r7, #12
 801a910:	2204      	movs	r2, #4
 801a912:	4619      	mov	r1, r3
 801a914:	2097      	movs	r0, #151	@ 0x97
 801a916:	f000 fc09 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a91a:	bf00      	nop
 801a91c:	3710      	adds	r7, #16
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
	...

0801a924 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a928:	b084      	sub	sp, #16
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a92e:	2300      	movs	r3, #0
 801a930:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a932:	4b1d      	ldr	r3, [pc, #116]	@ (801a9a8 <SUBGRF_SetRfFrequency+0x84>)
 801a934:	781b      	ldrb	r3, [r3, #0]
 801a936:	f083 0301 	eor.w	r3, r3, #1
 801a93a:	b2db      	uxtb	r3, r3
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d005      	beq.n	801a94c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f7ff ff2b 	bl	801a79c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a946:	4b18      	ldr	r3, [pc, #96]	@ (801a9a8 <SUBGRF_SetRfFrequency+0x84>)
 801a948:	2201      	movs	r2, #1
 801a94a:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	2200      	movs	r2, #0
 801a950:	461c      	mov	r4, r3
 801a952:	4615      	mov	r5, r2
 801a954:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a958:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a95c:	4a13      	ldr	r2, [pc, #76]	@ (801a9ac <SUBGRF_SetRfFrequency+0x88>)
 801a95e:	f04f 0300 	mov.w	r3, #0
 801a962:	4640      	mov	r0, r8
 801a964:	4649      	mov	r1, r9
 801a966:	f7e6 fb9b 	bl	80010a0 <__aeabi_uldivmod>
 801a96a:	4602      	mov	r2, r0
 801a96c:	460b      	mov	r3, r1
 801a96e:	4613      	mov	r3, r2
 801a970:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	0e1b      	lsrs	r3, r3, #24
 801a976:	b2db      	uxtb	r3, r3
 801a978:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	0c1b      	lsrs	r3, r3, #16
 801a97e:	b2db      	uxtb	r3, r3
 801a980:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	0a1b      	lsrs	r3, r3, #8
 801a986:	b2db      	uxtb	r3, r3
 801a988:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	b2db      	uxtb	r3, r3
 801a98e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a990:	f107 0308 	add.w	r3, r7, #8
 801a994:	2204      	movs	r2, #4
 801a996:	4619      	mov	r1, r3
 801a998:	2086      	movs	r0, #134	@ 0x86
 801a99a:	f000 fbc7 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a99e:	bf00      	nop
 801a9a0:	3710      	adds	r7, #16
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a9a8:	20001d64 	.word	0x20001d64
 801a9ac:	01e84800 	.word	0x01e84800

0801a9b0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b082      	sub	sp, #8
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a9ba:	79fa      	ldrb	r2, [r7, #7]
 801a9bc:	4b09      	ldr	r3, [pc, #36]	@ (801a9e4 <SUBGRF_SetPacketType+0x34>)
 801a9be:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a9c0:	79fb      	ldrb	r3, [r7, #7]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d104      	bne.n	801a9d0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a9c6:	2100      	movs	r1, #0
 801a9c8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a9cc:	f000 fafe 	bl	801afcc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a9d0:	1dfb      	adds	r3, r7, #7
 801a9d2:	2201      	movs	r2, #1
 801a9d4:	4619      	mov	r1, r3
 801a9d6:	208a      	movs	r0, #138	@ 0x8a
 801a9d8:	f000 fba8 	bl	801b12c <SUBGRF_WriteCommand>
}
 801a9dc:	bf00      	nop
 801a9de:	3708      	adds	r7, #8
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}
 801a9e4:	20001d5d 	.word	0x20001d5d

0801a9e8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a9e8:	b480      	push	{r7}
 801a9ea:	af00      	add	r7, sp, #0
    return PacketType;
 801a9ec:	4b02      	ldr	r3, [pc, #8]	@ (801a9f8 <SUBGRF_GetPacketType+0x10>)
 801a9ee:	781b      	ldrb	r3, [r3, #0]
}
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bc80      	pop	{r7}
 801a9f6:	4770      	bx	lr
 801a9f8:	20001d5d 	.word	0x20001d5d

0801a9fc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b084      	sub	sp, #16
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	4603      	mov	r3, r0
 801aa04:	71fb      	strb	r3, [r7, #7]
 801aa06:	460b      	mov	r3, r1
 801aa08:	71bb      	strb	r3, [r7, #6]
 801aa0a:	4613      	mov	r3, r2
 801aa0c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801aa0e:	79fb      	ldrb	r3, [r7, #7]
 801aa10:	2b01      	cmp	r3, #1
 801aa12:	d149      	bne.n	801aaa8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801aa14:	2000      	movs	r0, #0
 801aa16:	f7f1 f981 	bl	800bd1c <RBI_GetRFOMaxPowerConfig>
 801aa1a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801aa1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aa20:	68fa      	ldr	r2, [r7, #12]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	da01      	bge.n	801aa2a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	2b0e      	cmp	r3, #14
 801aa2e:	d10e      	bne.n	801aa4e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801aa30:	2301      	movs	r3, #1
 801aa32:	2201      	movs	r2, #1
 801aa34:	2100      	movs	r1, #0
 801aa36:	2004      	movs	r0, #4
 801aa38:	f7ff fef6 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aa3c:	79ba      	ldrb	r2, [r7, #6]
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	b2db      	uxtb	r3, r3
 801aa42:	1ad3      	subs	r3, r2, r3
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	330e      	adds	r3, #14
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	71bb      	strb	r3, [r7, #6]
 801aa4c:	e01f      	b.n	801aa8e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	2b0a      	cmp	r3, #10
 801aa52:	d10e      	bne.n	801aa72 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801aa54:	2301      	movs	r3, #1
 801aa56:	2201      	movs	r2, #1
 801aa58:	2100      	movs	r1, #0
 801aa5a:	2001      	movs	r0, #1
 801aa5c:	f7ff fee4 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801aa60:	79ba      	ldrb	r2, [r7, #6]
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	b2db      	uxtb	r3, r3
 801aa66:	1ad3      	subs	r3, r2, r3
 801aa68:	b2db      	uxtb	r3, r3
 801aa6a:	330d      	adds	r3, #13
 801aa6c:	b2db      	uxtb	r3, r3
 801aa6e:	71bb      	strb	r3, [r7, #6]
 801aa70:	e00d      	b.n	801aa8e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801aa72:	2301      	movs	r3, #1
 801aa74:	2201      	movs	r2, #1
 801aa76:	2100      	movs	r1, #0
 801aa78:	2006      	movs	r0, #6
 801aa7a:	f7ff fed5 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aa7e:	79ba      	ldrb	r2, [r7, #6]
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	b2db      	uxtb	r3, r3
 801aa84:	1ad3      	subs	r3, r2, r3
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	330e      	adds	r3, #14
 801aa8a:	b2db      	uxtb	r3, r3
 801aa8c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aa8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aa92:	f113 0f11 	cmn.w	r3, #17
 801aa96:	da01      	bge.n	801aa9c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801aa98:	23ef      	movs	r3, #239	@ 0xef
 801aa9a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801aa9c:	2118      	movs	r1, #24
 801aa9e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801aaa2:	f000 fa93 	bl	801afcc <SUBGRF_WriteRegister>
 801aaa6:	e067      	b.n	801ab78 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801aaa8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801aaac:	f000 faa2 	bl	801aff4 <SUBGRF_ReadRegister>
 801aab0:	4603      	mov	r3, r0
 801aab2:	f043 031e 	orr.w	r3, r3, #30
 801aab6:	b2db      	uxtb	r3, r3
 801aab8:	4619      	mov	r1, r3
 801aaba:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801aabe:	f000 fa85 	bl	801afcc <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801aac2:	2001      	movs	r0, #1
 801aac4:	f7f1 f92a 	bl	800bd1c <RBI_GetRFOMaxPowerConfig>
 801aac8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801aaca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aace:	68fa      	ldr	r2, [r7, #12]
 801aad0:	429a      	cmp	r2, r3
 801aad2:	da01      	bge.n	801aad8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	2b14      	cmp	r3, #20
 801aadc:	d10e      	bne.n	801aafc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801aade:	2301      	movs	r3, #1
 801aae0:	2200      	movs	r2, #0
 801aae2:	2105      	movs	r1, #5
 801aae4:	2003      	movs	r0, #3
 801aae6:	f7ff fe9f 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801aaea:	79ba      	ldrb	r2, [r7, #6]
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	1ad3      	subs	r3, r2, r3
 801aaf2:	b2db      	uxtb	r3, r3
 801aaf4:	3316      	adds	r3, #22
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	71bb      	strb	r3, [r7, #6]
 801aafa:	e031      	b.n	801ab60 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	2b11      	cmp	r3, #17
 801ab00:	d10e      	bne.n	801ab20 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ab02:	2301      	movs	r3, #1
 801ab04:	2200      	movs	r2, #0
 801ab06:	2103      	movs	r1, #3
 801ab08:	2002      	movs	r0, #2
 801ab0a:	f7ff fe8d 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ab0e:	79ba      	ldrb	r2, [r7, #6]
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	b2db      	uxtb	r3, r3
 801ab14:	1ad3      	subs	r3, r2, r3
 801ab16:	b2db      	uxtb	r3, r3
 801ab18:	3316      	adds	r3, #22
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	71bb      	strb	r3, [r7, #6]
 801ab1e:	e01f      	b.n	801ab60 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	2b0e      	cmp	r3, #14
 801ab24:	d10e      	bne.n	801ab44 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801ab26:	2301      	movs	r3, #1
 801ab28:	2200      	movs	r2, #0
 801ab2a:	2102      	movs	r1, #2
 801ab2c:	2002      	movs	r0, #2
 801ab2e:	f7ff fe7b 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ab32:	79ba      	ldrb	r2, [r7, #6]
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	b2db      	uxtb	r3, r3
 801ab38:	1ad3      	subs	r3, r2, r3
 801ab3a:	b2db      	uxtb	r3, r3
 801ab3c:	330e      	adds	r3, #14
 801ab3e:	b2db      	uxtb	r3, r3
 801ab40:	71bb      	strb	r3, [r7, #6]
 801ab42:	e00d      	b.n	801ab60 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ab44:	2301      	movs	r3, #1
 801ab46:	2200      	movs	r2, #0
 801ab48:	2107      	movs	r1, #7
 801ab4a:	2004      	movs	r0, #4
 801ab4c:	f7ff fe6c 	bl	801a828 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ab50:	79ba      	ldrb	r2, [r7, #6]
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	1ad3      	subs	r3, r2, r3
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	3316      	adds	r3, #22
 801ab5c:	b2db      	uxtb	r3, r3
 801ab5e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ab60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab64:	f113 0f09 	cmn.w	r3, #9
 801ab68:	da01      	bge.n	801ab6e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ab6a:	23f7      	movs	r3, #247	@ 0xf7
 801ab6c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ab6e:	2138      	movs	r1, #56	@ 0x38
 801ab70:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801ab74:	f000 fa2a 	bl	801afcc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ab78:	79bb      	ldrb	r3, [r7, #6]
 801ab7a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ab7c:	797b      	ldrb	r3, [r7, #5]
 801ab7e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ab80:	f107 0308 	add.w	r3, r7, #8
 801ab84:	2202      	movs	r2, #2
 801ab86:	4619      	mov	r1, r3
 801ab88:	208e      	movs	r0, #142	@ 0x8e
 801ab8a:	f000 facf 	bl	801b12c <SUBGRF_WriteCommand>
}
 801ab8e:	bf00      	nop
 801ab90:	3710      	adds	r7, #16
 801ab92:	46bd      	mov	sp, r7
 801ab94:	bd80      	pop	{r7, pc}
	...

0801ab98 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ab98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ab9c:	b086      	sub	sp, #24
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801aba2:	2300      	movs	r3, #0
 801aba4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801aba6:	4a61      	ldr	r2, [pc, #388]	@ (801ad2c <SUBGRF_SetModulationParams+0x194>)
 801aba8:	f107 0308 	add.w	r3, r7, #8
 801abac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801abb0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	781a      	ldrb	r2, [r3, #0]
 801abb8:	4b5d      	ldr	r3, [pc, #372]	@ (801ad30 <SUBGRF_SetModulationParams+0x198>)
 801abba:	781b      	ldrb	r3, [r3, #0]
 801abbc:	429a      	cmp	r2, r3
 801abbe:	d004      	beq.n	801abca <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff fef3 	bl	801a9b0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	781b      	ldrb	r3, [r3, #0]
 801abce:	2b03      	cmp	r3, #3
 801abd0:	f200 80a5 	bhi.w	801ad1e <SUBGRF_SetModulationParams+0x186>
 801abd4:	a201      	add	r2, pc, #4	@ (adr r2, 801abdc <SUBGRF_SetModulationParams+0x44>)
 801abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abda:	bf00      	nop
 801abdc:	0801abed 	.word	0x0801abed
 801abe0:	0801acad 	.word	0x0801acad
 801abe4:	0801ac6f 	.word	0x0801ac6f
 801abe8:	0801acdb 	.word	0x0801acdb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801abec:	2308      	movs	r3, #8
 801abee:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	685b      	ldr	r3, [r3, #4]
 801abf4:	4a4f      	ldr	r2, [pc, #316]	@ (801ad34 <SUBGRF_SetModulationParams+0x19c>)
 801abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 801abfa:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	0c1b      	lsrs	r3, r3, #16
 801ac00:	b2db      	uxtb	r3, r3
 801ac02:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ac04:	697b      	ldr	r3, [r7, #20]
 801ac06:	0a1b      	lsrs	r3, r3, #8
 801ac08:	b2db      	uxtb	r3, r3
 801ac0a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ac0c:	697b      	ldr	r3, [r7, #20]
 801ac0e:	b2db      	uxtb	r3, r3
 801ac10:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	7b1b      	ldrb	r3, [r3, #12]
 801ac16:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	7b5b      	ldrb	r3, [r3, #13]
 801ac1c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	689b      	ldr	r3, [r3, #8]
 801ac22:	2200      	movs	r2, #0
 801ac24:	461c      	mov	r4, r3
 801ac26:	4615      	mov	r5, r2
 801ac28:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ac2c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ac30:	4a41      	ldr	r2, [pc, #260]	@ (801ad38 <SUBGRF_SetModulationParams+0x1a0>)
 801ac32:	f04f 0300 	mov.w	r3, #0
 801ac36:	4640      	mov	r0, r8
 801ac38:	4649      	mov	r1, r9
 801ac3a:	f7e6 fa31 	bl	80010a0 <__aeabi_uldivmod>
 801ac3e:	4602      	mov	r2, r0
 801ac40:	460b      	mov	r3, r1
 801ac42:	4613      	mov	r3, r2
 801ac44:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	0c1b      	lsrs	r3, r3, #16
 801ac4a:	b2db      	uxtb	r3, r3
 801ac4c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ac4e:	697b      	ldr	r3, [r7, #20]
 801ac50:	0a1b      	lsrs	r3, r3, #8
 801ac52:	b2db      	uxtb	r3, r3
 801ac54:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	b2db      	uxtb	r3, r3
 801ac5a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ac5c:	7cfb      	ldrb	r3, [r7, #19]
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	f107 0308 	add.w	r3, r7, #8
 801ac64:	4619      	mov	r1, r3
 801ac66:	208b      	movs	r0, #139	@ 0x8b
 801ac68:	f000 fa60 	bl	801b12c <SUBGRF_WriteCommand>
        break;
 801ac6c:	e058      	b.n	801ad20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ac6e:	2304      	movs	r3, #4
 801ac70:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	691b      	ldr	r3, [r3, #16]
 801ac76:	4a2f      	ldr	r2, [pc, #188]	@ (801ad34 <SUBGRF_SetModulationParams+0x19c>)
 801ac78:	fbb2 f3f3 	udiv	r3, r2, r3
 801ac7c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ac7e:	697b      	ldr	r3, [r7, #20]
 801ac80:	0c1b      	lsrs	r3, r3, #16
 801ac82:	b2db      	uxtb	r3, r3
 801ac84:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	0a1b      	lsrs	r3, r3, #8
 801ac8a:	b2db      	uxtb	r3, r3
 801ac8c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	b2db      	uxtb	r3, r3
 801ac92:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	7d1b      	ldrb	r3, [r3, #20]
 801ac98:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ac9a:	7cfb      	ldrb	r3, [r7, #19]
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	f107 0308 	add.w	r3, r7, #8
 801aca2:	4619      	mov	r1, r3
 801aca4:	208b      	movs	r0, #139	@ 0x8b
 801aca6:	f000 fa41 	bl	801b12c <SUBGRF_WriteCommand>
        break;
 801acaa:	e039      	b.n	801ad20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801acac:	2304      	movs	r3, #4
 801acae:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	7e1b      	ldrb	r3, [r3, #24]
 801acb4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	7e5b      	ldrb	r3, [r3, #25]
 801acba:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	7e9b      	ldrb	r3, [r3, #26]
 801acc0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	7edb      	ldrb	r3, [r3, #27]
 801acc6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801acc8:	7cfb      	ldrb	r3, [r7, #19]
 801acca:	b29a      	uxth	r2, r3
 801accc:	f107 0308 	add.w	r3, r7, #8
 801acd0:	4619      	mov	r1, r3
 801acd2:	208b      	movs	r0, #139	@ 0x8b
 801acd4:	f000 fa2a 	bl	801b12c <SUBGRF_WriteCommand>

        break;
 801acd8:	e022      	b.n	801ad20 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801acda:	2305      	movs	r3, #5
 801acdc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	685b      	ldr	r3, [r3, #4]
 801ace2:	4a14      	ldr	r2, [pc, #80]	@ (801ad34 <SUBGRF_SetModulationParams+0x19c>)
 801ace4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ace8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801acea:	697b      	ldr	r3, [r7, #20]
 801acec:	0c1b      	lsrs	r3, r3, #16
 801acee:	b2db      	uxtb	r3, r3
 801acf0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	0a1b      	lsrs	r3, r3, #8
 801acf6:	b2db      	uxtb	r3, r3
 801acf8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	b2db      	uxtb	r3, r3
 801acfe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	7b1b      	ldrb	r3, [r3, #12]
 801ad04:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	7b5b      	ldrb	r3, [r3, #13]
 801ad0a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad0c:	7cfb      	ldrb	r3, [r7, #19]
 801ad0e:	b29a      	uxth	r2, r3
 801ad10:	f107 0308 	add.w	r3, r7, #8
 801ad14:	4619      	mov	r1, r3
 801ad16:	208b      	movs	r0, #139	@ 0x8b
 801ad18:	f000 fa08 	bl	801b12c <SUBGRF_WriteCommand>
        break;
 801ad1c:	e000      	b.n	801ad20 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ad1e:	bf00      	nop
    }
}
 801ad20:	bf00      	nop
 801ad22:	3718      	adds	r7, #24
 801ad24:	46bd      	mov	sp, r7
 801ad26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ad2a:	bf00      	nop
 801ad2c:	080201a8 	.word	0x080201a8
 801ad30:	20001d5d 	.word	0x20001d5d
 801ad34:	3d090000 	.word	0x3d090000
 801ad38:	01e84800 	.word	0x01e84800

0801ad3c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b086      	sub	sp, #24
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ad44:	2300      	movs	r3, #0
 801ad46:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ad48:	4a48      	ldr	r2, [pc, #288]	@ (801ae6c <SUBGRF_SetPacketParams+0x130>)
 801ad4a:	f107 030c 	add.w	r3, r7, #12
 801ad4e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ad50:	c303      	stmia	r3!, {r0, r1}
 801ad52:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	781a      	ldrb	r2, [r3, #0]
 801ad58:	4b45      	ldr	r3, [pc, #276]	@ (801ae70 <SUBGRF_SetPacketParams+0x134>)
 801ad5a:	781b      	ldrb	r3, [r3, #0]
 801ad5c:	429a      	cmp	r2, r3
 801ad5e:	d004      	beq.n	801ad6a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	781b      	ldrb	r3, [r3, #0]
 801ad64:	4618      	mov	r0, r3
 801ad66:	f7ff fe23 	bl	801a9b0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	2b03      	cmp	r3, #3
 801ad70:	d878      	bhi.n	801ae64 <SUBGRF_SetPacketParams+0x128>
 801ad72:	a201      	add	r2, pc, #4	@ (adr r2, 801ad78 <SUBGRF_SetPacketParams+0x3c>)
 801ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad78:	0801ad89 	.word	0x0801ad89
 801ad7c:	0801ae19 	.word	0x0801ae19
 801ad80:	0801ae0d 	.word	0x0801ae0d
 801ad84:	0801ad89 	.word	0x0801ad89
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	7a5b      	ldrb	r3, [r3, #9]
 801ad8c:	2bf1      	cmp	r3, #241	@ 0xf1
 801ad8e:	d10a      	bne.n	801ada6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ad90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801ad94:	f7ff faae 	bl	801a2f4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ad98:	f248 0005 	movw	r0, #32773	@ 0x8005
 801ad9c:	f7ff faca 	bl	801a334 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ada0:	2302      	movs	r3, #2
 801ada2:	75bb      	strb	r3, [r7, #22]
 801ada4:	e011      	b.n	801adca <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	7a5b      	ldrb	r3, [r3, #9]
 801adaa:	2bf2      	cmp	r3, #242	@ 0xf2
 801adac:	d10a      	bne.n	801adc4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801adae:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801adb2:	f7ff fa9f 	bl	801a2f4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801adb6:	f241 0021 	movw	r0, #4129	@ 0x1021
 801adba:	f7ff fabb 	bl	801a334 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801adbe:	2306      	movs	r3, #6
 801adc0:	75bb      	strb	r3, [r7, #22]
 801adc2:	e002      	b.n	801adca <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	7a5b      	ldrb	r3, [r3, #9]
 801adc8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801adca:	2309      	movs	r3, #9
 801adcc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	885b      	ldrh	r3, [r3, #2]
 801add2:	0a1b      	lsrs	r3, r3, #8
 801add4:	b29b      	uxth	r3, r3
 801add6:	b2db      	uxtb	r3, r3
 801add8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	885b      	ldrh	r3, [r3, #2]
 801adde:	b2db      	uxtb	r3, r3
 801ade0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	791b      	ldrb	r3, [r3, #4]
 801ade6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	795b      	ldrb	r3, [r3, #5]
 801adec:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	799b      	ldrb	r3, [r3, #6]
 801adf2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	79db      	ldrb	r3, [r3, #7]
 801adf8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	7a1b      	ldrb	r3, [r3, #8]
 801adfe:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ae00:	7dbb      	ldrb	r3, [r7, #22]
 801ae02:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	7a9b      	ldrb	r3, [r3, #10]
 801ae08:	753b      	strb	r3, [r7, #20]
        break;
 801ae0a:	e022      	b.n	801ae52 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	7b1b      	ldrb	r3, [r3, #12]
 801ae14:	733b      	strb	r3, [r7, #12]
        break;
 801ae16:	e01c      	b.n	801ae52 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ae18:	2306      	movs	r3, #6
 801ae1a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	89db      	ldrh	r3, [r3, #14]
 801ae20:	0a1b      	lsrs	r3, r3, #8
 801ae22:	b29b      	uxth	r3, r3
 801ae24:	b2db      	uxtb	r3, r3
 801ae26:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	89db      	ldrh	r3, [r3, #14]
 801ae2c:	b2db      	uxtb	r3, r3
 801ae2e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	7c1a      	ldrb	r2, [r3, #16]
 801ae34:	4b0f      	ldr	r3, [pc, #60]	@ (801ae74 <SUBGRF_SetPacketParams+0x138>)
 801ae36:	4611      	mov	r1, r2
 801ae38:	7019      	strb	r1, [r3, #0]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	7c5b      	ldrb	r3, [r3, #17]
 801ae42:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	7c9b      	ldrb	r3, [r3, #18]
 801ae48:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	7cdb      	ldrb	r3, [r3, #19]
 801ae4e:	747b      	strb	r3, [r7, #17]
        break;
 801ae50:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ae52:	7dfb      	ldrb	r3, [r7, #23]
 801ae54:	b29a      	uxth	r2, r3
 801ae56:	f107 030c 	add.w	r3, r7, #12
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	208c      	movs	r0, #140	@ 0x8c
 801ae5e:	f000 f965 	bl	801b12c <SUBGRF_WriteCommand>
 801ae62:	e000      	b.n	801ae66 <SUBGRF_SetPacketParams+0x12a>
        return;
 801ae64:	bf00      	nop
}
 801ae66:	3718      	adds	r7, #24
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}
 801ae6c:	080201b0 	.word	0x080201b0
 801ae70:	20001d5d 	.word	0x20001d5d
 801ae74:	20001d5e 	.word	0x20001d5e

0801ae78 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	4603      	mov	r3, r0
 801ae80:	460a      	mov	r2, r1
 801ae82:	71fb      	strb	r3, [r7, #7]
 801ae84:	4613      	mov	r3, r2
 801ae86:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ae88:	79fb      	ldrb	r3, [r7, #7]
 801ae8a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ae8c:	79bb      	ldrb	r3, [r7, #6]
 801ae8e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ae90:	f107 030c 	add.w	r3, r7, #12
 801ae94:	2202      	movs	r2, #2
 801ae96:	4619      	mov	r1, r3
 801ae98:	208f      	movs	r0, #143	@ 0x8f
 801ae9a:	f000 f947 	bl	801b12c <SUBGRF_WriteCommand>
}
 801ae9e:	bf00      	nop
 801aea0:	3710      	adds	r7, #16
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}

0801aea6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801aea6:	b580      	push	{r7, lr}
 801aea8:	b082      	sub	sp, #8
 801aeaa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801aeac:	2300      	movs	r3, #0
 801aeae:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801aeb0:	1d3b      	adds	r3, r7, #4
 801aeb2:	2201      	movs	r2, #1
 801aeb4:	4619      	mov	r1, r3
 801aeb6:	2015      	movs	r0, #21
 801aeb8:	f000 f95a 	bl	801b170 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801aebc:	793b      	ldrb	r3, [r7, #4]
 801aebe:	425b      	negs	r3, r3
 801aec0:	105b      	asrs	r3, r3, #1
 801aec2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801aec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801aec8:	4618      	mov	r0, r3
 801aeca:	3708      	adds	r7, #8
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}

0801aed0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b084      	sub	sp, #16
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
 801aed8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801aeda:	f107 030c 	add.w	r3, r7, #12
 801aede:	2202      	movs	r2, #2
 801aee0:	4619      	mov	r1, r3
 801aee2:	2013      	movs	r0, #19
 801aee4:	f000 f944 	bl	801b170 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801aee8:	f7ff fd7e 	bl	801a9e8 <SUBGRF_GetPacketType>
 801aeec:	4603      	mov	r3, r0
 801aeee:	2b01      	cmp	r3, #1
 801aef0:	d10d      	bne.n	801af0e <SUBGRF_GetRxBufferStatus+0x3e>
 801aef2:	4b0c      	ldr	r3, [pc, #48]	@ (801af24 <SUBGRF_GetRxBufferStatus+0x54>)
 801aef4:	781b      	ldrb	r3, [r3, #0]
 801aef6:	b2db      	uxtb	r3, r3
 801aef8:	2b01      	cmp	r3, #1
 801aefa:	d108      	bne.n	801af0e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801aefc:	f240 7002 	movw	r0, #1794	@ 0x702
 801af00:	f000 f878 	bl	801aff4 <SUBGRF_ReadRegister>
 801af04:	4603      	mov	r3, r0
 801af06:	461a      	mov	r2, r3
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	701a      	strb	r2, [r3, #0]
 801af0c:	e002      	b.n	801af14 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801af0e:	7b3a      	ldrb	r2, [r7, #12]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801af14:	7b7a      	ldrb	r2, [r7, #13]
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	701a      	strb	r2, [r3, #0]
}
 801af1a:	bf00      	nop
 801af1c:	3710      	adds	r7, #16
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}
 801af22:	bf00      	nop
 801af24:	20001d5e 	.word	0x20001d5e

0801af28 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801af30:	f107 030c 	add.w	r3, r7, #12
 801af34:	2203      	movs	r2, #3
 801af36:	4619      	mov	r1, r3
 801af38:	2014      	movs	r0, #20
 801af3a:	f000 f919 	bl	801b170 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801af3e:	f7ff fd53 	bl	801a9e8 <SUBGRF_GetPacketType>
 801af42:	4603      	mov	r3, r0
 801af44:	461a      	mov	r2, r3
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	781b      	ldrb	r3, [r3, #0]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d002      	beq.n	801af58 <SUBGRF_GetPacketStatus+0x30>
 801af52:	2b01      	cmp	r3, #1
 801af54:	d013      	beq.n	801af7e <SUBGRF_GetPacketStatus+0x56>
 801af56:	e02a      	b.n	801afae <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801af58:	7b3a      	ldrb	r2, [r7, #12]
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801af5e:	7b7b      	ldrb	r3, [r7, #13]
 801af60:	425b      	negs	r3, r3
 801af62:	105b      	asrs	r3, r3, #1
 801af64:	b25a      	sxtb	r2, r3
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801af6a:	7bbb      	ldrb	r3, [r7, #14]
 801af6c:	425b      	negs	r3, r3
 801af6e:	105b      	asrs	r3, r3, #1
 801af70:	b25a      	sxtb	r2, r3
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2200      	movs	r2, #0
 801af7a:	609a      	str	r2, [r3, #8]
            break;
 801af7c:	e020      	b.n	801afc0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801af7e:	7b3b      	ldrb	r3, [r7, #12]
 801af80:	425b      	negs	r3, r3
 801af82:	105b      	asrs	r3, r3, #1
 801af84:	b25a      	sxtb	r2, r3
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801af8a:	7b7b      	ldrb	r3, [r7, #13]
 801af8c:	b25b      	sxtb	r3, r3
 801af8e:	3302      	adds	r3, #2
 801af90:	109b      	asrs	r3, r3, #2
 801af92:	b25a      	sxtb	r2, r3
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801af98:	7bbb      	ldrb	r3, [r7, #14]
 801af9a:	425b      	negs	r3, r3
 801af9c:	105b      	asrs	r3, r3, #1
 801af9e:	b25a      	sxtb	r2, r3
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801afa4:	4b08      	ldr	r3, [pc, #32]	@ (801afc8 <SUBGRF_GetPacketStatus+0xa0>)
 801afa6:	681a      	ldr	r2, [r3, #0]
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	611a      	str	r2, [r3, #16]
            break;
 801afac:	e008      	b.n	801afc0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801afae:	2214      	movs	r2, #20
 801afb0:	2100      	movs	r1, #0
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 fbf3 	bl	801b79e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	220f      	movs	r2, #15
 801afbc:	701a      	strb	r2, [r3, #0]
            break;
 801afbe:	bf00      	nop
    }
}
 801afc0:	bf00      	nop
 801afc2:	3710      	adds	r7, #16
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}
 801afc8:	20001d60 	.word	0x20001d60

0801afcc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	4603      	mov	r3, r0
 801afd4:	460a      	mov	r2, r1
 801afd6:	80fb      	strh	r3, [r7, #6]
 801afd8:	4613      	mov	r3, r2
 801afda:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801afdc:	1d7a      	adds	r2, r7, #5
 801afde:	88f9      	ldrh	r1, [r7, #6]
 801afe0:	2301      	movs	r3, #1
 801afe2:	4803      	ldr	r0, [pc, #12]	@ (801aff0 <SUBGRF_WriteRegister+0x24>)
 801afe4:	f7ed f864 	bl	80080b0 <HAL_SUBGHZ_WriteRegisters>
}
 801afe8:	bf00      	nop
 801afea:	3708      	adds	r7, #8
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}
 801aff0:	200003d8 	.word	0x200003d8

0801aff4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b084      	sub	sp, #16
 801aff8:	af00      	add	r7, sp, #0
 801affa:	4603      	mov	r3, r0
 801affc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801affe:	f107 020f 	add.w	r2, r7, #15
 801b002:	88f9      	ldrh	r1, [r7, #6]
 801b004:	2301      	movs	r3, #1
 801b006:	4804      	ldr	r0, [pc, #16]	@ (801b018 <SUBGRF_ReadRegister+0x24>)
 801b008:	f7ed f8b1 	bl	800816e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b00c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b00e:	4618      	mov	r0, r3
 801b010:	3710      	adds	r7, #16
 801b012:	46bd      	mov	sp, r7
 801b014:	bd80      	pop	{r7, pc}
 801b016:	bf00      	nop
 801b018:	200003d8 	.word	0x200003d8

0801b01c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b086      	sub	sp, #24
 801b020:	af00      	add	r7, sp, #0
 801b022:	4603      	mov	r3, r0
 801b024:	6039      	str	r1, [r7, #0]
 801b026:	80fb      	strh	r3, [r7, #6]
 801b028:	4613      	mov	r3, r2
 801b02a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b02c:	f3ef 8310 	mrs	r3, PRIMASK
 801b030:	60fb      	str	r3, [r7, #12]
  return(result);
 801b032:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b036:	b672      	cpsid	i
}
 801b038:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b03a:	88bb      	ldrh	r3, [r7, #4]
 801b03c:	88f9      	ldrh	r1, [r7, #6]
 801b03e:	683a      	ldr	r2, [r7, #0]
 801b040:	4806      	ldr	r0, [pc, #24]	@ (801b05c <SUBGRF_WriteRegisters+0x40>)
 801b042:	f7ed f835 	bl	80080b0 <HAL_SUBGHZ_WriteRegisters>
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b04a:	693b      	ldr	r3, [r7, #16]
 801b04c:	f383 8810 	msr	PRIMASK, r3
}
 801b050:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b052:	bf00      	nop
 801b054:	3718      	adds	r7, #24
 801b056:	46bd      	mov	sp, r7
 801b058:	bd80      	pop	{r7, pc}
 801b05a:	bf00      	nop
 801b05c:	200003d8 	.word	0x200003d8

0801b060 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b060:	b580      	push	{r7, lr}
 801b062:	b086      	sub	sp, #24
 801b064:	af00      	add	r7, sp, #0
 801b066:	4603      	mov	r3, r0
 801b068:	6039      	str	r1, [r7, #0]
 801b06a:	80fb      	strh	r3, [r7, #6]
 801b06c:	4613      	mov	r3, r2
 801b06e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b070:	f3ef 8310 	mrs	r3, PRIMASK
 801b074:	60fb      	str	r3, [r7, #12]
  return(result);
 801b076:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b07a:	b672      	cpsid	i
}
 801b07c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b07e:	88bb      	ldrh	r3, [r7, #4]
 801b080:	88f9      	ldrh	r1, [r7, #6]
 801b082:	683a      	ldr	r2, [r7, #0]
 801b084:	4806      	ldr	r0, [pc, #24]	@ (801b0a0 <SUBGRF_ReadRegisters+0x40>)
 801b086:	f7ed f872 	bl	800816e <HAL_SUBGHZ_ReadRegisters>
 801b08a:	697b      	ldr	r3, [r7, #20]
 801b08c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b08e:	693b      	ldr	r3, [r7, #16]
 801b090:	f383 8810 	msr	PRIMASK, r3
}
 801b094:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b096:	bf00      	nop
 801b098:	3718      	adds	r7, #24
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd80      	pop	{r7, pc}
 801b09e:	bf00      	nop
 801b0a0:	200003d8 	.word	0x200003d8

0801b0a4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b086      	sub	sp, #24
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	6039      	str	r1, [r7, #0]
 801b0ae:	71fb      	strb	r3, [r7, #7]
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b0b8:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0be:	b672      	cpsid	i
}
 801b0c0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b0c2:	79bb      	ldrb	r3, [r7, #6]
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	79f9      	ldrb	r1, [r7, #7]
 801b0c8:	683a      	ldr	r2, [r7, #0]
 801b0ca:	4806      	ldr	r0, [pc, #24]	@ (801b0e4 <SUBGRF_WriteBuffer+0x40>)
 801b0cc:	f7ed f963 	bl	8008396 <HAL_SUBGHZ_WriteBuffer>
 801b0d0:	697b      	ldr	r3, [r7, #20]
 801b0d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0d4:	693b      	ldr	r3, [r7, #16]
 801b0d6:	f383 8810 	msr	PRIMASK, r3
}
 801b0da:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b0dc:	bf00      	nop
 801b0de:	3718      	adds	r7, #24
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	bd80      	pop	{r7, pc}
 801b0e4:	200003d8 	.word	0x200003d8

0801b0e8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b086      	sub	sp, #24
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	6039      	str	r1, [r7, #0]
 801b0f2:	71fb      	strb	r3, [r7, #7]
 801b0f4:	4613      	mov	r3, r2
 801b0f6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0f8:	f3ef 8310 	mrs	r3, PRIMASK
 801b0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b100:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b102:	b672      	cpsid	i
}
 801b104:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b106:	79bb      	ldrb	r3, [r7, #6]
 801b108:	b29b      	uxth	r3, r3
 801b10a:	79f9      	ldrb	r1, [r7, #7]
 801b10c:	683a      	ldr	r2, [r7, #0]
 801b10e:	4806      	ldr	r0, [pc, #24]	@ (801b128 <SUBGRF_ReadBuffer+0x40>)
 801b110:	f7ed f994 	bl	800843c <HAL_SUBGHZ_ReadBuffer>
 801b114:	697b      	ldr	r3, [r7, #20]
 801b116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b118:	693b      	ldr	r3, [r7, #16]
 801b11a:	f383 8810 	msr	PRIMASK, r3
}
 801b11e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b120:	bf00      	nop
 801b122:	3718      	adds	r7, #24
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}
 801b128:	200003d8 	.word	0x200003d8

0801b12c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b086      	sub	sp, #24
 801b130:	af00      	add	r7, sp, #0
 801b132:	4603      	mov	r3, r0
 801b134:	6039      	str	r1, [r7, #0]
 801b136:	71fb      	strb	r3, [r7, #7]
 801b138:	4613      	mov	r3, r2
 801b13a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b13c:	f3ef 8310 	mrs	r3, PRIMASK
 801b140:	60fb      	str	r3, [r7, #12]
  return(result);
 801b142:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b146:	b672      	cpsid	i
}
 801b148:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b14a:	88bb      	ldrh	r3, [r7, #4]
 801b14c:	79f9      	ldrb	r1, [r7, #7]
 801b14e:	683a      	ldr	r2, [r7, #0]
 801b150:	4806      	ldr	r0, [pc, #24]	@ (801b16c <SUBGRF_WriteCommand+0x40>)
 801b152:	f7ed f86d 	bl	8008230 <HAL_SUBGHZ_ExecSetCmd>
 801b156:	697b      	ldr	r3, [r7, #20]
 801b158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b15a:	693b      	ldr	r3, [r7, #16]
 801b15c:	f383 8810 	msr	PRIMASK, r3
}
 801b160:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b162:	bf00      	nop
 801b164:	3718      	adds	r7, #24
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}
 801b16a:	bf00      	nop
 801b16c:	200003d8 	.word	0x200003d8

0801b170 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b086      	sub	sp, #24
 801b174:	af00      	add	r7, sp, #0
 801b176:	4603      	mov	r3, r0
 801b178:	6039      	str	r1, [r7, #0]
 801b17a:	71fb      	strb	r3, [r7, #7]
 801b17c:	4613      	mov	r3, r2
 801b17e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b180:	f3ef 8310 	mrs	r3, PRIMASK
 801b184:	60fb      	str	r3, [r7, #12]
  return(result);
 801b186:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b18a:	b672      	cpsid	i
}
 801b18c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b18e:	88bb      	ldrh	r3, [r7, #4]
 801b190:	79f9      	ldrb	r1, [r7, #7]
 801b192:	683a      	ldr	r2, [r7, #0]
 801b194:	4806      	ldr	r0, [pc, #24]	@ (801b1b0 <SUBGRF_ReadCommand+0x40>)
 801b196:	f7ed f8aa 	bl	80082ee <HAL_SUBGHZ_ExecGetCmd>
 801b19a:	697b      	ldr	r3, [r7, #20]
 801b19c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b19e:	693b      	ldr	r3, [r7, #16]
 801b1a0:	f383 8810 	msr	PRIMASK, r3
}
 801b1a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1a6:	bf00      	nop
 801b1a8:	3718      	adds	r7, #24
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	200003d8 	.word	0x200003d8

0801b1b4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b084      	sub	sp, #16
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	460a      	mov	r2, r1
 801b1be:	71fb      	strb	r3, [r7, #7]
 801b1c0:	4613      	mov	r3, r2
 801b1c2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b1c8:	79bb      	ldrb	r3, [r7, #6]
 801b1ca:	2b01      	cmp	r3, #1
 801b1cc:	d10d      	bne.n	801b1ea <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b1ce:	79fb      	ldrb	r3, [r7, #7]
 801b1d0:	2b01      	cmp	r3, #1
 801b1d2:	d104      	bne.n	801b1de <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b1d4:	2302      	movs	r3, #2
 801b1d6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b1d8:	2004      	movs	r0, #4
 801b1da:	f000 f8df 	bl	801b39c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b1de:	79fb      	ldrb	r3, [r7, #7]
 801b1e0:	2b02      	cmp	r3, #2
 801b1e2:	d107      	bne.n	801b1f4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b1e4:	2303      	movs	r3, #3
 801b1e6:	73fb      	strb	r3, [r7, #15]
 801b1e8:	e004      	b.n	801b1f4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b1ea:	79bb      	ldrb	r3, [r7, #6]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d101      	bne.n	801b1f4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b1f4:	7bfb      	ldrb	r3, [r7, #15]
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	f7f0 fd6d 	bl	800bcd6 <RBI_ConfigRFSwitch>
}
 801b1fc:	bf00      	nop
 801b1fe:	3710      	adds	r7, #16
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}

0801b204 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b084      	sub	sp, #16
 801b208:	af00      	add	r7, sp, #0
 801b20a:	4603      	mov	r3, r0
 801b20c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b20e:	2301      	movs	r3, #1
 801b210:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b212:	f7f0 fd6e 	bl	800bcf2 <RBI_GetTxConfig>
 801b216:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	2b02      	cmp	r3, #2
 801b21c:	d016      	beq.n	801b24c <SUBGRF_SetRfTxPower+0x48>
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	2b02      	cmp	r3, #2
 801b222:	dc16      	bgt.n	801b252 <SUBGRF_SetRfTxPower+0x4e>
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d003      	beq.n	801b232 <SUBGRF_SetRfTxPower+0x2e>
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	2b01      	cmp	r3, #1
 801b22e:	d00a      	beq.n	801b246 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b230:	e00f      	b.n	801b252 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b236:	2b0f      	cmp	r3, #15
 801b238:	dd02      	ble.n	801b240 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b23a:	2302      	movs	r3, #2
 801b23c:	73fb      	strb	r3, [r7, #15]
            break;
 801b23e:	e009      	b.n	801b254 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b240:	2301      	movs	r3, #1
 801b242:	73fb      	strb	r3, [r7, #15]
            break;
 801b244:	e006      	b.n	801b254 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b246:	2301      	movs	r3, #1
 801b248:	73fb      	strb	r3, [r7, #15]
            break;
 801b24a:	e003      	b.n	801b254 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b24c:	2302      	movs	r3, #2
 801b24e:	73fb      	strb	r3, [r7, #15]
            break;
 801b250:	e000      	b.n	801b254 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b252:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b254:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b258:	7bfb      	ldrb	r3, [r7, #15]
 801b25a:	2202      	movs	r2, #2
 801b25c:	4618      	mov	r0, r3
 801b25e:	f7ff fbcd 	bl	801a9fc <SUBGRF_SetTxParams>

    return paSelect;
 801b262:	7bfb      	ldrb	r3, [r7, #15]
}
 801b264:	4618      	mov	r0, r3
 801b266:	3710      	adds	r7, #16
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b26c:	b480      	push	{r7}
 801b26e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b270:	2301      	movs	r3, #1
}
 801b272:	4618      	mov	r0, r3
 801b274:	46bd      	mov	sp, r7
 801b276:	bc80      	pop	{r7}
 801b278:	4770      	bx	lr
	...

0801b27c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b284:	4b03      	ldr	r3, [pc, #12]	@ (801b294 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	2001      	movs	r0, #1
 801b28a:	4798      	blx	r3
}
 801b28c:	bf00      	nop
 801b28e:	3708      	adds	r7, #8
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}
 801b294:	20001d68 	.word	0x20001d68

0801b298 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b082      	sub	sp, #8
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b2a0:	4b03      	ldr	r3, [pc, #12]	@ (801b2b0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2002      	movs	r0, #2
 801b2a6:	4798      	blx	r3
}
 801b2a8:	bf00      	nop
 801b2aa:	3708      	adds	r7, #8
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd80      	pop	{r7, pc}
 801b2b0:	20001d68 	.word	0x20001d68

0801b2b4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b082      	sub	sp, #8
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b2bc:	4b03      	ldr	r3, [pc, #12]	@ (801b2cc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2040      	movs	r0, #64	@ 0x40
 801b2c2:	4798      	blx	r3
}
 801b2c4:	bf00      	nop
 801b2c6:	3708      	adds	r7, #8
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	bd80      	pop	{r7, pc}
 801b2cc:	20001d68 	.word	0x20001d68

0801b2d0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b2d0:	b580      	push	{r7, lr}
 801b2d2:	b082      	sub	sp, #8
 801b2d4:	af00      	add	r7, sp, #0
 801b2d6:	6078      	str	r0, [r7, #4]
 801b2d8:	460b      	mov	r3, r1
 801b2da:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b2dc:	78fb      	ldrb	r3, [r7, #3]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d002      	beq.n	801b2e8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b2e2:	2b01      	cmp	r3, #1
 801b2e4:	d005      	beq.n	801b2f2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b2e6:	e00a      	b.n	801b2fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b2e8:	4b07      	ldr	r3, [pc, #28]	@ (801b308 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	2080      	movs	r0, #128	@ 0x80
 801b2ee:	4798      	blx	r3
            break;
 801b2f0:	e005      	b.n	801b2fe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b2f2:	4b05      	ldr	r3, [pc, #20]	@ (801b308 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b2fa:	4798      	blx	r3
            break;
 801b2fc:	bf00      	nop
    }
}
 801b2fe:	bf00      	nop
 801b300:	3708      	adds	r7, #8
 801b302:	46bd      	mov	sp, r7
 801b304:	bd80      	pop	{r7, pc}
 801b306:	bf00      	nop
 801b308:	20001d68 	.word	0x20001d68

0801b30c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b082      	sub	sp, #8
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b314:	4b04      	ldr	r3, [pc, #16]	@ (801b328 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b31c:	4798      	blx	r3
}
 801b31e:	bf00      	nop
 801b320:	3708      	adds	r7, #8
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
 801b326:	bf00      	nop
 801b328:	20001d68 	.word	0x20001d68

0801b32c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b082      	sub	sp, #8
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b334:	4b03      	ldr	r3, [pc, #12]	@ (801b344 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	2020      	movs	r0, #32
 801b33a:	4798      	blx	r3
}
 801b33c:	bf00      	nop
 801b33e:	3708      	adds	r7, #8
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}
 801b344:	20001d68 	.word	0x20001d68

0801b348 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b082      	sub	sp, #8
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b350:	4b03      	ldr	r3, [pc, #12]	@ (801b360 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	2004      	movs	r0, #4
 801b356:	4798      	blx	r3
}
 801b358:	bf00      	nop
 801b35a:	3708      	adds	r7, #8
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd80      	pop	{r7, pc}
 801b360:	20001d68 	.word	0x20001d68

0801b364 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b082      	sub	sp, #8
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b36c:	4b03      	ldr	r3, [pc, #12]	@ (801b37c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	2008      	movs	r0, #8
 801b372:	4798      	blx	r3
}
 801b374:	bf00      	nop
 801b376:	3708      	adds	r7, #8
 801b378:	46bd      	mov	sp, r7
 801b37a:	bd80      	pop	{r7, pc}
 801b37c:	20001d68 	.word	0x20001d68

0801b380 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b388:	4b03      	ldr	r3, [pc, #12]	@ (801b398 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	2010      	movs	r0, #16
 801b38e:	4798      	blx	r3
}
 801b390:	bf00      	nop
 801b392:	3708      	adds	r7, #8
 801b394:	46bd      	mov	sp, r7
 801b396:	bd80      	pop	{r7, pc}
 801b398:	20001d68 	.word	0x20001d68

0801b39c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b084      	sub	sp, #16
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b3a6:	f7f0 fcb2 	bl	800bd0e <RBI_IsDCDC>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	2b01      	cmp	r3, #1
 801b3ae:	d112      	bne.n	801b3d6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b3b0:	f640 1023 	movw	r0, #2339	@ 0x923
 801b3b4:	f7ff fe1e 	bl	801aff4 <SUBGRF_ReadRegister>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b3bc:	7bfb      	ldrb	r3, [r7, #15]
 801b3be:	f023 0306 	bic.w	r3, r3, #6
 801b3c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b3c4:	7bfa      	ldrb	r2, [r7, #15]
 801b3c6:	79fb      	ldrb	r3, [r7, #7]
 801b3c8:	4313      	orrs	r3, r2
 801b3ca:	b2db      	uxtb	r3, r3
 801b3cc:	4619      	mov	r1, r3
 801b3ce:	f640 1023 	movw	r0, #2339	@ 0x923
 801b3d2:	f7ff fdfb 	bl	801afcc <SUBGRF_WriteRegister>
  }
}
 801b3d6:	bf00      	nop
 801b3d8:	3710      	adds	r7, #16
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	bd80      	pop	{r7, pc}
	...

0801b3e0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b3e0:	b480      	push	{r7}
 801b3e2:	b085      	sub	sp, #20
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d101      	bne.n	801b3f2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b3ee:	231f      	movs	r3, #31
 801b3f0:	e017      	b.n	801b422 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	73fb      	strb	r3, [r7, #15]
 801b3f6:	e00f      	b.n	801b418 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b3f8:	7bfb      	ldrb	r3, [r7, #15]
 801b3fa:	4a0c      	ldr	r2, [pc, #48]	@ (801b42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b3fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	429a      	cmp	r2, r3
 801b404:	d205      	bcs.n	801b412 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b406:	7bfb      	ldrb	r3, [r7, #15]
 801b408:	4a08      	ldr	r2, [pc, #32]	@ (801b42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b40a:	00db      	lsls	r3, r3, #3
 801b40c:	4413      	add	r3, r2
 801b40e:	791b      	ldrb	r3, [r3, #4]
 801b410:	e007      	b.n	801b422 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b412:	7bfb      	ldrb	r3, [r7, #15]
 801b414:	3301      	adds	r3, #1
 801b416:	73fb      	strb	r3, [r7, #15]
 801b418:	7bfb      	ldrb	r3, [r7, #15]
 801b41a:	2b15      	cmp	r3, #21
 801b41c:	d9ec      	bls.n	801b3f8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b41e:	bf00      	nop
 801b420:	e7fd      	b.n	801b41e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b422:	4618      	mov	r0, r3
 801b424:	3714      	adds	r7, #20
 801b426:	46bd      	mov	sp, r7
 801b428:	bc80      	pop	{r7}
 801b42a:	4770      	bx	lr
 801b42c:	0802079c 	.word	0x0802079c

0801b430 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b430:	b580      	push	{r7, lr}
 801b432:	b08a      	sub	sp, #40	@ 0x28
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
 801b438:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b43a:	4b35      	ldr	r3, [pc, #212]	@ (801b510 <SUBGRF_GetCFO+0xe0>)
 801b43c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b43e:	f640 0007 	movw	r0, #2055	@ 0x807
 801b442:	f7ff fdd7 	bl	801aff4 <SUBGRF_ReadRegister>
 801b446:	4603      	mov	r3, r0
 801b448:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b44a:	7ffb      	ldrb	r3, [r7, #31]
 801b44c:	08db      	lsrs	r3, r3, #3
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	f003 0303 	and.w	r3, r3, #3
 801b454:	3328      	adds	r3, #40	@ 0x28
 801b456:	443b      	add	r3, r7
 801b458:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b45c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b45e:	7ffb      	ldrb	r3, [r7, #31]
 801b460:	f003 0307 	and.w	r3, r3, #7
 801b464:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b466:	7fba      	ldrb	r2, [r7, #30]
 801b468:	7f7b      	ldrb	r3, [r7, #29]
 801b46a:	3b01      	subs	r3, #1
 801b46c:	fa02 f303 	lsl.w	r3, r2, r3
 801b470:	461a      	mov	r2, r3
 801b472:	4b28      	ldr	r3, [pc, #160]	@ (801b514 <SUBGRF_GetCFO+0xe4>)
 801b474:	fbb3 f3f2 	udiv	r3, r3, r2
 801b478:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b47a:	69ba      	ldr	r2, [r7, #24]
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b482:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b484:	2301      	movs	r3, #1
 801b486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b48a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b48e:	697a      	ldr	r2, [r7, #20]
 801b490:	fb02 f303 	mul.w	r3, r2, r3
 801b494:	2b07      	cmp	r3, #7
 801b496:	d802      	bhi.n	801b49e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b498:	2302      	movs	r3, #2
 801b49a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b49e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b4a2:	697a      	ldr	r2, [r7, #20]
 801b4a4:	fb02 f303 	mul.w	r3, r2, r3
 801b4a8:	2b03      	cmp	r3, #3
 801b4aa:	d802      	bhi.n	801b4b2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b4ac:	2304      	movs	r3, #4
 801b4ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b4b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b4b6:	69bb      	ldr	r3, [r7, #24]
 801b4b8:	fb02 f303 	mul.w	r3, r2, r3
 801b4bc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b4be:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b4c2:	f7ff fd97 	bl	801aff4 <SUBGRF_ReadRegister>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	021b      	lsls	r3, r3, #8
 801b4ca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b4ce:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b4d0:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b4d4:	f7ff fd8e 	bl	801aff4 <SUBGRF_ReadRegister>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	461a      	mov	r2, r3
 801b4dc:	6a3b      	ldr	r3, [r7, #32]
 801b4de:	4313      	orrs	r3, r2
 801b4e0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b4e2:	6a3b      	ldr	r3, [r7, #32]
 801b4e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d005      	beq.n	801b4f8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b4ec:	6a3b      	ldr	r3, [r7, #32]
 801b4ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b4f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b4f6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	095b      	lsrs	r3, r3, #5
 801b4fc:	6a3a      	ldr	r2, [r7, #32]
 801b4fe:	fb02 f303 	mul.w	r3, r2, r3
 801b502:	11da      	asrs	r2, r3, #7
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	601a      	str	r2, [r3, #0]
}
 801b508:	bf00      	nop
 801b50a:	3728      	adds	r7, #40	@ 0x28
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	0c0a0804 	.word	0x0c0a0804
 801b514:	01e84800 	.word	0x01e84800

0801b518 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b518:	b480      	push	{r7}
 801b51a:	b087      	sub	sp, #28
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	4603      	mov	r3, r0
 801b520:	60b9      	str	r1, [r7, #8]
 801b522:	607a      	str	r2, [r7, #4]
 801b524:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b526:	2300      	movs	r3, #0
 801b528:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b52a:	f04f 33ff 	mov.w	r3, #4294967295
 801b52e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b530:	697b      	ldr	r3, [r7, #20]
}
 801b532:	4618      	mov	r0, r3
 801b534:	371c      	adds	r7, #28
 801b536:	46bd      	mov	sp, r7
 801b538:	bc80      	pop	{r7}
 801b53a:	4770      	bx	lr

0801b53c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b53c:	b480      	push	{r7}
 801b53e:	b087      	sub	sp, #28
 801b540:	af00      	add	r7, sp, #0
 801b542:	4603      	mov	r3, r0
 801b544:	60b9      	str	r1, [r7, #8]
 801b546:	607a      	str	r2, [r7, #4]
 801b548:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b54a:	2300      	movs	r3, #0
 801b54c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b54e:	f04f 33ff 	mov.w	r3, #4294967295
 801b552:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b554:	697b      	ldr	r3, [r7, #20]
}
 801b556:	4618      	mov	r0, r3
 801b558:	371c      	adds	r7, #28
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bc80      	pop	{r7}
 801b55e:	4770      	bx	lr

0801b560 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b560:	b480      	push	{r7}
 801b562:	b085      	sub	sp, #20
 801b564:	af00      	add	r7, sp, #0
 801b566:	60f8      	str	r0, [r7, #12]
 801b568:	60b9      	str	r1, [r7, #8]
 801b56a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b56c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b570:	4618      	mov	r0, r3
 801b572:	3714      	adds	r7, #20
 801b574:	46bd      	mov	sp, r7
 801b576:	bc80      	pop	{r7}
 801b578:	4770      	bx	lr

0801b57a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b57a:	b480      	push	{r7}
 801b57c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b57e:	bf00      	nop
 801b580:	46bd      	mov	sp, r7
 801b582:	bc80      	pop	{r7}
 801b584:	4770      	bx	lr

0801b586 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b586:	b480      	push	{r7}
 801b588:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b58a:	2300      	movs	r3, #0
#endif
}
 801b58c:	4618      	mov	r0, r3
 801b58e:	46bd      	mov	sp, r7
 801b590:	bc80      	pop	{r7}
 801b592:	4770      	bx	lr

0801b594 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b594:	b480      	push	{r7}
 801b596:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b598:	2300      	movs	r3, #0
#endif
}
 801b59a:	4618      	mov	r0, r3
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bc80      	pop	{r7}
 801b5a0:	4770      	bx	lr

0801b5a2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b5a2:	b480      	push	{r7}
 801b5a4:	b083      	sub	sp, #12
 801b5a6:	af00      	add	r7, sp, #0
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b5ac:	bf00      	nop
 801b5ae:	370c      	adds	r7, #12
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	bc80      	pop	{r7}
 801b5b4:	4770      	bx	lr

0801b5b6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b5b6:	b480      	push	{r7}
 801b5b8:	b087      	sub	sp, #28
 801b5ba:	af00      	add	r7, sp, #0
 801b5bc:	60f8      	str	r0, [r7, #12]
 801b5be:	460b      	mov	r3, r1
 801b5c0:	607a      	str	r2, [r7, #4]
 801b5c2:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801b5c8:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b5ca:	697b      	ldr	r3, [r7, #20]
}
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	371c      	adds	r7, #28
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bc80      	pop	{r7}
 801b5d4:	4770      	bx	lr

0801b5d6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b5d6:	b480      	push	{r7}
 801b5d8:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b5da:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b5de:	4618      	mov	r0, r3
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bc80      	pop	{r7}
 801b5e4:	4770      	bx	lr

0801b5e6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b5e6:	b480      	push	{r7}
 801b5e8:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b5ea:	bf00      	nop
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bc80      	pop	{r7}
 801b5f0:	4770      	bx	lr

0801b5f2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b5f2:	b480      	push	{r7}
 801b5f4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b5f6:	bf00      	nop
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	bc80      	pop	{r7}
 801b5fc:	4770      	bx	lr

0801b5fe <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b5fe:	b480      	push	{r7}
 801b600:	b083      	sub	sp, #12
 801b602:	af00      	add	r7, sp, #0
 801b604:	4603      	mov	r3, r0
 801b606:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b608:	bf00      	nop
 801b60a:	370c      	adds	r7, #12
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bc80      	pop	{r7}
 801b610:	4770      	bx	lr
	...

0801b614 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b614:	b480      	push	{r7}
 801b616:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b618:	4b04      	ldr	r3, [pc, #16]	@ (801b62c <UTIL_LPM_Init+0x18>)
 801b61a:	2200      	movs	r2, #0
 801b61c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b61e:	4b04      	ldr	r3, [pc, #16]	@ (801b630 <UTIL_LPM_Init+0x1c>)
 801b620:	2200      	movs	r2, #0
 801b622:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b624:	bf00      	nop
 801b626:	46bd      	mov	sp, r7
 801b628:	bc80      	pop	{r7}
 801b62a:	4770      	bx	lr
 801b62c:	20001d6c 	.word	0x20001d6c
 801b630:	20001d70 	.word	0x20001d70

0801b634 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b634:	b480      	push	{r7}
 801b636:	b087      	sub	sp, #28
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
 801b63c:	460b      	mov	r3, r1
 801b63e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b640:	f3ef 8310 	mrs	r3, PRIMASK
 801b644:	613b      	str	r3, [r7, #16]
  return(result);
 801b646:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b64a:	b672      	cpsid	i
}
 801b64c:	bf00      	nop
  
  switch( state )
 801b64e:	78fb      	ldrb	r3, [r7, #3]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d008      	beq.n	801b666 <UTIL_LPM_SetStopMode+0x32>
 801b654:	2b01      	cmp	r3, #1
 801b656:	d10e      	bne.n	801b676 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b658:	4b0d      	ldr	r3, [pc, #52]	@ (801b690 <UTIL_LPM_SetStopMode+0x5c>)
 801b65a:	681a      	ldr	r2, [r3, #0]
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	4313      	orrs	r3, r2
 801b660:	4a0b      	ldr	r2, [pc, #44]	@ (801b690 <UTIL_LPM_SetStopMode+0x5c>)
 801b662:	6013      	str	r3, [r2, #0]
      break;
 801b664:	e008      	b.n	801b678 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	43da      	mvns	r2, r3
 801b66a:	4b09      	ldr	r3, [pc, #36]	@ (801b690 <UTIL_LPM_SetStopMode+0x5c>)
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	4013      	ands	r3, r2
 801b670:	4a07      	ldr	r2, [pc, #28]	@ (801b690 <UTIL_LPM_SetStopMode+0x5c>)
 801b672:	6013      	str	r3, [r2, #0]
      break;
 801b674:	e000      	b.n	801b678 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b676:	bf00      	nop
 801b678:	697b      	ldr	r3, [r7, #20]
 801b67a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	f383 8810 	msr	PRIMASK, r3
}
 801b682:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b684:	bf00      	nop
 801b686:	371c      	adds	r7, #28
 801b688:	46bd      	mov	sp, r7
 801b68a:	bc80      	pop	{r7}
 801b68c:	4770      	bx	lr
 801b68e:	bf00      	nop
 801b690:	20001d6c 	.word	0x20001d6c

0801b694 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b694:	b480      	push	{r7}
 801b696:	b087      	sub	sp, #28
 801b698:	af00      	add	r7, sp, #0
 801b69a:	6078      	str	r0, [r7, #4]
 801b69c:	460b      	mov	r3, r1
 801b69e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6a0:	f3ef 8310 	mrs	r3, PRIMASK
 801b6a4:	613b      	str	r3, [r7, #16]
  return(result);
 801b6a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6aa:	b672      	cpsid	i
}
 801b6ac:	bf00      	nop
  
  switch(state)
 801b6ae:	78fb      	ldrb	r3, [r7, #3]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d008      	beq.n	801b6c6 <UTIL_LPM_SetOffMode+0x32>
 801b6b4:	2b01      	cmp	r3, #1
 801b6b6:	d10e      	bne.n	801b6d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b6b8:	4b0d      	ldr	r3, [pc, #52]	@ (801b6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801b6ba:	681a      	ldr	r2, [r3, #0]
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	4313      	orrs	r3, r2
 801b6c0:	4a0b      	ldr	r2, [pc, #44]	@ (801b6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801b6c2:	6013      	str	r3, [r2, #0]
      break;
 801b6c4:	e008      	b.n	801b6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	43da      	mvns	r2, r3
 801b6ca:	4b09      	ldr	r3, [pc, #36]	@ (801b6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4013      	ands	r3, r2
 801b6d0:	4a07      	ldr	r2, [pc, #28]	@ (801b6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801b6d2:	6013      	str	r3, [r2, #0]
      break;
 801b6d4:	e000      	b.n	801b6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b6d6:	bf00      	nop
 801b6d8:	697b      	ldr	r3, [r7, #20]
 801b6da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	f383 8810 	msr	PRIMASK, r3
}
 801b6e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b6e4:	bf00      	nop
 801b6e6:	371c      	adds	r7, #28
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bc80      	pop	{r7}
 801b6ec:	4770      	bx	lr
 801b6ee:	bf00      	nop
 801b6f0:	20001d70 	.word	0x20001d70

0801b6f4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b084      	sub	sp, #16
 801b6f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b6fe:	60bb      	str	r3, [r7, #8]
  return(result);
 801b700:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b704:	b672      	cpsid	i
}
 801b706:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b708:	4b12      	ldr	r3, [pc, #72]	@ (801b754 <UTIL_LPM_EnterLowPower+0x60>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d006      	beq.n	801b71e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b710:	4b11      	ldr	r3, [pc, #68]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b716:	4b10      	ldr	r3, [pc, #64]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b718:	685b      	ldr	r3, [r3, #4]
 801b71a:	4798      	blx	r3
 801b71c:	e010      	b.n	801b740 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b71e:	4b0f      	ldr	r3, [pc, #60]	@ (801b75c <UTIL_LPM_EnterLowPower+0x68>)
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d006      	beq.n	801b734 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b726:	4b0c      	ldr	r3, [pc, #48]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b728:	689b      	ldr	r3, [r3, #8]
 801b72a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b72c:	4b0a      	ldr	r3, [pc, #40]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b72e:	68db      	ldr	r3, [r3, #12]
 801b730:	4798      	blx	r3
 801b732:	e005      	b.n	801b740 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b734:	4b08      	ldr	r3, [pc, #32]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b736:	691b      	ldr	r3, [r3, #16]
 801b738:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b73a:	4b07      	ldr	r3, [pc, #28]	@ (801b758 <UTIL_LPM_EnterLowPower+0x64>)
 801b73c:	695b      	ldr	r3, [r3, #20]
 801b73e:	4798      	blx	r3
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	f383 8810 	msr	PRIMASK, r3
}
 801b74a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b74c:	bf00      	nop
 801b74e:	3710      	adds	r7, #16
 801b750:	46bd      	mov	sp, r7
 801b752:	bd80      	pop	{r7, pc}
 801b754:	20001d6c 	.word	0x20001d6c
 801b758:	08020214 	.word	0x08020214
 801b75c:	20001d70 	.word	0x20001d70

0801b760 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b760:	b480      	push	{r7}
 801b762:	b087      	sub	sp, #28
 801b764:	af00      	add	r7, sp, #0
 801b766:	60f8      	str	r0, [r7, #12]
 801b768:	60b9      	str	r1, [r7, #8]
 801b76a:	4613      	mov	r3, r2
 801b76c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b776:	e007      	b.n	801b788 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b778:	693a      	ldr	r2, [r7, #16]
 801b77a:	1c53      	adds	r3, r2, #1
 801b77c:	613b      	str	r3, [r7, #16]
 801b77e:	697b      	ldr	r3, [r7, #20]
 801b780:	1c59      	adds	r1, r3, #1
 801b782:	6179      	str	r1, [r7, #20]
 801b784:	7812      	ldrb	r2, [r2, #0]
 801b786:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b788:	88fb      	ldrh	r3, [r7, #6]
 801b78a:	1e5a      	subs	r2, r3, #1
 801b78c:	80fa      	strh	r2, [r7, #6]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d1f2      	bne.n	801b778 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b792:	bf00      	nop
 801b794:	bf00      	nop
 801b796:	371c      	adds	r7, #28
 801b798:	46bd      	mov	sp, r7
 801b79a:	bc80      	pop	{r7}
 801b79c:	4770      	bx	lr

0801b79e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b79e:	b480      	push	{r7}
 801b7a0:	b085      	sub	sp, #20
 801b7a2:	af00      	add	r7, sp, #0
 801b7a4:	6078      	str	r0, [r7, #4]
 801b7a6:	460b      	mov	r3, r1
 801b7a8:	70fb      	strb	r3, [r7, #3]
 801b7aa:	4613      	mov	r3, r2
 801b7ac:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b7b2:	e004      	b.n	801b7be <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	1c5a      	adds	r2, r3, #1
 801b7b8:	60fa      	str	r2, [r7, #12]
 801b7ba:	78fa      	ldrb	r2, [r7, #3]
 801b7bc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b7be:	883b      	ldrh	r3, [r7, #0]
 801b7c0:	1e5a      	subs	r2, r3, #1
 801b7c2:	803a      	strh	r2, [r7, #0]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d1f5      	bne.n	801b7b4 <UTIL_MEM_set_8+0x16>
  }
}
 801b7c8:	bf00      	nop
 801b7ca:	bf00      	nop
 801b7cc:	3714      	adds	r7, #20
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	bc80      	pop	{r7}
 801b7d2:	4770      	bx	lr

0801b7d4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b7d4:	b082      	sub	sp, #8
 801b7d6:	b480      	push	{r7}
 801b7d8:	b087      	sub	sp, #28
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	60f8      	str	r0, [r7, #12]
 801b7de:	1d38      	adds	r0, r7, #4
 801b7e0:	e880 0006 	stmia.w	r0, {r1, r2}
 801b7e4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	613b      	str	r3, [r7, #16]
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b7ee:	687a      	ldr	r2, [r7, #4]
 801b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7f2:	4413      	add	r3, r2
 801b7f4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b7f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b7fa:	b29a      	uxth	r2, r3
 801b7fc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b800:	b29b      	uxth	r3, r3
 801b802:	4413      	add	r3, r2
 801b804:	b29b      	uxth	r3, r3
 801b806:	b21b      	sxth	r3, r3
 801b808:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b80a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b80e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b812:	db0a      	blt.n	801b82a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b814:	693b      	ldr	r3, [r7, #16]
 801b816:	3301      	adds	r3, #1
 801b818:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b81a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b81e:	b29b      	uxth	r3, r3
 801b820:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801b824:	b29b      	uxth	r3, r3
 801b826:	b21b      	sxth	r3, r3
 801b828:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	461a      	mov	r2, r3
 801b82e:	f107 0310 	add.w	r3, r7, #16
 801b832:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b836:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b83a:	68f8      	ldr	r0, [r7, #12]
 801b83c:	371c      	adds	r7, #28
 801b83e:	46bd      	mov	sp, r7
 801b840:	bc80      	pop	{r7}
 801b842:	b002      	add	sp, #8
 801b844:	4770      	bx	lr

0801b846 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b846:	b082      	sub	sp, #8
 801b848:	b480      	push	{r7}
 801b84a:	b087      	sub	sp, #28
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	60f8      	str	r0, [r7, #12]
 801b850:	1d38      	adds	r0, r7, #4
 801b852:	e880 0006 	stmia.w	r0, {r1, r2}
 801b856:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b858:	2300      	movs	r3, #0
 801b85a:	613b      	str	r3, [r7, #16]
 801b85c:	2300      	movs	r3, #0
 801b85e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b860:	687a      	ldr	r2, [r7, #4]
 801b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b864:	1ad3      	subs	r3, r2, r3
 801b866:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b868:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b86c:	b29a      	uxth	r2, r3
 801b86e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b872:	b29b      	uxth	r3, r3
 801b874:	1ad3      	subs	r3, r2, r3
 801b876:	b29b      	uxth	r3, r3
 801b878:	b21b      	sxth	r3, r3
 801b87a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b87c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b880:	2b00      	cmp	r3, #0
 801b882:	da0a      	bge.n	801b89a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b884:	693b      	ldr	r3, [r7, #16]
 801b886:	3b01      	subs	r3, #1
 801b888:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b88a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b88e:	b29b      	uxth	r3, r3
 801b890:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801b894:	b29b      	uxth	r3, r3
 801b896:	b21b      	sxth	r3, r3
 801b898:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	461a      	mov	r2, r3
 801b89e:	f107 0310 	add.w	r3, r7, #16
 801b8a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b8a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b8aa:	68f8      	ldr	r0, [r7, #12]
 801b8ac:	371c      	adds	r7, #28
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bc80      	pop	{r7}
 801b8b2:	b002      	add	sp, #8
 801b8b4:	4770      	bx	lr
	...

0801b8b8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b088      	sub	sp, #32
 801b8bc:	af02      	add	r7, sp, #8
 801b8be:	463b      	mov	r3, r7
 801b8c0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	60bb      	str	r3, [r7, #8]
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b8cc:	4b10      	ldr	r3, [pc, #64]	@ (801b910 <SysTimeSet+0x58>)
 801b8ce:	691b      	ldr	r3, [r3, #16]
 801b8d0:	f107 0208 	add.w	r2, r7, #8
 801b8d4:	3204      	adds	r2, #4
 801b8d6:	4610      	mov	r0, r2
 801b8d8:	4798      	blx	r3
 801b8da:	4603      	mov	r3, r0
 801b8dc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b8de:	f107 0010 	add.w	r0, r7, #16
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	9300      	str	r3, [sp, #0]
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	463a      	mov	r2, r7
 801b8ea:	ca06      	ldmia	r2, {r1, r2}
 801b8ec:	f7ff ffab 	bl	801b846 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b8f0:	4b07      	ldr	r3, [pc, #28]	@ (801b910 <SysTimeSet+0x58>)
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	693a      	ldr	r2, [r7, #16]
 801b8f6:	4610      	mov	r0, r2
 801b8f8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b8fa:	4b05      	ldr	r3, [pc, #20]	@ (801b910 <SysTimeSet+0x58>)
 801b8fc:	689b      	ldr	r3, [r3, #8]
 801b8fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b902:	4610      	mov	r0, r2
 801b904:	4798      	blx	r3
}
 801b906:	bf00      	nop
 801b908:	3718      	adds	r7, #24
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	080202f8 	.word	0x080202f8

0801b914 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b08a      	sub	sp, #40	@ 0x28
 801b918:	af02      	add	r7, sp, #8
 801b91a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b91c:	2300      	movs	r3, #0
 801b91e:	61bb      	str	r3, [r7, #24]
 801b920:	2300      	movs	r3, #0
 801b922:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b924:	2300      	movs	r3, #0
 801b926:	613b      	str	r3, [r7, #16]
 801b928:	2300      	movs	r3, #0
 801b92a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b92c:	4b14      	ldr	r3, [pc, #80]	@ (801b980 <SysTimeGet+0x6c>)
 801b92e:	691b      	ldr	r3, [r3, #16]
 801b930:	f107 0218 	add.w	r2, r7, #24
 801b934:	3204      	adds	r2, #4
 801b936:	4610      	mov	r0, r2
 801b938:	4798      	blx	r3
 801b93a:	4603      	mov	r3, r0
 801b93c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b93e:	4b10      	ldr	r3, [pc, #64]	@ (801b980 <SysTimeGet+0x6c>)
 801b940:	68db      	ldr	r3, [r3, #12]
 801b942:	4798      	blx	r3
 801b944:	4603      	mov	r3, r0
 801b946:	b21b      	sxth	r3, r3
 801b948:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b94a:	4b0d      	ldr	r3, [pc, #52]	@ (801b980 <SysTimeGet+0x6c>)
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	4798      	blx	r3
 801b950:	4603      	mov	r3, r0
 801b952:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b954:	f107 0010 	add.w	r0, r7, #16
 801b958:	69fb      	ldr	r3, [r7, #28]
 801b95a:	9300      	str	r3, [sp, #0]
 801b95c:	69bb      	ldr	r3, [r7, #24]
 801b95e:	f107 0208 	add.w	r2, r7, #8
 801b962:	ca06      	ldmia	r2, {r1, r2}
 801b964:	f7ff ff36 	bl	801b7d4 <SysTimeAdd>

  return sysTime;
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	461a      	mov	r2, r3
 801b96c:	f107 0310 	add.w	r3, r7, #16
 801b970:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b974:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b978:	6878      	ldr	r0, [r7, #4]
 801b97a:	3720      	adds	r7, #32
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}
 801b980:	080202f8 	.word	0x080202f8

0801b984 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b084      	sub	sp, #16
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b98c:	2300      	movs	r3, #0
 801b98e:	60bb      	str	r3, [r7, #8]
 801b990:	2300      	movs	r3, #0
 801b992:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b994:	4b0a      	ldr	r3, [pc, #40]	@ (801b9c0 <SysTimeGetMcuTime+0x3c>)
 801b996:	691b      	ldr	r3, [r3, #16]
 801b998:	f107 0208 	add.w	r2, r7, #8
 801b99c:	3204      	adds	r2, #4
 801b99e:	4610      	mov	r0, r2
 801b9a0:	4798      	blx	r3
 801b9a2:	4603      	mov	r3, r0
 801b9a4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	461a      	mov	r2, r3
 801b9aa:	f107 0308 	add.w	r3, r7, #8
 801b9ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b9b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b9b6:	6878      	ldr	r0, [r7, #4]
 801b9b8:	3710      	adds	r7, #16
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	080202f8 	.word	0x080202f8

0801b9c4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b088      	sub	sp, #32
 801b9c8:	af02      	add	r7, sp, #8
 801b9ca:	463b      	mov	r3, r7
 801b9cc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b9d0:	4b0f      	ldr	r3, [pc, #60]	@ (801ba10 <SysTimeToMs+0x4c>)
 801b9d2:	68db      	ldr	r3, [r3, #12]
 801b9d4:	4798      	blx	r3
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	b21b      	sxth	r3, r3
 801b9da:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b9dc:	4b0c      	ldr	r3, [pc, #48]	@ (801ba10 <SysTimeToMs+0x4c>)
 801b9de:	685b      	ldr	r3, [r3, #4]
 801b9e0:	4798      	blx	r3
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b9e6:	f107 0008 	add.w	r0, r7, #8
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	9300      	str	r3, [sp, #0]
 801b9ee:	693b      	ldr	r3, [r7, #16]
 801b9f0:	463a      	mov	r2, r7
 801b9f2:	ca06      	ldmia	r2, {r1, r2}
 801b9f4:	f7ff ff27 	bl	801b846 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b9fe:	fb02 f303 	mul.w	r3, r2, r3
 801ba02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ba06:	4413      	add	r3, r2
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	3718      	adds	r7, #24
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd80      	pop	{r7, pc}
 801ba10:	080202f8 	.word	0x080202f8

0801ba14 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b08a      	sub	sp, #40	@ 0x28
 801ba18:	af02      	add	r7, sp, #8
 801ba1a:	6078      	str	r0, [r7, #4]
 801ba1c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	4a19      	ldr	r2, [pc, #100]	@ (801ba88 <SysTimeFromMs+0x74>)
 801ba22:	fba2 2303 	umull	r2, r3, r2, r3
 801ba26:	099b      	lsrs	r3, r3, #6
 801ba28:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ba2a:	69fb      	ldr	r3, [r7, #28]
 801ba2c:	617b      	str	r3, [r7, #20]
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	b29a      	uxth	r2, r3
 801ba32:	69fb      	ldr	r3, [r7, #28]
 801ba34:	b29b      	uxth	r3, r3
 801ba36:	4619      	mov	r1, r3
 801ba38:	0149      	lsls	r1, r1, #5
 801ba3a:	1ac9      	subs	r1, r1, r3
 801ba3c:	0089      	lsls	r1, r1, #2
 801ba3e:	440b      	add	r3, r1
 801ba40:	00db      	lsls	r3, r3, #3
 801ba42:	b29b      	uxth	r3, r3
 801ba44:	1ad3      	subs	r3, r2, r3
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	b21b      	sxth	r3, r3
 801ba4a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ba4c:	f107 030c 	add.w	r3, r7, #12
 801ba50:	2200      	movs	r2, #0
 801ba52:	601a      	str	r2, [r3, #0]
 801ba54:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ba56:	4b0d      	ldr	r3, [pc, #52]	@ (801ba8c <SysTimeFromMs+0x78>)
 801ba58:	68db      	ldr	r3, [r3, #12]
 801ba5a:	4798      	blx	r3
 801ba5c:	4603      	mov	r3, r0
 801ba5e:	b21b      	sxth	r3, r3
 801ba60:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ba62:	4b0a      	ldr	r3, [pc, #40]	@ (801ba8c <SysTimeFromMs+0x78>)
 801ba64:	685b      	ldr	r3, [r3, #4]
 801ba66:	4798      	blx	r3
 801ba68:	4603      	mov	r3, r0
 801ba6a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ba6c:	6878      	ldr	r0, [r7, #4]
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	9300      	str	r3, [sp, #0]
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	f107 0214 	add.w	r2, r7, #20
 801ba78:	ca06      	ldmia	r2, {r1, r2}
 801ba7a:	f7ff feab 	bl	801b7d4 <SysTimeAdd>
}
 801ba7e:	6878      	ldr	r0, [r7, #4]
 801ba80:	3720      	adds	r7, #32
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	10624dd3 	.word	0x10624dd3
 801ba8c:	080202f8 	.word	0x080202f8

0801ba90 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ba90:	b480      	push	{r7}
 801ba92:	b085      	sub	sp, #20
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ba9c:	e00e      	b.n	801babc <ee_skip_atoi+0x2c>
 801ba9e:	68fa      	ldr	r2, [r7, #12]
 801baa0:	4613      	mov	r3, r2
 801baa2:	009b      	lsls	r3, r3, #2
 801baa4:	4413      	add	r3, r2
 801baa6:	005b      	lsls	r3, r3, #1
 801baa8:	4618      	mov	r0, r3
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	1c59      	adds	r1, r3, #1
 801bab0:	687a      	ldr	r2, [r7, #4]
 801bab2:	6011      	str	r1, [r2, #0]
 801bab4:	781b      	ldrb	r3, [r3, #0]
 801bab6:	4403      	add	r3, r0
 801bab8:	3b30      	subs	r3, #48	@ 0x30
 801baba:	60fb      	str	r3, [r7, #12]
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	781b      	ldrb	r3, [r3, #0]
 801bac2:	2b2f      	cmp	r3, #47	@ 0x2f
 801bac4:	d904      	bls.n	801bad0 <ee_skip_atoi+0x40>
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	2b39      	cmp	r3, #57	@ 0x39
 801bace:	d9e6      	bls.n	801ba9e <ee_skip_atoi+0xe>
  return i;
 801bad0:	68fb      	ldr	r3, [r7, #12]
}
 801bad2:	4618      	mov	r0, r3
 801bad4:	3714      	adds	r7, #20
 801bad6:	46bd      	mov	sp, r7
 801bad8:	bc80      	pop	{r7}
 801bada:	4770      	bx	lr

0801badc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801badc:	b480      	push	{r7}
 801bade:	b099      	sub	sp, #100	@ 0x64
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	60f8      	str	r0, [r7, #12]
 801bae4:	60b9      	str	r1, [r7, #8]
 801bae6:	607a      	str	r2, [r7, #4]
 801bae8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801baea:	4b71      	ldr	r3, [pc, #452]	@ (801bcb0 <ee_number+0x1d4>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801baf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801baf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d002      	beq.n	801bb00 <ee_number+0x24>
 801bafa:	4b6e      	ldr	r3, [pc, #440]	@ (801bcb4 <ee_number+0x1d8>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bb00:	683b      	ldr	r3, [r7, #0]
 801bb02:	2b01      	cmp	r3, #1
 801bb04:	dd02      	ble.n	801bb0c <ee_number+0x30>
 801bb06:	683b      	ldr	r3, [r7, #0]
 801bb08:	2b24      	cmp	r3, #36	@ 0x24
 801bb0a:	dd01      	ble.n	801bb10 <ee_number+0x34>
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	e0ca      	b.n	801bca6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bb10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bb12:	f003 0301 	and.w	r3, r3, #1
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d001      	beq.n	801bb1e <ee_number+0x42>
 801bb1a:	2330      	movs	r3, #48	@ 0x30
 801bb1c:	e000      	b.n	801bb20 <ee_number+0x44>
 801bb1e:	2320      	movs	r3, #32
 801bb20:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801bb24:	2300      	movs	r3, #0
 801bb26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801bb2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bb2c:	f003 0302 	and.w	r3, r3, #2
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d00b      	beq.n	801bb4c <ee_number+0x70>
  {
    if (num < 0)
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	da08      	bge.n	801bb4c <ee_number+0x70>
    {
      sign = '-';
 801bb3a:	232d      	movs	r3, #45	@ 0x2d
 801bb3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	425b      	negs	r3, r3
 801bb44:	607b      	str	r3, [r7, #4]
      size--;
 801bb46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb48:	3b01      	subs	r3, #1
 801bb4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d11e      	bne.n	801bb94 <ee_number+0xb8>
    tmp[i++] = '0';
 801bb56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb58:	1c5a      	adds	r2, r3, #1
 801bb5a:	657a      	str	r2, [r7, #84]	@ 0x54
 801bb5c:	3360      	adds	r3, #96	@ 0x60
 801bb5e:	443b      	add	r3, r7
 801bb60:	2230      	movs	r2, #48	@ 0x30
 801bb62:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bb66:	e018      	b.n	801bb9a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	683a      	ldr	r2, [r7, #0]
 801bb6c:	fbb3 f1f2 	udiv	r1, r3, r2
 801bb70:	fb01 f202 	mul.w	r2, r1, r2
 801bb74:	1a9b      	subs	r3, r3, r2
 801bb76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bb78:	441a      	add	r2, r3
 801bb7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb7c:	1c59      	adds	r1, r3, #1
 801bb7e:	6579      	str	r1, [r7, #84]	@ 0x54
 801bb80:	7812      	ldrb	r2, [r2, #0]
 801bb82:	3360      	adds	r3, #96	@ 0x60
 801bb84:	443b      	add	r3, r7
 801bb86:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bb8a:	687a      	ldr	r2, [r7, #4]
 801bb8c:	683b      	ldr	r3, [r7, #0]
 801bb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb92:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d1e6      	bne.n	801bb68 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bb9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bb9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	dd01      	ble.n	801bba6 <ee_number+0xca>
 801bba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801bba6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bbaa:	1ad3      	subs	r3, r2, r3
 801bbac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bbae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bbb0:	f003 0301 	and.w	r3, r3, #1
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d112      	bne.n	801bbde <ee_number+0x102>
 801bbb8:	e00c      	b.n	801bbd4 <ee_number+0xf8>
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	1c5a      	adds	r2, r3, #1
 801bbbe:	60fa      	str	r2, [r7, #12]
 801bbc0:	2220      	movs	r2, #32
 801bbc2:	701a      	strb	r2, [r3, #0]
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	3b01      	subs	r3, #1
 801bbc8:	60bb      	str	r3, [r7, #8]
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d101      	bne.n	801bbd4 <ee_number+0xf8>
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	e068      	b.n	801bca6 <ee_number+0x1ca>
 801bbd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bbd6:	1e5a      	subs	r2, r3, #1
 801bbd8:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	dced      	bgt.n	801bbba <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bbde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d01b      	beq.n	801bc1e <ee_number+0x142>
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	1c5a      	adds	r2, r3, #1
 801bbea:	60fa      	str	r2, [r7, #12]
 801bbec:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801bbf0:	701a      	strb	r2, [r3, #0]
 801bbf2:	68bb      	ldr	r3, [r7, #8]
 801bbf4:	3b01      	subs	r3, #1
 801bbf6:	60bb      	str	r3, [r7, #8]
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d10f      	bne.n	801bc1e <ee_number+0x142>
 801bbfe:	68fb      	ldr	r3, [r7, #12]
 801bc00:	e051      	b.n	801bca6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	1c5a      	adds	r2, r3, #1
 801bc06:	60fa      	str	r2, [r7, #12]
 801bc08:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801bc0c:	701a      	strb	r2, [r3, #0]
 801bc0e:	68bb      	ldr	r3, [r7, #8]
 801bc10:	3b01      	subs	r3, #1
 801bc12:	60bb      	str	r3, [r7, #8]
 801bc14:	68bb      	ldr	r3, [r7, #8]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d101      	bne.n	801bc1e <ee_number+0x142>
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	e043      	b.n	801bca6 <ee_number+0x1ca>
 801bc1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc20:	1e5a      	subs	r2, r3, #1
 801bc22:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	dcec      	bgt.n	801bc02 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bc28:	e00c      	b.n	801bc44 <ee_number+0x168>
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	1c5a      	adds	r2, r3, #1
 801bc2e:	60fa      	str	r2, [r7, #12]
 801bc30:	2230      	movs	r2, #48	@ 0x30
 801bc32:	701a      	strb	r2, [r3, #0]
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	3b01      	subs	r3, #1
 801bc38:	60bb      	str	r3, [r7, #8]
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d101      	bne.n	801bc44 <ee_number+0x168>
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	e030      	b.n	801bca6 <ee_number+0x1ca>
 801bc44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bc46:	1e5a      	subs	r2, r3, #1
 801bc48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801bc4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bc4c:	429a      	cmp	r2, r3
 801bc4e:	dbec      	blt.n	801bc2a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bc50:	e010      	b.n	801bc74 <ee_number+0x198>
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	1c5a      	adds	r2, r3, #1
 801bc56:	60fa      	str	r2, [r7, #12]
 801bc58:	f107 0110 	add.w	r1, r7, #16
 801bc5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bc5e:	440a      	add	r2, r1
 801bc60:	7812      	ldrb	r2, [r2, #0]
 801bc62:	701a      	strb	r2, [r3, #0]
 801bc64:	68bb      	ldr	r3, [r7, #8]
 801bc66:	3b01      	subs	r3, #1
 801bc68:	60bb      	str	r3, [r7, #8]
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d101      	bne.n	801bc74 <ee_number+0x198>
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	e018      	b.n	801bca6 <ee_number+0x1ca>
 801bc74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bc76:	1e5a      	subs	r2, r3, #1
 801bc78:	657a      	str	r2, [r7, #84]	@ 0x54
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	dce9      	bgt.n	801bc52 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801bc7e:	e00c      	b.n	801bc9a <ee_number+0x1be>
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	1c5a      	adds	r2, r3, #1
 801bc84:	60fa      	str	r2, [r7, #12]
 801bc86:	2220      	movs	r2, #32
 801bc88:	701a      	strb	r2, [r3, #0]
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	3b01      	subs	r3, #1
 801bc8e:	60bb      	str	r3, [r7, #8]
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d101      	bne.n	801bc9a <ee_number+0x1be>
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	e005      	b.n	801bca6 <ee_number+0x1ca>
 801bc9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bc9c:	1e5a      	subs	r2, r3, #1
 801bc9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	dced      	bgt.n	801bc80 <ee_number+0x1a4>

  return str;
 801bca4:	68fb      	ldr	r3, [r7, #12]
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	3764      	adds	r7, #100	@ 0x64
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bc80      	pop	{r7}
 801bcae:	4770      	bx	lr
 801bcb0:	20000130 	.word	0x20000130
 801bcb4:	20000134 	.word	0x20000134

0801bcb8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b092      	sub	sp, #72	@ 0x48
 801bcbc:	af04      	add	r7, sp, #16
 801bcbe:	60f8      	str	r0, [r7, #12]
 801bcc0:	60b9      	str	r1, [r7, #8]
 801bcc2:	607a      	str	r2, [r7, #4]
 801bcc4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	dc01      	bgt.n	801bcd0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bccc:	2300      	movs	r3, #0
 801bcce:	e13e      	b.n	801bf4e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bcd4:	e128      	b.n	801bf28 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bcd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	1ad2      	subs	r2, r2, r3
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	3b01      	subs	r3, #1
 801bce0:	429a      	cmp	r2, r3
 801bce2:	f280 812e 	bge.w	801bf42 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	781b      	ldrb	r3, [r3, #0]
 801bcea:	2b25      	cmp	r3, #37	@ 0x25
 801bcec:	d006      	beq.n	801bcfc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bcee:	687a      	ldr	r2, [r7, #4]
 801bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcf2:	1c59      	adds	r1, r3, #1
 801bcf4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bcf6:	7812      	ldrb	r2, [r2, #0]
 801bcf8:	701a      	strb	r2, [r3, #0]
      continue;
 801bcfa:	e112      	b.n	801bf22 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	3301      	adds	r3, #1
 801bd04:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	2b30      	cmp	r3, #48	@ 0x30
 801bd0c:	d103      	bne.n	801bd16 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bd0e:	6a3b      	ldr	r3, [r7, #32]
 801bd10:	f043 0301 	orr.w	r3, r3, #1
 801bd14:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bd16:	f04f 33ff 	mov.w	r3, #4294967295
 801bd1a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	781b      	ldrb	r3, [r3, #0]
 801bd20:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd22:	d908      	bls.n	801bd36 <tiny_vsnprintf_like+0x7e>
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	781b      	ldrb	r3, [r3, #0]
 801bd28:	2b39      	cmp	r3, #57	@ 0x39
 801bd2a:	d804      	bhi.n	801bd36 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bd2c:	1d3b      	adds	r3, r7, #4
 801bd2e:	4618      	mov	r0, r3
 801bd30:	f7ff feae 	bl	801ba90 <ee_skip_atoi>
 801bd34:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bd36:	f04f 33ff 	mov.w	r3, #4294967295
 801bd3a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bd3c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd40:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801bd42:	230a      	movs	r3, #10
 801bd44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	3b58      	subs	r3, #88	@ 0x58
 801bd4c:	2b20      	cmp	r3, #32
 801bd4e:	f200 8094 	bhi.w	801be7a <tiny_vsnprintf_like+0x1c2>
 801bd52:	a201      	add	r2, pc, #4	@ (adr r2, 801bd58 <tiny_vsnprintf_like+0xa0>)
 801bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd58:	0801be63 	.word	0x0801be63
 801bd5c:	0801be7b 	.word	0x0801be7b
 801bd60:	0801be7b 	.word	0x0801be7b
 801bd64:	0801be7b 	.word	0x0801be7b
 801bd68:	0801be7b 	.word	0x0801be7b
 801bd6c:	0801be7b 	.word	0x0801be7b
 801bd70:	0801be7b 	.word	0x0801be7b
 801bd74:	0801be7b 	.word	0x0801be7b
 801bd78:	0801be7b 	.word	0x0801be7b
 801bd7c:	0801be7b 	.word	0x0801be7b
 801bd80:	0801be7b 	.word	0x0801be7b
 801bd84:	0801bde7 	.word	0x0801bde7
 801bd88:	0801be71 	.word	0x0801be71
 801bd8c:	0801be7b 	.word	0x0801be7b
 801bd90:	0801be7b 	.word	0x0801be7b
 801bd94:	0801be7b 	.word	0x0801be7b
 801bd98:	0801be7b 	.word	0x0801be7b
 801bd9c:	0801be71 	.word	0x0801be71
 801bda0:	0801be7b 	.word	0x0801be7b
 801bda4:	0801be7b 	.word	0x0801be7b
 801bda8:	0801be7b 	.word	0x0801be7b
 801bdac:	0801be7b 	.word	0x0801be7b
 801bdb0:	0801be7b 	.word	0x0801be7b
 801bdb4:	0801be7b 	.word	0x0801be7b
 801bdb8:	0801be7b 	.word	0x0801be7b
 801bdbc:	0801be7b 	.word	0x0801be7b
 801bdc0:	0801be7b 	.word	0x0801be7b
 801bdc4:	0801be07 	.word	0x0801be07
 801bdc8:	0801be7b 	.word	0x0801be7b
 801bdcc:	0801bec7 	.word	0x0801bec7
 801bdd0:	0801be7b 	.word	0x0801be7b
 801bdd4:	0801be7b 	.word	0x0801be7b
 801bdd8:	0801be6b 	.word	0x0801be6b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdde:	1c5a      	adds	r2, r3, #1
 801bde0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bde2:	2220      	movs	r2, #32
 801bde4:	701a      	strb	r2, [r3, #0]
 801bde6:	69fb      	ldr	r3, [r7, #28]
 801bde8:	3b01      	subs	r3, #1
 801bdea:	61fb      	str	r3, [r7, #28]
 801bdec:	69fb      	ldr	r3, [r7, #28]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	dcf4      	bgt.n	801bddc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801bdf2:	683b      	ldr	r3, [r7, #0]
 801bdf4:	1d1a      	adds	r2, r3, #4
 801bdf6:	603a      	str	r2, [r7, #0]
 801bdf8:	6819      	ldr	r1, [r3, #0]
 801bdfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdfc:	1c5a      	adds	r2, r3, #1
 801bdfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801be00:	b2ca      	uxtb	r2, r1
 801be02:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801be04:	e08d      	b.n	801bf22 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801be06:	683b      	ldr	r3, [r7, #0]
 801be08:	1d1a      	adds	r2, r3, #4
 801be0a:	603a      	str	r2, [r7, #0]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801be10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be12:	2b00      	cmp	r3, #0
 801be14:	d101      	bne.n	801be1a <tiny_vsnprintf_like+0x162>
 801be16:	4b50      	ldr	r3, [pc, #320]	@ (801bf58 <tiny_vsnprintf_like+0x2a0>)
 801be18:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801be1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be1c:	f7e4 fa00 	bl	8000220 <strlen>
 801be20:	4603      	mov	r3, r0
 801be22:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801be24:	e004      	b.n	801be30 <tiny_vsnprintf_like+0x178>
 801be26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be28:	1c5a      	adds	r2, r3, #1
 801be2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801be2c:	2220      	movs	r2, #32
 801be2e:	701a      	strb	r2, [r3, #0]
 801be30:	69fb      	ldr	r3, [r7, #28]
 801be32:	1e5a      	subs	r2, r3, #1
 801be34:	61fa      	str	r2, [r7, #28]
 801be36:	693a      	ldr	r2, [r7, #16]
 801be38:	429a      	cmp	r2, r3
 801be3a:	dbf4      	blt.n	801be26 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801be3c:	2300      	movs	r3, #0
 801be3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801be40:	e00a      	b.n	801be58 <tiny_vsnprintf_like+0x1a0>
 801be42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be44:	1c53      	adds	r3, r2, #1
 801be46:	627b      	str	r3, [r7, #36]	@ 0x24
 801be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be4a:	1c59      	adds	r1, r3, #1
 801be4c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801be4e:	7812      	ldrb	r2, [r2, #0]
 801be50:	701a      	strb	r2, [r3, #0]
 801be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be54:	3301      	adds	r3, #1
 801be56:	62bb      	str	r3, [r7, #40]	@ 0x28
 801be58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	429a      	cmp	r2, r3
 801be5e:	dbf0      	blt.n	801be42 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801be60:	e05f      	b.n	801bf22 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801be62:	6a3b      	ldr	r3, [r7, #32]
 801be64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be68:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801be6a:	2310      	movs	r3, #16
 801be6c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801be6e:	e02b      	b.n	801bec8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801be70:	6a3b      	ldr	r3, [r7, #32]
 801be72:	f043 0302 	orr.w	r3, r3, #2
 801be76:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801be78:	e025      	b.n	801bec6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	781b      	ldrb	r3, [r3, #0]
 801be7e:	2b25      	cmp	r3, #37	@ 0x25
 801be80:	d004      	beq.n	801be8c <tiny_vsnprintf_like+0x1d4>
 801be82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be84:	1c5a      	adds	r2, r3, #1
 801be86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801be88:	2225      	movs	r2, #37	@ 0x25
 801be8a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801be8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	1ad2      	subs	r2, r2, r3
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	3b01      	subs	r3, #1
 801be96:	429a      	cmp	r2, r3
 801be98:	da16      	bge.n	801bec8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	781b      	ldrb	r3, [r3, #0]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d006      	beq.n	801beb0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801bea2:	687a      	ldr	r2, [r7, #4]
 801bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea6:	1c59      	adds	r1, r3, #1
 801bea8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801beaa:	7812      	ldrb	r2, [r2, #0]
 801beac:	701a      	strb	r2, [r3, #0]
 801beae:	e002      	b.n	801beb6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	3b01      	subs	r3, #1
 801beb4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801beb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	1ad2      	subs	r2, r2, r3
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	3b01      	subs	r3, #1
 801bec0:	429a      	cmp	r2, r3
 801bec2:	db2d      	blt.n	801bf20 <tiny_vsnprintf_like+0x268>
 801bec4:	e000      	b.n	801bec8 <tiny_vsnprintf_like+0x210>
        break;
 801bec6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	2b6c      	cmp	r3, #108	@ 0x6c
 801becc:	d105      	bne.n	801beda <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	1d1a      	adds	r2, r3, #4
 801bed2:	603a      	str	r2, [r7, #0]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	637b      	str	r3, [r7, #52]	@ 0x34
 801bed8:	e00f      	b.n	801befa <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801beda:	6a3b      	ldr	r3, [r7, #32]
 801bedc:	f003 0302 	and.w	r3, r3, #2
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d005      	beq.n	801bef0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	1d1a      	adds	r2, r3, #4
 801bee8:	603a      	str	r2, [r7, #0]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	637b      	str	r3, [r7, #52]	@ 0x34
 801beee:	e004      	b.n	801befa <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801bef0:	683b      	ldr	r3, [r7, #0]
 801bef2:	1d1a      	adds	r2, r3, #4
 801bef4:	603a      	str	r2, [r7, #0]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801befa:	68bb      	ldr	r3, [r7, #8]
 801befc:	1e5a      	subs	r2, r3, #1
 801befe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	1acb      	subs	r3, r1, r3
 801bf04:	1ad1      	subs	r1, r2, r3
 801bf06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bf08:	6a3b      	ldr	r3, [r7, #32]
 801bf0a:	9302      	str	r3, [sp, #8]
 801bf0c:	69bb      	ldr	r3, [r7, #24]
 801bf0e:	9301      	str	r3, [sp, #4]
 801bf10:	69fb      	ldr	r3, [r7, #28]
 801bf12:	9300      	str	r3, [sp, #0]
 801bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bf18:	f7ff fde0 	bl	801badc <ee_number>
 801bf1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801bf1e:	e000      	b.n	801bf22 <tiny_vsnprintf_like+0x26a>
        continue;
 801bf20:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	3301      	adds	r3, #1
 801bf26:	607b      	str	r3, [r7, #4]
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	781b      	ldrb	r3, [r3, #0]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	f47f aed2 	bne.w	801bcd6 <tiny_vsnprintf_like+0x1e>
 801bf32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	1ad2      	subs	r2, r2, r3
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	3b01      	subs	r3, #1
 801bf3c:	429a      	cmp	r2, r3
 801bf3e:	f6bf aeca 	bge.w	801bcd6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801bf42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf44:	2200      	movs	r2, #0
 801bf46:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801bf48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	1ad3      	subs	r3, r2, r3
}
 801bf4e:	4618      	mov	r0, r3
 801bf50:	3738      	adds	r7, #56	@ 0x38
 801bf52:	46bd      	mov	sp, r7
 801bf54:	bd80      	pop	{r7, pc}
 801bf56:	bf00      	nop
 801bf58:	0802020c 	.word	0x0802020c

0801bf5c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b090      	sub	sp, #64	@ 0x40
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bf64:	4b73      	ldr	r3, [pc, #460]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801bf6a:	4b72      	ldr	r3, [pc, #456]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	4013      	ands	r3, r2
 801bf72:	4a70      	ldr	r2, [pc, #448]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801bf74:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801bf76:	4b70      	ldr	r3, [pc, #448]	@ (801c138 <UTIL_SEQ_Run+0x1dc>)
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801bf7c:	4b6f      	ldr	r3, [pc, #444]	@ (801c13c <UTIL_SEQ_Run+0x1e0>)
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801bf82:	4b6f      	ldr	r3, [pc, #444]	@ (801c140 <UTIL_SEQ_Run+0x1e4>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801bf88:	4b6e      	ldr	r3, [pc, #440]	@ (801c144 <UTIL_SEQ_Run+0x1e8>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bf8e:	e08d      	b.n	801c0ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801bf90:	2300      	movs	r3, #0
 801bf92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bf94:	e002      	b.n	801bf9c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801bf96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf98:	3301      	adds	r3, #1
 801bf9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bf9c:	4a6a      	ldr	r2, [pc, #424]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801bf9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfa6:	401a      	ands	r2, r3
 801bfa8:	4b62      	ldr	r3, [pc, #392]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	4013      	ands	r3, r2
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d0f1      	beq.n	801bf96 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801bfb2:	4a65      	ldr	r2, [pc, #404]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801bfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfb6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfbc:	401a      	ands	r2, r3
 801bfbe:	4b5d      	ldr	r3, [pc, #372]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	4013      	ands	r3, r2
 801bfc4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bfc6:	4a60      	ldr	r2, [pc, #384]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801bfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfca:	00db      	lsls	r3, r3, #3
 801bfcc:	4413      	add	r3, r2
 801bfce:	685a      	ldr	r2, [r3, #4]
 801bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfd2:	4013      	ands	r3, r2
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d106      	bne.n	801bfe6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801bfd8:	4a5b      	ldr	r2, [pc, #364]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801bfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfdc:	00db      	lsls	r3, r3, #3
 801bfde:	4413      	add	r3, r2
 801bfe0:	f04f 32ff 	mov.w	r2, #4294967295
 801bfe4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801bfe6:	4a58      	ldr	r2, [pc, #352]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801bfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	4413      	add	r3, r2
 801bfee:	685a      	ldr	r2, [r3, #4]
 801bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bff2:	4013      	ands	r3, r2
 801bff4:	4618      	mov	r0, r3
 801bff6:	f000 f907 	bl	801c208 <SEQ_BitPosition>
 801bffa:	4603      	mov	r3, r0
 801bffc:	461a      	mov	r2, r3
 801bffe:	4b53      	ldr	r3, [pc, #332]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c000:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c002:	4a51      	ldr	r2, [pc, #324]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801c004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c006:	00db      	lsls	r3, r3, #3
 801c008:	4413      	add	r3, r2
 801c00a:	685a      	ldr	r2, [r3, #4]
 801c00c:	4b4f      	ldr	r3, [pc, #316]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	2101      	movs	r1, #1
 801c012:	fa01 f303 	lsl.w	r3, r1, r3
 801c016:	43db      	mvns	r3, r3
 801c018:	401a      	ands	r2, r3
 801c01a:	494b      	ldr	r1, [pc, #300]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801c01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c01e:	00db      	lsls	r3, r3, #3
 801c020:	440b      	add	r3, r1
 801c022:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c024:	f3ef 8310 	mrs	r3, PRIMASK
 801c028:	61bb      	str	r3, [r7, #24]
  return(result);
 801c02a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c02c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c02e:	b672      	cpsid	i
}
 801c030:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c032:	4b46      	ldr	r3, [pc, #280]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	2201      	movs	r2, #1
 801c038:	fa02 f303 	lsl.w	r3, r2, r3
 801c03c:	43da      	mvns	r2, r3
 801c03e:	4b3e      	ldr	r3, [pc, #248]	@ (801c138 <UTIL_SEQ_Run+0x1dc>)
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	4013      	ands	r3, r2
 801c044:	4a3c      	ldr	r2, [pc, #240]	@ (801c138 <UTIL_SEQ_Run+0x1dc>)
 801c046:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c048:	2301      	movs	r3, #1
 801c04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c04c:	e013      	b.n	801c076 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c050:	3b01      	subs	r3, #1
 801c052:	4a3d      	ldr	r2, [pc, #244]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801c054:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c058:	4b3c      	ldr	r3, [pc, #240]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	2201      	movs	r2, #1
 801c05e:	fa02 f303 	lsl.w	r3, r2, r3
 801c062:	43da      	mvns	r2, r3
 801c064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c066:	3b01      	subs	r3, #1
 801c068:	400a      	ands	r2, r1
 801c06a:	4937      	ldr	r1, [pc, #220]	@ (801c148 <UTIL_SEQ_Run+0x1ec>)
 801c06c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c072:	3b01      	subs	r3, #1
 801c074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d1e8      	bne.n	801c04e <UTIL_SEQ_Run+0xf2>
 801c07c:	6a3b      	ldr	r3, [r7, #32]
 801c07e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c080:	697b      	ldr	r3, [r7, #20]
 801c082:	f383 8810 	msr	PRIMASK, r3
}
 801c086:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c088:	4b30      	ldr	r3, [pc, #192]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	4a30      	ldr	r2, [pc, #192]	@ (801c150 <UTIL_SEQ_Run+0x1f4>)
 801c08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c092:	4798      	blx	r3

    local_taskset = TaskSet;
 801c094:	4b28      	ldr	r3, [pc, #160]	@ (801c138 <UTIL_SEQ_Run+0x1dc>)
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c09a:	4b28      	ldr	r3, [pc, #160]	@ (801c13c <UTIL_SEQ_Run+0x1e0>)
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c0a0:	4b27      	ldr	r3, [pc, #156]	@ (801c140 <UTIL_SEQ_Run+0x1e4>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c0a6:	4b27      	ldr	r3, [pc, #156]	@ (801c144 <UTIL_SEQ_Run+0x1e8>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c0ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0b0:	401a      	ands	r2, r3
 801c0b2:	4b20      	ldr	r3, [pc, #128]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	4013      	ands	r3, r2
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d005      	beq.n	801c0c8 <UTIL_SEQ_Run+0x16c>
 801c0bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0c0:	4013      	ands	r3, r2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	f43f af64 	beq.w	801bf90 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c0c8:	4b20      	ldr	r3, [pc, #128]	@ (801c14c <UTIL_SEQ_Run+0x1f0>)
 801c0ca:	f04f 32ff 	mov.w	r2, #4294967295
 801c0ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c0d0:	f000 f88e 	bl	801c1f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0d4:	f3ef 8310 	mrs	r3, PRIMASK
 801c0d8:	613b      	str	r3, [r7, #16]
  return(result);
 801c0da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c0dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0de:	b672      	cpsid	i
}
 801c0e0:	bf00      	nop
  local_taskset = TaskSet;
 801c0e2:	4b15      	ldr	r3, [pc, #84]	@ (801c138 <UTIL_SEQ_Run+0x1dc>)
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c0e8:	4b14      	ldr	r3, [pc, #80]	@ (801c13c <UTIL_SEQ_Run+0x1e0>)
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c0ee:	4b14      	ldr	r3, [pc, #80]	@ (801c140 <UTIL_SEQ_Run+0x1e4>)
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0f8:	401a      	ands	r2, r3
 801c0fa:	4b0e      	ldr	r3, [pc, #56]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	4013      	ands	r3, r2
 801c100:	2b00      	cmp	r3, #0
 801c102:	d107      	bne.n	801c114 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c104:	4b0f      	ldr	r3, [pc, #60]	@ (801c144 <UTIL_SEQ_Run+0x1e8>)
 801c106:	681a      	ldr	r2, [r3, #0]
 801c108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c10a:	4013      	ands	r3, r2
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d101      	bne.n	801c114 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c110:	f7e6 fa8e 	bl	8002630 <UTIL_SEQ_Idle>
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	f383 8810 	msr	PRIMASK, r3
}
 801c11e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c120:	f000 f86c 	bl	801c1fc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c124:	4a03      	ldr	r2, [pc, #12]	@ (801c134 <UTIL_SEQ_Run+0x1d8>)
 801c126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c128:	6013      	str	r3, [r2, #0]

  return;
 801c12a:	bf00      	nop
}
 801c12c:	3740      	adds	r7, #64	@ 0x40
 801c12e:	46bd      	mov	sp, r7
 801c130:	bd80      	pop	{r7, pc}
 801c132:	bf00      	nop
 801c134:	2000013c 	.word	0x2000013c
 801c138:	20001d74 	.word	0x20001d74
 801c13c:	20001d78 	.word	0x20001d78
 801c140:	20000138 	.word	0x20000138
 801c144:	20001d7c 	.word	0x20001d7c
 801c148:	20001d94 	.word	0x20001d94
 801c14c:	20001d80 	.word	0x20001d80
 801c150:	20001d84 	.word	0x20001d84

0801c154 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b088      	sub	sp, #32
 801c158:	af00      	add	r7, sp, #0
 801c15a:	60f8      	str	r0, [r7, #12]
 801c15c:	60b9      	str	r1, [r7, #8]
 801c15e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c160:	f3ef 8310 	mrs	r3, PRIMASK
 801c164:	617b      	str	r3, [r7, #20]
  return(result);
 801c166:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c16a:	b672      	cpsid	i
}
 801c16c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c16e:	68f8      	ldr	r0, [r7, #12]
 801c170:	f000 f84a 	bl	801c208 <SEQ_BitPosition>
 801c174:	4603      	mov	r3, r0
 801c176:	4619      	mov	r1, r3
 801c178:	4a06      	ldr	r2, [pc, #24]	@ (801c194 <UTIL_SEQ_RegTask+0x40>)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c180:	69fb      	ldr	r3, [r7, #28]
 801c182:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c184:	69bb      	ldr	r3, [r7, #24]
 801c186:	f383 8810 	msr	PRIMASK, r3
}
 801c18a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c18c:	bf00      	nop
}
 801c18e:	3720      	adds	r7, #32
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}
 801c194:	20001d84 	.word	0x20001d84

0801c198 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c198:	b480      	push	{r7}
 801c19a:	b087      	sub	sp, #28
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
 801c1a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1a2:	f3ef 8310 	mrs	r3, PRIMASK
 801c1a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c1aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1ac:	b672      	cpsid	i
}
 801c1ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c1b0:	4b0d      	ldr	r3, [pc, #52]	@ (801c1e8 <UTIL_SEQ_SetTask+0x50>)
 801c1b2:	681a      	ldr	r2, [r3, #0]
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	4313      	orrs	r3, r2
 801c1b8:	4a0b      	ldr	r2, [pc, #44]	@ (801c1e8 <UTIL_SEQ_SetTask+0x50>)
 801c1ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c1bc:	4a0b      	ldr	r2, [pc, #44]	@ (801c1ec <UTIL_SEQ_SetTask+0x54>)
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	431a      	orrs	r2, r3
 801c1c8:	4908      	ldr	r1, [pc, #32]	@ (801c1ec <UTIL_SEQ_SetTask+0x54>)
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	f383 8810 	msr	PRIMASK, r3
}
 801c1da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c1dc:	bf00      	nop
}
 801c1de:	371c      	adds	r7, #28
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bc80      	pop	{r7}
 801c1e4:	4770      	bx	lr
 801c1e6:	bf00      	nop
 801c1e8:	20001d74 	.word	0x20001d74
 801c1ec:	20001d94 	.word	0x20001d94

0801c1f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c1f4:	bf00      	nop
}
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	bc80      	pop	{r7}
 801c1fa:	4770      	bx	lr

0801c1fc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c200:	bf00      	nop
}
 801c202:	46bd      	mov	sp, r7
 801c204:	bc80      	pop	{r7}
 801c206:	4770      	bx	lr

0801c208 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c208:	b480      	push	{r7}
 801c20a:	b085      	sub	sp, #20
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c210:	2300      	movs	r3, #0
 801c212:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c21e:	d204      	bcs.n	801c22a <SEQ_BitPosition+0x22>
 801c220:	2310      	movs	r3, #16
 801c222:	73fb      	strb	r3, [r7, #15]
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	041b      	lsls	r3, r3, #16
 801c228:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c22a:	68bb      	ldr	r3, [r7, #8]
 801c22c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c230:	d205      	bcs.n	801c23e <SEQ_BitPosition+0x36>
 801c232:	7bfb      	ldrb	r3, [r7, #15]
 801c234:	3308      	adds	r3, #8
 801c236:	73fb      	strb	r3, [r7, #15]
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	021b      	lsls	r3, r3, #8
 801c23c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c23e:	68bb      	ldr	r3, [r7, #8]
 801c240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c244:	d205      	bcs.n	801c252 <SEQ_BitPosition+0x4a>
 801c246:	7bfb      	ldrb	r3, [r7, #15]
 801c248:	3304      	adds	r3, #4
 801c24a:	73fb      	strb	r3, [r7, #15]
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	011b      	lsls	r3, r3, #4
 801c250:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	0f1b      	lsrs	r3, r3, #28
 801c256:	4a07      	ldr	r2, [pc, #28]	@ (801c274 <SEQ_BitPosition+0x6c>)
 801c258:	5cd2      	ldrb	r2, [r2, r3]
 801c25a:	7bfb      	ldrb	r3, [r7, #15]
 801c25c:	4413      	add	r3, r2
 801c25e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c260:	7bfb      	ldrb	r3, [r7, #15]
 801c262:	f1c3 031f 	rsb	r3, r3, #31
 801c266:	b2db      	uxtb	r3, r3
}
 801c268:	4618      	mov	r0, r3
 801c26a:	3714      	adds	r7, #20
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bc80      	pop	{r7}
 801c270:	4770      	bx	lr
 801c272:	bf00      	nop
 801c274:	0802084c 	.word	0x0802084c

0801c278 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c278:	b580      	push	{r7, lr}
 801c27a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c27c:	4b04      	ldr	r3, [pc, #16]	@ (801c290 <UTIL_TIMER_Init+0x18>)
 801c27e:	2200      	movs	r2, #0
 801c280:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c282:	4b04      	ldr	r3, [pc, #16]	@ (801c294 <UTIL_TIMER_Init+0x1c>)
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	4798      	blx	r3
 801c288:	4603      	mov	r3, r0
}
 801c28a:	4618      	mov	r0, r3
 801c28c:	bd80      	pop	{r7, pc}
 801c28e:	bf00      	nop
 801c290:	20001d9c 	.word	0x20001d9c
 801c294:	080202cc 	.word	0x080202cc

0801c298 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b084      	sub	sp, #16
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	60f8      	str	r0, [r7, #12]
 801c2a0:	60b9      	str	r1, [r7, #8]
 801c2a2:	603b      	str	r3, [r7, #0]
 801c2a4:	4613      	mov	r3, r2
 801c2a6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d023      	beq.n	801c2f6 <UTIL_TIMER_Create+0x5e>
 801c2ae:	683b      	ldr	r3, [r7, #0]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d020      	beq.n	801c2f6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c2ba:	4b11      	ldr	r3, [pc, #68]	@ (801c300 <UTIL_TIMER_Create+0x68>)
 801c2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2be:	68b8      	ldr	r0, [r7, #8]
 801c2c0:	4798      	blx	r3
 801c2c2:	4602      	mov	r2, r0
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	683a      	ldr	r2, [r7, #0]
 801c2de:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	69ba      	ldr	r2, [r7, #24]
 801c2e4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	79fa      	ldrb	r2, [r7, #7]
 801c2ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	e000      	b.n	801c2f8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c2f6:	2301      	movs	r3, #1
  }
}
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	3710      	adds	r7, #16
 801c2fc:	46bd      	mov	sp, r7
 801c2fe:	bd80      	pop	{r7, pc}
 801c300:	080202cc 	.word	0x080202cc

0801c304 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c304:	b580      	push	{r7, lr}
 801c306:	b08a      	sub	sp, #40	@ 0x28
 801c308:	af00      	add	r7, sp, #0
 801c30a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c30c:	2300      	movs	r3, #0
 801c30e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d056      	beq.n	801c3c6 <UTIL_TIMER_Start+0xc2>
 801c318:	6878      	ldr	r0, [r7, #4]
 801c31a:	f000 f9a9 	bl	801c670 <TimerExists>
 801c31e:	4603      	mov	r3, r0
 801c320:	f083 0301 	eor.w	r3, r3, #1
 801c324:	b2db      	uxtb	r3, r3
 801c326:	2b00      	cmp	r3, #0
 801c328:	d04d      	beq.n	801c3c6 <UTIL_TIMER_Start+0xc2>
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	7a5b      	ldrb	r3, [r3, #9]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d149      	bne.n	801c3c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c332:	f3ef 8310 	mrs	r3, PRIMASK
 801c336:	613b      	str	r3, [r7, #16]
  return(result);
 801c338:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c33a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c33c:	b672      	cpsid	i
}
 801c33e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c346:	4b24      	ldr	r3, [pc, #144]	@ (801c3d8 <UTIL_TIMER_Start+0xd4>)
 801c348:	6a1b      	ldr	r3, [r3, #32]
 801c34a:	4798      	blx	r3
 801c34c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c34e:	6a3a      	ldr	r2, [r7, #32]
 801c350:	69bb      	ldr	r3, [r7, #24]
 801c352:	429a      	cmp	r2, r3
 801c354:	d201      	bcs.n	801c35a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c356:	69bb      	ldr	r3, [r7, #24]
 801c358:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	6a3a      	ldr	r2, [r7, #32]
 801c35e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	2200      	movs	r2, #0
 801c364:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	2201      	movs	r2, #1
 801c36a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	2200      	movs	r2, #0
 801c370:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c372:	4b1a      	ldr	r3, [pc, #104]	@ (801c3dc <UTIL_TIMER_Start+0xd8>)
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d106      	bne.n	801c388 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c37a:	4b17      	ldr	r3, [pc, #92]	@ (801c3d8 <UTIL_TIMER_Start+0xd4>)
 801c37c:	691b      	ldr	r3, [r3, #16]
 801c37e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c380:	6878      	ldr	r0, [r7, #4]
 801c382:	f000 f9eb 	bl	801c75c <TimerInsertNewHeadTimer>
 801c386:	e017      	b.n	801c3b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c388:	4b13      	ldr	r3, [pc, #76]	@ (801c3d8 <UTIL_TIMER_Start+0xd4>)
 801c38a:	699b      	ldr	r3, [r3, #24]
 801c38c:	4798      	blx	r3
 801c38e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	681a      	ldr	r2, [r3, #0]
 801c394:	697b      	ldr	r3, [r7, #20]
 801c396:	441a      	add	r2, r3
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681a      	ldr	r2, [r3, #0]
 801c3a0:	4b0e      	ldr	r3, [pc, #56]	@ (801c3dc <UTIL_TIMER_Start+0xd8>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	429a      	cmp	r2, r3
 801c3a8:	d203      	bcs.n	801c3b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c3aa:	6878      	ldr	r0, [r7, #4]
 801c3ac:	f000 f9d6 	bl	801c75c <TimerInsertNewHeadTimer>
 801c3b0:	e002      	b.n	801c3b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c3b2:	6878      	ldr	r0, [r7, #4]
 801c3b4:	f000 f9a2 	bl	801c6fc <TimerInsertTimer>
 801c3b8:	69fb      	ldr	r3, [r7, #28]
 801c3ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	f383 8810 	msr	PRIMASK, r3
}
 801c3c2:	bf00      	nop
  {
 801c3c4:	e002      	b.n	801c3cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c3c6:	2301      	movs	r3, #1
 801c3c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	3728      	adds	r7, #40	@ 0x28
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	080202cc 	.word	0x080202cc
 801c3dc:	20001d9c 	.word	0x20001d9c

0801c3e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b088      	sub	sp, #32
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d05b      	beq.n	801c4aa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3f2:	f3ef 8310 	mrs	r3, PRIMASK
 801c3f6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c3f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3fc:	b672      	cpsid	i
}
 801c3fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c400:	4b2d      	ldr	r3, [pc, #180]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c406:	4b2c      	ldr	r3, [pc, #176]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	2201      	movs	r2, #1
 801c410:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c412:	4b29      	ldr	r3, [pc, #164]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d041      	beq.n	801c49e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	2200      	movs	r2, #0
 801c41e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c420:	4b25      	ldr	r3, [pc, #148]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	687a      	ldr	r2, [r7, #4]
 801c426:	429a      	cmp	r2, r3
 801c428:	d134      	bne.n	801c494 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c42a:	4b23      	ldr	r3, [pc, #140]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	2200      	movs	r2, #0
 801c430:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c432:	4b21      	ldr	r3, [pc, #132]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	695b      	ldr	r3, [r3, #20]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d00a      	beq.n	801c452 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c43c:	4b1e      	ldr	r3, [pc, #120]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	695b      	ldr	r3, [r3, #20]
 801c442:	4a1d      	ldr	r2, [pc, #116]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c444:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c446:	4b1c      	ldr	r3, [pc, #112]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	4618      	mov	r0, r3
 801c44c:	f000 f92c 	bl	801c6a8 <TimerSetTimeout>
 801c450:	e023      	b.n	801c49a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c452:	4b1a      	ldr	r3, [pc, #104]	@ (801c4bc <UTIL_TIMER_Stop+0xdc>)
 801c454:	68db      	ldr	r3, [r3, #12]
 801c456:	4798      	blx	r3
            TimerListHead = NULL;
 801c458:	4b17      	ldr	r3, [pc, #92]	@ (801c4b8 <UTIL_TIMER_Stop+0xd8>)
 801c45a:	2200      	movs	r2, #0
 801c45c:	601a      	str	r2, [r3, #0]
 801c45e:	e01c      	b.n	801c49a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c460:	697a      	ldr	r2, [r7, #20]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	429a      	cmp	r2, r3
 801c466:	d110      	bne.n	801c48a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c468:	697b      	ldr	r3, [r7, #20]
 801c46a:	695b      	ldr	r3, [r3, #20]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d006      	beq.n	801c47e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c470:	697b      	ldr	r3, [r7, #20]
 801c472:	695b      	ldr	r3, [r3, #20]
 801c474:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c476:	69bb      	ldr	r3, [r7, #24]
 801c478:	697a      	ldr	r2, [r7, #20]
 801c47a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c47c:	e00d      	b.n	801c49a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c47e:	2300      	movs	r3, #0
 801c480:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c482:	69bb      	ldr	r3, [r7, #24]
 801c484:	697a      	ldr	r2, [r7, #20]
 801c486:	615a      	str	r2, [r3, #20]
            break;
 801c488:	e007      	b.n	801c49a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c48a:	697b      	ldr	r3, [r7, #20]
 801c48c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c48e:	697b      	ldr	r3, [r7, #20]
 801c490:	695b      	ldr	r3, [r3, #20]
 801c492:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c494:	697b      	ldr	r3, [r7, #20]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d1e2      	bne.n	801c460 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c49a:	2300      	movs	r3, #0
 801c49c:	77fb      	strb	r3, [r7, #31]
 801c49e:	693b      	ldr	r3, [r7, #16]
 801c4a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4a2:	68bb      	ldr	r3, [r7, #8]
 801c4a4:	f383 8810 	msr	PRIMASK, r3
}
 801c4a8:	e001      	b.n	801c4ae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c4aa:	2301      	movs	r3, #1
 801c4ac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c4ae:	7ffb      	ldrb	r3, [r7, #31]
}
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	3720      	adds	r7, #32
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	20001d9c 	.word	0x20001d9c
 801c4bc:	080202cc 	.word	0x080202cc

0801c4c0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b084      	sub	sp, #16
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d102      	bne.n	801c4da <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c4d4:	2301      	movs	r3, #1
 801c4d6:	73fb      	strb	r3, [r7, #15]
 801c4d8:	e014      	b.n	801c504 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c4da:	4b0d      	ldr	r3, [pc, #52]	@ (801c510 <UTIL_TIMER_SetPeriod+0x50>)
 801c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c4de:	6838      	ldr	r0, [r7, #0]
 801c4e0:	4798      	blx	r3
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c4e8:	6878      	ldr	r0, [r7, #4]
 801c4ea:	f000 f8c1 	bl	801c670 <TimerExists>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d007      	beq.n	801c504 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c4f4:	6878      	ldr	r0, [r7, #4]
 801c4f6:	f7ff ff73 	bl	801c3e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c4fa:	6878      	ldr	r0, [r7, #4]
 801c4fc:	f7ff ff02 	bl	801c304 <UTIL_TIMER_Start>
 801c500:	4603      	mov	r3, r0
 801c502:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c504:	7bfb      	ldrb	r3, [r7, #15]
}
 801c506:	4618      	mov	r0, r3
 801c508:	3710      	adds	r7, #16
 801c50a:	46bd      	mov	sp, r7
 801c50c:	bd80      	pop	{r7, pc}
 801c50e:	bf00      	nop
 801c510:	080202cc 	.word	0x080202cc

0801c514 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c514:	b590      	push	{r4, r7, lr}
 801c516:	b089      	sub	sp, #36	@ 0x24
 801c518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c51a:	f3ef 8310 	mrs	r3, PRIMASK
 801c51e:	60bb      	str	r3, [r7, #8]
  return(result);
 801c520:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c524:	b672      	cpsid	i
}
 801c526:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c528:	4b38      	ldr	r3, [pc, #224]	@ (801c60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c52a:	695b      	ldr	r3, [r3, #20]
 801c52c:	4798      	blx	r3
 801c52e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c530:	4b36      	ldr	r3, [pc, #216]	@ (801c60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c532:	691b      	ldr	r3, [r3, #16]
 801c534:	4798      	blx	r3
 801c536:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c538:	693a      	ldr	r2, [r7, #16]
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	1ad3      	subs	r3, r2, r3
 801c53e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c540:	4b33      	ldr	r3, [pc, #204]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d037      	beq.n	801c5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c548:	4b31      	ldr	r3, [pc, #196]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c54e:	69fb      	ldr	r3, [r7, #28]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	68fa      	ldr	r2, [r7, #12]
 801c554:	429a      	cmp	r2, r3
 801c556:	d206      	bcs.n	801c566 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c558:	69fb      	ldr	r3, [r7, #28]
 801c55a:	681a      	ldr	r2, [r3, #0]
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	1ad2      	subs	r2, r2, r3
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	601a      	str	r2, [r3, #0]
 801c564:	e002      	b.n	801c56c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c566:	69fb      	ldr	r3, [r7, #28]
 801c568:	2200      	movs	r2, #0
 801c56a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c56c:	69fb      	ldr	r3, [r7, #28]
 801c56e:	695b      	ldr	r3, [r3, #20]
 801c570:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c572:	69fb      	ldr	r3, [r7, #28]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d1ea      	bne.n	801c54e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c578:	e01e      	b.n	801c5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c57a:	4b25      	ldr	r3, [pc, #148]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c580:	4b23      	ldr	r3, [pc, #140]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	695b      	ldr	r3, [r3, #20]
 801c586:	4a22      	ldr	r2, [pc, #136]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c588:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c58a:	69fb      	ldr	r3, [r7, #28]
 801c58c:	2200      	movs	r2, #0
 801c58e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	2200      	movs	r2, #0
 801c594:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c596:	69fb      	ldr	r3, [r7, #28]
 801c598:	68db      	ldr	r3, [r3, #12]
 801c59a:	69fa      	ldr	r2, [r7, #28]
 801c59c:	6912      	ldr	r2, [r2, #16]
 801c59e:	4610      	mov	r0, r2
 801c5a0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c5a2:	69fb      	ldr	r3, [r7, #28]
 801c5a4:	7adb      	ldrb	r3, [r3, #11]
 801c5a6:	2b01      	cmp	r3, #1
 801c5a8:	d106      	bne.n	801c5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	7a9b      	ldrb	r3, [r3, #10]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d102      	bne.n	801c5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c5b2:	69f8      	ldr	r0, [r7, #28]
 801c5b4:	f7ff fea6 	bl	801c304 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c5b8:	4b15      	ldr	r3, [pc, #84]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d00d      	beq.n	801c5dc <UTIL_TIMER_IRQ_Handler+0xc8>
 801c5c0:	4b13      	ldr	r3, [pc, #76]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d0d7      	beq.n	801c57a <UTIL_TIMER_IRQ_Handler+0x66>
 801c5ca:	4b11      	ldr	r3, [pc, #68]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	681c      	ldr	r4, [r3, #0]
 801c5d0:	4b0e      	ldr	r3, [pc, #56]	@ (801c60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c5d2:	699b      	ldr	r3, [r3, #24]
 801c5d4:	4798      	blx	r3
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	429c      	cmp	r4, r3
 801c5da:	d3ce      	bcc.n	801c57a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c5dc:	4b0c      	ldr	r3, [pc, #48]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d009      	beq.n	801c5f8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c5e4:	4b0a      	ldr	r3, [pc, #40]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	7a1b      	ldrb	r3, [r3, #8]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d104      	bne.n	801c5f8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c5ee:	4b08      	ldr	r3, [pc, #32]	@ (801c610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f000 f858 	bl	801c6a8 <TimerSetTimeout>
 801c5f8:	69bb      	ldr	r3, [r7, #24]
 801c5fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	f383 8810 	msr	PRIMASK, r3
}
 801c602:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c604:	bf00      	nop
 801c606:	3724      	adds	r7, #36	@ 0x24
 801c608:	46bd      	mov	sp, r7
 801c60a:	bd90      	pop	{r4, r7, pc}
 801c60c:	080202cc 	.word	0x080202cc
 801c610:	20001d9c 	.word	0x20001d9c

0801c614 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b082      	sub	sp, #8
 801c618:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c61a:	4b06      	ldr	r3, [pc, #24]	@ (801c634 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c61c:	69db      	ldr	r3, [r3, #28]
 801c61e:	4798      	blx	r3
 801c620:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c622:	4b04      	ldr	r3, [pc, #16]	@ (801c634 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c626:	6878      	ldr	r0, [r7, #4]
 801c628:	4798      	blx	r3
 801c62a:	4603      	mov	r3, r0
}
 801c62c:	4618      	mov	r0, r3
 801c62e:	3708      	adds	r7, #8
 801c630:	46bd      	mov	sp, r7
 801c632:	bd80      	pop	{r7, pc}
 801c634:	080202cc 	.word	0x080202cc

0801c638 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c638:	b580      	push	{r7, lr}
 801c63a:	b084      	sub	sp, #16
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c640:	4b0a      	ldr	r3, [pc, #40]	@ (801c66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c642:	69db      	ldr	r3, [r3, #28]
 801c644:	4798      	blx	r3
 801c646:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c648:	4b08      	ldr	r3, [pc, #32]	@ (801c66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	4798      	blx	r3
 801c650:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c652:	4b06      	ldr	r3, [pc, #24]	@ (801c66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c656:	68f9      	ldr	r1, [r7, #12]
 801c658:	68ba      	ldr	r2, [r7, #8]
 801c65a:	1a8a      	subs	r2, r1, r2
 801c65c:	4610      	mov	r0, r2
 801c65e:	4798      	blx	r3
 801c660:	4603      	mov	r3, r0
}
 801c662:	4618      	mov	r0, r3
 801c664:	3710      	adds	r7, #16
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
 801c66a:	bf00      	nop
 801c66c:	080202cc 	.word	0x080202cc

0801c670 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c670:	b480      	push	{r7}
 801c672:	b085      	sub	sp, #20
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c678:	4b0a      	ldr	r3, [pc, #40]	@ (801c6a4 <TimerExists+0x34>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c67e:	e008      	b.n	801c692 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c680:	68fa      	ldr	r2, [r7, #12]
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	429a      	cmp	r2, r3
 801c686:	d101      	bne.n	801c68c <TimerExists+0x1c>
    {
      return true;
 801c688:	2301      	movs	r3, #1
 801c68a:	e006      	b.n	801c69a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	695b      	ldr	r3, [r3, #20]
 801c690:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d1f3      	bne.n	801c680 <TimerExists+0x10>
  }
  return false;
 801c698:	2300      	movs	r3, #0
}
 801c69a:	4618      	mov	r0, r3
 801c69c:	3714      	adds	r7, #20
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	bc80      	pop	{r7}
 801c6a2:	4770      	bx	lr
 801c6a4:	20001d9c 	.word	0x20001d9c

0801c6a8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c6a8:	b590      	push	{r4, r7, lr}
 801c6aa:	b085      	sub	sp, #20
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c6b0:	4b11      	ldr	r3, [pc, #68]	@ (801c6f8 <TimerSetTimeout+0x50>)
 801c6b2:	6a1b      	ldr	r3, [r3, #32]
 801c6b4:	4798      	blx	r3
 801c6b6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	2201      	movs	r2, #1
 801c6bc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	681c      	ldr	r4, [r3, #0]
 801c6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801c6f8 <TimerSetTimeout+0x50>)
 801c6c4:	699b      	ldr	r3, [r3, #24]
 801c6c6:	4798      	blx	r3
 801c6c8:	4602      	mov	r2, r0
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	4413      	add	r3, r2
 801c6ce:	429c      	cmp	r4, r3
 801c6d0:	d207      	bcs.n	801c6e2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c6d2:	4b09      	ldr	r3, [pc, #36]	@ (801c6f8 <TimerSetTimeout+0x50>)
 801c6d4:	699b      	ldr	r3, [r3, #24]
 801c6d6:	4798      	blx	r3
 801c6d8:	4602      	mov	r2, r0
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	441a      	add	r2, r3
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c6e2:	4b05      	ldr	r3, [pc, #20]	@ (801c6f8 <TimerSetTimeout+0x50>)
 801c6e4:	689b      	ldr	r3, [r3, #8]
 801c6e6:	687a      	ldr	r2, [r7, #4]
 801c6e8:	6812      	ldr	r2, [r2, #0]
 801c6ea:	4610      	mov	r0, r2
 801c6ec:	4798      	blx	r3
}
 801c6ee:	bf00      	nop
 801c6f0:	3714      	adds	r7, #20
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	bd90      	pop	{r4, r7, pc}
 801c6f6:	bf00      	nop
 801c6f8:	080202cc 	.word	0x080202cc

0801c6fc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c6fc:	b480      	push	{r7}
 801c6fe:	b085      	sub	sp, #20
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c704:	4b14      	ldr	r3, [pc, #80]	@ (801c758 <TimerInsertTimer+0x5c>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c70a:	4b13      	ldr	r3, [pc, #76]	@ (801c758 <TimerInsertTimer+0x5c>)
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	695b      	ldr	r3, [r3, #20]
 801c710:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c712:	e012      	b.n	801c73a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	681a      	ldr	r2, [r3, #0]
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	429a      	cmp	r2, r3
 801c71e:	d905      	bls.n	801c72c <TimerInsertTimer+0x30>
    {
        cur = next;
 801c720:	68bb      	ldr	r3, [r7, #8]
 801c722:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	695b      	ldr	r3, [r3, #20]
 801c728:	60bb      	str	r3, [r7, #8]
 801c72a:	e006      	b.n	801c73a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	687a      	ldr	r2, [r7, #4]
 801c730:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	68ba      	ldr	r2, [r7, #8]
 801c736:	615a      	str	r2, [r3, #20]
        return;
 801c738:	e009      	b.n	801c74e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	695b      	ldr	r3, [r3, #20]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d1e8      	bne.n	801c714 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	687a      	ldr	r2, [r7, #4]
 801c746:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2200      	movs	r2, #0
 801c74c:	615a      	str	r2, [r3, #20]
}
 801c74e:	3714      	adds	r7, #20
 801c750:	46bd      	mov	sp, r7
 801c752:	bc80      	pop	{r7}
 801c754:	4770      	bx	lr
 801c756:	bf00      	nop
 801c758:	20001d9c 	.word	0x20001d9c

0801c75c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c75c:	b580      	push	{r7, lr}
 801c75e:	b084      	sub	sp, #16
 801c760:	af00      	add	r7, sp, #0
 801c762:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c764:	4b0b      	ldr	r3, [pc, #44]	@ (801c794 <TimerInsertNewHeadTimer+0x38>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d002      	beq.n	801c776 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	2200      	movs	r2, #0
 801c774:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	68fa      	ldr	r2, [r7, #12]
 801c77a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c77c:	4a05      	ldr	r2, [pc, #20]	@ (801c794 <TimerInsertNewHeadTimer+0x38>)
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c782:	4b04      	ldr	r3, [pc, #16]	@ (801c794 <TimerInsertNewHeadTimer+0x38>)
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	4618      	mov	r0, r3
 801c788:	f7ff ff8e 	bl	801c6a8 <TimerSetTimeout>
}
 801c78c:	bf00      	nop
 801c78e:	3710      	adds	r7, #16
 801c790:	46bd      	mov	sp, r7
 801c792:	bd80      	pop	{r7, pc}
 801c794:	20001d9c 	.word	0x20001d9c

0801c798 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c79c:	2218      	movs	r2, #24
 801c79e:	2100      	movs	r1, #0
 801c7a0:	4807      	ldr	r0, [pc, #28]	@ (801c7c0 <UTIL_ADV_TRACE_Init+0x28>)
 801c7a2:	f7fe fffc 	bl	801b79e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c7a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	4805      	ldr	r0, [pc, #20]	@ (801c7c4 <UTIL_ADV_TRACE_Init+0x2c>)
 801c7ae:	f7fe fff6 	bl	801b79e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c7b2:	4b05      	ldr	r3, [pc, #20]	@ (801c7c8 <UTIL_ADV_TRACE_Init+0x30>)
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	4805      	ldr	r0, [pc, #20]	@ (801c7cc <UTIL_ADV_TRACE_Init+0x34>)
 801c7b8:	4798      	blx	r3
 801c7ba:	4603      	mov	r3, r0
}
 801c7bc:	4618      	mov	r0, r3
 801c7be:	bd80      	pop	{r7, pc}
 801c7c0:	20001da0 	.word	0x20001da0
 801c7c4:	20001db8 	.word	0x20001db8
 801c7c8:	0802030c 	.word	0x0802030c
 801c7cc:	0801ca39 	.word	0x0801ca39

0801c7d0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c7d0:	b480      	push	{r7}
 801c7d2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c7d4:	4b06      	ldr	r3, [pc, #24]	@ (801c7f0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c7d6:	8a5a      	ldrh	r2, [r3, #18]
 801c7d8:	4b05      	ldr	r3, [pc, #20]	@ (801c7f0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c7da:	8a1b      	ldrh	r3, [r3, #16]
 801c7dc:	429a      	cmp	r2, r3
 801c7de:	d101      	bne.n	801c7e4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	e000      	b.n	801c7e6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c7e4:	2300      	movs	r3, #0
}
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	bc80      	pop	{r7}
 801c7ec:	4770      	bx	lr
 801c7ee:	bf00      	nop
 801c7f0:	20001da0 	.word	0x20001da0

0801c7f4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c7f4:	b408      	push	{r3}
 801c7f6:	b580      	push	{r7, lr}
 801c7f8:	b08d      	sub	sp, #52	@ 0x34
 801c7fa:	af00      	add	r7, sp, #0
 801c7fc:	60f8      	str	r0, [r7, #12]
 801c7fe:	60b9      	str	r1, [r7, #8]
 801c800:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c802:	2300      	movs	r3, #0
 801c804:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c806:	2300      	movs	r3, #0
 801c808:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c80a:	4b37      	ldr	r3, [pc, #220]	@ (801c8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c80c:	7a1b      	ldrb	r3, [r3, #8]
 801c80e:	461a      	mov	r2, r3
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	4293      	cmp	r3, r2
 801c814:	d902      	bls.n	801c81c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c816:	f06f 0304 	mvn.w	r3, #4
 801c81a:	e05e      	b.n	801c8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c81c:	4b32      	ldr	r3, [pc, #200]	@ (801c8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c81e:	68da      	ldr	r2, [r3, #12]
 801c820:	68bb      	ldr	r3, [r7, #8]
 801c822:	4013      	ands	r3, r2
 801c824:	68ba      	ldr	r2, [r7, #8]
 801c826:	429a      	cmp	r2, r3
 801c828:	d002      	beq.n	801c830 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c82a:	f06f 0305 	mvn.w	r3, #5
 801c82e:	e054      	b.n	801c8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c830:	4b2d      	ldr	r3, [pc, #180]	@ (801c8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c832:	685b      	ldr	r3, [r3, #4]
 801c834:	2b00      	cmp	r3, #0
 801c836:	d00a      	beq.n	801c84e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d007      	beq.n	801c84e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c83e:	4b2a      	ldr	r3, [pc, #168]	@ (801c8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	f107 0116 	add.w	r1, r7, #22
 801c846:	f107 0218 	add.w	r2, r7, #24
 801c84a:	4610      	mov	r0, r2
 801c84c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c84e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c852:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c85c:	4823      	ldr	r0, [pc, #140]	@ (801c8ec <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c85e:	f7ff fa2b 	bl	801bcb8 <tiny_vsnprintf_like>
 801c862:	4603      	mov	r3, r0
 801c864:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801c866:	f000 f9f1 	bl	801cc4c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c86a:	8afa      	ldrh	r2, [r7, #22]
 801c86c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c86e:	4413      	add	r3, r2
 801c870:	b29b      	uxth	r3, r3
 801c872:	f107 0214 	add.w	r2, r7, #20
 801c876:	4611      	mov	r1, r2
 801c878:	4618      	mov	r0, r3
 801c87a:	f000 f969 	bl	801cb50 <TRACE_AllocateBufer>
 801c87e:	4603      	mov	r3, r0
 801c880:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c884:	d025      	beq.n	801c8d2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c886:	2300      	movs	r3, #0
 801c888:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c88a:	e00e      	b.n	801c8aa <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c88c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c88e:	8aba      	ldrh	r2, [r7, #20]
 801c890:	3330      	adds	r3, #48	@ 0x30
 801c892:	443b      	add	r3, r7
 801c894:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c898:	4b15      	ldr	r3, [pc, #84]	@ (801c8f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c89a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c89c:	8abb      	ldrh	r3, [r7, #20]
 801c89e:	3301      	adds	r3, #1
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c8a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c8a6:	3301      	adds	r3, #1
 801c8a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c8aa:	8afb      	ldrh	r3, [r7, #22]
 801c8ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c8ae:	429a      	cmp	r2, r3
 801c8b0:	d3ec      	bcc.n	801c88c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c8b2:	8abb      	ldrh	r3, [r7, #20]
 801c8b4:	461a      	mov	r2, r3
 801c8b6:	4b0e      	ldr	r3, [pc, #56]	@ (801c8f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c8b8:	18d0      	adds	r0, r2, r3
 801c8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c8be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c8c2:	f7ff f9f9 	bl	801bcb8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c8c6:	f000 f9df 	bl	801cc88 <TRACE_UnLock>

    return TRACE_Send();
 801c8ca:	f000 f831 	bl	801c930 <TRACE_Send>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	e003      	b.n	801c8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c8d2:	f000 f9d9 	bl	801cc88 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c8d6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c8da:	4618      	mov	r0, r3
 801c8dc:	3734      	adds	r7, #52	@ 0x34
 801c8de:	46bd      	mov	sp, r7
 801c8e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c8e4:	b001      	add	sp, #4
 801c8e6:	4770      	bx	lr
 801c8e8:	20001da0 	.word	0x20001da0
 801c8ec:	200021b8 	.word	0x200021b8
 801c8f0:	20001db8 	.word	0x20001db8

0801c8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c8f4:	b480      	push	{r7}
 801c8f6:	b083      	sub	sp, #12
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c8fc:	4a03      	ldr	r2, [pc, #12]	@ (801c90c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	6053      	str	r3, [r2, #4]
}
 801c902:	bf00      	nop
 801c904:	370c      	adds	r7, #12
 801c906:	46bd      	mov	sp, r7
 801c908:	bc80      	pop	{r7}
 801c90a:	4770      	bx	lr
 801c90c:	20001da0 	.word	0x20001da0

0801c910 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c910:	b480      	push	{r7}
 801c912:	b083      	sub	sp, #12
 801c914:	af00      	add	r7, sp, #0
 801c916:	4603      	mov	r3, r0
 801c918:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c91a:	4a04      	ldr	r2, [pc, #16]	@ (801c92c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c91c:	79fb      	ldrb	r3, [r7, #7]
 801c91e:	7213      	strb	r3, [r2, #8]
}
 801c920:	bf00      	nop
 801c922:	370c      	adds	r7, #12
 801c924:	46bd      	mov	sp, r7
 801c926:	bc80      	pop	{r7}
 801c928:	4770      	bx	lr
 801c92a:	bf00      	nop
 801c92c:	20001da0 	.word	0x20001da0

0801c930 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b088      	sub	sp, #32
 801c934:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c936:	2300      	movs	r3, #0
 801c938:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c93a:	2300      	movs	r3, #0
 801c93c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c93e:	f3ef 8310 	mrs	r3, PRIMASK
 801c942:	613b      	str	r3, [r7, #16]
  return(result);
 801c944:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c946:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c948:	b672      	cpsid	i
}
 801c94a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c94c:	f000 f9ba 	bl	801ccc4 <TRACE_IsLocked>
 801c950:	4603      	mov	r3, r0
 801c952:	2b00      	cmp	r3, #0
 801c954:	d15d      	bne.n	801ca12 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c956:	f000 f979 	bl	801cc4c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c95a:	4b34      	ldr	r3, [pc, #208]	@ (801ca2c <TRACE_Send+0xfc>)
 801c95c:	8a1a      	ldrh	r2, [r3, #16]
 801c95e:	4b33      	ldr	r3, [pc, #204]	@ (801ca2c <TRACE_Send+0xfc>)
 801c960:	8a5b      	ldrh	r3, [r3, #18]
 801c962:	429a      	cmp	r2, r3
 801c964:	d04d      	beq.n	801ca02 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c966:	4b31      	ldr	r3, [pc, #196]	@ (801ca2c <TRACE_Send+0xfc>)
 801c968:	789b      	ldrb	r3, [r3, #2]
 801c96a:	2b01      	cmp	r3, #1
 801c96c:	d117      	bne.n	801c99e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c96e:	4b2f      	ldr	r3, [pc, #188]	@ (801ca2c <TRACE_Send+0xfc>)
 801c970:	881a      	ldrh	r2, [r3, #0]
 801c972:	4b2e      	ldr	r3, [pc, #184]	@ (801ca2c <TRACE_Send+0xfc>)
 801c974:	8a1b      	ldrh	r3, [r3, #16]
 801c976:	1ad3      	subs	r3, r2, r3
 801c978:	b29a      	uxth	r2, r3
 801c97a:	4b2c      	ldr	r3, [pc, #176]	@ (801ca2c <TRACE_Send+0xfc>)
 801c97c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c97e:	4b2b      	ldr	r3, [pc, #172]	@ (801ca2c <TRACE_Send+0xfc>)
 801c980:	2202      	movs	r2, #2
 801c982:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c984:	4b29      	ldr	r3, [pc, #164]	@ (801ca2c <TRACE_Send+0xfc>)
 801c986:	2200      	movs	r2, #0
 801c988:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c98a:	4b28      	ldr	r3, [pc, #160]	@ (801ca2c <TRACE_Send+0xfc>)
 801c98c:	8a9b      	ldrh	r3, [r3, #20]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d105      	bne.n	801c99e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c992:	4b26      	ldr	r3, [pc, #152]	@ (801ca2c <TRACE_Send+0xfc>)
 801c994:	2200      	movs	r2, #0
 801c996:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c998:	4b24      	ldr	r3, [pc, #144]	@ (801ca2c <TRACE_Send+0xfc>)
 801c99a:	2200      	movs	r2, #0
 801c99c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c99e:	4b23      	ldr	r3, [pc, #140]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9a0:	789b      	ldrb	r3, [r3, #2]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d115      	bne.n	801c9d2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c9a6:	4b21      	ldr	r3, [pc, #132]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9a8:	8a5a      	ldrh	r2, [r3, #18]
 801c9aa:	4b20      	ldr	r3, [pc, #128]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9ac:	8a1b      	ldrh	r3, [r3, #16]
 801c9ae:	429a      	cmp	r2, r3
 801c9b0:	d908      	bls.n	801c9c4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c9b2:	4b1e      	ldr	r3, [pc, #120]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9b4:	8a5a      	ldrh	r2, [r3, #18]
 801c9b6:	4b1d      	ldr	r3, [pc, #116]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9b8:	8a1b      	ldrh	r3, [r3, #16]
 801c9ba:	1ad3      	subs	r3, r2, r3
 801c9bc:	b29a      	uxth	r2, r3
 801c9be:	4b1b      	ldr	r3, [pc, #108]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9c0:	829a      	strh	r2, [r3, #20]
 801c9c2:	e006      	b.n	801c9d2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c9c4:	4b19      	ldr	r3, [pc, #100]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9c6:	8a1b      	ldrh	r3, [r3, #16]
 801c9c8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	4b17      	ldr	r3, [pc, #92]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9d0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c9d2:	4b16      	ldr	r3, [pc, #88]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9d4:	8a1b      	ldrh	r3, [r3, #16]
 801c9d6:	461a      	mov	r2, r3
 801c9d8:	4b15      	ldr	r3, [pc, #84]	@ (801ca30 <TRACE_Send+0x100>)
 801c9da:	4413      	add	r3, r2
 801c9dc:	61bb      	str	r3, [r7, #24]
 801c9de:	697b      	ldr	r3, [r7, #20]
 801c9e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	f383 8810 	msr	PRIMASK, r3
}
 801c9e8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c9ea:	f7e5 ff23 	bl	8002834 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c9ee:	4b11      	ldr	r3, [pc, #68]	@ (801ca34 <TRACE_Send+0x104>)
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	4a0e      	ldr	r2, [pc, #56]	@ (801ca2c <TRACE_Send+0xfc>)
 801c9f4:	8a92      	ldrh	r2, [r2, #20]
 801c9f6:	4611      	mov	r1, r2
 801c9f8:	69b8      	ldr	r0, [r7, #24]
 801c9fa:	4798      	blx	r3
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	77fb      	strb	r3, [r7, #31]
 801ca00:	e00d      	b.n	801ca1e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ca02:	f000 f941 	bl	801cc88 <TRACE_UnLock>
 801ca06:	697b      	ldr	r3, [r7, #20]
 801ca08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca0a:	68bb      	ldr	r3, [r7, #8]
 801ca0c:	f383 8810 	msr	PRIMASK, r3
}
 801ca10:	e005      	b.n	801ca1e <TRACE_Send+0xee>
 801ca12:	697b      	ldr	r3, [r7, #20]
 801ca14:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	f383 8810 	msr	PRIMASK, r3
}
 801ca1c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ca1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ca22:	4618      	mov	r0, r3
 801ca24:	3720      	adds	r7, #32
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	20001da0 	.word	0x20001da0
 801ca30:	20001db8 	.word	0x20001db8
 801ca34:	0802030c 	.word	0x0802030c

0801ca38 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b088      	sub	sp, #32
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ca40:	2300      	movs	r3, #0
 801ca42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca44:	f3ef 8310 	mrs	r3, PRIMASK
 801ca48:	617b      	str	r3, [r7, #20]
  return(result);
 801ca4a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ca4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca4e:	b672      	cpsid	i
}
 801ca50:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ca52:	4b3c      	ldr	r3, [pc, #240]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca54:	789b      	ldrb	r3, [r3, #2]
 801ca56:	2b02      	cmp	r3, #2
 801ca58:	d106      	bne.n	801ca68 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca5a:	4b3a      	ldr	r3, [pc, #232]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca60:	4b38      	ldr	r3, [pc, #224]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca62:	2200      	movs	r2, #0
 801ca64:	821a      	strh	r2, [r3, #16]
 801ca66:	e00a      	b.n	801ca7e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ca68:	4b36      	ldr	r3, [pc, #216]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca6a:	8a1a      	ldrh	r2, [r3, #16]
 801ca6c:	4b35      	ldr	r3, [pc, #212]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca6e:	8a9b      	ldrh	r3, [r3, #20]
 801ca70:	4413      	add	r3, r2
 801ca72:	b29b      	uxth	r3, r3
 801ca74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ca78:	b29a      	uxth	r2, r3
 801ca7a:	4b32      	ldr	r3, [pc, #200]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca7c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ca7e:	4b31      	ldr	r3, [pc, #196]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca80:	8a1a      	ldrh	r2, [r3, #16]
 801ca82:	4b30      	ldr	r3, [pc, #192]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca84:	8a5b      	ldrh	r3, [r3, #18]
 801ca86:	429a      	cmp	r2, r3
 801ca88:	d04d      	beq.n	801cb26 <TRACE_TxCpltCallback+0xee>
 801ca8a:	4b2e      	ldr	r3, [pc, #184]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca8c:	8adb      	ldrh	r3, [r3, #22]
 801ca8e:	2b01      	cmp	r3, #1
 801ca90:	d149      	bne.n	801cb26 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ca92:	4b2c      	ldr	r3, [pc, #176]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca94:	789b      	ldrb	r3, [r3, #2]
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d117      	bne.n	801caca <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ca9a:	4b2a      	ldr	r3, [pc, #168]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801ca9c:	881a      	ldrh	r2, [r3, #0]
 801ca9e:	4b29      	ldr	r3, [pc, #164]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801caa0:	8a1b      	ldrh	r3, [r3, #16]
 801caa2:	1ad3      	subs	r3, r2, r3
 801caa4:	b29a      	uxth	r2, r3
 801caa6:	4b27      	ldr	r3, [pc, #156]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801caa8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801caaa:	4b26      	ldr	r3, [pc, #152]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801caac:	2202      	movs	r2, #2
 801caae:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cab0:	4b24      	ldr	r3, [pc, #144]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cab2:	2200      	movs	r2, #0
 801cab4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cab6:	4b23      	ldr	r3, [pc, #140]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cab8:	8a9b      	ldrh	r3, [r3, #20]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d105      	bne.n	801caca <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cabe:	4b21      	ldr	r3, [pc, #132]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cac0:	2200      	movs	r2, #0
 801cac2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cac4:	4b1f      	ldr	r3, [pc, #124]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cac6:	2200      	movs	r2, #0
 801cac8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801caca:	4b1e      	ldr	r3, [pc, #120]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cacc:	789b      	ldrb	r3, [r3, #2]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d115      	bne.n	801cafe <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cad2:	4b1c      	ldr	r3, [pc, #112]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cad4:	8a5a      	ldrh	r2, [r3, #18]
 801cad6:	4b1b      	ldr	r3, [pc, #108]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cad8:	8a1b      	ldrh	r3, [r3, #16]
 801cada:	429a      	cmp	r2, r3
 801cadc:	d908      	bls.n	801caf0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cade:	4b19      	ldr	r3, [pc, #100]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cae0:	8a5a      	ldrh	r2, [r3, #18]
 801cae2:	4b18      	ldr	r3, [pc, #96]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cae4:	8a1b      	ldrh	r3, [r3, #16]
 801cae6:	1ad3      	subs	r3, r2, r3
 801cae8:	b29a      	uxth	r2, r3
 801caea:	4b16      	ldr	r3, [pc, #88]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801caec:	829a      	strh	r2, [r3, #20]
 801caee:	e006      	b.n	801cafe <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801caf0:	4b14      	ldr	r3, [pc, #80]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801caf2:	8a1b      	ldrh	r3, [r3, #16]
 801caf4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801caf8:	b29a      	uxth	r2, r3
 801cafa:	4b12      	ldr	r3, [pc, #72]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cafc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cafe:	4b11      	ldr	r3, [pc, #68]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cb00:	8a1b      	ldrh	r3, [r3, #16]
 801cb02:	461a      	mov	r2, r3
 801cb04:	4b10      	ldr	r3, [pc, #64]	@ (801cb48 <TRACE_TxCpltCallback+0x110>)
 801cb06:	4413      	add	r3, r2
 801cb08:	61fb      	str	r3, [r7, #28]
 801cb0a:	69bb      	ldr	r3, [r7, #24]
 801cb0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	f383 8810 	msr	PRIMASK, r3
}
 801cb14:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cb16:	4b0d      	ldr	r3, [pc, #52]	@ (801cb4c <TRACE_TxCpltCallback+0x114>)
 801cb18:	68db      	ldr	r3, [r3, #12]
 801cb1a:	4a0a      	ldr	r2, [pc, #40]	@ (801cb44 <TRACE_TxCpltCallback+0x10c>)
 801cb1c:	8a92      	ldrh	r2, [r2, #20]
 801cb1e:	4611      	mov	r1, r2
 801cb20:	69f8      	ldr	r0, [r7, #28]
 801cb22:	4798      	blx	r3
 801cb24:	e00a      	b.n	801cb3c <TRACE_TxCpltCallback+0x104>
 801cb26:	69bb      	ldr	r3, [r7, #24]
 801cb28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	f383 8810 	msr	PRIMASK, r3
}
 801cb30:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cb32:	f7e5 fe87 	bl	8002844 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cb36:	f000 f8a7 	bl	801cc88 <TRACE_UnLock>
  }
}
 801cb3a:	bf00      	nop
 801cb3c:	bf00      	nop
 801cb3e:	3720      	adds	r7, #32
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd80      	pop	{r7, pc}
 801cb44:	20001da0 	.word	0x20001da0
 801cb48:	20001db8 	.word	0x20001db8
 801cb4c:	0802030c 	.word	0x0802030c

0801cb50 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cb50:	b480      	push	{r7}
 801cb52:	b087      	sub	sp, #28
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	4603      	mov	r3, r0
 801cb58:	6039      	str	r1, [r7, #0]
 801cb5a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cb5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cb60:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb62:	f3ef 8310 	mrs	r3, PRIMASK
 801cb66:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb68:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cb6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb6c:	b672      	cpsid	i
}
 801cb6e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cb70:	4b35      	ldr	r3, [pc, #212]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cb72:	8a5a      	ldrh	r2, [r3, #18]
 801cb74:	4b34      	ldr	r3, [pc, #208]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cb76:	8a1b      	ldrh	r3, [r3, #16]
 801cb78:	429a      	cmp	r2, r3
 801cb7a:	d11b      	bne.n	801cbb4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cb7c:	4b32      	ldr	r3, [pc, #200]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cb7e:	8a5b      	ldrh	r3, [r3, #18]
 801cb80:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cb84:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cb86:	88fa      	ldrh	r2, [r7, #6]
 801cb88:	8afb      	ldrh	r3, [r7, #22]
 801cb8a:	429a      	cmp	r2, r3
 801cb8c:	d33a      	bcc.n	801cc04 <TRACE_AllocateBufer+0xb4>
 801cb8e:	4b2e      	ldr	r3, [pc, #184]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cb90:	8a1b      	ldrh	r3, [r3, #16]
 801cb92:	88fa      	ldrh	r2, [r7, #6]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d235      	bcs.n	801cc04 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cb98:	4b2b      	ldr	r3, [pc, #172]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cb9a:	2201      	movs	r2, #1
 801cb9c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cb9e:	4b2a      	ldr	r3, [pc, #168]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cba0:	8a5a      	ldrh	r2, [r3, #18]
 801cba2:	4b29      	ldr	r3, [pc, #164]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cba4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cba6:	4b28      	ldr	r3, [pc, #160]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cba8:	8a1b      	ldrh	r3, [r3, #16]
 801cbaa:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cbac:	4b26      	ldr	r3, [pc, #152]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbae:	2200      	movs	r2, #0
 801cbb0:	825a      	strh	r2, [r3, #18]
 801cbb2:	e027      	b.n	801cc04 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cbb4:	4b24      	ldr	r3, [pc, #144]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbb6:	8a5a      	ldrh	r2, [r3, #18]
 801cbb8:	4b23      	ldr	r3, [pc, #140]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbba:	8a1b      	ldrh	r3, [r3, #16]
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d91b      	bls.n	801cbf8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cbc0:	4b21      	ldr	r3, [pc, #132]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbc2:	8a5b      	ldrh	r3, [r3, #18]
 801cbc4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cbc8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cbca:	88fa      	ldrh	r2, [r7, #6]
 801cbcc:	8afb      	ldrh	r3, [r7, #22]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d318      	bcc.n	801cc04 <TRACE_AllocateBufer+0xb4>
 801cbd2:	4b1d      	ldr	r3, [pc, #116]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbd4:	8a1b      	ldrh	r3, [r3, #16]
 801cbd6:	88fa      	ldrh	r2, [r7, #6]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	d213      	bcs.n	801cc04 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cbdc:	4b1a      	ldr	r3, [pc, #104]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbde:	2201      	movs	r2, #1
 801cbe0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cbe2:	4b19      	ldr	r3, [pc, #100]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbe4:	8a5a      	ldrh	r2, [r3, #18]
 801cbe6:	4b18      	ldr	r3, [pc, #96]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbe8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cbea:	4b17      	ldr	r3, [pc, #92]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbec:	8a1b      	ldrh	r3, [r3, #16]
 801cbee:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cbf0:	4b15      	ldr	r3, [pc, #84]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	825a      	strh	r2, [r3, #18]
 801cbf6:	e005      	b.n	801cc04 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cbf8:	4b13      	ldr	r3, [pc, #76]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbfa:	8a1a      	ldrh	r2, [r3, #16]
 801cbfc:	4b12      	ldr	r3, [pc, #72]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cbfe:	8a5b      	ldrh	r3, [r3, #18]
 801cc00:	1ad3      	subs	r3, r2, r3
 801cc02:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801cc04:	8afa      	ldrh	r2, [r7, #22]
 801cc06:	88fb      	ldrh	r3, [r7, #6]
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	d90f      	bls.n	801cc2c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cc0c:	4b0e      	ldr	r3, [pc, #56]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cc0e:	8a5a      	ldrh	r2, [r3, #18]
 801cc10:	683b      	ldr	r3, [r7, #0]
 801cc12:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cc14:	4b0c      	ldr	r3, [pc, #48]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cc16:	8a5a      	ldrh	r2, [r3, #18]
 801cc18:	88fb      	ldrh	r3, [r7, #6]
 801cc1a:	4413      	add	r3, r2
 801cc1c:	b29b      	uxth	r3, r3
 801cc1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cc22:	b29a      	uxth	r2, r3
 801cc24:	4b08      	ldr	r3, [pc, #32]	@ (801cc48 <TRACE_AllocateBufer+0xf8>)
 801cc26:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801cc28:	2300      	movs	r3, #0
 801cc2a:	82bb      	strh	r3, [r7, #20]
 801cc2c:	693b      	ldr	r3, [r7, #16]
 801cc2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc30:	68bb      	ldr	r3, [r7, #8]
 801cc32:	f383 8810 	msr	PRIMASK, r3
}
 801cc36:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801cc38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	371c      	adds	r7, #28
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bc80      	pop	{r7}
 801cc44:	4770      	bx	lr
 801cc46:	bf00      	nop
 801cc48:	20001da0 	.word	0x20001da0

0801cc4c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cc4c:	b480      	push	{r7}
 801cc4e:	b085      	sub	sp, #20
 801cc50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc52:	f3ef 8310 	mrs	r3, PRIMASK
 801cc56:	607b      	str	r3, [r7, #4]
  return(result);
 801cc58:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc5c:	b672      	cpsid	i
}
 801cc5e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801cc60:	4b08      	ldr	r3, [pc, #32]	@ (801cc84 <TRACE_Lock+0x38>)
 801cc62:	8adb      	ldrh	r3, [r3, #22]
 801cc64:	3301      	adds	r3, #1
 801cc66:	b29a      	uxth	r2, r3
 801cc68:	4b06      	ldr	r3, [pc, #24]	@ (801cc84 <TRACE_Lock+0x38>)
 801cc6a:	82da      	strh	r2, [r3, #22]
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	f383 8810 	msr	PRIMASK, r3
}
 801cc76:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cc78:	bf00      	nop
 801cc7a:	3714      	adds	r7, #20
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	bc80      	pop	{r7}
 801cc80:	4770      	bx	lr
 801cc82:	bf00      	nop
 801cc84:	20001da0 	.word	0x20001da0

0801cc88 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cc88:	b480      	push	{r7}
 801cc8a:	b085      	sub	sp, #20
 801cc8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc8e:	f3ef 8310 	mrs	r3, PRIMASK
 801cc92:	607b      	str	r3, [r7, #4]
  return(result);
 801cc94:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc98:	b672      	cpsid	i
}
 801cc9a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cc9c:	4b08      	ldr	r3, [pc, #32]	@ (801ccc0 <TRACE_UnLock+0x38>)
 801cc9e:	8adb      	ldrh	r3, [r3, #22]
 801cca0:	3b01      	subs	r3, #1
 801cca2:	b29a      	uxth	r2, r3
 801cca4:	4b06      	ldr	r3, [pc, #24]	@ (801ccc0 <TRACE_UnLock+0x38>)
 801cca6:	82da      	strh	r2, [r3, #22]
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	f383 8810 	msr	PRIMASK, r3
}
 801ccb2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ccb4:	bf00      	nop
 801ccb6:	3714      	adds	r7, #20
 801ccb8:	46bd      	mov	sp, r7
 801ccba:	bc80      	pop	{r7}
 801ccbc:	4770      	bx	lr
 801ccbe:	bf00      	nop
 801ccc0:	20001da0 	.word	0x20001da0

0801ccc4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ccc8:	4b05      	ldr	r3, [pc, #20]	@ (801cce0 <TRACE_IsLocked+0x1c>)
 801ccca:	8adb      	ldrh	r3, [r3, #22]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	bf14      	ite	ne
 801ccd0:	2301      	movne	r3, #1
 801ccd2:	2300      	moveq	r3, #0
 801ccd4:	b2db      	uxtb	r3, r3
}
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	bc80      	pop	{r7}
 801ccdc:	4770      	bx	lr
 801ccde:	bf00      	nop
 801cce0:	20001da0 	.word	0x20001da0

0801cce4 <__cvt>:
 801cce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cce8:	b088      	sub	sp, #32
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	461d      	mov	r5, r3
 801ccee:	4614      	mov	r4, r2
 801ccf0:	bfbc      	itt	lt
 801ccf2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801ccf6:	4614      	movlt	r4, r2
 801ccf8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ccfa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ccfc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801cd00:	bfb6      	itet	lt
 801cd02:	461d      	movlt	r5, r3
 801cd04:	2300      	movge	r3, #0
 801cd06:	232d      	movlt	r3, #45	@ 0x2d
 801cd08:	7013      	strb	r3, [r2, #0]
 801cd0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cd0c:	f023 0820 	bic.w	r8, r3, #32
 801cd10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cd14:	d005      	beq.n	801cd22 <__cvt+0x3e>
 801cd16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cd1a:	d100      	bne.n	801cd1e <__cvt+0x3a>
 801cd1c:	3601      	adds	r6, #1
 801cd1e:	2302      	movs	r3, #2
 801cd20:	e000      	b.n	801cd24 <__cvt+0x40>
 801cd22:	2303      	movs	r3, #3
 801cd24:	aa07      	add	r2, sp, #28
 801cd26:	9204      	str	r2, [sp, #16]
 801cd28:	aa06      	add	r2, sp, #24
 801cd2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801cd2e:	e9cd 3600 	strd	r3, r6, [sp]
 801cd32:	4622      	mov	r2, r4
 801cd34:	462b      	mov	r3, r5
 801cd36:	f000 ff3f 	bl	801dbb8 <_dtoa_r>
 801cd3a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cd3e:	4607      	mov	r7, r0
 801cd40:	d119      	bne.n	801cd76 <__cvt+0x92>
 801cd42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd44:	07db      	lsls	r3, r3, #31
 801cd46:	d50e      	bpl.n	801cd66 <__cvt+0x82>
 801cd48:	eb00 0906 	add.w	r9, r0, r6
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	2300      	movs	r3, #0
 801cd50:	4620      	mov	r0, r4
 801cd52:	4629      	mov	r1, r5
 801cd54:	f7e3 fe90 	bl	8000a78 <__aeabi_dcmpeq>
 801cd58:	b108      	cbz	r0, 801cd5e <__cvt+0x7a>
 801cd5a:	f8cd 901c 	str.w	r9, [sp, #28]
 801cd5e:	2230      	movs	r2, #48	@ 0x30
 801cd60:	9b07      	ldr	r3, [sp, #28]
 801cd62:	454b      	cmp	r3, r9
 801cd64:	d31e      	bcc.n	801cda4 <__cvt+0xc0>
 801cd66:	9b07      	ldr	r3, [sp, #28]
 801cd68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cd6a:	1bdb      	subs	r3, r3, r7
 801cd6c:	4638      	mov	r0, r7
 801cd6e:	6013      	str	r3, [r2, #0]
 801cd70:	b008      	add	sp, #32
 801cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cd7a:	eb00 0906 	add.w	r9, r0, r6
 801cd7e:	d1e5      	bne.n	801cd4c <__cvt+0x68>
 801cd80:	7803      	ldrb	r3, [r0, #0]
 801cd82:	2b30      	cmp	r3, #48	@ 0x30
 801cd84:	d10a      	bne.n	801cd9c <__cvt+0xb8>
 801cd86:	2200      	movs	r2, #0
 801cd88:	2300      	movs	r3, #0
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	4629      	mov	r1, r5
 801cd8e:	f7e3 fe73 	bl	8000a78 <__aeabi_dcmpeq>
 801cd92:	b918      	cbnz	r0, 801cd9c <__cvt+0xb8>
 801cd94:	f1c6 0601 	rsb	r6, r6, #1
 801cd98:	f8ca 6000 	str.w	r6, [sl]
 801cd9c:	f8da 3000 	ldr.w	r3, [sl]
 801cda0:	4499      	add	r9, r3
 801cda2:	e7d3      	b.n	801cd4c <__cvt+0x68>
 801cda4:	1c59      	adds	r1, r3, #1
 801cda6:	9107      	str	r1, [sp, #28]
 801cda8:	701a      	strb	r2, [r3, #0]
 801cdaa:	e7d9      	b.n	801cd60 <__cvt+0x7c>

0801cdac <__exponent>:
 801cdac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cdae:	2900      	cmp	r1, #0
 801cdb0:	bfba      	itte	lt
 801cdb2:	4249      	neglt	r1, r1
 801cdb4:	232d      	movlt	r3, #45	@ 0x2d
 801cdb6:	232b      	movge	r3, #43	@ 0x2b
 801cdb8:	2909      	cmp	r1, #9
 801cdba:	7002      	strb	r2, [r0, #0]
 801cdbc:	7043      	strb	r3, [r0, #1]
 801cdbe:	dd29      	ble.n	801ce14 <__exponent+0x68>
 801cdc0:	f10d 0307 	add.w	r3, sp, #7
 801cdc4:	461d      	mov	r5, r3
 801cdc6:	270a      	movs	r7, #10
 801cdc8:	461a      	mov	r2, r3
 801cdca:	fbb1 f6f7 	udiv	r6, r1, r7
 801cdce:	fb07 1416 	mls	r4, r7, r6, r1
 801cdd2:	3430      	adds	r4, #48	@ 0x30
 801cdd4:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cdd8:	460c      	mov	r4, r1
 801cdda:	2c63      	cmp	r4, #99	@ 0x63
 801cddc:	f103 33ff 	add.w	r3, r3, #4294967295
 801cde0:	4631      	mov	r1, r6
 801cde2:	dcf1      	bgt.n	801cdc8 <__exponent+0x1c>
 801cde4:	3130      	adds	r1, #48	@ 0x30
 801cde6:	1e94      	subs	r4, r2, #2
 801cde8:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cdec:	1c41      	adds	r1, r0, #1
 801cdee:	4623      	mov	r3, r4
 801cdf0:	42ab      	cmp	r3, r5
 801cdf2:	d30a      	bcc.n	801ce0a <__exponent+0x5e>
 801cdf4:	f10d 0309 	add.w	r3, sp, #9
 801cdf8:	1a9b      	subs	r3, r3, r2
 801cdfa:	42ac      	cmp	r4, r5
 801cdfc:	bf88      	it	hi
 801cdfe:	2300      	movhi	r3, #0
 801ce00:	3302      	adds	r3, #2
 801ce02:	4403      	add	r3, r0
 801ce04:	1a18      	subs	r0, r3, r0
 801ce06:	b003      	add	sp, #12
 801ce08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ce0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ce12:	e7ed      	b.n	801cdf0 <__exponent+0x44>
 801ce14:	2330      	movs	r3, #48	@ 0x30
 801ce16:	3130      	adds	r1, #48	@ 0x30
 801ce18:	7083      	strb	r3, [r0, #2]
 801ce1a:	70c1      	strb	r1, [r0, #3]
 801ce1c:	1d03      	adds	r3, r0, #4
 801ce1e:	e7f1      	b.n	801ce04 <__exponent+0x58>

0801ce20 <_printf_float>:
 801ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce24:	b091      	sub	sp, #68	@ 0x44
 801ce26:	460c      	mov	r4, r1
 801ce28:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801ce2c:	4616      	mov	r6, r2
 801ce2e:	461f      	mov	r7, r3
 801ce30:	4605      	mov	r5, r0
 801ce32:	f000 fdc1 	bl	801d9b8 <_localeconv_r>
 801ce36:	6803      	ldr	r3, [r0, #0]
 801ce38:	9308      	str	r3, [sp, #32]
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	f7e3 f9f0 	bl	8000220 <strlen>
 801ce40:	2300      	movs	r3, #0
 801ce42:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce44:	f8d8 3000 	ldr.w	r3, [r8]
 801ce48:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce4a:	3307      	adds	r3, #7
 801ce4c:	f023 0307 	bic.w	r3, r3, #7
 801ce50:	f103 0208 	add.w	r2, r3, #8
 801ce54:	f894 a018 	ldrb.w	sl, [r4, #24]
 801ce58:	f8d4 b000 	ldr.w	fp, [r4]
 801ce5c:	f8c8 2000 	str.w	r2, [r8]
 801ce60:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ce64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801ce68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce6a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801ce6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801ce72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ce76:	4b9d      	ldr	r3, [pc, #628]	@ (801d0ec <_printf_float+0x2cc>)
 801ce78:	f04f 32ff 	mov.w	r2, #4294967295
 801ce7c:	f7e3 fe2e 	bl	8000adc <__aeabi_dcmpun>
 801ce80:	bb70      	cbnz	r0, 801cee0 <_printf_float+0xc0>
 801ce82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ce86:	4b99      	ldr	r3, [pc, #612]	@ (801d0ec <_printf_float+0x2cc>)
 801ce88:	f04f 32ff 	mov.w	r2, #4294967295
 801ce8c:	f7e3 fe08 	bl	8000aa0 <__aeabi_dcmple>
 801ce90:	bb30      	cbnz	r0, 801cee0 <_printf_float+0xc0>
 801ce92:	2200      	movs	r2, #0
 801ce94:	2300      	movs	r3, #0
 801ce96:	4640      	mov	r0, r8
 801ce98:	4649      	mov	r1, r9
 801ce9a:	f7e3 fdf7 	bl	8000a8c <__aeabi_dcmplt>
 801ce9e:	b110      	cbz	r0, 801cea6 <_printf_float+0x86>
 801cea0:	232d      	movs	r3, #45	@ 0x2d
 801cea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cea6:	4a92      	ldr	r2, [pc, #584]	@ (801d0f0 <_printf_float+0x2d0>)
 801cea8:	4b92      	ldr	r3, [pc, #584]	@ (801d0f4 <_printf_float+0x2d4>)
 801ceaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801ceae:	bf94      	ite	ls
 801ceb0:	4690      	movls	r8, r2
 801ceb2:	4698      	movhi	r8, r3
 801ceb4:	2303      	movs	r3, #3
 801ceb6:	6123      	str	r3, [r4, #16]
 801ceb8:	f02b 0304 	bic.w	r3, fp, #4
 801cebc:	6023      	str	r3, [r4, #0]
 801cebe:	f04f 0900 	mov.w	r9, #0
 801cec2:	9700      	str	r7, [sp, #0]
 801cec4:	4633      	mov	r3, r6
 801cec6:	aa0f      	add	r2, sp, #60	@ 0x3c
 801cec8:	4621      	mov	r1, r4
 801ceca:	4628      	mov	r0, r5
 801cecc:	f000 f9d4 	bl	801d278 <_printf_common>
 801ced0:	3001      	adds	r0, #1
 801ced2:	f040 808f 	bne.w	801cff4 <_printf_float+0x1d4>
 801ced6:	f04f 30ff 	mov.w	r0, #4294967295
 801ceda:	b011      	add	sp, #68	@ 0x44
 801cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee0:	4642      	mov	r2, r8
 801cee2:	464b      	mov	r3, r9
 801cee4:	4640      	mov	r0, r8
 801cee6:	4649      	mov	r1, r9
 801cee8:	f7e3 fdf8 	bl	8000adc <__aeabi_dcmpun>
 801ceec:	b140      	cbz	r0, 801cf00 <_printf_float+0xe0>
 801ceee:	464b      	mov	r3, r9
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	bfbc      	itt	lt
 801cef4:	232d      	movlt	r3, #45	@ 0x2d
 801cef6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cefa:	4a7f      	ldr	r2, [pc, #508]	@ (801d0f8 <_printf_float+0x2d8>)
 801cefc:	4b7f      	ldr	r3, [pc, #508]	@ (801d0fc <_printf_float+0x2dc>)
 801cefe:	e7d4      	b.n	801ceaa <_printf_float+0x8a>
 801cf00:	6863      	ldr	r3, [r4, #4]
 801cf02:	1c5a      	adds	r2, r3, #1
 801cf04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801cf08:	d13f      	bne.n	801cf8a <_printf_float+0x16a>
 801cf0a:	2306      	movs	r3, #6
 801cf0c:	6063      	str	r3, [r4, #4]
 801cf0e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801cf12:	2200      	movs	r2, #0
 801cf14:	6023      	str	r3, [r4, #0]
 801cf16:	9206      	str	r2, [sp, #24]
 801cf18:	aa0e      	add	r2, sp, #56	@ 0x38
 801cf1a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801cf1e:	aa0d      	add	r2, sp, #52	@ 0x34
 801cf20:	9203      	str	r2, [sp, #12]
 801cf22:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801cf26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801cf2a:	6863      	ldr	r3, [r4, #4]
 801cf2c:	9300      	str	r3, [sp, #0]
 801cf2e:	4642      	mov	r2, r8
 801cf30:	464b      	mov	r3, r9
 801cf32:	4628      	mov	r0, r5
 801cf34:	910a      	str	r1, [sp, #40]	@ 0x28
 801cf36:	f7ff fed5 	bl	801cce4 <__cvt>
 801cf3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cf3c:	2947      	cmp	r1, #71	@ 0x47
 801cf3e:	4680      	mov	r8, r0
 801cf40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801cf42:	d128      	bne.n	801cf96 <_printf_float+0x176>
 801cf44:	1cc8      	adds	r0, r1, #3
 801cf46:	db02      	blt.n	801cf4e <_printf_float+0x12e>
 801cf48:	6863      	ldr	r3, [r4, #4]
 801cf4a:	4299      	cmp	r1, r3
 801cf4c:	dd40      	ble.n	801cfd0 <_printf_float+0x1b0>
 801cf4e:	f1aa 0a02 	sub.w	sl, sl, #2
 801cf52:	fa5f fa8a 	uxtb.w	sl, sl
 801cf56:	3901      	subs	r1, #1
 801cf58:	4652      	mov	r2, sl
 801cf5a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cf5e:	910d      	str	r1, [sp, #52]	@ 0x34
 801cf60:	f7ff ff24 	bl	801cdac <__exponent>
 801cf64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf66:	1813      	adds	r3, r2, r0
 801cf68:	2a01      	cmp	r2, #1
 801cf6a:	4681      	mov	r9, r0
 801cf6c:	6123      	str	r3, [r4, #16]
 801cf6e:	dc02      	bgt.n	801cf76 <_printf_float+0x156>
 801cf70:	6822      	ldr	r2, [r4, #0]
 801cf72:	07d2      	lsls	r2, r2, #31
 801cf74:	d501      	bpl.n	801cf7a <_printf_float+0x15a>
 801cf76:	3301      	adds	r3, #1
 801cf78:	6123      	str	r3, [r4, #16]
 801cf7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d09f      	beq.n	801cec2 <_printf_float+0xa2>
 801cf82:	232d      	movs	r3, #45	@ 0x2d
 801cf84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cf88:	e79b      	b.n	801cec2 <_printf_float+0xa2>
 801cf8a:	2947      	cmp	r1, #71	@ 0x47
 801cf8c:	d1bf      	bne.n	801cf0e <_printf_float+0xee>
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d1bd      	bne.n	801cf0e <_printf_float+0xee>
 801cf92:	2301      	movs	r3, #1
 801cf94:	e7ba      	b.n	801cf0c <_printf_float+0xec>
 801cf96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cf9a:	d9dc      	bls.n	801cf56 <_printf_float+0x136>
 801cf9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cfa0:	d118      	bne.n	801cfd4 <_printf_float+0x1b4>
 801cfa2:	2900      	cmp	r1, #0
 801cfa4:	6863      	ldr	r3, [r4, #4]
 801cfa6:	dd0b      	ble.n	801cfc0 <_printf_float+0x1a0>
 801cfa8:	6121      	str	r1, [r4, #16]
 801cfaa:	b913      	cbnz	r3, 801cfb2 <_printf_float+0x192>
 801cfac:	6822      	ldr	r2, [r4, #0]
 801cfae:	07d0      	lsls	r0, r2, #31
 801cfb0:	d502      	bpl.n	801cfb8 <_printf_float+0x198>
 801cfb2:	3301      	adds	r3, #1
 801cfb4:	440b      	add	r3, r1
 801cfb6:	6123      	str	r3, [r4, #16]
 801cfb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cfba:	f04f 0900 	mov.w	r9, #0
 801cfbe:	e7dc      	b.n	801cf7a <_printf_float+0x15a>
 801cfc0:	b913      	cbnz	r3, 801cfc8 <_printf_float+0x1a8>
 801cfc2:	6822      	ldr	r2, [r4, #0]
 801cfc4:	07d2      	lsls	r2, r2, #31
 801cfc6:	d501      	bpl.n	801cfcc <_printf_float+0x1ac>
 801cfc8:	3302      	adds	r3, #2
 801cfca:	e7f4      	b.n	801cfb6 <_printf_float+0x196>
 801cfcc:	2301      	movs	r3, #1
 801cfce:	e7f2      	b.n	801cfb6 <_printf_float+0x196>
 801cfd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801cfd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cfd6:	4299      	cmp	r1, r3
 801cfd8:	db05      	blt.n	801cfe6 <_printf_float+0x1c6>
 801cfda:	6823      	ldr	r3, [r4, #0]
 801cfdc:	6121      	str	r1, [r4, #16]
 801cfde:	07d8      	lsls	r0, r3, #31
 801cfe0:	d5ea      	bpl.n	801cfb8 <_printf_float+0x198>
 801cfe2:	1c4b      	adds	r3, r1, #1
 801cfe4:	e7e7      	b.n	801cfb6 <_printf_float+0x196>
 801cfe6:	2900      	cmp	r1, #0
 801cfe8:	bfd4      	ite	le
 801cfea:	f1c1 0202 	rsble	r2, r1, #2
 801cfee:	2201      	movgt	r2, #1
 801cff0:	4413      	add	r3, r2
 801cff2:	e7e0      	b.n	801cfb6 <_printf_float+0x196>
 801cff4:	6823      	ldr	r3, [r4, #0]
 801cff6:	055a      	lsls	r2, r3, #21
 801cff8:	d407      	bmi.n	801d00a <_printf_float+0x1ea>
 801cffa:	6923      	ldr	r3, [r4, #16]
 801cffc:	4642      	mov	r2, r8
 801cffe:	4631      	mov	r1, r6
 801d000:	4628      	mov	r0, r5
 801d002:	47b8      	blx	r7
 801d004:	3001      	adds	r0, #1
 801d006:	d12b      	bne.n	801d060 <_printf_float+0x240>
 801d008:	e765      	b.n	801ced6 <_printf_float+0xb6>
 801d00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d00e:	f240 80dd 	bls.w	801d1cc <_printf_float+0x3ac>
 801d012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d016:	2200      	movs	r2, #0
 801d018:	2300      	movs	r3, #0
 801d01a:	f7e3 fd2d 	bl	8000a78 <__aeabi_dcmpeq>
 801d01e:	2800      	cmp	r0, #0
 801d020:	d033      	beq.n	801d08a <_printf_float+0x26a>
 801d022:	4a37      	ldr	r2, [pc, #220]	@ (801d100 <_printf_float+0x2e0>)
 801d024:	2301      	movs	r3, #1
 801d026:	4631      	mov	r1, r6
 801d028:	4628      	mov	r0, r5
 801d02a:	47b8      	blx	r7
 801d02c:	3001      	adds	r0, #1
 801d02e:	f43f af52 	beq.w	801ced6 <_printf_float+0xb6>
 801d032:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801d036:	4543      	cmp	r3, r8
 801d038:	db02      	blt.n	801d040 <_printf_float+0x220>
 801d03a:	6823      	ldr	r3, [r4, #0]
 801d03c:	07d8      	lsls	r0, r3, #31
 801d03e:	d50f      	bpl.n	801d060 <_printf_float+0x240>
 801d040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d044:	4631      	mov	r1, r6
 801d046:	4628      	mov	r0, r5
 801d048:	47b8      	blx	r7
 801d04a:	3001      	adds	r0, #1
 801d04c:	f43f af43 	beq.w	801ced6 <_printf_float+0xb6>
 801d050:	f04f 0900 	mov.w	r9, #0
 801d054:	f108 38ff 	add.w	r8, r8, #4294967295
 801d058:	f104 0a1a 	add.w	sl, r4, #26
 801d05c:	45c8      	cmp	r8, r9
 801d05e:	dc09      	bgt.n	801d074 <_printf_float+0x254>
 801d060:	6823      	ldr	r3, [r4, #0]
 801d062:	079b      	lsls	r3, r3, #30
 801d064:	f100 8103 	bmi.w	801d26e <_printf_float+0x44e>
 801d068:	68e0      	ldr	r0, [r4, #12]
 801d06a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d06c:	4298      	cmp	r0, r3
 801d06e:	bfb8      	it	lt
 801d070:	4618      	movlt	r0, r3
 801d072:	e732      	b.n	801ceda <_printf_float+0xba>
 801d074:	2301      	movs	r3, #1
 801d076:	4652      	mov	r2, sl
 801d078:	4631      	mov	r1, r6
 801d07a:	4628      	mov	r0, r5
 801d07c:	47b8      	blx	r7
 801d07e:	3001      	adds	r0, #1
 801d080:	f43f af29 	beq.w	801ced6 <_printf_float+0xb6>
 801d084:	f109 0901 	add.w	r9, r9, #1
 801d088:	e7e8      	b.n	801d05c <_printf_float+0x23c>
 801d08a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	dc39      	bgt.n	801d104 <_printf_float+0x2e4>
 801d090:	4a1b      	ldr	r2, [pc, #108]	@ (801d100 <_printf_float+0x2e0>)
 801d092:	2301      	movs	r3, #1
 801d094:	4631      	mov	r1, r6
 801d096:	4628      	mov	r0, r5
 801d098:	47b8      	blx	r7
 801d09a:	3001      	adds	r0, #1
 801d09c:	f43f af1b 	beq.w	801ced6 <_printf_float+0xb6>
 801d0a0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801d0a4:	ea59 0303 	orrs.w	r3, r9, r3
 801d0a8:	d102      	bne.n	801d0b0 <_printf_float+0x290>
 801d0aa:	6823      	ldr	r3, [r4, #0]
 801d0ac:	07d9      	lsls	r1, r3, #31
 801d0ae:	d5d7      	bpl.n	801d060 <_printf_float+0x240>
 801d0b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d0b4:	4631      	mov	r1, r6
 801d0b6:	4628      	mov	r0, r5
 801d0b8:	47b8      	blx	r7
 801d0ba:	3001      	adds	r0, #1
 801d0bc:	f43f af0b 	beq.w	801ced6 <_printf_float+0xb6>
 801d0c0:	f04f 0a00 	mov.w	sl, #0
 801d0c4:	f104 0b1a 	add.w	fp, r4, #26
 801d0c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0ca:	425b      	negs	r3, r3
 801d0cc:	4553      	cmp	r3, sl
 801d0ce:	dc01      	bgt.n	801d0d4 <_printf_float+0x2b4>
 801d0d0:	464b      	mov	r3, r9
 801d0d2:	e793      	b.n	801cffc <_printf_float+0x1dc>
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	465a      	mov	r2, fp
 801d0d8:	4631      	mov	r1, r6
 801d0da:	4628      	mov	r0, r5
 801d0dc:	47b8      	blx	r7
 801d0de:	3001      	adds	r0, #1
 801d0e0:	f43f aef9 	beq.w	801ced6 <_printf_float+0xb6>
 801d0e4:	f10a 0a01 	add.w	sl, sl, #1
 801d0e8:	e7ee      	b.n	801d0c8 <_printf_float+0x2a8>
 801d0ea:	bf00      	nop
 801d0ec:	7fefffff 	.word	0x7fefffff
 801d0f0:	0802085c 	.word	0x0802085c
 801d0f4:	08020860 	.word	0x08020860
 801d0f8:	08020864 	.word	0x08020864
 801d0fc:	08020868 	.word	0x08020868
 801d100:	0802086c 	.word	0x0802086c
 801d104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d106:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d10a:	4553      	cmp	r3, sl
 801d10c:	bfa8      	it	ge
 801d10e:	4653      	movge	r3, sl
 801d110:	2b00      	cmp	r3, #0
 801d112:	4699      	mov	r9, r3
 801d114:	dc36      	bgt.n	801d184 <_printf_float+0x364>
 801d116:	f04f 0b00 	mov.w	fp, #0
 801d11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d11e:	f104 021a 	add.w	r2, r4, #26
 801d122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d124:	930a      	str	r3, [sp, #40]	@ 0x28
 801d126:	eba3 0309 	sub.w	r3, r3, r9
 801d12a:	455b      	cmp	r3, fp
 801d12c:	dc31      	bgt.n	801d192 <_printf_float+0x372>
 801d12e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d130:	459a      	cmp	sl, r3
 801d132:	dc3a      	bgt.n	801d1aa <_printf_float+0x38a>
 801d134:	6823      	ldr	r3, [r4, #0]
 801d136:	07da      	lsls	r2, r3, #31
 801d138:	d437      	bmi.n	801d1aa <_printf_float+0x38a>
 801d13a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d13c:	ebaa 0903 	sub.w	r9, sl, r3
 801d140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d142:	ebaa 0303 	sub.w	r3, sl, r3
 801d146:	4599      	cmp	r9, r3
 801d148:	bfa8      	it	ge
 801d14a:	4699      	movge	r9, r3
 801d14c:	f1b9 0f00 	cmp.w	r9, #0
 801d150:	dc33      	bgt.n	801d1ba <_printf_float+0x39a>
 801d152:	f04f 0800 	mov.w	r8, #0
 801d156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d15a:	f104 0b1a 	add.w	fp, r4, #26
 801d15e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d160:	ebaa 0303 	sub.w	r3, sl, r3
 801d164:	eba3 0309 	sub.w	r3, r3, r9
 801d168:	4543      	cmp	r3, r8
 801d16a:	f77f af79 	ble.w	801d060 <_printf_float+0x240>
 801d16e:	2301      	movs	r3, #1
 801d170:	465a      	mov	r2, fp
 801d172:	4631      	mov	r1, r6
 801d174:	4628      	mov	r0, r5
 801d176:	47b8      	blx	r7
 801d178:	3001      	adds	r0, #1
 801d17a:	f43f aeac 	beq.w	801ced6 <_printf_float+0xb6>
 801d17e:	f108 0801 	add.w	r8, r8, #1
 801d182:	e7ec      	b.n	801d15e <_printf_float+0x33e>
 801d184:	4642      	mov	r2, r8
 801d186:	4631      	mov	r1, r6
 801d188:	4628      	mov	r0, r5
 801d18a:	47b8      	blx	r7
 801d18c:	3001      	adds	r0, #1
 801d18e:	d1c2      	bne.n	801d116 <_printf_float+0x2f6>
 801d190:	e6a1      	b.n	801ced6 <_printf_float+0xb6>
 801d192:	2301      	movs	r3, #1
 801d194:	4631      	mov	r1, r6
 801d196:	4628      	mov	r0, r5
 801d198:	920a      	str	r2, [sp, #40]	@ 0x28
 801d19a:	47b8      	blx	r7
 801d19c:	3001      	adds	r0, #1
 801d19e:	f43f ae9a 	beq.w	801ced6 <_printf_float+0xb6>
 801d1a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1a4:	f10b 0b01 	add.w	fp, fp, #1
 801d1a8:	e7bb      	b.n	801d122 <_printf_float+0x302>
 801d1aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d1ae:	4631      	mov	r1, r6
 801d1b0:	4628      	mov	r0, r5
 801d1b2:	47b8      	blx	r7
 801d1b4:	3001      	adds	r0, #1
 801d1b6:	d1c0      	bne.n	801d13a <_printf_float+0x31a>
 801d1b8:	e68d      	b.n	801ced6 <_printf_float+0xb6>
 801d1ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1bc:	464b      	mov	r3, r9
 801d1be:	4442      	add	r2, r8
 801d1c0:	4631      	mov	r1, r6
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	47b8      	blx	r7
 801d1c6:	3001      	adds	r0, #1
 801d1c8:	d1c3      	bne.n	801d152 <_printf_float+0x332>
 801d1ca:	e684      	b.n	801ced6 <_printf_float+0xb6>
 801d1cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801d1d0:	f1ba 0f01 	cmp.w	sl, #1
 801d1d4:	dc01      	bgt.n	801d1da <_printf_float+0x3ba>
 801d1d6:	07db      	lsls	r3, r3, #31
 801d1d8:	d536      	bpl.n	801d248 <_printf_float+0x428>
 801d1da:	2301      	movs	r3, #1
 801d1dc:	4642      	mov	r2, r8
 801d1de:	4631      	mov	r1, r6
 801d1e0:	4628      	mov	r0, r5
 801d1e2:	47b8      	blx	r7
 801d1e4:	3001      	adds	r0, #1
 801d1e6:	f43f ae76 	beq.w	801ced6 <_printf_float+0xb6>
 801d1ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d1ee:	4631      	mov	r1, r6
 801d1f0:	4628      	mov	r0, r5
 801d1f2:	47b8      	blx	r7
 801d1f4:	3001      	adds	r0, #1
 801d1f6:	f43f ae6e 	beq.w	801ced6 <_printf_float+0xb6>
 801d1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d1fe:	2200      	movs	r2, #0
 801d200:	2300      	movs	r3, #0
 801d202:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d206:	f7e3 fc37 	bl	8000a78 <__aeabi_dcmpeq>
 801d20a:	b9c0      	cbnz	r0, 801d23e <_printf_float+0x41e>
 801d20c:	4653      	mov	r3, sl
 801d20e:	f108 0201 	add.w	r2, r8, #1
 801d212:	4631      	mov	r1, r6
 801d214:	4628      	mov	r0, r5
 801d216:	47b8      	blx	r7
 801d218:	3001      	adds	r0, #1
 801d21a:	d10c      	bne.n	801d236 <_printf_float+0x416>
 801d21c:	e65b      	b.n	801ced6 <_printf_float+0xb6>
 801d21e:	2301      	movs	r3, #1
 801d220:	465a      	mov	r2, fp
 801d222:	4631      	mov	r1, r6
 801d224:	4628      	mov	r0, r5
 801d226:	47b8      	blx	r7
 801d228:	3001      	adds	r0, #1
 801d22a:	f43f ae54 	beq.w	801ced6 <_printf_float+0xb6>
 801d22e:	f108 0801 	add.w	r8, r8, #1
 801d232:	45d0      	cmp	r8, sl
 801d234:	dbf3      	blt.n	801d21e <_printf_float+0x3fe>
 801d236:	464b      	mov	r3, r9
 801d238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d23c:	e6df      	b.n	801cffe <_printf_float+0x1de>
 801d23e:	f04f 0800 	mov.w	r8, #0
 801d242:	f104 0b1a 	add.w	fp, r4, #26
 801d246:	e7f4      	b.n	801d232 <_printf_float+0x412>
 801d248:	2301      	movs	r3, #1
 801d24a:	4642      	mov	r2, r8
 801d24c:	e7e1      	b.n	801d212 <_printf_float+0x3f2>
 801d24e:	2301      	movs	r3, #1
 801d250:	464a      	mov	r2, r9
 801d252:	4631      	mov	r1, r6
 801d254:	4628      	mov	r0, r5
 801d256:	47b8      	blx	r7
 801d258:	3001      	adds	r0, #1
 801d25a:	f43f ae3c 	beq.w	801ced6 <_printf_float+0xb6>
 801d25e:	f108 0801 	add.w	r8, r8, #1
 801d262:	68e3      	ldr	r3, [r4, #12]
 801d264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d266:	1a5b      	subs	r3, r3, r1
 801d268:	4543      	cmp	r3, r8
 801d26a:	dcf0      	bgt.n	801d24e <_printf_float+0x42e>
 801d26c:	e6fc      	b.n	801d068 <_printf_float+0x248>
 801d26e:	f04f 0800 	mov.w	r8, #0
 801d272:	f104 0919 	add.w	r9, r4, #25
 801d276:	e7f4      	b.n	801d262 <_printf_float+0x442>

0801d278 <_printf_common>:
 801d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d27c:	4616      	mov	r6, r2
 801d27e:	4698      	mov	r8, r3
 801d280:	688a      	ldr	r2, [r1, #8]
 801d282:	690b      	ldr	r3, [r1, #16]
 801d284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d288:	4293      	cmp	r3, r2
 801d28a:	bfb8      	it	lt
 801d28c:	4613      	movlt	r3, r2
 801d28e:	6033      	str	r3, [r6, #0]
 801d290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d294:	4607      	mov	r7, r0
 801d296:	460c      	mov	r4, r1
 801d298:	b10a      	cbz	r2, 801d29e <_printf_common+0x26>
 801d29a:	3301      	adds	r3, #1
 801d29c:	6033      	str	r3, [r6, #0]
 801d29e:	6823      	ldr	r3, [r4, #0]
 801d2a0:	0699      	lsls	r1, r3, #26
 801d2a2:	bf42      	ittt	mi
 801d2a4:	6833      	ldrmi	r3, [r6, #0]
 801d2a6:	3302      	addmi	r3, #2
 801d2a8:	6033      	strmi	r3, [r6, #0]
 801d2aa:	6825      	ldr	r5, [r4, #0]
 801d2ac:	f015 0506 	ands.w	r5, r5, #6
 801d2b0:	d106      	bne.n	801d2c0 <_printf_common+0x48>
 801d2b2:	f104 0a19 	add.w	sl, r4, #25
 801d2b6:	68e3      	ldr	r3, [r4, #12]
 801d2b8:	6832      	ldr	r2, [r6, #0]
 801d2ba:	1a9b      	subs	r3, r3, r2
 801d2bc:	42ab      	cmp	r3, r5
 801d2be:	dc26      	bgt.n	801d30e <_printf_common+0x96>
 801d2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d2c4:	6822      	ldr	r2, [r4, #0]
 801d2c6:	3b00      	subs	r3, #0
 801d2c8:	bf18      	it	ne
 801d2ca:	2301      	movne	r3, #1
 801d2cc:	0692      	lsls	r2, r2, #26
 801d2ce:	d42b      	bmi.n	801d328 <_printf_common+0xb0>
 801d2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d2d4:	4641      	mov	r1, r8
 801d2d6:	4638      	mov	r0, r7
 801d2d8:	47c8      	blx	r9
 801d2da:	3001      	adds	r0, #1
 801d2dc:	d01e      	beq.n	801d31c <_printf_common+0xa4>
 801d2de:	6823      	ldr	r3, [r4, #0]
 801d2e0:	6922      	ldr	r2, [r4, #16]
 801d2e2:	f003 0306 	and.w	r3, r3, #6
 801d2e6:	2b04      	cmp	r3, #4
 801d2e8:	bf02      	ittt	eq
 801d2ea:	68e5      	ldreq	r5, [r4, #12]
 801d2ec:	6833      	ldreq	r3, [r6, #0]
 801d2ee:	1aed      	subeq	r5, r5, r3
 801d2f0:	68a3      	ldr	r3, [r4, #8]
 801d2f2:	bf0c      	ite	eq
 801d2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d2f8:	2500      	movne	r5, #0
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	bfc4      	itt	gt
 801d2fe:	1a9b      	subgt	r3, r3, r2
 801d300:	18ed      	addgt	r5, r5, r3
 801d302:	2600      	movs	r6, #0
 801d304:	341a      	adds	r4, #26
 801d306:	42b5      	cmp	r5, r6
 801d308:	d11a      	bne.n	801d340 <_printf_common+0xc8>
 801d30a:	2000      	movs	r0, #0
 801d30c:	e008      	b.n	801d320 <_printf_common+0xa8>
 801d30e:	2301      	movs	r3, #1
 801d310:	4652      	mov	r2, sl
 801d312:	4641      	mov	r1, r8
 801d314:	4638      	mov	r0, r7
 801d316:	47c8      	blx	r9
 801d318:	3001      	adds	r0, #1
 801d31a:	d103      	bne.n	801d324 <_printf_common+0xac>
 801d31c:	f04f 30ff 	mov.w	r0, #4294967295
 801d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d324:	3501      	adds	r5, #1
 801d326:	e7c6      	b.n	801d2b6 <_printf_common+0x3e>
 801d328:	18e1      	adds	r1, r4, r3
 801d32a:	1c5a      	adds	r2, r3, #1
 801d32c:	2030      	movs	r0, #48	@ 0x30
 801d32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d332:	4422      	add	r2, r4
 801d334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d33c:	3302      	adds	r3, #2
 801d33e:	e7c7      	b.n	801d2d0 <_printf_common+0x58>
 801d340:	2301      	movs	r3, #1
 801d342:	4622      	mov	r2, r4
 801d344:	4641      	mov	r1, r8
 801d346:	4638      	mov	r0, r7
 801d348:	47c8      	blx	r9
 801d34a:	3001      	adds	r0, #1
 801d34c:	d0e6      	beq.n	801d31c <_printf_common+0xa4>
 801d34e:	3601      	adds	r6, #1
 801d350:	e7d9      	b.n	801d306 <_printf_common+0x8e>
	...

0801d354 <_printf_i>:
 801d354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d358:	7e0f      	ldrb	r7, [r1, #24]
 801d35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d35c:	2f78      	cmp	r7, #120	@ 0x78
 801d35e:	4691      	mov	r9, r2
 801d360:	4680      	mov	r8, r0
 801d362:	460c      	mov	r4, r1
 801d364:	469a      	mov	sl, r3
 801d366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d36a:	d807      	bhi.n	801d37c <_printf_i+0x28>
 801d36c:	2f62      	cmp	r7, #98	@ 0x62
 801d36e:	d80a      	bhi.n	801d386 <_printf_i+0x32>
 801d370:	2f00      	cmp	r7, #0
 801d372:	f000 80d2 	beq.w	801d51a <_printf_i+0x1c6>
 801d376:	2f58      	cmp	r7, #88	@ 0x58
 801d378:	f000 80b9 	beq.w	801d4ee <_printf_i+0x19a>
 801d37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d384:	e03a      	b.n	801d3fc <_printf_i+0xa8>
 801d386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d38a:	2b15      	cmp	r3, #21
 801d38c:	d8f6      	bhi.n	801d37c <_printf_i+0x28>
 801d38e:	a101      	add	r1, pc, #4	@ (adr r1, 801d394 <_printf_i+0x40>)
 801d390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d394:	0801d3ed 	.word	0x0801d3ed
 801d398:	0801d401 	.word	0x0801d401
 801d39c:	0801d37d 	.word	0x0801d37d
 801d3a0:	0801d37d 	.word	0x0801d37d
 801d3a4:	0801d37d 	.word	0x0801d37d
 801d3a8:	0801d37d 	.word	0x0801d37d
 801d3ac:	0801d401 	.word	0x0801d401
 801d3b0:	0801d37d 	.word	0x0801d37d
 801d3b4:	0801d37d 	.word	0x0801d37d
 801d3b8:	0801d37d 	.word	0x0801d37d
 801d3bc:	0801d37d 	.word	0x0801d37d
 801d3c0:	0801d501 	.word	0x0801d501
 801d3c4:	0801d42b 	.word	0x0801d42b
 801d3c8:	0801d4bb 	.word	0x0801d4bb
 801d3cc:	0801d37d 	.word	0x0801d37d
 801d3d0:	0801d37d 	.word	0x0801d37d
 801d3d4:	0801d523 	.word	0x0801d523
 801d3d8:	0801d37d 	.word	0x0801d37d
 801d3dc:	0801d42b 	.word	0x0801d42b
 801d3e0:	0801d37d 	.word	0x0801d37d
 801d3e4:	0801d37d 	.word	0x0801d37d
 801d3e8:	0801d4c3 	.word	0x0801d4c3
 801d3ec:	6833      	ldr	r3, [r6, #0]
 801d3ee:	1d1a      	adds	r2, r3, #4
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	6032      	str	r2, [r6, #0]
 801d3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d3fc:	2301      	movs	r3, #1
 801d3fe:	e09d      	b.n	801d53c <_printf_i+0x1e8>
 801d400:	6833      	ldr	r3, [r6, #0]
 801d402:	6820      	ldr	r0, [r4, #0]
 801d404:	1d19      	adds	r1, r3, #4
 801d406:	6031      	str	r1, [r6, #0]
 801d408:	0606      	lsls	r6, r0, #24
 801d40a:	d501      	bpl.n	801d410 <_printf_i+0xbc>
 801d40c:	681d      	ldr	r5, [r3, #0]
 801d40e:	e003      	b.n	801d418 <_printf_i+0xc4>
 801d410:	0645      	lsls	r5, r0, #25
 801d412:	d5fb      	bpl.n	801d40c <_printf_i+0xb8>
 801d414:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d418:	2d00      	cmp	r5, #0
 801d41a:	da03      	bge.n	801d424 <_printf_i+0xd0>
 801d41c:	232d      	movs	r3, #45	@ 0x2d
 801d41e:	426d      	negs	r5, r5
 801d420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d424:	4859      	ldr	r0, [pc, #356]	@ (801d58c <_printf_i+0x238>)
 801d426:	230a      	movs	r3, #10
 801d428:	e011      	b.n	801d44e <_printf_i+0xfa>
 801d42a:	6821      	ldr	r1, [r4, #0]
 801d42c:	6833      	ldr	r3, [r6, #0]
 801d42e:	0608      	lsls	r0, r1, #24
 801d430:	f853 5b04 	ldr.w	r5, [r3], #4
 801d434:	d402      	bmi.n	801d43c <_printf_i+0xe8>
 801d436:	0649      	lsls	r1, r1, #25
 801d438:	bf48      	it	mi
 801d43a:	b2ad      	uxthmi	r5, r5
 801d43c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d43e:	4853      	ldr	r0, [pc, #332]	@ (801d58c <_printf_i+0x238>)
 801d440:	6033      	str	r3, [r6, #0]
 801d442:	bf14      	ite	ne
 801d444:	230a      	movne	r3, #10
 801d446:	2308      	moveq	r3, #8
 801d448:	2100      	movs	r1, #0
 801d44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d44e:	6866      	ldr	r6, [r4, #4]
 801d450:	60a6      	str	r6, [r4, #8]
 801d452:	2e00      	cmp	r6, #0
 801d454:	bfa2      	ittt	ge
 801d456:	6821      	ldrge	r1, [r4, #0]
 801d458:	f021 0104 	bicge.w	r1, r1, #4
 801d45c:	6021      	strge	r1, [r4, #0]
 801d45e:	b90d      	cbnz	r5, 801d464 <_printf_i+0x110>
 801d460:	2e00      	cmp	r6, #0
 801d462:	d04b      	beq.n	801d4fc <_printf_i+0x1a8>
 801d464:	4616      	mov	r6, r2
 801d466:	fbb5 f1f3 	udiv	r1, r5, r3
 801d46a:	fb03 5711 	mls	r7, r3, r1, r5
 801d46e:	5dc7      	ldrb	r7, [r0, r7]
 801d470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d474:	462f      	mov	r7, r5
 801d476:	42bb      	cmp	r3, r7
 801d478:	460d      	mov	r5, r1
 801d47a:	d9f4      	bls.n	801d466 <_printf_i+0x112>
 801d47c:	2b08      	cmp	r3, #8
 801d47e:	d10b      	bne.n	801d498 <_printf_i+0x144>
 801d480:	6823      	ldr	r3, [r4, #0]
 801d482:	07df      	lsls	r7, r3, #31
 801d484:	d508      	bpl.n	801d498 <_printf_i+0x144>
 801d486:	6923      	ldr	r3, [r4, #16]
 801d488:	6861      	ldr	r1, [r4, #4]
 801d48a:	4299      	cmp	r1, r3
 801d48c:	bfde      	ittt	le
 801d48e:	2330      	movle	r3, #48	@ 0x30
 801d490:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d494:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d498:	1b92      	subs	r2, r2, r6
 801d49a:	6122      	str	r2, [r4, #16]
 801d49c:	f8cd a000 	str.w	sl, [sp]
 801d4a0:	464b      	mov	r3, r9
 801d4a2:	aa03      	add	r2, sp, #12
 801d4a4:	4621      	mov	r1, r4
 801d4a6:	4640      	mov	r0, r8
 801d4a8:	f7ff fee6 	bl	801d278 <_printf_common>
 801d4ac:	3001      	adds	r0, #1
 801d4ae:	d14a      	bne.n	801d546 <_printf_i+0x1f2>
 801d4b0:	f04f 30ff 	mov.w	r0, #4294967295
 801d4b4:	b004      	add	sp, #16
 801d4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4ba:	6823      	ldr	r3, [r4, #0]
 801d4bc:	f043 0320 	orr.w	r3, r3, #32
 801d4c0:	6023      	str	r3, [r4, #0]
 801d4c2:	4833      	ldr	r0, [pc, #204]	@ (801d590 <_printf_i+0x23c>)
 801d4c4:	2778      	movs	r7, #120	@ 0x78
 801d4c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d4ca:	6823      	ldr	r3, [r4, #0]
 801d4cc:	6831      	ldr	r1, [r6, #0]
 801d4ce:	061f      	lsls	r7, r3, #24
 801d4d0:	f851 5b04 	ldr.w	r5, [r1], #4
 801d4d4:	d402      	bmi.n	801d4dc <_printf_i+0x188>
 801d4d6:	065f      	lsls	r7, r3, #25
 801d4d8:	bf48      	it	mi
 801d4da:	b2ad      	uxthmi	r5, r5
 801d4dc:	6031      	str	r1, [r6, #0]
 801d4de:	07d9      	lsls	r1, r3, #31
 801d4e0:	bf44      	itt	mi
 801d4e2:	f043 0320 	orrmi.w	r3, r3, #32
 801d4e6:	6023      	strmi	r3, [r4, #0]
 801d4e8:	b11d      	cbz	r5, 801d4f2 <_printf_i+0x19e>
 801d4ea:	2310      	movs	r3, #16
 801d4ec:	e7ac      	b.n	801d448 <_printf_i+0xf4>
 801d4ee:	4827      	ldr	r0, [pc, #156]	@ (801d58c <_printf_i+0x238>)
 801d4f0:	e7e9      	b.n	801d4c6 <_printf_i+0x172>
 801d4f2:	6823      	ldr	r3, [r4, #0]
 801d4f4:	f023 0320 	bic.w	r3, r3, #32
 801d4f8:	6023      	str	r3, [r4, #0]
 801d4fa:	e7f6      	b.n	801d4ea <_printf_i+0x196>
 801d4fc:	4616      	mov	r6, r2
 801d4fe:	e7bd      	b.n	801d47c <_printf_i+0x128>
 801d500:	6833      	ldr	r3, [r6, #0]
 801d502:	6825      	ldr	r5, [r4, #0]
 801d504:	6961      	ldr	r1, [r4, #20]
 801d506:	1d18      	adds	r0, r3, #4
 801d508:	6030      	str	r0, [r6, #0]
 801d50a:	062e      	lsls	r6, r5, #24
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	d501      	bpl.n	801d514 <_printf_i+0x1c0>
 801d510:	6019      	str	r1, [r3, #0]
 801d512:	e002      	b.n	801d51a <_printf_i+0x1c6>
 801d514:	0668      	lsls	r0, r5, #25
 801d516:	d5fb      	bpl.n	801d510 <_printf_i+0x1bc>
 801d518:	8019      	strh	r1, [r3, #0]
 801d51a:	2300      	movs	r3, #0
 801d51c:	6123      	str	r3, [r4, #16]
 801d51e:	4616      	mov	r6, r2
 801d520:	e7bc      	b.n	801d49c <_printf_i+0x148>
 801d522:	6833      	ldr	r3, [r6, #0]
 801d524:	1d1a      	adds	r2, r3, #4
 801d526:	6032      	str	r2, [r6, #0]
 801d528:	681e      	ldr	r6, [r3, #0]
 801d52a:	6862      	ldr	r2, [r4, #4]
 801d52c:	2100      	movs	r1, #0
 801d52e:	4630      	mov	r0, r6
 801d530:	f7e2 fe26 	bl	8000180 <memchr>
 801d534:	b108      	cbz	r0, 801d53a <_printf_i+0x1e6>
 801d536:	1b80      	subs	r0, r0, r6
 801d538:	6060      	str	r0, [r4, #4]
 801d53a:	6863      	ldr	r3, [r4, #4]
 801d53c:	6123      	str	r3, [r4, #16]
 801d53e:	2300      	movs	r3, #0
 801d540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d544:	e7aa      	b.n	801d49c <_printf_i+0x148>
 801d546:	6923      	ldr	r3, [r4, #16]
 801d548:	4632      	mov	r2, r6
 801d54a:	4649      	mov	r1, r9
 801d54c:	4640      	mov	r0, r8
 801d54e:	47d0      	blx	sl
 801d550:	3001      	adds	r0, #1
 801d552:	d0ad      	beq.n	801d4b0 <_printf_i+0x15c>
 801d554:	6823      	ldr	r3, [r4, #0]
 801d556:	079b      	lsls	r3, r3, #30
 801d558:	d413      	bmi.n	801d582 <_printf_i+0x22e>
 801d55a:	68e0      	ldr	r0, [r4, #12]
 801d55c:	9b03      	ldr	r3, [sp, #12]
 801d55e:	4298      	cmp	r0, r3
 801d560:	bfb8      	it	lt
 801d562:	4618      	movlt	r0, r3
 801d564:	e7a6      	b.n	801d4b4 <_printf_i+0x160>
 801d566:	2301      	movs	r3, #1
 801d568:	4632      	mov	r2, r6
 801d56a:	4649      	mov	r1, r9
 801d56c:	4640      	mov	r0, r8
 801d56e:	47d0      	blx	sl
 801d570:	3001      	adds	r0, #1
 801d572:	d09d      	beq.n	801d4b0 <_printf_i+0x15c>
 801d574:	3501      	adds	r5, #1
 801d576:	68e3      	ldr	r3, [r4, #12]
 801d578:	9903      	ldr	r1, [sp, #12]
 801d57a:	1a5b      	subs	r3, r3, r1
 801d57c:	42ab      	cmp	r3, r5
 801d57e:	dcf2      	bgt.n	801d566 <_printf_i+0x212>
 801d580:	e7eb      	b.n	801d55a <_printf_i+0x206>
 801d582:	2500      	movs	r5, #0
 801d584:	f104 0619 	add.w	r6, r4, #25
 801d588:	e7f5      	b.n	801d576 <_printf_i+0x222>
 801d58a:	bf00      	nop
 801d58c:	0802086e 	.word	0x0802086e
 801d590:	0802087f 	.word	0x0802087f

0801d594 <std>:
 801d594:	2300      	movs	r3, #0
 801d596:	b510      	push	{r4, lr}
 801d598:	4604      	mov	r4, r0
 801d59a:	e9c0 3300 	strd	r3, r3, [r0]
 801d59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d5a2:	6083      	str	r3, [r0, #8]
 801d5a4:	8181      	strh	r1, [r0, #12]
 801d5a6:	6643      	str	r3, [r0, #100]	@ 0x64
 801d5a8:	81c2      	strh	r2, [r0, #14]
 801d5aa:	6183      	str	r3, [r0, #24]
 801d5ac:	4619      	mov	r1, r3
 801d5ae:	2208      	movs	r2, #8
 801d5b0:	305c      	adds	r0, #92	@ 0x5c
 801d5b2:	f000 f9f9 	bl	801d9a8 <memset>
 801d5b6:	4b0d      	ldr	r3, [pc, #52]	@ (801d5ec <std+0x58>)
 801d5b8:	6263      	str	r3, [r4, #36]	@ 0x24
 801d5ba:	4b0d      	ldr	r3, [pc, #52]	@ (801d5f0 <std+0x5c>)
 801d5bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d5be:	4b0d      	ldr	r3, [pc, #52]	@ (801d5f4 <std+0x60>)
 801d5c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d5c2:	4b0d      	ldr	r3, [pc, #52]	@ (801d5f8 <std+0x64>)
 801d5c4:	6323      	str	r3, [r4, #48]	@ 0x30
 801d5c6:	4b0d      	ldr	r3, [pc, #52]	@ (801d5fc <std+0x68>)
 801d5c8:	6224      	str	r4, [r4, #32]
 801d5ca:	429c      	cmp	r4, r3
 801d5cc:	d006      	beq.n	801d5dc <std+0x48>
 801d5ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d5d2:	4294      	cmp	r4, r2
 801d5d4:	d002      	beq.n	801d5dc <std+0x48>
 801d5d6:	33d0      	adds	r3, #208	@ 0xd0
 801d5d8:	429c      	cmp	r4, r3
 801d5da:	d105      	bne.n	801d5e8 <std+0x54>
 801d5dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5e4:	f000 ba5c 	b.w	801daa0 <__retarget_lock_init_recursive>
 801d5e8:	bd10      	pop	{r4, pc}
 801d5ea:	bf00      	nop
 801d5ec:	0801d7f9 	.word	0x0801d7f9
 801d5f0:	0801d81b 	.word	0x0801d81b
 801d5f4:	0801d853 	.word	0x0801d853
 801d5f8:	0801d877 	.word	0x0801d877
 801d5fc:	200023b8 	.word	0x200023b8

0801d600 <stdio_exit_handler>:
 801d600:	4a02      	ldr	r2, [pc, #8]	@ (801d60c <stdio_exit_handler+0xc>)
 801d602:	4903      	ldr	r1, [pc, #12]	@ (801d610 <stdio_exit_handler+0x10>)
 801d604:	4803      	ldr	r0, [pc, #12]	@ (801d614 <stdio_exit_handler+0x14>)
 801d606:	f000 b869 	b.w	801d6dc <_fwalk_sglue>
 801d60a:	bf00      	nop
 801d60c:	20000140 	.word	0x20000140
 801d610:	0801f3c9 	.word	0x0801f3c9
 801d614:	20000150 	.word	0x20000150

0801d618 <cleanup_stdio>:
 801d618:	6841      	ldr	r1, [r0, #4]
 801d61a:	4b0c      	ldr	r3, [pc, #48]	@ (801d64c <cleanup_stdio+0x34>)
 801d61c:	4299      	cmp	r1, r3
 801d61e:	b510      	push	{r4, lr}
 801d620:	4604      	mov	r4, r0
 801d622:	d001      	beq.n	801d628 <cleanup_stdio+0x10>
 801d624:	f001 fed0 	bl	801f3c8 <_fflush_r>
 801d628:	68a1      	ldr	r1, [r4, #8]
 801d62a:	4b09      	ldr	r3, [pc, #36]	@ (801d650 <cleanup_stdio+0x38>)
 801d62c:	4299      	cmp	r1, r3
 801d62e:	d002      	beq.n	801d636 <cleanup_stdio+0x1e>
 801d630:	4620      	mov	r0, r4
 801d632:	f001 fec9 	bl	801f3c8 <_fflush_r>
 801d636:	68e1      	ldr	r1, [r4, #12]
 801d638:	4b06      	ldr	r3, [pc, #24]	@ (801d654 <cleanup_stdio+0x3c>)
 801d63a:	4299      	cmp	r1, r3
 801d63c:	d004      	beq.n	801d648 <cleanup_stdio+0x30>
 801d63e:	4620      	mov	r0, r4
 801d640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d644:	f001 bec0 	b.w	801f3c8 <_fflush_r>
 801d648:	bd10      	pop	{r4, pc}
 801d64a:	bf00      	nop
 801d64c:	200023b8 	.word	0x200023b8
 801d650:	20002420 	.word	0x20002420
 801d654:	20002488 	.word	0x20002488

0801d658 <global_stdio_init.part.0>:
 801d658:	b510      	push	{r4, lr}
 801d65a:	4b0b      	ldr	r3, [pc, #44]	@ (801d688 <global_stdio_init.part.0+0x30>)
 801d65c:	4c0b      	ldr	r4, [pc, #44]	@ (801d68c <global_stdio_init.part.0+0x34>)
 801d65e:	4a0c      	ldr	r2, [pc, #48]	@ (801d690 <global_stdio_init.part.0+0x38>)
 801d660:	601a      	str	r2, [r3, #0]
 801d662:	4620      	mov	r0, r4
 801d664:	2200      	movs	r2, #0
 801d666:	2104      	movs	r1, #4
 801d668:	f7ff ff94 	bl	801d594 <std>
 801d66c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d670:	2201      	movs	r2, #1
 801d672:	2109      	movs	r1, #9
 801d674:	f7ff ff8e 	bl	801d594 <std>
 801d678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d67c:	2202      	movs	r2, #2
 801d67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d682:	2112      	movs	r1, #18
 801d684:	f7ff bf86 	b.w	801d594 <std>
 801d688:	200024f0 	.word	0x200024f0
 801d68c:	200023b8 	.word	0x200023b8
 801d690:	0801d601 	.word	0x0801d601

0801d694 <__sfp_lock_acquire>:
 801d694:	4801      	ldr	r0, [pc, #4]	@ (801d69c <__sfp_lock_acquire+0x8>)
 801d696:	f000 ba04 	b.w	801daa2 <__retarget_lock_acquire_recursive>
 801d69a:	bf00      	nop
 801d69c:	200024f9 	.word	0x200024f9

0801d6a0 <__sfp_lock_release>:
 801d6a0:	4801      	ldr	r0, [pc, #4]	@ (801d6a8 <__sfp_lock_release+0x8>)
 801d6a2:	f000 b9ff 	b.w	801daa4 <__retarget_lock_release_recursive>
 801d6a6:	bf00      	nop
 801d6a8:	200024f9 	.word	0x200024f9

0801d6ac <__sinit>:
 801d6ac:	b510      	push	{r4, lr}
 801d6ae:	4604      	mov	r4, r0
 801d6b0:	f7ff fff0 	bl	801d694 <__sfp_lock_acquire>
 801d6b4:	6a23      	ldr	r3, [r4, #32]
 801d6b6:	b11b      	cbz	r3, 801d6c0 <__sinit+0x14>
 801d6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6bc:	f7ff bff0 	b.w	801d6a0 <__sfp_lock_release>
 801d6c0:	4b04      	ldr	r3, [pc, #16]	@ (801d6d4 <__sinit+0x28>)
 801d6c2:	6223      	str	r3, [r4, #32]
 801d6c4:	4b04      	ldr	r3, [pc, #16]	@ (801d6d8 <__sinit+0x2c>)
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d1f5      	bne.n	801d6b8 <__sinit+0xc>
 801d6cc:	f7ff ffc4 	bl	801d658 <global_stdio_init.part.0>
 801d6d0:	e7f2      	b.n	801d6b8 <__sinit+0xc>
 801d6d2:	bf00      	nop
 801d6d4:	0801d619 	.word	0x0801d619
 801d6d8:	200024f0 	.word	0x200024f0

0801d6dc <_fwalk_sglue>:
 801d6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6e0:	4607      	mov	r7, r0
 801d6e2:	4688      	mov	r8, r1
 801d6e4:	4614      	mov	r4, r2
 801d6e6:	2600      	movs	r6, #0
 801d6e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d6ec:	f1b9 0901 	subs.w	r9, r9, #1
 801d6f0:	d505      	bpl.n	801d6fe <_fwalk_sglue+0x22>
 801d6f2:	6824      	ldr	r4, [r4, #0]
 801d6f4:	2c00      	cmp	r4, #0
 801d6f6:	d1f7      	bne.n	801d6e8 <_fwalk_sglue+0xc>
 801d6f8:	4630      	mov	r0, r6
 801d6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6fe:	89ab      	ldrh	r3, [r5, #12]
 801d700:	2b01      	cmp	r3, #1
 801d702:	d907      	bls.n	801d714 <_fwalk_sglue+0x38>
 801d704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d708:	3301      	adds	r3, #1
 801d70a:	d003      	beq.n	801d714 <_fwalk_sglue+0x38>
 801d70c:	4629      	mov	r1, r5
 801d70e:	4638      	mov	r0, r7
 801d710:	47c0      	blx	r8
 801d712:	4306      	orrs	r6, r0
 801d714:	3568      	adds	r5, #104	@ 0x68
 801d716:	e7e9      	b.n	801d6ec <_fwalk_sglue+0x10>

0801d718 <iprintf>:
 801d718:	b40f      	push	{r0, r1, r2, r3}
 801d71a:	b507      	push	{r0, r1, r2, lr}
 801d71c:	4906      	ldr	r1, [pc, #24]	@ (801d738 <iprintf+0x20>)
 801d71e:	ab04      	add	r3, sp, #16
 801d720:	6808      	ldr	r0, [r1, #0]
 801d722:	f853 2b04 	ldr.w	r2, [r3], #4
 801d726:	6881      	ldr	r1, [r0, #8]
 801d728:	9301      	str	r3, [sp, #4]
 801d72a:	f001 fcb5 	bl	801f098 <_vfiprintf_r>
 801d72e:	b003      	add	sp, #12
 801d730:	f85d eb04 	ldr.w	lr, [sp], #4
 801d734:	b004      	add	sp, #16
 801d736:	4770      	bx	lr
 801d738:	2000014c 	.word	0x2000014c

0801d73c <_puts_r>:
 801d73c:	6a03      	ldr	r3, [r0, #32]
 801d73e:	b570      	push	{r4, r5, r6, lr}
 801d740:	6884      	ldr	r4, [r0, #8]
 801d742:	4605      	mov	r5, r0
 801d744:	460e      	mov	r6, r1
 801d746:	b90b      	cbnz	r3, 801d74c <_puts_r+0x10>
 801d748:	f7ff ffb0 	bl	801d6ac <__sinit>
 801d74c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d74e:	07db      	lsls	r3, r3, #31
 801d750:	d405      	bmi.n	801d75e <_puts_r+0x22>
 801d752:	89a3      	ldrh	r3, [r4, #12]
 801d754:	0598      	lsls	r0, r3, #22
 801d756:	d402      	bmi.n	801d75e <_puts_r+0x22>
 801d758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d75a:	f000 f9a2 	bl	801daa2 <__retarget_lock_acquire_recursive>
 801d75e:	89a3      	ldrh	r3, [r4, #12]
 801d760:	0719      	lsls	r1, r3, #28
 801d762:	d502      	bpl.n	801d76a <_puts_r+0x2e>
 801d764:	6923      	ldr	r3, [r4, #16]
 801d766:	2b00      	cmp	r3, #0
 801d768:	d135      	bne.n	801d7d6 <_puts_r+0x9a>
 801d76a:	4621      	mov	r1, r4
 801d76c:	4628      	mov	r0, r5
 801d76e:	f000 f8c5 	bl	801d8fc <__swsetup_r>
 801d772:	b380      	cbz	r0, 801d7d6 <_puts_r+0x9a>
 801d774:	f04f 35ff 	mov.w	r5, #4294967295
 801d778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d77a:	07da      	lsls	r2, r3, #31
 801d77c:	d405      	bmi.n	801d78a <_puts_r+0x4e>
 801d77e:	89a3      	ldrh	r3, [r4, #12]
 801d780:	059b      	lsls	r3, r3, #22
 801d782:	d402      	bmi.n	801d78a <_puts_r+0x4e>
 801d784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d786:	f000 f98d 	bl	801daa4 <__retarget_lock_release_recursive>
 801d78a:	4628      	mov	r0, r5
 801d78c:	bd70      	pop	{r4, r5, r6, pc}
 801d78e:	2b00      	cmp	r3, #0
 801d790:	da04      	bge.n	801d79c <_puts_r+0x60>
 801d792:	69a2      	ldr	r2, [r4, #24]
 801d794:	429a      	cmp	r2, r3
 801d796:	dc17      	bgt.n	801d7c8 <_puts_r+0x8c>
 801d798:	290a      	cmp	r1, #10
 801d79a:	d015      	beq.n	801d7c8 <_puts_r+0x8c>
 801d79c:	6823      	ldr	r3, [r4, #0]
 801d79e:	1c5a      	adds	r2, r3, #1
 801d7a0:	6022      	str	r2, [r4, #0]
 801d7a2:	7019      	strb	r1, [r3, #0]
 801d7a4:	68a3      	ldr	r3, [r4, #8]
 801d7a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d7aa:	3b01      	subs	r3, #1
 801d7ac:	60a3      	str	r3, [r4, #8]
 801d7ae:	2900      	cmp	r1, #0
 801d7b0:	d1ed      	bne.n	801d78e <_puts_r+0x52>
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	da11      	bge.n	801d7da <_puts_r+0x9e>
 801d7b6:	4622      	mov	r2, r4
 801d7b8:	210a      	movs	r1, #10
 801d7ba:	4628      	mov	r0, r5
 801d7bc:	f000 f85f 	bl	801d87e <__swbuf_r>
 801d7c0:	3001      	adds	r0, #1
 801d7c2:	d0d7      	beq.n	801d774 <_puts_r+0x38>
 801d7c4:	250a      	movs	r5, #10
 801d7c6:	e7d7      	b.n	801d778 <_puts_r+0x3c>
 801d7c8:	4622      	mov	r2, r4
 801d7ca:	4628      	mov	r0, r5
 801d7cc:	f000 f857 	bl	801d87e <__swbuf_r>
 801d7d0:	3001      	adds	r0, #1
 801d7d2:	d1e7      	bne.n	801d7a4 <_puts_r+0x68>
 801d7d4:	e7ce      	b.n	801d774 <_puts_r+0x38>
 801d7d6:	3e01      	subs	r6, #1
 801d7d8:	e7e4      	b.n	801d7a4 <_puts_r+0x68>
 801d7da:	6823      	ldr	r3, [r4, #0]
 801d7dc:	1c5a      	adds	r2, r3, #1
 801d7de:	6022      	str	r2, [r4, #0]
 801d7e0:	220a      	movs	r2, #10
 801d7e2:	701a      	strb	r2, [r3, #0]
 801d7e4:	e7ee      	b.n	801d7c4 <_puts_r+0x88>
	...

0801d7e8 <puts>:
 801d7e8:	4b02      	ldr	r3, [pc, #8]	@ (801d7f4 <puts+0xc>)
 801d7ea:	4601      	mov	r1, r0
 801d7ec:	6818      	ldr	r0, [r3, #0]
 801d7ee:	f7ff bfa5 	b.w	801d73c <_puts_r>
 801d7f2:	bf00      	nop
 801d7f4:	2000014c 	.word	0x2000014c

0801d7f8 <__sread>:
 801d7f8:	b510      	push	{r4, lr}
 801d7fa:	460c      	mov	r4, r1
 801d7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d800:	f000 f900 	bl	801da04 <_read_r>
 801d804:	2800      	cmp	r0, #0
 801d806:	bfab      	itete	ge
 801d808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d80a:	89a3      	ldrhlt	r3, [r4, #12]
 801d80c:	181b      	addge	r3, r3, r0
 801d80e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d812:	bfac      	ite	ge
 801d814:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d816:	81a3      	strhlt	r3, [r4, #12]
 801d818:	bd10      	pop	{r4, pc}

0801d81a <__swrite>:
 801d81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d81e:	461f      	mov	r7, r3
 801d820:	898b      	ldrh	r3, [r1, #12]
 801d822:	05db      	lsls	r3, r3, #23
 801d824:	4605      	mov	r5, r0
 801d826:	460c      	mov	r4, r1
 801d828:	4616      	mov	r6, r2
 801d82a:	d505      	bpl.n	801d838 <__swrite+0x1e>
 801d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d830:	2302      	movs	r3, #2
 801d832:	2200      	movs	r2, #0
 801d834:	f000 f8d4 	bl	801d9e0 <_lseek_r>
 801d838:	89a3      	ldrh	r3, [r4, #12]
 801d83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d83e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d842:	81a3      	strh	r3, [r4, #12]
 801d844:	4632      	mov	r2, r6
 801d846:	463b      	mov	r3, r7
 801d848:	4628      	mov	r0, r5
 801d84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d84e:	f000 b8eb 	b.w	801da28 <_write_r>

0801d852 <__sseek>:
 801d852:	b510      	push	{r4, lr}
 801d854:	460c      	mov	r4, r1
 801d856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d85a:	f000 f8c1 	bl	801d9e0 <_lseek_r>
 801d85e:	1c43      	adds	r3, r0, #1
 801d860:	89a3      	ldrh	r3, [r4, #12]
 801d862:	bf15      	itete	ne
 801d864:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d86a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d86e:	81a3      	strheq	r3, [r4, #12]
 801d870:	bf18      	it	ne
 801d872:	81a3      	strhne	r3, [r4, #12]
 801d874:	bd10      	pop	{r4, pc}

0801d876 <__sclose>:
 801d876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d87a:	f000 b8a1 	b.w	801d9c0 <_close_r>

0801d87e <__swbuf_r>:
 801d87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d880:	460e      	mov	r6, r1
 801d882:	4614      	mov	r4, r2
 801d884:	4605      	mov	r5, r0
 801d886:	b118      	cbz	r0, 801d890 <__swbuf_r+0x12>
 801d888:	6a03      	ldr	r3, [r0, #32]
 801d88a:	b90b      	cbnz	r3, 801d890 <__swbuf_r+0x12>
 801d88c:	f7ff ff0e 	bl	801d6ac <__sinit>
 801d890:	69a3      	ldr	r3, [r4, #24]
 801d892:	60a3      	str	r3, [r4, #8]
 801d894:	89a3      	ldrh	r3, [r4, #12]
 801d896:	071a      	lsls	r2, r3, #28
 801d898:	d501      	bpl.n	801d89e <__swbuf_r+0x20>
 801d89a:	6923      	ldr	r3, [r4, #16]
 801d89c:	b943      	cbnz	r3, 801d8b0 <__swbuf_r+0x32>
 801d89e:	4621      	mov	r1, r4
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	f000 f82b 	bl	801d8fc <__swsetup_r>
 801d8a6:	b118      	cbz	r0, 801d8b0 <__swbuf_r+0x32>
 801d8a8:	f04f 37ff 	mov.w	r7, #4294967295
 801d8ac:	4638      	mov	r0, r7
 801d8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8b0:	6823      	ldr	r3, [r4, #0]
 801d8b2:	6922      	ldr	r2, [r4, #16]
 801d8b4:	1a98      	subs	r0, r3, r2
 801d8b6:	6963      	ldr	r3, [r4, #20]
 801d8b8:	b2f6      	uxtb	r6, r6
 801d8ba:	4283      	cmp	r3, r0
 801d8bc:	4637      	mov	r7, r6
 801d8be:	dc05      	bgt.n	801d8cc <__swbuf_r+0x4e>
 801d8c0:	4621      	mov	r1, r4
 801d8c2:	4628      	mov	r0, r5
 801d8c4:	f001 fd80 	bl	801f3c8 <_fflush_r>
 801d8c8:	2800      	cmp	r0, #0
 801d8ca:	d1ed      	bne.n	801d8a8 <__swbuf_r+0x2a>
 801d8cc:	68a3      	ldr	r3, [r4, #8]
 801d8ce:	3b01      	subs	r3, #1
 801d8d0:	60a3      	str	r3, [r4, #8]
 801d8d2:	6823      	ldr	r3, [r4, #0]
 801d8d4:	1c5a      	adds	r2, r3, #1
 801d8d6:	6022      	str	r2, [r4, #0]
 801d8d8:	701e      	strb	r6, [r3, #0]
 801d8da:	6962      	ldr	r2, [r4, #20]
 801d8dc:	1c43      	adds	r3, r0, #1
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d004      	beq.n	801d8ec <__swbuf_r+0x6e>
 801d8e2:	89a3      	ldrh	r3, [r4, #12]
 801d8e4:	07db      	lsls	r3, r3, #31
 801d8e6:	d5e1      	bpl.n	801d8ac <__swbuf_r+0x2e>
 801d8e8:	2e0a      	cmp	r6, #10
 801d8ea:	d1df      	bne.n	801d8ac <__swbuf_r+0x2e>
 801d8ec:	4621      	mov	r1, r4
 801d8ee:	4628      	mov	r0, r5
 801d8f0:	f001 fd6a 	bl	801f3c8 <_fflush_r>
 801d8f4:	2800      	cmp	r0, #0
 801d8f6:	d0d9      	beq.n	801d8ac <__swbuf_r+0x2e>
 801d8f8:	e7d6      	b.n	801d8a8 <__swbuf_r+0x2a>
	...

0801d8fc <__swsetup_r>:
 801d8fc:	b538      	push	{r3, r4, r5, lr}
 801d8fe:	4b29      	ldr	r3, [pc, #164]	@ (801d9a4 <__swsetup_r+0xa8>)
 801d900:	4605      	mov	r5, r0
 801d902:	6818      	ldr	r0, [r3, #0]
 801d904:	460c      	mov	r4, r1
 801d906:	b118      	cbz	r0, 801d910 <__swsetup_r+0x14>
 801d908:	6a03      	ldr	r3, [r0, #32]
 801d90a:	b90b      	cbnz	r3, 801d910 <__swsetup_r+0x14>
 801d90c:	f7ff fece 	bl	801d6ac <__sinit>
 801d910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d914:	0719      	lsls	r1, r3, #28
 801d916:	d422      	bmi.n	801d95e <__swsetup_r+0x62>
 801d918:	06da      	lsls	r2, r3, #27
 801d91a:	d407      	bmi.n	801d92c <__swsetup_r+0x30>
 801d91c:	2209      	movs	r2, #9
 801d91e:	602a      	str	r2, [r5, #0]
 801d920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d924:	81a3      	strh	r3, [r4, #12]
 801d926:	f04f 30ff 	mov.w	r0, #4294967295
 801d92a:	e033      	b.n	801d994 <__swsetup_r+0x98>
 801d92c:	0758      	lsls	r0, r3, #29
 801d92e:	d512      	bpl.n	801d956 <__swsetup_r+0x5a>
 801d930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d932:	b141      	cbz	r1, 801d946 <__swsetup_r+0x4a>
 801d934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d938:	4299      	cmp	r1, r3
 801d93a:	d002      	beq.n	801d942 <__swsetup_r+0x46>
 801d93c:	4628      	mov	r0, r5
 801d93e:	f000 ff03 	bl	801e748 <_free_r>
 801d942:	2300      	movs	r3, #0
 801d944:	6363      	str	r3, [r4, #52]	@ 0x34
 801d946:	89a3      	ldrh	r3, [r4, #12]
 801d948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d94c:	81a3      	strh	r3, [r4, #12]
 801d94e:	2300      	movs	r3, #0
 801d950:	6063      	str	r3, [r4, #4]
 801d952:	6923      	ldr	r3, [r4, #16]
 801d954:	6023      	str	r3, [r4, #0]
 801d956:	89a3      	ldrh	r3, [r4, #12]
 801d958:	f043 0308 	orr.w	r3, r3, #8
 801d95c:	81a3      	strh	r3, [r4, #12]
 801d95e:	6923      	ldr	r3, [r4, #16]
 801d960:	b94b      	cbnz	r3, 801d976 <__swsetup_r+0x7a>
 801d962:	89a3      	ldrh	r3, [r4, #12]
 801d964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d96c:	d003      	beq.n	801d976 <__swsetup_r+0x7a>
 801d96e:	4621      	mov	r1, r4
 801d970:	4628      	mov	r0, r5
 801d972:	f001 fd77 	bl	801f464 <__smakebuf_r>
 801d976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d97a:	f013 0201 	ands.w	r2, r3, #1
 801d97e:	d00a      	beq.n	801d996 <__swsetup_r+0x9a>
 801d980:	2200      	movs	r2, #0
 801d982:	60a2      	str	r2, [r4, #8]
 801d984:	6962      	ldr	r2, [r4, #20]
 801d986:	4252      	negs	r2, r2
 801d988:	61a2      	str	r2, [r4, #24]
 801d98a:	6922      	ldr	r2, [r4, #16]
 801d98c:	b942      	cbnz	r2, 801d9a0 <__swsetup_r+0xa4>
 801d98e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d992:	d1c5      	bne.n	801d920 <__swsetup_r+0x24>
 801d994:	bd38      	pop	{r3, r4, r5, pc}
 801d996:	0799      	lsls	r1, r3, #30
 801d998:	bf58      	it	pl
 801d99a:	6962      	ldrpl	r2, [r4, #20]
 801d99c:	60a2      	str	r2, [r4, #8]
 801d99e:	e7f4      	b.n	801d98a <__swsetup_r+0x8e>
 801d9a0:	2000      	movs	r0, #0
 801d9a2:	e7f7      	b.n	801d994 <__swsetup_r+0x98>
 801d9a4:	2000014c 	.word	0x2000014c

0801d9a8 <memset>:
 801d9a8:	4402      	add	r2, r0
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d100      	bne.n	801d9b2 <memset+0xa>
 801d9b0:	4770      	bx	lr
 801d9b2:	f803 1b01 	strb.w	r1, [r3], #1
 801d9b6:	e7f9      	b.n	801d9ac <memset+0x4>

0801d9b8 <_localeconv_r>:
 801d9b8:	4800      	ldr	r0, [pc, #0]	@ (801d9bc <_localeconv_r+0x4>)
 801d9ba:	4770      	bx	lr
 801d9bc:	2000028c 	.word	0x2000028c

0801d9c0 <_close_r>:
 801d9c0:	b538      	push	{r3, r4, r5, lr}
 801d9c2:	4d06      	ldr	r5, [pc, #24]	@ (801d9dc <_close_r+0x1c>)
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	4604      	mov	r4, r0
 801d9c8:	4608      	mov	r0, r1
 801d9ca:	602b      	str	r3, [r5, #0]
 801d9cc:	f7e5 f886 	bl	8002adc <_close>
 801d9d0:	1c43      	adds	r3, r0, #1
 801d9d2:	d102      	bne.n	801d9da <_close_r+0x1a>
 801d9d4:	682b      	ldr	r3, [r5, #0]
 801d9d6:	b103      	cbz	r3, 801d9da <_close_r+0x1a>
 801d9d8:	6023      	str	r3, [r4, #0]
 801d9da:	bd38      	pop	{r3, r4, r5, pc}
 801d9dc:	200024f4 	.word	0x200024f4

0801d9e0 <_lseek_r>:
 801d9e0:	b538      	push	{r3, r4, r5, lr}
 801d9e2:	4d07      	ldr	r5, [pc, #28]	@ (801da00 <_lseek_r+0x20>)
 801d9e4:	4604      	mov	r4, r0
 801d9e6:	4608      	mov	r0, r1
 801d9e8:	4611      	mov	r1, r2
 801d9ea:	2200      	movs	r2, #0
 801d9ec:	602a      	str	r2, [r5, #0]
 801d9ee:	461a      	mov	r2, r3
 801d9f0:	f7e5 f898 	bl	8002b24 <_lseek>
 801d9f4:	1c43      	adds	r3, r0, #1
 801d9f6:	d102      	bne.n	801d9fe <_lseek_r+0x1e>
 801d9f8:	682b      	ldr	r3, [r5, #0]
 801d9fa:	b103      	cbz	r3, 801d9fe <_lseek_r+0x1e>
 801d9fc:	6023      	str	r3, [r4, #0]
 801d9fe:	bd38      	pop	{r3, r4, r5, pc}
 801da00:	200024f4 	.word	0x200024f4

0801da04 <_read_r>:
 801da04:	b538      	push	{r3, r4, r5, lr}
 801da06:	4d07      	ldr	r5, [pc, #28]	@ (801da24 <_read_r+0x20>)
 801da08:	4604      	mov	r4, r0
 801da0a:	4608      	mov	r0, r1
 801da0c:	4611      	mov	r1, r2
 801da0e:	2200      	movs	r2, #0
 801da10:	602a      	str	r2, [r5, #0]
 801da12:	461a      	mov	r2, r3
 801da14:	f7e5 f829 	bl	8002a6a <_read>
 801da18:	1c43      	adds	r3, r0, #1
 801da1a:	d102      	bne.n	801da22 <_read_r+0x1e>
 801da1c:	682b      	ldr	r3, [r5, #0]
 801da1e:	b103      	cbz	r3, 801da22 <_read_r+0x1e>
 801da20:	6023      	str	r3, [r4, #0]
 801da22:	bd38      	pop	{r3, r4, r5, pc}
 801da24:	200024f4 	.word	0x200024f4

0801da28 <_write_r>:
 801da28:	b538      	push	{r3, r4, r5, lr}
 801da2a:	4d07      	ldr	r5, [pc, #28]	@ (801da48 <_write_r+0x20>)
 801da2c:	4604      	mov	r4, r0
 801da2e:	4608      	mov	r0, r1
 801da30:	4611      	mov	r1, r2
 801da32:	2200      	movs	r2, #0
 801da34:	602a      	str	r2, [r5, #0]
 801da36:	461a      	mov	r2, r3
 801da38:	f7e5 f834 	bl	8002aa4 <_write>
 801da3c:	1c43      	adds	r3, r0, #1
 801da3e:	d102      	bne.n	801da46 <_write_r+0x1e>
 801da40:	682b      	ldr	r3, [r5, #0]
 801da42:	b103      	cbz	r3, 801da46 <_write_r+0x1e>
 801da44:	6023      	str	r3, [r4, #0]
 801da46:	bd38      	pop	{r3, r4, r5, pc}
 801da48:	200024f4 	.word	0x200024f4

0801da4c <__errno>:
 801da4c:	4b01      	ldr	r3, [pc, #4]	@ (801da54 <__errno+0x8>)
 801da4e:	6818      	ldr	r0, [r3, #0]
 801da50:	4770      	bx	lr
 801da52:	bf00      	nop
 801da54:	2000014c 	.word	0x2000014c

0801da58 <__libc_init_array>:
 801da58:	b570      	push	{r4, r5, r6, lr}
 801da5a:	4d0d      	ldr	r5, [pc, #52]	@ (801da90 <__libc_init_array+0x38>)
 801da5c:	4c0d      	ldr	r4, [pc, #52]	@ (801da94 <__libc_init_array+0x3c>)
 801da5e:	1b64      	subs	r4, r4, r5
 801da60:	10a4      	asrs	r4, r4, #2
 801da62:	2600      	movs	r6, #0
 801da64:	42a6      	cmp	r6, r4
 801da66:	d109      	bne.n	801da7c <__libc_init_array+0x24>
 801da68:	4d0b      	ldr	r5, [pc, #44]	@ (801da98 <__libc_init_array+0x40>)
 801da6a:	4c0c      	ldr	r4, [pc, #48]	@ (801da9c <__libc_init_array+0x44>)
 801da6c:	f001 fea8 	bl	801f7c0 <_init>
 801da70:	1b64      	subs	r4, r4, r5
 801da72:	10a4      	asrs	r4, r4, #2
 801da74:	2600      	movs	r6, #0
 801da76:	42a6      	cmp	r6, r4
 801da78:	d105      	bne.n	801da86 <__libc_init_array+0x2e>
 801da7a:	bd70      	pop	{r4, r5, r6, pc}
 801da7c:	f855 3b04 	ldr.w	r3, [r5], #4
 801da80:	4798      	blx	r3
 801da82:	3601      	adds	r6, #1
 801da84:	e7ee      	b.n	801da64 <__libc_init_array+0xc>
 801da86:	f855 3b04 	ldr.w	r3, [r5], #4
 801da8a:	4798      	blx	r3
 801da8c:	3601      	adds	r6, #1
 801da8e:	e7f2      	b.n	801da76 <__libc_init_array+0x1e>
 801da90:	08020c98 	.word	0x08020c98
 801da94:	08020c98 	.word	0x08020c98
 801da98:	08020c98 	.word	0x08020c98
 801da9c:	08020c9c 	.word	0x08020c9c

0801daa0 <__retarget_lock_init_recursive>:
 801daa0:	4770      	bx	lr

0801daa2 <__retarget_lock_acquire_recursive>:
 801daa2:	4770      	bx	lr

0801daa4 <__retarget_lock_release_recursive>:
 801daa4:	4770      	bx	lr

0801daa6 <quorem>:
 801daa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daaa:	6903      	ldr	r3, [r0, #16]
 801daac:	690c      	ldr	r4, [r1, #16]
 801daae:	42a3      	cmp	r3, r4
 801dab0:	4607      	mov	r7, r0
 801dab2:	db7e      	blt.n	801dbb2 <quorem+0x10c>
 801dab4:	3c01      	subs	r4, #1
 801dab6:	f101 0814 	add.w	r8, r1, #20
 801daba:	00a3      	lsls	r3, r4, #2
 801dabc:	f100 0514 	add.w	r5, r0, #20
 801dac0:	9300      	str	r3, [sp, #0]
 801dac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dac6:	9301      	str	r3, [sp, #4]
 801dac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801dacc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dad0:	3301      	adds	r3, #1
 801dad2:	429a      	cmp	r2, r3
 801dad4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dad8:	fbb2 f6f3 	udiv	r6, r2, r3
 801dadc:	d32e      	bcc.n	801db3c <quorem+0x96>
 801dade:	f04f 0a00 	mov.w	sl, #0
 801dae2:	46c4      	mov	ip, r8
 801dae4:	46ae      	mov	lr, r5
 801dae6:	46d3      	mov	fp, sl
 801dae8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801daec:	b298      	uxth	r0, r3
 801daee:	fb06 a000 	mla	r0, r6, r0, sl
 801daf2:	0c02      	lsrs	r2, r0, #16
 801daf4:	0c1b      	lsrs	r3, r3, #16
 801daf6:	fb06 2303 	mla	r3, r6, r3, r2
 801dafa:	f8de 2000 	ldr.w	r2, [lr]
 801dafe:	b280      	uxth	r0, r0
 801db00:	b292      	uxth	r2, r2
 801db02:	1a12      	subs	r2, r2, r0
 801db04:	445a      	add	r2, fp
 801db06:	f8de 0000 	ldr.w	r0, [lr]
 801db0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801db0e:	b29b      	uxth	r3, r3
 801db10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801db14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801db18:	b292      	uxth	r2, r2
 801db1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801db1e:	45e1      	cmp	r9, ip
 801db20:	f84e 2b04 	str.w	r2, [lr], #4
 801db24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801db28:	d2de      	bcs.n	801dae8 <quorem+0x42>
 801db2a:	9b00      	ldr	r3, [sp, #0]
 801db2c:	58eb      	ldr	r3, [r5, r3]
 801db2e:	b92b      	cbnz	r3, 801db3c <quorem+0x96>
 801db30:	9b01      	ldr	r3, [sp, #4]
 801db32:	3b04      	subs	r3, #4
 801db34:	429d      	cmp	r5, r3
 801db36:	461a      	mov	r2, r3
 801db38:	d32f      	bcc.n	801db9a <quorem+0xf4>
 801db3a:	613c      	str	r4, [r7, #16]
 801db3c:	4638      	mov	r0, r7
 801db3e:	f001 f97d 	bl	801ee3c <__mcmp>
 801db42:	2800      	cmp	r0, #0
 801db44:	db25      	blt.n	801db92 <quorem+0xec>
 801db46:	4629      	mov	r1, r5
 801db48:	2000      	movs	r0, #0
 801db4a:	f858 2b04 	ldr.w	r2, [r8], #4
 801db4e:	f8d1 c000 	ldr.w	ip, [r1]
 801db52:	fa1f fe82 	uxth.w	lr, r2
 801db56:	fa1f f38c 	uxth.w	r3, ip
 801db5a:	eba3 030e 	sub.w	r3, r3, lr
 801db5e:	4403      	add	r3, r0
 801db60:	0c12      	lsrs	r2, r2, #16
 801db62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801db66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801db6a:	b29b      	uxth	r3, r3
 801db6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801db70:	45c1      	cmp	r9, r8
 801db72:	f841 3b04 	str.w	r3, [r1], #4
 801db76:	ea4f 4022 	mov.w	r0, r2, asr #16
 801db7a:	d2e6      	bcs.n	801db4a <quorem+0xa4>
 801db7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801db80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801db84:	b922      	cbnz	r2, 801db90 <quorem+0xea>
 801db86:	3b04      	subs	r3, #4
 801db88:	429d      	cmp	r5, r3
 801db8a:	461a      	mov	r2, r3
 801db8c:	d30b      	bcc.n	801dba6 <quorem+0x100>
 801db8e:	613c      	str	r4, [r7, #16]
 801db90:	3601      	adds	r6, #1
 801db92:	4630      	mov	r0, r6
 801db94:	b003      	add	sp, #12
 801db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db9a:	6812      	ldr	r2, [r2, #0]
 801db9c:	3b04      	subs	r3, #4
 801db9e:	2a00      	cmp	r2, #0
 801dba0:	d1cb      	bne.n	801db3a <quorem+0x94>
 801dba2:	3c01      	subs	r4, #1
 801dba4:	e7c6      	b.n	801db34 <quorem+0x8e>
 801dba6:	6812      	ldr	r2, [r2, #0]
 801dba8:	3b04      	subs	r3, #4
 801dbaa:	2a00      	cmp	r2, #0
 801dbac:	d1ef      	bne.n	801db8e <quorem+0xe8>
 801dbae:	3c01      	subs	r4, #1
 801dbb0:	e7ea      	b.n	801db88 <quorem+0xe2>
 801dbb2:	2000      	movs	r0, #0
 801dbb4:	e7ee      	b.n	801db94 <quorem+0xee>
	...

0801dbb8 <_dtoa_r>:
 801dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbbc:	69c7      	ldr	r7, [r0, #28]
 801dbbe:	b097      	sub	sp, #92	@ 0x5c
 801dbc0:	4614      	mov	r4, r2
 801dbc2:	461d      	mov	r5, r3
 801dbc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801dbc8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801dbca:	4683      	mov	fp, r0
 801dbcc:	b97f      	cbnz	r7, 801dbee <_dtoa_r+0x36>
 801dbce:	2010      	movs	r0, #16
 801dbd0:	f000 fe04 	bl	801e7dc <malloc>
 801dbd4:	4602      	mov	r2, r0
 801dbd6:	f8cb 001c 	str.w	r0, [fp, #28]
 801dbda:	b920      	cbnz	r0, 801dbe6 <_dtoa_r+0x2e>
 801dbdc:	4ba8      	ldr	r3, [pc, #672]	@ (801de80 <_dtoa_r+0x2c8>)
 801dbde:	21ef      	movs	r1, #239	@ 0xef
 801dbe0:	48a8      	ldr	r0, [pc, #672]	@ (801de84 <_dtoa_r+0x2cc>)
 801dbe2:	f001 fcbb 	bl	801f55c <__assert_func>
 801dbe6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801dbea:	6007      	str	r7, [r0, #0]
 801dbec:	60c7      	str	r7, [r0, #12]
 801dbee:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dbf2:	6819      	ldr	r1, [r3, #0]
 801dbf4:	b159      	cbz	r1, 801dc0e <_dtoa_r+0x56>
 801dbf6:	685a      	ldr	r2, [r3, #4]
 801dbf8:	604a      	str	r2, [r1, #4]
 801dbfa:	2301      	movs	r3, #1
 801dbfc:	4093      	lsls	r3, r2
 801dbfe:	608b      	str	r3, [r1, #8]
 801dc00:	4658      	mov	r0, fp
 801dc02:	f000 fee1 	bl	801e9c8 <_Bfree>
 801dc06:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	601a      	str	r2, [r3, #0]
 801dc0e:	1e2b      	subs	r3, r5, #0
 801dc10:	bfb9      	ittee	lt
 801dc12:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801dc16:	9303      	strlt	r3, [sp, #12]
 801dc18:	2300      	movge	r3, #0
 801dc1a:	6033      	strge	r3, [r6, #0]
 801dc1c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801dc20:	4b99      	ldr	r3, [pc, #612]	@ (801de88 <_dtoa_r+0x2d0>)
 801dc22:	bfbc      	itt	lt
 801dc24:	2201      	movlt	r2, #1
 801dc26:	6032      	strlt	r2, [r6, #0]
 801dc28:	ea33 0308 	bics.w	r3, r3, r8
 801dc2c:	d112      	bne.n	801dc54 <_dtoa_r+0x9c>
 801dc2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801dc30:	f242 730f 	movw	r3, #9999	@ 0x270f
 801dc34:	6013      	str	r3, [r2, #0]
 801dc36:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801dc3a:	4323      	orrs	r3, r4
 801dc3c:	f000 8551 	beq.w	801e6e2 <_dtoa_r+0xb2a>
 801dc40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc42:	f8df a248 	ldr.w	sl, [pc, #584]	@ 801de8c <_dtoa_r+0x2d4>
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	f000 8553 	beq.w	801e6f2 <_dtoa_r+0xb3a>
 801dc4c:	f10a 0303 	add.w	r3, sl, #3
 801dc50:	f000 bd4d 	b.w	801e6ee <_dtoa_r+0xb36>
 801dc54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dc58:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801dc5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dc60:	2200      	movs	r2, #0
 801dc62:	2300      	movs	r3, #0
 801dc64:	f7e2 ff08 	bl	8000a78 <__aeabi_dcmpeq>
 801dc68:	4607      	mov	r7, r0
 801dc6a:	b158      	cbz	r0, 801dc84 <_dtoa_r+0xcc>
 801dc6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801dc6e:	2301      	movs	r3, #1
 801dc70:	6013      	str	r3, [r2, #0]
 801dc72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dc74:	b113      	cbz	r3, 801dc7c <_dtoa_r+0xc4>
 801dc76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801dc78:	4b85      	ldr	r3, [pc, #532]	@ (801de90 <_dtoa_r+0x2d8>)
 801dc7a:	6013      	str	r3, [r2, #0]
 801dc7c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801de94 <_dtoa_r+0x2dc>
 801dc80:	f000 bd37 	b.w	801e6f2 <_dtoa_r+0xb3a>
 801dc84:	ab14      	add	r3, sp, #80	@ 0x50
 801dc86:	9301      	str	r3, [sp, #4]
 801dc88:	ab15      	add	r3, sp, #84	@ 0x54
 801dc8a:	9300      	str	r3, [sp, #0]
 801dc8c:	4658      	mov	r0, fp
 801dc8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801dc92:	f001 f981 	bl	801ef98 <__d2b>
 801dc96:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801dc9a:	4681      	mov	r9, r0
 801dc9c:	2e00      	cmp	r6, #0
 801dc9e:	d076      	beq.n	801dd8e <_dtoa_r+0x1d6>
 801dca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dca2:	9712      	str	r7, [sp, #72]	@ 0x48
 801dca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dcac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801dcb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801dcb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801dcb8:	4619      	mov	r1, r3
 801dcba:	2200      	movs	r2, #0
 801dcbc:	4b76      	ldr	r3, [pc, #472]	@ (801de98 <_dtoa_r+0x2e0>)
 801dcbe:	f7e2 fabb 	bl	8000238 <__aeabi_dsub>
 801dcc2:	a369      	add	r3, pc, #420	@ (adr r3, 801de68 <_dtoa_r+0x2b0>)
 801dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcc8:	f7e2 fc6e 	bl	80005a8 <__aeabi_dmul>
 801dccc:	a368      	add	r3, pc, #416	@ (adr r3, 801de70 <_dtoa_r+0x2b8>)
 801dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcd2:	f7e2 fab3 	bl	800023c <__adddf3>
 801dcd6:	4604      	mov	r4, r0
 801dcd8:	4630      	mov	r0, r6
 801dcda:	460d      	mov	r5, r1
 801dcdc:	f7e2 fbfa 	bl	80004d4 <__aeabi_i2d>
 801dce0:	a365      	add	r3, pc, #404	@ (adr r3, 801de78 <_dtoa_r+0x2c0>)
 801dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dce6:	f7e2 fc5f 	bl	80005a8 <__aeabi_dmul>
 801dcea:	4602      	mov	r2, r0
 801dcec:	460b      	mov	r3, r1
 801dcee:	4620      	mov	r0, r4
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	f7e2 faa3 	bl	800023c <__adddf3>
 801dcf6:	4604      	mov	r4, r0
 801dcf8:	460d      	mov	r5, r1
 801dcfa:	f7e2 ff05 	bl	8000b08 <__aeabi_d2iz>
 801dcfe:	2200      	movs	r2, #0
 801dd00:	4607      	mov	r7, r0
 801dd02:	2300      	movs	r3, #0
 801dd04:	4620      	mov	r0, r4
 801dd06:	4629      	mov	r1, r5
 801dd08:	f7e2 fec0 	bl	8000a8c <__aeabi_dcmplt>
 801dd0c:	b140      	cbz	r0, 801dd20 <_dtoa_r+0x168>
 801dd0e:	4638      	mov	r0, r7
 801dd10:	f7e2 fbe0 	bl	80004d4 <__aeabi_i2d>
 801dd14:	4622      	mov	r2, r4
 801dd16:	462b      	mov	r3, r5
 801dd18:	f7e2 feae 	bl	8000a78 <__aeabi_dcmpeq>
 801dd1c:	b900      	cbnz	r0, 801dd20 <_dtoa_r+0x168>
 801dd1e:	3f01      	subs	r7, #1
 801dd20:	2f16      	cmp	r7, #22
 801dd22:	d852      	bhi.n	801ddca <_dtoa_r+0x212>
 801dd24:	4b5d      	ldr	r3, [pc, #372]	@ (801de9c <_dtoa_r+0x2e4>)
 801dd26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dd32:	f7e2 feab 	bl	8000a8c <__aeabi_dcmplt>
 801dd36:	2800      	cmp	r0, #0
 801dd38:	d049      	beq.n	801ddce <_dtoa_r+0x216>
 801dd3a:	3f01      	subs	r7, #1
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd42:	1b9b      	subs	r3, r3, r6
 801dd44:	1e5a      	subs	r2, r3, #1
 801dd46:	bf44      	itt	mi
 801dd48:	f1c3 0801 	rsbmi	r8, r3, #1
 801dd4c:	2300      	movmi	r3, #0
 801dd4e:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd50:	bf54      	ite	pl
 801dd52:	f04f 0800 	movpl.w	r8, #0
 801dd56:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801dd58:	2f00      	cmp	r7, #0
 801dd5a:	db3a      	blt.n	801ddd2 <_dtoa_r+0x21a>
 801dd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd5e:	970e      	str	r7, [sp, #56]	@ 0x38
 801dd60:	443b      	add	r3, r7
 801dd62:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd64:	2300      	movs	r3, #0
 801dd66:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dd6a:	2b09      	cmp	r3, #9
 801dd6c:	d865      	bhi.n	801de3a <_dtoa_r+0x282>
 801dd6e:	2b05      	cmp	r3, #5
 801dd70:	bfc4      	itt	gt
 801dd72:	3b04      	subgt	r3, #4
 801dd74:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801dd76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dd78:	f1a3 0302 	sub.w	r3, r3, #2
 801dd7c:	bfcc      	ite	gt
 801dd7e:	2400      	movgt	r4, #0
 801dd80:	2401      	movle	r4, #1
 801dd82:	2b03      	cmp	r3, #3
 801dd84:	d864      	bhi.n	801de50 <_dtoa_r+0x298>
 801dd86:	e8df f003 	tbb	[pc, r3]
 801dd8a:	382b      	.short	0x382b
 801dd8c:	5636      	.short	0x5636
 801dd8e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801dd92:	441e      	add	r6, r3
 801dd94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801dd98:	2b20      	cmp	r3, #32
 801dd9a:	bfc1      	itttt	gt
 801dd9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801dda0:	fa08 f803 	lslgt.w	r8, r8, r3
 801dda4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801dda8:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ddac:	bfd6      	itet	le
 801ddae:	f1c3 0320 	rsble	r3, r3, #32
 801ddb2:	ea48 0003 	orrgt.w	r0, r8, r3
 801ddb6:	fa04 f003 	lslle.w	r0, r4, r3
 801ddba:	f7e2 fb7b 	bl	80004b4 <__aeabi_ui2d>
 801ddbe:	2201      	movs	r2, #1
 801ddc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ddc4:	3e01      	subs	r6, #1
 801ddc6:	9212      	str	r2, [sp, #72]	@ 0x48
 801ddc8:	e776      	b.n	801dcb8 <_dtoa_r+0x100>
 801ddca:	2301      	movs	r3, #1
 801ddcc:	e7b7      	b.n	801dd3e <_dtoa_r+0x186>
 801ddce:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ddd0:	e7b6      	b.n	801dd40 <_dtoa_r+0x188>
 801ddd2:	427b      	negs	r3, r7
 801ddd4:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	eba8 0807 	sub.w	r8, r8, r7
 801dddc:	930e      	str	r3, [sp, #56]	@ 0x38
 801ddde:	e7c3      	b.n	801dd68 <_dtoa_r+0x1b0>
 801dde0:	2300      	movs	r3, #0
 801dde2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dde4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	dc35      	bgt.n	801de56 <_dtoa_r+0x29e>
 801ddea:	2301      	movs	r3, #1
 801ddec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801ddf0:	461a      	mov	r2, r3
 801ddf2:	9221      	str	r2, [sp, #132]	@ 0x84
 801ddf4:	e00b      	b.n	801de0e <_dtoa_r+0x256>
 801ddf6:	2301      	movs	r3, #1
 801ddf8:	e7f3      	b.n	801dde2 <_dtoa_r+0x22a>
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ddfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801de00:	18fb      	adds	r3, r7, r3
 801de02:	9308      	str	r3, [sp, #32]
 801de04:	3301      	adds	r3, #1
 801de06:	2b01      	cmp	r3, #1
 801de08:	9307      	str	r3, [sp, #28]
 801de0a:	bfb8      	it	lt
 801de0c:	2301      	movlt	r3, #1
 801de0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 801de12:	2100      	movs	r1, #0
 801de14:	2204      	movs	r2, #4
 801de16:	f102 0514 	add.w	r5, r2, #20
 801de1a:	429d      	cmp	r5, r3
 801de1c:	d91f      	bls.n	801de5e <_dtoa_r+0x2a6>
 801de1e:	6041      	str	r1, [r0, #4]
 801de20:	4658      	mov	r0, fp
 801de22:	f000 fd91 	bl	801e948 <_Balloc>
 801de26:	4682      	mov	sl, r0
 801de28:	2800      	cmp	r0, #0
 801de2a:	d13b      	bne.n	801dea4 <_dtoa_r+0x2ec>
 801de2c:	4b1c      	ldr	r3, [pc, #112]	@ (801dea0 <_dtoa_r+0x2e8>)
 801de2e:	4602      	mov	r2, r0
 801de30:	f240 11af 	movw	r1, #431	@ 0x1af
 801de34:	e6d4      	b.n	801dbe0 <_dtoa_r+0x28>
 801de36:	2301      	movs	r3, #1
 801de38:	e7e0      	b.n	801ddfc <_dtoa_r+0x244>
 801de3a:	2401      	movs	r4, #1
 801de3c:	2300      	movs	r3, #0
 801de3e:	9320      	str	r3, [sp, #128]	@ 0x80
 801de40:	940b      	str	r4, [sp, #44]	@ 0x2c
 801de42:	f04f 33ff 	mov.w	r3, #4294967295
 801de46:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801de4a:	2200      	movs	r2, #0
 801de4c:	2312      	movs	r3, #18
 801de4e:	e7d0      	b.n	801ddf2 <_dtoa_r+0x23a>
 801de50:	2301      	movs	r3, #1
 801de52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de54:	e7f5      	b.n	801de42 <_dtoa_r+0x28a>
 801de56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801de58:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801de5c:	e7d7      	b.n	801de0e <_dtoa_r+0x256>
 801de5e:	3101      	adds	r1, #1
 801de60:	0052      	lsls	r2, r2, #1
 801de62:	e7d8      	b.n	801de16 <_dtoa_r+0x25e>
 801de64:	f3af 8000 	nop.w
 801de68:	636f4361 	.word	0x636f4361
 801de6c:	3fd287a7 	.word	0x3fd287a7
 801de70:	8b60c8b3 	.word	0x8b60c8b3
 801de74:	3fc68a28 	.word	0x3fc68a28
 801de78:	509f79fb 	.word	0x509f79fb
 801de7c:	3fd34413 	.word	0x3fd34413
 801de80:	0802089d 	.word	0x0802089d
 801de84:	080208b4 	.word	0x080208b4
 801de88:	7ff00000 	.word	0x7ff00000
 801de8c:	08020899 	.word	0x08020899
 801de90:	0802086d 	.word	0x0802086d
 801de94:	0802086c 	.word	0x0802086c
 801de98:	3ff80000 	.word	0x3ff80000
 801de9c:	080209b0 	.word	0x080209b0
 801dea0:	0802090c 	.word	0x0802090c
 801dea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dea8:	6018      	str	r0, [r3, #0]
 801deaa:	9b07      	ldr	r3, [sp, #28]
 801deac:	2b0e      	cmp	r3, #14
 801deae:	f200 80a4 	bhi.w	801dffa <_dtoa_r+0x442>
 801deb2:	2c00      	cmp	r4, #0
 801deb4:	f000 80a1 	beq.w	801dffa <_dtoa_r+0x442>
 801deb8:	2f00      	cmp	r7, #0
 801deba:	dd33      	ble.n	801df24 <_dtoa_r+0x36c>
 801debc:	4b86      	ldr	r3, [pc, #536]	@ (801e0d8 <_dtoa_r+0x520>)
 801debe:	f007 020f 	and.w	r2, r7, #15
 801dec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 801deca:	05f8      	lsls	r0, r7, #23
 801decc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801ded0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ded4:	d516      	bpl.n	801df04 <_dtoa_r+0x34c>
 801ded6:	4b81      	ldr	r3, [pc, #516]	@ (801e0dc <_dtoa_r+0x524>)
 801ded8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dedc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dee0:	f7e2 fc8c 	bl	80007fc <__aeabi_ddiv>
 801dee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dee8:	f004 040f 	and.w	r4, r4, #15
 801deec:	2603      	movs	r6, #3
 801deee:	4d7b      	ldr	r5, [pc, #492]	@ (801e0dc <_dtoa_r+0x524>)
 801def0:	b954      	cbnz	r4, 801df08 <_dtoa_r+0x350>
 801def2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801def6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801defa:	f7e2 fc7f 	bl	80007fc <__aeabi_ddiv>
 801defe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df02:	e028      	b.n	801df56 <_dtoa_r+0x39e>
 801df04:	2602      	movs	r6, #2
 801df06:	e7f2      	b.n	801deee <_dtoa_r+0x336>
 801df08:	07e1      	lsls	r1, r4, #31
 801df0a:	d508      	bpl.n	801df1e <_dtoa_r+0x366>
 801df0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801df10:	e9d5 2300 	ldrd	r2, r3, [r5]
 801df14:	f7e2 fb48 	bl	80005a8 <__aeabi_dmul>
 801df18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801df1c:	3601      	adds	r6, #1
 801df1e:	1064      	asrs	r4, r4, #1
 801df20:	3508      	adds	r5, #8
 801df22:	e7e5      	b.n	801def0 <_dtoa_r+0x338>
 801df24:	f000 80d2 	beq.w	801e0cc <_dtoa_r+0x514>
 801df28:	427c      	negs	r4, r7
 801df2a:	4b6b      	ldr	r3, [pc, #428]	@ (801e0d8 <_dtoa_r+0x520>)
 801df2c:	4d6b      	ldr	r5, [pc, #428]	@ (801e0dc <_dtoa_r+0x524>)
 801df2e:	f004 020f 	and.w	r2, r4, #15
 801df32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801df3e:	f7e2 fb33 	bl	80005a8 <__aeabi_dmul>
 801df42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df46:	1124      	asrs	r4, r4, #4
 801df48:	2300      	movs	r3, #0
 801df4a:	2602      	movs	r6, #2
 801df4c:	2c00      	cmp	r4, #0
 801df4e:	f040 80b2 	bne.w	801e0b6 <_dtoa_r+0x4fe>
 801df52:	2b00      	cmp	r3, #0
 801df54:	d1d3      	bne.n	801defe <_dtoa_r+0x346>
 801df56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	f000 80b7 	beq.w	801e0d0 <_dtoa_r+0x518>
 801df62:	4b5f      	ldr	r3, [pc, #380]	@ (801e0e0 <_dtoa_r+0x528>)
 801df64:	2200      	movs	r2, #0
 801df66:	4620      	mov	r0, r4
 801df68:	4629      	mov	r1, r5
 801df6a:	f7e2 fd8f 	bl	8000a8c <__aeabi_dcmplt>
 801df6e:	2800      	cmp	r0, #0
 801df70:	f000 80ae 	beq.w	801e0d0 <_dtoa_r+0x518>
 801df74:	9b07      	ldr	r3, [sp, #28]
 801df76:	2b00      	cmp	r3, #0
 801df78:	f000 80aa 	beq.w	801e0d0 <_dtoa_r+0x518>
 801df7c:	9b08      	ldr	r3, [sp, #32]
 801df7e:	2b00      	cmp	r3, #0
 801df80:	dd37      	ble.n	801dff2 <_dtoa_r+0x43a>
 801df82:	1e7b      	subs	r3, r7, #1
 801df84:	9304      	str	r3, [sp, #16]
 801df86:	4620      	mov	r0, r4
 801df88:	4b56      	ldr	r3, [pc, #344]	@ (801e0e4 <_dtoa_r+0x52c>)
 801df8a:	2200      	movs	r2, #0
 801df8c:	4629      	mov	r1, r5
 801df8e:	f7e2 fb0b 	bl	80005a8 <__aeabi_dmul>
 801df92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df96:	9c08      	ldr	r4, [sp, #32]
 801df98:	3601      	adds	r6, #1
 801df9a:	4630      	mov	r0, r6
 801df9c:	f7e2 fa9a 	bl	80004d4 <__aeabi_i2d>
 801dfa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dfa4:	f7e2 fb00 	bl	80005a8 <__aeabi_dmul>
 801dfa8:	4b4f      	ldr	r3, [pc, #316]	@ (801e0e8 <_dtoa_r+0x530>)
 801dfaa:	2200      	movs	r2, #0
 801dfac:	f7e2 f946 	bl	800023c <__adddf3>
 801dfb0:	4605      	mov	r5, r0
 801dfb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dfb6:	2c00      	cmp	r4, #0
 801dfb8:	f040 809a 	bne.w	801e0f0 <_dtoa_r+0x538>
 801dfbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dfc0:	4b4a      	ldr	r3, [pc, #296]	@ (801e0ec <_dtoa_r+0x534>)
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	f7e2 f938 	bl	8000238 <__aeabi_dsub>
 801dfc8:	4602      	mov	r2, r0
 801dfca:	460b      	mov	r3, r1
 801dfcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dfd0:	462a      	mov	r2, r5
 801dfd2:	4633      	mov	r3, r6
 801dfd4:	f7e2 fd78 	bl	8000ac8 <__aeabi_dcmpgt>
 801dfd8:	2800      	cmp	r0, #0
 801dfda:	f040 828e 	bne.w	801e4fa <_dtoa_r+0x942>
 801dfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dfe2:	462a      	mov	r2, r5
 801dfe4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dfe8:	f7e2 fd50 	bl	8000a8c <__aeabi_dcmplt>
 801dfec:	2800      	cmp	r0, #0
 801dfee:	f040 8127 	bne.w	801e240 <_dtoa_r+0x688>
 801dff2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dffa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	f2c0 8163 	blt.w	801e2c8 <_dtoa_r+0x710>
 801e002:	2f0e      	cmp	r7, #14
 801e004:	f300 8160 	bgt.w	801e2c8 <_dtoa_r+0x710>
 801e008:	4b33      	ldr	r3, [pc, #204]	@ (801e0d8 <_dtoa_r+0x520>)
 801e00a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e00e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e012:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e016:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e018:	2b00      	cmp	r3, #0
 801e01a:	da03      	bge.n	801e024 <_dtoa_r+0x46c>
 801e01c:	9b07      	ldr	r3, [sp, #28]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	f340 8100 	ble.w	801e224 <_dtoa_r+0x66c>
 801e024:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e028:	4656      	mov	r6, sl
 801e02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e02e:	4620      	mov	r0, r4
 801e030:	4629      	mov	r1, r5
 801e032:	f7e2 fbe3 	bl	80007fc <__aeabi_ddiv>
 801e036:	f7e2 fd67 	bl	8000b08 <__aeabi_d2iz>
 801e03a:	4680      	mov	r8, r0
 801e03c:	f7e2 fa4a 	bl	80004d4 <__aeabi_i2d>
 801e040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e044:	f7e2 fab0 	bl	80005a8 <__aeabi_dmul>
 801e048:	4602      	mov	r2, r0
 801e04a:	460b      	mov	r3, r1
 801e04c:	4620      	mov	r0, r4
 801e04e:	4629      	mov	r1, r5
 801e050:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e054:	f7e2 f8f0 	bl	8000238 <__aeabi_dsub>
 801e058:	f806 4b01 	strb.w	r4, [r6], #1
 801e05c:	9d07      	ldr	r5, [sp, #28]
 801e05e:	eba6 040a 	sub.w	r4, r6, sl
 801e062:	42a5      	cmp	r5, r4
 801e064:	4602      	mov	r2, r0
 801e066:	460b      	mov	r3, r1
 801e068:	f040 8116 	bne.w	801e298 <_dtoa_r+0x6e0>
 801e06c:	f7e2 f8e6 	bl	800023c <__adddf3>
 801e070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e074:	4604      	mov	r4, r0
 801e076:	460d      	mov	r5, r1
 801e078:	f7e2 fd26 	bl	8000ac8 <__aeabi_dcmpgt>
 801e07c:	2800      	cmp	r0, #0
 801e07e:	f040 80f8 	bne.w	801e272 <_dtoa_r+0x6ba>
 801e082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e086:	4620      	mov	r0, r4
 801e088:	4629      	mov	r1, r5
 801e08a:	f7e2 fcf5 	bl	8000a78 <__aeabi_dcmpeq>
 801e08e:	b118      	cbz	r0, 801e098 <_dtoa_r+0x4e0>
 801e090:	f018 0f01 	tst.w	r8, #1
 801e094:	f040 80ed 	bne.w	801e272 <_dtoa_r+0x6ba>
 801e098:	4649      	mov	r1, r9
 801e09a:	4658      	mov	r0, fp
 801e09c:	f000 fc94 	bl	801e9c8 <_Bfree>
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	7033      	strb	r3, [r6, #0]
 801e0a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e0a6:	3701      	adds	r7, #1
 801e0a8:	601f      	str	r7, [r3, #0]
 801e0aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	f000 8320 	beq.w	801e6f2 <_dtoa_r+0xb3a>
 801e0b2:	601e      	str	r6, [r3, #0]
 801e0b4:	e31d      	b.n	801e6f2 <_dtoa_r+0xb3a>
 801e0b6:	07e2      	lsls	r2, r4, #31
 801e0b8:	d505      	bpl.n	801e0c6 <_dtoa_r+0x50e>
 801e0ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e0be:	f7e2 fa73 	bl	80005a8 <__aeabi_dmul>
 801e0c2:	3601      	adds	r6, #1
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	1064      	asrs	r4, r4, #1
 801e0c8:	3508      	adds	r5, #8
 801e0ca:	e73f      	b.n	801df4c <_dtoa_r+0x394>
 801e0cc:	2602      	movs	r6, #2
 801e0ce:	e742      	b.n	801df56 <_dtoa_r+0x39e>
 801e0d0:	9c07      	ldr	r4, [sp, #28]
 801e0d2:	9704      	str	r7, [sp, #16]
 801e0d4:	e761      	b.n	801df9a <_dtoa_r+0x3e2>
 801e0d6:	bf00      	nop
 801e0d8:	080209b0 	.word	0x080209b0
 801e0dc:	08020988 	.word	0x08020988
 801e0e0:	3ff00000 	.word	0x3ff00000
 801e0e4:	40240000 	.word	0x40240000
 801e0e8:	401c0000 	.word	0x401c0000
 801e0ec:	40140000 	.word	0x40140000
 801e0f0:	4b70      	ldr	r3, [pc, #448]	@ (801e2b4 <_dtoa_r+0x6fc>)
 801e0f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e0f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e0f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e0fc:	4454      	add	r4, sl
 801e0fe:	2900      	cmp	r1, #0
 801e100:	d045      	beq.n	801e18e <_dtoa_r+0x5d6>
 801e102:	496d      	ldr	r1, [pc, #436]	@ (801e2b8 <_dtoa_r+0x700>)
 801e104:	2000      	movs	r0, #0
 801e106:	f7e2 fb79 	bl	80007fc <__aeabi_ddiv>
 801e10a:	4633      	mov	r3, r6
 801e10c:	462a      	mov	r2, r5
 801e10e:	f7e2 f893 	bl	8000238 <__aeabi_dsub>
 801e112:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e116:	4656      	mov	r6, sl
 801e118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e11c:	f7e2 fcf4 	bl	8000b08 <__aeabi_d2iz>
 801e120:	4605      	mov	r5, r0
 801e122:	f7e2 f9d7 	bl	80004d4 <__aeabi_i2d>
 801e126:	4602      	mov	r2, r0
 801e128:	460b      	mov	r3, r1
 801e12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e12e:	f7e2 f883 	bl	8000238 <__aeabi_dsub>
 801e132:	3530      	adds	r5, #48	@ 0x30
 801e134:	4602      	mov	r2, r0
 801e136:	460b      	mov	r3, r1
 801e138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e13c:	f806 5b01 	strb.w	r5, [r6], #1
 801e140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e144:	f7e2 fca2 	bl	8000a8c <__aeabi_dcmplt>
 801e148:	2800      	cmp	r0, #0
 801e14a:	d163      	bne.n	801e214 <_dtoa_r+0x65c>
 801e14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e150:	495a      	ldr	r1, [pc, #360]	@ (801e2bc <_dtoa_r+0x704>)
 801e152:	2000      	movs	r0, #0
 801e154:	f7e2 f870 	bl	8000238 <__aeabi_dsub>
 801e158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e15c:	f7e2 fc96 	bl	8000a8c <__aeabi_dcmplt>
 801e160:	2800      	cmp	r0, #0
 801e162:	f040 8087 	bne.w	801e274 <_dtoa_r+0x6bc>
 801e166:	42a6      	cmp	r6, r4
 801e168:	f43f af43 	beq.w	801dff2 <_dtoa_r+0x43a>
 801e16c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e170:	4b53      	ldr	r3, [pc, #332]	@ (801e2c0 <_dtoa_r+0x708>)
 801e172:	2200      	movs	r2, #0
 801e174:	f7e2 fa18 	bl	80005a8 <__aeabi_dmul>
 801e178:	4b51      	ldr	r3, [pc, #324]	@ (801e2c0 <_dtoa_r+0x708>)
 801e17a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e17e:	2200      	movs	r2, #0
 801e180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e184:	f7e2 fa10 	bl	80005a8 <__aeabi_dmul>
 801e188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e18c:	e7c4      	b.n	801e118 <_dtoa_r+0x560>
 801e18e:	4631      	mov	r1, r6
 801e190:	4628      	mov	r0, r5
 801e192:	f7e2 fa09 	bl	80005a8 <__aeabi_dmul>
 801e196:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e19a:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e19c:	4656      	mov	r6, sl
 801e19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1a2:	f7e2 fcb1 	bl	8000b08 <__aeabi_d2iz>
 801e1a6:	4605      	mov	r5, r0
 801e1a8:	f7e2 f994 	bl	80004d4 <__aeabi_i2d>
 801e1ac:	4602      	mov	r2, r0
 801e1ae:	460b      	mov	r3, r1
 801e1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1b4:	f7e2 f840 	bl	8000238 <__aeabi_dsub>
 801e1b8:	3530      	adds	r5, #48	@ 0x30
 801e1ba:	f806 5b01 	strb.w	r5, [r6], #1
 801e1be:	4602      	mov	r2, r0
 801e1c0:	460b      	mov	r3, r1
 801e1c2:	42a6      	cmp	r6, r4
 801e1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e1c8:	f04f 0200 	mov.w	r2, #0
 801e1cc:	d124      	bne.n	801e218 <_dtoa_r+0x660>
 801e1ce:	4b3a      	ldr	r3, [pc, #232]	@ (801e2b8 <_dtoa_r+0x700>)
 801e1d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e1d4:	f7e2 f832 	bl	800023c <__adddf3>
 801e1d8:	4602      	mov	r2, r0
 801e1da:	460b      	mov	r3, r1
 801e1dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1e0:	f7e2 fc72 	bl	8000ac8 <__aeabi_dcmpgt>
 801e1e4:	2800      	cmp	r0, #0
 801e1e6:	d145      	bne.n	801e274 <_dtoa_r+0x6bc>
 801e1e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e1ec:	4932      	ldr	r1, [pc, #200]	@ (801e2b8 <_dtoa_r+0x700>)
 801e1ee:	2000      	movs	r0, #0
 801e1f0:	f7e2 f822 	bl	8000238 <__aeabi_dsub>
 801e1f4:	4602      	mov	r2, r0
 801e1f6:	460b      	mov	r3, r1
 801e1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1fc:	f7e2 fc46 	bl	8000a8c <__aeabi_dcmplt>
 801e200:	2800      	cmp	r0, #0
 801e202:	f43f aef6 	beq.w	801dff2 <_dtoa_r+0x43a>
 801e206:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e208:	1e73      	subs	r3, r6, #1
 801e20a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e20c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e210:	2b30      	cmp	r3, #48	@ 0x30
 801e212:	d0f8      	beq.n	801e206 <_dtoa_r+0x64e>
 801e214:	9f04      	ldr	r7, [sp, #16]
 801e216:	e73f      	b.n	801e098 <_dtoa_r+0x4e0>
 801e218:	4b29      	ldr	r3, [pc, #164]	@ (801e2c0 <_dtoa_r+0x708>)
 801e21a:	f7e2 f9c5 	bl	80005a8 <__aeabi_dmul>
 801e21e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e222:	e7bc      	b.n	801e19e <_dtoa_r+0x5e6>
 801e224:	d10c      	bne.n	801e240 <_dtoa_r+0x688>
 801e226:	4b27      	ldr	r3, [pc, #156]	@ (801e2c4 <_dtoa_r+0x70c>)
 801e228:	2200      	movs	r2, #0
 801e22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e22e:	f7e2 f9bb 	bl	80005a8 <__aeabi_dmul>
 801e232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e236:	f7e2 fc3d 	bl	8000ab4 <__aeabi_dcmpge>
 801e23a:	2800      	cmp	r0, #0
 801e23c:	f000 815b 	beq.w	801e4f6 <_dtoa_r+0x93e>
 801e240:	2400      	movs	r4, #0
 801e242:	4625      	mov	r5, r4
 801e244:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e246:	43db      	mvns	r3, r3
 801e248:	9304      	str	r3, [sp, #16]
 801e24a:	4656      	mov	r6, sl
 801e24c:	2700      	movs	r7, #0
 801e24e:	4621      	mov	r1, r4
 801e250:	4658      	mov	r0, fp
 801e252:	f000 fbb9 	bl	801e9c8 <_Bfree>
 801e256:	2d00      	cmp	r5, #0
 801e258:	d0dc      	beq.n	801e214 <_dtoa_r+0x65c>
 801e25a:	b12f      	cbz	r7, 801e268 <_dtoa_r+0x6b0>
 801e25c:	42af      	cmp	r7, r5
 801e25e:	d003      	beq.n	801e268 <_dtoa_r+0x6b0>
 801e260:	4639      	mov	r1, r7
 801e262:	4658      	mov	r0, fp
 801e264:	f000 fbb0 	bl	801e9c8 <_Bfree>
 801e268:	4629      	mov	r1, r5
 801e26a:	4658      	mov	r0, fp
 801e26c:	f000 fbac 	bl	801e9c8 <_Bfree>
 801e270:	e7d0      	b.n	801e214 <_dtoa_r+0x65c>
 801e272:	9704      	str	r7, [sp, #16]
 801e274:	4633      	mov	r3, r6
 801e276:	461e      	mov	r6, r3
 801e278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e27c:	2a39      	cmp	r2, #57	@ 0x39
 801e27e:	d107      	bne.n	801e290 <_dtoa_r+0x6d8>
 801e280:	459a      	cmp	sl, r3
 801e282:	d1f8      	bne.n	801e276 <_dtoa_r+0x6be>
 801e284:	9a04      	ldr	r2, [sp, #16]
 801e286:	3201      	adds	r2, #1
 801e288:	9204      	str	r2, [sp, #16]
 801e28a:	2230      	movs	r2, #48	@ 0x30
 801e28c:	f88a 2000 	strb.w	r2, [sl]
 801e290:	781a      	ldrb	r2, [r3, #0]
 801e292:	3201      	adds	r2, #1
 801e294:	701a      	strb	r2, [r3, #0]
 801e296:	e7bd      	b.n	801e214 <_dtoa_r+0x65c>
 801e298:	4b09      	ldr	r3, [pc, #36]	@ (801e2c0 <_dtoa_r+0x708>)
 801e29a:	2200      	movs	r2, #0
 801e29c:	f7e2 f984 	bl	80005a8 <__aeabi_dmul>
 801e2a0:	2200      	movs	r2, #0
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	4604      	mov	r4, r0
 801e2a6:	460d      	mov	r5, r1
 801e2a8:	f7e2 fbe6 	bl	8000a78 <__aeabi_dcmpeq>
 801e2ac:	2800      	cmp	r0, #0
 801e2ae:	f43f aebc 	beq.w	801e02a <_dtoa_r+0x472>
 801e2b2:	e6f1      	b.n	801e098 <_dtoa_r+0x4e0>
 801e2b4:	080209b0 	.word	0x080209b0
 801e2b8:	3fe00000 	.word	0x3fe00000
 801e2bc:	3ff00000 	.word	0x3ff00000
 801e2c0:	40240000 	.word	0x40240000
 801e2c4:	40140000 	.word	0x40140000
 801e2c8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e2ca:	2a00      	cmp	r2, #0
 801e2cc:	f000 80db 	beq.w	801e486 <_dtoa_r+0x8ce>
 801e2d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e2d2:	2a01      	cmp	r2, #1
 801e2d4:	f300 80bf 	bgt.w	801e456 <_dtoa_r+0x89e>
 801e2d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e2da:	2a00      	cmp	r2, #0
 801e2dc:	f000 80b7 	beq.w	801e44e <_dtoa_r+0x896>
 801e2e0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e2e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e2e6:	4646      	mov	r6, r8
 801e2e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2ea:	2101      	movs	r1, #1
 801e2ec:	441a      	add	r2, r3
 801e2ee:	4658      	mov	r0, fp
 801e2f0:	4498      	add	r8, r3
 801e2f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2f4:	f000 fc1c 	bl	801eb30 <__i2b>
 801e2f8:	4605      	mov	r5, r0
 801e2fa:	b15e      	cbz	r6, 801e314 <_dtoa_r+0x75c>
 801e2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	dd08      	ble.n	801e314 <_dtoa_r+0x75c>
 801e302:	42b3      	cmp	r3, r6
 801e304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e306:	bfa8      	it	ge
 801e308:	4633      	movge	r3, r6
 801e30a:	eba8 0803 	sub.w	r8, r8, r3
 801e30e:	1af6      	subs	r6, r6, r3
 801e310:	1ad3      	subs	r3, r2, r3
 801e312:	9309      	str	r3, [sp, #36]	@ 0x24
 801e314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e316:	b1f3      	cbz	r3, 801e356 <_dtoa_r+0x79e>
 801e318:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	f000 80b7 	beq.w	801e48e <_dtoa_r+0x8d6>
 801e320:	b18c      	cbz	r4, 801e346 <_dtoa_r+0x78e>
 801e322:	4629      	mov	r1, r5
 801e324:	4622      	mov	r2, r4
 801e326:	4658      	mov	r0, fp
 801e328:	f000 fcc2 	bl	801ecb0 <__pow5mult>
 801e32c:	464a      	mov	r2, r9
 801e32e:	4601      	mov	r1, r0
 801e330:	4605      	mov	r5, r0
 801e332:	4658      	mov	r0, fp
 801e334:	f000 fc12 	bl	801eb5c <__multiply>
 801e338:	4649      	mov	r1, r9
 801e33a:	9004      	str	r0, [sp, #16]
 801e33c:	4658      	mov	r0, fp
 801e33e:	f000 fb43 	bl	801e9c8 <_Bfree>
 801e342:	9b04      	ldr	r3, [sp, #16]
 801e344:	4699      	mov	r9, r3
 801e346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e348:	1b1a      	subs	r2, r3, r4
 801e34a:	d004      	beq.n	801e356 <_dtoa_r+0x79e>
 801e34c:	4649      	mov	r1, r9
 801e34e:	4658      	mov	r0, fp
 801e350:	f000 fcae 	bl	801ecb0 <__pow5mult>
 801e354:	4681      	mov	r9, r0
 801e356:	2101      	movs	r1, #1
 801e358:	4658      	mov	r0, fp
 801e35a:	f000 fbe9 	bl	801eb30 <__i2b>
 801e35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e360:	4604      	mov	r4, r0
 801e362:	2b00      	cmp	r3, #0
 801e364:	f000 81c9 	beq.w	801e6fa <_dtoa_r+0xb42>
 801e368:	461a      	mov	r2, r3
 801e36a:	4601      	mov	r1, r0
 801e36c:	4658      	mov	r0, fp
 801e36e:	f000 fc9f 	bl	801ecb0 <__pow5mult>
 801e372:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e374:	2b01      	cmp	r3, #1
 801e376:	4604      	mov	r4, r0
 801e378:	f300 808f 	bgt.w	801e49a <_dtoa_r+0x8e2>
 801e37c:	9b02      	ldr	r3, [sp, #8]
 801e37e:	2b00      	cmp	r3, #0
 801e380:	f040 8087 	bne.w	801e492 <_dtoa_r+0x8da>
 801e384:	9b03      	ldr	r3, [sp, #12]
 801e386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	f040 8083 	bne.w	801e496 <_dtoa_r+0x8de>
 801e390:	9b03      	ldr	r3, [sp, #12]
 801e392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e396:	0d1b      	lsrs	r3, r3, #20
 801e398:	051b      	lsls	r3, r3, #20
 801e39a:	b12b      	cbz	r3, 801e3a8 <_dtoa_r+0x7f0>
 801e39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e39e:	3301      	adds	r3, #1
 801e3a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3a2:	f108 0801 	add.w	r8, r8, #1
 801e3a6:	2301      	movs	r3, #1
 801e3a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e3aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	f000 81aa 	beq.w	801e706 <_dtoa_r+0xb4e>
 801e3b2:	6923      	ldr	r3, [r4, #16]
 801e3b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e3b8:	6918      	ldr	r0, [r3, #16]
 801e3ba:	f000 fb6d 	bl	801ea98 <__hi0bits>
 801e3be:	f1c0 0020 	rsb	r0, r0, #32
 801e3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3c4:	4418      	add	r0, r3
 801e3c6:	f010 001f 	ands.w	r0, r0, #31
 801e3ca:	d071      	beq.n	801e4b0 <_dtoa_r+0x8f8>
 801e3cc:	f1c0 0320 	rsb	r3, r0, #32
 801e3d0:	2b04      	cmp	r3, #4
 801e3d2:	dd65      	ble.n	801e4a0 <_dtoa_r+0x8e8>
 801e3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3d6:	f1c0 001c 	rsb	r0, r0, #28
 801e3da:	4403      	add	r3, r0
 801e3dc:	4480      	add	r8, r0
 801e3de:	4406      	add	r6, r0
 801e3e0:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3e2:	f1b8 0f00 	cmp.w	r8, #0
 801e3e6:	dd05      	ble.n	801e3f4 <_dtoa_r+0x83c>
 801e3e8:	4649      	mov	r1, r9
 801e3ea:	4642      	mov	r2, r8
 801e3ec:	4658      	mov	r0, fp
 801e3ee:	f000 fcb9 	bl	801ed64 <__lshift>
 801e3f2:	4681      	mov	r9, r0
 801e3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	dd05      	ble.n	801e406 <_dtoa_r+0x84e>
 801e3fa:	4621      	mov	r1, r4
 801e3fc:	461a      	mov	r2, r3
 801e3fe:	4658      	mov	r0, fp
 801e400:	f000 fcb0 	bl	801ed64 <__lshift>
 801e404:	4604      	mov	r4, r0
 801e406:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d053      	beq.n	801e4b4 <_dtoa_r+0x8fc>
 801e40c:	4621      	mov	r1, r4
 801e40e:	4648      	mov	r0, r9
 801e410:	f000 fd14 	bl	801ee3c <__mcmp>
 801e414:	2800      	cmp	r0, #0
 801e416:	da4d      	bge.n	801e4b4 <_dtoa_r+0x8fc>
 801e418:	1e7b      	subs	r3, r7, #1
 801e41a:	9304      	str	r3, [sp, #16]
 801e41c:	4649      	mov	r1, r9
 801e41e:	2300      	movs	r3, #0
 801e420:	220a      	movs	r2, #10
 801e422:	4658      	mov	r0, fp
 801e424:	f000 faf2 	bl	801ea0c <__multadd>
 801e428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e42a:	4681      	mov	r9, r0
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	f000 816c 	beq.w	801e70a <_dtoa_r+0xb52>
 801e432:	2300      	movs	r3, #0
 801e434:	4629      	mov	r1, r5
 801e436:	220a      	movs	r2, #10
 801e438:	4658      	mov	r0, fp
 801e43a:	f000 fae7 	bl	801ea0c <__multadd>
 801e43e:	9b08      	ldr	r3, [sp, #32]
 801e440:	2b00      	cmp	r3, #0
 801e442:	4605      	mov	r5, r0
 801e444:	dc61      	bgt.n	801e50a <_dtoa_r+0x952>
 801e446:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e448:	2b02      	cmp	r3, #2
 801e44a:	dc3b      	bgt.n	801e4c4 <_dtoa_r+0x90c>
 801e44c:	e05d      	b.n	801e50a <_dtoa_r+0x952>
 801e44e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e450:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e454:	e746      	b.n	801e2e4 <_dtoa_r+0x72c>
 801e456:	9b07      	ldr	r3, [sp, #28]
 801e458:	1e5c      	subs	r4, r3, #1
 801e45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e45c:	42a3      	cmp	r3, r4
 801e45e:	bfbf      	itttt	lt
 801e460:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e462:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801e464:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e466:	1ae3      	sublt	r3, r4, r3
 801e468:	bfb4      	ite	lt
 801e46a:	18d2      	addlt	r2, r2, r3
 801e46c:	1b1c      	subge	r4, r3, r4
 801e46e:	9b07      	ldr	r3, [sp, #28]
 801e470:	bfbc      	itt	lt
 801e472:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801e474:	2400      	movlt	r4, #0
 801e476:	2b00      	cmp	r3, #0
 801e478:	bfb5      	itete	lt
 801e47a:	eba8 0603 	sublt.w	r6, r8, r3
 801e47e:	9b07      	ldrge	r3, [sp, #28]
 801e480:	2300      	movlt	r3, #0
 801e482:	4646      	movge	r6, r8
 801e484:	e730      	b.n	801e2e8 <_dtoa_r+0x730>
 801e486:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e488:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e48a:	4646      	mov	r6, r8
 801e48c:	e735      	b.n	801e2fa <_dtoa_r+0x742>
 801e48e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e490:	e75c      	b.n	801e34c <_dtoa_r+0x794>
 801e492:	2300      	movs	r3, #0
 801e494:	e788      	b.n	801e3a8 <_dtoa_r+0x7f0>
 801e496:	9b02      	ldr	r3, [sp, #8]
 801e498:	e786      	b.n	801e3a8 <_dtoa_r+0x7f0>
 801e49a:	2300      	movs	r3, #0
 801e49c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e49e:	e788      	b.n	801e3b2 <_dtoa_r+0x7fa>
 801e4a0:	d09f      	beq.n	801e3e2 <_dtoa_r+0x82a>
 801e4a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e4a4:	331c      	adds	r3, #28
 801e4a6:	441a      	add	r2, r3
 801e4a8:	4498      	add	r8, r3
 801e4aa:	441e      	add	r6, r3
 801e4ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801e4ae:	e798      	b.n	801e3e2 <_dtoa_r+0x82a>
 801e4b0:	4603      	mov	r3, r0
 801e4b2:	e7f6      	b.n	801e4a2 <_dtoa_r+0x8ea>
 801e4b4:	9b07      	ldr	r3, [sp, #28]
 801e4b6:	9704      	str	r7, [sp, #16]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	dc20      	bgt.n	801e4fe <_dtoa_r+0x946>
 801e4bc:	9308      	str	r3, [sp, #32]
 801e4be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4c0:	2b02      	cmp	r3, #2
 801e4c2:	dd1e      	ble.n	801e502 <_dtoa_r+0x94a>
 801e4c4:	9b08      	ldr	r3, [sp, #32]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f47f aebc 	bne.w	801e244 <_dtoa_r+0x68c>
 801e4cc:	4621      	mov	r1, r4
 801e4ce:	2205      	movs	r2, #5
 801e4d0:	4658      	mov	r0, fp
 801e4d2:	f000 fa9b 	bl	801ea0c <__multadd>
 801e4d6:	4601      	mov	r1, r0
 801e4d8:	4604      	mov	r4, r0
 801e4da:	4648      	mov	r0, r9
 801e4dc:	f000 fcae 	bl	801ee3c <__mcmp>
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	f77f aeaf 	ble.w	801e244 <_dtoa_r+0x68c>
 801e4e6:	4656      	mov	r6, sl
 801e4e8:	2331      	movs	r3, #49	@ 0x31
 801e4ea:	f806 3b01 	strb.w	r3, [r6], #1
 801e4ee:	9b04      	ldr	r3, [sp, #16]
 801e4f0:	3301      	adds	r3, #1
 801e4f2:	9304      	str	r3, [sp, #16]
 801e4f4:	e6aa      	b.n	801e24c <_dtoa_r+0x694>
 801e4f6:	9c07      	ldr	r4, [sp, #28]
 801e4f8:	9704      	str	r7, [sp, #16]
 801e4fa:	4625      	mov	r5, r4
 801e4fc:	e7f3      	b.n	801e4e6 <_dtoa_r+0x92e>
 801e4fe:	9b07      	ldr	r3, [sp, #28]
 801e500:	9308      	str	r3, [sp, #32]
 801e502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e504:	2b00      	cmp	r3, #0
 801e506:	f000 8104 	beq.w	801e712 <_dtoa_r+0xb5a>
 801e50a:	2e00      	cmp	r6, #0
 801e50c:	dd05      	ble.n	801e51a <_dtoa_r+0x962>
 801e50e:	4629      	mov	r1, r5
 801e510:	4632      	mov	r2, r6
 801e512:	4658      	mov	r0, fp
 801e514:	f000 fc26 	bl	801ed64 <__lshift>
 801e518:	4605      	mov	r5, r0
 801e51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d05a      	beq.n	801e5d6 <_dtoa_r+0xa1e>
 801e520:	6869      	ldr	r1, [r5, #4]
 801e522:	4658      	mov	r0, fp
 801e524:	f000 fa10 	bl	801e948 <_Balloc>
 801e528:	4606      	mov	r6, r0
 801e52a:	b928      	cbnz	r0, 801e538 <_dtoa_r+0x980>
 801e52c:	4b84      	ldr	r3, [pc, #528]	@ (801e740 <_dtoa_r+0xb88>)
 801e52e:	4602      	mov	r2, r0
 801e530:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e534:	f7ff bb54 	b.w	801dbe0 <_dtoa_r+0x28>
 801e538:	692a      	ldr	r2, [r5, #16]
 801e53a:	3202      	adds	r2, #2
 801e53c:	0092      	lsls	r2, r2, #2
 801e53e:	f105 010c 	add.w	r1, r5, #12
 801e542:	300c      	adds	r0, #12
 801e544:	f000 fffc 	bl	801f540 <memcpy>
 801e548:	2201      	movs	r2, #1
 801e54a:	4631      	mov	r1, r6
 801e54c:	4658      	mov	r0, fp
 801e54e:	f000 fc09 	bl	801ed64 <__lshift>
 801e552:	f10a 0301 	add.w	r3, sl, #1
 801e556:	9307      	str	r3, [sp, #28]
 801e558:	9b08      	ldr	r3, [sp, #32]
 801e55a:	4453      	add	r3, sl
 801e55c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e55e:	9b02      	ldr	r3, [sp, #8]
 801e560:	f003 0301 	and.w	r3, r3, #1
 801e564:	462f      	mov	r7, r5
 801e566:	930a      	str	r3, [sp, #40]	@ 0x28
 801e568:	4605      	mov	r5, r0
 801e56a:	9b07      	ldr	r3, [sp, #28]
 801e56c:	4621      	mov	r1, r4
 801e56e:	3b01      	subs	r3, #1
 801e570:	4648      	mov	r0, r9
 801e572:	9302      	str	r3, [sp, #8]
 801e574:	f7ff fa97 	bl	801daa6 <quorem>
 801e578:	4639      	mov	r1, r7
 801e57a:	9008      	str	r0, [sp, #32]
 801e57c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e580:	4648      	mov	r0, r9
 801e582:	f000 fc5b 	bl	801ee3c <__mcmp>
 801e586:	462a      	mov	r2, r5
 801e588:	9009      	str	r0, [sp, #36]	@ 0x24
 801e58a:	4621      	mov	r1, r4
 801e58c:	4658      	mov	r0, fp
 801e58e:	f000 fc71 	bl	801ee74 <__mdiff>
 801e592:	68c2      	ldr	r2, [r0, #12]
 801e594:	4606      	mov	r6, r0
 801e596:	bb02      	cbnz	r2, 801e5da <_dtoa_r+0xa22>
 801e598:	4601      	mov	r1, r0
 801e59a:	4648      	mov	r0, r9
 801e59c:	f000 fc4e 	bl	801ee3c <__mcmp>
 801e5a0:	4602      	mov	r2, r0
 801e5a2:	4631      	mov	r1, r6
 801e5a4:	4658      	mov	r0, fp
 801e5a6:	920c      	str	r2, [sp, #48]	@ 0x30
 801e5a8:	f000 fa0e 	bl	801e9c8 <_Bfree>
 801e5ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e5ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e5b0:	9e07      	ldr	r6, [sp, #28]
 801e5b2:	ea43 0102 	orr.w	r1, r3, r2
 801e5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5b8:	4319      	orrs	r1, r3
 801e5ba:	d110      	bne.n	801e5de <_dtoa_r+0xa26>
 801e5bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e5c0:	d029      	beq.n	801e616 <_dtoa_r+0xa5e>
 801e5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	dd02      	ble.n	801e5ce <_dtoa_r+0xa16>
 801e5c8:	9b08      	ldr	r3, [sp, #32]
 801e5ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e5ce:	9b02      	ldr	r3, [sp, #8]
 801e5d0:	f883 8000 	strb.w	r8, [r3]
 801e5d4:	e63b      	b.n	801e24e <_dtoa_r+0x696>
 801e5d6:	4628      	mov	r0, r5
 801e5d8:	e7bb      	b.n	801e552 <_dtoa_r+0x99a>
 801e5da:	2201      	movs	r2, #1
 801e5dc:	e7e1      	b.n	801e5a2 <_dtoa_r+0x9ea>
 801e5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	db04      	blt.n	801e5ee <_dtoa_r+0xa36>
 801e5e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801e5e6:	430b      	orrs	r3, r1
 801e5e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5ea:	430b      	orrs	r3, r1
 801e5ec:	d120      	bne.n	801e630 <_dtoa_r+0xa78>
 801e5ee:	2a00      	cmp	r2, #0
 801e5f0:	dded      	ble.n	801e5ce <_dtoa_r+0xa16>
 801e5f2:	4649      	mov	r1, r9
 801e5f4:	2201      	movs	r2, #1
 801e5f6:	4658      	mov	r0, fp
 801e5f8:	f000 fbb4 	bl	801ed64 <__lshift>
 801e5fc:	4621      	mov	r1, r4
 801e5fe:	4681      	mov	r9, r0
 801e600:	f000 fc1c 	bl	801ee3c <__mcmp>
 801e604:	2800      	cmp	r0, #0
 801e606:	dc03      	bgt.n	801e610 <_dtoa_r+0xa58>
 801e608:	d1e1      	bne.n	801e5ce <_dtoa_r+0xa16>
 801e60a:	f018 0f01 	tst.w	r8, #1
 801e60e:	d0de      	beq.n	801e5ce <_dtoa_r+0xa16>
 801e610:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e614:	d1d8      	bne.n	801e5c8 <_dtoa_r+0xa10>
 801e616:	9a02      	ldr	r2, [sp, #8]
 801e618:	2339      	movs	r3, #57	@ 0x39
 801e61a:	7013      	strb	r3, [r2, #0]
 801e61c:	4633      	mov	r3, r6
 801e61e:	461e      	mov	r6, r3
 801e620:	3b01      	subs	r3, #1
 801e622:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e626:	2a39      	cmp	r2, #57	@ 0x39
 801e628:	d052      	beq.n	801e6d0 <_dtoa_r+0xb18>
 801e62a:	3201      	adds	r2, #1
 801e62c:	701a      	strb	r2, [r3, #0]
 801e62e:	e60e      	b.n	801e24e <_dtoa_r+0x696>
 801e630:	2a00      	cmp	r2, #0
 801e632:	dd07      	ble.n	801e644 <_dtoa_r+0xa8c>
 801e634:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e638:	d0ed      	beq.n	801e616 <_dtoa_r+0xa5e>
 801e63a:	9a02      	ldr	r2, [sp, #8]
 801e63c:	f108 0301 	add.w	r3, r8, #1
 801e640:	7013      	strb	r3, [r2, #0]
 801e642:	e604      	b.n	801e24e <_dtoa_r+0x696>
 801e644:	9b07      	ldr	r3, [sp, #28]
 801e646:	9a07      	ldr	r2, [sp, #28]
 801e648:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e64c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e64e:	4293      	cmp	r3, r2
 801e650:	d028      	beq.n	801e6a4 <_dtoa_r+0xaec>
 801e652:	4649      	mov	r1, r9
 801e654:	2300      	movs	r3, #0
 801e656:	220a      	movs	r2, #10
 801e658:	4658      	mov	r0, fp
 801e65a:	f000 f9d7 	bl	801ea0c <__multadd>
 801e65e:	42af      	cmp	r7, r5
 801e660:	4681      	mov	r9, r0
 801e662:	f04f 0300 	mov.w	r3, #0
 801e666:	f04f 020a 	mov.w	r2, #10
 801e66a:	4639      	mov	r1, r7
 801e66c:	4658      	mov	r0, fp
 801e66e:	d107      	bne.n	801e680 <_dtoa_r+0xac8>
 801e670:	f000 f9cc 	bl	801ea0c <__multadd>
 801e674:	4607      	mov	r7, r0
 801e676:	4605      	mov	r5, r0
 801e678:	9b07      	ldr	r3, [sp, #28]
 801e67a:	3301      	adds	r3, #1
 801e67c:	9307      	str	r3, [sp, #28]
 801e67e:	e774      	b.n	801e56a <_dtoa_r+0x9b2>
 801e680:	f000 f9c4 	bl	801ea0c <__multadd>
 801e684:	4629      	mov	r1, r5
 801e686:	4607      	mov	r7, r0
 801e688:	2300      	movs	r3, #0
 801e68a:	220a      	movs	r2, #10
 801e68c:	4658      	mov	r0, fp
 801e68e:	f000 f9bd 	bl	801ea0c <__multadd>
 801e692:	4605      	mov	r5, r0
 801e694:	e7f0      	b.n	801e678 <_dtoa_r+0xac0>
 801e696:	9b08      	ldr	r3, [sp, #32]
 801e698:	2b00      	cmp	r3, #0
 801e69a:	bfcc      	ite	gt
 801e69c:	461e      	movgt	r6, r3
 801e69e:	2601      	movle	r6, #1
 801e6a0:	4456      	add	r6, sl
 801e6a2:	2700      	movs	r7, #0
 801e6a4:	4649      	mov	r1, r9
 801e6a6:	2201      	movs	r2, #1
 801e6a8:	4658      	mov	r0, fp
 801e6aa:	f000 fb5b 	bl	801ed64 <__lshift>
 801e6ae:	4621      	mov	r1, r4
 801e6b0:	4681      	mov	r9, r0
 801e6b2:	f000 fbc3 	bl	801ee3c <__mcmp>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	dcb0      	bgt.n	801e61c <_dtoa_r+0xa64>
 801e6ba:	d102      	bne.n	801e6c2 <_dtoa_r+0xb0a>
 801e6bc:	f018 0f01 	tst.w	r8, #1
 801e6c0:	d1ac      	bne.n	801e61c <_dtoa_r+0xa64>
 801e6c2:	4633      	mov	r3, r6
 801e6c4:	461e      	mov	r6, r3
 801e6c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e6ca:	2a30      	cmp	r2, #48	@ 0x30
 801e6cc:	d0fa      	beq.n	801e6c4 <_dtoa_r+0xb0c>
 801e6ce:	e5be      	b.n	801e24e <_dtoa_r+0x696>
 801e6d0:	459a      	cmp	sl, r3
 801e6d2:	d1a4      	bne.n	801e61e <_dtoa_r+0xa66>
 801e6d4:	9b04      	ldr	r3, [sp, #16]
 801e6d6:	3301      	adds	r3, #1
 801e6d8:	9304      	str	r3, [sp, #16]
 801e6da:	2331      	movs	r3, #49	@ 0x31
 801e6dc:	f88a 3000 	strb.w	r3, [sl]
 801e6e0:	e5b5      	b.n	801e24e <_dtoa_r+0x696>
 801e6e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e6e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e744 <_dtoa_r+0xb8c>
 801e6e8:	b11b      	cbz	r3, 801e6f2 <_dtoa_r+0xb3a>
 801e6ea:	f10a 0308 	add.w	r3, sl, #8
 801e6ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e6f0:	6013      	str	r3, [r2, #0]
 801e6f2:	4650      	mov	r0, sl
 801e6f4:	b017      	add	sp, #92	@ 0x5c
 801e6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6fc:	2b01      	cmp	r3, #1
 801e6fe:	f77f ae3d 	ble.w	801e37c <_dtoa_r+0x7c4>
 801e702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e704:	930a      	str	r3, [sp, #40]	@ 0x28
 801e706:	2001      	movs	r0, #1
 801e708:	e65b      	b.n	801e3c2 <_dtoa_r+0x80a>
 801e70a:	9b08      	ldr	r3, [sp, #32]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	f77f aed6 	ble.w	801e4be <_dtoa_r+0x906>
 801e712:	4656      	mov	r6, sl
 801e714:	4621      	mov	r1, r4
 801e716:	4648      	mov	r0, r9
 801e718:	f7ff f9c5 	bl	801daa6 <quorem>
 801e71c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e720:	f806 8b01 	strb.w	r8, [r6], #1
 801e724:	9b08      	ldr	r3, [sp, #32]
 801e726:	eba6 020a 	sub.w	r2, r6, sl
 801e72a:	4293      	cmp	r3, r2
 801e72c:	ddb3      	ble.n	801e696 <_dtoa_r+0xade>
 801e72e:	4649      	mov	r1, r9
 801e730:	2300      	movs	r3, #0
 801e732:	220a      	movs	r2, #10
 801e734:	4658      	mov	r0, fp
 801e736:	f000 f969 	bl	801ea0c <__multadd>
 801e73a:	4681      	mov	r9, r0
 801e73c:	e7ea      	b.n	801e714 <_dtoa_r+0xb5c>
 801e73e:	bf00      	nop
 801e740:	0802090c 	.word	0x0802090c
 801e744:	08020890 	.word	0x08020890

0801e748 <_free_r>:
 801e748:	b538      	push	{r3, r4, r5, lr}
 801e74a:	4605      	mov	r5, r0
 801e74c:	2900      	cmp	r1, #0
 801e74e:	d041      	beq.n	801e7d4 <_free_r+0x8c>
 801e750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e754:	1f0c      	subs	r4, r1, #4
 801e756:	2b00      	cmp	r3, #0
 801e758:	bfb8      	it	lt
 801e75a:	18e4      	addlt	r4, r4, r3
 801e75c:	f000 f8e8 	bl	801e930 <__malloc_lock>
 801e760:	4a1d      	ldr	r2, [pc, #116]	@ (801e7d8 <_free_r+0x90>)
 801e762:	6813      	ldr	r3, [r2, #0]
 801e764:	b933      	cbnz	r3, 801e774 <_free_r+0x2c>
 801e766:	6063      	str	r3, [r4, #4]
 801e768:	6014      	str	r4, [r2, #0]
 801e76a:	4628      	mov	r0, r5
 801e76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e770:	f000 b8e4 	b.w	801e93c <__malloc_unlock>
 801e774:	42a3      	cmp	r3, r4
 801e776:	d908      	bls.n	801e78a <_free_r+0x42>
 801e778:	6820      	ldr	r0, [r4, #0]
 801e77a:	1821      	adds	r1, r4, r0
 801e77c:	428b      	cmp	r3, r1
 801e77e:	bf01      	itttt	eq
 801e780:	6819      	ldreq	r1, [r3, #0]
 801e782:	685b      	ldreq	r3, [r3, #4]
 801e784:	1809      	addeq	r1, r1, r0
 801e786:	6021      	streq	r1, [r4, #0]
 801e788:	e7ed      	b.n	801e766 <_free_r+0x1e>
 801e78a:	461a      	mov	r2, r3
 801e78c:	685b      	ldr	r3, [r3, #4]
 801e78e:	b10b      	cbz	r3, 801e794 <_free_r+0x4c>
 801e790:	42a3      	cmp	r3, r4
 801e792:	d9fa      	bls.n	801e78a <_free_r+0x42>
 801e794:	6811      	ldr	r1, [r2, #0]
 801e796:	1850      	adds	r0, r2, r1
 801e798:	42a0      	cmp	r0, r4
 801e79a:	d10b      	bne.n	801e7b4 <_free_r+0x6c>
 801e79c:	6820      	ldr	r0, [r4, #0]
 801e79e:	4401      	add	r1, r0
 801e7a0:	1850      	adds	r0, r2, r1
 801e7a2:	4283      	cmp	r3, r0
 801e7a4:	6011      	str	r1, [r2, #0]
 801e7a6:	d1e0      	bne.n	801e76a <_free_r+0x22>
 801e7a8:	6818      	ldr	r0, [r3, #0]
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	6053      	str	r3, [r2, #4]
 801e7ae:	4408      	add	r0, r1
 801e7b0:	6010      	str	r0, [r2, #0]
 801e7b2:	e7da      	b.n	801e76a <_free_r+0x22>
 801e7b4:	d902      	bls.n	801e7bc <_free_r+0x74>
 801e7b6:	230c      	movs	r3, #12
 801e7b8:	602b      	str	r3, [r5, #0]
 801e7ba:	e7d6      	b.n	801e76a <_free_r+0x22>
 801e7bc:	6820      	ldr	r0, [r4, #0]
 801e7be:	1821      	adds	r1, r4, r0
 801e7c0:	428b      	cmp	r3, r1
 801e7c2:	bf04      	itt	eq
 801e7c4:	6819      	ldreq	r1, [r3, #0]
 801e7c6:	685b      	ldreq	r3, [r3, #4]
 801e7c8:	6063      	str	r3, [r4, #4]
 801e7ca:	bf04      	itt	eq
 801e7cc:	1809      	addeq	r1, r1, r0
 801e7ce:	6021      	streq	r1, [r4, #0]
 801e7d0:	6054      	str	r4, [r2, #4]
 801e7d2:	e7ca      	b.n	801e76a <_free_r+0x22>
 801e7d4:	bd38      	pop	{r3, r4, r5, pc}
 801e7d6:	bf00      	nop
 801e7d8:	20002500 	.word	0x20002500

0801e7dc <malloc>:
 801e7dc:	4b02      	ldr	r3, [pc, #8]	@ (801e7e8 <malloc+0xc>)
 801e7de:	4601      	mov	r1, r0
 801e7e0:	6818      	ldr	r0, [r3, #0]
 801e7e2:	f000 b825 	b.w	801e830 <_malloc_r>
 801e7e6:	bf00      	nop
 801e7e8:	2000014c 	.word	0x2000014c

0801e7ec <sbrk_aligned>:
 801e7ec:	b570      	push	{r4, r5, r6, lr}
 801e7ee:	4e0f      	ldr	r6, [pc, #60]	@ (801e82c <sbrk_aligned+0x40>)
 801e7f0:	460c      	mov	r4, r1
 801e7f2:	6831      	ldr	r1, [r6, #0]
 801e7f4:	4605      	mov	r5, r0
 801e7f6:	b911      	cbnz	r1, 801e7fe <sbrk_aligned+0x12>
 801e7f8:	f000 fe92 	bl	801f520 <_sbrk_r>
 801e7fc:	6030      	str	r0, [r6, #0]
 801e7fe:	4621      	mov	r1, r4
 801e800:	4628      	mov	r0, r5
 801e802:	f000 fe8d 	bl	801f520 <_sbrk_r>
 801e806:	1c43      	adds	r3, r0, #1
 801e808:	d103      	bne.n	801e812 <sbrk_aligned+0x26>
 801e80a:	f04f 34ff 	mov.w	r4, #4294967295
 801e80e:	4620      	mov	r0, r4
 801e810:	bd70      	pop	{r4, r5, r6, pc}
 801e812:	1cc4      	adds	r4, r0, #3
 801e814:	f024 0403 	bic.w	r4, r4, #3
 801e818:	42a0      	cmp	r0, r4
 801e81a:	d0f8      	beq.n	801e80e <sbrk_aligned+0x22>
 801e81c:	1a21      	subs	r1, r4, r0
 801e81e:	4628      	mov	r0, r5
 801e820:	f000 fe7e 	bl	801f520 <_sbrk_r>
 801e824:	3001      	adds	r0, #1
 801e826:	d1f2      	bne.n	801e80e <sbrk_aligned+0x22>
 801e828:	e7ef      	b.n	801e80a <sbrk_aligned+0x1e>
 801e82a:	bf00      	nop
 801e82c:	200024fc 	.word	0x200024fc

0801e830 <_malloc_r>:
 801e830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e834:	1ccd      	adds	r5, r1, #3
 801e836:	f025 0503 	bic.w	r5, r5, #3
 801e83a:	3508      	adds	r5, #8
 801e83c:	2d0c      	cmp	r5, #12
 801e83e:	bf38      	it	cc
 801e840:	250c      	movcc	r5, #12
 801e842:	2d00      	cmp	r5, #0
 801e844:	4606      	mov	r6, r0
 801e846:	db01      	blt.n	801e84c <_malloc_r+0x1c>
 801e848:	42a9      	cmp	r1, r5
 801e84a:	d904      	bls.n	801e856 <_malloc_r+0x26>
 801e84c:	230c      	movs	r3, #12
 801e84e:	6033      	str	r3, [r6, #0]
 801e850:	2000      	movs	r0, #0
 801e852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e92c <_malloc_r+0xfc>
 801e85a:	f000 f869 	bl	801e930 <__malloc_lock>
 801e85e:	f8d8 3000 	ldr.w	r3, [r8]
 801e862:	461c      	mov	r4, r3
 801e864:	bb44      	cbnz	r4, 801e8b8 <_malloc_r+0x88>
 801e866:	4629      	mov	r1, r5
 801e868:	4630      	mov	r0, r6
 801e86a:	f7ff ffbf 	bl	801e7ec <sbrk_aligned>
 801e86e:	1c43      	adds	r3, r0, #1
 801e870:	4604      	mov	r4, r0
 801e872:	d158      	bne.n	801e926 <_malloc_r+0xf6>
 801e874:	f8d8 4000 	ldr.w	r4, [r8]
 801e878:	4627      	mov	r7, r4
 801e87a:	2f00      	cmp	r7, #0
 801e87c:	d143      	bne.n	801e906 <_malloc_r+0xd6>
 801e87e:	2c00      	cmp	r4, #0
 801e880:	d04b      	beq.n	801e91a <_malloc_r+0xea>
 801e882:	6823      	ldr	r3, [r4, #0]
 801e884:	4639      	mov	r1, r7
 801e886:	4630      	mov	r0, r6
 801e888:	eb04 0903 	add.w	r9, r4, r3
 801e88c:	f000 fe48 	bl	801f520 <_sbrk_r>
 801e890:	4581      	cmp	r9, r0
 801e892:	d142      	bne.n	801e91a <_malloc_r+0xea>
 801e894:	6821      	ldr	r1, [r4, #0]
 801e896:	1a6d      	subs	r5, r5, r1
 801e898:	4629      	mov	r1, r5
 801e89a:	4630      	mov	r0, r6
 801e89c:	f7ff ffa6 	bl	801e7ec <sbrk_aligned>
 801e8a0:	3001      	adds	r0, #1
 801e8a2:	d03a      	beq.n	801e91a <_malloc_r+0xea>
 801e8a4:	6823      	ldr	r3, [r4, #0]
 801e8a6:	442b      	add	r3, r5
 801e8a8:	6023      	str	r3, [r4, #0]
 801e8aa:	f8d8 3000 	ldr.w	r3, [r8]
 801e8ae:	685a      	ldr	r2, [r3, #4]
 801e8b0:	bb62      	cbnz	r2, 801e90c <_malloc_r+0xdc>
 801e8b2:	f8c8 7000 	str.w	r7, [r8]
 801e8b6:	e00f      	b.n	801e8d8 <_malloc_r+0xa8>
 801e8b8:	6822      	ldr	r2, [r4, #0]
 801e8ba:	1b52      	subs	r2, r2, r5
 801e8bc:	d420      	bmi.n	801e900 <_malloc_r+0xd0>
 801e8be:	2a0b      	cmp	r2, #11
 801e8c0:	d917      	bls.n	801e8f2 <_malloc_r+0xc2>
 801e8c2:	1961      	adds	r1, r4, r5
 801e8c4:	42a3      	cmp	r3, r4
 801e8c6:	6025      	str	r5, [r4, #0]
 801e8c8:	bf18      	it	ne
 801e8ca:	6059      	strne	r1, [r3, #4]
 801e8cc:	6863      	ldr	r3, [r4, #4]
 801e8ce:	bf08      	it	eq
 801e8d0:	f8c8 1000 	streq.w	r1, [r8]
 801e8d4:	5162      	str	r2, [r4, r5]
 801e8d6:	604b      	str	r3, [r1, #4]
 801e8d8:	4630      	mov	r0, r6
 801e8da:	f000 f82f 	bl	801e93c <__malloc_unlock>
 801e8de:	f104 000b 	add.w	r0, r4, #11
 801e8e2:	1d23      	adds	r3, r4, #4
 801e8e4:	f020 0007 	bic.w	r0, r0, #7
 801e8e8:	1ac2      	subs	r2, r0, r3
 801e8ea:	bf1c      	itt	ne
 801e8ec:	1a1b      	subne	r3, r3, r0
 801e8ee:	50a3      	strne	r3, [r4, r2]
 801e8f0:	e7af      	b.n	801e852 <_malloc_r+0x22>
 801e8f2:	6862      	ldr	r2, [r4, #4]
 801e8f4:	42a3      	cmp	r3, r4
 801e8f6:	bf0c      	ite	eq
 801e8f8:	f8c8 2000 	streq.w	r2, [r8]
 801e8fc:	605a      	strne	r2, [r3, #4]
 801e8fe:	e7eb      	b.n	801e8d8 <_malloc_r+0xa8>
 801e900:	4623      	mov	r3, r4
 801e902:	6864      	ldr	r4, [r4, #4]
 801e904:	e7ae      	b.n	801e864 <_malloc_r+0x34>
 801e906:	463c      	mov	r4, r7
 801e908:	687f      	ldr	r7, [r7, #4]
 801e90a:	e7b6      	b.n	801e87a <_malloc_r+0x4a>
 801e90c:	461a      	mov	r2, r3
 801e90e:	685b      	ldr	r3, [r3, #4]
 801e910:	42a3      	cmp	r3, r4
 801e912:	d1fb      	bne.n	801e90c <_malloc_r+0xdc>
 801e914:	2300      	movs	r3, #0
 801e916:	6053      	str	r3, [r2, #4]
 801e918:	e7de      	b.n	801e8d8 <_malloc_r+0xa8>
 801e91a:	230c      	movs	r3, #12
 801e91c:	6033      	str	r3, [r6, #0]
 801e91e:	4630      	mov	r0, r6
 801e920:	f000 f80c 	bl	801e93c <__malloc_unlock>
 801e924:	e794      	b.n	801e850 <_malloc_r+0x20>
 801e926:	6005      	str	r5, [r0, #0]
 801e928:	e7d6      	b.n	801e8d8 <_malloc_r+0xa8>
 801e92a:	bf00      	nop
 801e92c:	20002500 	.word	0x20002500

0801e930 <__malloc_lock>:
 801e930:	4801      	ldr	r0, [pc, #4]	@ (801e938 <__malloc_lock+0x8>)
 801e932:	f7ff b8b6 	b.w	801daa2 <__retarget_lock_acquire_recursive>
 801e936:	bf00      	nop
 801e938:	200024f8 	.word	0x200024f8

0801e93c <__malloc_unlock>:
 801e93c:	4801      	ldr	r0, [pc, #4]	@ (801e944 <__malloc_unlock+0x8>)
 801e93e:	f7ff b8b1 	b.w	801daa4 <__retarget_lock_release_recursive>
 801e942:	bf00      	nop
 801e944:	200024f8 	.word	0x200024f8

0801e948 <_Balloc>:
 801e948:	b570      	push	{r4, r5, r6, lr}
 801e94a:	69c6      	ldr	r6, [r0, #28]
 801e94c:	4604      	mov	r4, r0
 801e94e:	460d      	mov	r5, r1
 801e950:	b976      	cbnz	r6, 801e970 <_Balloc+0x28>
 801e952:	2010      	movs	r0, #16
 801e954:	f7ff ff42 	bl	801e7dc <malloc>
 801e958:	4602      	mov	r2, r0
 801e95a:	61e0      	str	r0, [r4, #28]
 801e95c:	b920      	cbnz	r0, 801e968 <_Balloc+0x20>
 801e95e:	4b18      	ldr	r3, [pc, #96]	@ (801e9c0 <_Balloc+0x78>)
 801e960:	4818      	ldr	r0, [pc, #96]	@ (801e9c4 <_Balloc+0x7c>)
 801e962:	216b      	movs	r1, #107	@ 0x6b
 801e964:	f000 fdfa 	bl	801f55c <__assert_func>
 801e968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e96c:	6006      	str	r6, [r0, #0]
 801e96e:	60c6      	str	r6, [r0, #12]
 801e970:	69e6      	ldr	r6, [r4, #28]
 801e972:	68f3      	ldr	r3, [r6, #12]
 801e974:	b183      	cbz	r3, 801e998 <_Balloc+0x50>
 801e976:	69e3      	ldr	r3, [r4, #28]
 801e978:	68db      	ldr	r3, [r3, #12]
 801e97a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e97e:	b9b8      	cbnz	r0, 801e9b0 <_Balloc+0x68>
 801e980:	2101      	movs	r1, #1
 801e982:	fa01 f605 	lsl.w	r6, r1, r5
 801e986:	1d72      	adds	r2, r6, #5
 801e988:	0092      	lsls	r2, r2, #2
 801e98a:	4620      	mov	r0, r4
 801e98c:	f000 fe04 	bl	801f598 <_calloc_r>
 801e990:	b160      	cbz	r0, 801e9ac <_Balloc+0x64>
 801e992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e996:	e00e      	b.n	801e9b6 <_Balloc+0x6e>
 801e998:	2221      	movs	r2, #33	@ 0x21
 801e99a:	2104      	movs	r1, #4
 801e99c:	4620      	mov	r0, r4
 801e99e:	f000 fdfb 	bl	801f598 <_calloc_r>
 801e9a2:	69e3      	ldr	r3, [r4, #28]
 801e9a4:	60f0      	str	r0, [r6, #12]
 801e9a6:	68db      	ldr	r3, [r3, #12]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d1e4      	bne.n	801e976 <_Balloc+0x2e>
 801e9ac:	2000      	movs	r0, #0
 801e9ae:	bd70      	pop	{r4, r5, r6, pc}
 801e9b0:	6802      	ldr	r2, [r0, #0]
 801e9b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e9b6:	2300      	movs	r3, #0
 801e9b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e9bc:	e7f7      	b.n	801e9ae <_Balloc+0x66>
 801e9be:	bf00      	nop
 801e9c0:	0802089d 	.word	0x0802089d
 801e9c4:	0802091d 	.word	0x0802091d

0801e9c8 <_Bfree>:
 801e9c8:	b570      	push	{r4, r5, r6, lr}
 801e9ca:	69c6      	ldr	r6, [r0, #28]
 801e9cc:	4605      	mov	r5, r0
 801e9ce:	460c      	mov	r4, r1
 801e9d0:	b976      	cbnz	r6, 801e9f0 <_Bfree+0x28>
 801e9d2:	2010      	movs	r0, #16
 801e9d4:	f7ff ff02 	bl	801e7dc <malloc>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	61e8      	str	r0, [r5, #28]
 801e9dc:	b920      	cbnz	r0, 801e9e8 <_Bfree+0x20>
 801e9de:	4b09      	ldr	r3, [pc, #36]	@ (801ea04 <_Bfree+0x3c>)
 801e9e0:	4809      	ldr	r0, [pc, #36]	@ (801ea08 <_Bfree+0x40>)
 801e9e2:	218f      	movs	r1, #143	@ 0x8f
 801e9e4:	f000 fdba 	bl	801f55c <__assert_func>
 801e9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e9ec:	6006      	str	r6, [r0, #0]
 801e9ee:	60c6      	str	r6, [r0, #12]
 801e9f0:	b13c      	cbz	r4, 801ea02 <_Bfree+0x3a>
 801e9f2:	69eb      	ldr	r3, [r5, #28]
 801e9f4:	6862      	ldr	r2, [r4, #4]
 801e9f6:	68db      	ldr	r3, [r3, #12]
 801e9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e9fc:	6021      	str	r1, [r4, #0]
 801e9fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ea02:	bd70      	pop	{r4, r5, r6, pc}
 801ea04:	0802089d 	.word	0x0802089d
 801ea08:	0802091d 	.word	0x0802091d

0801ea0c <__multadd>:
 801ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea10:	690d      	ldr	r5, [r1, #16]
 801ea12:	4607      	mov	r7, r0
 801ea14:	460c      	mov	r4, r1
 801ea16:	461e      	mov	r6, r3
 801ea18:	f101 0c14 	add.w	ip, r1, #20
 801ea1c:	2000      	movs	r0, #0
 801ea1e:	f8dc 3000 	ldr.w	r3, [ip]
 801ea22:	b299      	uxth	r1, r3
 801ea24:	fb02 6101 	mla	r1, r2, r1, r6
 801ea28:	0c1e      	lsrs	r6, r3, #16
 801ea2a:	0c0b      	lsrs	r3, r1, #16
 801ea2c:	fb02 3306 	mla	r3, r2, r6, r3
 801ea30:	b289      	uxth	r1, r1
 801ea32:	3001      	adds	r0, #1
 801ea34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ea38:	4285      	cmp	r5, r0
 801ea3a:	f84c 1b04 	str.w	r1, [ip], #4
 801ea3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ea42:	dcec      	bgt.n	801ea1e <__multadd+0x12>
 801ea44:	b30e      	cbz	r6, 801ea8a <__multadd+0x7e>
 801ea46:	68a3      	ldr	r3, [r4, #8]
 801ea48:	42ab      	cmp	r3, r5
 801ea4a:	dc19      	bgt.n	801ea80 <__multadd+0x74>
 801ea4c:	6861      	ldr	r1, [r4, #4]
 801ea4e:	4638      	mov	r0, r7
 801ea50:	3101      	adds	r1, #1
 801ea52:	f7ff ff79 	bl	801e948 <_Balloc>
 801ea56:	4680      	mov	r8, r0
 801ea58:	b928      	cbnz	r0, 801ea66 <__multadd+0x5a>
 801ea5a:	4602      	mov	r2, r0
 801ea5c:	4b0c      	ldr	r3, [pc, #48]	@ (801ea90 <__multadd+0x84>)
 801ea5e:	480d      	ldr	r0, [pc, #52]	@ (801ea94 <__multadd+0x88>)
 801ea60:	21ba      	movs	r1, #186	@ 0xba
 801ea62:	f000 fd7b 	bl	801f55c <__assert_func>
 801ea66:	6922      	ldr	r2, [r4, #16]
 801ea68:	3202      	adds	r2, #2
 801ea6a:	f104 010c 	add.w	r1, r4, #12
 801ea6e:	0092      	lsls	r2, r2, #2
 801ea70:	300c      	adds	r0, #12
 801ea72:	f000 fd65 	bl	801f540 <memcpy>
 801ea76:	4621      	mov	r1, r4
 801ea78:	4638      	mov	r0, r7
 801ea7a:	f7ff ffa5 	bl	801e9c8 <_Bfree>
 801ea7e:	4644      	mov	r4, r8
 801ea80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ea84:	3501      	adds	r5, #1
 801ea86:	615e      	str	r6, [r3, #20]
 801ea88:	6125      	str	r5, [r4, #16]
 801ea8a:	4620      	mov	r0, r4
 801ea8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea90:	0802090c 	.word	0x0802090c
 801ea94:	0802091d 	.word	0x0802091d

0801ea98 <__hi0bits>:
 801ea98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	bf36      	itet	cc
 801eaa0:	0403      	lslcc	r3, r0, #16
 801eaa2:	2000      	movcs	r0, #0
 801eaa4:	2010      	movcc	r0, #16
 801eaa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eaaa:	bf3c      	itt	cc
 801eaac:	021b      	lslcc	r3, r3, #8
 801eaae:	3008      	addcc	r0, #8
 801eab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eab4:	bf3c      	itt	cc
 801eab6:	011b      	lslcc	r3, r3, #4
 801eab8:	3004      	addcc	r0, #4
 801eaba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eabe:	bf3c      	itt	cc
 801eac0:	009b      	lslcc	r3, r3, #2
 801eac2:	3002      	addcc	r0, #2
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	db05      	blt.n	801ead4 <__hi0bits+0x3c>
 801eac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801eacc:	f100 0001 	add.w	r0, r0, #1
 801ead0:	bf08      	it	eq
 801ead2:	2020      	moveq	r0, #32
 801ead4:	4770      	bx	lr

0801ead6 <__lo0bits>:
 801ead6:	6803      	ldr	r3, [r0, #0]
 801ead8:	4602      	mov	r2, r0
 801eada:	f013 0007 	ands.w	r0, r3, #7
 801eade:	d00b      	beq.n	801eaf8 <__lo0bits+0x22>
 801eae0:	07d9      	lsls	r1, r3, #31
 801eae2:	d421      	bmi.n	801eb28 <__lo0bits+0x52>
 801eae4:	0798      	lsls	r0, r3, #30
 801eae6:	bf49      	itett	mi
 801eae8:	085b      	lsrmi	r3, r3, #1
 801eaea:	089b      	lsrpl	r3, r3, #2
 801eaec:	2001      	movmi	r0, #1
 801eaee:	6013      	strmi	r3, [r2, #0]
 801eaf0:	bf5c      	itt	pl
 801eaf2:	6013      	strpl	r3, [r2, #0]
 801eaf4:	2002      	movpl	r0, #2
 801eaf6:	4770      	bx	lr
 801eaf8:	b299      	uxth	r1, r3
 801eafa:	b909      	cbnz	r1, 801eb00 <__lo0bits+0x2a>
 801eafc:	0c1b      	lsrs	r3, r3, #16
 801eafe:	2010      	movs	r0, #16
 801eb00:	b2d9      	uxtb	r1, r3
 801eb02:	b909      	cbnz	r1, 801eb08 <__lo0bits+0x32>
 801eb04:	3008      	adds	r0, #8
 801eb06:	0a1b      	lsrs	r3, r3, #8
 801eb08:	0719      	lsls	r1, r3, #28
 801eb0a:	bf04      	itt	eq
 801eb0c:	091b      	lsreq	r3, r3, #4
 801eb0e:	3004      	addeq	r0, #4
 801eb10:	0799      	lsls	r1, r3, #30
 801eb12:	bf04      	itt	eq
 801eb14:	089b      	lsreq	r3, r3, #2
 801eb16:	3002      	addeq	r0, #2
 801eb18:	07d9      	lsls	r1, r3, #31
 801eb1a:	d403      	bmi.n	801eb24 <__lo0bits+0x4e>
 801eb1c:	085b      	lsrs	r3, r3, #1
 801eb1e:	f100 0001 	add.w	r0, r0, #1
 801eb22:	d003      	beq.n	801eb2c <__lo0bits+0x56>
 801eb24:	6013      	str	r3, [r2, #0]
 801eb26:	4770      	bx	lr
 801eb28:	2000      	movs	r0, #0
 801eb2a:	4770      	bx	lr
 801eb2c:	2020      	movs	r0, #32
 801eb2e:	4770      	bx	lr

0801eb30 <__i2b>:
 801eb30:	b510      	push	{r4, lr}
 801eb32:	460c      	mov	r4, r1
 801eb34:	2101      	movs	r1, #1
 801eb36:	f7ff ff07 	bl	801e948 <_Balloc>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	b928      	cbnz	r0, 801eb4a <__i2b+0x1a>
 801eb3e:	4b05      	ldr	r3, [pc, #20]	@ (801eb54 <__i2b+0x24>)
 801eb40:	4805      	ldr	r0, [pc, #20]	@ (801eb58 <__i2b+0x28>)
 801eb42:	f240 1145 	movw	r1, #325	@ 0x145
 801eb46:	f000 fd09 	bl	801f55c <__assert_func>
 801eb4a:	2301      	movs	r3, #1
 801eb4c:	6144      	str	r4, [r0, #20]
 801eb4e:	6103      	str	r3, [r0, #16]
 801eb50:	bd10      	pop	{r4, pc}
 801eb52:	bf00      	nop
 801eb54:	0802090c 	.word	0x0802090c
 801eb58:	0802091d 	.word	0x0802091d

0801eb5c <__multiply>:
 801eb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb60:	4614      	mov	r4, r2
 801eb62:	690a      	ldr	r2, [r1, #16]
 801eb64:	6923      	ldr	r3, [r4, #16]
 801eb66:	429a      	cmp	r2, r3
 801eb68:	bfa8      	it	ge
 801eb6a:	4623      	movge	r3, r4
 801eb6c:	460f      	mov	r7, r1
 801eb6e:	bfa4      	itt	ge
 801eb70:	460c      	movge	r4, r1
 801eb72:	461f      	movge	r7, r3
 801eb74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801eb78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801eb7c:	68a3      	ldr	r3, [r4, #8]
 801eb7e:	6861      	ldr	r1, [r4, #4]
 801eb80:	eb0a 0609 	add.w	r6, sl, r9
 801eb84:	42b3      	cmp	r3, r6
 801eb86:	b085      	sub	sp, #20
 801eb88:	bfb8      	it	lt
 801eb8a:	3101      	addlt	r1, #1
 801eb8c:	f7ff fedc 	bl	801e948 <_Balloc>
 801eb90:	b930      	cbnz	r0, 801eba0 <__multiply+0x44>
 801eb92:	4602      	mov	r2, r0
 801eb94:	4b44      	ldr	r3, [pc, #272]	@ (801eca8 <__multiply+0x14c>)
 801eb96:	4845      	ldr	r0, [pc, #276]	@ (801ecac <__multiply+0x150>)
 801eb98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801eb9c:	f000 fcde 	bl	801f55c <__assert_func>
 801eba0:	f100 0514 	add.w	r5, r0, #20
 801eba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801eba8:	462b      	mov	r3, r5
 801ebaa:	2200      	movs	r2, #0
 801ebac:	4543      	cmp	r3, r8
 801ebae:	d321      	bcc.n	801ebf4 <__multiply+0x98>
 801ebb0:	f107 0114 	add.w	r1, r7, #20
 801ebb4:	f104 0214 	add.w	r2, r4, #20
 801ebb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ebbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ebc0:	9302      	str	r3, [sp, #8]
 801ebc2:	1b13      	subs	r3, r2, r4
 801ebc4:	3b15      	subs	r3, #21
 801ebc6:	f023 0303 	bic.w	r3, r3, #3
 801ebca:	3304      	adds	r3, #4
 801ebcc:	f104 0715 	add.w	r7, r4, #21
 801ebd0:	42ba      	cmp	r2, r7
 801ebd2:	bf38      	it	cc
 801ebd4:	2304      	movcc	r3, #4
 801ebd6:	9301      	str	r3, [sp, #4]
 801ebd8:	9b02      	ldr	r3, [sp, #8]
 801ebda:	9103      	str	r1, [sp, #12]
 801ebdc:	428b      	cmp	r3, r1
 801ebde:	d80c      	bhi.n	801ebfa <__multiply+0x9e>
 801ebe0:	2e00      	cmp	r6, #0
 801ebe2:	dd03      	ble.n	801ebec <__multiply+0x90>
 801ebe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d05a      	beq.n	801eca2 <__multiply+0x146>
 801ebec:	6106      	str	r6, [r0, #16]
 801ebee:	b005      	add	sp, #20
 801ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebf4:	f843 2b04 	str.w	r2, [r3], #4
 801ebf8:	e7d8      	b.n	801ebac <__multiply+0x50>
 801ebfa:	f8b1 a000 	ldrh.w	sl, [r1]
 801ebfe:	f1ba 0f00 	cmp.w	sl, #0
 801ec02:	d023      	beq.n	801ec4c <__multiply+0xf0>
 801ec04:	f104 0e14 	add.w	lr, r4, #20
 801ec08:	46a9      	mov	r9, r5
 801ec0a:	f04f 0c00 	mov.w	ip, #0
 801ec0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ec12:	f8d9 3000 	ldr.w	r3, [r9]
 801ec16:	fa1f fb87 	uxth.w	fp, r7
 801ec1a:	b29b      	uxth	r3, r3
 801ec1c:	fb0a 330b 	mla	r3, sl, fp, r3
 801ec20:	4463      	add	r3, ip
 801ec22:	f8d9 c000 	ldr.w	ip, [r9]
 801ec26:	0c3f      	lsrs	r7, r7, #16
 801ec28:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ec2c:	fb0a c707 	mla	r7, sl, r7, ip
 801ec30:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ec34:	b29b      	uxth	r3, r3
 801ec36:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ec3a:	4572      	cmp	r2, lr
 801ec3c:	f849 3b04 	str.w	r3, [r9], #4
 801ec40:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ec44:	d8e3      	bhi.n	801ec0e <__multiply+0xb2>
 801ec46:	9b01      	ldr	r3, [sp, #4]
 801ec48:	f845 c003 	str.w	ip, [r5, r3]
 801ec4c:	9b03      	ldr	r3, [sp, #12]
 801ec4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ec52:	3104      	adds	r1, #4
 801ec54:	f1b9 0f00 	cmp.w	r9, #0
 801ec58:	d021      	beq.n	801ec9e <__multiply+0x142>
 801ec5a:	682b      	ldr	r3, [r5, #0]
 801ec5c:	f104 0c14 	add.w	ip, r4, #20
 801ec60:	46ae      	mov	lr, r5
 801ec62:	f04f 0a00 	mov.w	sl, #0
 801ec66:	f8bc b000 	ldrh.w	fp, [ip]
 801ec6a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ec6e:	fb09 770b 	mla	r7, r9, fp, r7
 801ec72:	4457      	add	r7, sl
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ec7a:	f84e 3b04 	str.w	r3, [lr], #4
 801ec7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ec82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ec86:	f8be 3000 	ldrh.w	r3, [lr]
 801ec8a:	fb09 330a 	mla	r3, r9, sl, r3
 801ec8e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ec92:	4562      	cmp	r2, ip
 801ec94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ec98:	d8e5      	bhi.n	801ec66 <__multiply+0x10a>
 801ec9a:	9f01      	ldr	r7, [sp, #4]
 801ec9c:	51eb      	str	r3, [r5, r7]
 801ec9e:	3504      	adds	r5, #4
 801eca0:	e79a      	b.n	801ebd8 <__multiply+0x7c>
 801eca2:	3e01      	subs	r6, #1
 801eca4:	e79c      	b.n	801ebe0 <__multiply+0x84>
 801eca6:	bf00      	nop
 801eca8:	0802090c 	.word	0x0802090c
 801ecac:	0802091d 	.word	0x0802091d

0801ecb0 <__pow5mult>:
 801ecb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ecb4:	4615      	mov	r5, r2
 801ecb6:	f012 0203 	ands.w	r2, r2, #3
 801ecba:	4607      	mov	r7, r0
 801ecbc:	460e      	mov	r6, r1
 801ecbe:	d007      	beq.n	801ecd0 <__pow5mult+0x20>
 801ecc0:	4c25      	ldr	r4, [pc, #148]	@ (801ed58 <__pow5mult+0xa8>)
 801ecc2:	3a01      	subs	r2, #1
 801ecc4:	2300      	movs	r3, #0
 801ecc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ecca:	f7ff fe9f 	bl	801ea0c <__multadd>
 801ecce:	4606      	mov	r6, r0
 801ecd0:	10ad      	asrs	r5, r5, #2
 801ecd2:	d03d      	beq.n	801ed50 <__pow5mult+0xa0>
 801ecd4:	69fc      	ldr	r4, [r7, #28]
 801ecd6:	b97c      	cbnz	r4, 801ecf8 <__pow5mult+0x48>
 801ecd8:	2010      	movs	r0, #16
 801ecda:	f7ff fd7f 	bl	801e7dc <malloc>
 801ecde:	4602      	mov	r2, r0
 801ece0:	61f8      	str	r0, [r7, #28]
 801ece2:	b928      	cbnz	r0, 801ecf0 <__pow5mult+0x40>
 801ece4:	4b1d      	ldr	r3, [pc, #116]	@ (801ed5c <__pow5mult+0xac>)
 801ece6:	481e      	ldr	r0, [pc, #120]	@ (801ed60 <__pow5mult+0xb0>)
 801ece8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ecec:	f000 fc36 	bl	801f55c <__assert_func>
 801ecf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ecf4:	6004      	str	r4, [r0, #0]
 801ecf6:	60c4      	str	r4, [r0, #12]
 801ecf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ecfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ed00:	b94c      	cbnz	r4, 801ed16 <__pow5mult+0x66>
 801ed02:	f240 2171 	movw	r1, #625	@ 0x271
 801ed06:	4638      	mov	r0, r7
 801ed08:	f7ff ff12 	bl	801eb30 <__i2b>
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ed12:	4604      	mov	r4, r0
 801ed14:	6003      	str	r3, [r0, #0]
 801ed16:	f04f 0900 	mov.w	r9, #0
 801ed1a:	07eb      	lsls	r3, r5, #31
 801ed1c:	d50a      	bpl.n	801ed34 <__pow5mult+0x84>
 801ed1e:	4631      	mov	r1, r6
 801ed20:	4622      	mov	r2, r4
 801ed22:	4638      	mov	r0, r7
 801ed24:	f7ff ff1a 	bl	801eb5c <__multiply>
 801ed28:	4631      	mov	r1, r6
 801ed2a:	4680      	mov	r8, r0
 801ed2c:	4638      	mov	r0, r7
 801ed2e:	f7ff fe4b 	bl	801e9c8 <_Bfree>
 801ed32:	4646      	mov	r6, r8
 801ed34:	106d      	asrs	r5, r5, #1
 801ed36:	d00b      	beq.n	801ed50 <__pow5mult+0xa0>
 801ed38:	6820      	ldr	r0, [r4, #0]
 801ed3a:	b938      	cbnz	r0, 801ed4c <__pow5mult+0x9c>
 801ed3c:	4622      	mov	r2, r4
 801ed3e:	4621      	mov	r1, r4
 801ed40:	4638      	mov	r0, r7
 801ed42:	f7ff ff0b 	bl	801eb5c <__multiply>
 801ed46:	6020      	str	r0, [r4, #0]
 801ed48:	f8c0 9000 	str.w	r9, [r0]
 801ed4c:	4604      	mov	r4, r0
 801ed4e:	e7e4      	b.n	801ed1a <__pow5mult+0x6a>
 801ed50:	4630      	mov	r0, r6
 801ed52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed56:	bf00      	nop
 801ed58:	08020978 	.word	0x08020978
 801ed5c:	0802089d 	.word	0x0802089d
 801ed60:	0802091d 	.word	0x0802091d

0801ed64 <__lshift>:
 801ed64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed68:	460c      	mov	r4, r1
 801ed6a:	6849      	ldr	r1, [r1, #4]
 801ed6c:	6923      	ldr	r3, [r4, #16]
 801ed6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ed72:	68a3      	ldr	r3, [r4, #8]
 801ed74:	4607      	mov	r7, r0
 801ed76:	4691      	mov	r9, r2
 801ed78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ed7c:	f108 0601 	add.w	r6, r8, #1
 801ed80:	42b3      	cmp	r3, r6
 801ed82:	db0b      	blt.n	801ed9c <__lshift+0x38>
 801ed84:	4638      	mov	r0, r7
 801ed86:	f7ff fddf 	bl	801e948 <_Balloc>
 801ed8a:	4605      	mov	r5, r0
 801ed8c:	b948      	cbnz	r0, 801eda2 <__lshift+0x3e>
 801ed8e:	4602      	mov	r2, r0
 801ed90:	4b28      	ldr	r3, [pc, #160]	@ (801ee34 <__lshift+0xd0>)
 801ed92:	4829      	ldr	r0, [pc, #164]	@ (801ee38 <__lshift+0xd4>)
 801ed94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ed98:	f000 fbe0 	bl	801f55c <__assert_func>
 801ed9c:	3101      	adds	r1, #1
 801ed9e:	005b      	lsls	r3, r3, #1
 801eda0:	e7ee      	b.n	801ed80 <__lshift+0x1c>
 801eda2:	2300      	movs	r3, #0
 801eda4:	f100 0114 	add.w	r1, r0, #20
 801eda8:	f100 0210 	add.w	r2, r0, #16
 801edac:	4618      	mov	r0, r3
 801edae:	4553      	cmp	r3, sl
 801edb0:	db33      	blt.n	801ee1a <__lshift+0xb6>
 801edb2:	6920      	ldr	r0, [r4, #16]
 801edb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801edb8:	f104 0314 	add.w	r3, r4, #20
 801edbc:	f019 091f 	ands.w	r9, r9, #31
 801edc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801edc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801edc8:	d02b      	beq.n	801ee22 <__lshift+0xbe>
 801edca:	f1c9 0e20 	rsb	lr, r9, #32
 801edce:	468a      	mov	sl, r1
 801edd0:	2200      	movs	r2, #0
 801edd2:	6818      	ldr	r0, [r3, #0]
 801edd4:	fa00 f009 	lsl.w	r0, r0, r9
 801edd8:	4310      	orrs	r0, r2
 801edda:	f84a 0b04 	str.w	r0, [sl], #4
 801edde:	f853 2b04 	ldr.w	r2, [r3], #4
 801ede2:	459c      	cmp	ip, r3
 801ede4:	fa22 f20e 	lsr.w	r2, r2, lr
 801ede8:	d8f3      	bhi.n	801edd2 <__lshift+0x6e>
 801edea:	ebac 0304 	sub.w	r3, ip, r4
 801edee:	3b15      	subs	r3, #21
 801edf0:	f023 0303 	bic.w	r3, r3, #3
 801edf4:	3304      	adds	r3, #4
 801edf6:	f104 0015 	add.w	r0, r4, #21
 801edfa:	4584      	cmp	ip, r0
 801edfc:	bf38      	it	cc
 801edfe:	2304      	movcc	r3, #4
 801ee00:	50ca      	str	r2, [r1, r3]
 801ee02:	b10a      	cbz	r2, 801ee08 <__lshift+0xa4>
 801ee04:	f108 0602 	add.w	r6, r8, #2
 801ee08:	3e01      	subs	r6, #1
 801ee0a:	4638      	mov	r0, r7
 801ee0c:	612e      	str	r6, [r5, #16]
 801ee0e:	4621      	mov	r1, r4
 801ee10:	f7ff fdda 	bl	801e9c8 <_Bfree>
 801ee14:	4628      	mov	r0, r5
 801ee16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ee1e:	3301      	adds	r3, #1
 801ee20:	e7c5      	b.n	801edae <__lshift+0x4a>
 801ee22:	3904      	subs	r1, #4
 801ee24:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee28:	f841 2f04 	str.w	r2, [r1, #4]!
 801ee2c:	459c      	cmp	ip, r3
 801ee2e:	d8f9      	bhi.n	801ee24 <__lshift+0xc0>
 801ee30:	e7ea      	b.n	801ee08 <__lshift+0xa4>
 801ee32:	bf00      	nop
 801ee34:	0802090c 	.word	0x0802090c
 801ee38:	0802091d 	.word	0x0802091d

0801ee3c <__mcmp>:
 801ee3c:	690a      	ldr	r2, [r1, #16]
 801ee3e:	4603      	mov	r3, r0
 801ee40:	6900      	ldr	r0, [r0, #16]
 801ee42:	1a80      	subs	r0, r0, r2
 801ee44:	b530      	push	{r4, r5, lr}
 801ee46:	d10e      	bne.n	801ee66 <__mcmp+0x2a>
 801ee48:	3314      	adds	r3, #20
 801ee4a:	3114      	adds	r1, #20
 801ee4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ee50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ee54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ee58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ee5c:	4295      	cmp	r5, r2
 801ee5e:	d003      	beq.n	801ee68 <__mcmp+0x2c>
 801ee60:	d205      	bcs.n	801ee6e <__mcmp+0x32>
 801ee62:	f04f 30ff 	mov.w	r0, #4294967295
 801ee66:	bd30      	pop	{r4, r5, pc}
 801ee68:	42a3      	cmp	r3, r4
 801ee6a:	d3f3      	bcc.n	801ee54 <__mcmp+0x18>
 801ee6c:	e7fb      	b.n	801ee66 <__mcmp+0x2a>
 801ee6e:	2001      	movs	r0, #1
 801ee70:	e7f9      	b.n	801ee66 <__mcmp+0x2a>
	...

0801ee74 <__mdiff>:
 801ee74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee78:	4689      	mov	r9, r1
 801ee7a:	4606      	mov	r6, r0
 801ee7c:	4611      	mov	r1, r2
 801ee7e:	4648      	mov	r0, r9
 801ee80:	4614      	mov	r4, r2
 801ee82:	f7ff ffdb 	bl	801ee3c <__mcmp>
 801ee86:	1e05      	subs	r5, r0, #0
 801ee88:	d112      	bne.n	801eeb0 <__mdiff+0x3c>
 801ee8a:	4629      	mov	r1, r5
 801ee8c:	4630      	mov	r0, r6
 801ee8e:	f7ff fd5b 	bl	801e948 <_Balloc>
 801ee92:	4602      	mov	r2, r0
 801ee94:	b928      	cbnz	r0, 801eea2 <__mdiff+0x2e>
 801ee96:	4b3e      	ldr	r3, [pc, #248]	@ (801ef90 <__mdiff+0x11c>)
 801ee98:	f240 2137 	movw	r1, #567	@ 0x237
 801ee9c:	483d      	ldr	r0, [pc, #244]	@ (801ef94 <__mdiff+0x120>)
 801ee9e:	f000 fb5d 	bl	801f55c <__assert_func>
 801eea2:	2301      	movs	r3, #1
 801eea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eea8:	4610      	mov	r0, r2
 801eeaa:	b003      	add	sp, #12
 801eeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeb0:	bfbc      	itt	lt
 801eeb2:	464b      	movlt	r3, r9
 801eeb4:	46a1      	movlt	r9, r4
 801eeb6:	4630      	mov	r0, r6
 801eeb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801eebc:	bfba      	itte	lt
 801eebe:	461c      	movlt	r4, r3
 801eec0:	2501      	movlt	r5, #1
 801eec2:	2500      	movge	r5, #0
 801eec4:	f7ff fd40 	bl	801e948 <_Balloc>
 801eec8:	4602      	mov	r2, r0
 801eeca:	b918      	cbnz	r0, 801eed4 <__mdiff+0x60>
 801eecc:	4b30      	ldr	r3, [pc, #192]	@ (801ef90 <__mdiff+0x11c>)
 801eece:	f240 2145 	movw	r1, #581	@ 0x245
 801eed2:	e7e3      	b.n	801ee9c <__mdiff+0x28>
 801eed4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801eed8:	6926      	ldr	r6, [r4, #16]
 801eeda:	60c5      	str	r5, [r0, #12]
 801eedc:	f109 0310 	add.w	r3, r9, #16
 801eee0:	f109 0514 	add.w	r5, r9, #20
 801eee4:	f104 0e14 	add.w	lr, r4, #20
 801eee8:	f100 0b14 	add.w	fp, r0, #20
 801eeec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801eef0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801eef4:	9301      	str	r3, [sp, #4]
 801eef6:	46d9      	mov	r9, fp
 801eef8:	f04f 0c00 	mov.w	ip, #0
 801eefc:	9b01      	ldr	r3, [sp, #4]
 801eefe:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ef02:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ef06:	9301      	str	r3, [sp, #4]
 801ef08:	b281      	uxth	r1, r0
 801ef0a:	fa1f f38a 	uxth.w	r3, sl
 801ef0e:	1a5b      	subs	r3, r3, r1
 801ef10:	0c00      	lsrs	r0, r0, #16
 801ef12:	4463      	add	r3, ip
 801ef14:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ef18:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ef1c:	b29b      	uxth	r3, r3
 801ef1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ef22:	4576      	cmp	r6, lr
 801ef24:	f849 3b04 	str.w	r3, [r9], #4
 801ef28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ef2c:	d8e6      	bhi.n	801eefc <__mdiff+0x88>
 801ef2e:	1b33      	subs	r3, r6, r4
 801ef30:	3b15      	subs	r3, #21
 801ef32:	f023 0303 	bic.w	r3, r3, #3
 801ef36:	3415      	adds	r4, #21
 801ef38:	3304      	adds	r3, #4
 801ef3a:	42a6      	cmp	r6, r4
 801ef3c:	bf38      	it	cc
 801ef3e:	2304      	movcc	r3, #4
 801ef40:	441d      	add	r5, r3
 801ef42:	445b      	add	r3, fp
 801ef44:	461e      	mov	r6, r3
 801ef46:	462c      	mov	r4, r5
 801ef48:	4544      	cmp	r4, r8
 801ef4a:	d30e      	bcc.n	801ef6a <__mdiff+0xf6>
 801ef4c:	f108 0103 	add.w	r1, r8, #3
 801ef50:	1b49      	subs	r1, r1, r5
 801ef52:	f021 0103 	bic.w	r1, r1, #3
 801ef56:	3d03      	subs	r5, #3
 801ef58:	45a8      	cmp	r8, r5
 801ef5a:	bf38      	it	cc
 801ef5c:	2100      	movcc	r1, #0
 801ef5e:	440b      	add	r3, r1
 801ef60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ef64:	b191      	cbz	r1, 801ef8c <__mdiff+0x118>
 801ef66:	6117      	str	r7, [r2, #16]
 801ef68:	e79e      	b.n	801eea8 <__mdiff+0x34>
 801ef6a:	f854 1b04 	ldr.w	r1, [r4], #4
 801ef6e:	46e6      	mov	lr, ip
 801ef70:	0c08      	lsrs	r0, r1, #16
 801ef72:	fa1c fc81 	uxtah	ip, ip, r1
 801ef76:	4471      	add	r1, lr
 801ef78:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ef7c:	b289      	uxth	r1, r1
 801ef7e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ef82:	f846 1b04 	str.w	r1, [r6], #4
 801ef86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ef8a:	e7dd      	b.n	801ef48 <__mdiff+0xd4>
 801ef8c:	3f01      	subs	r7, #1
 801ef8e:	e7e7      	b.n	801ef60 <__mdiff+0xec>
 801ef90:	0802090c 	.word	0x0802090c
 801ef94:	0802091d 	.word	0x0802091d

0801ef98 <__d2b>:
 801ef98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801ef9c:	2101      	movs	r1, #1
 801ef9e:	9e08      	ldr	r6, [sp, #32]
 801efa0:	4690      	mov	r8, r2
 801efa2:	4699      	mov	r9, r3
 801efa4:	f7ff fcd0 	bl	801e948 <_Balloc>
 801efa8:	4604      	mov	r4, r0
 801efaa:	b930      	cbnz	r0, 801efba <__d2b+0x22>
 801efac:	4602      	mov	r2, r0
 801efae:	4b24      	ldr	r3, [pc, #144]	@ (801f040 <__d2b+0xa8>)
 801efb0:	4824      	ldr	r0, [pc, #144]	@ (801f044 <__d2b+0xac>)
 801efb2:	f240 310f 	movw	r1, #783	@ 0x30f
 801efb6:	f000 fad1 	bl	801f55c <__assert_func>
 801efba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801efbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801efc2:	b10d      	cbz	r5, 801efc8 <__d2b+0x30>
 801efc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801efc8:	9301      	str	r3, [sp, #4]
 801efca:	f1b8 0300 	subs.w	r3, r8, #0
 801efce:	d024      	beq.n	801f01a <__d2b+0x82>
 801efd0:	4668      	mov	r0, sp
 801efd2:	9300      	str	r3, [sp, #0]
 801efd4:	f7ff fd7f 	bl	801ead6 <__lo0bits>
 801efd8:	e9dd 1200 	ldrd	r1, r2, [sp]
 801efdc:	b1d8      	cbz	r0, 801f016 <__d2b+0x7e>
 801efde:	f1c0 0320 	rsb	r3, r0, #32
 801efe2:	fa02 f303 	lsl.w	r3, r2, r3
 801efe6:	430b      	orrs	r3, r1
 801efe8:	40c2      	lsrs	r2, r0
 801efea:	6163      	str	r3, [r4, #20]
 801efec:	9201      	str	r2, [sp, #4]
 801efee:	9b01      	ldr	r3, [sp, #4]
 801eff0:	61a3      	str	r3, [r4, #24]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	bf0c      	ite	eq
 801eff6:	2201      	moveq	r2, #1
 801eff8:	2202      	movne	r2, #2
 801effa:	6122      	str	r2, [r4, #16]
 801effc:	b1ad      	cbz	r5, 801f02a <__d2b+0x92>
 801effe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f002:	4405      	add	r5, r0
 801f004:	6035      	str	r5, [r6, #0]
 801f006:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f00c:	6018      	str	r0, [r3, #0]
 801f00e:	4620      	mov	r0, r4
 801f010:	b002      	add	sp, #8
 801f012:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801f016:	6161      	str	r1, [r4, #20]
 801f018:	e7e9      	b.n	801efee <__d2b+0x56>
 801f01a:	a801      	add	r0, sp, #4
 801f01c:	f7ff fd5b 	bl	801ead6 <__lo0bits>
 801f020:	9b01      	ldr	r3, [sp, #4]
 801f022:	6163      	str	r3, [r4, #20]
 801f024:	3020      	adds	r0, #32
 801f026:	2201      	movs	r2, #1
 801f028:	e7e7      	b.n	801effa <__d2b+0x62>
 801f02a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f02e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f032:	6030      	str	r0, [r6, #0]
 801f034:	6918      	ldr	r0, [r3, #16]
 801f036:	f7ff fd2f 	bl	801ea98 <__hi0bits>
 801f03a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f03e:	e7e4      	b.n	801f00a <__d2b+0x72>
 801f040:	0802090c 	.word	0x0802090c
 801f044:	0802091d 	.word	0x0802091d

0801f048 <__sfputc_r>:
 801f048:	6893      	ldr	r3, [r2, #8]
 801f04a:	3b01      	subs	r3, #1
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	b410      	push	{r4}
 801f050:	6093      	str	r3, [r2, #8]
 801f052:	da07      	bge.n	801f064 <__sfputc_r+0x1c>
 801f054:	6994      	ldr	r4, [r2, #24]
 801f056:	42a3      	cmp	r3, r4
 801f058:	db01      	blt.n	801f05e <__sfputc_r+0x16>
 801f05a:	290a      	cmp	r1, #10
 801f05c:	d102      	bne.n	801f064 <__sfputc_r+0x1c>
 801f05e:	bc10      	pop	{r4}
 801f060:	f7fe bc0d 	b.w	801d87e <__swbuf_r>
 801f064:	6813      	ldr	r3, [r2, #0]
 801f066:	1c58      	adds	r0, r3, #1
 801f068:	6010      	str	r0, [r2, #0]
 801f06a:	7019      	strb	r1, [r3, #0]
 801f06c:	4608      	mov	r0, r1
 801f06e:	bc10      	pop	{r4}
 801f070:	4770      	bx	lr

0801f072 <__sfputs_r>:
 801f072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f074:	4606      	mov	r6, r0
 801f076:	460f      	mov	r7, r1
 801f078:	4614      	mov	r4, r2
 801f07a:	18d5      	adds	r5, r2, r3
 801f07c:	42ac      	cmp	r4, r5
 801f07e:	d101      	bne.n	801f084 <__sfputs_r+0x12>
 801f080:	2000      	movs	r0, #0
 801f082:	e007      	b.n	801f094 <__sfputs_r+0x22>
 801f084:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f088:	463a      	mov	r2, r7
 801f08a:	4630      	mov	r0, r6
 801f08c:	f7ff ffdc 	bl	801f048 <__sfputc_r>
 801f090:	1c43      	adds	r3, r0, #1
 801f092:	d1f3      	bne.n	801f07c <__sfputs_r+0xa>
 801f094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f098 <_vfiprintf_r>:
 801f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f09c:	460d      	mov	r5, r1
 801f09e:	b09d      	sub	sp, #116	@ 0x74
 801f0a0:	4614      	mov	r4, r2
 801f0a2:	4698      	mov	r8, r3
 801f0a4:	4606      	mov	r6, r0
 801f0a6:	b118      	cbz	r0, 801f0b0 <_vfiprintf_r+0x18>
 801f0a8:	6a03      	ldr	r3, [r0, #32]
 801f0aa:	b90b      	cbnz	r3, 801f0b0 <_vfiprintf_r+0x18>
 801f0ac:	f7fe fafe 	bl	801d6ac <__sinit>
 801f0b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f0b2:	07d9      	lsls	r1, r3, #31
 801f0b4:	d405      	bmi.n	801f0c2 <_vfiprintf_r+0x2a>
 801f0b6:	89ab      	ldrh	r3, [r5, #12]
 801f0b8:	059a      	lsls	r2, r3, #22
 801f0ba:	d402      	bmi.n	801f0c2 <_vfiprintf_r+0x2a>
 801f0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f0be:	f7fe fcf0 	bl	801daa2 <__retarget_lock_acquire_recursive>
 801f0c2:	89ab      	ldrh	r3, [r5, #12]
 801f0c4:	071b      	lsls	r3, r3, #28
 801f0c6:	d501      	bpl.n	801f0cc <_vfiprintf_r+0x34>
 801f0c8:	692b      	ldr	r3, [r5, #16]
 801f0ca:	b99b      	cbnz	r3, 801f0f4 <_vfiprintf_r+0x5c>
 801f0cc:	4629      	mov	r1, r5
 801f0ce:	4630      	mov	r0, r6
 801f0d0:	f7fe fc14 	bl	801d8fc <__swsetup_r>
 801f0d4:	b170      	cbz	r0, 801f0f4 <_vfiprintf_r+0x5c>
 801f0d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f0d8:	07dc      	lsls	r4, r3, #31
 801f0da:	d504      	bpl.n	801f0e6 <_vfiprintf_r+0x4e>
 801f0dc:	f04f 30ff 	mov.w	r0, #4294967295
 801f0e0:	b01d      	add	sp, #116	@ 0x74
 801f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0e6:	89ab      	ldrh	r3, [r5, #12]
 801f0e8:	0598      	lsls	r0, r3, #22
 801f0ea:	d4f7      	bmi.n	801f0dc <_vfiprintf_r+0x44>
 801f0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f0ee:	f7fe fcd9 	bl	801daa4 <__retarget_lock_release_recursive>
 801f0f2:	e7f3      	b.n	801f0dc <_vfiprintf_r+0x44>
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f0f8:	2320      	movs	r3, #32
 801f0fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801f102:	2330      	movs	r3, #48	@ 0x30
 801f104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f2b4 <_vfiprintf_r+0x21c>
 801f108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f10c:	f04f 0901 	mov.w	r9, #1
 801f110:	4623      	mov	r3, r4
 801f112:	469a      	mov	sl, r3
 801f114:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f118:	b10a      	cbz	r2, 801f11e <_vfiprintf_r+0x86>
 801f11a:	2a25      	cmp	r2, #37	@ 0x25
 801f11c:	d1f9      	bne.n	801f112 <_vfiprintf_r+0x7a>
 801f11e:	ebba 0b04 	subs.w	fp, sl, r4
 801f122:	d00b      	beq.n	801f13c <_vfiprintf_r+0xa4>
 801f124:	465b      	mov	r3, fp
 801f126:	4622      	mov	r2, r4
 801f128:	4629      	mov	r1, r5
 801f12a:	4630      	mov	r0, r6
 801f12c:	f7ff ffa1 	bl	801f072 <__sfputs_r>
 801f130:	3001      	adds	r0, #1
 801f132:	f000 80a7 	beq.w	801f284 <_vfiprintf_r+0x1ec>
 801f136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f138:	445a      	add	r2, fp
 801f13a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f13c:	f89a 3000 	ldrb.w	r3, [sl]
 801f140:	2b00      	cmp	r3, #0
 801f142:	f000 809f 	beq.w	801f284 <_vfiprintf_r+0x1ec>
 801f146:	2300      	movs	r3, #0
 801f148:	f04f 32ff 	mov.w	r2, #4294967295
 801f14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f150:	f10a 0a01 	add.w	sl, sl, #1
 801f154:	9304      	str	r3, [sp, #16]
 801f156:	9307      	str	r3, [sp, #28]
 801f158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f15c:	931a      	str	r3, [sp, #104]	@ 0x68
 801f15e:	4654      	mov	r4, sl
 801f160:	2205      	movs	r2, #5
 801f162:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f166:	4853      	ldr	r0, [pc, #332]	@ (801f2b4 <_vfiprintf_r+0x21c>)
 801f168:	f7e1 f80a 	bl	8000180 <memchr>
 801f16c:	9a04      	ldr	r2, [sp, #16]
 801f16e:	b9d8      	cbnz	r0, 801f1a8 <_vfiprintf_r+0x110>
 801f170:	06d1      	lsls	r1, r2, #27
 801f172:	bf44      	itt	mi
 801f174:	2320      	movmi	r3, #32
 801f176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f17a:	0713      	lsls	r3, r2, #28
 801f17c:	bf44      	itt	mi
 801f17e:	232b      	movmi	r3, #43	@ 0x2b
 801f180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f184:	f89a 3000 	ldrb.w	r3, [sl]
 801f188:	2b2a      	cmp	r3, #42	@ 0x2a
 801f18a:	d015      	beq.n	801f1b8 <_vfiprintf_r+0x120>
 801f18c:	9a07      	ldr	r2, [sp, #28]
 801f18e:	4654      	mov	r4, sl
 801f190:	2000      	movs	r0, #0
 801f192:	f04f 0c0a 	mov.w	ip, #10
 801f196:	4621      	mov	r1, r4
 801f198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f19c:	3b30      	subs	r3, #48	@ 0x30
 801f19e:	2b09      	cmp	r3, #9
 801f1a0:	d94b      	bls.n	801f23a <_vfiprintf_r+0x1a2>
 801f1a2:	b1b0      	cbz	r0, 801f1d2 <_vfiprintf_r+0x13a>
 801f1a4:	9207      	str	r2, [sp, #28]
 801f1a6:	e014      	b.n	801f1d2 <_vfiprintf_r+0x13a>
 801f1a8:	eba0 0308 	sub.w	r3, r0, r8
 801f1ac:	fa09 f303 	lsl.w	r3, r9, r3
 801f1b0:	4313      	orrs	r3, r2
 801f1b2:	9304      	str	r3, [sp, #16]
 801f1b4:	46a2      	mov	sl, r4
 801f1b6:	e7d2      	b.n	801f15e <_vfiprintf_r+0xc6>
 801f1b8:	9b03      	ldr	r3, [sp, #12]
 801f1ba:	1d19      	adds	r1, r3, #4
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	9103      	str	r1, [sp, #12]
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	bfbb      	ittet	lt
 801f1c4:	425b      	neglt	r3, r3
 801f1c6:	f042 0202 	orrlt.w	r2, r2, #2
 801f1ca:	9307      	strge	r3, [sp, #28]
 801f1cc:	9307      	strlt	r3, [sp, #28]
 801f1ce:	bfb8      	it	lt
 801f1d0:	9204      	strlt	r2, [sp, #16]
 801f1d2:	7823      	ldrb	r3, [r4, #0]
 801f1d4:	2b2e      	cmp	r3, #46	@ 0x2e
 801f1d6:	d10a      	bne.n	801f1ee <_vfiprintf_r+0x156>
 801f1d8:	7863      	ldrb	r3, [r4, #1]
 801f1da:	2b2a      	cmp	r3, #42	@ 0x2a
 801f1dc:	d132      	bne.n	801f244 <_vfiprintf_r+0x1ac>
 801f1de:	9b03      	ldr	r3, [sp, #12]
 801f1e0:	1d1a      	adds	r2, r3, #4
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	9203      	str	r2, [sp, #12]
 801f1e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f1ea:	3402      	adds	r4, #2
 801f1ec:	9305      	str	r3, [sp, #20]
 801f1ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801f2b8 <_vfiprintf_r+0x220>
 801f1f2:	7821      	ldrb	r1, [r4, #0]
 801f1f4:	2203      	movs	r2, #3
 801f1f6:	4650      	mov	r0, sl
 801f1f8:	f7e0 ffc2 	bl	8000180 <memchr>
 801f1fc:	b138      	cbz	r0, 801f20e <_vfiprintf_r+0x176>
 801f1fe:	9b04      	ldr	r3, [sp, #16]
 801f200:	eba0 000a 	sub.w	r0, r0, sl
 801f204:	2240      	movs	r2, #64	@ 0x40
 801f206:	4082      	lsls	r2, r0
 801f208:	4313      	orrs	r3, r2
 801f20a:	3401      	adds	r4, #1
 801f20c:	9304      	str	r3, [sp, #16]
 801f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f212:	482a      	ldr	r0, [pc, #168]	@ (801f2bc <_vfiprintf_r+0x224>)
 801f214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f218:	2206      	movs	r2, #6
 801f21a:	f7e0 ffb1 	bl	8000180 <memchr>
 801f21e:	2800      	cmp	r0, #0
 801f220:	d03f      	beq.n	801f2a2 <_vfiprintf_r+0x20a>
 801f222:	4b27      	ldr	r3, [pc, #156]	@ (801f2c0 <_vfiprintf_r+0x228>)
 801f224:	bb1b      	cbnz	r3, 801f26e <_vfiprintf_r+0x1d6>
 801f226:	9b03      	ldr	r3, [sp, #12]
 801f228:	3307      	adds	r3, #7
 801f22a:	f023 0307 	bic.w	r3, r3, #7
 801f22e:	3308      	adds	r3, #8
 801f230:	9303      	str	r3, [sp, #12]
 801f232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f234:	443b      	add	r3, r7
 801f236:	9309      	str	r3, [sp, #36]	@ 0x24
 801f238:	e76a      	b.n	801f110 <_vfiprintf_r+0x78>
 801f23a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f23e:	460c      	mov	r4, r1
 801f240:	2001      	movs	r0, #1
 801f242:	e7a8      	b.n	801f196 <_vfiprintf_r+0xfe>
 801f244:	2300      	movs	r3, #0
 801f246:	3401      	adds	r4, #1
 801f248:	9305      	str	r3, [sp, #20]
 801f24a:	4619      	mov	r1, r3
 801f24c:	f04f 0c0a 	mov.w	ip, #10
 801f250:	4620      	mov	r0, r4
 801f252:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f256:	3a30      	subs	r2, #48	@ 0x30
 801f258:	2a09      	cmp	r2, #9
 801f25a:	d903      	bls.n	801f264 <_vfiprintf_r+0x1cc>
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	d0c6      	beq.n	801f1ee <_vfiprintf_r+0x156>
 801f260:	9105      	str	r1, [sp, #20]
 801f262:	e7c4      	b.n	801f1ee <_vfiprintf_r+0x156>
 801f264:	fb0c 2101 	mla	r1, ip, r1, r2
 801f268:	4604      	mov	r4, r0
 801f26a:	2301      	movs	r3, #1
 801f26c:	e7f0      	b.n	801f250 <_vfiprintf_r+0x1b8>
 801f26e:	ab03      	add	r3, sp, #12
 801f270:	9300      	str	r3, [sp, #0]
 801f272:	462a      	mov	r2, r5
 801f274:	4b13      	ldr	r3, [pc, #76]	@ (801f2c4 <_vfiprintf_r+0x22c>)
 801f276:	a904      	add	r1, sp, #16
 801f278:	4630      	mov	r0, r6
 801f27a:	f7fd fdd1 	bl	801ce20 <_printf_float>
 801f27e:	4607      	mov	r7, r0
 801f280:	1c78      	adds	r0, r7, #1
 801f282:	d1d6      	bne.n	801f232 <_vfiprintf_r+0x19a>
 801f284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f286:	07d9      	lsls	r1, r3, #31
 801f288:	d405      	bmi.n	801f296 <_vfiprintf_r+0x1fe>
 801f28a:	89ab      	ldrh	r3, [r5, #12]
 801f28c:	059a      	lsls	r2, r3, #22
 801f28e:	d402      	bmi.n	801f296 <_vfiprintf_r+0x1fe>
 801f290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f292:	f7fe fc07 	bl	801daa4 <__retarget_lock_release_recursive>
 801f296:	89ab      	ldrh	r3, [r5, #12]
 801f298:	065b      	lsls	r3, r3, #25
 801f29a:	f53f af1f 	bmi.w	801f0dc <_vfiprintf_r+0x44>
 801f29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2a0:	e71e      	b.n	801f0e0 <_vfiprintf_r+0x48>
 801f2a2:	ab03      	add	r3, sp, #12
 801f2a4:	9300      	str	r3, [sp, #0]
 801f2a6:	462a      	mov	r2, r5
 801f2a8:	4b06      	ldr	r3, [pc, #24]	@ (801f2c4 <_vfiprintf_r+0x22c>)
 801f2aa:	a904      	add	r1, sp, #16
 801f2ac:	4630      	mov	r0, r6
 801f2ae:	f7fe f851 	bl	801d354 <_printf_i>
 801f2b2:	e7e4      	b.n	801f27e <_vfiprintf_r+0x1e6>
 801f2b4:	08020a78 	.word	0x08020a78
 801f2b8:	08020a7e 	.word	0x08020a7e
 801f2bc:	08020a82 	.word	0x08020a82
 801f2c0:	0801ce21 	.word	0x0801ce21
 801f2c4:	0801f073 	.word	0x0801f073

0801f2c8 <__sflush_r>:
 801f2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ce:	0716      	lsls	r6, r2, #28
 801f2d0:	4605      	mov	r5, r0
 801f2d2:	460c      	mov	r4, r1
 801f2d4:	d454      	bmi.n	801f380 <__sflush_r+0xb8>
 801f2d6:	684b      	ldr	r3, [r1, #4]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	dc02      	bgt.n	801f2e2 <__sflush_r+0x1a>
 801f2dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	dd48      	ble.n	801f374 <__sflush_r+0xac>
 801f2e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f2e4:	2e00      	cmp	r6, #0
 801f2e6:	d045      	beq.n	801f374 <__sflush_r+0xac>
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f2ee:	682f      	ldr	r7, [r5, #0]
 801f2f0:	6a21      	ldr	r1, [r4, #32]
 801f2f2:	602b      	str	r3, [r5, #0]
 801f2f4:	d030      	beq.n	801f358 <__sflush_r+0x90>
 801f2f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f2f8:	89a3      	ldrh	r3, [r4, #12]
 801f2fa:	0759      	lsls	r1, r3, #29
 801f2fc:	d505      	bpl.n	801f30a <__sflush_r+0x42>
 801f2fe:	6863      	ldr	r3, [r4, #4]
 801f300:	1ad2      	subs	r2, r2, r3
 801f302:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f304:	b10b      	cbz	r3, 801f30a <__sflush_r+0x42>
 801f306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f308:	1ad2      	subs	r2, r2, r3
 801f30a:	2300      	movs	r3, #0
 801f30c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f30e:	6a21      	ldr	r1, [r4, #32]
 801f310:	4628      	mov	r0, r5
 801f312:	47b0      	blx	r6
 801f314:	1c43      	adds	r3, r0, #1
 801f316:	89a3      	ldrh	r3, [r4, #12]
 801f318:	d106      	bne.n	801f328 <__sflush_r+0x60>
 801f31a:	6829      	ldr	r1, [r5, #0]
 801f31c:	291d      	cmp	r1, #29
 801f31e:	d82b      	bhi.n	801f378 <__sflush_r+0xb0>
 801f320:	4a28      	ldr	r2, [pc, #160]	@ (801f3c4 <__sflush_r+0xfc>)
 801f322:	410a      	asrs	r2, r1
 801f324:	07d6      	lsls	r6, r2, #31
 801f326:	d427      	bmi.n	801f378 <__sflush_r+0xb0>
 801f328:	2200      	movs	r2, #0
 801f32a:	6062      	str	r2, [r4, #4]
 801f32c:	04d9      	lsls	r1, r3, #19
 801f32e:	6922      	ldr	r2, [r4, #16]
 801f330:	6022      	str	r2, [r4, #0]
 801f332:	d504      	bpl.n	801f33e <__sflush_r+0x76>
 801f334:	1c42      	adds	r2, r0, #1
 801f336:	d101      	bne.n	801f33c <__sflush_r+0x74>
 801f338:	682b      	ldr	r3, [r5, #0]
 801f33a:	b903      	cbnz	r3, 801f33e <__sflush_r+0x76>
 801f33c:	6560      	str	r0, [r4, #84]	@ 0x54
 801f33e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f340:	602f      	str	r7, [r5, #0]
 801f342:	b1b9      	cbz	r1, 801f374 <__sflush_r+0xac>
 801f344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f348:	4299      	cmp	r1, r3
 801f34a:	d002      	beq.n	801f352 <__sflush_r+0x8a>
 801f34c:	4628      	mov	r0, r5
 801f34e:	f7ff f9fb 	bl	801e748 <_free_r>
 801f352:	2300      	movs	r3, #0
 801f354:	6363      	str	r3, [r4, #52]	@ 0x34
 801f356:	e00d      	b.n	801f374 <__sflush_r+0xac>
 801f358:	2301      	movs	r3, #1
 801f35a:	4628      	mov	r0, r5
 801f35c:	47b0      	blx	r6
 801f35e:	4602      	mov	r2, r0
 801f360:	1c50      	adds	r0, r2, #1
 801f362:	d1c9      	bne.n	801f2f8 <__sflush_r+0x30>
 801f364:	682b      	ldr	r3, [r5, #0]
 801f366:	2b00      	cmp	r3, #0
 801f368:	d0c6      	beq.n	801f2f8 <__sflush_r+0x30>
 801f36a:	2b1d      	cmp	r3, #29
 801f36c:	d001      	beq.n	801f372 <__sflush_r+0xaa>
 801f36e:	2b16      	cmp	r3, #22
 801f370:	d11d      	bne.n	801f3ae <__sflush_r+0xe6>
 801f372:	602f      	str	r7, [r5, #0]
 801f374:	2000      	movs	r0, #0
 801f376:	e021      	b.n	801f3bc <__sflush_r+0xf4>
 801f378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f37c:	b21b      	sxth	r3, r3
 801f37e:	e01a      	b.n	801f3b6 <__sflush_r+0xee>
 801f380:	690f      	ldr	r7, [r1, #16]
 801f382:	2f00      	cmp	r7, #0
 801f384:	d0f6      	beq.n	801f374 <__sflush_r+0xac>
 801f386:	0793      	lsls	r3, r2, #30
 801f388:	680e      	ldr	r6, [r1, #0]
 801f38a:	bf08      	it	eq
 801f38c:	694b      	ldreq	r3, [r1, #20]
 801f38e:	600f      	str	r7, [r1, #0]
 801f390:	bf18      	it	ne
 801f392:	2300      	movne	r3, #0
 801f394:	1bf6      	subs	r6, r6, r7
 801f396:	608b      	str	r3, [r1, #8]
 801f398:	2e00      	cmp	r6, #0
 801f39a:	ddeb      	ble.n	801f374 <__sflush_r+0xac>
 801f39c:	6a21      	ldr	r1, [r4, #32]
 801f39e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801f3a2:	4633      	mov	r3, r6
 801f3a4:	463a      	mov	r2, r7
 801f3a6:	4628      	mov	r0, r5
 801f3a8:	47e0      	blx	ip
 801f3aa:	2800      	cmp	r0, #0
 801f3ac:	dc07      	bgt.n	801f3be <__sflush_r+0xf6>
 801f3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3b6:	81a3      	strh	r3, [r4, #12]
 801f3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801f3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3be:	4407      	add	r7, r0
 801f3c0:	1a36      	subs	r6, r6, r0
 801f3c2:	e7e9      	b.n	801f398 <__sflush_r+0xd0>
 801f3c4:	dfbffffe 	.word	0xdfbffffe

0801f3c8 <_fflush_r>:
 801f3c8:	b538      	push	{r3, r4, r5, lr}
 801f3ca:	690b      	ldr	r3, [r1, #16]
 801f3cc:	4605      	mov	r5, r0
 801f3ce:	460c      	mov	r4, r1
 801f3d0:	b913      	cbnz	r3, 801f3d8 <_fflush_r+0x10>
 801f3d2:	2500      	movs	r5, #0
 801f3d4:	4628      	mov	r0, r5
 801f3d6:	bd38      	pop	{r3, r4, r5, pc}
 801f3d8:	b118      	cbz	r0, 801f3e2 <_fflush_r+0x1a>
 801f3da:	6a03      	ldr	r3, [r0, #32]
 801f3dc:	b90b      	cbnz	r3, 801f3e2 <_fflush_r+0x1a>
 801f3de:	f7fe f965 	bl	801d6ac <__sinit>
 801f3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d0f3      	beq.n	801f3d2 <_fflush_r+0xa>
 801f3ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f3ec:	07d0      	lsls	r0, r2, #31
 801f3ee:	d404      	bmi.n	801f3fa <_fflush_r+0x32>
 801f3f0:	0599      	lsls	r1, r3, #22
 801f3f2:	d402      	bmi.n	801f3fa <_fflush_r+0x32>
 801f3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f3f6:	f7fe fb54 	bl	801daa2 <__retarget_lock_acquire_recursive>
 801f3fa:	4628      	mov	r0, r5
 801f3fc:	4621      	mov	r1, r4
 801f3fe:	f7ff ff63 	bl	801f2c8 <__sflush_r>
 801f402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f404:	07da      	lsls	r2, r3, #31
 801f406:	4605      	mov	r5, r0
 801f408:	d4e4      	bmi.n	801f3d4 <_fflush_r+0xc>
 801f40a:	89a3      	ldrh	r3, [r4, #12]
 801f40c:	059b      	lsls	r3, r3, #22
 801f40e:	d4e1      	bmi.n	801f3d4 <_fflush_r+0xc>
 801f410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f412:	f7fe fb47 	bl	801daa4 <__retarget_lock_release_recursive>
 801f416:	e7dd      	b.n	801f3d4 <_fflush_r+0xc>

0801f418 <__swhatbuf_r>:
 801f418:	b570      	push	{r4, r5, r6, lr}
 801f41a:	460c      	mov	r4, r1
 801f41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f420:	2900      	cmp	r1, #0
 801f422:	b096      	sub	sp, #88	@ 0x58
 801f424:	4615      	mov	r5, r2
 801f426:	461e      	mov	r6, r3
 801f428:	da0d      	bge.n	801f446 <__swhatbuf_r+0x2e>
 801f42a:	89a3      	ldrh	r3, [r4, #12]
 801f42c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f430:	f04f 0100 	mov.w	r1, #0
 801f434:	bf14      	ite	ne
 801f436:	2340      	movne	r3, #64	@ 0x40
 801f438:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f43c:	2000      	movs	r0, #0
 801f43e:	6031      	str	r1, [r6, #0]
 801f440:	602b      	str	r3, [r5, #0]
 801f442:	b016      	add	sp, #88	@ 0x58
 801f444:	bd70      	pop	{r4, r5, r6, pc}
 801f446:	466a      	mov	r2, sp
 801f448:	f000 f848 	bl	801f4dc <_fstat_r>
 801f44c:	2800      	cmp	r0, #0
 801f44e:	dbec      	blt.n	801f42a <__swhatbuf_r+0x12>
 801f450:	9901      	ldr	r1, [sp, #4]
 801f452:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f456:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f45a:	4259      	negs	r1, r3
 801f45c:	4159      	adcs	r1, r3
 801f45e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f462:	e7eb      	b.n	801f43c <__swhatbuf_r+0x24>

0801f464 <__smakebuf_r>:
 801f464:	898b      	ldrh	r3, [r1, #12]
 801f466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f468:	079d      	lsls	r5, r3, #30
 801f46a:	4606      	mov	r6, r0
 801f46c:	460c      	mov	r4, r1
 801f46e:	d507      	bpl.n	801f480 <__smakebuf_r+0x1c>
 801f470:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f474:	6023      	str	r3, [r4, #0]
 801f476:	6123      	str	r3, [r4, #16]
 801f478:	2301      	movs	r3, #1
 801f47a:	6163      	str	r3, [r4, #20]
 801f47c:	b003      	add	sp, #12
 801f47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f480:	ab01      	add	r3, sp, #4
 801f482:	466a      	mov	r2, sp
 801f484:	f7ff ffc8 	bl	801f418 <__swhatbuf_r>
 801f488:	9f00      	ldr	r7, [sp, #0]
 801f48a:	4605      	mov	r5, r0
 801f48c:	4639      	mov	r1, r7
 801f48e:	4630      	mov	r0, r6
 801f490:	f7ff f9ce 	bl	801e830 <_malloc_r>
 801f494:	b948      	cbnz	r0, 801f4aa <__smakebuf_r+0x46>
 801f496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f49a:	059a      	lsls	r2, r3, #22
 801f49c:	d4ee      	bmi.n	801f47c <__smakebuf_r+0x18>
 801f49e:	f023 0303 	bic.w	r3, r3, #3
 801f4a2:	f043 0302 	orr.w	r3, r3, #2
 801f4a6:	81a3      	strh	r3, [r4, #12]
 801f4a8:	e7e2      	b.n	801f470 <__smakebuf_r+0xc>
 801f4aa:	89a3      	ldrh	r3, [r4, #12]
 801f4ac:	6020      	str	r0, [r4, #0]
 801f4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f4b2:	81a3      	strh	r3, [r4, #12]
 801f4b4:	9b01      	ldr	r3, [sp, #4]
 801f4b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f4ba:	b15b      	cbz	r3, 801f4d4 <__smakebuf_r+0x70>
 801f4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f4c0:	4630      	mov	r0, r6
 801f4c2:	f000 f81d 	bl	801f500 <_isatty_r>
 801f4c6:	b128      	cbz	r0, 801f4d4 <__smakebuf_r+0x70>
 801f4c8:	89a3      	ldrh	r3, [r4, #12]
 801f4ca:	f023 0303 	bic.w	r3, r3, #3
 801f4ce:	f043 0301 	orr.w	r3, r3, #1
 801f4d2:	81a3      	strh	r3, [r4, #12]
 801f4d4:	89a3      	ldrh	r3, [r4, #12]
 801f4d6:	431d      	orrs	r5, r3
 801f4d8:	81a5      	strh	r5, [r4, #12]
 801f4da:	e7cf      	b.n	801f47c <__smakebuf_r+0x18>

0801f4dc <_fstat_r>:
 801f4dc:	b538      	push	{r3, r4, r5, lr}
 801f4de:	4d07      	ldr	r5, [pc, #28]	@ (801f4fc <_fstat_r+0x20>)
 801f4e0:	2300      	movs	r3, #0
 801f4e2:	4604      	mov	r4, r0
 801f4e4:	4608      	mov	r0, r1
 801f4e6:	4611      	mov	r1, r2
 801f4e8:	602b      	str	r3, [r5, #0]
 801f4ea:	f7e3 fb02 	bl	8002af2 <_fstat>
 801f4ee:	1c43      	adds	r3, r0, #1
 801f4f0:	d102      	bne.n	801f4f8 <_fstat_r+0x1c>
 801f4f2:	682b      	ldr	r3, [r5, #0]
 801f4f4:	b103      	cbz	r3, 801f4f8 <_fstat_r+0x1c>
 801f4f6:	6023      	str	r3, [r4, #0]
 801f4f8:	bd38      	pop	{r3, r4, r5, pc}
 801f4fa:	bf00      	nop
 801f4fc:	200024f4 	.word	0x200024f4

0801f500 <_isatty_r>:
 801f500:	b538      	push	{r3, r4, r5, lr}
 801f502:	4d06      	ldr	r5, [pc, #24]	@ (801f51c <_isatty_r+0x1c>)
 801f504:	2300      	movs	r3, #0
 801f506:	4604      	mov	r4, r0
 801f508:	4608      	mov	r0, r1
 801f50a:	602b      	str	r3, [r5, #0]
 801f50c:	f7e3 fb00 	bl	8002b10 <_isatty>
 801f510:	1c43      	adds	r3, r0, #1
 801f512:	d102      	bne.n	801f51a <_isatty_r+0x1a>
 801f514:	682b      	ldr	r3, [r5, #0]
 801f516:	b103      	cbz	r3, 801f51a <_isatty_r+0x1a>
 801f518:	6023      	str	r3, [r4, #0]
 801f51a:	bd38      	pop	{r3, r4, r5, pc}
 801f51c:	200024f4 	.word	0x200024f4

0801f520 <_sbrk_r>:
 801f520:	b538      	push	{r3, r4, r5, lr}
 801f522:	4d06      	ldr	r5, [pc, #24]	@ (801f53c <_sbrk_r+0x1c>)
 801f524:	2300      	movs	r3, #0
 801f526:	4604      	mov	r4, r0
 801f528:	4608      	mov	r0, r1
 801f52a:	602b      	str	r3, [r5, #0]
 801f52c:	f7e3 fb06 	bl	8002b3c <_sbrk>
 801f530:	1c43      	adds	r3, r0, #1
 801f532:	d102      	bne.n	801f53a <_sbrk_r+0x1a>
 801f534:	682b      	ldr	r3, [r5, #0]
 801f536:	b103      	cbz	r3, 801f53a <_sbrk_r+0x1a>
 801f538:	6023      	str	r3, [r4, #0]
 801f53a:	bd38      	pop	{r3, r4, r5, pc}
 801f53c:	200024f4 	.word	0x200024f4

0801f540 <memcpy>:
 801f540:	440a      	add	r2, r1
 801f542:	4291      	cmp	r1, r2
 801f544:	f100 33ff 	add.w	r3, r0, #4294967295
 801f548:	d100      	bne.n	801f54c <memcpy+0xc>
 801f54a:	4770      	bx	lr
 801f54c:	b510      	push	{r4, lr}
 801f54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f552:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f556:	4291      	cmp	r1, r2
 801f558:	d1f9      	bne.n	801f54e <memcpy+0xe>
 801f55a:	bd10      	pop	{r4, pc}

0801f55c <__assert_func>:
 801f55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f55e:	4614      	mov	r4, r2
 801f560:	461a      	mov	r2, r3
 801f562:	4b09      	ldr	r3, [pc, #36]	@ (801f588 <__assert_func+0x2c>)
 801f564:	681b      	ldr	r3, [r3, #0]
 801f566:	4605      	mov	r5, r0
 801f568:	68d8      	ldr	r0, [r3, #12]
 801f56a:	b954      	cbnz	r4, 801f582 <__assert_func+0x26>
 801f56c:	4b07      	ldr	r3, [pc, #28]	@ (801f58c <__assert_func+0x30>)
 801f56e:	461c      	mov	r4, r3
 801f570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f574:	9100      	str	r1, [sp, #0]
 801f576:	462b      	mov	r3, r5
 801f578:	4905      	ldr	r1, [pc, #20]	@ (801f590 <__assert_func+0x34>)
 801f57a:	f000 f841 	bl	801f600 <fiprintf>
 801f57e:	f000 f851 	bl	801f624 <abort>
 801f582:	4b04      	ldr	r3, [pc, #16]	@ (801f594 <__assert_func+0x38>)
 801f584:	e7f4      	b.n	801f570 <__assert_func+0x14>
 801f586:	bf00      	nop
 801f588:	2000014c 	.word	0x2000014c
 801f58c:	08020ace 	.word	0x08020ace
 801f590:	08020aa0 	.word	0x08020aa0
 801f594:	08020a93 	.word	0x08020a93

0801f598 <_calloc_r>:
 801f598:	b570      	push	{r4, r5, r6, lr}
 801f59a:	fba1 5402 	umull	r5, r4, r1, r2
 801f59e:	b93c      	cbnz	r4, 801f5b0 <_calloc_r+0x18>
 801f5a0:	4629      	mov	r1, r5
 801f5a2:	f7ff f945 	bl	801e830 <_malloc_r>
 801f5a6:	4606      	mov	r6, r0
 801f5a8:	b928      	cbnz	r0, 801f5b6 <_calloc_r+0x1e>
 801f5aa:	2600      	movs	r6, #0
 801f5ac:	4630      	mov	r0, r6
 801f5ae:	bd70      	pop	{r4, r5, r6, pc}
 801f5b0:	220c      	movs	r2, #12
 801f5b2:	6002      	str	r2, [r0, #0]
 801f5b4:	e7f9      	b.n	801f5aa <_calloc_r+0x12>
 801f5b6:	462a      	mov	r2, r5
 801f5b8:	4621      	mov	r1, r4
 801f5ba:	f7fe f9f5 	bl	801d9a8 <memset>
 801f5be:	e7f5      	b.n	801f5ac <_calloc_r+0x14>

0801f5c0 <__ascii_mbtowc>:
 801f5c0:	b082      	sub	sp, #8
 801f5c2:	b901      	cbnz	r1, 801f5c6 <__ascii_mbtowc+0x6>
 801f5c4:	a901      	add	r1, sp, #4
 801f5c6:	b142      	cbz	r2, 801f5da <__ascii_mbtowc+0x1a>
 801f5c8:	b14b      	cbz	r3, 801f5de <__ascii_mbtowc+0x1e>
 801f5ca:	7813      	ldrb	r3, [r2, #0]
 801f5cc:	600b      	str	r3, [r1, #0]
 801f5ce:	7812      	ldrb	r2, [r2, #0]
 801f5d0:	1e10      	subs	r0, r2, #0
 801f5d2:	bf18      	it	ne
 801f5d4:	2001      	movne	r0, #1
 801f5d6:	b002      	add	sp, #8
 801f5d8:	4770      	bx	lr
 801f5da:	4610      	mov	r0, r2
 801f5dc:	e7fb      	b.n	801f5d6 <__ascii_mbtowc+0x16>
 801f5de:	f06f 0001 	mvn.w	r0, #1
 801f5e2:	e7f8      	b.n	801f5d6 <__ascii_mbtowc+0x16>

0801f5e4 <__ascii_wctomb>:
 801f5e4:	4603      	mov	r3, r0
 801f5e6:	4608      	mov	r0, r1
 801f5e8:	b141      	cbz	r1, 801f5fc <__ascii_wctomb+0x18>
 801f5ea:	2aff      	cmp	r2, #255	@ 0xff
 801f5ec:	d904      	bls.n	801f5f8 <__ascii_wctomb+0x14>
 801f5ee:	228a      	movs	r2, #138	@ 0x8a
 801f5f0:	601a      	str	r2, [r3, #0]
 801f5f2:	f04f 30ff 	mov.w	r0, #4294967295
 801f5f6:	4770      	bx	lr
 801f5f8:	700a      	strb	r2, [r1, #0]
 801f5fa:	2001      	movs	r0, #1
 801f5fc:	4770      	bx	lr
	...

0801f600 <fiprintf>:
 801f600:	b40e      	push	{r1, r2, r3}
 801f602:	b503      	push	{r0, r1, lr}
 801f604:	4601      	mov	r1, r0
 801f606:	ab03      	add	r3, sp, #12
 801f608:	4805      	ldr	r0, [pc, #20]	@ (801f620 <fiprintf+0x20>)
 801f60a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f60e:	6800      	ldr	r0, [r0, #0]
 801f610:	9301      	str	r3, [sp, #4]
 801f612:	f7ff fd41 	bl	801f098 <_vfiprintf_r>
 801f616:	b002      	add	sp, #8
 801f618:	f85d eb04 	ldr.w	lr, [sp], #4
 801f61c:	b003      	add	sp, #12
 801f61e:	4770      	bx	lr
 801f620:	2000014c 	.word	0x2000014c

0801f624 <abort>:
 801f624:	b508      	push	{r3, lr}
 801f626:	2006      	movs	r0, #6
 801f628:	f000 f82c 	bl	801f684 <raise>
 801f62c:	2001      	movs	r0, #1
 801f62e:	f7e3 fa11 	bl	8002a54 <_exit>

0801f632 <_raise_r>:
 801f632:	291f      	cmp	r1, #31
 801f634:	b538      	push	{r3, r4, r5, lr}
 801f636:	4605      	mov	r5, r0
 801f638:	460c      	mov	r4, r1
 801f63a:	d904      	bls.n	801f646 <_raise_r+0x14>
 801f63c:	2316      	movs	r3, #22
 801f63e:	6003      	str	r3, [r0, #0]
 801f640:	f04f 30ff 	mov.w	r0, #4294967295
 801f644:	bd38      	pop	{r3, r4, r5, pc}
 801f646:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f648:	b112      	cbz	r2, 801f650 <_raise_r+0x1e>
 801f64a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f64e:	b94b      	cbnz	r3, 801f664 <_raise_r+0x32>
 801f650:	4628      	mov	r0, r5
 801f652:	f000 f831 	bl	801f6b8 <_getpid_r>
 801f656:	4622      	mov	r2, r4
 801f658:	4601      	mov	r1, r0
 801f65a:	4628      	mov	r0, r5
 801f65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f660:	f000 b818 	b.w	801f694 <_kill_r>
 801f664:	2b01      	cmp	r3, #1
 801f666:	d00a      	beq.n	801f67e <_raise_r+0x4c>
 801f668:	1c59      	adds	r1, r3, #1
 801f66a:	d103      	bne.n	801f674 <_raise_r+0x42>
 801f66c:	2316      	movs	r3, #22
 801f66e:	6003      	str	r3, [r0, #0]
 801f670:	2001      	movs	r0, #1
 801f672:	e7e7      	b.n	801f644 <_raise_r+0x12>
 801f674:	2100      	movs	r1, #0
 801f676:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f67a:	4620      	mov	r0, r4
 801f67c:	4798      	blx	r3
 801f67e:	2000      	movs	r0, #0
 801f680:	e7e0      	b.n	801f644 <_raise_r+0x12>
	...

0801f684 <raise>:
 801f684:	4b02      	ldr	r3, [pc, #8]	@ (801f690 <raise+0xc>)
 801f686:	4601      	mov	r1, r0
 801f688:	6818      	ldr	r0, [r3, #0]
 801f68a:	f7ff bfd2 	b.w	801f632 <_raise_r>
 801f68e:	bf00      	nop
 801f690:	2000014c 	.word	0x2000014c

0801f694 <_kill_r>:
 801f694:	b538      	push	{r3, r4, r5, lr}
 801f696:	4d07      	ldr	r5, [pc, #28]	@ (801f6b4 <_kill_r+0x20>)
 801f698:	2300      	movs	r3, #0
 801f69a:	4604      	mov	r4, r0
 801f69c:	4608      	mov	r0, r1
 801f69e:	4611      	mov	r1, r2
 801f6a0:	602b      	str	r3, [r5, #0]
 801f6a2:	f7e3 f9c7 	bl	8002a34 <_kill>
 801f6a6:	1c43      	adds	r3, r0, #1
 801f6a8:	d102      	bne.n	801f6b0 <_kill_r+0x1c>
 801f6aa:	682b      	ldr	r3, [r5, #0]
 801f6ac:	b103      	cbz	r3, 801f6b0 <_kill_r+0x1c>
 801f6ae:	6023      	str	r3, [r4, #0]
 801f6b0:	bd38      	pop	{r3, r4, r5, pc}
 801f6b2:	bf00      	nop
 801f6b4:	200024f4 	.word	0x200024f4

0801f6b8 <_getpid_r>:
 801f6b8:	f7e3 b9b5 	b.w	8002a26 <_getpid>
 801f6bc:	0000      	movs	r0, r0
	...

0801f6c0 <floor>:
 801f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6c4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801f6c8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801f6cc:	2e13      	cmp	r6, #19
 801f6ce:	4602      	mov	r2, r0
 801f6d0:	460b      	mov	r3, r1
 801f6d2:	460c      	mov	r4, r1
 801f6d4:	4605      	mov	r5, r0
 801f6d6:	4680      	mov	r8, r0
 801f6d8:	dc35      	bgt.n	801f746 <floor+0x86>
 801f6da:	2e00      	cmp	r6, #0
 801f6dc:	da17      	bge.n	801f70e <floor+0x4e>
 801f6de:	a334      	add	r3, pc, #208	@ (adr r3, 801f7b0 <floor+0xf0>)
 801f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6e4:	f7e0 fdaa 	bl	800023c <__adddf3>
 801f6e8:	2200      	movs	r2, #0
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	f7e1 f9ec 	bl	8000ac8 <__aeabi_dcmpgt>
 801f6f0:	b150      	cbz	r0, 801f708 <floor+0x48>
 801f6f2:	2c00      	cmp	r4, #0
 801f6f4:	da57      	bge.n	801f7a6 <floor+0xe6>
 801f6f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801f6fa:	432c      	orrs	r4, r5
 801f6fc:	2500      	movs	r5, #0
 801f6fe:	42ac      	cmp	r4, r5
 801f700:	4c2d      	ldr	r4, [pc, #180]	@ (801f7b8 <floor+0xf8>)
 801f702:	bf08      	it	eq
 801f704:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801f708:	4623      	mov	r3, r4
 801f70a:	462a      	mov	r2, r5
 801f70c:	e024      	b.n	801f758 <floor+0x98>
 801f70e:	4f2b      	ldr	r7, [pc, #172]	@ (801f7bc <floor+0xfc>)
 801f710:	4137      	asrs	r7, r6
 801f712:	ea01 0c07 	and.w	ip, r1, r7
 801f716:	ea5c 0c00 	orrs.w	ip, ip, r0
 801f71a:	d01d      	beq.n	801f758 <floor+0x98>
 801f71c:	a324      	add	r3, pc, #144	@ (adr r3, 801f7b0 <floor+0xf0>)
 801f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f722:	f7e0 fd8b 	bl	800023c <__adddf3>
 801f726:	2200      	movs	r2, #0
 801f728:	2300      	movs	r3, #0
 801f72a:	f7e1 f9cd 	bl	8000ac8 <__aeabi_dcmpgt>
 801f72e:	2800      	cmp	r0, #0
 801f730:	d0ea      	beq.n	801f708 <floor+0x48>
 801f732:	2c00      	cmp	r4, #0
 801f734:	bfbe      	ittt	lt
 801f736:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801f73a:	4133      	asrlt	r3, r6
 801f73c:	18e4      	addlt	r4, r4, r3
 801f73e:	ea24 0407 	bic.w	r4, r4, r7
 801f742:	2500      	movs	r5, #0
 801f744:	e7e0      	b.n	801f708 <floor+0x48>
 801f746:	2e33      	cmp	r6, #51	@ 0x33
 801f748:	dd0a      	ble.n	801f760 <floor+0xa0>
 801f74a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f74e:	d103      	bne.n	801f758 <floor+0x98>
 801f750:	f7e0 fd74 	bl	800023c <__adddf3>
 801f754:	4602      	mov	r2, r0
 801f756:	460b      	mov	r3, r1
 801f758:	4610      	mov	r0, r2
 801f75a:	4619      	mov	r1, r3
 801f75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f760:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801f764:	f04f 3cff 	mov.w	ip, #4294967295
 801f768:	fa2c f707 	lsr.w	r7, ip, r7
 801f76c:	4207      	tst	r7, r0
 801f76e:	d0f3      	beq.n	801f758 <floor+0x98>
 801f770:	a30f      	add	r3, pc, #60	@ (adr r3, 801f7b0 <floor+0xf0>)
 801f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f776:	f7e0 fd61 	bl	800023c <__adddf3>
 801f77a:	2200      	movs	r2, #0
 801f77c:	2300      	movs	r3, #0
 801f77e:	f7e1 f9a3 	bl	8000ac8 <__aeabi_dcmpgt>
 801f782:	2800      	cmp	r0, #0
 801f784:	d0c0      	beq.n	801f708 <floor+0x48>
 801f786:	2c00      	cmp	r4, #0
 801f788:	da0a      	bge.n	801f7a0 <floor+0xe0>
 801f78a:	2e14      	cmp	r6, #20
 801f78c:	d101      	bne.n	801f792 <floor+0xd2>
 801f78e:	3401      	adds	r4, #1
 801f790:	e006      	b.n	801f7a0 <floor+0xe0>
 801f792:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801f796:	2301      	movs	r3, #1
 801f798:	40b3      	lsls	r3, r6
 801f79a:	441d      	add	r5, r3
 801f79c:	4545      	cmp	r5, r8
 801f79e:	d3f6      	bcc.n	801f78e <floor+0xce>
 801f7a0:	ea25 0507 	bic.w	r5, r5, r7
 801f7a4:	e7b0      	b.n	801f708 <floor+0x48>
 801f7a6:	2500      	movs	r5, #0
 801f7a8:	462c      	mov	r4, r5
 801f7aa:	e7ad      	b.n	801f708 <floor+0x48>
 801f7ac:	f3af 8000 	nop.w
 801f7b0:	8800759c 	.word	0x8800759c
 801f7b4:	7e37e43c 	.word	0x7e37e43c
 801f7b8:	bff00000 	.word	0xbff00000
 801f7bc:	000fffff 	.word	0x000fffff

0801f7c0 <_init>:
 801f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7c2:	bf00      	nop
 801f7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f7c6:	bc08      	pop	{r3}
 801f7c8:	469e      	mov	lr, r3
 801f7ca:	4770      	bx	lr

0801f7cc <_fini>:
 801f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7ce:	bf00      	nop
 801f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f7d2:	bc08      	pop	{r3}
 801f7d4:	469e      	mov	lr, r3
 801f7d6:	4770      	bx	lr
