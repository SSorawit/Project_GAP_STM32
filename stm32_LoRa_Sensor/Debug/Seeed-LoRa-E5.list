
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3a0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001428  0801f4e0  0801f4e0  000204e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08020908  08020908  00021908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080209c8  080209c8  00022320  2**0
                  CONTENTS
  5 .ARM          00000008  080209c8  080209c8  000219c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080209d0  080209d0  00022320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080209d0  080209d0  000219d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080209d4  080209d4  000219d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000320  20000000  080209d8  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000021fc  20000320  08020cf8  00022320  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000251c  08020cf8  0002251c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00022320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f6ee  00000000  00000000  0002234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a457  00000000  00000000  00061a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032f8  00000000  00000000  0006be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026b0  00000000  00000000  0006f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a3a  00000000  00000000  00071838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f3dc  00000000  00000000  0009a272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4cd  00000000  00000000  000d964e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a4b1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfb4  00000000  00000000  001a4b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001b2b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000320 	.word	0x20000320
 800015c:	00000000 	.word	0x00000000
 8000160:	0801f4c8 	.word	0x0801f4c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000324 	.word	0x20000324
 800017c:	0801f4c8 	.word	0x0801f4c8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b96a 	b.w	800138c <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9d08      	ldr	r5, [sp, #32]
 80010d6:	460c      	mov	r4, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14e      	bne.n	800117a <__udivmoddi4+0xaa>
 80010dc:	4694      	mov	ip, r2
 80010de:	458c      	cmp	ip, r1
 80010e0:	4686      	mov	lr, r0
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	d962      	bls.n	80011ae <__udivmoddi4+0xde>
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0320 	rsb	r3, r2, #32
 80010ee:	4091      	lsls	r1, r2
 80010f0:	fa20 f303 	lsr.w	r3, r0, r3
 80010f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f8:	4319      	orrs	r1, r3
 80010fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fa1f f68c 	uxth.w	r6, ip
 8001106:	fbb1 f4f7 	udiv	r4, r1, r7
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	fb07 1114 	mls	r1, r7, r4, r1
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb04 f106 	mul.w	r1, r4, r6
 800111a:	4299      	cmp	r1, r3
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x64>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f104 30ff 	add.w	r0, r4, #4294967295
 8001126:	f080 8112 	bcs.w	800134e <__udivmoddi4+0x27e>
 800112a:	4299      	cmp	r1, r3
 800112c:	f240 810f 	bls.w	800134e <__udivmoddi4+0x27e>
 8001130:	3c02      	subs	r4, #2
 8001132:	4463      	add	r3, ip
 8001134:	1a59      	subs	r1, r3, r1
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	fbb1 f0f7 	udiv	r0, r1, r7
 800113e:	fb07 1110 	mls	r1, r7, r0, r1
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	fb00 f606 	mul.w	r6, r0, r6
 800114a:	429e      	cmp	r6, r3
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0303 	adds.w	r3, ip, r3
 8001152:	f100 31ff 	add.w	r1, r0, #4294967295
 8001156:	f080 80fc 	bcs.w	8001352 <__udivmoddi4+0x282>
 800115a:	429e      	cmp	r6, r3
 800115c:	f240 80f9 	bls.w	8001352 <__udivmoddi4+0x282>
 8001160:	4463      	add	r3, ip
 8001162:	3802      	subs	r0, #2
 8001164:	1b9b      	subs	r3, r3, r6
 8001166:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800116a:	2100      	movs	r1, #0
 800116c:	b11d      	cbz	r5, 8001176 <__udivmoddi4+0xa6>
 800116e:	40d3      	lsrs	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	e9c5 3200 	strd	r3, r2, [r5]
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	428b      	cmp	r3, r1
 800117c:	d905      	bls.n	800118a <__udivmoddi4+0xba>
 800117e:	b10d      	cbz	r5, 8001184 <__udivmoddi4+0xb4>
 8001180:	e9c5 0100 	strd	r0, r1, [r5]
 8001184:	2100      	movs	r1, #0
 8001186:	4608      	mov	r0, r1
 8001188:	e7f5      	b.n	8001176 <__udivmoddi4+0xa6>
 800118a:	fab3 f183 	clz	r1, r3
 800118e:	2900      	cmp	r1, #0
 8001190:	d146      	bne.n	8001220 <__udivmoddi4+0x150>
 8001192:	42a3      	cmp	r3, r4
 8001194:	d302      	bcc.n	800119c <__udivmoddi4+0xcc>
 8001196:	4290      	cmp	r0, r2
 8001198:	f0c0 80f0 	bcc.w	800137c <__udivmoddi4+0x2ac>
 800119c:	1a86      	subs	r6, r0, r2
 800119e:	eb64 0303 	sbc.w	r3, r4, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d0e6      	beq.n	8001176 <__udivmoddi4+0xa6>
 80011a8:	e9c5 6300 	strd	r6, r3, [r5]
 80011ac:	e7e3      	b.n	8001176 <__udivmoddi4+0xa6>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	f040 8090 	bne.w	80012d4 <__udivmoddi4+0x204>
 80011b4:	eba1 040c 	sub.w	r4, r1, ip
 80011b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011bc:	fa1f f78c 	uxth.w	r7, ip
 80011c0:	2101      	movs	r1, #1
 80011c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ca:	fb08 4416 	mls	r4, r8, r6, r4
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	fb07 f006 	mul.w	r0, r7, r6
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0x11c>
 80011da:	eb1c 0303 	adds.w	r3, ip, r3
 80011de:	f106 34ff 	add.w	r4, r6, #4294967295
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x11a>
 80011e4:	4298      	cmp	r0, r3
 80011e6:	f200 80cd 	bhi.w	8001384 <__udivmoddi4+0x2b4>
 80011ea:	4626      	mov	r6, r4
 80011ec:	1a1c      	subs	r4, r3, r0
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011f6:	fb08 4410 	mls	r4, r8, r0, r4
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	fb00 f707 	mul.w	r7, r0, r7
 8001202:	429f      	cmp	r7, r3
 8001204:	d908      	bls.n	8001218 <__udivmoddi4+0x148>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 34ff 	add.w	r4, r0, #4294967295
 800120e:	d202      	bcs.n	8001216 <__udivmoddi4+0x146>
 8001210:	429f      	cmp	r7, r3
 8001212:	f200 80b0 	bhi.w	8001376 <__udivmoddi4+0x2a6>
 8001216:	4620      	mov	r0, r4
 8001218:	1bdb      	subs	r3, r3, r7
 800121a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121e:	e7a5      	b.n	800116c <__udivmoddi4+0x9c>
 8001220:	f1c1 0620 	rsb	r6, r1, #32
 8001224:	408b      	lsls	r3, r1
 8001226:	fa22 f706 	lsr.w	r7, r2, r6
 800122a:	431f      	orrs	r7, r3
 800122c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001230:	fa04 f301 	lsl.w	r3, r4, r1
 8001234:	ea43 030c 	orr.w	r3, r3, ip
 8001238:	40f4      	lsrs	r4, r6
 800123a:	fa00 f801 	lsl.w	r8, r0, r1
 800123e:	0c38      	lsrs	r0, r7, #16
 8001240:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001244:	fbb4 fef0 	udiv	lr, r4, r0
 8001248:	fa1f fc87 	uxth.w	ip, r7
 800124c:	fb00 441e 	mls	r4, r0, lr, r4
 8001250:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001254:	fb0e f90c 	mul.w	r9, lr, ip
 8001258:	45a1      	cmp	r9, r4
 800125a:	fa02 f201 	lsl.w	r2, r2, r1
 800125e:	d90a      	bls.n	8001276 <__udivmoddi4+0x1a6>
 8001260:	193c      	adds	r4, r7, r4
 8001262:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001266:	f080 8084 	bcs.w	8001372 <__udivmoddi4+0x2a2>
 800126a:	45a1      	cmp	r9, r4
 800126c:	f240 8081 	bls.w	8001372 <__udivmoddi4+0x2a2>
 8001270:	f1ae 0e02 	sub.w	lr, lr, #2
 8001274:	443c      	add	r4, r7
 8001276:	eba4 0409 	sub.w	r4, r4, r9
 800127a:	fa1f f983 	uxth.w	r9, r3
 800127e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001282:	fb00 4413 	mls	r4, r0, r3, r4
 8001286:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800128a:	fb03 fc0c 	mul.w	ip, r3, ip
 800128e:	45a4      	cmp	ip, r4
 8001290:	d907      	bls.n	80012a2 <__udivmoddi4+0x1d2>
 8001292:	193c      	adds	r4, r7, r4
 8001294:	f103 30ff 	add.w	r0, r3, #4294967295
 8001298:	d267      	bcs.n	800136a <__udivmoddi4+0x29a>
 800129a:	45a4      	cmp	ip, r4
 800129c:	d965      	bls.n	800136a <__udivmoddi4+0x29a>
 800129e:	3b02      	subs	r3, #2
 80012a0:	443c      	add	r4, r7
 80012a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012a6:	fba0 9302 	umull	r9, r3, r0, r2
 80012aa:	eba4 040c 	sub.w	r4, r4, ip
 80012ae:	429c      	cmp	r4, r3
 80012b0:	46ce      	mov	lr, r9
 80012b2:	469c      	mov	ip, r3
 80012b4:	d351      	bcc.n	800135a <__udivmoddi4+0x28a>
 80012b6:	d04e      	beq.n	8001356 <__udivmoddi4+0x286>
 80012b8:	b155      	cbz	r5, 80012d0 <__udivmoddi4+0x200>
 80012ba:	ebb8 030e 	subs.w	r3, r8, lr
 80012be:	eb64 040c 	sbc.w	r4, r4, ip
 80012c2:	fa04 f606 	lsl.w	r6, r4, r6
 80012c6:	40cb      	lsrs	r3, r1
 80012c8:	431e      	orrs	r6, r3
 80012ca:	40cc      	lsrs	r4, r1
 80012cc:	e9c5 6400 	strd	r6, r4, [r5]
 80012d0:	2100      	movs	r1, #0
 80012d2:	e750      	b.n	8001176 <__udivmoddi4+0xa6>
 80012d4:	f1c2 0320 	rsb	r3, r2, #32
 80012d8:	fa20 f103 	lsr.w	r1, r0, r3
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	fa24 f303 	lsr.w	r3, r4, r3
 80012e4:	4094      	lsls	r4, r2
 80012e6:	430c      	orrs	r4, r1
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012f8:	fb08 3110 	mls	r1, r8, r0, r3
 80012fc:	0c23      	lsrs	r3, r4, #16
 80012fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001302:	fb00 f107 	mul.w	r1, r0, r7
 8001306:	4299      	cmp	r1, r3
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x24c>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001312:	d22c      	bcs.n	800136e <__udivmoddi4+0x29e>
 8001314:	4299      	cmp	r1, r3
 8001316:	d92a      	bls.n	800136e <__udivmoddi4+0x29e>
 8001318:	3802      	subs	r0, #2
 800131a:	4463      	add	r3, ip
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	b2a4      	uxth	r4, r4
 8001320:	fbb3 f1f8 	udiv	r1, r3, r8
 8001324:	fb08 3311 	mls	r3, r8, r1, r3
 8001328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800132c:	fb01 f307 	mul.w	r3, r1, r7
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x276>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f101 36ff 	add.w	r6, r1, #4294967295
 800133c:	d213      	bcs.n	8001366 <__udivmoddi4+0x296>
 800133e:	42a3      	cmp	r3, r4
 8001340:	d911      	bls.n	8001366 <__udivmoddi4+0x296>
 8001342:	3902      	subs	r1, #2
 8001344:	4464      	add	r4, ip
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800134c:	e739      	b.n	80011c2 <__udivmoddi4+0xf2>
 800134e:	4604      	mov	r4, r0
 8001350:	e6f0      	b.n	8001134 <__udivmoddi4+0x64>
 8001352:	4608      	mov	r0, r1
 8001354:	e706      	b.n	8001164 <__udivmoddi4+0x94>
 8001356:	45c8      	cmp	r8, r9
 8001358:	d2ae      	bcs.n	80012b8 <__udivmoddi4+0x1e8>
 800135a:	ebb9 0e02 	subs.w	lr, r9, r2
 800135e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001362:	3801      	subs	r0, #1
 8001364:	e7a8      	b.n	80012b8 <__udivmoddi4+0x1e8>
 8001366:	4631      	mov	r1, r6
 8001368:	e7ed      	b.n	8001346 <__udivmoddi4+0x276>
 800136a:	4603      	mov	r3, r0
 800136c:	e799      	b.n	80012a2 <__udivmoddi4+0x1d2>
 800136e:	4630      	mov	r0, r6
 8001370:	e7d4      	b.n	800131c <__udivmoddi4+0x24c>
 8001372:	46d6      	mov	lr, sl
 8001374:	e77f      	b.n	8001276 <__udivmoddi4+0x1a6>
 8001376:	4463      	add	r3, ip
 8001378:	3802      	subs	r0, #2
 800137a:	e74d      	b.n	8001218 <__udivmoddi4+0x148>
 800137c:	4606      	mov	r6, r0
 800137e:	4623      	mov	r3, r4
 8001380:	4608      	mov	r0, r1
 8001382:	e70f      	b.n	80011a4 <__udivmoddi4+0xd4>
 8001384:	3e02      	subs	r6, #2
 8001386:	4463      	add	r3, ip
 8001388:	e730      	b.n	80011ec <__udivmoddi4+0x11c>
 800138a:	bf00      	nop

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d6:	4013      	ands	r3, r2
 80013d8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <MX_ADC_Init+0x94>)
 80013ea:	4a24      	ldr	r2, [pc, #144]	@ (800147c <MX_ADC_Init+0x98>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_ADC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_ADC_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_ADC_Init+0x94>)
 800140a:	2204      	movs	r2, #4
 800140c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_ADC_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_ADC_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_ADC_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_ADC_Init+0x94>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_ADC_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_ADC_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_ADC_Init+0x94>)
 8001444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_ADC_Init+0x94>)
 800144c:	2207      	movs	r2, #7
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_ADC_Init+0x94>)
 8001452:	2207      	movs	r2, #7
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_ADC_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_ADC_Init+0x94>)
 8001466:	f002 fb11 	bl	8003a8c <HAL_ADC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001470:	f000 fb98 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000033c 	.word	0x2000033c
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <HAL_ADC_MspInit+0x24>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001496:	f7ff ff7b 	bl	8001390 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_ADC_MspDeInit+0x24>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d103      	bne.n	80014c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014be:	f7ff ff7f 	bl	80013c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012400 	.word	0x40012400

080014d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <SYS_InitMeasurement+0x14>)
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <SYS_InitMeasurement+0x18>)
 80014d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000033c 	.word	0x2000033c
 80014e8:	40012400 	.word	0x40012400

080014ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014fa:	4813      	ldr	r0, [pc, #76]	@ (8001548 <SYS_GetBatteryLevel+0x5c>)
 80014fc:	f000 f82a 	bl	8001554 <ADC_ReadChannels>
 8001500:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	e016      	b.n	800153c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001516:	4293      	cmp	r3, r2
 8001518:	d00b      	beq.n	8001532 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001524:	fb03 f202 	mul.w	r2, r3, r2
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	e004      	b.n	800153c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001532:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <SYS_GetBatteryLevel+0x64>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800153c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	b4002000 	.word	0xb4002000
 800154c:	1fff75aa 	.word	0x1fff75aa
 8001550:	004c08d8 	.word	0x004c08d8

08001554 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800156c:	f7ff ff3a 	bl	80013e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001570:	481a      	ldr	r0, [pc, #104]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001572:	f003 f8ba 	bl	80046ea <HAL_ADCEx_Calibration_Start>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800157c:	f000 fb12 	bl	8001ba4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001594:	f002 fdc6 	bl	8004124 <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800159e:	f000 fb01 	bl	8001ba4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015a4:	f002 fca2 	bl	8003eec <HAL_ADC_Start>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80015ae:	f000 faf9 	bl	8001ba4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015b8:	f002 fd10 	bl	8003fdc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015be:	f002 fcdb 	bl	8003f78 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015c4:	f002 fda1 	bl	800410a <HAL_ADC_GetValue>
 80015c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015cc:	f002 fc12 	bl	8003df4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80015d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000033c 	.word	0x2000033c

080015e0 <LL_AHB1_GRP1_EnableClock>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff ffe3 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ffe0 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	200b      	movs	r0, #11
 8001626:	f003 fa06 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162a:	200b      	movs	r0, #11
 800162c:	f003 fa1d 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001640:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001644:	d101      	bne.n	800164a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800164a:	2300      	movs	r3, #0
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	58004000 	.word	0x58004000

08001658 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001670:	4b56      	ldr	r3, [pc, #344]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0299      	lsls	r1, r3, #10
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <FLASH_IF_Write+0x178>)
 8001678:	400b      	ands	r3, r1
 800167a:	fbb2 f1f3 	udiv	r1, r2, r3
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	0adb      	lsrs	r3, r3, #11
 8001686:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001692:	3b01      	subs	r3, #1
 8001694:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	0291      	lsls	r1, r2, #10
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <FLASH_IF_Write+0x178>)
 800169c:	400a      	ands	r2, r1
 800169e:	fbb3 f1f2 	udiv	r1, r3, r2
 80016a2:	fb01 f202 	mul.w	r2, r1, r2
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	0adb      	lsrs	r3, r3, #11
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <FLASH_IF_Write+0x7a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <FLASH_IF_Write+0x7a>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80016d2:	f06f 0304 	mvn.w	r3, #4
 80016d6:	e074      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <FLASH_IF_Write+0x17c>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da02      	bge.n	80016e6 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80016e0:	f06f 0303 	mvn.w	r3, #3
 80016e4:	e06d      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d005      	beq.n	80016fa <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e05b      	b.n	80017b8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8f8 	bl	80018fa <FLASH_IF_IsEmpty>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d037      	beq.n	8001780 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	e052      	b.n	80017c2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001728:	4619      	mov	r1, r3
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f019 fe9a 	bl	801b464 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	4413      	add	r3, r2
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173e:	b292      	uxth	r2, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f019 fe8f 	bl	801b464 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	69f8      	ldr	r0, [r7, #28]
 800174c:	f000 f865 	bl	800181a <FLASH_IF_EraseByPages>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001756:	f06f 0301 	mvn.w	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 800175c:	e030      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001764:	02db      	lsls	r3, r3, #11
 8001766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f88a 	bl	8001886 <FLASH_IF_Write_Buffer>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001778:	f06f 0302 	mvn.w	r3, #2
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 800177e:	e01f      	b.n	80017c0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001784:	4619      	mov	r1, r3
 8001786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001788:	f000 f87d 	bl	8001886 <FLASH_IF_Write_Buffer>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001792:	f06f 0302 	mvn.w	r3, #2
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001798:	e012      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	4413      	add	r3, r2
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80017a2:	6a3a      	ldr	r2, [r7, #32]
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	4413      	add	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d99f      	bls.n	8001700 <FLASH_IF_Write+0xa8>
  }

  return status;
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	1fff75e0 	.word	0x1fff75e0
 80017d0:	03fffc00 	.word	0x03fffc00
 80017d4:	58004000 	.word	0x58004000

080017d8 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80017e4:	e00b      	b.n	80017fe <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80017e6:	bf00      	nop
 80017e8:	f7ff ff24 	bl	8001634 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1fa      	bne.n	80017e8 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	2001      	movs	r0, #1
 80017fa:	f003 fd3d 	bl	8005278 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001808:	4299      	cmp	r1, r3
 800180a:	bf08      	it	eq
 800180c:	4290      	cmpeq	r0, r2
 800180e:	d1ea      	bne.n	80017e6 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001810:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b08a      	sub	sp, #40	@ 0x28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	460b      	mov	r3, r1
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001830:	897b      	ldrh	r3, [r7, #10]
 8001832:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f003 feb8 	bl	80055b4 <HAL_FLASHEx_Erase_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800184a:	e00a      	b.n	8001862 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800184c:	f107 0214 	add.w	r2, r7, #20
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fe54 	bl	8005504 <HAL_FLASHEx_Erase>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <FLASH_IF_EraseByPages+0x62>
 800186a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <FLASH_IF_EraseByPages+0x5c>
 8001872:	2301      	movs	r3, #1
 8001874:	e003      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 8001876:	f06f 0301 	mvn.w	r3, #1
 800187a:	e000      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 800187c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800187e:	4618      	mov	r0, r3
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b08a      	sub	sp, #40	@ 0x28
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e020      	b.n	80018e2 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2208      	movs	r2, #8
 80018a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f019 fddb 	bl	801b464 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80018ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	bf08      	it	eq
 80018b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80018bc:	d005      	beq.n	80018ca <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80018be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff ff88 	bl	80017d8 <FLASH_IF_Write64>
 80018c8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3308      	adds	r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	3308      	adds	r3, #8
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d108      	bne.n	80018ee <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3d9      	bcc.n	80018a0 <FLASH_IF_Write_Buffer+0x1a>
 80018ec:	e000      	b.n	80018f0 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80018ee:	bf00      	nop
    }
  }

  return status;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001904:	e00a      	b.n	800191c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d001      	beq.n	8001916 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001912:	2301      	movs	r3, #1
 8001914:	e039      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	e010      	b.n	8001952 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f103 0208 	add.w	r2, r3, #8
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	bf08      	it	eq
 8001942:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001946:	d001      	beq.n	800194c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001948:	2301      	movs	r3, #1
 800194a:	e01e      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3e9      	bcc.n	8001930 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800196a:	e00a      	b.n	8001982 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2bff      	cmp	r3, #255	@ 0xff
 8001976:	d001      	beq.n	800197c <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001978:	2301      	movs	r3, #1
 800197a:	e006      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f1      	bne.n	800196c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001988:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <LL_AHB2_GRP1_EnableClock>:
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	2004      	movs	r0, #4
 80019da:	f7ff ffdb 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2002      	movs	r0, #2
 80019e0:	f7ff ffd8 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffd5 	bl	8001994 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80019f0:	482c      	ldr	r0, [pc, #176]	@ (8001aa4 <MX_GPIO_Init+0xe0>)
 80019f2:	f004 f8d1 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	482a      	ldr	r0, [pc, #168]	@ (8001aa4 <MX_GPIO_Init+0xe0>)
 80019fc:	f004 f8cc 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2131      	movs	r1, #49	@ 0x31
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f004 f8c6 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a16:	f004 f8bf 	bl	8005b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001a1a:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481c      	ldr	r0, [pc, #112]	@ (8001aa4 <MX_GPIO_Init+0xe0>)
 8001a32:	f003 fe83 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001a36:	2331      	movs	r3, #49	@ 0x31
 8001a38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4e:	f003 fe75 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a58:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	480f      	ldr	r0, [pc, #60]	@ (8001aa4 <MX_GPIO_Init+0xe0>)
 8001a68:	f003 fe68 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f003 fe59 	bl	800573c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2029      	movs	r0, #41	@ 0x29
 8001a90:	f002 ffd1 	bl	8004a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a94:	2029      	movs	r0, #41	@ 0x29
 8001a96:	f002 ffe8 	bl	8004a6a <HAL_NVIC_EnableIRQ>

}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab8:	f023 0218 	bic.w	r2, r3, #24
 8001abc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad6:	f001 fdeb 	bl	80036b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ada:	f000 f809 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ade:	f7ff ff71 	bl	80019c4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ae2:	f008 ff89 	bl	800a9f8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001ae6:	f001 faa9 	bl	800303c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001aea:	f008 ff8d 	bl	800aa08 <MX_LoRaWAN_Process>
 8001aee:	e7fc      	b.n	8001aea <main+0x18>

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b09a      	sub	sp, #104	@ 0x68
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2248      	movs	r2, #72	@ 0x48
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f01b fdd4 	bl	801d6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b16:	f004 f86f 	bl	8005bf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffc4 	bl	8001aa8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <SystemClock_Config+0xb0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba0 <SystemClock_Config+0xb0>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <SystemClock_Config+0xb0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b3c:	2324      	movs	r3, #36	@ 0x24
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b40:	2381      	movs	r3, #129	@ 0x81
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b44:	2301      	movs	r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001b4c:	23b0      	movs	r3, #176	@ 0xb0
 8001b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fb99 	bl	8006290 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b64:	f000 f81e 	bl	8001ba4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b68:	234f      	movs	r3, #79	@ 0x4f
 8001b6a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 ff1e 	bl	80069c8 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b92:	f000 f807 	bl	8001ba4 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3768      	adds	r7, #104	@ 0x68
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	58000400 	.word	0x58000400

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <LL_APB1_GRP1_EnableClock>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	222c      	movs	r2, #44	@ 0x2c
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f01b fd4d 	bl	801d6ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c14:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <MX_RTC_Init+0xa0>)
 8001c16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001c18:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c46:	4815      	ldr	r0, [pc, #84]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c48:	f005 fb7a 	bl	8007340 <HAL_RTC_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c52:	f7ff ffa7 	bl	8001ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c56:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c58:	f005 fe68 	bl	800792c <HAL_RTCEx_SetSSRU_IT>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c62:	f7ff ff9f 	bl	8001ba4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c76:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_RTC_Init+0x9c>)
 8001c86:	f005 fbd5 	bl	8007434 <HAL_RTC_SetAlarm_IT>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c90:	f7ff ff88 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200003a0 	.word	0x200003a0
 8001ca0:	40002800 	.word	0x40002800

08001ca4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b090      	sub	sp, #64	@ 0x40
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	2238      	movs	r2, #56	@ 0x38
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f01b fcf9 	bl	801d6ac <memset>
  if(rtcHandle->Instance==RTC)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_RTC_MspInit+0x74>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d125      	bne.n	8001d10 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 fa19 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ce0:	f7ff ff60 	bl	8001ba4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ce4:	f7ff ff64 	bl	8001bb0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ce8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cec:	f7ff ff70 	bl	8001bd0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f002 fe9e 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f002 feb5 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	202a      	movs	r0, #42	@ 0x2a
 8001d06:	f002 fe96 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d0a:	202a      	movs	r0, #42	@ 0x2a
 8001d0c:	f002 fead 	bl	8004a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d10:	bf00      	nop
 8001d12:	3740      	adds	r7, #64	@ 0x40
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40002800 	.word	0x40002800

08001d1c <Modbus_CRC16>:
#include "usart.h"

uint8_t rx_buffer[16];
uint8_t modbus_frame[8];

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001d28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d2c:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pos = 0; pos < len; pos++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	737b      	strb	r3, [r7, #13]
 8001d32:	e026      	b.n	8001d82 <Modbus_CRC16+0x66>
        crc ^= (uint16_t)buf[pos];
 8001d34:	7b7b      	ldrb	r3, [r7, #13]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	4053      	eors	r3, r2
 8001d42:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	e015      	b.n	8001d76 <Modbus_CRC16+0x5a>
            if (crc & 0x0001) {
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <Modbus_CRC16+0x4e>
                crc >>= 1;
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001d60:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001d64:	43db      	mvns	r3, r3
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	e002      	b.n	8001d70 <Modbus_CRC16+0x54>
            } else {
                crc >>= 1;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b07      	cmp	r3, #7
 8001d7a:	dde6      	ble.n	8001d4a <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	737b      	strb	r3, [r7, #13]
 8001d82:	7b7a      	ldrb	r2, [r7, #13]
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3d4      	bcc.n	8001d34 <Modbus_CRC16+0x18>
            }
        }
    }
    return crc;
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <Build_Modbus_Request>:

void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity, uint8_t *frame_out) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	460b      	mov	r3, r1
 8001da4:	81bb      	strh	r3, [r7, #12]
 8001da6:	4613      	mov	r3, r2
 8001da8:	817b      	strh	r3, [r7, #10]
    frame_out[0] = slave_addr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	701a      	strb	r2, [r3, #0]
    frame_out[1] = 0x03;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	701a      	strb	r2, [r3, #0]
    frame_out[2] = (start_reg >> 8) & 0xFF;
 8001db8:	89bb      	ldrh	r3, [r7, #12]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
    frame_out[3] = start_reg & 0xFF;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3303      	adds	r3, #3
 8001dca:	89ba      	ldrh	r2, [r7, #12]
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
    frame_out[4] = (quantity >> 8) & 0xFF;
 8001dd0:	897b      	ldrh	r3, [r7, #10]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
    frame_out[5] = quantity & 0xFF;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3305      	adds	r3, #5
 8001de2:	897a      	ldrh	r2, [r7, #10]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
    uint16_t crc = Modbus_CRC16(frame_out, 6);
 8001de8:	2106      	movs	r1, #6
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff96 	bl	8001d1c <Modbus_CRC16>
 8001df0:	4603      	mov	r3, r0
 8001df2:	82fb      	strh	r3, [r7, #22]
    frame_out[6] = crc & 0xFF;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3306      	adds	r3, #6
 8001df8:	8afa      	ldrh	r2, [r7, #22]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
    frame_out[7] = (crc >> 8) & 0xFF;
 8001dfe:	8afb      	ldrh	r3, [r7, #22]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3307      	adds	r3, #7
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <Decode_TempHumi>:

temphumi_t Decode_TempHumi(uint8_t *rx_buf) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    temphumi_t data;

    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3303      	adds	r3, #3
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	83fb      	strh	r3, [r7, #30]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3305      	adds	r3, #5
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	b21a      	sxth	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3306      	adds	r3, #6
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	83bb      	strh	r3, [r7, #28]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	3307      	adds	r3, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3308      	adds	r3, #8
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	837b      	strh	r3, [r7, #26]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3309      	adds	r3, #9
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	330a      	adds	r3, #10
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	833b      	strh	r3, [r7, #24]

    data.temperature = temp_raw / 100.0f;
 8001e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff24 	bl	8000ccc <__aeabi_i2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	492b      	ldr	r1, [pc, #172]	@ (8001f34 <Decode_TempHumi+0x120>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f827 	bl	8000edc <__aeabi_fdiv>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60bb      	str	r3, [r7, #8]
    data.humidity = humi_raw / 100.0f;
 8001e92:	8bbb      	ldrh	r3, [r7, #28]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe ff19 	bl	8000ccc <__aeabi_i2f>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4925      	ldr	r1, [pc, #148]	@ (8001f34 <Decode_TempHumi+0x120>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f81c 	bl	8000edc <__aeabi_fdiv>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
    data.dewpoint = dew_raw / 100.0f;
 8001ea8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff0d 	bl	8000ccc <__aeabi_i2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	491f      	ldr	r1, [pc, #124]	@ (8001f34 <Decode_TempHumi+0x120>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f810 	bl	8000edc <__aeabi_fdiv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	613b      	str	r3, [r7, #16]
    data.pressure = press_raw / 10.0f;
 8001ec0:	8b3b      	ldrh	r3, [r7, #24]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe ff02 	bl	8000ccc <__aeabi_i2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	491b      	ldr	r1, [pc, #108]	@ (8001f38 <Decode_TempHumi+0x124>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f805 	bl	8000edc <__aeabi_fdiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	617b      	str	r3, [r7, #20]

    printf("Temperature: %.2f C\r\n", data.temperature);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb0d 	bl	80004f8 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4816      	ldr	r0, [pc, #88]	@ (8001f3c <Decode_TempHumi+0x128>)
 8001ee4:	f01b fa9a 	bl	801d41c <iprintf>
    printf("Humidity: %.2f %%\r\n", data.humidity);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb04 	bl	80004f8 <__aeabi_f2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <Decode_TempHumi+0x12c>)
 8001ef6:	f01b fa91 	bl	801d41c <iprintf>
    printf("Dew Point: %.2f C\r\n", data.dewpoint);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fafb 	bl	80004f8 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	480f      	ldr	r0, [pc, #60]	@ (8001f44 <Decode_TempHumi+0x130>)
 8001f08:	f01b fa88 	bl	801d41c <iprintf>
    printf("Pressure: %.1f hPa\r\n", data.pressure);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe faf2 	bl	80004f8 <__aeabi_f2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <Decode_TempHumi+0x134>)
 8001f1a:	f01b fa7f 	bl	801d41c <iprintf>

    return data;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	461c      	mov	r4, r3
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	3724      	adds	r7, #36	@ 0x24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	42c80000 	.word	0x42c80000
 8001f38:	41200000 	.word	0x41200000
 8001f3c:	0801f4e0 	.word	0x0801f4e0
 8001f40:	0801f4f8 	.word	0x0801f4f8
 8001f44:	0801f50c 	.word	0x0801f50c
 8001f48:	0801f520 	.word	0x0801f520

08001f4c <Decode_Light>:

uint32_t Decode_Light(uint8_t *rx_buf) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    uint16_t lux_high = (rx_buf[3] << 8) | rx_buf[4];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3303      	adds	r3, #3
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	81fb      	strh	r3, [r7, #14]
    uint16_t lux_low  = (rx_buf[5] << 8) | rx_buf[6];
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3305      	adds	r3, #5
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3306      	adds	r3, #6
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	81bb      	strh	r3, [r7, #12]
    uint32_t lux = ((uint32_t)lux_high << 16) | lux_low;
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	041a      	lsls	r2, r3, #16
 8001f88:	89bb      	ldrh	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60bb      	str	r3, [r7, #8]

    printf("Illuminance: %lu lux\r\n", lux);
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <Decode_Light+0x54>)
 8001f92:	f01b fa43 	bl	801d41c <iprintf>

    return lux;
 8001f96:	68bb      	ldr	r3, [r7, #8]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	0801f538 	.word	0x0801f538

08001fa4 <Decode_Soil>:

soil_t Decode_Soil(uint8_t *rx_buf) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
    soil_t data;

    uint16_t humi_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	82fb      	strh	r3, [r7, #22]
    int16_t temp_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3305      	adds	r3, #5
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	3306      	adds	r3, #6
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	82bb      	strh	r3, [r7, #20]

    data.humidity = humi_raw / 10.0f;
 8001fdc:	8afb      	ldrh	r3, [r7, #22]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe74 	bl	8000ccc <__aeabi_i2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4918      	ldr	r1, [pc, #96]	@ (8002048 <Decode_Soil+0xa4>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ff77 	bl	8000edc <__aeabi_fdiv>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	613b      	str	r3, [r7, #16]
    data.temperature = temp_raw / 10.0f;
 8001ff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fe68 	bl	8000ccc <__aeabi_i2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4912      	ldr	r1, [pc, #72]	@ (8002048 <Decode_Soil+0xa4>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe ff6b 	bl	8000edc <__aeabi_fdiv>
 8002006:	4603      	mov	r3, r0
 8002008:	60fb      	str	r3, [r7, #12]

    printf("Humidity: %.1f %%RH\r\n", data.humidity);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa73 	bl	80004f8 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	480d      	ldr	r0, [pc, #52]	@ (800204c <Decode_Soil+0xa8>)
 8002018:	f01b fa00 	bl	801d41c <iprintf>
    printf("Temperature: %.1f C\r\n", data.temperature);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa6a 	bl	80004f8 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4809      	ldr	r0, [pc, #36]	@ (8002050 <Decode_Soil+0xac>)
 800202a:	f01b f9f7 	bl	801d41c <iprintf>

    return data;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	461a      	mov	r2, r3
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	41200000 	.word	0x41200000
 800204c:	0801f550 	.word	0x0801f550
 8002050:	0801f568 	.word	0x0801f568

08002054 <TempHumi>:

temphumi_t TempHumi(void) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    Build_Modbus_Request(0x01, 0x0000, 0x0004, modbus_frame);
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <TempHumi+0x88>)
 800205e:	2204      	movs	r2, #4
 8002060:	2100      	movs	r1, #0
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fe97 	bl	8001d96 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 8002068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206c:	2208      	movs	r2, #8
 800206e:	491b      	ldr	r1, [pc, #108]	@ (80020dc <TempHumi+0x88>)
 8002070:	481b      	ldr	r0, [pc, #108]	@ (80020e0 <TempHumi+0x8c>)
 8002072:	f006 fa06 	bl	8008482 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, rx_buffer, 16, 1000);
 8002076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207a:	2210      	movs	r2, #16
 800207c:	4919      	ldr	r1, [pc, #100]	@ (80020e4 <TempHumi+0x90>)
 800207e:	4818      	ldr	r0, [pc, #96]	@ (80020e0 <TempHumi+0x8c>)
 8002080:	f006 fa95 	bl	80085ae <HAL_UART_Receive>

    printf("TEMPHUMI: ");
 8002084:	4818      	ldr	r0, [pc, #96]	@ (80020e8 <TempHumi+0x94>)
 8002086:	f01b f9c9 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e00a      	b.n	80020a6 <TempHumi+0x52>
        printf("%d ", rx_buffer[i]);
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <TempHumi+0x90>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	4413      	add	r3, r2
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	4814      	ldr	r0, [pc, #80]	@ (80020ec <TempHumi+0x98>)
 800209c:	f01b f9be 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	ddf1      	ble.n	8002090 <TempHumi+0x3c>
    }
    printf("\r\n");
 80020ac:	4810      	ldr	r0, [pc, #64]	@ (80020f0 <TempHumi+0x9c>)
 80020ae:	f01b fa1d 	bl	801d4ec <puts>

    temphumi_t result = Decode_TempHumi(rx_buffer);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	490b      	ldr	r1, [pc, #44]	@ (80020e4 <TempHumi+0x90>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff feab 	bl	8001e14 <Decode_TempHumi>
    HAL_Delay(1000);
 80020be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c2:	f000 fb49 	bl	8002758 <HAL_Delay>
    return result;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	461c      	mov	r4, r3
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	3724      	adds	r7, #36	@ 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	200003e8 	.word	0x200003e8
 80020e0:	2000049c 	.word	0x2000049c
 80020e4:	200003d8 	.word	0x200003d8
 80020e8:	0801f580 	.word	0x0801f580
 80020ec:	0801f58c 	.word	0x0801f58c
 80020f0:	0801f590 	.word	0x0801f590

080020f4 <Light>:

uint32_t Light(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    Build_Modbus_Request(0x02, 0x0000, 0x0002, modbus_frame);
 80020fa:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <Light+0x78>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	2100      	movs	r1, #0
 8002100:	2002      	movs	r0, #2
 8002102:	f7ff fe48 	bl	8001d96 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	2208      	movs	r2, #8
 800210c:	4917      	ldr	r1, [pc, #92]	@ (800216c <Light+0x78>)
 800210e:	4818      	ldr	r0, [pc, #96]	@ (8002170 <Light+0x7c>)
 8002110:	f006 f9b7 	bl	8008482 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, rx_buffer, 16, 1000);
 8002114:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002118:	2210      	movs	r2, #16
 800211a:	4916      	ldr	r1, [pc, #88]	@ (8002174 <Light+0x80>)
 800211c:	4814      	ldr	r0, [pc, #80]	@ (8002170 <Light+0x7c>)
 800211e:	f006 fa46 	bl	80085ae <HAL_UART_Receive>

    printf("LiGHT: ");
 8002122:	4815      	ldr	r0, [pc, #84]	@ (8002178 <Light+0x84>)
 8002124:	f01b f97a 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	e00a      	b.n	8002144 <Light+0x50>
        printf("%d ", rx_buffer[i]);
 800212e:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <Light+0x80>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4810      	ldr	r0, [pc, #64]	@ (800217c <Light+0x88>)
 800213a:	f01b f96f 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3301      	adds	r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	ddf1      	ble.n	800212e <Light+0x3a>
    }
    printf("\r\n");
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <Light+0x8c>)
 800214c:	f01b f9ce 	bl	801d4ec <puts>

    uint32_t lux = Decode_Light(rx_buffer);
 8002150:	4808      	ldr	r0, [pc, #32]	@ (8002174 <Light+0x80>)
 8002152:	f7ff fefb 	bl	8001f4c <Decode_Light>
 8002156:	6038      	str	r0, [r7, #0]
    HAL_Delay(1000);
 8002158:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800215c:	f000 fafc 	bl	8002758 <HAL_Delay>
    return lux;
 8002160:	683b      	ldr	r3, [r7, #0]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200003e8 	.word	0x200003e8
 8002170:	2000049c 	.word	0x2000049c
 8002174:	200003d8 	.word	0x200003d8
 8002178:	0801f594 	.word	0x0801f594
 800217c:	0801f58c 	.word	0x0801f58c
 8002180:	0801f590 	.word	0x0801f590

08002184 <SoilTempHumi>:

soil_t SoilTempHumi(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    Build_Modbus_Request(0x03, 0x0000, 0x0002, modbus_frame);
 800218c:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <SoilTempHumi+0x8c>)
 800218e:	2202      	movs	r2, #2
 8002190:	2100      	movs	r1, #0
 8002192:	2003      	movs	r0, #3
 8002194:	f7ff fdff 	bl	8001d96 <Build_Modbus_Request>
    HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 8002198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219c:	2208      	movs	r2, #8
 800219e:	491c      	ldr	r1, [pc, #112]	@ (8002210 <SoilTempHumi+0x8c>)
 80021a0:	481c      	ldr	r0, [pc, #112]	@ (8002214 <SoilTempHumi+0x90>)
 80021a2:	f006 f96e 	bl	8008482 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, rx_buffer, 16, 1000);
 80021a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021aa:	2210      	movs	r2, #16
 80021ac:	491a      	ldr	r1, [pc, #104]	@ (8002218 <SoilTempHumi+0x94>)
 80021ae:	4819      	ldr	r0, [pc, #100]	@ (8002214 <SoilTempHumi+0x90>)
 80021b0:	f006 f9fd 	bl	80085ae <HAL_UART_Receive>

    printf("SOIL: ");
 80021b4:	4819      	ldr	r0, [pc, #100]	@ (800221c <SoilTempHumi+0x98>)
 80021b6:	f01b f931 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e00a      	b.n	80021d6 <SoilTempHumi+0x52>
        printf("%d ", rx_buffer[i]);
 80021c0:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <SoilTempHumi+0x94>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4815      	ldr	r0, [pc, #84]	@ (8002220 <SoilTempHumi+0x9c>)
 80021cc:	f01b f926 	bl	801d41c <iprintf>
    for (int i = 0; i < 16; i++) {
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	ddf1      	ble.n	80021c0 <SoilTempHumi+0x3c>
    }
    printf("\r\n");
 80021dc:	4811      	ldr	r0, [pc, #68]	@ (8002224 <SoilTempHumi+0xa0>)
 80021de:	f01b f985 	bl	801d4ec <puts>

    soil_t result = Decode_Soil(rx_buffer);
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	490c      	ldr	r1, [pc, #48]	@ (8002218 <SoilTempHumi+0x94>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fedb 	bl	8001fa4 <Decode_Soil>
    HAL_Delay(1000);
 80021ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f2:	f000 fab1 	bl	8002758 <HAL_Delay>
    return result;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002202:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200003e8 	.word	0x200003e8
 8002214:	2000049c 	.word	0x2000049c
 8002218:	200003d8 	.word	0x200003d8
 800221c:	0801f59c 	.word	0x0801f59c
 8002220:	0801f58c 	.word	0x0801f58c
 8002224:	0801f590 	.word	0x0801f590

08002228 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800222e:	2201      	movs	r2, #1
 8002230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	58000400 	.word	0x58000400

08002240 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800225c:	f001 fa48 	bl	80036f0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002260:	f7ff ffe2 	bl	8002228 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002264:	2001      	movs	r0, #1
 8002266:	f003 fd59 	bl	8005d1c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}

0800226e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002272:	f001 fa4b 	bl	800370c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002276:	f001 f8cb 	bl	8003410 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}

0800227e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002282:	f001 fa35 	bl	80036f0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002286:	2101      	movs	r1, #1
 8002288:	2000      	movs	r0, #0
 800228a:	f003 fcc3 	bl	8005c14 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}

08002292 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002296:	f001 fa39 	bl	800370c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ae:	bf00      	nop
 80022b0:	e7fd      	b.n	80022ae <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	bf00      	nop
 80022b8:	e7fd      	b.n	80022b6 <HardFault_Handler+0x4>

080022ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022be:	bf00      	nop
 80022c0:	e7fd      	b.n	80022be <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <BusFault_Handler+0x4>

080022ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ce:	bf00      	nop
 80022d0:	e7fd      	b.n	80022ce <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800230a:	f005 fb4b 	bl	80079a4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200003a0 	.word	0x200003a0

08002318 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Channel1_IRQHandler+0x10>)
 800231e:	f002 fe3b 	bl	8004f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000052c 	.word	0x2000052c

0800232c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <USART1_IRQHandler+0x10>)
 8002332:	f006 faf7 	bl	8008924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000040c 	.word	0x2000040c

08002340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <USART2_IRQHandler+0x10>)
 8002346:	f006 faed 	bl	8008924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000049c 	.word	0x2000049c

08002354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002358:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800235c:	f003 fc34 	bl	8005bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <RTC_Alarm_IRQHandler+0x10>)
 800236a:	f005 f9cb 	bl	8007704 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003a0 	.word	0x200003a0

08002378 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <SUBGHZ_Radio_IRQHandler+0x10>)
 800237e:	f005 fe79 	bl	8008074 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200003f0 	.word	0x200003f0

0800238c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002398:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800239a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <MX_SUBGHZ_Init+0x20>)
 80023c2:	2208      	movs	r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	@ (80023dc <MX_SUBGHZ_Init+0x20>)
 80023c8:	f005 fbd8 	bl	8007b7c <HAL_SUBGHZ_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80023d2:	f7ff fbe7 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200003f0 	.word	0x200003f0

080023e0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff ffcf 	bl	800238c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2032      	movs	r0, #50	@ 0x32
 80023f4:	f002 fb1f 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80023f8:	2032      	movs	r0, #50	@ 0x32
 80023fa:	f002 fb36 	bl	8004a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002430:	4b02      	ldr	r3, [pc, #8]	@ (800243c <LL_FLASH_GetUDN+0x10>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	1fff7580 	.word	0x1fff7580

08002440 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <LL_FLASH_GetDeviceID+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	1fff7584 	.word	0x1fff7584

08002458 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <LL_FLASH_GetSTCompanyID+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0a1b      	lsrs	r3, r3, #8
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	1fff7584 	.word	0x1fff7584

08002470 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ffc6 	bl	8002406 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800247a:	f019 fd7f 	bl	801bf7c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <SystemApp_Init+0x50>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002484:	f000 f98c 	bl	80027a0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002488:	f01a f808 	bl	801c49c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800248c:	480d      	ldr	r0, [pc, #52]	@ (80024c4 <SystemApp_Init+0x54>)
 800248e:	f01a f8b3 	bl	801c5f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <SystemApp_Init+0x58>)
 8002494:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002498:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800249a:	2002      	movs	r0, #2
 800249c:	f01a f8ba 	bl	801c614 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80024a0:	f7ff f816 	bl	80014d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80024a4:	f000 fa02 	bl	80028ac <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80024a8:	f018 ff36 	bl	801b318 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	2001      	movs	r0, #1
 80024b0:	f018 ff72 	bl	801b398 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80024b4:	2101      	movs	r1, #1
 80024b6:	2001      	movs	r0, #1
 80024b8:	f018 ff3e 	bl	801b338 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200003fc 	.word	0x200003fc
 80024c4:	08002691 	.word	0x08002691
 80024c8:	58004000 	.word	0x58004000

080024cc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80024d0:	f018 ff92 	bl	801b3f8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80024e2:	f7ff f803 	bl	80014ec <SYS_GetBatteryLevel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80024ea:	88bb      	ldrh	r3, [r7, #4]
 80024ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d902      	bls.n	80024fa <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80024f4:	23fe      	movs	r3, #254	@ 0xfe
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	e014      	b.n	8002524 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80024fa:	88bb      	ldrh	r3, [r7, #4]
 80024fc:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002500:	d202      	bcs.n	8002508 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	e00d      	b.n	8002524 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 800250e:	461a      	mov	r2, r3
 8002510:	4613      	mov	r3, r2
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	461a      	mov	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <GetBatteryLevel+0x58>)
 800251c:	fba3 2302 	umull	r2, r3, r3, r2
 8002520:	09db      	lsrs	r3, r3, #7
 8002522:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002524:	79fb      	ldrb	r3, [r7, #7]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	1b4e81b5 	.word	0x1b4e81b5

08002534 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f989 	bl	8002858 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fd63 	bl	8001014 <__aeabi_f2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002552:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800255e:	b590      	push	{r4, r7, lr}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800256a:	f7ff ff5f 	bl	800242c <LL_FLASH_GetUDN>
 800256e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d138      	bne.n	80025ea <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002578:	f001 f8d6 	bl	8003728 <HAL_GetUIDw0>
 800257c:	4604      	mov	r4, r0
 800257e:	f001 f8e7 	bl	8003750 <HAL_GetUIDw2>
 8002582:	4603      	mov	r3, r0
 8002584:	4423      	add	r3, r4
 8002586:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002588:	f001 f8d8 	bl	800373c <HAL_GetUIDw1>
 800258c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	0e1a      	lsrs	r2, r3, #24
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3307      	adds	r3, #7
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	0c1a      	lsrs	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3306      	adds	r3, #6
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	0a1a      	lsrs	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3305      	adds	r3, #5
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0e1a      	lsrs	r2, r3, #24
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3303      	adds	r3, #3
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	0c1a      	lsrs	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3302      	adds	r3, #2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	0a1a      	lsrs	r2, r3, #8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80025e8:	e031      	b.n	800264e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3307      	adds	r3, #7
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	0a1a      	lsrs	r2, r3, #8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3306      	adds	r3, #6
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	0c1a      	lsrs	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3305      	adds	r3, #5
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	0e1a      	lsrs	r2, r3, #24
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002618:	f7ff ff12 	bl	8002440 <LL_FLASH_GetDeviceID>
 800261c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3303      	adds	r3, #3
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002628:	f7ff ff16 	bl	8002458 <LL_FLASH_GetSTCompanyID>
 800262c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3302      	adds	r3, #2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	0a1a      	lsrs	r2, r3, #8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3301      	adds	r3, #1
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	701a      	strb	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}

08002656 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002660:	f7ff fee4 	bl	800242c <LL_FLASH_GetUDN>
 8002664:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d10b      	bne.n	8002686 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800266e:	f001 f85b 	bl	8003728 <HAL_GetUIDw0>
 8002672:	4604      	mov	r4, r0
 8002674:	f001 f862 	bl	800373c <HAL_GetUIDw1>
 8002678:	4603      	mov	r3, r0
 800267a:	405c      	eors	r4, r3
 800267c:	f001 f868 	bl	8003750 <HAL_GetUIDw2>
 8002680:	4603      	mov	r3, r0
 8002682:	4063      	eors	r3, r4
 8002684:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8002686:	687b      	ldr	r3, [r7, #4]

}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bd90      	pop	{r4, r7, pc}

08002690 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af02      	add	r7, sp, #8
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	4618      	mov	r0, r3
 80026a0:	f018 ffba 	bl	801b618 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <TimestampNow+0x3c>)
 80026ae:	2110      	movs	r1, #16
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f81d 	bl	80026f0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fd fdb2 	bl	8000220 <strlen>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0801f5a4 	.word	0x0801f5a4

080026d0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80026d4:	2101      	movs	r1, #1
 80026d6:	2002      	movs	r0, #2
 80026d8:	f018 fe2e 	bl	801b338 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80026e4:	2100      	movs	r1, #0
 80026e6:	2002      	movs	r0, #2
 80026e8:	f018 fe26 	bl	801b338 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80026f0:	b40c      	push	{r2, r3}
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f019 f957 	bl	801b9bc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002718:	b002      	add	sp, #8
 800271a:	4770      	bx	lr

0800271c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_GetTick+0x24>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002742:	f000 fa41 	bl	8002bc8 <TIMER_IF_GetTimerValue>
 8002746:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003fc 	.word	0x200003fc

08002758 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fab7 	bl	8002cd6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <LL_AHB2_GRP1_EnableClock>:
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800277e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800278c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80027a6:	f000 ffdd 	bl	8003764 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80027aa:	f000 ffe1 	bl	8003770 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80027ae:	f000 ffe5 	bl	800377c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80027cc:	2001      	movs	r0, #1
 80027ce:	f7ff ffcf 	bl	8002770 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80027d2:	2002      	movs	r0, #2
 80027d4:	f7ff ffcc 	bl	8002770 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80027d8:	2002      	movs	r0, #2
 80027da:	f7ff ffc9 	bl	8002770 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80027de:	2002      	movs	r0, #2
 80027e0:	f7ff ffc6 	bl	8002770 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80027e4:	2301      	movs	r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f0:	f002 ffa4 	bl	800573c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80027f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027f8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4815      	ldr	r0, [pc, #84]	@ (8002854 <DBG_Init+0xb4>)
 8002800:	f002 ff9c 	bl	800573c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002804:	2308      	movs	r3, #8
 8002806:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4811      	ldr	r0, [pc, #68]	@ (8002854 <DBG_Init+0xb4>)
 800280e:	f002 ff95 	bl	800573c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002812:	2310      	movs	r3, #16
 8002814:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	480e      	ldr	r0, [pc, #56]	@ (8002854 <DBG_Init+0xb4>)
 800281c:	f002 ff8e 	bl	800573c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	2101      	movs	r1, #1
 8002824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002828:	f003 f9b6 	bl	8005b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002832:	4808      	ldr	r0, [pc, #32]	@ (8002854 <DBG_Init+0xb4>)
 8002834:	f003 f9b0 	bl	8005b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	2108      	movs	r1, #8
 800283c:	4805      	ldr	r0, [pc, #20]	@ (8002854 <DBG_Init+0xb4>)
 800283e:	f003 f9ab 	bl	8005b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2110      	movs	r1, #16
 8002846:	4803      	ldr	r0, [pc, #12]	@ (8002854 <DBG_Init+0xb4>)
 8002848:	f003 f9a6 	bl	8005b98 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	48000400 	.word	0x48000400

08002858 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002860:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <EnvSensors_Read+0x40>)
 8002862:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <EnvSensors_Read+0x44>)
 8002866:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002868:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <EnvSensors_Read+0x48>)
 800286a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <EnvSensors_Read+0x4c>)
 8002882:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <EnvSensors_Read+0x50>)
 8002888:	611a      	str	r2, [r3, #16]

  return 0;
 800288a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	42480000 	.word	0x42480000
 800289c:	41900000 	.word	0x41900000
 80028a0:	447a0000 	.word	0x447a0000
 80028a4:	003e090d 	.word	0x003e090d
 80028a8:	000503ab 	.word	0x000503ab

080028ac <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80028b6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
	return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <_kill>:

int _kill(int pid, int sig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028da:	f01a ff39 	bl	801d750 <__errno>
 80028de:	4603      	mov	r3, r0
 80028e0:	2216      	movs	r2, #22
 80028e2:	601a      	str	r2, [r3, #0]
	return -1;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_exit>:

void _exit (int status)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ffe7 	bl	80028d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002902:	bf00      	nop
 8002904:	e7fd      	b.n	8002902 <_exit+0x12>

08002906 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e00a      	b.n	800292e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002918:	f3af 8000 	nop.w
 800291c:	4601      	mov	r1, r0
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	60ba      	str	r2, [r7, #8]
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	429a      	cmp	r2, r3
 8002934:	dbf0      	blt.n	8002918 <_read+0x12>
	}

return len;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e009      	b.n	8002966 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	60ba      	str	r2, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	dbf1      	blt.n	8002952 <_write+0x12>
	}
	return len;
 800296e:	687b      	ldr	r3, [r7, #4]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_close>:

int _close(int file)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	return -1;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299e:	605a      	str	r2, [r3, #4]
	return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <_isatty>:

int _isatty(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f01a fea2 	bl	801d750 <__errno>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <_sbrk+0x64>)
 8002a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20010000 	.word	0x20010000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	20000400 	.word	0x20000400
 8002a40:	20002520 	.word	0x20002520

08002a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <TIMER_IF_Init+0x5c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <TIMER_IF_Init+0x60>)
 8002a82:	f04f 32ff 	mov.w	r2, #4294967295
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a88:	f7ff f8ba 	bl	8001c00 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a8c:	f000 f856 	bl	8002b3c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a94:	480c      	ldr	r0, [pc, #48]	@ (8002ac8 <TIMER_IF_Init+0x60>)
 8002a96:	f004 fdd9 	bl	800764c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <TIMER_IF_Init+0x60>)
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002aa2:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <TIMER_IF_Init+0x60>)
 8002aa4:	f004 ff10 	bl	80078c8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f000 f9d3 	bl	8002e54 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002aae:	f000 f85f 	bl	8002b70 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <TIMER_IF_Init+0x5c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000404 	.word	0x20000404
 8002ac8:	200003a0 	.word	0x200003a0

08002acc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08e      	sub	sp, #56	@ 0x38
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	222c      	movs	r2, #44	@ 0x2c
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f01a fde2 	bl	801d6ac <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002ae8:	f000 f828 	bl	8002b3c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <TIMER_IF_StartTimer+0x68>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002b04:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b08:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2201      	movs	r2, #1
 8002b16:	4619      	mov	r1, r3
 8002b18:	4807      	ldr	r0, [pc, #28]	@ (8002b38 <TIMER_IF_StartTimer+0x6c>)
 8002b1a:	f004 fc8b 	bl	8007434 <HAL_RTC_SetAlarm_IT>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b24:	f7ff f83e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3738      	adds	r7, #56	@ 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000408 	.word	0x20000408
 8002b38:	200003a0 	.word	0x200003a0

08002b3c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <TIMER_IF_StopTimer+0x2c>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b50:	4806      	ldr	r0, [pc, #24]	@ (8002b6c <TIMER_IF_StopTimer+0x30>)
 8002b52:	f004 fd7b 	bl	800764c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <TIMER_IF_StopTimer+0x30>)
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40002800 	.word	0x40002800
 8002b6c:	200003a0 	.word	0x200003a0

08002b70 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002b74:	f000 f98e 	bl	8002e94 <GetTimerTicks>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4a03      	ldr	r2, [pc, #12]	@ (8002b88 <TIMER_IF_SetTimerContext+0x18>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b7e:	4b02      	ldr	r3, [pc, #8]	@ (8002b88 <TIMER_IF_SetTimerContext+0x18>)
 8002b80:	681b      	ldr	r3, [r3, #0]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000408 	.word	0x20000408

08002b8c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b90:	4b02      	ldr	r3, [pc, #8]	@ (8002b9c <TIMER_IF_GetTimerContext+0x10>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20000408 	.word	0x20000408

08002ba0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002baa:	f000 f973 	bl	8002e94 <GetTimerTicks>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000408 	.word	0x20000408

08002bc8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <TIMER_IF_GetTimerValue+0x24>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002bda:	f000 f95b 	bl	8002e94 <GetTimerTicks>
 8002bde:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002be0:	687b      	ldr	r3, [r7, #4]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000404 	.word	0x20000404

08002bf0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002bfe:	687b      	ldr	r3, [r7, #4]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002c0a:	b5b0      	push	{r4, r5, r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c12:	2100      	movs	r1, #0
 8002c14:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	2000      	movs	r0, #0
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	0d95      	lsrs	r5, r2, #22
 8002c20:	0294      	lsls	r4, r2, #10
 8002c22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fe fa37 	bl	80010a0 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4613      	mov	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdb0      	pop	{r4, r5, r7, pc}

08002c44 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002c44:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c4e:	2100      	movs	r1, #0
 8002c50:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	2000      	movs	r0, #0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4605      	mov	r5, r0
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f04f 0a00 	mov.w	sl, #0
 8002c62:	f04f 0b00 	mov.w	fp, #0
 8002c66:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002c6a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002c6e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002c72:	4650      	mov	r0, sl
 8002c74:	4659      	mov	r1, fp
 8002c76:	1b02      	subs	r2, r0, r4
 8002c78:	eb61 0305 	sbc.w	r3, r1, r5
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0099      	lsls	r1, r3, #2
 8002c86:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c8a:	0090      	lsls	r0, r2, #2
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	eb12 0804 	adds.w	r8, r2, r4
 8002c94:	eb43 0905 	adc.w	r9, r3, r5
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cac:	4690      	mov	r8, r2
 8002cae:	4699      	mov	r9, r3
 8002cb0:	4640      	mov	r0, r8
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	0a82      	lsrs	r2, r0, #10
 8002cbe:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002cc2:	0a8b      	lsrs	r3, r1, #10
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002cd4:	4770      	bx	lr

08002cd6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff93 	bl	8002c0a <TIMER_IF_Convert_ms2Tick>
 8002ce4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ce6:	f000 f8d5 	bl	8002e94 <GetTimerTicks>
 8002cea:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cec:	e000      	b.n	8002cf0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002cee:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cf0:	f000 f8d0 	bl	8002e94 <GetTimerTicks>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8f6      	bhi.n	8002cee <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002d12:	f019 fa81 	bl	801c218 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d26:	f000 f8a5 	bl	8002e74 <TIMER_IF_BkUp_Read_MSBticks>
 8002d2a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f88f 	bl	8002e54 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002d4c:	f000 f8a2 	bl	8002e94 <GetTimerTicks>
 8002d50:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002d52:	f000 f88f 	bl	8002e74 <TIMER_IF_BkUp_Read_MSBticks>
 8002d56:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	60fa      	str	r2, [r7, #12]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d70:	2000      	movs	r0, #0
 8002d72:	460c      	mov	r4, r1
 8002d74:	4605      	mov	r5, r0
 8002d76:	eb12 0804 	adds.w	r8, r2, r4
 8002d7a:	eb43 0905 	adc.w	r9, r3, r5
 8002d7e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	0a82      	lsrs	r2, r0, #10
 8002d90:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d94:	0a8b      	lsrs	r3, r1, #10
 8002d96:	4613      	mov	r3, r2
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002da8:	f04f 0b00 	mov.w	fp, #0
 8002dac:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff46 	bl	8002c44 <TIMER_IF_Convert_Tick2ms>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3730      	adds	r7, #48	@ 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dcc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002dda:	f004 fe07 	bl	80079ec <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200003a0 	.word	0x200003a0

08002dec <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	2101      	movs	r1, #1
 8002df8:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002dfa:	f004 fdf7 	bl	80079ec <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200003a0 	.word	0x200003a0

08002e0c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002e16:	2100      	movs	r1, #0
 8002e18:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e1a:	f004 fdff 	bl	8007a1c <HAL_RTCEx_BKUPRead>
 8002e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200003a0 	.word	0x200003a0

08002e30 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4804      	ldr	r0, [pc, #16]	@ (8002e50 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e3e:	f004 fded 	bl	8007a1c <HAL_RTCEx_BKUPRead>
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002e44:	687b      	ldr	r3, [r7, #4]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200003a0 	.word	0x200003a0

08002e54 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002e62:	f004 fdc3 	bl	80079ec <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003a0 	.word	0x200003a0

08002e74 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e7e:	f004 fdcd 	bl	8007a1c <HAL_RTCEx_BKUPRead>
 8002e82:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e84:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200003a0 	.word	0x200003a0

08002e94 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e9a:	480b      	ldr	r0, [pc, #44]	@ (8002ec8 <GetTimerTicks+0x34>)
 8002e9c:	f7ff fdd8 	bl	8002a50 <LL_RTC_TIME_GetSubSecond>
 8002ea0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ea2:	e003      	b.n	8002eac <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ea4:	4808      	ldr	r0, [pc, #32]	@ (8002ec8 <GetTimerTicks+0x34>)
 8002ea6:	f7ff fdd3 	bl	8002a50 <LL_RTC_TIME_GetSubSecond>
 8002eaa:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002eac:	4806      	ldr	r0, [pc, #24]	@ (8002ec8 <GetTimerTicks+0x34>)
 8002eae:	f7ff fdcf 	bl	8002a50 <LL_RTC_TIME_GetSubSecond>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d1f4      	bne.n	8002ea4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40002800 	.word	0x40002800

08002ecc <LL_AHB2_GRP1_EnableClock>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <LL_APB1_GRP1_EnableClock>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f20:	68fb      	ldr	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <LL_APB1_GRP1_DisableClock>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f42:	4013      	ands	r3, r2
 8002f44:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <LL_APB2_GRP1_EnableClock>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_APB2_GRP1_DisableClock>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f96:	4013      	ands	r3, r2
 8002f98:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002faa:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fae:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fda:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fec:	4811      	ldr	r0, [pc, #68]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8002fee:	f005 f9f8 	bl	80083e2 <HAL_UART_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ff8:	f7fe fdd4 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	480d      	ldr	r0, [pc, #52]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8003000:	f007 fc0f 	bl	800a822 <HAL_UARTEx_SetTxFifoThreshold>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800300a:	f7fe fdcb 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800300e:	2100      	movs	r1, #0
 8003010:	4808      	ldr	r0, [pc, #32]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8003012:	f007 fc44 	bl	800a89e <HAL_UARTEx_SetRxFifoThreshold>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800301c:	f7fe fdc2 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	@ (8003034 <MX_USART1_UART_Init+0x90>)
 8003022:	f007 fb8b 	bl	800a73c <HAL_UARTEx_EnableFifoMode>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800302c:	f7fe fdba 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000040c 	.word	0x2000040c
 8003038:	40013800 	.word	0x40013800

0800303c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003042:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <MX_USART2_UART_Init+0x94>)
 8003044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003048:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800304c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305a:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b16      	ldr	r3, [pc, #88]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307e:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003084:	4811      	ldr	r0, [pc, #68]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003086:	f005 f9ac 	bl	80083e2 <HAL_UART_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003090:	f7fe fd88 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003094:	2100      	movs	r1, #0
 8003096:	480d      	ldr	r0, [pc, #52]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 8003098:	f007 fbc3 	bl	800a822 <HAL_UARTEx_SetTxFifoThreshold>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80030a2:	f7fe fd7f 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a6:	2100      	movs	r1, #0
 80030a8:	4808      	ldr	r0, [pc, #32]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 80030aa:	f007 fbf8 	bl	800a89e <HAL_UARTEx_SetRxFifoThreshold>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80030b4:	f7fe fd76 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80030b8:	4804      	ldr	r0, [pc, #16]	@ (80030cc <MX_USART2_UART_Init+0x90>)
 80030ba:	f007 fb7a 	bl	800a7b2 <HAL_UARTEx_DisableFifoMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80030c4:	f7fe fd6e 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	2000049c 	.word	0x2000049c
 80030d0:	40004400 	.word	0x40004400

080030d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b096      	sub	sp, #88	@ 0x58
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	2238      	movs	r2, #56	@ 0x38
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f01a fad9 	bl	801d6ac <memset>
  if(uartHandle->Instance==USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <HAL_UART_MspInit+0x150>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d157      	bne.n	80031b4 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003104:	2301      	movs	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003108:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800310c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fffa 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800311e:	f7fe fd41 	bl	8001ba4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003122:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003126:	f7ff ff13 	bl	8002f50 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	2002      	movs	r0, #2
 800312c:	f7ff fece 	bl	8002ecc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003130:	23c0      	movs	r3, #192	@ 0xc0
 8003132:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003140:	2307      	movs	r3, #7
 8003142:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003148:	4619      	mov	r1, r3
 800314a:	4837      	ldr	r0, [pc, #220]	@ (8003228 <HAL_UART_MspInit+0x154>)
 800314c:	f002 faf6 	bl	800573c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003150:	4b36      	ldr	r3, [pc, #216]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003152:	4a37      	ldr	r2, [pc, #220]	@ (8003230 <HAL_UART_MspInit+0x15c>)
 8003154:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003156:	4b35      	ldr	r3, [pc, #212]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003158:	2212      	movs	r2, #18
 800315a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800315c:	4b33      	ldr	r3, [pc, #204]	@ (800322c <HAL_UART_MspInit+0x158>)
 800315e:	2210      	movs	r2, #16
 8003160:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003162:	4b32      	ldr	r3, [pc, #200]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003168:	4b30      	ldr	r3, [pc, #192]	@ (800322c <HAL_UART_MspInit+0x158>)
 800316a:	2280      	movs	r2, #128	@ 0x80
 800316c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800316e:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003170:	2200      	movs	r2, #0
 8003172:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800317a:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <HAL_UART_MspInit+0x158>)
 800317c:	2200      	movs	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003180:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003182:	2200      	movs	r2, #0
 8003184:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003186:	4829      	ldr	r0, [pc, #164]	@ (800322c <HAL_UART_MspInit+0x158>)
 8003188:	f001 fc8c 	bl	8004aa4 <HAL_DMA_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003192:	f7fe fd07 	bl	8001ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a24      	ldr	r2, [pc, #144]	@ (800322c <HAL_UART_MspInit+0x158>)
 800319a:	679a      	str	r2, [r3, #120]	@ 0x78
 800319c:	4a23      	ldr	r2, [pc, #140]	@ (800322c <HAL_UART_MspInit+0x158>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2102      	movs	r1, #2
 80031a6:	2024      	movs	r0, #36	@ 0x24
 80031a8:	f001 fc45 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ac:	2024      	movs	r0, #36	@ 0x24
 80031ae:	f001 fc5c 	bl	8004a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031b2:	e033      	b.n	800321c <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003234 <HAL_UART_MspInit+0x160>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d12e      	bne.n	800321c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031be:	2302      	movs	r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031c2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80031c6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 ff9d 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_MspInit+0x108>
      Error_Handler();
 80031d8:	f7fe fce4 	bl	8001ba4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031dc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80031e0:	f7ff fe8c 	bl	8002efc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	2001      	movs	r0, #1
 80031e6:	f7ff fe71 	bl	8002ecc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80031ea:	230c      	movs	r3, #12
 80031ec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031fa:	2307      	movs	r3, #7
 80031fc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003208:	f002 fa98 	bl	800573c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	2025      	movs	r0, #37	@ 0x25
 8003212:	f001 fc10 	bl	8004a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003216:	2025      	movs	r0, #37	@ 0x25
 8003218:	f001 fc27 	bl	8004a6a <HAL_NVIC_EnableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3758      	adds	r7, #88	@ 0x58
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013800 	.word	0x40013800
 8003228:	48000400 	.word	0x48000400
 800322c:	2000052c 	.word	0x2000052c
 8003230:	40020008 	.word	0x40020008
 8003234:	40004400 	.word	0x40004400

08003238 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <HAL_UART_MspDeInit+0x60>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d110      	bne.n	800326c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800324a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800324e:	f7ff fe97 	bl	8002f80 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003252:	21c0      	movs	r1, #192	@ 0xc0
 8003254:	4811      	ldr	r0, [pc, #68]	@ (800329c <HAL_UART_MspDeInit+0x64>)
 8003256:	f002 fbd1 	bl	80059fc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fcc8 	bl	8004bf4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003264:	2024      	movs	r0, #36	@ 0x24
 8003266:	f001 fc0e 	bl	8004a86 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800326a:	e010      	b.n	800328e <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0b      	ldr	r2, [pc, #44]	@ (80032a0 <HAL_UART_MspDeInit+0x68>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10b      	bne.n	800328e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003276:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800327a:	f7ff fe57 	bl	8002f2c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800327e:	210c      	movs	r1, #12
 8003280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003284:	f002 fbba 	bl	80059fc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003288:	2025      	movs	r0, #37	@ 0x25
 800328a:	f001 fbfc 	bl	8004a86 <HAL_NVIC_DisableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40013800 	.word	0x40013800
 800329c:	48000400 	.word	0x48000400
 80032a0:	40004400 	.word	0x40004400

080032a4 <LL_APB2_GRP1_ForceReset>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_APB2_GRP1_ReleaseReset>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032dc:	4013      	ands	r3, r2
 80032de:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <LL_EXTI_EnableIT_0_31+0x24>)
 80032f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80032fa:	4905      	ldr	r1, [pc, #20]	@ (8003310 <LL_EXTI_EnableIT_0_31+0x24>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	58000800 	.word	0x58000800

08003314 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800331c:	4a07      	ldr	r2, [pc, #28]	@ (800333c <vcom_Init+0x28>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003322:	f7fe f975 	bl	8001610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003326:	f7ff fe3d 	bl	8002fa4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800332a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800332e:	f7ff ffdd 	bl	80032ec <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003332:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000590 	.word	0x20000590

08003340 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003344:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003348:	f7ff ffac 	bl	80032a4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800334c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003350:	f7ff ffb9 	bl	80032c6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003354:	4804      	ldr	r0, [pc, #16]	@ (8003368 <vcom_DeInit+0x28>)
 8003356:	f7ff ff6f 	bl	8003238 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800335a:	200f      	movs	r0, #15
 800335c:	f001 fb93 	bl	8004a86 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003360:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003362:	4618      	mov	r0, r3
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000040c 	.word	0x2000040c

0800336c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003378:	887b      	ldrh	r3, [r7, #2]
 800337a:	461a      	mov	r2, r3
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4804      	ldr	r0, [pc, #16]	@ (8003390 <vcom_Trace_DMA+0x24>)
 8003380:	f005 fa3e 	bl	8008800 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003384:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000040c 	.word	0x2000040c

08003394 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800339c:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <vcom_ReceiveInit+0x70>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80033a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033a6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80033b0:	4815      	ldr	r0, [pc, #84]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033b2:	f007 f936 	bl	800a622 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80033b6:	bf00      	nop
 80033b8:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c6:	d0f7      	beq.n	80033b8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80033c8:	bf00      	nop
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d8:	d1f7      	bne.n	80033ca <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80033da:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80033e8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80033ea:	4807      	ldr	r0, [pc, #28]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033ec:	f007 f974 	bl	800a6d8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80033f0:	2201      	movs	r2, #1
 80033f2:	4906      	ldr	r1, [pc, #24]	@ (800340c <vcom_ReceiveInit+0x78>)
 80033f4:	4804      	ldr	r0, [pc, #16]	@ (8003408 <vcom_ReceiveInit+0x74>)
 80033f6:	f005 f9ad 	bl	8008754 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80033fa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000594 	.word	0x20000594
 8003408:	2000040c 	.word	0x2000040c
 800340c:	2000058c 	.word	0x2000058c

08003410 <vcom_Resume>:

void vcom_Resume(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003414:	4808      	ldr	r0, [pc, #32]	@ (8003438 <vcom_Resume+0x28>)
 8003416:	f004 ffe4 	bl	80083e2 <HAL_UART_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003420:	f7fe fbc0 	bl	8001ba4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003424:	4805      	ldr	r0, [pc, #20]	@ (800343c <vcom_Resume+0x2c>)
 8003426:	f001 fb3d 	bl	8004aa4 <HAL_DMA_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003430:	f7fe fbb8 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000040c 	.word	0x2000040c
 800343c:	2000052c 	.word	0x2000052c

08003440 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a05      	ldr	r2, [pc, #20]	@ (8003464 <HAL_UART_TxCpltCallback+0x24>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d103      	bne.n	800345a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_UART_TxCpltCallback+0x28>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2000      	movs	r0, #0
 8003458:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40013800 	.word	0x40013800
 8003468:	20000590 	.word	0x20000590

0800346c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <HAL_UART_RxCpltCallback+0x44>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800347e:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <HAL_UART_RxCpltCallback+0x48>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_UART_RxCpltCallback+0x30>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003490:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_UART_RxCpltCallback+0x48>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2200      	movs	r2, #0
 8003496:	2101      	movs	r1, #1
 8003498:	4807      	ldr	r0, [pc, #28]	@ (80034b8 <HAL_UART_RxCpltCallback+0x4c>)
 800349a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800349c:	2201      	movs	r2, #1
 800349e:	4906      	ldr	r1, [pc, #24]	@ (80034b8 <HAL_UART_RxCpltCallback+0x4c>)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f005 f957 	bl	8008754 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40013800 	.word	0x40013800
 80034b4:	20000594 	.word	0x20000594
 80034b8:	2000058c 	.word	0x2000058c

080034bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034bc:	480d      	ldr	r0, [pc, #52]	@ (80034f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034c0:	f7ff fac0 	bl	8002a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c4:	480c      	ldr	r0, [pc, #48]	@ (80034f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034c6:	490d      	ldr	r1, [pc, #52]	@ (80034fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80034c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <LoopForever+0xe>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034cc:	e002      	b.n	80034d4 <LoopCopyDataInit>

080034ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d2:	3304      	adds	r3, #4

080034d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d8:	d3f9      	bcc.n	80034ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034da:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003508 <LoopForever+0x16>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e0:	e001      	b.n	80034e6 <LoopFillZerobss>

080034e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e4:	3204      	adds	r2, #4

080034e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e8:	d3fb      	bcc.n	80034e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034ea:	f01a f937 	bl	801d75c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ee:	f7fe faf0 	bl	8001ad2 <main>

080034f2 <LoopForever>:

LoopForever:
    b LoopForever
 80034f2:	e7fe      	b.n	80034f2 <LoopForever>
  ldr   r0, =_estack
 80034f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034fc:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8003500:	080209d8 	.word	0x080209d8
  ldr r2, =_sbss
 8003504:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8003508:	2000251c 	.word	0x2000251c

0800350c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800350c:	e7fe      	b.n	800350c <ADC_IRQHandler>

0800350e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003522:	2310      	movs	r3, #16
 8003524:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352e:	2303      	movs	r3, #3
 8003530:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	4619      	mov	r1, r3
 8003536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800353a:	f002 f8ff 	bl	800573c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800353e:	2320      	movs	r3, #32
 8003540:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	4619      	mov	r1, r3
 8003546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800354a:	f002 f8f7 	bl	800573c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800354e:	2200      	movs	r2, #0
 8003550:	2120      	movs	r1, #32
 8003552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003556:	f002 fb1f 	bl	8005b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800355a:	2200      	movs	r2, #0
 800355c:	2110      	movs	r1, #16
 800355e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003562:	f002 fb19 	bl	8005b98 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d83f      	bhi.n	8003600 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003580:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	08003599 	.word	0x08003599
 800358c:	080035b3 	.word	0x080035b3
 8003590:	080035cd 	.word	0x080035cd
 8003594:	080035e7 	.word	0x080035e7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	2110      	movs	r1, #16
 800359c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035a0:	f002 fafa 	bl	8005b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2120      	movs	r1, #32
 80035a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ac:	f002 faf4 	bl	8005b98 <HAL_GPIO_WritePin>
      break;      
 80035b0:	e027      	b.n	8003602 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80035b2:	2201      	movs	r2, #1
 80035b4:	2110      	movs	r1, #16
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ba:	f002 faed 	bl	8005b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80035be:	2200      	movs	r2, #0
 80035c0:	2120      	movs	r1, #32
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035c6:	f002 fae7 	bl	8005b98 <HAL_GPIO_WritePin>
      break;
 80035ca:	e01a      	b.n	8003602 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80035cc:	2201      	movs	r2, #1
 80035ce:	2110      	movs	r1, #16
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035d4:	f002 fae0 	bl	8005b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80035d8:	2201      	movs	r2, #1
 80035da:	2120      	movs	r1, #32
 80035dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035e0:	f002 fada 	bl	8005b98 <HAL_GPIO_WritePin>
      break;
 80035e4:	e00d      	b.n	8003602 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80035e6:	2200      	movs	r2, #0
 80035e8:	2110      	movs	r1, #16
 80035ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ee:	f002 fad3 	bl	8005b98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80035f2:	2201      	movs	r2, #1
 80035f4:	2120      	movs	r1, #32
 80035f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035fa:	f002 facd 	bl	8005b98 <HAL_GPIO_WritePin>
      break;
 80035fe:	e000      	b.n	8003602 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003600:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003610:	2302      	movs	r3, #2
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800362c:	2301      	movs	r3, #1
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003646:	230f      	movs	r3, #15
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e001      	b.n	8003650 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800364c:	2316      	movs	r3, #22
 800364e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003650:	68fb      	ldr	r3, [r7, #12]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003660:	4b04      	ldr	r3, [pc, #16]	@ (8003674 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a03      	ldr	r2, [pc, #12]	@ (8003674 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6053      	str	r3, [r2, #4]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	e0042000 	.word	0xe0042000

08003678 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a03      	ldr	r2, [pc, #12]	@ (8003690 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003682:	f023 0302 	bic.w	r3, r3, #2
 8003686:	6053      	str	r3, [r2, #4]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	e0042000 	.word	0xe0042000

08003694 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a03      	ldr	r2, [pc, #12]	@ (80036ac <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6053      	str	r3, [r2, #4]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	e0042000 	.word	0xe0042000

080036b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ba:	2003      	movs	r0, #3
 80036bc:	f001 f9b0 	bl	8004a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036c0:	f003 fb46 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a09      	ldr	r2, [pc, #36]	@ (80036ec <HAL_Init+0x3c>)
 80036c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036ca:	200f      	movs	r0, #15
 80036cc:	f7ff f826 	bl	800271c <HAL_InitTick>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	71fb      	strb	r3, [r7, #7]
 80036da:	e001      	b.n	80036e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036dc:	f7fe fddf 	bl	800229e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036e0:	79fb      	ldrb	r3, [r7, #7]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000

080036f0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_SuspendTick+0x18>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a03      	ldr	r2, [pc, #12]	@ (8003708 <HAL_SuspendTick+0x18>)
 80036fa:	f023 0302 	bic.w	r3, r3, #2
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <HAL_ResumeTick+0x18>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a03      	ldr	r2, [pc, #12]	@ (8003724 <HAL_ResumeTick+0x18>)
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	e000e010 	.word	0xe000e010

08003728 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800372c:	4b02      	ldr	r3, [pc, #8]	@ (8003738 <HAL_GetUIDw0+0x10>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	1fff7590 	.word	0x1fff7590

0800373c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <HAL_GetUIDw1+0x10>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	1fff7594 	.word	0x1fff7594

08003750 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003754:	4b02      	ldr	r3, [pc, #8]	@ (8003760 <HAL_GetUIDw2+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	1fff7598 	.word	0x1fff7598

08003764 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003768:	f7ff ff78 	bl	800365c <LL_DBGMCU_DisableDBGSleepMode>
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003774:	f7ff ff80 	bl	8003678 <LL_DBGMCU_DisableDBGStopMode>
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003780:	f7ff ff88 	bl	8003694 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}

08003788 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2107      	movs	r1, #7
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	401a      	ands	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2107      	movs	r1, #7
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	210f      	movs	r1, #15
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	f003 010f 	and.w	r1, r3, #15
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	43db      	mvns	r3, r3
 80038f8:	401a      	ands	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0219      	lsls	r1, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	400b      	ands	r3, r1
 8003902:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800392a:	f023 0317 	bic.w	r3, r3, #23
 800392e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003950:	f023 0317 	bic.w	r3, r3, #23
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6093      	str	r3, [r2, #8]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003976:	d101      	bne.n	800397c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003998:	f023 0317 	bic.w	r3, r3, #23
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039be:	f023 0317 	bic.w	r3, r3, #23
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <LL_ADC_IsEnabled+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_ADC_IsEnabled+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d101      	bne.n	8003a10 <LL_ADC_IsDisableOngoing+0x18>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <LL_ADC_IsDisableOngoing+0x1a>
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a2c:	f023 0317 	bic.w	r3, r3, #23
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	f023 0317 	bic.w	r3, r3, #23
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d101      	bne.n	8003a80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e19e      	b.n	8003dec <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd fcdf 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff44 	bl	8003962 <LL_ADC_IsInternalRegulatorEnabled>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d115      	bne.n	8003b0c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff18 	bl	800391a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aea:	4b99      	ldr	r3, [pc, #612]	@ (8003d50 <HAL_ADC_Init+0x2c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	4a98      	ldr	r2, [pc, #608]	@ (8003d54 <HAL_ADC_Init+0x2c8>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	3301      	adds	r3, #1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003afe:	e002      	b.n	8003b06 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff26 	bl	8003962 <LL_ADC_IsInternalRegulatorEnabled>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10d      	bne.n	8003b38 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b20:	f043 0210 	orr.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff93 	bl	8003a68 <LL_ADC_REG_IsConversionOngoing>
 8003b42:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 8144 	bne.w	8003dda <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8140 	bne.w	8003dda <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff30 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 80a7 	bne.w	8003cca <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b86:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e5b      	ldrb	r3, [r3, #25]
 8003b8c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b8e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7e9b      	ldrb	r3, [r3, #26]
 8003b94:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b96:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_ADC_Init+0x11a>
 8003ba0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ba4:	e000      	b.n	8003ba8 <HAL_ADC_Init+0x11c>
 8003ba6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ba8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003bae:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da04      	bge.n	8003bc2 <HAL_ADC_Init+0x136>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bc0:	e001      	b.n	8003bc6 <HAL_ADC_Init+0x13a>
 8003bc2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003bc6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003bce:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003bd0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d114      	bne.n	8003c0c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7e9b      	ldrb	r3, [r3, #26]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	e00b      	b.n	8003c0c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003c20:	4313      	orrs	r3, r2
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003c32:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	69b9      	ldr	r1, [r7, #24]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d111      	bne.n	8003c82 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c6a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003c70:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003c76:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_ADC_Init+0x2cc>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c9e:	d014      	beq.n	8003cca <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d00f      	beq.n	8003cca <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb2:	d00a      	beq.n	8003cca <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003cb4:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <HAL_ADC_Init+0x2d0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003cc4:	4925      	ldr	r1, [pc, #148]	@ (8003d5c <HAL_ADC_Init+0x2d0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	f7ff fd76 	bl	80037c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	491e      	ldr	r1, [pc, #120]	@ (8003d60 <HAL_ADC_Init+0x2d4>)
 8003ce6:	f7ff fd6e 	bl	80037c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f062 020f 	orn	r2, r2, #15
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d02:	e042      	b.n	8003d8a <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d0c:	d13d      	bne.n	8003d8a <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e00c      	b.n	8003d2e <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d006      	beq.n	8003d36 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d9ef      	bls.n	8003d14 <HAL_ADC_Init+0x288>
 8003d34:	e000      	b.n	8003d38 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003d36:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d112      	bne.n	8003d64 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f062 020f 	orn	r2, r2, #15
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d4e:	e01c      	b.n	8003d8a <HAL_ADC_Init+0x2fe>
 8003d50:	20000000 	.word	0x20000000
 8003d54:	053e2d63 	.word	0x053e2d63
 8003d58:	1ffffc02 	.word	0x1ffffc02
 8003d5c:	40012708 	.word	0x40012708
 8003d60:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	f003 031c 	and.w	r3, r3, #28
 8003d76:	f06f 020f 	mvn.w	r2, #15
 8003d7a:	fa02 f103 	lsl.w	r1, r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fd36 	bl	8003802 <LL_ADC_GetSamplingTimeCommonChannels>
 8003d96:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d10b      	bne.n	8003db8 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003db6:	e018      	b.n	8003dea <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	f023 0312 	bic.w	r3, r3, #18
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003dd8:	e007      	b.n	8003dea <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06a      	b.n	8003edc <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fabe 	bl	8004394 <ADC_ConversionStop>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fb82 	bl	800452c <ADC_Disable>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fd7f 	bl	8003940 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f240 329f 	movw	r2, #927	@ 0x39f
 8003e5e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee4 <HAL_ADC_DeInit+0xf0>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003e7e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0207 	bic.w	r2, r2, #7
 8003e8e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003eae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <HAL_ADC_DeInit+0xf4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_ADC_DeInit+0xf4>)
 8003eb4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003eb8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd faf4 	bl	80014a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	833e0200 	.word	0x833e0200
 8003ee8:	40012708 	.word	0x40012708

08003eec <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fdb5 	bl	8003a68 <LL_ADC_REG_IsConversionOngoing>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d132      	bne.n	8003f6a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Start+0x26>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e02e      	b.n	8003f70 <HAL_ADC_Start+0x84>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa80 	bl	8004420 <ADC_Enable>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11a      	bne.n	8003f60 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	221c      	movs	r2, #28
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fd5f 	bl	8003a1c <LL_ADC_REG_StartConversion>
 8003f5e:	e006      	b.n	8003f6e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003f68:	e001      	b.n	8003f6e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_Stop+0x16>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e022      	b.n	8003fd4 <HAL_ADC_Stop+0x5c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9fc 	bl	8004394 <ADC_ConversionStop>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d111      	bne.n	8003fca <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fac0 	bl	800452c <ADC_Disable>
 8003fac:	4603      	mov	r3, r0
 8003fae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d102      	bne.n	8003ff4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e010      	b.n	8004016 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e077      	b.n	8004102 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004012:	2304      	movs	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004016:	f7fe fb8b 	bl	8002730 <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800401c:	e021      	b.n	8004062 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d01d      	beq.n	8004062 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004026:	f7fe fb83 	bl	8002730 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <HAL_ADC_PollForConversion+0x60>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d112      	bne.n	8004062 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e04f      	b.n	8004102 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0d6      	beq.n	800401e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fbd6 	bl	8003832 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d031      	beq.n	80040f0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7e9b      	ldrb	r3, [r3, #26]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d12d      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d126      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fcde 	bl	8003a68 <LL_ADC_REG_IsConversionOngoing>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d112      	bne.n	80040d8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 020c 	bic.w	r2, r2, #12
 80040c0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80040d6:	e00b      	b.n	80040f0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e1b      	ldrb	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	220c      	movs	r2, #12
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
	...

08004124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x28>
 8004148:	2302      	movs	r3, #2
 800414a:	e110      	b.n	800436e <HAL_ADC_ConfigChannel+0x24a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fc85 	bl	8003a68 <LL_ADC_REG_IsConversionOngoing>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 80f7 	bne.w	8004354 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	f000 80b1 	beq.w	80042d2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004178:	d004      	beq.n	8004184 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800417e:	4a7e      	ldr	r2, [pc, #504]	@ (8004378 <HAL_ADC_ConfigChannel+0x254>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7ff fb82 	bl	8003898 <LL_ADC_REG_SetSequencerChAdd>
 8004194:	e041      	b.n	800421a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	210f      	movs	r1, #15
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0xa0>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	e011      	b.n	80041e8 <HAL_ADC_ConfigChannel+0xc4>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e003      	b.n	80041e8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	6849      	ldr	r1, [r1, #4]
 80041ec:	f001 011f 	and.w	r1, r1, #31
 80041f0:	408b      	lsls	r3, r1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d808      	bhi.n	800421a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f7ff fb1e 	bl	8003856 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	461a      	mov	r2, r3
 8004228:	f7ff fb5b 	bl	80038e2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f280 8097 	bge.w	8004364 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004236:	4851      	ldr	r0, [pc, #324]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 8004238:	f7ff fab8 	bl	80037ac <LL_ADC_GetCommonPathInternalCh>
 800423c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a4f      	ldr	r2, [pc, #316]	@ (8004380 <HAL_ADC_ConfigChannel+0x25c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d120      	bne.n	800428a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11b      	bne.n	800428a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004258:	4619      	mov	r1, r3
 800425a:	4848      	ldr	r0, [pc, #288]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 800425c:	f7ff fa94 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004260:	4b48      	ldr	r3, [pc, #288]	@ (8004384 <HAL_ADC_ConfigChannel+0x260>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	4a48      	ldr	r2, [pc, #288]	@ (8004388 <HAL_ADC_ConfigChannel+0x264>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800427a:	e002      	b.n	8004282 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3b01      	subs	r3, #1
 8004280:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f9      	bne.n	800427c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004288:	e06c      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <HAL_ADC_ConfigChannel+0x268>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10c      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x18a>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a4:	4619      	mov	r1, r3
 80042a6:	4835      	ldr	r0, [pc, #212]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 80042a8:	f7ff fa6e 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
 80042ac:	e05a      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a37      	ldr	r2, [pc, #220]	@ (8004390 <HAL_ADC_ConfigChannel+0x26c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d155      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d150      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042c8:	4619      	mov	r1, r3
 80042ca:	482c      	ldr	r0, [pc, #176]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 80042cc:	f7ff fa5c 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
 80042d0:	e048      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042da:	d004      	beq.n	80042e6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_ADC_ConfigChannel+0x254>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d107      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7ff fae3 	bl	80038bc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	da32      	bge.n	8004364 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042fe:	481f      	ldr	r0, [pc, #124]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 8004300:	f7ff fa54 	bl	80037ac <LL_ADC_GetCommonPathInternalCh>
 8004304:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <HAL_ADC_ConfigChannel+0x25c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d107      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004316:	4619      	mov	r1, r3
 8004318:	4818      	ldr	r0, [pc, #96]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 800431a:	f7ff fa35 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
 800431e:	e021      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_ADC_ConfigChannel+0x268>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d107      	bne.n	800433a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004330:	4619      	mov	r1, r3
 8004332:	4812      	ldr	r0, [pc, #72]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 8004334:	f7ff fa28 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
 8004338:	e014      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <HAL_ADC_ConfigChannel+0x26c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d10f      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800434a:	4619      	mov	r1, r3
 800434c:	480b      	ldr	r0, [pc, #44]	@ (800437c <HAL_ADC_ConfigChannel+0x258>)
 800434e:	f7ff fa1b 	bl	8003788 <LL_ADC_SetCommonPathInternalCh>
 8004352:	e007      	b.n	8004364 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800436c:	7ffb      	ldrb	r3, [r7, #31]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	80000004 	.word	0x80000004
 800437c:	40012708 	.word	0x40012708
 8004380:	b0001000 	.word	0xb0001000
 8004384:	20000000 	.word	0x20000000
 8004388:	053e2d63 	.word	0x053e2d63
 800438c:	b8004000 	.word	0xb8004000
 8004390:	b4002000 	.word	0xb4002000

08004394 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fb61 	bl	8003a68 <LL_ADC_REG_IsConversionOngoing>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d033      	beq.n	8004414 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fb21 	bl	80039f8 <LL_ADC_IsDisableOngoing>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fb3e 	bl	8003a42 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043c6:	f7fe f9b3 	bl	8002730 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80043cc:	e01b      	b.n	8004406 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043ce:	f7fe f9af 	bl	8002730 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d914      	bls.n	8004406 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f043 0210 	orr.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e007      	b.n	8004416 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1dc      	bne.n	80043ce <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff facf 	bl	80039d4 <LL_ADC_IsEnabled>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d169      	bne.n	8004510 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	4b36      	ldr	r3, [pc, #216]	@ (800451c <ADC_Enable+0xfc>)
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	f043 0210 	orr.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e055      	b.n	8004512 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fa8c 	bl	8003988 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004470:	482b      	ldr	r0, [pc, #172]	@ (8004520 <ADC_Enable+0x100>)
 8004472:	f7ff f99b 	bl	80037ac <LL_ADC_GetCommonPathInternalCh>
 8004476:	4603      	mov	r3, r0
 8004478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00f      	beq.n	80044a0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004480:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <ADC_Enable+0x104>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <ADC_Enable+0x108>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	3301      	adds	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004492:	e002      	b.n	800449a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3b01      	subs	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f9      	bne.n	8004494 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7e5b      	ldrb	r3, [r3, #25]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d033      	beq.n	8004510 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80044a8:	f7fe f942 	bl	8002730 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ae:	e028      	b.n	8004502 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fa8d 	bl	80039d4 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fa5f 	bl	8003988 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044ca:	f7fe f931 	bl	8002730 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d914      	bls.n	8004502 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d00d      	beq.n	8004502 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d1cf      	bne.n	80044b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	80000017 	.word	0x80000017
 8004520:	40012708 	.word	0x40012708
 8004524:	20000000 	.word	0x20000000
 8004528:	053e2d63 	.word	0x053e2d63

0800452c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fa5d 	bl	80039f8 <LL_ADC_IsDisableOngoing>
 800453e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fa45 	bl	80039d4 <LL_ADC_IsEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d047      	beq.n	80045e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d144      	bne.n	80045e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0305 	and.w	r3, r3, #5
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fa20 	bl	80039ae <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2203      	movs	r2, #3
 8004574:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004576:	f7fe f8db 	bl	8002730 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800457c:	e029      	b.n	80045d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e023      	b.n	80045e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800459a:	f7fe f8c9 	bl	8002730 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d914      	bls.n	80045d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e007      	b.n	80045e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1dc      	bne.n	800459a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <LL_ADC_SetCalibrationFactor>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045fa:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <LL_ADC_GetCalibrationFactor>:
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <LL_ADC_Enable>:
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800463e:	f023 0317 	bic.w	r3, r3, #23
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	609a      	str	r2, [r3, #8]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <LL_ADC_Disable>:
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004664:	f023 0317 	bic.w	r3, r3, #23
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <LL_ADC_IsEnabled>:
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <LL_ADC_IsEnabled+0x18>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_ADC_IsEnabled+0x1a>
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <LL_ADC_StartCalibration>:
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ae:	f023 0317 	bic.w	r3, r3, #23
 80046b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d8:	d101      	bne.n	80046de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ADCEx_Calibration_Start+0x1e>
 8004704:	2302      	movs	r3, #2
 8004706:	e0b9      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x192>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff0b 	bl	800452c <ADC_Disable>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ffab 	bl	800467a <LL_ADC_IsEnabled>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 809d 	bne.w	8004866 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004730:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004734:	f043 0202 	orr.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e02e      	b.n	80047c2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff98 	bl	800469e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800476e:	e014      	b.n	800479a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3301      	adds	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800477c:	d30d      	bcc.n	800479a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f023 0312 	bic.w	r3, r3, #18
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e070      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff ff90 	bl	80046c4 <LL_ADC_IsCalibrationOnGoing>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e2      	bne.n	8004770 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff2f 	bl	8004612 <LL_ADC_GetCalibrationFactor>
 80047b4:	4602      	mov	r2, r0
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	4413      	add	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	d9cd      	bls.n	8004764 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff ff29 	bl	800462e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ff01 	bl	80045ea <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff31 	bl	8004654 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047f2:	f7fd ff9d 	bl	8002730 <HAL_GetTick>
 80047f6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047f8:	e01c      	b.n	8004834 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047fa:	f7fd ff99 	bl	8002730 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d915      	bls.n	8004834 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff34 	bl	800467a <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	f043 0210 	orr.w	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e023      	b.n	800487c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff1e 	bl	800467a <LL_ADC_IsEnabled>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1da      	bne.n	80047fa <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	659a      	str	r2, [r3, #88]	@ 0x58
 8004864:	e005      	b.n	8004872 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048a0:	4013      	ands	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048b6:	4a04      	ldr	r2, [pc, #16]	@ (80048c8 <__NVIC_SetPriorityGrouping+0x44>)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	60d3      	str	r3, [r2, #12]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <__NVIC_GetPriorityGrouping+0x18>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	f003 0307 	and.w	r3, r3, #7
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	db0b      	blt.n	8004912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	f003 021f 	and.w	r2, r3, #31
 8004900:	4906      	ldr	r1, [pc, #24]	@ (800491c <__NVIC_EnableIRQ+0x34>)
 8004902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	2001      	movs	r0, #1
 800490a:	fa00 f202 	lsl.w	r2, r0, r2
 800490e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	e000e100 	.word	0xe000e100

08004920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db12      	blt.n	8004958 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	490a      	ldr	r1, [pc, #40]	@ (8004964 <__NVIC_DisableIRQ+0x44>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	3320      	adds	r3, #32
 8004948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800494c:	f3bf 8f4f 	dsb	sy
}
 8004950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004952:	f3bf 8f6f 	isb	sy
}
 8004956:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	@ (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	@ (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	@ 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ff2b 	bl	8004884 <__NVIC_SetPriorityGrouping>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a44:	f7ff ff42 	bl	80048cc <__NVIC_GetPriorityGrouping>
 8004a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff ffb4 	bl	80049bc <NVIC_EncodePriority>
 8004a54:	4602      	mov	r2, r0
 8004a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff83 	bl	8004968 <__NVIC_SetPriority>
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff35 	bl	80048e8 <__NVIC_EnableIRQ>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff43 	bl	8004920 <__NVIC_DisableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e08e      	b.n	8004bd4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b47      	ldr	r3, [pc, #284]	@ (8004bdc <HAL_DMA_Init+0x138>)
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d80f      	bhi.n	8004ae2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b45      	ldr	r3, [pc, #276]	@ (8004be0 <HAL_DMA_Init+0x13c>)
 8004aca:	4413      	add	r3, r2
 8004acc:	4a45      	ldr	r2, [pc, #276]	@ (8004be4 <HAL_DMA_Init+0x140>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	009a      	lsls	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a42      	ldr	r2, [pc, #264]	@ (8004be8 <HAL_DMA_Init+0x144>)
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ae0:	e00e      	b.n	8004b00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b40      	ldr	r3, [pc, #256]	@ (8004bec <HAL_DMA_Init+0x148>)
 8004aea:	4413      	add	r3, r2
 8004aec:	4a3d      	ldr	r2, [pc, #244]	@ (8004be4 <HAL_DMA_Init+0x140>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	009a      	lsls	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf0 <HAL_DMA_Init+0x14c>)
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb24 	bl	80051a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b60:	d102      	bne.n	8004b68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_DMA_Init+0x106>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d80c      	bhi.n	8004baa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb4d 	bl	8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	e008      	b.n	8004bbc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40020407 	.word	0x40020407
 8004be0:	bffdfff8 	.word	0xbffdfff8
 8004be4:	cccccccd 	.word	0xcccccccd
 8004be8:	40020000 	.word	0x40020000
 8004bec:	bffdfbf8 	.word	0xbffdfbf8
 8004bf0:	40020400 	.word	0x40020400

08004bf4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e07b      	b.n	8004cfe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d08 <HAL_DMA_DeInit+0x114>)
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d80f      	bhi.n	8004c42 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b38      	ldr	r3, [pc, #224]	@ (8004d0c <HAL_DMA_DeInit+0x118>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a38      	ldr	r2, [pc, #224]	@ (8004d10 <HAL_DMA_DeInit+0x11c>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <HAL_DMA_DeInit+0x120>)
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c40:	e00e      	b.n	8004c60 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <HAL_DMA_DeInit+0x124>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a30      	ldr	r2, [pc, #192]	@ (8004d10 <HAL_DMA_DeInit+0x11c>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <HAL_DMA_DeInit+0x128>)
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	f003 021c 	and.w	r2, r3, #28
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa8f 	bl	80051a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c92:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00f      	beq.n	8004cbc <HAL_DMA_DeInit+0xc8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d80b      	bhi.n	8004cbc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fac3 	bl	8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cba:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40020407 	.word	0x40020407
 8004d0c:	bffdfff8 	.word	0xbffdfff8
 8004d10:	cccccccd 	.word	0xcccccccd
 8004d14:	40020000 	.word	0x40020000
 8004d18:	bffdfbf8 	.word	0xbffdfbf8
 8004d1c:	40020400 	.word	0x40020400

08004d20 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_DMA_Start_IT+0x20>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e069      	b.n	8004e14 <HAL_DMA_Start_IT+0xf4>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d155      	bne.n	8004e00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f9d3 	bl	8005124 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 020e 	orr.w	r2, r2, #14
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e00f      	b.n	8004db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 020a 	orr.w	r2, r2, #10
 8004db6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e008      	b.n	8004e12 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2280      	movs	r2, #128	@ 0x80
 8004e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e04f      	b.n	8004ece <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d008      	beq.n	8004e4c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e040      	b.n	8004ece <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020e 	bic.w	r2, r2, #14
 8004e5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e80:	f003 021c 	and.w	r2, r3, #28
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004eba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d005      	beq.n	8004efc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	e047      	b.n	8004f8c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020e 	bic.w	r2, r2, #14
 8004f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f30:	f003 021c 	and.w	r2, r3, #28
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
    }
  }
  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	f003 031c 	and.w	r3, r3, #28
 8004fb8:	2204      	movs	r2, #4
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d027      	beq.n	8005014 <HAL_DMA_IRQHandler+0x7c>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d022      	beq.n	8005014 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d107      	bne.n	8004fec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0204 	bic.w	r2, r2, #4
 8004fea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	f003 021c 	and.w	r2, r3, #28
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8081 	beq.w	800510c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005012:	e07b      	b.n	800510c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	f003 031c 	and.w	r3, r3, #28
 800501c:	2202      	movs	r2, #2
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d03d      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x10c>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d038      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 020a 	bic.w	r2, r2, #10
 800504e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b2e      	ldr	r3, [pc, #184]	@ (8005118 <HAL_DMA_IRQHandler+0x180>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d909      	bls.n	8005078 <HAL_DMA_IRQHandler+0xe0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005068:	f003 031c 	and.w	r3, r3, #28
 800506c:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <HAL_DMA_IRQHandler+0x184>)
 800506e:	2102      	movs	r1, #2
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	6053      	str	r3, [r2, #4]
 8005076:	e008      	b.n	800508a <HAL_DMA_IRQHandler+0xf2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	f003 031c 	and.w	r3, r3, #28
 8005080:	4a27      	ldr	r2, [pc, #156]	@ (8005120 <HAL_DMA_IRQHandler+0x188>)
 8005082:	2102      	movs	r1, #2
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d038      	beq.n	800510c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80050a2:	e033      	b.n	800510c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	f003 031c 	and.w	r3, r3, #28
 80050ac:	2208      	movs	r2, #8
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02a      	beq.n	800510e <HAL_DMA_IRQHandler+0x176>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d025      	beq.n	800510e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 020e 	bic.w	r2, r2, #14
 80050d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f003 021c 	and.w	r2, r3, #28
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f202 	lsl.w	r2, r1, r2
 80050e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800510c:	bf00      	nop
 800510e:	bf00      	nop
}
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40020080 	.word	0x40020080
 800511c:	40020400 	.word	0x40020400
 8005120:	40020000 	.word	0x40020000

08005124 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800513a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	f003 021c 	and.w	r2, r3, #28
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f202 	lsl.w	r2, r1, r2
 8005160:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b10      	cmp	r3, #16
 8005170:	d108      	bne.n	8005184 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005182:	e007      	b.n	8005194 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
	...

080051a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d813      	bhi.n	80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051c0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3b08      	subs	r3, #8
 80051d0:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e011      	b.n	8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	009a      	lsls	r2, r3, #2
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80051e6:	4413      	add	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	3b08      	subs	r3, #8
 80051f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	3307      	adds	r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005204:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40020407 	.word	0x40020407
 8005224:	cccccccd 	.word	0xcccccccd
 8005228:	4002081c 	.word	0x4002081c
 800522c:	40020880 	.word	0x40020880

08005230 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005240:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a08      	ldr	r2, [pc, #32]	@ (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005254:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3b01      	subs	r3, #1
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2201      	movs	r2, #1
 8005260:	409a      	lsls	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	1000823f 	.word	0x1000823f
 8005274:	40020940 	.word	0x40020940

08005278 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005286:	4b1c      	ldr	r3, [pc, #112]	@ (80052f8 <HAL_FLASH_Program+0x80>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_FLASH_Program+0x1a>
 800528e:	2302      	movs	r3, #2
 8005290:	e02d      	b.n	80052ee <HAL_FLASH_Program+0x76>
 8005292:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_FLASH_Program+0x80>)
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005298:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <HAL_FLASH_Program+0x80>)
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800529e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052a2:	f000 f869 	bl	8005378 <FLASH_WaitForLastOperation>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11a      	bne.n	80052e6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80052b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ba:	68b8      	ldr	r0, [r7, #8]
 80052bc:	f000 f8be 	bl	800543c <FLASH_Program_DoubleWord>
 80052c0:	e004      	b.n	80052cc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	68b8      	ldr	r0, [r7, #8]
 80052c8:	f000 f8de 	bl	8005488 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052d0:	f000 f852 	bl	8005378 <FLASH_WaitForLastOperation>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80052d8:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <HAL_FLASH_Program+0x84>)
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	43db      	mvns	r3, r3
 80052e0:	4906      	ldr	r1, [pc, #24]	@ (80052fc <HAL_FLASH_Program+0x84>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052e6:	4b04      	ldr	r3, [pc, #16]	@ (80052f8 <HAL_FLASH_Program+0x80>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000598 	.word	0x20000598
 80052fc:	58004000 	.word	0x58004000

08005300 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_FLASH_Unlock+0x38>)
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	da0b      	bge.n	800532a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005312:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <HAL_FLASH_Unlock+0x38>)
 8005314:	4a09      	ldr	r2, [pc, #36]	@ (800533c <HAL_FLASH_Unlock+0x3c>)
 8005316:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005318:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <HAL_FLASH_Unlock+0x38>)
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_FLASH_Unlock+0x40>)
 800531c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800531e:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <HAL_FLASH_Unlock+0x38>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	da01      	bge.n	800532a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800532a:	79fb      	ldrb	r3, [r7, #7]
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	58004000 	.word	0x58004000
 800533c:	45670123 	.word	0x45670123
 8005340:	cdef89ab 	.word	0xcdef89ab

08005344 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800534e:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <HAL_FLASH_Lock+0x30>)
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <HAL_FLASH_Lock+0x30>)
 8005354:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005358:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_FLASH_Lock+0x30>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	db01      	blt.n	8005366 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005366:	79fb      	ldrb	r3, [r7, #7]
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	58004000 	.word	0x58004000

08005378 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005380:	f7fd f9d6 	bl	8002730 <HAL_GetTick>
 8005384:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005386:	e009      	b.n	800539c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005388:	f7fd f9d2 	bl	8002730 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d801      	bhi.n	800539c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e046      	b.n	800542a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800539c:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d0ee      	beq.n	8005388 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80053aa:	4b22      	ldr	r3, [pc, #136]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 80053bc:	2201      	movs	r2, #1
 80053be:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80053c6:	4013      	ands	r3, r2
 80053c8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d307      	bcc.n	80053e2 <FLASH_WaitForLastOperation+0x6a>
 80053d2:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80053dc:	4915      	ldr	r1, [pc, #84]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	618b      	str	r3, [r1, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <FLASH_WaitForLastOperation+0x7e>
 80053ec:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80053f4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80053fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005438 <FLASH_WaitForLastOperation+0xc0>)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e011      	b.n	800542a <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005406:	f7fd f993 	bl	8002730 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d801      	bhi.n	800541a <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e007      	b.n	800542a <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <FLASH_WaitForLastOperation+0xbc>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005426:	d0ee      	beq.n	8005406 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	58004000 	.word	0x58004000
 8005438:	20000598 	.word	0x20000598

0800543c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <FLASH_Program_DoubleWord+0x48>)
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <FLASH_Program_DoubleWord+0x48>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800545a:	f3bf 8f6f 	isb	sy
}
 800545e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	000a      	movs	r2, r1
 800546e:	2300      	movs	r3, #0
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	3104      	adds	r1, #4
 8005474:	4613      	mov	r3, r2
 8005476:	600b      	str	r3, [r1, #0]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	58004000 	.word	0x58004000

08005488 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	@ 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005492:	2340      	movs	r3, #64	@ 0x40
 8005494:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800549e:	4b18      	ldr	r3, [pc, #96]	@ (8005500 <FLASH_Program_Fast+0x78>)
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <FLASH_Program_Fast+0x78>)
 80054a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054aa:	f3ef 8310 	mrs	r3, PRIMASK
 80054ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80054b0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80054b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80054b4:	b672      	cpsid	i
}
 80054b6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	3304      	adds	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	3304      	adds	r3, #4
 80054ca:	617b      	str	r3, [r7, #20]
    row_index--;
 80054cc:	7ffb      	ldrb	r3, [r7, #31]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80054d2:	7ffb      	ldrb	r3, [r7, #31]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ef      	bne.n	80054b8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80054d8:	bf00      	nop
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <FLASH_Program_Fast+0x78>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e6:	d0f8      	beq.n	80054da <FLASH_Program_Fast+0x52>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f383 8810 	msr	PRIMASK, r3
}
 80054f2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80054f4:	bf00      	nop
 80054f6:	3724      	adds	r7, #36	@ 0x24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	58004000 	.word	0x58004000

08005504 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800550e:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_FLASHEx_Erase+0xac>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_FLASHEx_Erase+0x16>
 8005516:	2302      	movs	r3, #2
 8005518:	e046      	b.n	80055a8 <HAL_FLASHEx_Erase+0xa4>
 800551a:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <HAL_FLASHEx_Erase+0xac>)
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005520:	4b23      	ldr	r3, [pc, #140]	@ (80055b0 <HAL_FLASHEx_Erase+0xac>)
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800552a:	f7ff ff25 	bl	8005378 <FLASH_WaitForLastOperation>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d133      	bne.n	80055a0 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d108      	bne.n	8005552 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005540:	f000 f880 	bl	8005644 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005544:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005548:	f7ff ff16 	bl	8005378 <FLASH_WaitForLastOperation>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	e024      	b.n	800559c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	e012      	b.n	8005588 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f000 f87e 	bl	8005664 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800556c:	f7ff ff04 	bl	8005378 <FLASH_WaitForLastOperation>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	601a      	str	r2, [r3, #0]
          break;
 8005580:	e00a      	b.n	8005598 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3301      	adds	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4413      	add	r3, r2
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d3e4      	bcc.n	8005562 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005598:	f000 f8c0 	bl	800571c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800559c:	f000 f87a 	bl	8005694 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_FLASHEx_Erase+0xac>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]

  return status;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000598 	.word	0x20000598

080055b4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055bc:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_FLASHEx_Erase_IT+0x14>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e034      	b.n	8005632 <HAL_FLASHEx_Erase_IT+0x7e>
 80055c8:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055ce:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 80055da:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055e0:	f7ff feca 	bl	8005378 <FLASH_WaitForLastOperation>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80055ee:	4b13      	ldr	r3, [pc, #76]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e01c      	b.n	8005630 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_FLASHEx_Erase_IT+0x8c>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4a11      	ldr	r2, [pc, #68]	@ (8005640 <HAL_FLASHEx_Erase_IT+0x8c>)
 80055fc:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8005600:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b04      	cmp	r3, #4
 8005608:	d105      	bne.n	8005616 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 800560c:	2200      	movs	r2, #0
 800560e:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005610:	f000 f818 	bl	8005644 <FLASH_MassErase>
 8005614:	e00c      	b.n	8005630 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	4a08      	ldr	r2, [pc, #32]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 800561c:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a06      	ldr	r2, [pc, #24]	@ (800563c <HAL_FLASHEx_Erase_IT+0x88>)
 8005624:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f81a 	bl	8005664 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000598 	.word	0x20000598
 8005640:	58004000 	.word	0x58004000

08005644 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005648:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <FLASH_MassErase+0x1c>)
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	4a04      	ldr	r2, [pc, #16]	@ (8005660 <FLASH_MassErase+0x1c>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005652:	f043 0304 	orr.w	r3, r3, #4
 8005656:	6153      	str	r3, [r2, #20]
#endif
}
 8005658:	bf00      	nop
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	58004000 	.word	0x58004000

08005664 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800566c:	4b08      	ldr	r3, [pc, #32]	@ (8005690 <FLASH_PageErase+0x2c>)
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4313      	orrs	r3, r2
 800567a:	4a05      	ldr	r2, [pc, #20]	@ (8005690 <FLASH_PageErase+0x2c>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	6153      	str	r3, [r2, #20]
#endif
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	58004000 	.word	0x58004000

08005694 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005698:	4b1f      	ldr	r3, [pc, #124]	@ (8005718 <FLASH_FlushCaches+0x84>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d117      	bne.n	80056d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80056a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a18      	ldr	r2, [pc, #96]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a15      	ldr	r2, [pc, #84]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056d2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80056d4:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d117      	bne.n	8005710 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80056e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80056ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a09      	ldr	r2, [pc, #36]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a06      	ldr	r2, [pc, #24]	@ (8005718 <FLASH_FlushCaches+0x84>)
 80056fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005702:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005704:	4b04      	ldr	r3, [pc, #16]	@ (8005718 <FLASH_FlushCaches+0x84>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a03      	ldr	r2, [pc, #12]	@ (8005718 <FLASH_FlushCaches+0x84>)
 800570a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800570e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	58004000 	.word	0x58004000

0800571c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <FLASH_AcknowledgePageErase+0x1c>)
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	4a04      	ldr	r2, [pc, #16]	@ (8005738 <FLASH_AcknowledgePageErase+0x1c>)
 8005726:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	6153      	str	r3, [r2, #20]
#endif
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	58004000 	.word	0x58004000

0800573c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800574a:	e140      	b.n	80059ce <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	2101      	movs	r1, #1
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8132 	beq.w	80059c8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d005      	beq.n	800577c <HAL_GPIO_Init+0x40>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d130      	bne.n	80057de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2203      	movs	r2, #3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057b2:	2201      	movs	r2, #1
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4013      	ands	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 0201 	and.w	r2, r3, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d017      	beq.n	800581a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	2203      	movs	r2, #3
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d123      	bne.n	800586e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	08da      	lsrs	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3208      	adds	r2, #8
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	220f      	movs	r2, #15
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	6939      	ldr	r1, [r7, #16]
 800586a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	2203      	movs	r2, #3
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 808c 	beq.w	80059c8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80058b0:	4a4e      	ldr	r2, [pc, #312]	@ (80059ec <HAL_GPIO_Init+0x2b0>)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	3302      	adds	r3, #2
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	2207      	movs	r2, #7
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058da:	d00d      	beq.n	80058f8 <HAL_GPIO_Init+0x1bc>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a44      	ldr	r2, [pc, #272]	@ (80059f0 <HAL_GPIO_Init+0x2b4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <HAL_GPIO_Init+0x1b8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a43      	ldr	r2, [pc, #268]	@ (80059f4 <HAL_GPIO_Init+0x2b8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d101      	bne.n	80058f0 <HAL_GPIO_Init+0x1b4>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e004      	b.n	80058fa <HAL_GPIO_Init+0x1be>
 80058f0:	2307      	movs	r3, #7
 80058f2:	e002      	b.n	80058fa <HAL_GPIO_Init+0x1be>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_GPIO_Init+0x1be>
 80058f8:	2300      	movs	r3, #0
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	f002 0203 	and.w	r2, r2, #3
 8005900:	0092      	lsls	r2, r2, #2
 8005902:	4093      	lsls	r3, r2
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800590a:	4938      	ldr	r1, [pc, #224]	@ (80059ec <HAL_GPIO_Init+0x2b0>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	3302      	adds	r3, #2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005918:	4b37      	ldr	r3, [pc, #220]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	43db      	mvns	r3, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800593c:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005942:	4b2d      	ldr	r3, [pc, #180]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	43db      	mvns	r3, r3
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005966:	4a24      	ldr	r2, [pc, #144]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800596c:	4b22      	ldr	r3, [pc, #136]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005972:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005992:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800599a:	4b17      	ldr	r3, [pc, #92]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 800599c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80059c0:	4a0d      	ldr	r2, [pc, #52]	@ (80059f8 <HAL_GPIO_Init+0x2bc>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f aeb7 	bne.w	800574c <HAL_GPIO_Init+0x10>
  }
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	48000400 	.word	0x48000400
 80059f4:	48000800 	.word	0x48000800
 80059f8:	58000800 	.word	0x58000800

080059fc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a0a:	e0af      	b.n	8005b6c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a2 	beq.w	8005b66 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005a22:	4a59      	ldr	r2, [pc, #356]	@ (8005b88 <HAL_GPIO_DeInit+0x18c>)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	3302      	adds	r3, #2
 8005a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	2207      	movs	r2, #7
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4013      	ands	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a4a:	d00d      	beq.n	8005a68 <HAL_GPIO_DeInit+0x6c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8005b8c <HAL_GPIO_DeInit+0x190>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <HAL_GPIO_DeInit+0x68>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a4e      	ldr	r2, [pc, #312]	@ (8005b90 <HAL_GPIO_DeInit+0x194>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_GPIO_DeInit+0x64>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e004      	b.n	8005a6a <HAL_GPIO_DeInit+0x6e>
 8005a60:	2307      	movs	r3, #7
 8005a62:	e002      	b.n	8005a6a <HAL_GPIO_DeInit+0x6e>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_GPIO_DeInit+0x6e>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f002 0203 	and.w	r2, r2, #3
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	4093      	lsls	r3, r2
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d136      	bne.n	8005ae8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005a7a:	4b46      	ldr	r3, [pc, #280]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005a7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	43db      	mvns	r3, r3
 8005a84:	4943      	ldr	r1, [pc, #268]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005a8c:	4b41      	ldr	r3, [pc, #260]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005a8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	493f      	ldr	r1, [pc, #252]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	493b      	ldr	r1, [pc, #236]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005aac:	4b39      	ldr	r3, [pc, #228]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	4937      	ldr	r1, [pc, #220]	@ (8005b94 <HAL_GPIO_DeInit+0x198>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	2207      	movs	r2, #7
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005aca:	4a2f      	ldr	r2, [pc, #188]	@ (8005b88 <HAL_GPIO_DeInit+0x18c>)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	43da      	mvns	r2, r3
 8005ada:	482b      	ldr	r0, [pc, #172]	@ (8005b88 <HAL_GPIO_DeInit+0x18c>)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2103      	movs	r1, #3
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	220f      	movs	r2, #15
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	08d2      	lsrs	r2, r2, #3
 8005b1c:	4019      	ands	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3208      	adds	r2, #8
 8005b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2103      	movs	r1, #3
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	2101      	movs	r1, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2103      	movs	r1, #3
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	401a      	ands	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af49 	bne.w	8005a0c <HAL_GPIO_DeInit+0x10>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	48000400 	.word	0x48000400
 8005b90:	48000800 	.word	0x48000800
 8005b94:	58000800 	.word	0x58000800

08005b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bb4:	e002      	b.n	8005bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bb6:	887a      	ldrh	r2, [r7, #2]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005bd2:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bde:	4a05      	ldr	r2, [pc, #20]	@ (8005bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f005 f81e 	bl	800ac28 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	58000800 	.word	0x58000800

08005bf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfc:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a03      	ldr	r2, [pc, #12]	@ (8005c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c06:	6013      	str	r3, [r2, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	58000400 	.word	0x58000400

08005c14 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c32:	d10d      	bne.n	8005c50 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005c34:	f000 f83c 	bl	8005cb0 <HAL_PWREx_DisableLowPowerRunMode>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005c3e:	e015      	b.n	8005c6c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005c40:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005c4c:	f000 f822 	bl	8005c94 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	4a08      	ldr	r2, [pc, #32]	@ (8005c78 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005c56:	f023 0304 	bic.w	r3, r3, #4
 8005c5a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005c62:	bf30      	wfi
 8005c64:	e002      	b.n	8005c6c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005c66:	bf40      	sev
    __WFE();
 8005c68:	bf20      	wfe
    __WFE();
 8005c6a:	bf20      	wfe
  }
}
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	58000400 	.word	0x58000400
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005c80:	4b03      	ldr	r3, [pc, #12]	@ (8005c90 <HAL_PWREx_GetVoltageRange+0x14>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	58000400 	.word	0x58000400

08005c94 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005c98:	4b04      	ldr	r3, [pc, #16]	@ (8005cac <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a03      	ldr	r2, [pc, #12]	@ (8005cac <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	58000400 	.word	0x58000400

08005cb0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005cb6:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2232      	movs	r2, #50	@ 0x32
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	0c9b      	lsrs	r3, r3, #18
 8005cd4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005cd6:	e002      	b.n	8005cde <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005cde:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cea:	d102      	bne.n	8005cf2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f2      	bne.n	8005cd8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cfe:	d101      	bne.n	8005d04 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e000      	b.n	8005d06 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	58000400 	.word	0x58000400
 8005d14:	20000000 	.word	0x20000000
 8005d18:	431bde83 	.word	0x431bde83

08005d1c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005d26:	4b10      	ldr	r3, [pc, #64]	@ (8005d68 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d68 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d6c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005d48:	bf30      	wfi
 8005d4a:	e002      	b.n	8005d52 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005d4c:	bf40      	sev
    __WFE();
 8005d4e:	bf20      	wfe
    __WFE();
 8005d50:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005d52:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	4a05      	ldr	r2, [pc, #20]	@ (8005d6c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	6113      	str	r3, [r2, #16]
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	58000400 	.word	0x58000400
 8005d6c:	e000ed00 	.word	0xe000ed00

08005d70 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005d74:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d80:	d101      	bne.n	8005d86 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr
 8005d90:	58000400 	.word	0x58000400

08005d94 <LL_RCC_HSE_EnableTcxo>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005da6:	6013      	str	r3, [r2, #0]
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <LL_RCC_HSE_DisableTcxo>:
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dc2:	6013      	str	r3, [r2, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dde:	d101      	bne.n	8005de4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr

08005dee <LL_RCC_HSE_Enable>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bc80      	pop	{r7}
 8005e08:	4770      	bx	lr

08005e0a <LL_RCC_HSE_Disable>:
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_HSE_IsReady>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e38:	d101      	bne.n	8005e3e <LL_RCC_HSE_IsReady+0x18>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <LL_RCC_HSE_IsReady+0x1a>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_HSI_Enable>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <LL_RCC_HSI_Disable>:
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_HSI_IsReady>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e92:	d101      	bne.n	8005e98 <LL_RCC_HSI_IsReady+0x18>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <LL_RCC_HSI_IsReady+0x1a>
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	604b      	str	r3, [r1, #4]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <LL_RCC_LSE_IsReady>:
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d101      	bne.n	8005ee2 <LL_RCC_LSE_IsReady+0x18>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <LL_RCC_LSE_IsReady+0x1a>
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <LL_RCC_LSI_Enable>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <LL_RCC_LSI_Disable>:
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr

08005f2c <LL_RCC_LSI_IsReady>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d101      	bne.n	8005f44 <LL_RCC_LSI_IsReady+0x18>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <LL_RCC_LSI_IsReady+0x1a>
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <LL_RCC_MSI_Enable>:
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6013      	str	r3, [r2, #0]
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_MSI_Disable>:
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_MSI_IsReady>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d101      	bne.n	8005f9c <LL_RCC_MSI_IsReady+0x16>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <LL_RCC_MSI_IsReady+0x18>
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr

08005fa6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d101      	bne.n	8005fbc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_MSI_GetRange>:
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fe8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <LL_RCC_SetSysClkSource>:
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4313      	orrs	r3, r2
 8006036:	608b      	str	r3, [r1, #8]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <LL_RCC_GetSysClkSource>:
{
 8006042:	b480      	push	{r7}
 8006044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 030c 	and.w	r3, r3, #12
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <LL_RCC_SetAHBPrescaler>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800606a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4313      	orrs	r3, r2
 8006072:	608b      	str	r3, [r1, #8]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr

0800607e <LL_RCC_SetAHB3Prescaler>:
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800608e:	f023 020f 	bic.w	r2, r3, #15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	091b      	lsrs	r3, r3, #4
 8006096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr

080060aa <LL_RCC_SetAPB1Prescaler>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <LL_RCC_SetAPB2Prescaler>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_GetAHBPrescaler>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006104:	4618      	mov	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <LL_RCC_GetAHB3Prescaler>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006114:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800611e:	4618      	mov	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <LL_RCC_GetAPB1Prescaler>:
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <LL_RCC_GetAPB2Prescaler>:
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800614a:	4618      	mov	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	bc80      	pop	{r7}
 8006150:	4770      	bx	lr

08006152 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006152:	b480      	push	{r7}
 8006154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006164:	6013      	str	r3, [r2, #0]
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800616e:	b480      	push	{r7}
 8006170:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800617c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006180:	6013      	str	r3, [r2, #0]
}
 8006182:	bf00      	nop
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800619c:	d101      	bne.n	80061a2 <LL_RCC_PLL_IsReady+0x18>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <LL_RCC_PLL_IsReady+0x1a>
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr

080061da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0303 	and.w	r3, r3, #3
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006218:	d101      	bne.n	800621e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006230:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d101      	bne.n	8006242 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800625e:	d101      	bne.n	8006264 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800626e:	b480      	push	{r7}
 8006270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800627c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006280:	d101      	bne.n	8006286 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e38b      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a2:	f7ff fece 	bl	8006042 <LL_RCC_GetSysClkSource>
 80062a6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062a8:	f7ff ffa2 	bl	80061f0 <LL_RCC_PLL_GetMainSource>
 80062ac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80c9 	beq.w	800644e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_RCC_OscConfig+0x3e>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	d17b      	bne.n	80063c0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d178      	bne.n	80063c0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062ce:	f7ff fe5a 	bl	8005f86 <LL_RCC_MSI_IsReady>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_OscConfig+0x54>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e36a      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_OscConfig+0x72>
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006300:	e006      	b.n	8006310 <HAL_RCC_OscConfig+0x80>
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006310:	4293      	cmp	r3, r2
 8006312:	d222      	bcs.n	800635a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fd51 	bl	8006dc0 <RCC_SetFlashLatencyFromMSIRange>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e348      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006332:	f043 0308 	orr.w	r3, r3, #8
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634a:	4313      	orrs	r3, r2
 800634c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fe4e 	bl	8005ff4 <LL_RCC_MSI_SetCalibTrimming>
 8006358:	e021      	b.n	800639e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800635a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006364:	f043 0308 	orr.w	r3, r3, #8
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fe35 	bl	8005ff4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fd16 	bl	8006dc0 <RCC_SetFlashLatencyFromMSIRange>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e30d      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800639e:	f000 fcd7 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 80063a2:	4603      	mov	r3, r0
 80063a4:	4aa1      	ldr	r2, [pc, #644]	@ (800662c <HAL_RCC_OscConfig+0x39c>)
 80063a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063a8:	4ba1      	ldr	r3, [pc, #644]	@ (8006630 <HAL_RCC_OscConfig+0x3a0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fc f9b5 	bl	800271c <HAL_InitTick>
 80063b2:	4603      	mov	r3, r0
 80063b4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d047      	beq.n	800644c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80063bc:	7cfb      	ldrb	r3, [r7, #19]
 80063be:	e2fc      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02c      	beq.n	8006422 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063c8:	f7ff fdc1 	bl	8005f4e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063cc:	f7fc f9b0 	bl	8002730 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063d4:	f7fc f9ac 	bl	8002730 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e2e9      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80063e6:	f7ff fdce 	bl	8005f86 <LL_RCC_MSI_IsReady>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f1      	beq.n	80063d4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fa:	f043 0308 	orr.w	r3, r3, #8
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fdea 	bl	8005ff4 <LL_RCC_MSI_SetCalibTrimming>
 8006420:	e015      	b.n	800644e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006422:	f7ff fda2 	bl	8005f6a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006426:	f7fc f983 	bl	8002730 <HAL_GetTick>
 800642a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800642e:	f7fc f97f 	bl	8002730 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e2bc      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006440:	f7ff fda1 	bl	8005f86 <LL_RCC_MSI_IsReady>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f1      	bne.n	800642e <HAL_RCC_OscConfig+0x19e>
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800644c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d05f      	beq.n	800651a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d005      	beq.n	800646c <HAL_RCC_OscConfig+0x1dc>
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0c      	cmp	r3, #12
 8006464:	d10d      	bne.n	8006482 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d10a      	bne.n	8006482 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800646c:	f7ff fcdb 	bl	8005e26 <LL_RCC_HSE_IsReady>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d050      	beq.n	8006518 <HAL_RCC_OscConfig+0x288>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d14c      	bne.n	8006518 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e29b      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a0:	d102      	bne.n	80064a8 <HAL_RCC_OscConfig+0x218>
 80064a2:	f7ff fca4 	bl	8005dee <LL_RCC_HSE_Enable>
 80064a6:	e00d      	b.n	80064c4 <HAL_RCC_OscConfig+0x234>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80064b0:	d104      	bne.n	80064bc <HAL_RCC_OscConfig+0x22c>
 80064b2:	f7ff fc6f 	bl	8005d94 <LL_RCC_HSE_EnableTcxo>
 80064b6:	f7ff fc9a 	bl	8005dee <LL_RCC_HSE_Enable>
 80064ba:	e003      	b.n	80064c4 <HAL_RCC_OscConfig+0x234>
 80064bc:	f7ff fca5 	bl	8005e0a <LL_RCC_HSE_Disable>
 80064c0:	f7ff fc76 	bl	8005db0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d012      	beq.n	80064f2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fc f930 	bl	8002730 <HAL_GetTick>
 80064d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fc f92c 	bl	8002730 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	@ 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e269      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80064e6:	f7ff fc9e 	bl	8005e26 <LL_RCC_HSE_IsReady>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f1      	beq.n	80064d4 <HAL_RCC_OscConfig+0x244>
 80064f0:	e013      	b.n	800651a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fc f91d 	bl	8002730 <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fa:	f7fc f919 	bl	8002730 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b64      	cmp	r3, #100	@ 0x64
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e256      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800650c:	f7ff fc8b 	bl	8005e26 <LL_RCC_HSE_IsReady>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f1      	bne.n	80064fa <HAL_RCC_OscConfig+0x26a>
 8006516:	e000      	b.n	800651a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006518:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d04b      	beq.n	80065be <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d005      	beq.n	8006538 <HAL_RCC_OscConfig+0x2a8>
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b0c      	cmp	r3, #12
 8006530:	d113      	bne.n	800655a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d110      	bne.n	800655a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006538:	f7ff fca2 	bl	8005e80 <LL_RCC_HSI_IsReady>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_RCC_OscConfig+0x2be>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e235      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fca5 	bl	8005ea2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006558:	e031      	b.n	80065be <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d019      	beq.n	8006596 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006562:	f7ff fc71 	bl	8005e48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fc f8e3 	bl	8002730 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800656e:	f7fc f8df 	bl	8002730 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e21c      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006580:	f7ff fc7e 	bl	8005e80 <LL_RCC_HSI_IsReady>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f1      	beq.n	800656e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fc87 	bl	8005ea2 <LL_RCC_HSI_SetCalibTrimming>
 8006594:	e013      	b.n	80065be <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006596:	f7ff fc65 	bl	8005e64 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fc f8c9 	bl	8002730 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a2:	f7fc f8c5 	bl	8002730 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e202      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80065b4:	f7ff fc64 	bl	8005e80 <LL_RCC_HSI_IsReady>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f1      	bne.n	80065a2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06f      	beq.n	80066aa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d057      	beq.n	8006682 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80065d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065da:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d036      	beq.n	8006658 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d006      	beq.n	8006602 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e1db      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d018      	beq.n	800663e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800660c:	f7ff fc7e 	bl	8005f0c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006610:	f7fc f88e 	bl	8002730 <HAL_GetTick>
 8006614:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006616:	e00d      	b.n	8006634 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fc f88a 	bl	8002730 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b11      	cmp	r3, #17
 8006624:	d906      	bls.n	8006634 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e1c7      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
 800662a:	bf00      	nop
 800662c:	20000000 	.word	0x20000000
 8006630:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006634:	f7ff fc7a 	bl	8005f2c <LL_RCC_LSI_IsReady>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ec      	bne.n	8006618 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006646:	f023 0210 	bic.w	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006658:	f7ff fc48 	bl	8005eec <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665c:	f7fc f868 	bl	8002730 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006664:	f7fc f864 	bl	8002730 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b11      	cmp	r3, #17
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e1a1      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006676:	f7ff fc59 	bl	8005f2c <LL_RCC_LSI_IsReady>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f1      	beq.n	8006664 <HAL_RCC_OscConfig+0x3d4>
 8006680:	e013      	b.n	80066aa <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006682:	f7ff fc43 	bl	8005f0c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006686:	f7fc f853 	bl	8002730 <HAL_GetTick>
 800668a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668e:	f7fc f84f 	bl	8002730 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b11      	cmp	r3, #17
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e18c      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80066a0:	f7ff fc44 	bl	8005f2c <LL_RCC_LSI_IsReady>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f1      	bne.n	800668e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80d8 	beq.w	8006868 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80066b8:	f7ff fb5a 	bl	8005d70 <LL_PWR_IsEnabledBkUpAccess>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d113      	bne.n	80066ea <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066c2:	f7ff fa99 	bl	8005bf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c6:	f7fc f833 	bl	8002730 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ce:	f7fc f82f 	bl	8002730 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e16c      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80066e0:	f7ff fb46 	bl	8005d70 <LL_PWR_IsEnabledBkUpAccess>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f1      	beq.n	80066ce <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d07b      	beq.n	80067ea <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b85      	cmp	r3, #133	@ 0x85
 80066f8:	d003      	beq.n	8006702 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d109      	bne.n	8006716 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800670e:	f043 0304 	orr.w	r3, r3, #4
 8006712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006716:	f7fc f80b 	bl	8002730 <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006730:	e00a      	b.n	8006748 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fb fffd 	bl	8002730 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e138      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006748:	f7ff fbbf 	bl	8005eca <LL_RCC_LSE_IsReady>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ef      	beq.n	8006732 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b81      	cmp	r3, #129	@ 0x81
 8006758:	d003      	beq.n	8006762 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b85      	cmp	r3, #133	@ 0x85
 8006760:	d121      	bne.n	80067a6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb ffe5 	bl	8002730 <HAL_GetTick>
 8006766:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800677c:	e00a      	b.n	8006794 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677e:	f7fb ffd7 	bl	8002730 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678c:	4293      	cmp	r3, r2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e112      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ec      	beq.n	800677e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80067a4:	e060      	b.n	8006868 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fb ffc3 	bl	8002730 <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067c0:	e00a      	b.n	80067d8 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c2:	f7fb ffb5 	bl	8002730 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e0f0      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1ec      	bne.n	80067c2 <HAL_RCC_OscConfig+0x532>
 80067e8:	e03e      	b.n	8006868 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ea:	f7fb ffa1 	bl	8002730 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006804:	e00a      	b.n	800681c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fb ff93 	bl	8002730 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0ce      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800681c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ec      	bne.n	8006806 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fb ff80 	bl	8002730 <HAL_GetTick>
 8006830:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006846:	e00a      	b.n	800685e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006848:	f7fb ff72 	bl	8002730 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e0ad      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800685e:	f7ff fb34 	bl	8005eca <LL_RCC_LSE_IsReady>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ef      	bne.n	8006848 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80a3 	beq.w	80069b8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d076      	beq.n	8006966 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	2b02      	cmp	r3, #2
 800687e:	d14b      	bne.n	8006918 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006880:	f7ff fc75 	bl	800616e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fb ff54 	bl	8002730 <HAL_GetTick>
 8006888:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fb ff50 	bl	8002730 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b0a      	cmp	r3, #10
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e08d      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800689e:	f7ff fc74 	bl	800618a <LL_RCC_PLL_IsReady>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f1      	bne.n	800688c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	4b45      	ldr	r3, [pc, #276]	@ (80069c4 <HAL_RCC_OscConfig+0x734>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068ba:	4311      	orrs	r1, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068c0:	0212      	lsls	r2, r2, #8
 80068c2:	4311      	orrs	r1, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068c8:	4311      	orrs	r1, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80068ce:	4311      	orrs	r1, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80068d4:	430a      	orrs	r2, r1
 80068d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068da:	4313      	orrs	r3, r2
 80068dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068de:	f7ff fc38 	bl	8006152 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f2:	f7fb ff1d 	bl	8002730 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fa:	f7fb ff19 	bl	8002730 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b0a      	cmp	r3, #10
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e056      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800690c:	f7ff fc3d 	bl	800618a <LL_RCC_PLL_IsReady>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f1      	beq.n	80068fa <HAL_RCC_OscConfig+0x66a>
 8006916:	e04f      	b.n	80069b8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006918:	f7ff fc29 	bl	800616e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006936:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fb fef6 	bl	8002730 <HAL_GetTick>
 8006944:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006948:	f7fb fef2 	bl	8002730 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b0a      	cmp	r3, #10
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e02f      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800695a:	f7ff fc16 	bl	800618a <LL_RCC_PLL_IsReady>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f1      	bne.n	8006948 <HAL_RCC_OscConfig+0x6b8>
 8006964:	e028      	b.n	80069b8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e023      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0203 	and.w	r2, r3, #3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	429a      	cmp	r2, r3
 8006986:	d115      	bne.n	80069b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006992:	429a      	cmp	r2, r3
 8006994:	d10e      	bne.n	80069b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d106      	bne.n	80069b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d001      	beq.n	80069b8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	11c1808c 	.word	0x11c1808c

080069c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e10f      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069dc:	4b89      	ldr	r3, [pc, #548]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d91b      	bls.n	8006a22 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ea:	4b86      	ldr	r3, [pc, #536]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 0207 	bic.w	r2, r3, #7
 80069f2:	4984      	ldr	r1, [pc, #528]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fa:	f7fb fe99 	bl	8002730 <HAL_GetTick>
 80069fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a02:	f7fb fe95 	bl	8002730 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e0f3      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a14:	4b7b      	ldr	r3, [pc, #492]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d1ef      	bne.n	8006a02 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d016      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fb10 	bl	8006058 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a38:	f7fb fe7a 	bl	8002730 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a40:	f7fb fe76 	bl	8002730 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0d4      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a52:	f7ff fbd8 	bl	8006206 <LL_RCC_IsActiveFlag_HPRE>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f1      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fb06 	bl	800607e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a72:	f7fb fe5d 	bl	8002730 <HAL_GetTick>
 8006a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a7a:	f7fb fe59 	bl	8002730 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e0b7      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a8c:	f7ff fbcc 	bl	8006228 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f1      	beq.n	8006a7a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff faff 	bl	80060aa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aac:	f7fb fe40 	bl	8002730 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ab4:	f7fb fe3c 	bl	8002730 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e09a      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ac6:	f7ff fbc1 	bl	800624c <LL_RCC_IsActiveFlag_PPRE1>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f1      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d017      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff faf4 	bl	80060d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ae8:	f7fb fe22 	bl	8002730 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006af0:	f7fb fe1e 	bl	8002730 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e07c      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b02:	f7ff fbb4 	bl	800626e <LL_RCC_IsActiveFlag_PPRE2>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f1      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d043      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b20:	f7ff f981 	bl	8005e26 <LL_RCC_HSE_IsReady>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11e      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e066      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b36:	f7ff fb28 	bl	800618a <LL_RCC_PLL_IsReady>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d113      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e05b      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b4c:	f7ff fa1b 	bl	8005f86 <LL_RCC_MSI_IsReady>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e050      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b5a:	f7ff f991 	bl	8005e80 <LL_RCC_HSI_IsReady>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e049      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fa55 	bl	800601c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b72:	f7fb fddd 	bl	8002730 <HAL_GetTick>
 8006b76:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b78:	e00a      	b.n	8006b90 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7a:	f7fb fdd9 	bl	8002730 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e035      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b90:	f7ff fa57 	bl	8006042 <LL_RCC_GetSysClkSource>
 8006b94:	4602      	mov	r2, r0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1ec      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d21b      	bcs.n	8006be6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 0207 	bic.w	r2, r3, #7
 8006bb6:	4913      	ldr	r1, [pc, #76]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bbe:	f7fb fdb7 	bl	8002730 <HAL_GetTick>
 8006bc2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bc6:	f7fb fdb3 	bl	8002730 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e011      	b.n	8006bfc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c04 <HAL_RCC_ClockConfig+0x23c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d1ef      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006be6:	f000 f8b3 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a06      	ldr	r2, [pc, #24]	@ (8006c08 <HAL_RCC_ClockConfig+0x240>)
 8006bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006bf0:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <HAL_RCC_ClockConfig+0x244>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fb fd91 	bl	800271c <HAL_InitTick>
 8006bfa:	4603      	mov	r3, r0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	58004000 	.word	0x58004000
 8006c08:	20000000 	.word	0x20000000
 8006c0c:	20000004 	.word	0x20000004

08006c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1e:	f7ff fa10 	bl	8006042 <LL_RCC_GetSysClkSource>
 8006c22:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c24:	f7ff fae4 	bl	80061f0 <LL_RCC_PLL_GetMainSource>
 8006c28:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	d139      	bne.n	8006caa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d136      	bne.n	8006caa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c3c:	f7ff f9b3 	bl	8005fa6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d115      	bne.n	8006c72 <HAL_RCC_GetSysClockFreq+0x62>
 8006c46:	f7ff f9ae 	bl	8005fa6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCC_GetSysClockFreq+0x4e>
 8006c50:	f7ff f9b9 	bl	8005fc6 <LL_RCC_MSI_GetRange>
 8006c54:	4603      	mov	r3, r0
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	e005      	b.n	8006c6a <HAL_RCC_GetSysClockFreq+0x5a>
 8006c5e:	f7ff f9bd 	bl	8005fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8006c62:	4603      	mov	r3, r0
 8006c64:	0a1b      	lsrs	r3, r3, #8
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	4a36      	ldr	r2, [pc, #216]	@ (8006d44 <HAL_RCC_GetSysClockFreq+0x134>)
 8006c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c70:	e014      	b.n	8006c9c <HAL_RCC_GetSysClockFreq+0x8c>
 8006c72:	f7ff f998 	bl	8005fa6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x7a>
 8006c7c:	f7ff f9a3 	bl	8005fc6 <LL_RCC_MSI_GetRange>
 8006c80:	4603      	mov	r3, r0
 8006c82:	091b      	lsrs	r3, r3, #4
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	e005      	b.n	8006c96 <HAL_RCC_GetSysClockFreq+0x86>
 8006c8a:	f7ff f9a7 	bl	8005fdc <LL_RCC_MSI_GetRangeAfterStandby>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	4a2b      	ldr	r2, [pc, #172]	@ (8006d44 <HAL_RCC_GetSysClockFreq+0x134>)
 8006c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c9c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d115      	bne.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ca8:	e012      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cb0:	4b25      	ldr	r3, [pc, #148]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x138>)
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	e00c      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d109      	bne.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006cbc:	f7ff f886 	bl	8005dcc <LL_RCC_HSE_IsEnabledDiv2>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d102      	bne.n	8006ccc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006cc6:	4b20      	ldr	r3, [pc, #128]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x138>)
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e001      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006cce:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd0:	f7ff f9b7 	bl	8006042 <LL_RCC_GetSysClkSource>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d12f      	bne.n	8006d3a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006cda:	f7ff fa89 	bl	80061f0 <LL_RCC_PLL_GetMainSource>
 8006cde:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d003      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0xde>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0xe4>
 8006cec:	e00d      	b.n	8006d0a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006cee:	4b16      	ldr	r3, [pc, #88]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x138>)
 8006cf0:	60fb      	str	r3, [r7, #12]
        break;
 8006cf2:	e00d      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006cf4:	f7ff f86a 	bl	8005dcc <LL_RCC_HSE_IsEnabledDiv2>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006cfe:	4b12      	ldr	r3, [pc, #72]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x138>)
 8006d00:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006d02:	e005      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006d04:	4b11      	ldr	r3, [pc, #68]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006d06:	60fb      	str	r3, [r7, #12]
        break;
 8006d08:	e002      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	60fb      	str	r3, [r7, #12]
        break;
 8006d0e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006d10:	f7ff fa4c 	bl	80061ac <LL_RCC_PLL_GetN>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	fb03 f402 	mul.w	r4, r3, r2
 8006d1c:	f7ff fa5d 	bl	80061da <LL_RCC_PLL_GetDivider>
 8006d20:	4603      	mov	r3, r0
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	3301      	adds	r3, #1
 8006d26:	fbb4 f4f3 	udiv	r4, r4, r3
 8006d2a:	f7ff fa4b 	bl	80061c4 <LL_RCC_PLL_GetR>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	0f5b      	lsrs	r3, r3, #29
 8006d32:	3301      	adds	r3, #1
 8006d34:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d38:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd90      	pop	{r4, r7, pc}
 8006d44:	0801ffc8 	.word	0x0801ffc8
 8006d48:	00f42400 	.word	0x00f42400
 8006d4c:	01e84800 	.word	0x01e84800

08006d50 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d50:	b598      	push	{r3, r4, r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006d54:	f7ff ff5c 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 8006d58:	4604      	mov	r4, r0
 8006d5a:	f7ff f9cc 	bl	80060f6 <LL_RCC_GetAHBPrescaler>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	4a03      	ldr	r2, [pc, #12]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x24>)
 8006d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd98      	pop	{r3, r4, r7, pc}
 8006d74:	0801ff68 	.word	0x0801ff68

08006d78 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d78:	b598      	push	{r3, r4, r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d7c:	f7ff ffe8 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006d80:	4604      	mov	r4, r0
 8006d82:	f7ff f9d0 	bl	8006126 <LL_RCC_GetAPB1Prescaler>
 8006d86:	4603      	mov	r3, r0
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	4a03      	ldr	r2, [pc, #12]	@ (8006d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd98      	pop	{r3, r4, r7, pc}
 8006d98:	0801ffa8 	.word	0x0801ffa8

08006d9c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d9c:	b598      	push	{r3, r4, r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006da0:	f7ff ffd6 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006da4:	4604      	mov	r4, r0
 8006da6:	f7ff f9c9 	bl	800613c <LL_RCC_GetAPB2Prescaler>
 8006daa:	4603      	mov	r3, r0
 8006dac:	0adb      	lsrs	r3, r3, #11
 8006dae:	4a03      	ldr	r2, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd98      	pop	{r3, r4, r7, pc}
 8006dbc:	0801ffa8 	.word	0x0801ffa8

08006dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	4a10      	ldr	r2, [pc, #64]	@ (8006e14 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006dd8:	f7ff f998 	bl	800610c <LL_RCC_GetAHB3Prescaler>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	091b      	lsrs	r3, r3, #4
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4a09      	ldr	r2, [pc, #36]	@ (8006e1c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	0c9c      	lsrs	r4, r3, #18
 8006dfc:	f7fe ff3e 	bl	8005c7c <HAL_PWREx_GetVoltageRange>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4619      	mov	r1, r3
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f80b 	bl	8006e20 <RCC_SetFlashLatency>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd90      	pop	{r4, r7, pc}
 8006e14:	0801ffc8 	.word	0x0801ffc8
 8006e18:	0801ff68 	.word	0x0801ff68
 8006e1c:	431bde83 	.word	0x431bde83

08006e20 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08e      	sub	sp, #56	@ 0x38
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8006f14 <RCC_SetFlashLatency+0xf4>)
 8006e2c:	f107 0320 	add.w	r3, r7, #32
 8006e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e34:	6018      	str	r0, [r3, #0]
 8006e36:	3304      	adds	r3, #4
 8006e38:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006e3a:	4a37      	ldr	r2, [pc, #220]	@ (8006f18 <RCC_SetFlashLatency+0xf8>)
 8006e3c:	f107 0318 	add.w	r3, r7, #24
 8006e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	3304      	adds	r3, #4
 8006e48:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006e4a:	4a34      	ldr	r2, [pc, #208]	@ (8006f1c <RCC_SetFlashLatency+0xfc>)
 8006e4c:	f107 030c 	add.w	r3, r7, #12
 8006e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e52:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e60:	d11b      	bne.n	8006e9a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e66:	e014      	b.n	8006e92 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	3338      	adds	r3, #56	@ 0x38
 8006e6e:	443b      	add	r3, r7
 8006e70:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d807      	bhi.n	8006e8c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	3338      	adds	r3, #56	@ 0x38
 8006e82:	443b      	add	r3, r7
 8006e84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8a:	e021      	b.n	8006ed0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	3301      	adds	r3, #1
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d9e7      	bls.n	8006e68 <RCC_SetFlashLatency+0x48>
 8006e98:	e01a      	b.n	8006ed0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9e:	e014      	b.n	8006eca <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	3338      	adds	r3, #56	@ 0x38
 8006ea6:	443b      	add	r3, r7
 8006ea8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006eac:	461a      	mov	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d807      	bhi.n	8006ec4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	3338      	adds	r3, #56	@ 0x38
 8006eba:	443b      	add	r3, r7
 8006ebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec2:	e005      	b.n	8006ed0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d9e7      	bls.n	8006ea0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ed0:	4b13      	ldr	r3, [pc, #76]	@ (8006f20 <RCC_SetFlashLatency+0x100>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 0207 	bic.w	r2, r3, #7
 8006ed8:	4911      	ldr	r1, [pc, #68]	@ (8006f20 <RCC_SetFlashLatency+0x100>)
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ee0:	f7fb fc26 	bl	8002730 <HAL_GetTick>
 8006ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ee6:	e008      	b.n	8006efa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ee8:	f7fb fc22 	bl	8002730 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e007      	b.n	8006f0a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006efa:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <RCC_SetFlashLatency+0x100>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d1ef      	bne.n	8006ee8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3738      	adds	r7, #56	@ 0x38
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	0801f5b0 	.word	0x0801f5b0
 8006f18:	0801f5b8 	.word	0x0801f5b8
 8006f1c:	0801f5c0 	.word	0x0801f5c0
 8006f20:	58004000 	.word	0x58004000

08006f24 <LL_RCC_LSE_IsReady>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d101      	bne.n	8006f3c <LL_RCC_LSE_IsReady+0x18>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <LL_RCC_LSE_IsReady+0x1a>
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <LL_RCC_SetUSARTClockSource>:
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	401a      	ands	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <LL_RCC_SetI2SClockSource>:
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <LL_RCC_SetLPUARTClockSource>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <LL_RCC_SetI2CClockSource>:
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	401a      	ands	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <LL_RCC_SetLPTIMClockSource>:
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800700e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	43db      	mvns	r3, r3
 800701a:	401a      	ands	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <LL_RCC_SetRNGClockSource>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800703c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007044:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr

0800705e <LL_RCC_SetADCClockSource>:
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <LL_RCC_SetRTCClockSource>:
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800709c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr

080070b2 <LL_RCC_GetRTCClockSource>:
{
 80070b2:	b480      	push	{r7}
 80070b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80070b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <LL_RCC_ForceBackupDomainReset>:
{
 80070ca:	b480      	push	{r7}
 80070cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80070ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80070e2:	bf00      	nop
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <LL_RCC_ReleaseBackupDomainReset>:
{
 80070ea:	b480      	push	{r7}
 80070ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80070ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007102:	bf00      	nop
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
	...

0800710c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007118:	2300      	movs	r3, #0
 800711a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800711c:	2300      	movs	r3, #0
 800711e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d058      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800712c:	f7fe fd64 	bl	8005bf8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007130:	f7fb fafe 	bl	8002730 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007136:	e009      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007138:	f7fb fafa 	bl	8002730 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d902      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	74fb      	strb	r3, [r7, #19]
        break;
 800714a:	e006      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800714c:	4b7b      	ldr	r3, [pc, #492]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007158:	d1ee      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800715a:	7cfb      	ldrb	r3, [r7, #19]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d13c      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007160:	f7ff ffa7 	bl	80070b2 <LL_RCC_GetRTCClockSource>
 8007164:	4602      	mov	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800716a:	429a      	cmp	r2, r3
 800716c:	d00f      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800717a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800717c:	f7ff ffa5 	bl	80070ca <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007180:	f7ff ffb3 	bl	80070ea <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d014      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fb faca 	bl	8002730 <HAL_GetTick>
 800719c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800719e:	e00b      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a0:	f7fb fac6 	bl	8002730 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d902      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	74fb      	strb	r3, [r7, #19]
            break;
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80071b8:	f7ff feb4 	bl	8006f24 <LL_RCC_LSE_IsReady>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d1ee      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80071c2:	7cfb      	ldrb	r3, [r7, #19]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff ff5b 	bl	8007088 <LL_RCC_SetRTCClockSource>
 80071d2:	e004      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	74bb      	strb	r3, [r7, #18]
 80071d8:	e001      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071da:	7cfb      	ldrb	r3, [r7, #19]
 80071dc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fea9 	bl	8006f46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fe9e 	bl	8006f46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fec0 	bl	8006fa0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fee6 	bl	8007002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fedb 	bl	8007002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fed0 	bl	8007002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fea9 	bl	8006fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fe9e 	bl	8006fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fe93 	bl	8006fca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d011      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fe5e 	bl	8006f76 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d107      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d010      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fea5 	bl	8007034 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007300:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fea3 	bl	800705e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007320:	d107      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800732c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007330:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007332:	7cbb      	ldrb	r3, [r7, #18]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58000400 	.word	0x58000400

08007340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d068      	beq.n	8007424 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fa fc9c 	bl	8001ca4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007374:	4b2e      	ldr	r3, [pc, #184]	@ (8007430 <HAL_RTC_Init+0xf0>)
 8007376:	22ca      	movs	r2, #202	@ 0xca
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24
 800737a:	4b2d      	ldr	r3, [pc, #180]	@ (8007430 <HAL_RTC_Init+0xf0>)
 800737c:	2253      	movs	r2, #83	@ 0x53
 800737e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa0f 	bl	80077a4 <RTC_EnterInitMode>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d13f      	bne.n	8007410 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007390:	4b27      	ldr	r3, [pc, #156]	@ (8007430 <HAL_RTC_Init+0xf0>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	4a26      	ldr	r2, [pc, #152]	@ (8007430 <HAL_RTC_Init+0xf0>)
 8007396:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800739a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80073a0:	4b23      	ldr	r3, [pc, #140]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6859      	ldr	r1, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	4319      	orrs	r1, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	430b      	orrs	r3, r1
 80073b4:	491e      	ldr	r1, [pc, #120]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	491a      	ldr	r1, [pc, #104]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80073ca:	4b19      	ldr	r3, [pc, #100]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	430b      	orrs	r3, r1
 80073dc:	4914      	ldr	r1, [pc, #80]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa12 	bl	800780c <RTC_ExitInitMode>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10e      	bne.n	8007410 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80073f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <HAL_RTC_Init+0xf0>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a19      	ldr	r1, [r3, #32]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4319      	orrs	r1, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	430b      	orrs	r3, r1
 800740a:	4909      	ldr	r1, [pc, #36]	@ (8007430 <HAL_RTC_Init+0xf0>)
 800740c:	4313      	orrs	r3, r2
 800740e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <HAL_RTC_Init+0xf0>)
 8007412:	22ff      	movs	r2, #255	@ 0xff
 8007414:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40002800 	.word	0x40002800

08007434 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_RTC_SetAlarm_IT+0x1e>
 800744e:	2302      	movs	r3, #2
 8007450:	e0f3      	b.n	800763a <HAL_RTC_SetAlarm_IT+0x206>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007462:	4b78      	ldr	r3, [pc, #480]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007472:	d06a      	beq.n	800754a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d13a      	bne.n	80074f0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800747a:	4b72      	ldr	r3, [pc, #456]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d102      	bne.n	800748c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2200      	movs	r2, #0
 800748a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f9f5 	bl	8007888 <RTC_ByteToBcd2>
 800749e:	4603      	mov	r3, r0
 80074a0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f9ee 	bl	8007888 <RTC_ByteToBcd2>
 80074ac:	4603      	mov	r3, r0
 80074ae:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80074b0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	789b      	ldrb	r3, [r3, #2]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f9e6 	bl	8007888 <RTC_ByteToBcd2>
 80074bc:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80074be:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	78db      	ldrb	r3, [r3, #3]
 80074c6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80074c8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f9d8 	bl	8007888 <RTC_ByteToBcd2>
 80074d8:	4603      	mov	r3, r0
 80074da:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80074dc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80074e4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e02c      	b.n	800754a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80074f8:	d00d      	beq.n	8007516 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007502:	d008      	beq.n	8007516 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007504:	4b4f      	ldr	r3, [pc, #316]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007522:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007528:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007530:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007538:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800753a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007540:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800754a:	4b3e      	ldr	r3, [pc, #248]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800754c:	22ca      	movs	r2, #202	@ 0xca
 800754e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007550:	4b3c      	ldr	r3, [pc, #240]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007552:	2253      	movs	r2, #83	@ 0x53
 8007554:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755e:	d12c      	bne.n	80075ba <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007560:	4b38      	ldr	r3, [pc, #224]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4a37      	ldr	r2, [pc, #220]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007566:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800756a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800756c:	4b35      	ldr	r3, [pc, #212]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800756e:	2201      	movs	r2, #1
 8007570:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007578:	d107      	bne.n	800758a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	4930      	ldr	r1, [pc, #192]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007584:	4313      	orrs	r3, r2
 8007586:	644b      	str	r3, [r1, #68]	@ 0x44
 8007588:	e006      	b.n	8007598 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800758a:	4a2e      	ldr	r2, [pc, #184]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007590:	4a2c      	ldr	r2, [pc, #176]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007598:	4a2a      	ldr	r2, [pc, #168]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a4:	f043 0201 	orr.w	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80075ac:	4b25      	ldr	r3, [pc, #148]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	4a24      	ldr	r2, [pc, #144]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075b2:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80075b6:	6193      	str	r3, [r2, #24]
 80075b8:	e02b      	b.n	8007612 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80075ba:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	4a21      	ldr	r2, [pc, #132]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075c0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80075c4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80075c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075c8:	2202      	movs	r2, #2
 80075ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d2:	d107      	bne.n	80075e4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	699a      	ldr	r2, [r3, #24]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	4919      	ldr	r1, [pc, #100]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80075e2:	e006      	b.n	80075f2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80075e4:	4a17      	ldr	r2, [pc, #92]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80075ea:	4a16      	ldr	r2, [pc, #88]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80075f2:	4a14      	ldr	r2, [pc, #80]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	f043 0202 	orr.w	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	4a0e      	ldr	r2, [pc, #56]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 800760c:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007610:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <HAL_RTC_SetAlarm_IT+0x214>)
 8007614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007618:	4a0b      	ldr	r2, [pc, #44]	@ (8007648 <HAL_RTC_SetAlarm_IT+0x214>)
 800761a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007622:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <HAL_RTC_SetAlarm_IT+0x210>)
 8007624:	22ff      	movs	r2, #255	@ 0xff
 8007626:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd90      	pop	{r4, r7, pc}
 8007642:	bf00      	nop
 8007644:	40002800 	.word	0x40002800
 8007648:	58000800 	.word	0x58000800

0800764c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_RTC_DeactivateAlarm+0x18>
 8007660:	2302      	movs	r3, #2
 8007662:	e048      	b.n	80076f6 <HAL_RTC_DeactivateAlarm+0xaa>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007674:	4b22      	ldr	r3, [pc, #136]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007676:	22ca      	movs	r2, #202	@ 0xca
 8007678:	625a      	str	r2, [r3, #36]	@ 0x24
 800767a:	4b21      	ldr	r3, [pc, #132]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 800767c:	2253      	movs	r2, #83	@ 0x53
 800767e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007686:	d115      	bne.n	80076b4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007688:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	4a1c      	ldr	r2, [pc, #112]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 800768e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007692:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007694:	4b1a      	ldr	r3, [pc, #104]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007698:	4a19      	ldr	r2, [pc, #100]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 800769a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800769e:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a4:	f023 0201 	bic.w	r2, r3, #1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80076ac:	4b14      	ldr	r3, [pc, #80]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076b2:	e014      	b.n	80076de <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80076b4:	4b12      	ldr	r3, [pc, #72]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	4a11      	ldr	r2, [pc, #68]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076ba:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80076be:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80076c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076ca:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d0:	f023 0202 	bic.w	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80076d8:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076da:	2202      	movs	r2, #2
 80076dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <HAL_RTC_DeactivateAlarm+0xb4>)
 80076e0:	22ff      	movs	r2, #255	@ 0xff
 80076e2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr
 8007700:	40002800 	.word	0x40002800

08007704 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800770c:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <HAL_RTC_AlarmIRQHandler+0x50>)
 800770e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	4013      	ands	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007724:	2201      	movs	r2, #1
 8007726:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fb faee 	bl	8002d0a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007738:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <HAL_RTC_AlarmIRQHandler+0x50>)
 800773a:	2202      	movs	r2, #2
 800773c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f94a 	bl	80079d8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40002800 	.word	0x40002800

08007758 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007760:	4b0f      	ldr	r3, [pc, #60]	@ (80077a0 <HAL_RTC_WaitForSynchro+0x48>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4a0e      	ldr	r2, [pc, #56]	@ (80077a0 <HAL_RTC_WaitForSynchro+0x48>)
 8007766:	f023 0320 	bic.w	r3, r3, #32
 800776a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800776c:	f7fa ffe0 	bl	8002730 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007772:	e009      	b.n	8007788 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007774:	f7fa ffdc 	bl	8002730 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007782:	d901      	bls.n	8007788 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e006      	b.n	8007796 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007788:	4b05      	ldr	r3, [pc, #20]	@ (80077a0 <HAL_RTC_WaitForSynchro+0x48>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ef      	beq.n	8007774 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40002800 	.word	0x40002800

080077a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80077b0:	4b15      	ldr	r3, [pc, #84]	@ (8007808 <RTC_EnterInitMode+0x64>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d120      	bne.n	80077fe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80077bc:	4b12      	ldr	r3, [pc, #72]	@ (8007808 <RTC_EnterInitMode+0x64>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a11      	ldr	r2, [pc, #68]	@ (8007808 <RTC_EnterInitMode+0x64>)
 80077c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80077c8:	f7fa ffb2 	bl	8002730 <HAL_GetTick>
 80077cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077ce:	e00d      	b.n	80077ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80077d0:	f7fa ffae 	bl	8002730 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077de:	d905      	bls.n	80077ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2203      	movs	r2, #3
 80077e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077ec:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <RTC_EnterInitMode+0x64>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <RTC_EnterInitMode+0x5a>
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d1e8      	bne.n	80077d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40002800 	.word	0x40002800

0800780c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800781e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007822:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007824:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10c      	bne.n	800784a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff91 	bl	8007758 <HAL_RTC_WaitForSynchro>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01e      	beq.n	800787a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e017      	b.n	800787a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800784a:	4b0e      	ldr	r3, [pc, #56]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007850:	f023 0320 	bic.w	r3, r3, #32
 8007854:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff7e 	bl	8007758 <HAL_RTC_WaitForSynchro>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2203      	movs	r2, #3
 8007866:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800786e:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007874:	f043 0320 	orr.w	r3, r3, #32
 8007878:	6193      	str	r3, [r2, #24]
  }

  return status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40002800 	.word	0x40002800

08007888 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800789a:	e005      	b.n	80078a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	3b0a      	subs	r3, #10
 80078a6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	d8f6      	bhi.n	800789c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	b2db      	uxtb	r3, r3
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
	...

080078c8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_RTCEx_EnableBypassShadow+0x16>
 80078da:	2302      	movs	r3, #2
 80078dc:	e01f      	b.n	800791e <HAL_RTCEx_EnableBypassShadow+0x56>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007928 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80078f0:	22ca      	movs	r2, #202	@ 0xca
 80078f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80078f6:	2253      	movs	r2, #83	@ 0x53
 80078f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80078fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007928 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007928 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007900:	f043 0320 	orr.w	r3, r3, #32
 8007904:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007906:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007908:	22ff      	movs	r2, #255	@ 0xff
 800790a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr
 8007928:	40002800 	.word	0x40002800

0800792c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_RTCEx_SetSSRU_IT+0x16>
 800793e:	2302      	movs	r3, #2
 8007940:	e027      	b.n	8007992 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007952:	4b12      	ldr	r3, [pc, #72]	@ (800799c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007954:	22ca      	movs	r2, #202	@ 0xca
 8007956:	625a      	str	r2, [r3, #36]	@ 0x24
 8007958:	4b10      	ldr	r3, [pc, #64]	@ (800799c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800795a:	2253      	movs	r2, #83	@ 0x53
 800795c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800795e:	4b0f      	ldr	r3, [pc, #60]	@ (800799c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	4a0e      	ldr	r2, [pc, #56]	@ (800799c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007968:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800796c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007970:	4a0b      	ldr	r2, [pc, #44]	@ (80079a0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007976:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800797a:	4b08      	ldr	r3, [pc, #32]	@ (800799c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800797c:	22ff      	movs	r2, #255	@ 0xff
 800797e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr
 800799c:	40002800 	.word	0x40002800
 80079a0:	58000800 	.word	0x58000800

080079a4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80079ac:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80079ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80079b8:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80079ba:	2240      	movs	r2, #64	@ 0x40
 80079bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fb f9ad 	bl	8002d1e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40002800 	.word	0x40002800

080079d8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <HAL_RTCEx_BKUPWrite+0x2c>)
 80079fa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4413      	add	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	4000b100 	.word	0x4000b100

08007a1c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <HAL_RTCEx_BKUPRead+0x28>)
 8007a28:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	4000b100 	.word	0x4000b100

08007a48 <LL_PWR_SetRadioBusyTrigger>:
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007a50:	4b06      	ldr	r3, [pc, #24]	@ (8007a6c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a58:	4904      	ldr	r1, [pc, #16]	@ (8007a6c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	608b      	str	r3, [r1, #8]
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	58000400 	.word	0x58000400

08007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7a:	4a04      	ldr	r2, [pc, #16]	@ (8007a8c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr
 8007a8c:	58000400 	.word	0x58000400

08007a90 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9a:	4a04      	ldr	r2, [pc, #16]	@ (8007aac <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007a9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr
 8007aac:	58000400 	.word	0x58000400

08007ab0 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007ab4:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007aba:	619a      	str	r2, [r3, #24]
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	58000400 	.word	0x58000400

08007ac8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d101      	bne.n	8007adc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	58000400 	.word	0x58000400

08007aec <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007af0:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d101      	bne.n	8007b00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	58000400 	.word	0x58000400

08007b10 <LL_RCC_RF_DisableReset>:
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007b28:	bf00      	nop
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <LL_RCC_IsRFUnderReset>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b44:	d101      	bne.n	8007b4a <LL_RCC_IsRFUnderReset+0x1a>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <LL_RCC_IsRFUnderReset+0x1c>
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <LL_EXTI_EnableIT_32_63+0x24>)
 8007b5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007b62:	4905      	ldr	r1, [pc, #20]	@ (8007b78 <LL_EXTI_EnableIT_32_63+0x24>)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	58000800 	.word	0x58000800

08007b7c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d103      	bne.n	8007b92 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
    return status;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	e04b      	b.n	8007c2a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	799b      	ldrb	r3, [r3, #6]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d105      	bne.n	8007bac <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa fc1a 	bl	80023e0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007bb2:	f7ff ffad 	bl	8007b10 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c34 <HAL_SUBGHZ_Init+0xb8>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	0cdb      	lsrs	r3, r3, #19
 8007bc4:	2264      	movs	r2, #100	@ 0x64
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d105      	bne.n	8007bde <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	609a      	str	r2, [r3, #8]
      break;
 8007bdc:	e007      	b.n	8007bee <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007be4:	f7ff ffa4 	bl	8007b30 <LL_RCC_IsRFUnderReset>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1ee      	bne.n	8007bcc <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bee:	f7ff ff3f 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007bf2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007bf6:	f7ff ffad 	bl	8007b54 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007bfa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007bfe:	f7ff ff23 	bl	8007a48 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007c02:	f7ff ff55 	bl	8007ab0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 faa5 	bl	8008160 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	719a      	strb	r2, [r3, #6]

  return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000000 	.word	0x20000000

08007c38 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	461a      	mov	r2, r3
 8007c44:	460b      	mov	r3, r1
 8007c46:	817b      	strh	r3, [r7, #10]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	799b      	ldrb	r3, [r3, #6]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d14a      	bne.n	8007cec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	795b      	ldrb	r3, [r3, #5]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d101      	bne.n	8007c62 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e045      	b.n	8007cee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb44 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c74:	f7ff ff0c 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007c78:	210d      	movs	r1, #13
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fa90 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007c80:	897b      	ldrh	r3, [r7, #10]
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fa88 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007c90:	897b      	ldrh	r3, [r7, #10]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fa82 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	82bb      	strh	r3, [r7, #20]
 8007ca0:	e00a      	b.n	8007cb8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007ca2:	8abb      	ldrh	r3, [r7, #20]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	4619      	mov	r1, r3
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fa77 	bl	80081a0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007cb2:	8abb      	ldrh	r3, [r7, #20]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	82bb      	strh	r3, [r7, #20]
 8007cb8:	8aba      	ldrh	r2, [r7, #20]
 8007cba:	893b      	ldrh	r3, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3f0      	bcc.n	8007ca2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007cc0:	f7ff fed6 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fb3d 	bl	8008344 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
 8007cd6:	e001      	b.n	8007cdc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	715a      	strb	r2, [r3, #5]

    return status;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	e000      	b.n	8007cee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007cec:	2302      	movs	r3, #2
  }
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b088      	sub	sp, #32
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	461a      	mov	r2, r3
 8007d02:	460b      	mov	r3, r1
 8007d04:	817b      	strh	r3, [r7, #10]
 8007d06:	4613      	mov	r3, r2
 8007d08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	799b      	ldrb	r3, [r3, #6]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d14a      	bne.n	8007dae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	795b      	ldrb	r3, [r3, #5]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e045      	b.n	8007db0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fae6 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d30:	f7ff feae 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007d34:	211d      	movs	r1, #29
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fa32 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007d3c:	897b      	ldrh	r3, [r7, #10]
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fa2a 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007d4c:	897b      	ldrh	r3, [r7, #10]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	4619      	mov	r1, r3
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fa24 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fa20 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	82fb      	strh	r3, [r7, #22]
 8007d64:	e009      	b.n	8007d7a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007d66:	69b9      	ldr	r1, [r7, #24]
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fa6f 	bl	800824c <SUBGHZSPI_Receive>
      pData++;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007d74:	8afb      	ldrh	r3, [r7, #22]
 8007d76:	3301      	adds	r3, #1
 8007d78:	82fb      	strh	r3, [r7, #22]
 8007d7a:	8afa      	ldrh	r2, [r7, #22]
 8007d7c:	893b      	ldrh	r3, [r7, #8]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d3f1      	bcc.n	8007d66 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d82:	f7ff fe75 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fadc 	bl	8008344 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e001      	b.n	8007d9e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	715a      	strb	r2, [r3, #5]

    return status;
 8007daa:	7ffb      	ldrb	r3, [r7, #31]
 8007dac:	e000      	b.n	8007db0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007dae:	2302      	movs	r3, #2
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	72fb      	strb	r3, [r7, #11]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	799b      	ldrb	r3, [r3, #6]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d14a      	bne.n	8007e6c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	795b      	ldrb	r3, [r3, #5]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e045      	b.n	8007e6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 fa87 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	2b84      	cmp	r3, #132	@ 0x84
 8007df2:	d002      	beq.n	8007dfa <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	2b94      	cmp	r3, #148	@ 0x94
 8007df8:	d103      	bne.n	8007e02 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	711a      	strb	r2, [r3, #4]
 8007e00:	e002      	b.n	8007e08 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e08:	f7ff fe42 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f9c5 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	82bb      	strh	r3, [r7, #20]
 8007e1a:	e00a      	b.n	8007e32 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007e1c:	8abb      	ldrh	r3, [r7, #20]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f9ba 	bl	80081a0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007e2c:	8abb      	ldrh	r3, [r7, #20]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	82bb      	strh	r3, [r7, #20]
 8007e32:	8aba      	ldrh	r2, [r7, #20]
 8007e34:	893b      	ldrh	r3, [r7, #8]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3f0      	bcc.n	8007e1c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e3a:	f7ff fe19 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b84      	cmp	r3, #132	@ 0x84
 8007e42:	d002      	beq.n	8007e4a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fa7d 	bl	8008344 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	75fb      	strb	r3, [r7, #23]
 8007e56:	e001      	b.n	8007e5c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	715a      	strb	r2, [r3, #5]

    return status;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	e000      	b.n	8007e6e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007e6c:	2302      	movs	r3, #2
  }
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b088      	sub	sp, #32
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	461a      	mov	r2, r3
 8007e82:	460b      	mov	r3, r1
 8007e84:	72fb      	strb	r3, [r7, #11]
 8007e86:	4613      	mov	r3, r2
 8007e88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	799b      	ldrb	r3, [r3, #6]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d13d      	bne.n	8007f14 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	795b      	ldrb	r3, [r3, #5]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e038      	b.n	8007f16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fa26 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007eb0:	f7ff fdee 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f971 	bl	80081a0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f96d 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	82fb      	strh	r3, [r7, #22]
 8007eca:	e009      	b.n	8007ee0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007ecc:	69b9      	ldr	r1, [r7, #24]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f9bc 	bl	800824c <SUBGHZSPI_Receive>
      pData++;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007eda:	8afb      	ldrh	r3, [r7, #22]
 8007edc:	3301      	adds	r3, #1
 8007ede:	82fb      	strh	r3, [r7, #22]
 8007ee0:	8afa      	ldrh	r2, [r7, #22]
 8007ee2:	893b      	ldrh	r3, [r7, #8]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3f1      	bcc.n	8007ecc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ee8:	f7ff fdc2 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fa29 	bl	8008344 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	77fb      	strb	r3, [r7, #31]
 8007efe:	e001      	b.n	8007f04 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	715a      	strb	r2, [r3, #5]

    return status;
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
 8007f12:	e000      	b.n	8007f16 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f14:	2302      	movs	r3, #2
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3720      	adds	r7, #32
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	72fb      	strb	r3, [r7, #11]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	799b      	ldrb	r3, [r3, #6]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d13e      	bne.n	8007fba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	795b      	ldrb	r3, [r3, #5]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e039      	b.n	8007fbc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 f9d4 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007f54:	f7ff fd9c 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007f58:	210e      	movs	r1, #14
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f920 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007f60:	7afb      	ldrb	r3, [r7, #11]
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f91b 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	82bb      	strh	r3, [r7, #20]
 8007f6e:	e00a      	b.n	8007f86 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007f70:	8abb      	ldrh	r3, [r7, #20]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f910 	bl	80081a0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007f80:	8abb      	ldrh	r3, [r7, #20]
 8007f82:	3301      	adds	r3, #1
 8007f84:	82bb      	strh	r3, [r7, #20]
 8007f86:	8aba      	ldrh	r2, [r7, #20]
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d3f0      	bcc.n	8007f70 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f8e:	f7ff fd6f 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f9d6 	bl	8008344 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]
 8007fa4:	e001      	b.n	8007faa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	715a      	strb	r2, [r3, #5]

    return status;
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	e000      	b.n	8007fbc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007fba:	2302      	movs	r3, #2
  }
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	72fb      	strb	r3, [r7, #11]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	799b      	ldrb	r3, [r3, #6]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d141      	bne.n	800806a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	795b      	ldrb	r3, [r3, #5]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e03c      	b.n	800806c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f97f 	bl	80082fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ffe:	f7ff fd47 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008002:	211e      	movs	r1, #30
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f8cb 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	4619      	mov	r1, r3
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f8c6 	bl	80081a0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008014:	2100      	movs	r1, #0
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f8c2 	bl	80081a0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800801c:	2300      	movs	r3, #0
 800801e:	82fb      	strh	r3, [r7, #22]
 8008020:	e009      	b.n	8008036 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008022:	69b9      	ldr	r1, [r7, #24]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f911 	bl	800824c <SUBGHZSPI_Receive>
      pData++;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	3301      	adds	r3, #1
 800802e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	3301      	adds	r3, #1
 8008034:	82fb      	strh	r3, [r7, #22]
 8008036:	8afa      	ldrh	r2, [r7, #22]
 8008038:	893b      	ldrh	r3, [r7, #8]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3f1      	bcc.n	8008022 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800803e:	f7ff fd17 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f97e 	bl	8008344 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e001      	b.n	800805a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	715a      	strb	r2, [r3, #5]

    return status;
 8008066:	7ffb      	ldrb	r3, [r7, #31]
 8008068:	e000      	b.n	800806c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800807c:	2300      	movs	r3, #0
 800807e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008080:	f107 020c 	add.w	r2, r7, #12
 8008084:	2302      	movs	r3, #2
 8008086:	2112      	movs	r1, #18
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fef4 	bl	8007e76 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800808e:	7b3b      	ldrb	r3, [r7, #12]
 8008090:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	b21a      	sxth	r2, r3
 8008098:	7b7b      	ldrb	r3, [r7, #13]
 800809a:	b21b      	sxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b21b      	sxth	r3, r3
 80080a0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f012 ff67 	bl	801af80 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80080b2:	89fb      	ldrh	r3, [r7, #14]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f012 ff6d 	bl	801af9c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80080c2:	89fb      	ldrh	r3, [r7, #14]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f012 ffbd 	bl	801b04c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80080d2:	89fb      	ldrh	r3, [r7, #14]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f012 ffc3 	bl	801b068 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80080e2:	89fb      	ldrh	r3, [r7, #14]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f012 ffc9 	bl	801b084 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80080f2:	89fb      	ldrh	r3, [r7, #14]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f012 ff97 	bl	801b030 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008102:	89fb      	ldrh	r3, [r7, #14]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f012 ff53 	bl	801afb8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008112:	89fb      	ldrh	r3, [r7, #14]
 8008114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008126:	2101      	movs	r1, #1
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f012 ff53 	bl	801afd4 <HAL_SUBGHZ_CADStatusCallback>
 800812e:	e003      	b.n	8008138 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f012 ff4e 	bl	801afd4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f012 ff64 	bl	801b010 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008148:	f107 020c 	add.w	r2, r7, #12
 800814c:	2302      	movs	r3, #2
 800814e:	2102      	movs	r1, #2
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fe31 	bl	8007db8 <HAL_SUBGHZ_ExecSetCmd>
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008168:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a0b      	ldr	r2, [pc, #44]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 800816e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008172:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008174:	4a09      	ldr	r2, [pc, #36]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800817c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800817e:	4b07      	ldr	r3, [pc, #28]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 8008180:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008184:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008186:	4b05      	ldr	r3, [pc, #20]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a04      	ldr	r2, [pc, #16]	@ (800819c <SUBGHZSPI_Init+0x3c>)
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	6013      	str	r3, [r2, #0]
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr
 800819c:	58010000 	.word	0x58010000

080081a0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80081b0:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <SUBGHZSPI_Transmit+0xa0>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	0cdb      	lsrs	r3, r3, #19
 80081be:	2264      	movs	r2, #100	@ 0x64
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	609a      	str	r2, [r3, #8]
      break;
 80081d6:	e008      	b.n	80081ea <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3b01      	subs	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80081de:	4b19      	ldr	r3, [pc, #100]	@ (8008244 <SUBGHZSPI_Transmit+0xa4>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d1ed      	bne.n	80081c6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80081ea:	4b17      	ldr	r3, [pc, #92]	@ (8008248 <SUBGHZSPI_Transmit+0xa8>)
 80081ec:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80081f4:	4b12      	ldr	r3, [pc, #72]	@ (8008240 <SUBGHZSPI_Transmit+0xa0>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	0cdb      	lsrs	r3, r3, #19
 8008202:	2264      	movs	r2, #100	@ 0x64
 8008204:	fb02 f303 	mul.w	r3, r2, r3
 8008208:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	609a      	str	r2, [r3, #8]
      break;
 800821a:	e008      	b.n	800822e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3b01      	subs	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008222:	4b08      	ldr	r3, [pc, #32]	@ (8008244 <SUBGHZSPI_Transmit+0xa4>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b01      	cmp	r3, #1
 800822c:	d1ed      	bne.n	800820a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <SUBGHZSPI_Transmit+0xa4>)
 8008230:	68db      	ldr	r3, [r3, #12]

  return status;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
}
 8008234:	4618      	mov	r0, r3
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000000 	.word	0x20000000
 8008244:	58010000 	.word	0x58010000
 8008248:	5801000c 	.word	0x5801000c

0800824c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800825a:	4b25      	ldr	r3, [pc, #148]	@ (80082f0 <SUBGHZSPI_Receive+0xa4>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	0cdb      	lsrs	r3, r3, #19
 8008268:	2264      	movs	r2, #100	@ 0x64
 800826a:	fb02 f303 	mul.w	r3, r2, r3
 800826e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	609a      	str	r2, [r3, #8]
      break;
 8008280:	e008      	b.n	8008294 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b01      	subs	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008288:	4b1a      	ldr	r3, [pc, #104]	@ (80082f4 <SUBGHZSPI_Receive+0xa8>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d1ed      	bne.n	8008270 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008294:	4b18      	ldr	r3, [pc, #96]	@ (80082f8 <SUBGHZSPI_Receive+0xac>)
 8008296:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	22ff      	movs	r2, #255	@ 0xff
 800829c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800829e:	4b14      	ldr	r3, [pc, #80]	@ (80082f0 <SUBGHZSPI_Receive+0xa4>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	0cdb      	lsrs	r3, r3, #19
 80082ac:	2264      	movs	r2, #100	@ 0x64
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	609a      	str	r2, [r3, #8]
      break;
 80082c4:	e008      	b.n	80082d8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <SUBGHZSPI_Receive+0xa8>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d1ed      	bne.n	80082b4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80082d8:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <SUBGHZSPI_Receive+0xa8>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	701a      	strb	r2, [r3, #0]

  return status;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20000000 	.word	0x20000000
 80082f4:	58010000 	.word	0x58010000
 80082f8:	5801000c 	.word	0x5801000c

080082fc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	791b      	ldrb	r3, [r3, #4]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d111      	bne.n	8008330 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800830c:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <SUBGHZ_CheckDeviceReady+0x44>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	4413      	add	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800831c:	f7ff fbb8 	bl	8007a90 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3b01      	subs	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f9      	bne.n	8008320 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800832c:	f7ff fba0 	bl	8007a70 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f807 	bl	8008344 <SUBGHZ_WaitOnBusy>
 8008336:	4603      	mov	r3, r0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000000 	.word	0x20000000

08008344 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008350:	4b12      	ldr	r3, [pc, #72]	@ (800839c <SUBGHZ_WaitOnBusy+0x58>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4613      	mov	r3, r2
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	4413      	add	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	0d1b      	lsrs	r3, r3, #20
 800835e:	2264      	movs	r2, #100	@ 0x64
 8008360:	fb02 f303 	mul.w	r3, r2, r3
 8008364:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008366:	f7ff fbc1 	bl	8007aec <LL_PWR_IsActiveFlag_RFBUSYMS>
 800836a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	609a      	str	r2, [r3, #8]
      break;
 800837c:	e009      	b.n	8008392 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3b01      	subs	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008384:	f7ff fba0 	bl	8007ac8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4013      	ands	r3, r2
 800838e:	2b01      	cmp	r3, #1
 8008390:	d0e9      	beq.n	8008366 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000000 	.word	0x20000000

080083a0 <LL_RCC_GetUSARTClockSource>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80083a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	401a      	ands	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	4313      	orrs	r3, r2
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <LL_RCC_GetLPUARTClockSource>:
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80083cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4013      	ands	r3, r2
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e042      	b.n	800847a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fa fe64 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2224      	movs	r2, #36	@ 0x24
 8008410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fdb3 	bl	8008f90 <UART_SetConfig>
 800842a:	4603      	mov	r3, r0
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e022      	b.n	800847a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f81b 	bl	8009478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008450:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008460:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0201 	orr.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f8a1 	bl	80095ba <UART_CheckIdleState>
 8008478:	4603      	mov	r3, r0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b08a      	sub	sp, #40	@ 0x28
 8008486:	af02      	add	r7, sp, #8
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	603b      	str	r3, [r7, #0]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008498:	2b20      	cmp	r3, #32
 800849a:	f040 8083 	bne.w	80085a4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <HAL_UART_Transmit+0x28>
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e07b      	b.n	80085a6 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_UART_Transmit+0x3a>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e074      	b.n	80085a6 <HAL_UART_Transmit+0x124>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2221      	movs	r2, #33	@ 0x21
 80084d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084d4:	f7fa f92c 	bl	8002730 <HAL_GetTick>
 80084d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	88fa      	ldrh	r2, [r7, #6]
 80084e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f2:	d108      	bne.n	8008506 <HAL_UART_Transmit+0x84>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e003      	b.n	800850e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8008516:	e02c      	b.n	8008572 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2200      	movs	r2, #0
 8008520:	2180      	movs	r1, #128	@ 0x80
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f001 f894 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e039      	b.n	80085a6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008546:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	3302      	adds	r3, #2
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	e007      	b.n	8008560 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3301      	adds	r3, #1
 800855e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1cc      	bne.n	8008518 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	2140      	movs	r1, #64	@ 0x40
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f001 f861 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e006      	b.n	80085a6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e000      	b.n	80085a6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b08a      	sub	sp, #40	@ 0x28
 80085b2:	af02      	add	r7, sp, #8
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	f040 80c0 	bne.w	800874a <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <HAL_UART_Receive+0x28>
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e0b8      	b.n	800874c <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_UART_Receive+0x3a>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e0b1      	b.n	800874c <HAL_UART_Receive+0x19e>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2222      	movs	r2, #34	@ 0x22
 80085fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008606:	f7fa f893 	bl	8002730 <HAL_GetTick>
 800860a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	88fa      	ldrh	r2, [r7, #6]
 8008618:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008624:	d10e      	bne.n	8008644 <HAL_UART_Receive+0x96>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <HAL_UART_Receive+0x8c>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008638:	e02d      	b.n	8008696 <HAL_UART_Receive+0xe8>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	22ff      	movs	r2, #255	@ 0xff
 800863e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008642:	e028      	b.n	8008696 <HAL_UART_Receive+0xe8>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10d      	bne.n	8008668 <HAL_UART_Receive+0xba>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <HAL_UART_Receive+0xb0>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	22ff      	movs	r2, #255	@ 0xff
 8008658:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800865c:	e01b      	b.n	8008696 <HAL_UART_Receive+0xe8>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	227f      	movs	r2, #127	@ 0x7f
 8008662:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008666:	e016      	b.n	8008696 <HAL_UART_Receive+0xe8>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008670:	d10d      	bne.n	800868e <HAL_UART_Receive+0xe0>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <HAL_UART_Receive+0xd6>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	227f      	movs	r2, #127	@ 0x7f
 800867e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008682:	e008      	b.n	8008696 <HAL_UART_Receive+0xe8>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	223f      	movs	r2, #63	@ 0x3f
 8008688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800868c:	e003      	b.n	8008696 <HAL_UART_Receive+0xe8>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800869c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a6:	d108      	bne.n	80086ba <HAL_UART_Receive+0x10c>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	e003      	b.n	80086c2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80086ca:	e032      	b.n	8008732 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	2120      	movs	r1, #32
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 ffba 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e032      	b.n	800874c <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10c      	bne.n	8008706 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	8a7b      	ldrh	r3, [r7, #18]
 80086f6:	4013      	ands	r3, r2
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	3302      	adds	r3, #2
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	e00c      	b.n	8008720 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	b2da      	uxtb	r2, r3
 800870e:	8a7b      	ldrh	r3, [r7, #18]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	4013      	ands	r3, r2
 8008714:	b2da      	uxtb	r2, r3
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	3301      	adds	r3, #1
 800871e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008726:	b29b      	uxth	r3, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1c6      	bne.n	80086cc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	e000      	b.n	800874c <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800874a:	2302      	movs	r3, #2
  }
}
 800874c:	4618      	mov	r0, r3
 800874e:	3720      	adds	r7, #32
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	@ 0x28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008768:	2b20      	cmp	r3, #32
 800876a:	d142      	bne.n	80087f2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_UART_Receive_IT+0x24>
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e03b      	b.n	80087f4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_UART_Receive_IT+0x36>
 8008786:	2302      	movs	r3, #2
 8008788:	e034      	b.n	80087f4 <HAL_UART_Receive_IT+0xa0>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a17      	ldr	r2, [pc, #92]	@ (80087fc <HAL_UART_Receive_IT+0xa8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01f      	beq.n	80087e2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d018      	beq.n	80087e2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	623b      	str	r3, [r7, #32]
 80087d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	69f9      	ldr	r1, [r7, #28]
 80087d4:	6a3a      	ldr	r2, [r7, #32]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	61bb      	str	r3, [r7, #24]
   return(result);
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fff9 	bl	80097e0 <UART_Start_Receive_IT>
 80087ee:	4603      	mov	r3, r0
 80087f0:	e000      	b.n	80087f4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80087f2:	2302      	movs	r3, #2
  }
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3728      	adds	r7, #40	@ 0x28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40008000 	.word	0x40008000

08008800 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	@ 0x28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008814:	2b20      	cmp	r3, #32
 8008816:	d17a      	bne.n	800890e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_UART_Transmit_DMA+0x24>
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e073      	b.n	8008910 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_UART_Transmit_DMA+0x36>
 8008832:	2302      	movs	r3, #2
 8008834:	e06c      	b.n	8008910 <HAL_UART_Transmit_DMA+0x110>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2221      	movs	r2, #33	@ 0x21
 8008860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02c      	beq.n	80088c6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008870:	4a29      	ldr	r2, [pc, #164]	@ (8008918 <HAL_UART_Transmit_DMA+0x118>)
 8008872:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008878:	4a28      	ldr	r2, [pc, #160]	@ (800891c <HAL_UART_Transmit_DMA+0x11c>)
 800887a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008880:	4a27      	ldr	r2, [pc, #156]	@ (8008920 <HAL_UART_Transmit_DMA+0x120>)
 8008882:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008888:	2200      	movs	r2, #0
 800888a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	4619      	mov	r1, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3328      	adds	r3, #40	@ 0x28
 800889c:	461a      	mov	r2, r3
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	f7fc fa3e 	bl	8004d20 <HAL_DMA_Start_IT>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2210      	movs	r2, #16
 80088ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e024      	b.n	8008910 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	613b      	str	r3, [r7, #16]
   return(result);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f6:	623a      	str	r2, [r7, #32]
 80088f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	69f9      	ldr	r1, [r7, #28]
 80088fc:	6a3a      	ldr	r2, [r7, #32]
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	61bb      	str	r3, [r7, #24]
   return(result);
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e5      	bne.n	80088d6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	e000      	b.n	8008910 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800890e:	2302      	movs	r3, #2
  }
}
 8008910:	4618      	mov	r0, r3
 8008912:	3728      	adds	r7, #40	@ 0x28
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08009b7b 	.word	0x08009b7b
 800891c:	08009c15 	.word	0x08009c15
 8008920:	08009c31 	.word	0x08009c31

08008924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b0ba      	sub	sp, #232	@ 0xe8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800894a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800894e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008952:	4013      	ands	r3, r2
 8008954:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11b      	bne.n	8008998 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d015      	beq.n	8008998 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800896c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800897c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d009      	beq.n	8008998 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 82d6 	beq.w	8008f3a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
      }
      return;
 8008996:	e2d0      	b.n	8008f3a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 811f 	beq.w	8008be0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089a6:	4b8b      	ldr	r3, [pc, #556]	@ (8008bd4 <HAL_UART_IRQHandler+0x2b0>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089b2:	4b89      	ldr	r3, [pc, #548]	@ (8008bd8 <HAL_UART_IRQHandler+0x2b4>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8112 	beq.w	8008be0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d011      	beq.n	80089ec <HAL_UART_IRQHandler+0xc8>
 80089c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2201      	movs	r2, #1
 80089da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d011      	beq.n	8008a1c <HAL_UART_IRQHandler+0xf8>
 80089f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a12:	f043 0204 	orr.w	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d011      	beq.n	8008a4c <HAL_UART_IRQHandler+0x128>
 8008a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a42:	f043 0202 	orr.w	r2, r3, #2
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d017      	beq.n	8008a88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d105      	bne.n	8008a70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <HAL_UART_IRQHandler+0x2b0>)
 8008a6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2208      	movs	r2, #8
 8008a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a7e:	f043 0208 	orr.w	r2, r3, #8
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d012      	beq.n	8008aba <HAL_UART_IRQHandler+0x196>
 8008a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 823c 	beq.w	8008f3e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d007      	beq.n	8008afa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0e:	2b40      	cmp	r3, #64	@ 0x40
 8008b10:	d005      	beq.n	8008b1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d04f      	beq.n	8008bbe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 ffc6 	bl	8009ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2e:	2b40      	cmp	r3, #64	@ 0x40
 8008b30:	d141      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1d9      	bne.n	8008b32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d013      	beq.n	8008bae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b8a:	4a14      	ldr	r2, [pc, #80]	@ (8008bdc <HAL_UART_IRQHandler+0x2b8>)
 8008b8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fc f9a0 	bl	8004ed8 <HAL_DMA_Abort_IT>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d017      	beq.n	8008bce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bac:	e00f      	b.n	8008bce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f9d9 	bl	8008f66 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb4:	e00b      	b.n	8008bce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f9d5 	bl	8008f66 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbc:	e007      	b.n	8008bce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9d1 	bl	8008f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8008bcc:	e1b7      	b.n	8008f3e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bce:	bf00      	nop
    return;
 8008bd0:	e1b5      	b.n	8008f3e <HAL_UART_IRQHandler+0x61a>
 8008bd2:	bf00      	nop
 8008bd4:	10000001 	.word	0x10000001
 8008bd8:	04000120 	.word	0x04000120
 8008bdc:	08009cb1 	.word	0x08009cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	f040 814a 	bne.w	8008e7e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 8143 	beq.w	8008e7e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 813c 	beq.w	8008e7e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2210      	movs	r2, #16
 8008c0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c18:	2b40      	cmp	r3, #64	@ 0x40
 8008c1a:	f040 80b5 	bne.w	8008d88 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008c2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8187 	beq.w	8008f42 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	f080 817f 	bcs.w	8008f42 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 8086 	bne.w	8008d6c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1da      	bne.n	8008c60 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e1      	bne.n	8008caa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e3      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d3c:	f023 0310 	bic.w	r3, r3, #16
 8008d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e4      	bne.n	8008d2c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fc f858 	bl	8004e1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f8f9 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008d86:	e0dc      	b.n	8008f42 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 80ce 	beq.w	8008f46 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80c9 	beq.w	8008f46 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dd8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e4      	bne.n	8008db4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e1      	bne.n	8008dea <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	69b9      	ldr	r1, [r7, #24]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	617b      	str	r3, [r7, #20]
   return(result);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e4      	bne.n	8008e3a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f87e 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008e7c:	e063      	b.n	8008f46 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00e      	beq.n	8008ea8 <HAL_UART_IRQHandler+0x584>
 8008e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008e9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fba3 	bl	800a5ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ea6:	e051      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d014      	beq.n	8008ede <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d105      	bne.n	8008ecc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d008      	beq.n	8008ede <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d03a      	beq.n	8008f4a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
    }
    return;
 8008edc:	e035      	b.n	8008f4a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <HAL_UART_IRQHandler+0x5da>
 8008eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fef0 	bl	8009cdc <UART_EndTransmit_IT>
    return;
 8008efc:	e026      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <HAL_UART_IRQHandler+0x5fa>
 8008f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 fb7a 	bl	800a610 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f1c:	e016      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <HAL_UART_IRQHandler+0x628>
 8008f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	da0c      	bge.n	8008f4c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f001 fb63 	bl	800a5fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f38:	e008      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
      return;
 8008f3a:	bf00      	nop
 8008f3c:	e006      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
    return;
 8008f3e:	bf00      	nop
 8008f40:	e004      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
      return;
 8008f42:	bf00      	nop
 8008f44:	e002      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
      return;
 8008f46:	bf00      	nop
 8008f48:	e000      	b.n	8008f4c <HAL_UART_IRQHandler+0x628>
    return;
 8008f4a:	bf00      	nop
  }
}
 8008f4c:	37e8      	adds	r7, #232	@ 0xe8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop

08008f54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	4770      	bx	lr

08008f66 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr
	...

08008f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f94:	b08c      	sub	sp, #48	@ 0x30
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b94      	ldr	r3, [pc, #592]	@ (8009210 <UART_SetConfig+0x280>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a89      	ldr	r2, [pc, #548]	@ (8009214 <UART_SetConfig+0x284>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009006:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009010:	430b      	orrs	r3, r1
 8009012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	f023 010f 	bic.w	r1, r3, #15
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a7a      	ldr	r2, [pc, #488]	@ (8009218 <UART_SetConfig+0x288>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d127      	bne.n	8009084 <UART_SetConfig+0xf4>
 8009034:	2003      	movs	r0, #3
 8009036:	f7ff f9b3 	bl	80083a0 <LL_RCC_GetUSARTClockSource>
 800903a:	4603      	mov	r3, r0
 800903c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8009040:	2b03      	cmp	r3, #3
 8009042:	d81b      	bhi.n	800907c <UART_SetConfig+0xec>
 8009044:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <UART_SetConfig+0xbc>)
 8009046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904a:	bf00      	nop
 800904c:	0800905d 	.word	0x0800905d
 8009050:	0800906d 	.word	0x0800906d
 8009054:	08009065 	.word	0x08009065
 8009058:	08009075 	.word	0x08009075
 800905c:	2301      	movs	r3, #1
 800905e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009062:	e080      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009064:	2302      	movs	r3, #2
 8009066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906a:	e07c      	b.n	8009166 <UART_SetConfig+0x1d6>
 800906c:	2304      	movs	r3, #4
 800906e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009072:	e078      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009074:	2308      	movs	r3, #8
 8009076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907a:	e074      	b.n	8009166 <UART_SetConfig+0x1d6>
 800907c:	2310      	movs	r3, #16
 800907e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009082:	e070      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a64      	ldr	r2, [pc, #400]	@ (800921c <UART_SetConfig+0x28c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d138      	bne.n	8009100 <UART_SetConfig+0x170>
 800908e:	200c      	movs	r0, #12
 8009090:	f7ff f986 	bl	80083a0 <LL_RCC_GetUSARTClockSource>
 8009094:	4603      	mov	r3, r0
 8009096:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800909a:	2b0c      	cmp	r3, #12
 800909c:	d82c      	bhi.n	80090f8 <UART_SetConfig+0x168>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <UART_SetConfig+0x114>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	080090f9 	.word	0x080090f9
 80090ac:	080090f9 	.word	0x080090f9
 80090b0:	080090f9 	.word	0x080090f9
 80090b4:	080090e9 	.word	0x080090e9
 80090b8:	080090f9 	.word	0x080090f9
 80090bc:	080090f9 	.word	0x080090f9
 80090c0:	080090f9 	.word	0x080090f9
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090f9 	.word	0x080090f9
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	080090f1 	.word	0x080090f1
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090de:	e042      	b.n	8009166 <UART_SetConfig+0x1d6>
 80090e0:	2302      	movs	r3, #2
 80090e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e6:	e03e      	b.n	8009166 <UART_SetConfig+0x1d6>
 80090e8:	2304      	movs	r3, #4
 80090ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ee:	e03a      	b.n	8009166 <UART_SetConfig+0x1d6>
 80090f0:	2308      	movs	r3, #8
 80090f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f6:	e036      	b.n	8009166 <UART_SetConfig+0x1d6>
 80090f8:	2310      	movs	r3, #16
 80090fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090fe:	e032      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a43      	ldr	r2, [pc, #268]	@ (8009214 <UART_SetConfig+0x284>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d12a      	bne.n	8009160 <UART_SetConfig+0x1d0>
 800910a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800910e:	f7ff f959 	bl	80083c4 <LL_RCC_GetLPUARTClockSource>
 8009112:	4603      	mov	r3, r0
 8009114:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009118:	d01a      	beq.n	8009150 <UART_SetConfig+0x1c0>
 800911a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800911e:	d81b      	bhi.n	8009158 <UART_SetConfig+0x1c8>
 8009120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009124:	d00c      	beq.n	8009140 <UART_SetConfig+0x1b0>
 8009126:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800912a:	d815      	bhi.n	8009158 <UART_SetConfig+0x1c8>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <UART_SetConfig+0x1a8>
 8009130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009134:	d008      	beq.n	8009148 <UART_SetConfig+0x1b8>
 8009136:	e00f      	b.n	8009158 <UART_SetConfig+0x1c8>
 8009138:	2300      	movs	r3, #0
 800913a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913e:	e012      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009140:	2302      	movs	r3, #2
 8009142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009146:	e00e      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009148:	2304      	movs	r3, #4
 800914a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914e:	e00a      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009150:	2308      	movs	r3, #8
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009156:	e006      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009158:	2310      	movs	r3, #16
 800915a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800915e:	e002      	b.n	8009166 <UART_SetConfig+0x1d6>
 8009160:	2310      	movs	r3, #16
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a2a      	ldr	r2, [pc, #168]	@ (8009214 <UART_SetConfig+0x284>)
 800916c:	4293      	cmp	r3, r2
 800916e:	f040 80a4 	bne.w	80092ba <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009172:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009176:	2b08      	cmp	r3, #8
 8009178:	d823      	bhi.n	80091c2 <UART_SetConfig+0x232>
 800917a:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0x1f0>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091c3 	.word	0x080091c3
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091c3 	.word	0x080091c3
 8009190:	080091b3 	.word	0x080091b3
 8009194:	080091c3 	.word	0x080091c3
 8009198:	080091c3 	.word	0x080091c3
 800919c:	080091c3 	.word	0x080091c3
 80091a0:	080091bb 	.word	0x080091bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a4:	f7fd fde8 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 80091a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091aa:	e010      	b.n	80091ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009220 <UART_SetConfig+0x290>)
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091b0:	e00d      	b.n	80091ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091b2:	f7fd fd2d 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 80091b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091b8:	e009      	b.n	80091ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091c0:	e005      	b.n	80091ce <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8137 	beq.w	8009444 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	4a12      	ldr	r2, [pc, #72]	@ (8009224 <UART_SetConfig+0x294>)
 80091dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e0:	461a      	mov	r2, r3
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	4413      	add	r3, r2
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d305      	bcc.n	8009206 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	429a      	cmp	r2, r3
 8009204:	d910      	bls.n	8009228 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800920c:	e11a      	b.n	8009444 <UART_SetConfig+0x4b4>
 800920e:	bf00      	nop
 8009210:	cfff69f3 	.word	0xcfff69f3
 8009214:	40008000 	.word	0x40008000
 8009218:	40013800 	.word	0x40013800
 800921c:	40004400 	.word	0x40004400
 8009220:	00f42400 	.word	0x00f42400
 8009224:	08020058 	.word	0x08020058
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2200      	movs	r2, #0
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	60fa      	str	r2, [r7, #12]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a8e      	ldr	r2, [pc, #568]	@ (8009470 <UART_SetConfig+0x4e0>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	b29b      	uxth	r3, r3
 800923c:	2200      	movs	r2, #0
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800924a:	f7f7 ff29 	bl	80010a0 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	020b      	lsls	r3, r1, #8
 8009260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009264:	0202      	lsls	r2, r0, #8
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	6849      	ldr	r1, [r1, #4]
 800926a:	0849      	lsrs	r1, r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	460c      	mov	r4, r1
 8009270:	4605      	mov	r5, r0
 8009272:	eb12 0804 	adds.w	r8, r2, r4
 8009276:	eb43 0905 	adc.w	r9, r3, r5
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	469a      	mov	sl, r3
 8009282:	4693      	mov	fp, r2
 8009284:	4652      	mov	r2, sl
 8009286:	465b      	mov	r3, fp
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 ff08 	bl	80010a0 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4613      	mov	r3, r2
 8009296:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929e:	d308      	bcc.n	80092b2 <UART_SetConfig+0x322>
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a6:	d204      	bcs.n	80092b2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a3a      	ldr	r2, [r7, #32]
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e0c8      	b.n	8009444 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092b8:	e0c4      	b.n	8009444 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c2:	d168      	bne.n	8009396 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80092c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d828      	bhi.n	800931e <UART_SetConfig+0x38e>
 80092cc:	a201      	add	r2, pc, #4	@ (adr r2, 80092d4 <UART_SetConfig+0x344>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009309 	.word	0x08009309
 80092e0:	0800931f 	.word	0x0800931f
 80092e4:	0800930f 	.word	0x0800930f
 80092e8:	0800931f 	.word	0x0800931f
 80092ec:	0800931f 	.word	0x0800931f
 80092f0:	0800931f 	.word	0x0800931f
 80092f4:	08009317 	.word	0x08009317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fd fd3e 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 80092fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092fe:	e014      	b.n	800932a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009300:	f7fd fd4c 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 8009304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009306:	e010      	b.n	800932a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009308:	4b5a      	ldr	r3, [pc, #360]	@ (8009474 <UART_SetConfig+0x4e4>)
 800930a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800930c:	e00d      	b.n	800932a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930e:	f7fd fc7f 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 8009312:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009314:	e009      	b.n	800932a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800931a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800931c:	e005      	b.n	800932a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8089 	beq.w	8009444 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009336:	4a4e      	ldr	r2, [pc, #312]	@ (8009470 <UART_SetConfig+0x4e0>)
 8009338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800933c:	461a      	mov	r2, r3
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	fbb3 f3f2 	udiv	r3, r3, r2
 8009344:	005a      	lsls	r2, r3, #1
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	441a      	add	r2, r3
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	fbb2 f3f3 	udiv	r3, r2, r3
 8009356:	b29b      	uxth	r3, r3
 8009358:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	2b0f      	cmp	r3, #15
 800935e:	d916      	bls.n	800938e <UART_SetConfig+0x3fe>
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009366:	d212      	bcs.n	800938e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f023 030f 	bic.w	r3, r3, #15
 8009370:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	b29a      	uxth	r2, r3
 800937e:	8bfb      	ldrh	r3, [r7, #30]
 8009380:	4313      	orrs	r3, r2
 8009382:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	8bfa      	ldrh	r2, [r7, #30]
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e05a      	b.n	8009444 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009394:	e056      	b.n	8009444 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009396:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800939a:	2b08      	cmp	r3, #8
 800939c:	d827      	bhi.n	80093ee <UART_SetConfig+0x45e>
 800939e:	a201      	add	r2, pc, #4	@ (adr r2, 80093a4 <UART_SetConfig+0x414>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	080093c9 	.word	0x080093c9
 80093a8:	080093d1 	.word	0x080093d1
 80093ac:	080093d9 	.word	0x080093d9
 80093b0:	080093ef 	.word	0x080093ef
 80093b4:	080093df 	.word	0x080093df
 80093b8:	080093ef 	.word	0x080093ef
 80093bc:	080093ef 	.word	0x080093ef
 80093c0:	080093ef 	.word	0x080093ef
 80093c4:	080093e7 	.word	0x080093e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c8:	f7fd fcd6 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 80093cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ce:	e014      	b.n	80093fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d0:	f7fd fce4 	bl	8006d9c <HAL_RCC_GetPCLK2Freq>
 80093d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093d6:	e010      	b.n	80093fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093d8:	4b26      	ldr	r3, [pc, #152]	@ (8009474 <UART_SetConfig+0x4e4>)
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093dc:	e00d      	b.n	80093fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093de:	f7fd fc17 	bl	8006c10 <HAL_RCC_GetSysClockFreq>
 80093e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093e4:	e009      	b.n	80093fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093ec:	e005      	b.n	80093fa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093f8:	bf00      	nop
    }

    if (pclk != 0U)
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d021      	beq.n	8009444 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009404:	4a1a      	ldr	r2, [pc, #104]	@ (8009470 <UART_SetConfig+0x4e0>)
 8009406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800940a:	461a      	mov	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	441a      	add	r2, r3
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	b29b      	uxth	r3, r3
 8009424:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	2b0f      	cmp	r3, #15
 800942a:	d908      	bls.n	800943e <UART_SetConfig+0x4ae>
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009432:	d204      	bcs.n	800943e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6a3a      	ldr	r2, [r7, #32]
 800943a:	60da      	str	r2, [r3, #12]
 800943c:	e002      	b.n	8009444 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2201      	movs	r2, #1
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2201      	movs	r2, #1
 8009450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2200      	movs	r2, #0
 8009458:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2200      	movs	r2, #0
 800945e:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8009460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009464:	4618      	mov	r0, r3
 8009466:	3730      	adds	r7, #48	@ 0x30
 8009468:	46bd      	mov	sp, r7
 800946a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800946e:	bf00      	nop
 8009470:	08020058 	.word	0x08020058
 8009474:	00f42400 	.word	0x00f42400

08009478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01a      	beq.n	800958e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009576:	d10a      	bne.n	800958e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af02      	add	r7, sp, #8
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095ca:	f7f9 f8b1 	bl	8002730 <HAL_GetTick>
 80095ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0308 	and.w	r3, r3, #8
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d10e      	bne.n	80095fc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f82f 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e025      	b.n	8009648 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b04      	cmp	r3, #4
 8009608:	d10e      	bne.n	8009628 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800960a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f819 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e00f      	b.n	8009648 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b09c      	sub	sp, #112	@ 0x70
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	4613      	mov	r3, r2
 800965e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009660:	e0a9      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009668:	f000 80a5 	beq.w	80097b6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966c:	f7f9 f860 	bl	8002730 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009678:	429a      	cmp	r2, r3
 800967a:	d302      	bcc.n	8009682 <UART_WaitOnFlagUntilTimeout+0x32>
 800967c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800967e:	2b00      	cmp	r3, #0
 8009680:	d140      	bne.n	8009704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009692:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009696:	667b      	str	r3, [r7, #100]	@ 0x64
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096a2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80096ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	f023 0301 	bic.w	r3, r3, #1
 80096ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80096d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e5      	bne.n	80096b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e069      	b.n	80097d8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d051      	beq.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800971c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009720:	d149      	bne.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800972a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
 800974c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e6      	bne.n	800972c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	613b      	str	r3, [r7, #16]
   return(result);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800977e:	623a      	str	r2, [r7, #32]
 8009780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	69f9      	ldr	r1, [r7, #28]
 8009784:	6a3a      	ldr	r2, [r7, #32]
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	61bb      	str	r3, [r7, #24]
   return(result);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e010      	b.n	80097d8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4013      	ands	r3, r2
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	bf0c      	ite	eq
 80097c6:	2301      	moveq	r3, #1
 80097c8:	2300      	movne	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	f43f af46 	beq.w	8009662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3770      	adds	r7, #112	@ 0x70
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b0a3      	sub	sp, #140	@ 0x8c
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	88fa      	ldrh	r2, [r7, #6]
 8009800:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009812:	d10e      	bne.n	8009832 <UART_Start_Receive_IT+0x52>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <UART_Start_Receive_IT+0x48>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009822:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009826:	e02d      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	22ff      	movs	r2, #255	@ 0xff
 800982c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009830:	e028      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10d      	bne.n	8009856 <UART_Start_Receive_IT+0x76>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <UART_Start_Receive_IT+0x6c>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	22ff      	movs	r2, #255	@ 0xff
 8009846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800984a:	e01b      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	227f      	movs	r2, #127	@ 0x7f
 8009850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009854:	e016      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800985e:	d10d      	bne.n	800987c <UART_Start_Receive_IT+0x9c>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <UART_Start_Receive_IT+0x92>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	227f      	movs	r2, #127	@ 0x7f
 800986c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009870:	e008      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	223f      	movs	r2, #63	@ 0x3f
 8009876:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800987a:	e003      	b.n	8009884 <UART_Start_Receive_IT+0xa4>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2222      	movs	r2, #34	@ 0x22
 8009890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80098a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80098b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80098ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80098be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80098c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e3      	bne.n	8009894 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098d4:	d153      	bne.n	800997e <UART_Start_Receive_IT+0x19e>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80098dc:	88fa      	ldrh	r2, [r7, #6]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d34d      	bcc.n	800997e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ea:	d107      	bne.n	80098fc <UART_Start_Receive_IT+0x11c>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d103      	bne.n	80098fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009a20 <UART_Start_Receive_IT+0x240>)
 80098f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80098fa:	e002      	b.n	8009902 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4a49      	ldr	r2, [pc, #292]	@ (8009a24 <UART_Start_Receive_IT+0x244>)
 8009900:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01a      	beq.n	8009948 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009936:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800993a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e4      	bne.n	8009912 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3308      	adds	r3, #8
 800994e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009968:	64ba      	str	r2, [r7, #72]	@ 0x48
 800996a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800996e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e5      	bne.n	8009948 <UART_Start_Receive_IT+0x168>
 800997c:	e04a      	b.n	8009a14 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009986:	d107      	bne.n	8009998 <UART_Start_Receive_IT+0x1b8>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a25      	ldr	r2, [pc, #148]	@ (8009a28 <UART_Start_Receive_IT+0x248>)
 8009994:	671a      	str	r2, [r3, #112]	@ 0x70
 8009996:	e002      	b.n	800999e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4a24      	ldr	r2, [pc, #144]	@ (8009a2c <UART_Start_Receive_IT+0x24c>)
 800999c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d019      	beq.n	80099e2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80099c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e6      	bne.n	80099ae <UART_Start_Receive_IT+0x1ce>
 80099e0:	e018      	b.n	8009a14 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	613b      	str	r3, [r7, #16]
   return(result);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f043 0320 	orr.w	r3, r3, #32
 80099f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a00:	623b      	str	r3, [r7, #32]
 8009a02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	69f9      	ldr	r1, [r7, #28]
 8009a06:	6a3a      	ldr	r2, [r7, #32]
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e6      	bne.n	80099e2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	378c      	adds	r7, #140	@ 0x8c
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr
 8009a20:	0800a2ed 	.word	0x0800a2ed
 8009a24:	08009ff5 	.word	0x08009ff5
 8009a28:	08009e93 	.word	0x08009e93
 8009a2c:	08009d33 	.word	0x08009d33

08009a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b08f      	sub	sp, #60	@ 0x3c
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e6      	bne.n	8009a38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a8a:	61ba      	str	r2, [r7, #24]
 8009a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6979      	ldr	r1, [r7, #20]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	613b      	str	r3, [r7, #16]
   return(result);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8009aa6:	bf00      	nop
 8009aa8:	373c      	adds	r7, #60	@ 0x3c
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr

08009ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b095      	sub	sp, #84	@ 0x54
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e6      	bne.n	8009ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3308      	adds	r3, #8
 8009af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e3      	bne.n	8009aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d118      	bne.n	8009b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f023 0310 	bic.w	r3, r3, #16
 8009b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6979      	ldr	r1, [r7, #20]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	613b      	str	r3, [r7, #16]
   return(result);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009b70:	bf00      	nop
 8009b72:	3754      	adds	r7, #84	@ 0x54
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bc80      	pop	{r7}
 8009b78:	4770      	bx	lr

08009b7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b090      	sub	sp, #64	@ 0x40
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d137      	bne.n	8009c06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e5      	bne.n	8009b9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	69b9      	ldr	r1, [r7, #24]
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e6      	bne.n	8009bd2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c04:	e002      	b.n	8009c0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009c06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009c08:	f7f9 fc1a 	bl	8003440 <HAL_UART_TxCpltCallback>
}
 8009c0c:	bf00      	nop
 8009c0e:	3740      	adds	r7, #64	@ 0x40
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff f996 	bl	8008f54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c58:	2b80      	cmp	r3, #128	@ 0x80
 8009c5a:	d109      	bne.n	8009c70 <UART_DMAError+0x40>
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b21      	cmp	r3, #33	@ 0x21
 8009c60:	d106      	bne.n	8009c70 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7ff fee0 	bl	8009a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7a:	2b40      	cmp	r3, #64	@ 0x40
 8009c7c:	d109      	bne.n	8009c92 <UART_DMAError+0x62>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b22      	cmp	r3, #34	@ 0x22
 8009c82:	d106      	bne.n	8009c92 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009c8c:	6978      	ldr	r0, [r7, #20]
 8009c8e:	f7ff ff0f 	bl	8009ab0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c98:	f043 0210 	orr.w	r2, r3, #16
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ca2:	6978      	ldr	r0, [r7, #20]
 8009ca4:	f7ff f95f 	bl	8008f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ca8:	bf00      	nop
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff f949 	bl	8008f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cf8:	61fb      	str	r3, [r7, #28]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6979      	ldr	r1, [r7, #20]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e6      	bne.n	8009ce4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7f9 fb8b 	bl	8003440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d2a:	bf00      	nop
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b096      	sub	sp, #88	@ 0x58
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d4a:	2b22      	cmp	r3, #34	@ 0x22
 8009d4c:	f040 8095 	bne.w	8009e7a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009d5e:	b2d9      	uxtb	r1, r3
 8009d60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d6a:	400a      	ands	r2, r1
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d178      	bne.n	8009e8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009db8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e6      	bne.n	8009d98 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df2:	e841 2300 	strex	r3, r2, [r1]
 8009df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1e5      	bne.n	8009dca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d12e      	bne.n	8009e72 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0310 	bic.w	r3, r3, #16
 8009e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e38:	61fb      	str	r3, [r7, #28]
 8009e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	69b9      	ldr	r1, [r7, #24]
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	617b      	str	r3, [r7, #20]
   return(result);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e6      	bne.n	8009e1a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d103      	bne.n	8009e62 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2210      	movs	r2, #16
 8009e60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff f884 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e70:	e00b      	b.n	8009e8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7f9 fafa 	bl	800346c <HAL_UART_RxCpltCallback>
}
 8009e78:	e007      	b.n	8009e8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 0208 	orr.w	r2, r2, #8
 8009e88:	619a      	str	r2, [r3, #24]
}
 8009e8a:	bf00      	nop
 8009e8c:	3758      	adds	r7, #88	@ 0x58
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b096      	sub	sp, #88	@ 0x58
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ea0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eaa:	2b22      	cmp	r3, #34	@ 0x22
 8009eac:	f040 8095 	bne.w	8009fda <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ebe:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ec0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009ec4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009ec8:	4013      	ands	r3, r2
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ece:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed4:	1c9a      	adds	r2, r3, #2
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d178      	bne.n	8009fea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e6      	bne.n	8009ef8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3308      	adds	r3, #8
 8009f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	f023 0301 	bic.w	r3, r3, #1
 8009f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e5      	bne.n	8009f2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d12e      	bne.n	8009fd2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f023 0310 	bic.w	r3, r3, #16
 8009f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6979      	ldr	r1, [r7, #20]
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e6      	bne.n	8009f7a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	f003 0310 	and.w	r3, r3, #16
 8009fb6:	2b10      	cmp	r3, #16
 8009fb8:	d103      	bne.n	8009fc2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fe ffd4 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fd0:	e00b      	b.n	8009fea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7f9 fa4a 	bl	800346c <HAL_UART_RxCpltCallback>
}
 8009fd8:	e007      	b.n	8009fea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	699a      	ldr	r2, [r3, #24]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f042 0208 	orr.w	r2, r2, #8
 8009fe8:	619a      	str	r2, [r3, #24]
}
 8009fea:	bf00      	nop
 8009fec:	3758      	adds	r7, #88	@ 0x58
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b0a6      	sub	sp, #152	@ 0x98
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a002:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a02a:	2b22      	cmp	r3, #34	@ 0x22
 800a02c:	f040 814f 	bne.w	800a2ce <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a036:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a03a:	e0f6      	b.n	800a22a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a046:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a04a:	b2d9      	uxtb	r1, r3
 800a04c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a056:	400a      	ands	r2, r1
 800a058:	b2d2      	uxtb	r2, r2
 800a05a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	3b01      	subs	r3, #1
 800a070:	b29a      	uxth	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d053      	beq.n	800a136 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a08e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <UART_RxISR_8BIT_FIFOEN+0xca>
 800a09a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0b4:	f043 0201 	orr.w	r2, r3, #1
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d011      	beq.n	800a0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a0ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0e4:	f043 0204 	orr.w	r2, r3, #4
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a0f2:	f003 0304 	and.w	r3, r3, #4
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a0fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00b      	beq.n	800a11e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2204      	movs	r2, #4
 800a10c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a114:	f043 0202 	orr.w	r2, r3, #2
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d006      	beq.n	800a136 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7fe ff1c 	bl	8008f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d173      	bne.n	800a22a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a164:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a166:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a16a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e4      	bne.n	800a142 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a18a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a19c:	657a      	str	r2, [r7, #84]	@ 0x54
 800a19e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e3      	bne.n	800a178 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d12e      	bne.n	800a224 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f023 0310 	bic.w	r3, r3, #16
 800a1e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1f2:	e841 2300 	strex	r3, r2, [r1]
 800a1f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1e6      	bne.n	800a1cc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	2b10      	cmp	r3, #16
 800a20a:	d103      	bne.n	800a214 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2210      	movs	r2, #16
 800a212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7fe feab 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
 800a222:	e002      	b.n	800a22a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7f9 f921 	bl	800346c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a22a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a232:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f aefe 	bne.w	800a03c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a246:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a24a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d045      	beq.n	800a2de <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d23e      	bcs.n	800a2de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3308      	adds	r3, #8
 800a266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a276:	673b      	str	r3, [r7, #112]	@ 0x70
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e5      	bne.n	800a260 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a14      	ldr	r2, [pc, #80]	@ (800a2e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f043 0320 	orr.w	r3, r3, #32
 800a2ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b8:	61bb      	str	r3, [r7, #24]
 800a2ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6979      	ldr	r1, [r7, #20]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e6      	bne.n	800a29a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2cc:	e007      	b.n	800a2de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	699a      	ldr	r2, [r3, #24]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0208 	orr.w	r2, r2, #8
 800a2dc:	619a      	str	r2, [r3, #24]
}
 800a2de:	bf00      	nop
 800a2e0:	3798      	adds	r7, #152	@ 0x98
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	08009d33 	.word	0x08009d33

0800a2ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b0a8      	sub	sp, #160	@ 0xa0
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a2fa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a322:	2b22      	cmp	r3, #34	@ 0x22
 800a324:	f040 8153 	bne.w	800a5ce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a32e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a332:	e0fa      	b.n	800a52a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a346:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800a34a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a34e:	4013      	ands	r3, r2
 800a350:	b29a      	uxth	r2, r3
 800a352:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a356:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35c:	1c9a      	adds	r2, r3, #2
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a368:	b29b      	uxth	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a37e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	2b00      	cmp	r3, #0
 800a388:	d053      	beq.n	800a432 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	d011      	beq.n	800a3ba <UART_RxISR_16BIT_FIFOEN+0xce>
 800a396:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a39a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00b      	beq.n	800a3ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3b0:	f043 0201 	orr.w	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d011      	beq.n	800a3ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a3c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3e0:	f043 0204 	orr.w	r2, r3, #4
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3ee:	f003 0304 	and.w	r3, r3, #4
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d011      	beq.n	800a41a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00b      	beq.n	800a41a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2204      	movs	r2, #4
 800a408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a410:	f043 0202 	orr.w	r2, r3, #2
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d006      	beq.n	800a432 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7fe fd9e 	bl	8008f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d175      	bne.n	800a52a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a44c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a44e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a460:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a462:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a466:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a46e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e4      	bne.n	800a43e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a49c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a49e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e1      	bne.n	800a474 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d12e      	bne.n	800a524 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4dc:	f023 0310 	bic.w	r3, r3, #16
 800a4e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e6      	bne.n	800a4cc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	f003 0310 	and.w	r3, r3, #16
 800a508:	2b10      	cmp	r3, #16
 800a50a:	d103      	bne.n	800a514 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2210      	movs	r2, #16
 800a512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7fe fd2b 	bl	8008f78 <HAL_UARTEx_RxEventCallback>
 800a522:	e002      	b.n	800a52a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7f8 ffa1 	bl	800346c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a52a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a532:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a536:	f003 0320 	and.w	r3, r3, #32
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f47f aefa 	bne.w	800a334 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a546:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a54a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d045      	beq.n	800a5de <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a558:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d23e      	bcs.n	800a5de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3308      	adds	r3, #8
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	623b      	str	r3, [r7, #32]
   return(result);
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a576:	677b      	str	r3, [r7, #116]	@ 0x74
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a580:	633a      	str	r2, [r7, #48]	@ 0x30
 800a582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e5      	bne.n	800a560 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a14      	ldr	r2, [pc, #80]	@ (800a5e8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a598:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f043 0320 	orr.w	r3, r3, #32
 800a5ae:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5b8:	61fb      	str	r3, [r7, #28]
 800a5ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	69b9      	ldr	r1, [r7, #24]
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e6      	bne.n	800a59a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5cc:	e007      	b.n	800a5de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0208 	orr.w	r2, r2, #8
 800a5dc:	619a      	str	r2, [r3, #24]
}
 800a5de:	bf00      	nop
 800a5e0:	37a0      	adds	r7, #160	@ 0xa0
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	08009e93 	.word	0x08009e93

0800a5ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bc80      	pop	{r7}
 800a60e:	4770      	bx	lr

0800a610 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bc80      	pop	{r7}
 800a620:	4770      	bx	lr

0800a622 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b088      	sub	sp, #32
 800a626:	af02      	add	r7, sp, #8
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	1d3b      	adds	r3, r7, #4
 800a62c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a63e:	2302      	movs	r3, #2
 800a640:	e046      	b.n	800a6d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2224      	movs	r2, #36	@ 0x24
 800a64e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0201 	bic.w	r2, r2, #1
 800a660:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a67c:	1d3b      	adds	r3, r7, #4
 800a67e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f949 	bl	800a91a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0201 	orr.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a698:	f7f8 f84a 	bl	8002730 <HAL_GetTick>
 800a69c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a69e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7fe ffcf 	bl	8009650 <UART_WaitOnFlagUntilTimeout>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	75fb      	strb	r3, [r7, #23]
 800a6bc:	e003      	b.n	800a6c6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b089      	sub	sp, #36	@ 0x24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d101      	bne.n	800a6ee <HAL_UARTEx_EnableStopMode+0x16>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e021      	b.n	800a732 <HAL_UARTEx_EnableStopMode+0x5a>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	60bb      	str	r3, [r7, #8]
   return(result);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f043 0302 	orr.w	r3, r3, #2
 800a70a:	61fb      	str	r3, [r7, #28]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	61bb      	str	r3, [r7, #24]
 800a716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6979      	ldr	r1, [r7, #20]
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	613b      	str	r3, [r7, #16]
   return(result);
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3724      	adds	r7, #36	@ 0x24
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr

0800a73c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <HAL_UARTEx_EnableFifoMode+0x16>
 800a74e:	2302      	movs	r3, #2
 800a750:	e02b      	b.n	800a7aa <HAL_UARTEx_EnableFifoMode+0x6e>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2224      	movs	r2, #36	@ 0x24
 800a75e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0201 	bic.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a788:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f8e4 	bl	800a960 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d101      	bne.n	800a7c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	e027      	b.n	800a818 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2224      	movs	r2, #36	@ 0x24
 800a7d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0201 	bic.w	r2, r2, #1
 800a7ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a7f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a836:	2302      	movs	r3, #2
 800a838:	e02d      	b.n	800a896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2224      	movs	r2, #36	@ 0x24
 800a846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f022 0201 	bic.w	r2, r2, #1
 800a860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f872 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e02d      	b.n	800a912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2224      	movs	r2, #36	@ 0x24
 800a8c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f834 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2220      	movs	r2, #32
 800a904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f023 0210 	bic.w	r2, r3, #16
 800a932:	893b      	ldrh	r3, [r7, #8]
 800a934:	4619      	mov	r1, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	430a      	orrs	r2, r1
 800a93c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a948:	7abb      	ldrb	r3, [r7, #10]
 800a94a:	061a      	lsls	r2, r3, #24
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	605a      	str	r2, [r3, #4]
}
 800a954:	bf00      	nop
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc80      	pop	{r7}
 800a95c:	4770      	bx	lr
	...

0800a960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d108      	bne.n	800a982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a980:	e031      	b.n	800a9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a982:	2308      	movs	r3, #8
 800a984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a986:	2308      	movs	r3, #8
 800a988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0e5b      	lsrs	r3, r3, #25
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	0f5b      	lsrs	r3, r3, #29
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	7b3a      	ldrb	r2, [r7, #12]
 800a9ae:	4910      	ldr	r1, [pc, #64]	@ (800a9f0 <UARTEx_SetNbDataToProcess+0x90>)
 800a9b0:	5c8a      	ldrb	r2, [r1, r2]
 800a9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9b6:	7b3a      	ldrb	r2, [r7, #12]
 800a9b8:	490e      	ldr	r1, [pc, #56]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	7b7a      	ldrb	r2, [r7, #13]
 800a9cc:	4908      	ldr	r1, [pc, #32]	@ (800a9f0 <UARTEx_SetNbDataToProcess+0x90>)
 800a9ce:	5c8a      	ldrb	r2, [r1, r2]
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9d4:	7b7a      	ldrb	r2, [r7, #13]
 800a9d6:	4907      	ldr	r1, [pc, #28]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bc80      	pop	{r7}
 800a9ee:	4770      	bx	lr
 800a9f0:	08020070 	.word	0x08020070
 800a9f4:	08020078 	.word	0x08020078

0800a9f8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a9fc:	f7f7 fd38 	bl	8002470 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800aa00:	f000 f820 	bl	800aa44 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800aa04:	bf00      	nop
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	f011 f926 	bl	801bc60 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800aa14:	bf00      	nop
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aa1c:	f3bf 8f4f 	dsb	sy
}
 800aa20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aa22:	4b06      	ldr	r3, [pc, #24]	@ (800aa3c <__NVIC_SystemReset+0x24>)
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aa2a:	4904      	ldr	r1, [pc, #16]	@ (800aa3c <__NVIC_SystemReset+0x24>)
 800aa2c:	4b04      	ldr	r3, [pc, #16]	@ (800aa40 <__NVIC_SystemReset+0x28>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa32:	f3bf 8f4f 	dsb	sy
}
 800aa36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <__NVIC_SystemReset+0x20>
 800aa3c:	e000ed00 	.word	0xe000ed00
 800aa40:	05fa0004 	.word	0x05fa0004

0800aa44 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9302      	str	r3, [sp, #8]
 800aa52:	2302      	movs	r3, #2
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	2301      	movs	r3, #1
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	4b5a      	ldr	r3, [pc, #360]	@ (800abc4 <LoRaWAN_Init+0x180>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2100      	movs	r1, #0
 800aa60:	2002      	movs	r0, #2
 800aa62:	f011 fd49 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800aa66:	2300      	movs	r3, #0
 800aa68:	9302      	str	r3, [sp, #8]
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	2302      	movs	r3, #2
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	4b55      	ldr	r3, [pc, #340]	@ (800abc8 <LoRaWAN_Init+0x184>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	2002      	movs	r0, #2
 800aa7a:	f011 fd3d 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9302      	str	r3, [sp, #8]
 800aa82:	2302      	movs	r3, #2
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	2301      	movs	r3, #1
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	4b50      	ldr	r3, [pc, #320]	@ (800abcc <LoRaWAN_Init+0x188>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	2002      	movs	r0, #2
 800aa92:	f011 fd31 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800aa96:	1d3b      	adds	r3, r7, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	f003 fb2e 	bl	800e0fc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	0e1b      	lsrs	r3, r3, #24
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	0c1b      	lsrs	r3, r3, #16
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	4619      	mov	r1, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	0a1b      	lsrs	r3, r3, #8
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	9302      	str	r3, [sp, #8]
 800aab8:	9101      	str	r1, [sp, #4]
 800aaba:	9200      	str	r2, [sp, #0]
 800aabc:	4b44      	ldr	r3, [pc, #272]	@ (800abd0 <LoRaWAN_Init+0x18c>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	2100      	movs	r1, #0
 800aac2:	2002      	movs	r0, #2
 800aac4:	f011 fd18 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800aac8:	1d3b      	adds	r3, r7, #4
 800aaca:	4619      	mov	r1, r3
 800aacc:	2001      	movs	r0, #1
 800aace:	f003 fb15 	bl	800e0fc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	0e1b      	lsrs	r3, r3, #24
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	0c1b      	lsrs	r3, r3, #16
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	4619      	mov	r1, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	0a1b      	lsrs	r3, r3, #8
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	b2c0      	uxtb	r0, r0
 800aaec:	9003      	str	r0, [sp, #12]
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	9101      	str	r1, [sp, #4]
 800aaf2:	9200      	str	r2, [sp, #0]
 800aaf4:	4b37      	ldr	r3, [pc, #220]	@ (800abd4 <LoRaWAN_Init+0x190>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2002      	movs	r0, #2
 800aafc:	f011 fcfc 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4b34      	ldr	r3, [pc, #208]	@ (800abd8 <LoRaWAN_Init+0x194>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ab0c:	4833      	ldr	r0, [pc, #204]	@ (800abdc <LoRaWAN_Init+0x198>)
 800ab0e:	f011 fa45 	bl	801bf9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800ab12:	2300      	movs	r3, #0
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	4b32      	ldr	r3, [pc, #200]	@ (800abe0 <LoRaWAN_Init+0x19c>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ab1e:	4831      	ldr	r0, [pc, #196]	@ (800abe4 <LoRaWAN_Init+0x1a0>)
 800ab20:	f011 fa3c 	bl	801bf9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800ab24:	2300      	movs	r3, #0
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	4b2f      	ldr	r3, [pc, #188]	@ (800abe8 <LoRaWAN_Init+0x1a4>)
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ab30:	482e      	ldr	r0, [pc, #184]	@ (800abec <LoRaWAN_Init+0x1a8>)
 800ab32:	f011 fa33 	bl	801bf9c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800ab36:	2300      	movs	r3, #0
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4b2d      	ldr	r3, [pc, #180]	@ (800abf0 <LoRaWAN_Init+0x1ac>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ab42:	482c      	ldr	r0, [pc, #176]	@ (800abf4 <LoRaWAN_Init+0x1b0>)
 800ab44:	f011 fa2a 	bl	801bf9c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800ab48:	4a2b      	ldr	r2, [pc, #172]	@ (800abf8 <LoRaWAN_Init+0x1b4>)
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	f011 f983 	bl	801be58 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800ab52:	4a2a      	ldr	r2, [pc, #168]	@ (800abfc <LoRaWAN_Init+0x1b8>)
 800ab54:	2100      	movs	r1, #0
 800ab56:	2002      	movs	r0, #2
 800ab58:	f011 f97e 	bl	801be58 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800ab5c:	4a28      	ldr	r2, [pc, #160]	@ (800ac00 <LoRaWAN_Init+0x1bc>)
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2004      	movs	r0, #4
 800ab62:	f011 f979 	bl	801be58 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800ab66:	4a27      	ldr	r2, [pc, #156]	@ (800ac04 <LoRaWAN_Init+0x1c0>)
 800ab68:	2100      	movs	r1, #0
 800ab6a:	2008      	movs	r0, #8
 800ab6c:	f011 f974 	bl	801be58 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800ab70:	f000 fef0 	bl	800b954 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800ab74:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800ab78:	4823      	ldr	r0, [pc, #140]	@ (800ac08 <LoRaWAN_Init+0x1c4>)
 800ab7a:	f002 fba5 	bl	800d2c8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800ab7e:	4823      	ldr	r0, [pc, #140]	@ (800ac0c <LoRaWAN_Init+0x1c8>)
 800ab80:	f002 fc00 	bl	800d384 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800ab84:	4819      	ldr	r0, [pc, #100]	@ (800abec <LoRaWAN_Init+0x1a8>)
 800ab86:	f011 fa3f 	bl	801c008 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800ab8a:	4b21      	ldr	r3, [pc, #132]	@ (800ac10 <LoRaWAN_Init+0x1cc>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	4a21      	ldr	r2, [pc, #132]	@ (800ac14 <LoRaWAN_Init+0x1d0>)
 800ab90:	7812      	ldrb	r2, [r2, #0]
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f002 fd71 	bl	800d67c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800ab9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ac18 <LoRaWAN_Init+0x1d4>)
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800aba2:	4b1e      	ldr	r3, [pc, #120]	@ (800ac1c <LoRaWAN_Init+0x1d8>)
 800aba4:	6819      	ldr	r1, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ac20 <LoRaWAN_Init+0x1dc>)
 800abac:	2200      	movs	r2, #0
 800abae:	481d      	ldr	r0, [pc, #116]	@ (800ac24 <LoRaWAN_Init+0x1e0>)
 800abb0:	f011 f9f4 	bl	801bf9c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800abb4:	481b      	ldr	r0, [pc, #108]	@ (800ac24 <LoRaWAN_Init+0x1e0>)
 800abb6:	f011 fa27 	bl	801c008 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	0801f5ec 	.word	0x0801f5ec
 800abc8:	0801f610 	.word	0x0801f610
 800abcc:	0801f634 	.word	0x0801f634
 800abd0:	0801f658 	.word	0x0801f658
 800abd4:	0801f67c 	.word	0x0801f67c
 800abd8:	0800b449 	.word	0x0800b449
 800abdc:	200006d8 	.word	0x200006d8
 800abe0:	0800b45b 	.word	0x0800b45b
 800abe4:	200006f0 	.word	0x200006f0
 800abe8:	0800b46d 	.word	0x0800b46d
 800abec:	20000708 	.word	0x20000708
 800abf0:	0800b81d 	.word	0x0800b81d
 800abf4:	200005cc 	.word	0x200005cc
 800abf8:	0800d611 	.word	0x0800d611
 800abfc:	0800ad99 	.word	0x0800ad99
 800ac00:	0800b841 	.word	0x0800b841
 800ac04:	0800b79d 	.word	0x0800b79d
 800ac08:	20000024 	.word	0x20000024
 800ac0c:	20000070 	.word	0x20000070
 800ac10:	20000020 	.word	0x20000020
 800ac14:	20000021 	.word	0x20000021
 800ac18:	200005b0 	.word	0x200005b0
 800ac1c:	20000084 	.word	0x20000084
 800ac20:	0800b425 	.word	0x0800b425
 800ac24:	200005b4 	.word	0x200005b4

0800ac28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac38:	d104      	bne.n	800ac44 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	2002      	movs	r0, #2
 800ac3e:	f011 f92d 	bl	801be9c <UTIL_SEQ_SetTask>
      }
      break;
 800ac42:	e000      	b.n	800ac46 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800ac44:	bf00      	nop
  }
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800ac50:	b5b0      	push	{r4, r5, r7, lr}
 800ac52:	b08a      	sub	sp, #40	@ 0x28
 800ac54:	af06      	add	r7, sp, #24
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 8086 	beq.w	800ad72 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800ac66:	4845      	ldr	r0, [pc, #276]	@ (800ad7c <OnRxData+0x12c>)
 800ac68:	f011 f9ce 	bl	801c008 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d05a      	beq.n	800ad2a <OnRxData+0xda>
    {
      if (appData != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d057      	beq.n	800ad2a <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d050      	beq.n	800ad2a <OnRxData+0xda>
        {
          switch (appData->Port)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d01f      	beq.n	800acd0 <OnRxData+0x80>
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d145      	bne.n	800ad20 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d143      	bne.n	800ad24 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d00e      	beq.n	800acc4 <OnRxData+0x74>
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	dc10      	bgt.n	800accc <OnRxData+0x7c>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <OnRxData+0x64>
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d004      	beq.n	800acbc <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800acb2:	e00b      	b.n	800accc <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800acb4:	2000      	movs	r0, #0
 800acb6:	f002 fe6d 	bl	800d994 <LmHandlerRequestClass>
                    break;
 800acba:	e008      	b.n	800acce <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800acbc:	2001      	movs	r0, #1
 800acbe:	f002 fe69 	bl	800d994 <LmHandlerRequestClass>
                    break;
 800acc2:	e004      	b.n	800acce <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800acc4:	2002      	movs	r0, #2
 800acc6:	f002 fe65 	bl	800d994 <LmHandlerRequestClass>
                    break;
 800acca:	e000      	b.n	800acce <OnRxData+0x7e>
                    break;
 800accc:	bf00      	nop
                }
              }
              break;
 800acce:	e029      	b.n	800ad24 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d127      	bne.n	800ad28 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	4b26      	ldr	r3, [pc, #152]	@ (800ad80 <OnRxData+0x130>)
 800ace6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800ace8:	4b25      	ldr	r3, [pc, #148]	@ (800ad80 <OnRxData+0x130>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10b      	bne.n	800ad08 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800acf0:	4b24      	ldr	r3, [pc, #144]	@ (800ad84 <OnRxData+0x134>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	2003      	movs	r0, #3
 800acf8:	f011 fbfe 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800acfc:	2201      	movs	r2, #1
 800acfe:	2120      	movs	r1, #32
 800ad00:	4821      	ldr	r0, [pc, #132]	@ (800ad88 <OnRxData+0x138>)
 800ad02:	f7fa ff49 	bl	8005b98 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800ad06:	e00f      	b.n	800ad28 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800ad08:	4b20      	ldr	r3, [pc, #128]	@ (800ad8c <OnRxData+0x13c>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2003      	movs	r0, #3
 800ad10:	f011 fbf2 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ad14:	2200      	movs	r2, #0
 800ad16:	2120      	movs	r1, #32
 800ad18:	481b      	ldr	r0, [pc, #108]	@ (800ad88 <OnRxData+0x138>)
 800ad1a:	f7fa ff3d 	bl	8005b98 <HAL_GPIO_WritePin>
              break;
 800ad1e:	e003      	b.n	800ad28 <OnRxData+0xd8>

            default:

              break;
 800ad20:	bf00      	nop
 800ad22:	e002      	b.n	800ad2a <OnRxData+0xda>
              break;
 800ad24:	bf00      	nop
 800ad26:	e000      	b.n	800ad2a <OnRxData+0xda>
              break;
 800ad28:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	7c1b      	ldrb	r3, [r3, #16]
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d81f      	bhi.n	800ad72 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	7bfa      	ldrb	r2, [r7, #15]
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800ad3e:	460c      	mov	r4, r1
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	7c09      	ldrb	r1, [r1, #16]
 800ad44:	4608      	mov	r0, r1
 800ad46:	4912      	ldr	r1, [pc, #72]	@ (800ad90 <OnRxData+0x140>)
 800ad48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ad4c:	6838      	ldr	r0, [r7, #0]
 800ad4e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ad52:	4605      	mov	r5, r0
 800ad54:	6838      	ldr	r0, [r7, #0]
 800ad56:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800ad5a:	9005      	str	r0, [sp, #20]
 800ad5c:	9504      	str	r5, [sp, #16]
 800ad5e:	9103      	str	r1, [sp, #12]
 800ad60:	9402      	str	r4, [sp, #8]
 800ad62:	9201      	str	r2, [sp, #4]
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <OnRxData+0x144>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	2003      	movs	r0, #3
 800ad6e:	f011 fbc3 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800ad72:	bf00      	nop
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bdb0      	pop	{r4, r5, r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200006f0 	.word	0x200006f0
 800ad80:	200006d6 	.word	0x200006d6
 800ad84:	0801f6a0 	.word	0x0801f6a0
 800ad88:	48000400 	.word	0x48000400
 800ad8c:	0801f6ac 	.word	0x0801f6ac
 800ad90:	20000008 	.word	0x20000008
 800ad94:	0801f6b8 	.word	0x0801f6b8

0800ad98 <SendTxData>:

static void SendTxData(void)
{
 800ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9a:	b0a7      	sub	sp, #156	@ 0x9c
 800ad9c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ad9e:	23ff      	movs	r3, #255	@ 0xff
 800ada0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint8_t batteryLevel = GetBatteryLevel();
 800ada4:	f7f7 fb98 	bl	80024d8 <GetBatteryLevel>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	677b      	str	r3, [r7, #116]	@ 0x74

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  int16_t temperature = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  uint16_t humidity = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
  uint32_t i = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	673b      	str	r3, [r7, #112]	@ 0x70
  int32_t latitude = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	667b      	str	r3, [r7, #100]	@ 0x64
  int32_t longitude = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	663b      	str	r3, [r7, #96]	@ 0x60
  uint16_t altitudeGps = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800add6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800adda:	4618      	mov	r0, r3
 800addc:	f7f7 fd3c 	bl	8002858 <EnvSensors_Read>
  temphumi_t temphumi = TempHumi();
 800ade0:	f107 0318 	add.w	r3, r7, #24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f7 f935 	bl	8002054 <TempHumi>
  uint32_t lux = Light();
 800adea:	f7f7 f983 	bl	80020f4 <Light>
 800adee:	65b8      	str	r0, [r7, #88]	@ 0x58
  soil_t soil = SoilTempHumi();
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7f7 f9c5 	bl	8002184 <SoilTempHumi>

  int temp_i = (int)(temphumi.temperature * 100);
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	49ae      	ldr	r1, [pc, #696]	@ (800b0b8 <SendTxData+0x320>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f5 ffb8 	bl	8000d74 <__aeabi_fmul>
 800ae04:	4603      	mov	r3, r0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f6 f904 	bl	8001014 <__aeabi_f2iz>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	657b      	str	r3, [r7, #84]	@ 0x54
  int humi_i = (int)(temphumi.humidity * 100);
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	49a9      	ldr	r1, [pc, #676]	@ (800b0b8 <SendTxData+0x320>)
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7f5 ffad 	bl	8000d74 <__aeabi_fmul>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f6 f8f9 	bl	8001014 <__aeabi_f2iz>
 800ae22:	4603      	mov	r3, r0
 800ae24:	653b      	str	r3, [r7, #80]	@ 0x50
  int dew_i = (int)(temphumi.dewpoint * 100);
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	49a3      	ldr	r1, [pc, #652]	@ (800b0b8 <SendTxData+0x320>)
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f5 ffa2 	bl	8000d74 <__aeabi_fmul>
 800ae30:	4603      	mov	r3, r0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f6 f8ee 	bl	8001014 <__aeabi_f2iz>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int press_i = (int)(temphumi.pressure * 10);
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	499f      	ldr	r1, [pc, #636]	@ (800b0bc <SendTxData+0x324>)
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f5 ff97 	bl	8000d74 <__aeabi_fmul>
 800ae46:	4603      	mov	r3, r0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f6 f8e3 	bl	8001014 <__aeabi_f2iz>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	64bb      	str	r3, [r7, #72]	@ 0x48

  APP_LOG(TS_ON, VLEVEL_M,
 800ae52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae54:	4a9a      	ldr	r2, [pc, #616]	@ (800b0c0 <SendTxData+0x328>)
 800ae56:	fb82 1203 	smull	r1, r2, r2, r3
 800ae5a:	1152      	asrs	r2, r2, #5
 800ae5c:	17db      	asrs	r3, r3, #31
 800ae5e:	1ad6      	subs	r6, r2, r3
 800ae60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae62:	4a97      	ldr	r2, [pc, #604]	@ (800b0c0 <SendTxData+0x328>)
 800ae64:	fb82 1203 	smull	r1, r2, r2, r3
 800ae68:	1151      	asrs	r1, r2, #5
 800ae6a:	17da      	asrs	r2, r3, #31
 800ae6c:	1a89      	subs	r1, r1, r2
 800ae6e:	2264      	movs	r2, #100	@ 0x64
 800ae70:	fb01 f202 	mul.w	r2, r1, r2
 800ae74:	1a99      	subs	r1, r3, r2
 800ae76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae78:	4a91      	ldr	r2, [pc, #580]	@ (800b0c0 <SendTxData+0x328>)
 800ae7a:	fb82 0203 	smull	r0, r2, r2, r3
 800ae7e:	1152      	asrs	r2, r2, #5
 800ae80:	17db      	asrs	r3, r3, #31
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae88:	4a8d      	ldr	r2, [pc, #564]	@ (800b0c0 <SendTxData+0x328>)
 800ae8a:	fb82 0203 	smull	r0, r2, r2, r3
 800ae8e:	1150      	asrs	r0, r2, #5
 800ae90:	17da      	asrs	r2, r3, #31
 800ae92:	1a80      	subs	r0, r0, r2
 800ae94:	2264      	movs	r2, #100	@ 0x64
 800ae96:	fb00 f202 	mul.w	r2, r0, r2
 800ae9a:	1a98      	subs	r0, r3, r2
 800ae9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae9e:	4a88      	ldr	r2, [pc, #544]	@ (800b0c0 <SendTxData+0x328>)
 800aea0:	fb82 4203 	smull	r4, r2, r2, r3
 800aea4:	1152      	asrs	r2, r2, #5
 800aea6:	17db      	asrs	r3, r3, #31
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	60ba      	str	r2, [r7, #8]
 800aeac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeae:	4a84      	ldr	r2, [pc, #528]	@ (800b0c0 <SendTxData+0x328>)
 800aeb0:	fb82 4203 	smull	r4, r2, r2, r3
 800aeb4:	1154      	asrs	r4, r2, #5
 800aeb6:	17da      	asrs	r2, r3, #31
 800aeb8:	1aa4      	subs	r4, r4, r2
 800aeba:	2264      	movs	r2, #100	@ 0x64
 800aebc:	fb04 f202 	mul.w	r2, r4, r2
 800aec0:	1a9c      	subs	r4, r3, r2
 800aec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aec4:	4a7f      	ldr	r2, [pc, #508]	@ (800b0c4 <SendTxData+0x32c>)
 800aec6:	fb82 5203 	smull	r5, r2, r2, r3
 800aeca:	1092      	asrs	r2, r2, #2
 800aecc:	17db      	asrs	r3, r3, #31
 800aece:	1ad5      	subs	r5, r2, r3
 800aed0:	607d      	str	r5, [r7, #4]
 800aed2:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800aed4:	4b7b      	ldr	r3, [pc, #492]	@ (800b0c4 <SendTxData+0x32c>)
 800aed6:	fb83 2305 	smull	r2, r3, r3, r5
 800aeda:	109a      	asrs	r2, r3, #2
 800aedc:	17eb      	asrs	r3, r5, #31
 800aede:	1ad2      	subs	r2, r2, r3
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	1aea      	subs	r2, r5, r3
 800aeea:	9207      	str	r2, [sp, #28]
 800aeec:	687d      	ldr	r5, [r7, #4]
 800aeee:	9506      	str	r5, [sp, #24]
 800aef0:	9405      	str	r4, [sp, #20]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	9204      	str	r2, [sp, #16]
 800aef6:	9003      	str	r0, [sp, #12]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	9302      	str	r3, [sp, #8]
 800aefc:	9101      	str	r1, [sp, #4]
 800aefe:	9600      	str	r6, [sp, #0]
 800af00:	4b71      	ldr	r3, [pc, #452]	@ (800b0c8 <SendTxData+0x330>)
 800af02:	2201      	movs	r2, #1
 800af04:	2100      	movs	r1, #0
 800af06:	2002      	movs	r0, #2
 800af08:	f011 faf6 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          temp_i / 100, temp_i % 100,
          humi_i / 100, humi_i % 100,
          dew_i / 100, dew_i % 100,
          press_i / 10, press_i % 10);

  APP_LOG(TS_ON, VLEVEL_M, "Light: %d lux\r\n", lux);
 800af0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	4b6e      	ldr	r3, [pc, #440]	@ (800b0cc <SendTxData+0x334>)
 800af12:	2201      	movs	r2, #1
 800af14:	2100      	movs	r1, #0
 800af16:	2002      	movs	r0, #2
 800af18:	f011 faee 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>

  int soil_temp_i = (int)(soil.temperature * 10);
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	4967      	ldr	r1, [pc, #412]	@ (800b0bc <SendTxData+0x324>)
 800af20:	4618      	mov	r0, r3
 800af22:	f7f5 ff27 	bl	8000d74 <__aeabi_fmul>
 800af26:	4603      	mov	r3, r0
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f6 f873 	bl	8001014 <__aeabi_f2iz>
 800af2e:	4603      	mov	r3, r0
 800af30:	647b      	str	r3, [r7, #68]	@ 0x44
  int soil_humi_i = (int)(soil.humidity * 10);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	4961      	ldr	r1, [pc, #388]	@ (800b0bc <SendTxData+0x324>)
 800af36:	4618      	mov	r0, r3
 800af38:	f7f5 ff1c 	bl	8000d74 <__aeabi_fmul>
 800af3c:	4603      	mov	r3, r0
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f6 f868 	bl	8001014 <__aeabi_f2iz>
 800af44:	4603      	mov	r3, r0
 800af46:	643b      	str	r3, [r7, #64]	@ 0x40

  APP_LOG(TS_ON, VLEVEL_M,
 800af48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af4a:	4a5e      	ldr	r2, [pc, #376]	@ (800b0c4 <SendTxData+0x32c>)
 800af4c:	fb82 1203 	smull	r1, r2, r2, r3
 800af50:	1092      	asrs	r2, r2, #2
 800af52:	17db      	asrs	r3, r3, #31
 800af54:	1ad4      	subs	r4, r2, r3
 800af56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af58:	4b5a      	ldr	r3, [pc, #360]	@ (800b0c4 <SendTxData+0x32c>)
 800af5a:	fb83 2301 	smull	r2, r3, r3, r1
 800af5e:	109a      	asrs	r2, r3, #2
 800af60:	17cb      	asrs	r3, r1, #31
 800af62:	1ad2      	subs	r2, r2, r3
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	1aca      	subs	r2, r1, r3
 800af6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af70:	4954      	ldr	r1, [pc, #336]	@ (800b0c4 <SendTxData+0x32c>)
 800af72:	fb81 0103 	smull	r0, r1, r1, r3
 800af76:	1089      	asrs	r1, r1, #2
 800af78:	17db      	asrs	r3, r3, #31
 800af7a:	1acd      	subs	r5, r1, r3
 800af7c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800af7e:	4b51      	ldr	r3, [pc, #324]	@ (800b0c4 <SendTxData+0x32c>)
 800af80:	fb83 1300 	smull	r1, r3, r3, r0
 800af84:	1099      	asrs	r1, r3, #2
 800af86:	17c3      	asrs	r3, r0, #31
 800af88:	1ac9      	subs	r1, r1, r3
 800af8a:	460b      	mov	r3, r1
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	1ac1      	subs	r1, r0, r3
 800af94:	9103      	str	r1, [sp, #12]
 800af96:	9502      	str	r5, [sp, #8]
 800af98:	9201      	str	r2, [sp, #4]
 800af9a:	9400      	str	r4, [sp, #0]
 800af9c:	4b4c      	ldr	r3, [pc, #304]	@ (800b0d0 <SendTxData+0x338>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	2100      	movs	r1, #0
 800afa2:	2002      	movs	r0, #2
 800afa4:	f011 faa8 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
          "Soil Temp: %d.%01d C, Soil Humi: %d.%01d %%RH\r\n",
          soil_temp_i / 10, soil_temp_i % 10,
          soil_humi_i / 10, soil_humi_i % 10);

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800afa8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	4b49      	ldr	r3, [pc, #292]	@ (800b0d4 <SendTxData+0x33c>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	2100      	movs	r1, #0
 800afb4:	2002      	movs	r0, #2
 800afb6:	f011 fa9f 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f6 f829 	bl	8001014 <__aeabi_f2iz>
 800afc2:	4603      	mov	r3, r0
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	4b43      	ldr	r3, [pc, #268]	@ (800b0d8 <SendTxData+0x340>)
 800afca:	2201      	movs	r2, #1
 800afcc:	2100      	movs	r1, #0
 800afce:	2002      	movs	r0, #2
 800afd0:	f011 fa92 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Buffer[i++] = (temp_i >> 8) & 0xFF;
 800afd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd6:	1218      	asrs	r0, r3, #8
 800afd8:	4b40      	ldr	r3, [pc, #256]	@ (800b0dc <SendTxData+0x344>)
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afde:	1c59      	adds	r1, r3, #1
 800afe0:	6739      	str	r1, [r7, #112]	@ 0x70
 800afe2:	4413      	add	r3, r2
 800afe4:	b2c2      	uxtb	r2, r0
 800afe6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = temp_i & 0xFF;
 800afe8:	4b3c      	ldr	r3, [pc, #240]	@ (800b0dc <SendTxData+0x344>)
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afee:	1c59      	adds	r1, r3, #1
 800aff0:	6739      	str	r1, [r7, #112]	@ 0x70
 800aff2:	4413      	add	r3, r2
 800aff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (humi_i >> 8) & 0xFF;
 800affa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800affc:	1218      	asrs	r0, r3, #8
 800affe:	4b37      	ldr	r3, [pc, #220]	@ (800b0dc <SendTxData+0x344>)
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b004:	1c59      	adds	r1, r3, #1
 800b006:	6739      	str	r1, [r7, #112]	@ 0x70
 800b008:	4413      	add	r3, r2
 800b00a:	b2c2      	uxtb	r2, r0
 800b00c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = humi_i & 0xFF;
 800b00e:	4b33      	ldr	r3, [pc, #204]	@ (800b0dc <SendTxData+0x344>)
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b014:	1c59      	adds	r1, r3, #1
 800b016:	6739      	str	r1, [r7, #112]	@ 0x70
 800b018:	4413      	add	r3, r2
 800b01a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (dew_i >> 8) & 0xFF;
 800b020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b022:	1218      	asrs	r0, r3, #8
 800b024:	4b2d      	ldr	r3, [pc, #180]	@ (800b0dc <SendTxData+0x344>)
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b02a:	1c59      	adds	r1, r3, #1
 800b02c:	6739      	str	r1, [r7, #112]	@ 0x70
 800b02e:	4413      	add	r3, r2
 800b030:	b2c2      	uxtb	r2, r0
 800b032:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = dew_i & 0xFF;
 800b034:	4b29      	ldr	r3, [pc, #164]	@ (800b0dc <SendTxData+0x344>)
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	6739      	str	r1, [r7, #112]	@ 0x70
 800b03e:	4413      	add	r3, r2
 800b040:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (press_i >> 8) & 0xFF;
 800b046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b048:	1218      	asrs	r0, r3, #8
 800b04a:	4b24      	ldr	r3, [pc, #144]	@ (800b0dc <SendTxData+0x344>)
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	6739      	str	r1, [r7, #112]	@ 0x70
 800b054:	4413      	add	r3, r2
 800b056:	b2c2      	uxtb	r2, r0
 800b058:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = press_i & 0xFF;
 800b05a:	4b20      	ldr	r3, [pc, #128]	@ (800b0dc <SendTxData+0x344>)
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b060:	1c59      	adds	r1, r3, #1
 800b062:	6739      	str	r1, [r7, #112]	@ 0x70
 800b064:	4413      	add	r3, r2
 800b066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (lux >> 24) & 0xFF;
 800b06c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b06e:	0e18      	lsrs	r0, r3, #24
 800b070:	4b1a      	ldr	r3, [pc, #104]	@ (800b0dc <SendTxData+0x344>)
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	6739      	str	r1, [r7, #112]	@ 0x70
 800b07a:	4413      	add	r3, r2
 800b07c:	b2c2      	uxtb	r2, r0
 800b07e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (lux >> 16) & 0xFF;
 800b080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b082:	0c18      	lsrs	r0, r3, #16
 800b084:	4b15      	ldr	r3, [pc, #84]	@ (800b0dc <SendTxData+0x344>)
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b08a:	1c59      	adds	r1, r3, #1
 800b08c:	6739      	str	r1, [r7, #112]	@ 0x70
 800b08e:	4413      	add	r3, r2
 800b090:	b2c2      	uxtb	r2, r0
 800b092:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (lux >> 8) & 0xFF;
 800b094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b096:	0a18      	lsrs	r0, r3, #8
 800b098:	4b10      	ldr	r3, [pc, #64]	@ (800b0dc <SendTxData+0x344>)
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	6739      	str	r1, [r7, #112]	@ 0x70
 800b0a2:	4413      	add	r3, r2
 800b0a4:	b2c2      	uxtb	r2, r0
 800b0a6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = lux & 0xFF;
 800b0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b0dc <SendTxData+0x344>)
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0ae:	1c59      	adds	r1, r3, #1
 800b0b0:	6739      	str	r1, [r7, #112]	@ 0x70
 800b0b2:	4413      	add	r3, r2
 800b0b4:	e014      	b.n	800b0e0 <SendTxData+0x348>
 800b0b6:	bf00      	nop
 800b0b8:	42c80000 	.word	0x42c80000
 800b0bc:	41200000 	.word	0x41200000
 800b0c0:	51eb851f 	.word	0x51eb851f
 800b0c4:	66666667 	.word	0x66666667
 800b0c8:	0801f700 	.word	0x0801f700
 800b0cc:	0801f750 	.word	0x0801f750
 800b0d0:	0801f760 	.word	0x0801f760
 800b0d4:	0801f790 	.word	0x0801f790
 800b0d8:	0801f79c 	.word	0x0801f79c
 800b0dc:	20000088 	.word	0x20000088
 800b0e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (soil_temp_i >> 8) & 0xFF;
 800b0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0e8:	1218      	asrs	r0, r3, #8
 800b0ea:	4b66      	ldr	r3, [pc, #408]	@ (800b284 <SendTxData+0x4ec>)
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0f0:	1c59      	adds	r1, r3, #1
 800b0f2:	6739      	str	r1, [r7, #112]	@ 0x70
 800b0f4:	4413      	add	r3, r2
 800b0f6:	b2c2      	uxtb	r2, r0
 800b0f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = soil_temp_i & 0xFF;
 800b0fa:	4b62      	ldr	r3, [pc, #392]	@ (800b284 <SendTxData+0x4ec>)
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b100:	1c59      	adds	r1, r3, #1
 800b102:	6739      	str	r1, [r7, #112]	@ 0x70
 800b104:	4413      	add	r3, r2
 800b106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b108:	b2d2      	uxtb	r2, r2
 800b10a:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (soil_humi_i >> 8) & 0xFF;
 800b10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b10e:	1218      	asrs	r0, r3, #8
 800b110:	4b5c      	ldr	r3, [pc, #368]	@ (800b284 <SendTxData+0x4ec>)
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b116:	1c59      	adds	r1, r3, #1
 800b118:	6739      	str	r1, [r7, #112]	@ 0x70
 800b11a:	4413      	add	r3, r2
 800b11c:	b2c2      	uxtb	r2, r0
 800b11e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = soil_humi_i & 0xFF;
 800b120:	4b58      	ldr	r3, [pc, #352]	@ (800b284 <SendTxData+0x4ec>)
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b126:	1c59      	adds	r1, r3, #1
 800b128:	6739      	str	r1, [r7, #112]	@ 0x70
 800b12a:	4413      	add	r3, r2
 800b12c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b12e:	b2d2      	uxtb	r2, r2
 800b130:	701a      	strb	r2, [r3, #0]

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b132:	4b54      	ldr	r3, [pc, #336]	@ (800b284 <SendTxData+0x4ec>)
 800b134:	2202      	movs	r2, #2
 800b136:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = i;
 800b138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	4b51      	ldr	r3, [pc, #324]	@ (800b284 <SendTxData+0x4ec>)
 800b13e:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(DBG2_GPIO_Port, DBG2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b140:	2201      	movs	r2, #1
 800b142:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b146:	4850      	ldr	r0, [pc, #320]	@ (800b288 <SendTxData+0x4f0>)
 800b148:	f7fa fd26 	bl	8005b98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b14c:	2064      	movs	r0, #100	@ 0x64
 800b14e:	f7f7 fb03 	bl	8002758 <HAL_Delay>
  HAL_GPIO_WritePin(DBG2_GPIO_Port, DBG2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b152:	2200      	movs	r2, #0
 800b154:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b158:	484b      	ldr	r0, [pc, #300]	@ (800b288 <SendTxData+0x4f0>)
 800b15a:	f7fa fd1d 	bl	8005b98 <HAL_GPIO_WritePin>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b15e:	4b49      	ldr	r3, [pc, #292]	@ (800b284 <SendTxData+0x4ec>)
 800b160:	2202      	movs	r2, #2
 800b162:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	4949      	ldr	r1, [pc, #292]	@ (800b28c <SendTxData+0x4f4>)
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f5 fe03 	bl	8000d74 <__aeabi_fmul>
 800b16e:	4603      	mov	r3, r0
 800b170:	4618      	mov	r0, r3
 800b172:	f7f5 ff75 	bl	8001060 <__aeabi_f2uiz>
 800b176:	4603      	mov	r3, r0
 800b178:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
  temperature = (int16_t)(sensor_data.temperature);
 800b17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f5 ff48 	bl	8001014 <__aeabi_f2iz>
 800b184:	4603      	mov	r3, r0
 800b186:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18c:	4940      	ldr	r1, [pc, #256]	@ (800b290 <SendTxData+0x4f8>)
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f5 fdf0 	bl	8000d74 <__aeabi_fmul>
 800b194:	4603      	mov	r3, r0
 800b196:	493d      	ldr	r1, [pc, #244]	@ (800b28c <SendTxData+0x4f4>)
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f5 fe9f 	bl	8000edc <__aeabi_fdiv>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7f5 ff5d 	bl	8001060 <__aeabi_f2uiz>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  AppData.Buffer[i++] = AppLedStateOn;
 800b1ac:	4b35      	ldr	r3, [pc, #212]	@ (800b284 <SendTxData+0x4ec>)
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1b2:	1c59      	adds	r1, r3, #1
 800b1b4:	6739      	str	r1, [r7, #112]	@ 0x70
 800b1b6:	4413      	add	r3, r2
 800b1b8:	4a36      	ldr	r2, [pc, #216]	@ (800b294 <SendTxData+0x4fc>)
 800b1ba:	7812      	ldrb	r2, [r2, #0]
 800b1bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b1be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b298      	uxth	r0, r3
 800b1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800b284 <SendTxData+0x4ec>)
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1cc:	1c59      	adds	r1, r3, #1
 800b1ce:	6739      	str	r1, [r7, #112]	@ 0x70
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b2c2      	uxtb	r2, r0
 800b1d4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b1d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b284 <SendTxData+0x4ec>)
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1dc:	1c59      	adds	r1, r3, #1
 800b1de:	6739      	str	r1, [r7, #112]	@ 0x70
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b1ea:	4b26      	ldr	r3, [pc, #152]	@ (800b284 <SendTxData+0x4ec>)
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1f0:	1c59      	adds	r1, r3, #1
 800b1f2:	6739      	str	r1, [r7, #112]	@ 0x70
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b1fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b202:	0a1b      	lsrs	r3, r3, #8
 800b204:	b298      	uxth	r0, r3
 800b206:	4b1f      	ldr	r3, [pc, #124]	@ (800b284 <SendTxData+0x4ec>)
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	6739      	str	r1, [r7, #112]	@ 0x70
 800b210:	4413      	add	r3, r2
 800b212:	b2c2      	uxtb	r2, r0
 800b214:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b216:	4b1b      	ldr	r3, [pc, #108]	@ (800b284 <SendTxData+0x4ec>)
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b21c:	1c59      	adds	r1, r3, #1
 800b21e:	6739      	str	r1, [r7, #112]	@ 0x70
 800b220:	4413      	add	r3, r2
 800b222:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b22a:	4b1b      	ldr	r3, [pc, #108]	@ (800b298 <SendTxData+0x500>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d007      	beq.n	800b242 <SendTxData+0x4aa>
 800b232:	4b19      	ldr	r3, [pc, #100]	@ (800b298 <SendTxData+0x500>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d003      	beq.n	800b242 <SendTxData+0x4aa>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b23a:	4b17      	ldr	r3, [pc, #92]	@ (800b298 <SendTxData+0x500>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d12c      	bne.n	800b29c <SendTxData+0x504>
  {
    AppData.Buffer[i++] = 0;
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <SendTxData+0x4ec>)
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b248:	1c59      	adds	r1, r3, #1
 800b24a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b24c:	4413      	add	r3, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b252:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <SendTxData+0x4ec>)
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b258:	1c59      	adds	r1, r3, #1
 800b25a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b25c:	4413      	add	r3, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b262:	4b08      	ldr	r3, [pc, #32]	@ (800b284 <SendTxData+0x4ec>)
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b268:	1c59      	adds	r1, r3, #1
 800b26a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b26c:	4413      	add	r3, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b272:	4b04      	ldr	r3, [pc, #16]	@ (800b284 <SendTxData+0x4ec>)
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b278:	1c59      	adds	r1, r3, #1
 800b27a:	6739      	str	r1, [r7, #112]	@ 0x70
 800b27c:	4413      	add	r3, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	701a      	strb	r2, [r3, #0]
 800b282:	e069      	b.n	800b358 <SendTxData+0x5c0>
 800b284:	20000088 	.word	0x20000088
 800b288:	48000400 	.word	0x48000400
 800b28c:	41200000 	.word	0x41200000
 800b290:	42c80000 	.word	0x42c80000
 800b294:	200006d6 	.word	0x200006d6
 800b298:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800b29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29e:	667b      	str	r3, [r7, #100]	@ 0x64
    longitude = sensor_data.longitude;
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	663b      	str	r3, [r7, #96]	@ 0x60

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b2a4:	4b56      	ldr	r3, [pc, #344]	@ (800b400 <SendTxData+0x668>)
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2aa:	1c59      	adds	r1, r3, #1
 800b2ac:	6739      	str	r1, [r7, #112]	@ 0x70
 800b2ae:	18d4      	adds	r4, r2, r3
 800b2b0:	f7f7 f912 	bl	80024d8 <GetBatteryLevel>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b2b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ba:	1418      	asrs	r0, r3, #16
 800b2bc:	4b50      	ldr	r3, [pc, #320]	@ (800b400 <SendTxData+0x668>)
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2c2:	1c59      	adds	r1, r3, #1
 800b2c4:	6739      	str	r1, [r7, #112]	@ 0x70
 800b2c6:	4413      	add	r3, r2
 800b2c8:	b2c2      	uxtb	r2, r0
 800b2ca:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b2cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ce:	1218      	asrs	r0, r3, #8
 800b2d0:	4b4b      	ldr	r3, [pc, #300]	@ (800b400 <SendTxData+0x668>)
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2d6:	1c59      	adds	r1, r3, #1
 800b2d8:	6739      	str	r1, [r7, #112]	@ 0x70
 800b2da:	4413      	add	r3, r2
 800b2dc:	b2c2      	uxtb	r2, r0
 800b2de:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b2e0:	4b47      	ldr	r3, [pc, #284]	@ (800b400 <SendTxData+0x668>)
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2e6:	1c59      	adds	r1, r3, #1
 800b2e8:	6739      	str	r1, [r7, #112]	@ 0x70
 800b2ea:	4413      	add	r3, r2
 800b2ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b2f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2f4:	1418      	asrs	r0, r3, #16
 800b2f6:	4b42      	ldr	r3, [pc, #264]	@ (800b400 <SendTxData+0x668>)
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2fc:	1c59      	adds	r1, r3, #1
 800b2fe:	6739      	str	r1, [r7, #112]	@ 0x70
 800b300:	4413      	add	r3, r2
 800b302:	b2c2      	uxtb	r2, r0
 800b304:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b308:	1218      	asrs	r0, r3, #8
 800b30a:	4b3d      	ldr	r3, [pc, #244]	@ (800b400 <SendTxData+0x668>)
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b310:	1c59      	adds	r1, r3, #1
 800b312:	6739      	str	r1, [r7, #112]	@ 0x70
 800b314:	4413      	add	r3, r2
 800b316:	b2c2      	uxtb	r2, r0
 800b318:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b31a:	4b39      	ldr	r3, [pc, #228]	@ (800b400 <SendTxData+0x668>)
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b320:	1c59      	adds	r1, r3, #1
 800b322:	6739      	str	r1, [r7, #112]	@ 0x70
 800b324:	4413      	add	r3, r2
 800b326:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b328:	b2d2      	uxtb	r2, r2
 800b32a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b32c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b330:	0a1b      	lsrs	r3, r3, #8
 800b332:	b298      	uxth	r0, r3
 800b334:	4b32      	ldr	r3, [pc, #200]	@ (800b400 <SendTxData+0x668>)
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b33a:	1c59      	adds	r1, r3, #1
 800b33c:	6739      	str	r1, [r7, #112]	@ 0x70
 800b33e:	4413      	add	r3, r2
 800b340:	b2c2      	uxtb	r2, r0
 800b342:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b344:	4b2e      	ldr	r3, [pc, #184]	@ (800b400 <SendTxData+0x668>)
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b34a:	1c59      	adds	r1, r3, #1
 800b34c:	6739      	str	r1, [r7, #112]	@ 0x70
 800b34e:	4413      	add	r3, r2
 800b350:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800b354:	b2d2      	uxtb	r2, r2
 800b356:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	4b28      	ldr	r3, [pc, #160]	@ (800b400 <SendTxData+0x668>)
 800b35e:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b360:	4b28      	ldr	r3, [pc, #160]	@ (800b404 <SendTxData+0x66c>)
 800b362:	7a5b      	ldrb	r3, [r3, #9]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d007      	beq.n	800b378 <SendTxData+0x5e0>
 800b368:	f002 fa0a 	bl	800d780 <LmHandlerJoinStatus>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d102      	bne.n	800b378 <SendTxData+0x5e0>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b372:	4824      	ldr	r0, [pc, #144]	@ (800b404 <SendTxData+0x66c>)
 800b374:	f010 feb6 	bl	801c0e4 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b378:	4b23      	ldr	r3, [pc, #140]	@ (800b408 <SendTxData+0x670>)
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	2200      	movs	r2, #0
 800b37e:	4619      	mov	r1, r3
 800b380:	481f      	ldr	r0, [pc, #124]	@ (800b400 <SendTxData+0x668>)
 800b382:	f002 fa19 	bl	800d7b8 <LmHandlerSend>
 800b386:	4603      	mov	r3, r0
 800b388:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b38c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b390:	2b00      	cmp	r3, #0
 800b392:	d106      	bne.n	800b3a2 <SendTxData+0x60a>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b394:	4b1d      	ldr	r3, [pc, #116]	@ (800b40c <SendTxData+0x674>)
 800b396:	2201      	movs	r2, #1
 800b398:	2100      	movs	r1, #0
 800b39a:	2001      	movs	r0, #1
 800b39c:	f011 f8ac 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800b3a0:	e016      	b.n	800b3d0 <SendTxData+0x638>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b3a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800b3a6:	f113 0f06 	cmn.w	r3, #6
 800b3aa:	d111      	bne.n	800b3d0 <SendTxData+0x638>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b3ac:	f002 f95c 	bl	800d668 <LmHandlerGetDutyCycleWaitTime>
 800b3b0:	6778      	str	r0, [r7, #116]	@ 0x74
    if (nextTxIn > 0)
 800b3b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <SendTxData+0x638>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b3b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3ba:	4a15      	ldr	r2, [pc, #84]	@ (800b410 <SendTxData+0x678>)
 800b3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c0:	099b      	lsrs	r3, r3, #6
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	4b13      	ldr	r3, [pc, #76]	@ (800b414 <SendTxData+0x67c>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	f011 f894 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800b3d0:	4b11      	ldr	r3, [pc, #68]	@ (800b418 <SendTxData+0x680>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10f      	bne.n	800b3f8 <SendTxData+0x660>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b3d8:	4810      	ldr	r0, [pc, #64]	@ (800b41c <SendTxData+0x684>)
 800b3da:	f010 fe83 	bl	801c0e4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b3de:	4b10      	ldr	r3, [pc, #64]	@ (800b420 <SendTxData+0x688>)
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	bf38      	it	cc
 800b3e8:	4613      	movcc	r3, r2
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	480b      	ldr	r0, [pc, #44]	@ (800b41c <SendTxData+0x684>)
 800b3ee:	f010 fee9 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b3f2:	480a      	ldr	r0, [pc, #40]	@ (800b41c <SendTxData+0x684>)
 800b3f4:	f010 fe08 	bl	801c008 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b3f8:	bf00      	nop
 800b3fa:	377c      	adds	r7, #124	@ 0x7c
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b400:	20000088 	.word	0x20000088
 800b404:	20000708 	.word	0x20000708
 800b408:	20000070 	.word	0x20000070
 800b40c:	0801f7a8 	.word	0x0801f7a8
 800b410:	10624dd3 	.word	0x10624dd3
 800b414:	0801f7b8 	.word	0x0801f7b8
 800b418:	200005b0 	.word	0x200005b0
 800b41c:	200005b4 	.word	0x200005b4
 800b420:	20000084 	.word	0x20000084

0800b424 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b42c:	2100      	movs	r1, #0
 800b42e:	2002      	movs	r0, #2
 800b430:	f010 fd34 	bl	801be9c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b434:	4803      	ldr	r0, [pc, #12]	@ (800b444 <OnTxTimerEvent+0x20>)
 800b436:	f010 fde7 	bl	801c008 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b43a:	bf00      	nop
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	200005b4 	.word	0x200005b4

0800b448 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	bc80      	pop	{r7}
 800b458:	4770      	bx	lr

0800b45a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr

0800b46c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	bc80      	pop	{r7}
 800b47c:	4770      	bx	lr
	...

0800b480 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af04      	add	r7, sp, #16
 800b486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d041      	beq.n	800b512 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d03d      	beq.n	800b512 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b496:	4821      	ldr	r0, [pc, #132]	@ (800b51c <OnTxData+0x9c>)
 800b498:	f010 fdb6 	bl	801c008 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b49c:	4b20      	ldr	r3, [pc, #128]	@ (800b520 <OnTxData+0xa0>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	f011 f828 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b4c0:	9203      	str	r2, [sp, #12]
 800b4c2:	9002      	str	r0, [sp, #8]
 800b4c4:	9101      	str	r1, [sp, #4]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4b16      	ldr	r3, [pc, #88]	@ (800b524 <OnTxData+0xa4>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	2003      	movs	r0, #3
 800b4d0:	f011 f812 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b4d4:	4b14      	ldr	r3, [pc, #80]	@ (800b528 <OnTxData+0xa8>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	2003      	movs	r0, #3
 800b4dc:	f011 f80c 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7a1b      	ldrb	r3, [r3, #8]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d10e      	bne.n	800b506 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7a5b      	ldrb	r3, [r3, #9]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <OnTxData+0x74>
 800b4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b52c <OnTxData+0xac>)
 800b4f2:	e000      	b.n	800b4f6 <OnTxData+0x76>
 800b4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b530 <OnTxData+0xb0>)
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b534 <OnTxData+0xb4>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2003      	movs	r0, #3
 800b500:	f010 fffa 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b504:	e005      	b.n	800b512 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b506:	4b0c      	ldr	r3, [pc, #48]	@ (800b538 <OnTxData+0xb8>)
 800b508:	2200      	movs	r2, #0
 800b50a:	2100      	movs	r1, #0
 800b50c:	2003      	movs	r0, #3
 800b50e:	f010 fff3 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	200006d8 	.word	0x200006d8
 800b520:	0801f7d8 	.word	0x0801f7d8
 800b524:	0801f80c 	.word	0x0801f80c
 800b528:	0801f840 	.word	0x0801f840
 800b52c:	0801f850 	.word	0x0801f850
 800b530:	0801f854 	.word	0x0801f854
 800b534:	0801f85c 	.word	0x0801f85c
 800b538:	0801f870 	.word	0x0801f870

0800b53c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d039      	beq.n	800b5be <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11e      	bne.n	800b592 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b554:	2100      	movs	r1, #0
 800b556:	2004      	movs	r0, #4
 800b558:	f010 fca0 	bl	801be9c <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b55c:	481a      	ldr	r0, [pc, #104]	@ (800b5c8 <OnJoinRequest+0x8c>)
 800b55e:	f010 fdc1 	bl	801c0e4 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b562:	4b1a      	ldr	r3, [pc, #104]	@ (800b5cc <OnJoinRequest+0x90>)
 800b564:	2200      	movs	r2, #0
 800b566:	2100      	movs	r1, #0
 800b568:	2002      	movs	r0, #2
 800b56a:	f010 ffc5 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	799b      	ldrb	r3, [r3, #6]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d106      	bne.n	800b584 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b576:	4b16      	ldr	r3, [pc, #88]	@ (800b5d0 <OnJoinRequest+0x94>)
 800b578:	2200      	movs	r2, #0
 800b57a:	2100      	movs	r1, #0
 800b57c:	2002      	movs	r0, #2
 800b57e:	f010 ffbb 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b582:	e01c      	b.n	800b5be <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b584:	4b13      	ldr	r3, [pc, #76]	@ (800b5d4 <OnJoinRequest+0x98>)
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	2002      	movs	r0, #2
 800b58c:	f010 ffb4 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b590:	e015      	b.n	800b5be <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b592:	4b11      	ldr	r3, [pc, #68]	@ (800b5d8 <OnJoinRequest+0x9c>)
 800b594:	2200      	movs	r2, #0
 800b596:	2100      	movs	r1, #0
 800b598:	2002      	movs	r0, #2
 800b59a:	f010 ffad 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	799b      	ldrb	r3, [r3, #6]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d10b      	bne.n	800b5be <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <OnJoinRequest+0xa0>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	2002      	movs	r0, #2
 800b5ae:	f010 ffa3 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <OnJoinRequest+0xa4>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f002 f85f 	bl	800d67c <LmHandlerJoin>
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000708 	.word	0x20000708
 800b5cc:	0801f880 	.word	0x0801f880
 800b5d0:	0801f898 	.word	0x0801f898
 800b5d4:	0801f8b8 	.word	0x0801f8b8
 800b5d8:	0801f8d8 	.word	0x0801f8d8
 800b5dc:	0801f8f4 	.word	0x0801f8f4
 800b5e0:	20000020 	.word	0x20000020

0800b5e4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	b093      	sub	sp, #76	@ 0x4c
 800b5e8:	af0c      	add	r7, sp, #48	@ 0x30
 800b5ea:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d056      	beq.n	800b6a0 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	785b      	ldrb	r3, [r3, #1]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d008      	beq.n	800b60c <OnBeaconStatusChange+0x28>
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d049      	beq.n	800b692 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b5fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b6a8 <OnBeaconStatusChange+0xc4>)
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	2002      	movs	r0, #2
 800b606:	f010 ff77 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b60a:	e049      	b.n	800b6a0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	7c1b      	ldrb	r3, [r3, #16]
 800b610:	4618      	mov	r0, r3
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b618:	461c      	mov	r4, r3
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b620:	461d      	mov	r5, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	6852      	ldr	r2, [r2, #4]
 800b62a:	6979      	ldr	r1, [r7, #20]
 800b62c:	7d89      	ldrb	r1, [r1, #22]
 800b62e:	460e      	mov	r6, r1
 800b630:	6979      	ldr	r1, [r7, #20]
 800b632:	7dc9      	ldrb	r1, [r1, #23]
 800b634:	6139      	str	r1, [r7, #16]
 800b636:	6979      	ldr	r1, [r7, #20]
 800b638:	7e09      	ldrb	r1, [r1, #24]
 800b63a:	60f9      	str	r1, [r7, #12]
 800b63c:	6979      	ldr	r1, [r7, #20]
 800b63e:	7e49      	ldrb	r1, [r1, #25]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	6979      	ldr	r1, [r7, #20]
 800b644:	7e89      	ldrb	r1, [r1, #26]
 800b646:	6079      	str	r1, [r7, #4]
 800b648:	6979      	ldr	r1, [r7, #20]
 800b64a:	7ec9      	ldrb	r1, [r1, #27]
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	6979      	ldr	r1, [r7, #20]
 800b650:	7f09      	ldrb	r1, [r1, #28]
 800b652:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b654:	f8d7 c000 	ldr.w	ip, [r7]
 800b658:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800b65c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b660:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800b664:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b668:	f8cd c020 	str.w	ip, [sp, #32]
 800b66c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b670:	f8cd c01c 	str.w	ip, [sp, #28]
 800b674:	6939      	ldr	r1, [r7, #16]
 800b676:	9106      	str	r1, [sp, #24]
 800b678:	9605      	str	r6, [sp, #20]
 800b67a:	9204      	str	r2, [sp, #16]
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	9502      	str	r5, [sp, #8]
 800b680:	9401      	str	r4, [sp, #4]
 800b682:	9000      	str	r0, [sp, #0]
 800b684:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <OnBeaconStatusChange+0xc8>)
 800b686:	2200      	movs	r2, #0
 800b688:	2100      	movs	r1, #0
 800b68a:	2002      	movs	r0, #2
 800b68c:	f010 ff34 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b690:	e006      	b.n	800b6a0 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b692:	4b07      	ldr	r3, [pc, #28]	@ (800b6b0 <OnBeaconStatusChange+0xcc>)
 800b694:	2200      	movs	r2, #0
 800b696:	2100      	movs	r1, #0
 800b698:	2002      	movs	r0, #2
 800b69a:	f010 ff2d 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b69e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b6a0:	bf00      	nop
 800b6a2:	371c      	adds	r7, #28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a8:	0801f918 	.word	0x0801f918
 800b6ac:	0801f930 	.word	0x0801f930
 800b6b0:	0801f9a4 	.word	0x0801f9a4

0800b6b4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	4a06      	ldr	r2, [pc, #24]	@ (800b6dc <OnClassChange+0x28>)
 800b6c2:	5cd3      	ldrb	r3, [r2, r3]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4b06      	ldr	r3, [pc, #24]	@ (800b6e0 <OnClassChange+0x2c>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	2002      	movs	r0, #2
 800b6ce:	f010 ff13 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	0801f9e0 	.word	0x0801f9e0
 800b6e0:	0801f9c4 	.word	0x0801f9c4

0800b6e4 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	f010 fbd6 	bl	801be9c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b6f0:	bf00      	nop
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b6fc:	4a0d      	ldr	r2, [pc, #52]	@ (800b734 <OnTxPeriodicityChanged+0x40>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b702:	4b0c      	ldr	r3, [pc, #48]	@ (800b734 <OnTxPeriodicityChanged+0x40>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b70a:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <OnTxPeriodicityChanged+0x40>)
 800b70c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b710:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b712:	4809      	ldr	r0, [pc, #36]	@ (800b738 <OnTxPeriodicityChanged+0x44>)
 800b714:	f010 fce6 	bl	801c0e4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b718:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <OnTxPeriodicityChanged+0x40>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4619      	mov	r1, r3
 800b71e:	4806      	ldr	r0, [pc, #24]	@ (800b738 <OnTxPeriodicityChanged+0x44>)
 800b720:	f010 fd50 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b724:	4804      	ldr	r0, [pc, #16]	@ (800b738 <OnTxPeriodicityChanged+0x44>)
 800b726:	f010 fc6f 	bl	801c008 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20000084 	.word	0x20000084
 800b738:	200005b4 	.word	0x200005b4

0800b73c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b746:	4a04      	ldr	r2, [pc, #16]	@ (800b758 <OnTxFrameCtrlChanged+0x1c>)
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000070 	.word	0x20000070

0800b75c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b766:	4a04      	ldr	r2, [pc, #16]	@ (800b778 <OnPingSlotPeriodicityChanged+0x1c>)
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bc80      	pop	{r7}
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000070 	.word	0x20000070

0800b77c <OnSystemReset>:

static void OnSystemReset(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b780:	f002 fced 	bl	800e15e <LmHandlerHalt>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <OnSystemReset+0x1c>
 800b78a:	f001 fff9 	bl	800d780 <LmHandlerJoinStatus>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b794:	f7ff f940 	bl	800aa18 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b798:	bf00      	nop
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <StopJoin>:

static void StopJoin(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b7a0:	4817      	ldr	r0, [pc, #92]	@ (800b800 <StopJoin+0x64>)
 800b7a2:	f010 fc9f 	bl	801c0e4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b7a6:	f002 fccd 	bl	800e144 <LmHandlerStop>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800b7b0:	4b14      	ldr	r3, [pc, #80]	@ (800b804 <StopJoin+0x68>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	2002      	movs	r0, #2
 800b7b8:	f010 fe9e 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800b7bc:	e01a      	b.n	800b7f4 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800b7be:	4b12      	ldr	r3, [pc, #72]	@ (800b808 <StopJoin+0x6c>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	2002      	movs	r0, #2
 800b7c6:	f010 fe97 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <StopJoin+0x70>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b810 <StopJoin+0x74>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	2002      	movs	r0, #2
 800b7d8:	f010 fe8e 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b7dc:	480d      	ldr	r0, [pc, #52]	@ (800b814 <StopJoin+0x78>)
 800b7de:	f001 fdd1 	bl	800d384 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b80c <StopJoin+0x70>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f001 ff47 	bl	800d67c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b7ee:	4804      	ldr	r0, [pc, #16]	@ (800b800 <StopJoin+0x64>)
 800b7f0:	f010 fc0a 	bl	801c008 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b7f4:	4808      	ldr	r0, [pc, #32]	@ (800b818 <StopJoin+0x7c>)
 800b7f6:	f010 fc07 	bl	801c008 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b7fa:	bf00      	nop
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	200005b4 	.word	0x200005b4
 800b804:	0801f9e4 	.word	0x0801f9e4
 800b808:	0801fa04 	.word	0x0801fa04
 800b80c:	20000020 	.word	0x20000020
 800b810:	0801fa18 	.word	0x0801fa18
 800b814:	20000070 	.word	0x20000070
 800b818:	200005cc 	.word	0x200005cc

0800b81c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b824:	4b05      	ldr	r3, [pc, #20]	@ (800b83c <OnStopJoinTimerEvent+0x20>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d103      	bne.n	800b834 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b82c:	2100      	movs	r1, #0
 800b82e:	2008      	movs	r0, #8
 800b830:	f010 fb34 	bl	801be9c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000020 	.word	0x20000020

0800b840 <StoreContext>:

static void StoreContext(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b846:	23ff      	movs	r3, #255	@ 0xff
 800b848:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b84a:	f002 fc95 	bl	800e178 <LmHandlerNvmDataStore>
 800b84e:	4603      	mov	r3, r0
 800b850:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800b852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b856:	f113 0f08 	cmn.w	r3, #8
 800b85a:	d106      	bne.n	800b86a <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800b85c:	4b0a      	ldr	r3, [pc, #40]	@ (800b888 <StoreContext+0x48>)
 800b85e:	2200      	movs	r2, #0
 800b860:	2100      	movs	r1, #0
 800b862:	2002      	movs	r0, #2
 800b864:	f010 fe48 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b868:	e00a      	b.n	800b880 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800b86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d105      	bne.n	800b880 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800b874:	4b05      	ldr	r3, [pc, #20]	@ (800b88c <StoreContext+0x4c>)
 800b876:	2200      	movs	r2, #0
 800b878:	2100      	movs	r1, #0
 800b87a:	2002      	movs	r0, #2
 800b87c:	f010 fe3c 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	0801fa38 	.word	0x0801fa38
 800b88c:	0801fa50 	.word	0x0801fa50

0800b890 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d106      	bne.n	800b8ae <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800b8a0:	4b08      	ldr	r3, [pc, #32]	@ (800b8c4 <OnNvmDataChange+0x34>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	2002      	movs	r0, #2
 800b8a8:	f010 fe26 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b8ac:	e005      	b.n	800b8ba <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800b8ae:	4b06      	ldr	r3, [pc, #24]	@ (800b8c8 <OnNvmDataChange+0x38>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	2002      	movs	r0, #2
 800b8b6:	f010 fe1f 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0801fa68 	.word	0x0801fa68
 800b8c8:	0801fa7c 	.word	0x0801fa7c

0800b8cc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800b8d6:	f7f9 fd13 	bl	8005300 <HAL_FLASH_Unlock>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11c      	bne.n	800b91a <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800b8e0:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <OnStoreContextRequest+0x58>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	029a      	lsls	r2, r3, #10
 800b8e6:	4b10      	ldr	r3, [pc, #64]	@ (800b928 <OnStoreContextRequest+0x5c>)
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800b8ee:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8f2:	fb01 f303 	mul.w	r3, r1, r3
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	0adb      	lsrs	r3, r3, #11
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7f5 ff8b 	bl	800181a <FLASH_IF_EraseByPages>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d105      	bne.n	800b916 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800b90a:	2300      	movs	r3, #0
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4806      	ldr	r0, [pc, #24]	@ (800b92c <OnStoreContextRequest+0x60>)
 800b912:	f7f5 fea1 	bl	8001658 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800b916:	f7f9 fd15 	bl	8005344 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	1fff75e0 	.word	0x1fff75e0
 800b928:	03fffc00 	.word	0x03fffc00
 800b92c:	0803f000 	.word	0x0803f000

0800b930 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	4903      	ldr	r1, [pc, #12]	@ (800b950 <OnRestoreContextRequest+0x20>)
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f00f fd8e 	bl	801b464 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	0803f000 	.word	0x0803f000

0800b954 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b958:	4b15      	ldr	r3, [pc, #84]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b95e:	4b14      	ldr	r3, [pc, #80]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b960:	2200      	movs	r2, #0
 800b962:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b964:	4b12      	ldr	r3, [pc, #72]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b966:	2200      	movs	r2, #0
 800b968:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b96a:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800b970:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f043 0301 	orr.w	r3, r3, #1
 800b978:	4a0d      	ldr	r2, [pc, #52]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b97a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b97c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10d      	bne.n	800b9a0 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b984:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b4 <LoraInfo_Init+0x60>)
 800b986:	2200      	movs	r2, #0
 800b988:	2100      	movs	r1, #0
 800b98a:	2000      	movs	r0, #0
 800b98c:	f010 fdb4 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b990:	bf00      	nop
 800b992:	f010 fd9f 	bl	801c4d4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b996:	4603      	mov	r3, r0
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d1fa      	bne.n	800b992 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b9a0:	4b03      	ldr	r3, [pc, #12]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800b9a6:	4b02      	ldr	r3, [pc, #8]	@ (800b9b0 <LoraInfo_Init+0x5c>)
 800b9a8:	2203      	movs	r2, #3
 800b9aa:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800b9ac:	bf00      	nop
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	20000720 	.word	0x20000720
 800b9b4:	0801fa90 	.word	0x0801fa90

0800b9b8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800b9bc:	4b02      	ldr	r3, [pc, #8]	@ (800b9c8 <LoraInfo_GetPtr+0x10>)
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bc80      	pop	{r7}
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	20000720 	.word	0x20000720

0800b9cc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b9d0:	f7f7 fd9d 	bl	800350e <BSP_RADIO_Init>
 800b9d4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f7 fdc2 	bl	8003570 <BSP_RADIO_ConfigRFSwitch>
 800b9ec:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b9fa:	f7f7 fe07 	bl	800360c <BSP_RADIO_GetTxConfig>
 800b9fe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ba08:	f7f7 fe07 	bl	800361a <BSP_RADIO_IsTCXO>
 800ba0c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ba16:	f7f7 fe07 	bl	8003628 <BSP_RADIO_IsDCDC>
 800ba1a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f7 fe02 	bl	8003636 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ba32:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	33f1      	adds	r3, #241	@ 0xf1
 800ba48:	2210      	movs	r2, #16
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f00c fa3f 	bl	8017ed0 <memset1>
    ctx->M_n = 0;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	22f0      	movs	r2, #240	@ 0xf0
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4618      	mov	r0, r3
 800ba62:	f00c fa35 	bl	8017ed0 <memset1>
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	2110      	movs	r1, #16
 800ba7e:	6838      	ldr	r0, [r7, #0]
 800ba80:	f000 fe5c 	bl	800c73c <lorawan_aes_set_key>
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08c      	sub	sp, #48	@ 0x30
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80a1 	beq.w	800bbe6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800baaa:	f1c3 0310 	rsb	r3, r3, #16
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	bf28      	it	cs
 800bab4:	4613      	movcs	r3, r2
 800bab6:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bac4:	4413      	add	r3, r2
 800bac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac8:	b292      	uxth	r2, r2
 800baca:	68b9      	ldr	r1, [r7, #8]
 800bacc:	4618      	mov	r0, r3
 800bace:	f00c f9c4 	bl	8017e5a <memcpy1>
        ctx->M_n += mlen;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bada:	441a      	add	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bae8:	2b0f      	cmp	r3, #15
 800baea:	f240 808d 	bls.w	800bc08 <AES_CMAC_Update+0x17c>
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf2:	429a      	cmp	r2, r3
 800baf4:	f000 8088 	beq.w	800bc08 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800baf8:	2300      	movs	r3, #0
 800bafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bafc:	e015      	b.n	800bb2a <AES_CMAC_Update+0x9e>
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb02:	4413      	add	r3, r2
 800bb04:	33f1      	adds	r3, #241	@ 0xf1
 800bb06:	781a      	ldrb	r2, [r3, #0]
 800bb08:	68f9      	ldr	r1, [r7, #12]
 800bb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	4053      	eors	r3, r2
 800bb16:	b2d9      	uxtb	r1, r3
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1c:	4413      	add	r3, r2
 800bb1e:	33f1      	adds	r3, #241	@ 0xf1
 800bb20:	460a      	mov	r2, r1
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb26:	3301      	adds	r3, #1
 800bb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2c:	2b0f      	cmp	r3, #15
 800bb2e:	dde6      	ble.n	800bafe <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bb36:	f107 0314 	add.w	r3, r7, #20
 800bb3a:	2210      	movs	r2, #16
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f00c f98c 	bl	8017e5a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	f107 0114 	add.w	r1, r7, #20
 800bb48:	f107 0314 	add.w	r3, r7, #20
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f000 fed3 	bl	800c8f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	33f1      	adds	r3, #241	@ 0xf1
 800bb56:	f107 0114 	add.w	r1, r7, #20
 800bb5a:	2210      	movs	r2, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f00c f97c 	bl	8017e5a <memcpy1>

        data += mlen;
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	4413      	add	r3, r2
 800bb68:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bb72:	e038      	b.n	800bbe6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bb74:	2300      	movs	r3, #0
 800bb76:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb78:	e013      	b.n	800bba2 <AES_CMAC_Update+0x116>
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7e:	4413      	add	r3, r2
 800bb80:	33f1      	adds	r3, #241	@ 0xf1
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	440b      	add	r3, r1
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	4053      	eors	r3, r2
 800bb8e:	b2d9      	uxtb	r1, r3
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	4413      	add	r3, r2
 800bb96:	33f1      	adds	r3, #241	@ 0xf1
 800bb98:	460a      	mov	r2, r1
 800bb9a:	701a      	strb	r2, [r3, #0]
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	3301      	adds	r3, #1
 800bba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	2b0f      	cmp	r3, #15
 800bba6:	dde8      	ble.n	800bb7a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	2210      	movs	r2, #16
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f00c f950 	bl	8017e5a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	f107 0114 	add.w	r1, r7, #20
 800bbc0:	f107 0314 	add.w	r3, r7, #20
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 fe97 	bl	800c8f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	33f1      	adds	r3, #241	@ 0xf1
 800bbce:	f107 0114 	add.w	r1, r7, #20
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00c f940 	bl	8017e5a <memcpy1>

        data += 16;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	3310      	adds	r3, #16
 800bbde:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3b10      	subs	r3, #16
 800bbe4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b10      	cmp	r3, #16
 800bbea:	d8c3      	bhi.n	800bb74 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	b292      	uxth	r2, r2
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f00c f92e 	bl	8017e5a <memcpy1>
    ctx->M_n = len;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bc06:	e000      	b.n	800bc0a <AES_CMAC_Update+0x17e>
            return;
 800bc08:	bf00      	nop
}
 800bc0a:	3730      	adds	r7, #48	@ 0x30
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b092      	sub	sp, #72	@ 0x48
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bc1a:	f107 031c 	add.w	r3, r7, #28
 800bc1e:	2210      	movs	r2, #16
 800bc20:	2100      	movs	r1, #0
 800bc22:	4618      	mov	r0, r3
 800bc24:	f00c f954 	bl	8017ed0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	f107 011c 	add.w	r1, r7, #28
 800bc2e:	f107 031c 	add.w	r3, r7, #28
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fe60 	bl	800c8f8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bc38:	7f3b      	ldrb	r3, [r7, #28]
 800bc3a:	b25b      	sxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da30      	bge.n	800bca2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800bc40:	2300      	movs	r3, #0
 800bc42:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc44:	e01b      	b.n	800bc7e <AES_CMAC_Final+0x6e>
 800bc46:	f107 021c 	add.w	r2, r7, #28
 800bc4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc4c:	4413      	add	r3, r2
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	b25a      	sxtb	r2, r3
 800bc54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc56:	3301      	adds	r3, #1
 800bc58:	3348      	adds	r3, #72	@ 0x48
 800bc5a:	443b      	add	r3, r7
 800bc5c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bc60:	09db      	lsrs	r3, r3, #7
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	b25b      	sxtb	r3, r3
 800bc66:	4313      	orrs	r3, r2
 800bc68:	b25b      	sxtb	r3, r3
 800bc6a:	b2d9      	uxtb	r1, r3
 800bc6c:	f107 021c 	add.w	r2, r7, #28
 800bc70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc72:	4413      	add	r3, r2
 800bc74:	460a      	mov	r2, r1
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc80:	2b0e      	cmp	r3, #14
 800bc82:	dde0      	ble.n	800bc46 <AES_CMAC_Final+0x36>
 800bc84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800bc90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc94:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bc98:	43db      	mvns	r3, r3
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bca0:	e027      	b.n	800bcf2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800bca2:	2300      	movs	r3, #0
 800bca4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bca6:	e01b      	b.n	800bce0 <AES_CMAC_Final+0xd0>
 800bca8:	f107 021c 	add.w	r2, r7, #28
 800bcac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcae:	4413      	add	r3, r2
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	b25a      	sxtb	r2, r3
 800bcb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb8:	3301      	adds	r3, #1
 800bcba:	3348      	adds	r3, #72	@ 0x48
 800bcbc:	443b      	add	r3, r7
 800bcbe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bcc2:	09db      	lsrs	r3, r3, #7
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	b2d9      	uxtb	r1, r3
 800bcce:	f107 021c 	add.w	r2, r7, #28
 800bcd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd4:	4413      	add	r3, r2
 800bcd6:	460a      	mov	r2, r1
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcdc:	3301      	adds	r3, #1
 800bcde:	643b      	str	r3, [r7, #64]	@ 0x40
 800bce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bce2:	2b0e      	cmp	r3, #14
 800bce4:	dde0      	ble.n	800bca8 <AES_CMAC_Final+0x98>
 800bce6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	d11d      	bne.n	800bd38 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd00:	e016      	b.n	800bd30 <AES_CMAC_Final+0x120>
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd06:	4413      	add	r3, r2
 800bd08:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bd0c:	781a      	ldrb	r2, [r3, #0]
 800bd0e:	f107 011c 	add.w	r1, r7, #28
 800bd12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd14:	440b      	add	r3, r1
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	4053      	eors	r3, r2
 800bd1a:	b2d9      	uxtb	r1, r3
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd20:	4413      	add	r3, r2
 800bd22:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bd26:	460a      	mov	r2, r1
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd32:	2b0f      	cmp	r3, #15
 800bd34:	dde5      	ble.n	800bd02 <AES_CMAC_Final+0xf2>
 800bd36:	e096      	b.n	800be66 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bd38:	7f3b      	ldrb	r3, [r7, #28]
 800bd3a:	b25b      	sxtb	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	da30      	bge.n	800bda2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bd40:	2300      	movs	r3, #0
 800bd42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd44:	e01b      	b.n	800bd7e <AES_CMAC_Final+0x16e>
 800bd46:	f107 021c 	add.w	r2, r7, #28
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4c:	4413      	add	r3, r2
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	b25a      	sxtb	r2, r3
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	3301      	adds	r3, #1
 800bd58:	3348      	adds	r3, #72	@ 0x48
 800bd5a:	443b      	add	r3, r7
 800bd5c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bd60:	09db      	lsrs	r3, r3, #7
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	b25b      	sxtb	r3, r3
 800bd66:	4313      	orrs	r3, r2
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	b2d9      	uxtb	r1, r3
 800bd6c:	f107 021c 	add.w	r2, r7, #28
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	4413      	add	r3, r2
 800bd74:	460a      	mov	r2, r1
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	2b0e      	cmp	r3, #14
 800bd82:	dde0      	ble.n	800bd46 <AES_CMAC_Final+0x136>
 800bd84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800bd90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd94:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bda0:	e027      	b.n	800bdf2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bda6:	e01b      	b.n	800bde0 <AES_CMAC_Final+0x1d0>
 800bda8:	f107 021c 	add.w	r2, r7, #28
 800bdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdae:	4413      	add	r3, r2
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	b25a      	sxtb	r2, r3
 800bdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb8:	3301      	adds	r3, #1
 800bdba:	3348      	adds	r3, #72	@ 0x48
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bdc2:	09db      	lsrs	r3, r3, #7
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	b2d9      	uxtb	r1, r3
 800bdce:	f107 021c 	add.w	r2, r7, #28
 800bdd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdd4:	4413      	add	r3, r2
 800bdd6:	460a      	mov	r2, r1
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bddc:	3301      	adds	r3, #1
 800bdde:	637b      	str	r3, [r7, #52]	@ 0x34
 800bde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde2:	2b0e      	cmp	r3, #14
 800bde4:	dde0      	ble.n	800bda8 <AES_CMAC_Final+0x198>
 800bde6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	2280      	movs	r2, #128	@ 0x80
 800bdfe:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800be02:	e007      	b.n	800be14 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	4413      	add	r3, r2
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800be28:	2b0f      	cmp	r3, #15
 800be2a:	d9eb      	bls.n	800be04 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800be2c:	2300      	movs	r3, #0
 800be2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800be30:	e016      	b.n	800be60 <AES_CMAC_Final+0x250>
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	4413      	add	r3, r2
 800be38:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	f107 011c 	add.w	r1, r7, #28
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	440b      	add	r3, r1
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	4053      	eors	r3, r2
 800be4a:	b2d9      	uxtb	r1, r3
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	4413      	add	r3, r2
 800be52:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800be56:	460a      	mov	r2, r1
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	3301      	adds	r3, #1
 800be5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	2b0f      	cmp	r3, #15
 800be64:	dde5      	ble.n	800be32 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800be66:	2300      	movs	r3, #0
 800be68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be6a:	e015      	b.n	800be98 <AES_CMAC_Final+0x288>
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	4413      	add	r3, r2
 800be72:	33f1      	adds	r3, #241	@ 0xf1
 800be74:	781a      	ldrb	r2, [r3, #0]
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	440b      	add	r3, r1
 800be7c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	4053      	eors	r3, r2
 800be84:	b2d9      	uxtb	r1, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8a:	4413      	add	r3, r2
 800be8c:	33f1      	adds	r3, #241	@ 0xf1
 800be8e:	460a      	mov	r2, r1
 800be90:	701a      	strb	r2, [r3, #0]
 800be92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be94:	3301      	adds	r3, #1
 800be96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	2b0f      	cmp	r3, #15
 800be9c:	dde6      	ble.n	800be6c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bea4:	f107 030c 	add.w	r3, r7, #12
 800bea8:	2210      	movs	r2, #16
 800beaa:	4618      	mov	r0, r3
 800beac:	f00b ffd5 	bl	8017e5a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	f107 030c 	add.w	r3, r7, #12
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fd1d 	bl	800c8f8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bebe:	f107 031c 	add.w	r3, r7, #28
 800bec2:	2210      	movs	r2, #16
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f00c f802 	bl	8017ed0 <memset1>
}
 800becc:	bf00      	nop
 800bece:	3748      	adds	r7, #72	@ 0x48
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3301      	adds	r3, #1
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	7852      	ldrb	r2, [r2, #1]
 800beee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3302      	adds	r3, #2
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	7892      	ldrb	r2, [r2, #2]
 800bef8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3303      	adds	r3, #3
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	78d2      	ldrb	r2, [r2, #3]
 800bf02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3304      	adds	r3, #4
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	7912      	ldrb	r2, [r2, #4]
 800bf0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3305      	adds	r3, #5
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	7952      	ldrb	r2, [r2, #5]
 800bf16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3306      	adds	r3, #6
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	7992      	ldrb	r2, [r2, #6]
 800bf20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3307      	adds	r3, #7
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	79d2      	ldrb	r2, [r2, #7]
 800bf2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3308      	adds	r3, #8
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	7a12      	ldrb	r2, [r2, #8]
 800bf34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3309      	adds	r3, #9
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	7a52      	ldrb	r2, [r2, #9]
 800bf3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	330a      	adds	r3, #10
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	7a92      	ldrb	r2, [r2, #10]
 800bf48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	330b      	adds	r3, #11
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	7ad2      	ldrb	r2, [r2, #11]
 800bf52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	330c      	adds	r3, #12
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	7b12      	ldrb	r2, [r2, #12]
 800bf5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	330d      	adds	r3, #13
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	7b52      	ldrb	r2, [r2, #13]
 800bf66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	330e      	adds	r3, #14
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	7b92      	ldrb	r2, [r2, #14]
 800bf70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	330f      	adds	r3, #15
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	7bd2      	ldrb	r2, [r2, #15]
 800bf7a:	701a      	strb	r2, [r3, #0]
#endif
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bc80      	pop	{r7}
 800bf84:	4770      	bx	lr

0800bf86 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bf86:	b480      	push	{r7}
 800bf88:	b085      	sub	sp, #20
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	4613      	mov	r3, r2
 800bf92:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bf94:	e007      	b.n	800bfa6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	1c53      	adds	r3, r2, #1
 800bf9a:	60bb      	str	r3, [r7, #8]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	1c59      	adds	r1, r3, #1
 800bfa0:	60f9      	str	r1, [r7, #12]
 800bfa2:	7812      	ldrb	r2, [r2, #0]
 800bfa4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	1e5a      	subs	r2, r3, #1
 800bfaa:	71fa      	strb	r2, [r7, #7]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1f2      	bne.n	800bf96 <copy_block_nn+0x10>
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bc80      	pop	{r7}
 800bfba:	4770      	bx	lr

0800bfbc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	7819      	ldrb	r1, [r3, #0]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	781a      	ldrb	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	404a      	eors	r2, r1
 800bfe8:	b2d2      	uxtb	r2, r2
 800bfea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3302      	adds	r3, #2
 800bff0:	7819      	ldrb	r1, [r3, #0]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	3302      	adds	r3, #2
 800bff6:	781a      	ldrb	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3302      	adds	r3, #2
 800bffc:	404a      	eors	r2, r1
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3303      	adds	r3, #3
 800c006:	7819      	ldrb	r1, [r3, #0]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	3303      	adds	r3, #3
 800c00c:	781a      	ldrb	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3303      	adds	r3, #3
 800c012:	404a      	eors	r2, r1
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3304      	adds	r3, #4
 800c01c:	7819      	ldrb	r1, [r3, #0]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	3304      	adds	r3, #4
 800c022:	781a      	ldrb	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3304      	adds	r3, #4
 800c028:	404a      	eors	r2, r1
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3305      	adds	r3, #5
 800c032:	7819      	ldrb	r1, [r3, #0]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	3305      	adds	r3, #5
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3305      	adds	r3, #5
 800c03e:	404a      	eors	r2, r1
 800c040:	b2d2      	uxtb	r2, r2
 800c042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3306      	adds	r3, #6
 800c048:	7819      	ldrb	r1, [r3, #0]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	3306      	adds	r3, #6
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3306      	adds	r3, #6
 800c054:	404a      	eors	r2, r1
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3307      	adds	r3, #7
 800c05e:	7819      	ldrb	r1, [r3, #0]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	3307      	adds	r3, #7
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3307      	adds	r3, #7
 800c06a:	404a      	eors	r2, r1
 800c06c:	b2d2      	uxtb	r2, r2
 800c06e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3308      	adds	r3, #8
 800c074:	7819      	ldrb	r1, [r3, #0]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	781a      	ldrb	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3308      	adds	r3, #8
 800c080:	404a      	eors	r2, r1
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3309      	adds	r3, #9
 800c08a:	7819      	ldrb	r1, [r3, #0]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	3309      	adds	r3, #9
 800c090:	781a      	ldrb	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3309      	adds	r3, #9
 800c096:	404a      	eors	r2, r1
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	330a      	adds	r3, #10
 800c0a0:	7819      	ldrb	r1, [r3, #0]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	330a      	adds	r3, #10
 800c0a6:	781a      	ldrb	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	330a      	adds	r3, #10
 800c0ac:	404a      	eors	r2, r1
 800c0ae:	b2d2      	uxtb	r2, r2
 800c0b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	330b      	adds	r3, #11
 800c0b6:	7819      	ldrb	r1, [r3, #0]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	330b      	adds	r3, #11
 800c0bc:	781a      	ldrb	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	330b      	adds	r3, #11
 800c0c2:	404a      	eors	r2, r1
 800c0c4:	b2d2      	uxtb	r2, r2
 800c0c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	330c      	adds	r3, #12
 800c0cc:	7819      	ldrb	r1, [r3, #0]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	330c      	adds	r3, #12
 800c0d2:	781a      	ldrb	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	404a      	eors	r2, r1
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	330d      	adds	r3, #13
 800c0e2:	7819      	ldrb	r1, [r3, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	330d      	adds	r3, #13
 800c0e8:	781a      	ldrb	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	330d      	adds	r3, #13
 800c0ee:	404a      	eors	r2, r1
 800c0f0:	b2d2      	uxtb	r2, r2
 800c0f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	330e      	adds	r3, #14
 800c0f8:	7819      	ldrb	r1, [r3, #0]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	330e      	adds	r3, #14
 800c0fe:	781a      	ldrb	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	330e      	adds	r3, #14
 800c104:	404a      	eors	r2, r1
 800c106:	b2d2      	uxtb	r2, r2
 800c108:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	330f      	adds	r3, #15
 800c10e:	7819      	ldrb	r1, [r3, #0]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	330f      	adds	r3, #15
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	330f      	adds	r3, #15
 800c11a:	404a      	eors	r2, r1
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	bc80      	pop	{r7}
 800c128:	4770      	bx	lr

0800c12a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c12a:	b480      	push	{r7}
 800c12c:	b085      	sub	sp, #20
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	4053      	eors	r3, r2
 800c140:	b2da      	uxtb	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	3301      	adds	r3, #1
 800c14a:	7819      	ldrb	r1, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3301      	adds	r3, #1
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3301      	adds	r3, #1
 800c156:	404a      	eors	r2, r1
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	3302      	adds	r3, #2
 800c160:	7819      	ldrb	r1, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3302      	adds	r3, #2
 800c166:	781a      	ldrb	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3302      	adds	r3, #2
 800c16c:	404a      	eors	r2, r1
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	3303      	adds	r3, #3
 800c176:	7819      	ldrb	r1, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3303      	adds	r3, #3
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3303      	adds	r3, #3
 800c182:	404a      	eors	r2, r1
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	3304      	adds	r3, #4
 800c18c:	7819      	ldrb	r1, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3304      	adds	r3, #4
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3304      	adds	r3, #4
 800c198:	404a      	eors	r2, r1
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	3305      	adds	r3, #5
 800c1a2:	7819      	ldrb	r1, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3305      	adds	r3, #5
 800c1a8:	781a      	ldrb	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3305      	adds	r3, #5
 800c1ae:	404a      	eors	r2, r1
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	3306      	adds	r3, #6
 800c1b8:	7819      	ldrb	r1, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3306      	adds	r3, #6
 800c1be:	781a      	ldrb	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	3306      	adds	r3, #6
 800c1c4:	404a      	eors	r2, r1
 800c1c6:	b2d2      	uxtb	r2, r2
 800c1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	3307      	adds	r3, #7
 800c1ce:	7819      	ldrb	r1, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3307      	adds	r3, #7
 800c1d4:	781a      	ldrb	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3307      	adds	r3, #7
 800c1da:	404a      	eors	r2, r1
 800c1dc:	b2d2      	uxtb	r2, r2
 800c1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	7819      	ldrb	r1, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	404a      	eors	r2, r1
 800c1f2:	b2d2      	uxtb	r2, r2
 800c1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	3309      	adds	r3, #9
 800c1fa:	7819      	ldrb	r1, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3309      	adds	r3, #9
 800c200:	781a      	ldrb	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3309      	adds	r3, #9
 800c206:	404a      	eors	r2, r1
 800c208:	b2d2      	uxtb	r2, r2
 800c20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	330a      	adds	r3, #10
 800c210:	7819      	ldrb	r1, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	330a      	adds	r3, #10
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	330a      	adds	r3, #10
 800c21c:	404a      	eors	r2, r1
 800c21e:	b2d2      	uxtb	r2, r2
 800c220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	330b      	adds	r3, #11
 800c226:	7819      	ldrb	r1, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	330b      	adds	r3, #11
 800c22c:	781a      	ldrb	r2, [r3, #0]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	330b      	adds	r3, #11
 800c232:	404a      	eors	r2, r1
 800c234:	b2d2      	uxtb	r2, r2
 800c236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	330c      	adds	r3, #12
 800c23c:	7819      	ldrb	r1, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	330c      	adds	r3, #12
 800c242:	781a      	ldrb	r2, [r3, #0]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	330c      	adds	r3, #12
 800c248:	404a      	eors	r2, r1
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	330d      	adds	r3, #13
 800c252:	7819      	ldrb	r1, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	330d      	adds	r3, #13
 800c258:	781a      	ldrb	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	330d      	adds	r3, #13
 800c25e:	404a      	eors	r2, r1
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	330e      	adds	r3, #14
 800c268:	7819      	ldrb	r1, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	330e      	adds	r3, #14
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	330e      	adds	r3, #14
 800c274:	404a      	eors	r2, r1
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	330f      	adds	r3, #15
 800c27e:	7819      	ldrb	r1, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	330f      	adds	r3, #15
 800c284:	781a      	ldrb	r2, [r3, #0]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	330f      	adds	r3, #15
 800c28a:	404a      	eors	r2, r1
 800c28c:	b2d2      	uxtb	r2, r2
 800c28e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c290:	bf00      	nop
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	bc80      	pop	{r7}
 800c298:	4770      	bx	lr

0800c29a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b082      	sub	sp, #8
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7ff fe88 	bl	800bfbc <xor_block>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	4b48      	ldr	r3, [pc, #288]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c2c4:	5c9a      	ldrb	r2, [r3, r2]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	701a      	strb	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	4a43      	ldr	r2, [pc, #268]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c2d8:	5c52      	ldrb	r2, [r2, r1]
 800c2da:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	4a3e      	ldr	r2, [pc, #248]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c2ea:	5c52      	ldrb	r2, [r2, r1]
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	330c      	adds	r3, #12
 800c2fa:	4a3a      	ldr	r2, [pc, #232]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c2fc:	5c52      	ldrb	r2, [r2, r1]
 800c2fe:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	785b      	ldrb	r3, [r3, #1]
 800c304:	73fb      	strb	r3, [r7, #15]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3305      	adds	r3, #5
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	4619      	mov	r1, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3301      	adds	r3, #1
 800c312:	4a34      	ldr	r2, [pc, #208]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c314:	5c52      	ldrb	r2, [r2, r1]
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3309      	adds	r3, #9
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	4619      	mov	r1, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3305      	adds	r3, #5
 800c324:	4a2f      	ldr	r2, [pc, #188]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c326:	5c52      	ldrb	r2, [r2, r1]
 800c328:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	330d      	adds	r3, #13
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	4619      	mov	r1, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3309      	adds	r3, #9
 800c336:	4a2b      	ldr	r2, [pc, #172]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c338:	5c52      	ldrb	r2, [r2, r1]
 800c33a:	701a      	strb	r2, [r3, #0]
 800c33c:	7bfa      	ldrb	r2, [r7, #15]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	330d      	adds	r3, #13
 800c342:	4928      	ldr	r1, [pc, #160]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c344:	5c8a      	ldrb	r2, [r1, r2]
 800c346:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	789b      	ldrb	r3, [r3, #2]
 800c34c:	73fb      	strb	r3, [r7, #15]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	330a      	adds	r3, #10
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	4619      	mov	r1, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3302      	adds	r3, #2
 800c35a:	4a22      	ldr	r2, [pc, #136]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c35c:	5c52      	ldrb	r2, [r2, r1]
 800c35e:	701a      	strb	r2, [r3, #0]
 800c360:	7bfa      	ldrb	r2, [r7, #15]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	330a      	adds	r3, #10
 800c366:	491f      	ldr	r1, [pc, #124]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c368:	5c8a      	ldrb	r2, [r1, r2]
 800c36a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	799b      	ldrb	r3, [r3, #6]
 800c370:	73fb      	strb	r3, [r7, #15]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	330e      	adds	r3, #14
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4619      	mov	r1, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3306      	adds	r3, #6
 800c37e:	4a19      	ldr	r2, [pc, #100]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c380:	5c52      	ldrb	r2, [r2, r1]
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	7bfa      	ldrb	r2, [r7, #15]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	330e      	adds	r3, #14
 800c38a:	4916      	ldr	r1, [pc, #88]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c38c:	5c8a      	ldrb	r2, [r1, r2]
 800c38e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7bdb      	ldrb	r3, [r3, #15]
 800c394:	73fb      	strb	r3, [r7, #15]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	330b      	adds	r3, #11
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	4619      	mov	r1, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	330f      	adds	r3, #15
 800c3a2:	4a10      	ldr	r2, [pc, #64]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c3a4:	5c52      	ldrb	r2, [r2, r1]
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3307      	adds	r3, #7
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	330b      	adds	r3, #11
 800c3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c3b6:	5c52      	ldrb	r2, [r2, r1]
 800c3b8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3303      	adds	r3, #3
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3307      	adds	r3, #7
 800c3c6:	4a07      	ldr	r2, [pc, #28]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c3c8:	5c52      	ldrb	r2, [r2, r1]
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	7bfa      	ldrb	r2, [r7, #15]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3303      	adds	r3, #3
 800c3d2:	4904      	ldr	r1, [pc, #16]	@ (800c3e4 <shift_sub_rows+0x130>)
 800c3d4:	5c8a      	ldrb	r2, [r1, r2]
 800c3d6:	701a      	strb	r2, [r3, #0]
}
 800c3d8:	bf00      	nop
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	08020080 	.word	0x08020080

0800c3e8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c3f0:	f107 0308 	add.w	r3, r7, #8
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fd6c 	bl	800bed4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c3fc:	7a3b      	ldrb	r3, [r7, #8]
 800c3fe:	461a      	mov	r2, r3
 800c400:	4b9a      	ldr	r3, [pc, #616]	@ (800c66c <mix_sub_columns+0x284>)
 800c402:	5c9a      	ldrb	r2, [r3, r2]
 800c404:	7b7b      	ldrb	r3, [r7, #13]
 800c406:	4619      	mov	r1, r3
 800c408:	4b99      	ldr	r3, [pc, #612]	@ (800c670 <mix_sub_columns+0x288>)
 800c40a:	5c5b      	ldrb	r3, [r3, r1]
 800c40c:	4053      	eors	r3, r2
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	7cbb      	ldrb	r3, [r7, #18]
 800c412:	4619      	mov	r1, r3
 800c414:	4b97      	ldr	r3, [pc, #604]	@ (800c674 <mix_sub_columns+0x28c>)
 800c416:	5c5b      	ldrb	r3, [r3, r1]
 800c418:	4053      	eors	r3, r2
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	4619      	mov	r1, r3
 800c420:	4b94      	ldr	r3, [pc, #592]	@ (800c674 <mix_sub_columns+0x28c>)
 800c422:	5c5b      	ldrb	r3, [r3, r1]
 800c424:	4053      	eors	r3, r2
 800c426:	b2da      	uxtb	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c42c:	7a3b      	ldrb	r3, [r7, #8]
 800c42e:	461a      	mov	r2, r3
 800c430:	4b90      	ldr	r3, [pc, #576]	@ (800c674 <mix_sub_columns+0x28c>)
 800c432:	5c9a      	ldrb	r2, [r3, r2]
 800c434:	7b7b      	ldrb	r3, [r7, #13]
 800c436:	4619      	mov	r1, r3
 800c438:	4b8c      	ldr	r3, [pc, #560]	@ (800c66c <mix_sub_columns+0x284>)
 800c43a:	5c5b      	ldrb	r3, [r3, r1]
 800c43c:	4053      	eors	r3, r2
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	7cbb      	ldrb	r3, [r7, #18]
 800c442:	4619      	mov	r1, r3
 800c444:	4b8a      	ldr	r3, [pc, #552]	@ (800c670 <mix_sub_columns+0x288>)
 800c446:	5c5b      	ldrb	r3, [r3, r1]
 800c448:	4053      	eors	r3, r2
 800c44a:	b2d9      	uxtb	r1, r3
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	461a      	mov	r2, r3
 800c450:	4b88      	ldr	r3, [pc, #544]	@ (800c674 <mix_sub_columns+0x28c>)
 800c452:	5c9a      	ldrb	r2, [r3, r2]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3301      	adds	r3, #1
 800c458:	404a      	eors	r2, r1
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c45e:	7a3b      	ldrb	r3, [r7, #8]
 800c460:	461a      	mov	r2, r3
 800c462:	4b84      	ldr	r3, [pc, #528]	@ (800c674 <mix_sub_columns+0x28c>)
 800c464:	5c9a      	ldrb	r2, [r3, r2]
 800c466:	7b7b      	ldrb	r3, [r7, #13]
 800c468:	4619      	mov	r1, r3
 800c46a:	4b82      	ldr	r3, [pc, #520]	@ (800c674 <mix_sub_columns+0x28c>)
 800c46c:	5c5b      	ldrb	r3, [r3, r1]
 800c46e:	4053      	eors	r3, r2
 800c470:	b2da      	uxtb	r2, r3
 800c472:	7cbb      	ldrb	r3, [r7, #18]
 800c474:	4619      	mov	r1, r3
 800c476:	4b7d      	ldr	r3, [pc, #500]	@ (800c66c <mix_sub_columns+0x284>)
 800c478:	5c5b      	ldrb	r3, [r3, r1]
 800c47a:	4053      	eors	r3, r2
 800c47c:	b2d9      	uxtb	r1, r3
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	461a      	mov	r2, r3
 800c482:	4b7b      	ldr	r3, [pc, #492]	@ (800c670 <mix_sub_columns+0x288>)
 800c484:	5c9a      	ldrb	r2, [r3, r2]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3302      	adds	r3, #2
 800c48a:	404a      	eors	r2, r1
 800c48c:	b2d2      	uxtb	r2, r2
 800c48e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c490:	7a3b      	ldrb	r3, [r7, #8]
 800c492:	461a      	mov	r2, r3
 800c494:	4b76      	ldr	r3, [pc, #472]	@ (800c670 <mix_sub_columns+0x288>)
 800c496:	5c9a      	ldrb	r2, [r3, r2]
 800c498:	7b7b      	ldrb	r3, [r7, #13]
 800c49a:	4619      	mov	r1, r3
 800c49c:	4b75      	ldr	r3, [pc, #468]	@ (800c674 <mix_sub_columns+0x28c>)
 800c49e:	5c5b      	ldrb	r3, [r3, r1]
 800c4a0:	4053      	eors	r3, r2
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	7cbb      	ldrb	r3, [r7, #18]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4b72      	ldr	r3, [pc, #456]	@ (800c674 <mix_sub_columns+0x28c>)
 800c4aa:	5c5b      	ldrb	r3, [r3, r1]
 800c4ac:	4053      	eors	r3, r2
 800c4ae:	b2d9      	uxtb	r1, r3
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4b6d      	ldr	r3, [pc, #436]	@ (800c66c <mix_sub_columns+0x284>)
 800c4b6:	5c9a      	ldrb	r2, [r3, r2]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3303      	adds	r3, #3
 800c4bc:	404a      	eors	r2, r1
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c4c2:	7b3b      	ldrb	r3, [r7, #12]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	4b69      	ldr	r3, [pc, #420]	@ (800c66c <mix_sub_columns+0x284>)
 800c4c8:	5c9a      	ldrb	r2, [r3, r2]
 800c4ca:	7c7b      	ldrb	r3, [r7, #17]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4b68      	ldr	r3, [pc, #416]	@ (800c670 <mix_sub_columns+0x288>)
 800c4d0:	5c5b      	ldrb	r3, [r3, r1]
 800c4d2:	4053      	eors	r3, r2
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	7dbb      	ldrb	r3, [r7, #22]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4b66      	ldr	r3, [pc, #408]	@ (800c674 <mix_sub_columns+0x28c>)
 800c4dc:	5c5b      	ldrb	r3, [r3, r1]
 800c4de:	4053      	eors	r3, r2
 800c4e0:	b2d9      	uxtb	r1, r3
 800c4e2:	7afb      	ldrb	r3, [r7, #11]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4b63      	ldr	r3, [pc, #396]	@ (800c674 <mix_sub_columns+0x28c>)
 800c4e8:	5c9a      	ldrb	r2, [r3, r2]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	404a      	eors	r2, r1
 800c4f0:	b2d2      	uxtb	r2, r2
 800c4f2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c4f4:	7b3b      	ldrb	r3, [r7, #12]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4b5e      	ldr	r3, [pc, #376]	@ (800c674 <mix_sub_columns+0x28c>)
 800c4fa:	5c9a      	ldrb	r2, [r3, r2]
 800c4fc:	7c7b      	ldrb	r3, [r7, #17]
 800c4fe:	4619      	mov	r1, r3
 800c500:	4b5a      	ldr	r3, [pc, #360]	@ (800c66c <mix_sub_columns+0x284>)
 800c502:	5c5b      	ldrb	r3, [r3, r1]
 800c504:	4053      	eors	r3, r2
 800c506:	b2da      	uxtb	r2, r3
 800c508:	7dbb      	ldrb	r3, [r7, #22]
 800c50a:	4619      	mov	r1, r3
 800c50c:	4b58      	ldr	r3, [pc, #352]	@ (800c670 <mix_sub_columns+0x288>)
 800c50e:	5c5b      	ldrb	r3, [r3, r1]
 800c510:	4053      	eors	r3, r2
 800c512:	b2d9      	uxtb	r1, r3
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	461a      	mov	r2, r3
 800c518:	4b56      	ldr	r3, [pc, #344]	@ (800c674 <mix_sub_columns+0x28c>)
 800c51a:	5c9a      	ldrb	r2, [r3, r2]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3305      	adds	r3, #5
 800c520:	404a      	eors	r2, r1
 800c522:	b2d2      	uxtb	r2, r2
 800c524:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c526:	7b3b      	ldrb	r3, [r7, #12]
 800c528:	461a      	mov	r2, r3
 800c52a:	4b52      	ldr	r3, [pc, #328]	@ (800c674 <mix_sub_columns+0x28c>)
 800c52c:	5c9a      	ldrb	r2, [r3, r2]
 800c52e:	7c7b      	ldrb	r3, [r7, #17]
 800c530:	4619      	mov	r1, r3
 800c532:	4b50      	ldr	r3, [pc, #320]	@ (800c674 <mix_sub_columns+0x28c>)
 800c534:	5c5b      	ldrb	r3, [r3, r1]
 800c536:	4053      	eors	r3, r2
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	7dbb      	ldrb	r3, [r7, #22]
 800c53c:	4619      	mov	r1, r3
 800c53e:	4b4b      	ldr	r3, [pc, #300]	@ (800c66c <mix_sub_columns+0x284>)
 800c540:	5c5b      	ldrb	r3, [r3, r1]
 800c542:	4053      	eors	r3, r2
 800c544:	b2d9      	uxtb	r1, r3
 800c546:	7afb      	ldrb	r3, [r7, #11]
 800c548:	461a      	mov	r2, r3
 800c54a:	4b49      	ldr	r3, [pc, #292]	@ (800c670 <mix_sub_columns+0x288>)
 800c54c:	5c9a      	ldrb	r2, [r3, r2]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3306      	adds	r3, #6
 800c552:	404a      	eors	r2, r1
 800c554:	b2d2      	uxtb	r2, r2
 800c556:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c558:	7b3b      	ldrb	r3, [r7, #12]
 800c55a:	461a      	mov	r2, r3
 800c55c:	4b44      	ldr	r3, [pc, #272]	@ (800c670 <mix_sub_columns+0x288>)
 800c55e:	5c9a      	ldrb	r2, [r3, r2]
 800c560:	7c7b      	ldrb	r3, [r7, #17]
 800c562:	4619      	mov	r1, r3
 800c564:	4b43      	ldr	r3, [pc, #268]	@ (800c674 <mix_sub_columns+0x28c>)
 800c566:	5c5b      	ldrb	r3, [r3, r1]
 800c568:	4053      	eors	r3, r2
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	7dbb      	ldrb	r3, [r7, #22]
 800c56e:	4619      	mov	r1, r3
 800c570:	4b40      	ldr	r3, [pc, #256]	@ (800c674 <mix_sub_columns+0x28c>)
 800c572:	5c5b      	ldrb	r3, [r3, r1]
 800c574:	4053      	eors	r3, r2
 800c576:	b2d9      	uxtb	r1, r3
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	461a      	mov	r2, r3
 800c57c:	4b3b      	ldr	r3, [pc, #236]	@ (800c66c <mix_sub_columns+0x284>)
 800c57e:	5c9a      	ldrb	r2, [r3, r2]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3307      	adds	r3, #7
 800c584:	404a      	eors	r2, r1
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c58a:	7c3b      	ldrb	r3, [r7, #16]
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b37      	ldr	r3, [pc, #220]	@ (800c66c <mix_sub_columns+0x284>)
 800c590:	5c9a      	ldrb	r2, [r3, r2]
 800c592:	7d7b      	ldrb	r3, [r7, #21]
 800c594:	4619      	mov	r1, r3
 800c596:	4b36      	ldr	r3, [pc, #216]	@ (800c670 <mix_sub_columns+0x288>)
 800c598:	5c5b      	ldrb	r3, [r3, r1]
 800c59a:	4053      	eors	r3, r2
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	7abb      	ldrb	r3, [r7, #10]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4b34      	ldr	r3, [pc, #208]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5a4:	5c5b      	ldrb	r3, [r3, r1]
 800c5a6:	4053      	eors	r3, r2
 800c5a8:	b2d9      	uxtb	r1, r3
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4b31      	ldr	r3, [pc, #196]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5b0:	5c9a      	ldrb	r2, [r3, r2]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3308      	adds	r3, #8
 800c5b6:	404a      	eors	r2, r1
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c5bc:	7c3b      	ldrb	r3, [r7, #16]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4b2c      	ldr	r3, [pc, #176]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5c2:	5c9a      	ldrb	r2, [r3, r2]
 800c5c4:	7d7b      	ldrb	r3, [r7, #21]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4b28      	ldr	r3, [pc, #160]	@ (800c66c <mix_sub_columns+0x284>)
 800c5ca:	5c5b      	ldrb	r3, [r3, r1]
 800c5cc:	4053      	eors	r3, r2
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	7abb      	ldrb	r3, [r7, #10]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4b26      	ldr	r3, [pc, #152]	@ (800c670 <mix_sub_columns+0x288>)
 800c5d6:	5c5b      	ldrb	r3, [r3, r1]
 800c5d8:	4053      	eors	r3, r2
 800c5da:	b2d9      	uxtb	r1, r3
 800c5dc:	7bfb      	ldrb	r3, [r7, #15]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4b24      	ldr	r3, [pc, #144]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5e2:	5c9a      	ldrb	r2, [r3, r2]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3309      	adds	r3, #9
 800c5e8:	404a      	eors	r2, r1
 800c5ea:	b2d2      	uxtb	r2, r2
 800c5ec:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c5ee:	7c3b      	ldrb	r3, [r7, #16]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4b20      	ldr	r3, [pc, #128]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5f4:	5c9a      	ldrb	r2, [r3, r2]
 800c5f6:	7d7b      	ldrb	r3, [r7, #21]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c674 <mix_sub_columns+0x28c>)
 800c5fc:	5c5b      	ldrb	r3, [r3, r1]
 800c5fe:	4053      	eors	r3, r2
 800c600:	b2da      	uxtb	r2, r3
 800c602:	7abb      	ldrb	r3, [r7, #10]
 800c604:	4619      	mov	r1, r3
 800c606:	4b19      	ldr	r3, [pc, #100]	@ (800c66c <mix_sub_columns+0x284>)
 800c608:	5c5b      	ldrb	r3, [r3, r1]
 800c60a:	4053      	eors	r3, r2
 800c60c:	b2d9      	uxtb	r1, r3
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	461a      	mov	r2, r3
 800c612:	4b17      	ldr	r3, [pc, #92]	@ (800c670 <mix_sub_columns+0x288>)
 800c614:	5c9a      	ldrb	r2, [r3, r2]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	330a      	adds	r3, #10
 800c61a:	404a      	eors	r2, r1
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c620:	7c3b      	ldrb	r3, [r7, #16]
 800c622:	461a      	mov	r2, r3
 800c624:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <mix_sub_columns+0x288>)
 800c626:	5c9a      	ldrb	r2, [r3, r2]
 800c628:	7d7b      	ldrb	r3, [r7, #21]
 800c62a:	4619      	mov	r1, r3
 800c62c:	4b11      	ldr	r3, [pc, #68]	@ (800c674 <mix_sub_columns+0x28c>)
 800c62e:	5c5b      	ldrb	r3, [r3, r1]
 800c630:	4053      	eors	r3, r2
 800c632:	b2da      	uxtb	r2, r3
 800c634:	7abb      	ldrb	r3, [r7, #10]
 800c636:	4619      	mov	r1, r3
 800c638:	4b0e      	ldr	r3, [pc, #56]	@ (800c674 <mix_sub_columns+0x28c>)
 800c63a:	5c5b      	ldrb	r3, [r3, r1]
 800c63c:	4053      	eors	r3, r2
 800c63e:	b2d9      	uxtb	r1, r3
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	461a      	mov	r2, r3
 800c644:	4b09      	ldr	r3, [pc, #36]	@ (800c66c <mix_sub_columns+0x284>)
 800c646:	5c9a      	ldrb	r2, [r3, r2]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	330b      	adds	r3, #11
 800c64c:	404a      	eors	r2, r1
 800c64e:	b2d2      	uxtb	r2, r2
 800c650:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c652:	7d3b      	ldrb	r3, [r7, #20]
 800c654:	461a      	mov	r2, r3
 800c656:	4b05      	ldr	r3, [pc, #20]	@ (800c66c <mix_sub_columns+0x284>)
 800c658:	5c9a      	ldrb	r2, [r3, r2]
 800c65a:	7a7b      	ldrb	r3, [r7, #9]
 800c65c:	4619      	mov	r1, r3
 800c65e:	4b04      	ldr	r3, [pc, #16]	@ (800c670 <mix_sub_columns+0x288>)
 800c660:	5c5b      	ldrb	r3, [r3, r1]
 800c662:	4053      	eors	r3, r2
 800c664:	b2da      	uxtb	r2, r3
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	4619      	mov	r1, r3
 800c66a:	e005      	b.n	800c678 <mix_sub_columns+0x290>
 800c66c:	08020180 	.word	0x08020180
 800c670:	08020280 	.word	0x08020280
 800c674:	08020080 	.word	0x08020080
 800c678:	4b2d      	ldr	r3, [pc, #180]	@ (800c730 <mix_sub_columns+0x348>)
 800c67a:	5c5b      	ldrb	r3, [r3, r1]
 800c67c:	4053      	eors	r3, r2
 800c67e:	b2d9      	uxtb	r1, r3
 800c680:	7cfb      	ldrb	r3, [r7, #19]
 800c682:	461a      	mov	r2, r3
 800c684:	4b2a      	ldr	r3, [pc, #168]	@ (800c730 <mix_sub_columns+0x348>)
 800c686:	5c9a      	ldrb	r2, [r3, r2]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	330c      	adds	r3, #12
 800c68c:	404a      	eors	r2, r1
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c692:	7d3b      	ldrb	r3, [r7, #20]
 800c694:	461a      	mov	r2, r3
 800c696:	4b26      	ldr	r3, [pc, #152]	@ (800c730 <mix_sub_columns+0x348>)
 800c698:	5c9a      	ldrb	r2, [r3, r2]
 800c69a:	7a7b      	ldrb	r3, [r7, #9]
 800c69c:	4619      	mov	r1, r3
 800c69e:	4b25      	ldr	r3, [pc, #148]	@ (800c734 <mix_sub_columns+0x34c>)
 800c6a0:	5c5b      	ldrb	r3, [r3, r1]
 800c6a2:	4053      	eors	r3, r2
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	7bbb      	ldrb	r3, [r7, #14]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	4b23      	ldr	r3, [pc, #140]	@ (800c738 <mix_sub_columns+0x350>)
 800c6ac:	5c5b      	ldrb	r3, [r3, r1]
 800c6ae:	4053      	eors	r3, r2
 800c6b0:	b2d9      	uxtb	r1, r3
 800c6b2:	7cfb      	ldrb	r3, [r7, #19]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c730 <mix_sub_columns+0x348>)
 800c6b8:	5c9a      	ldrb	r2, [r3, r2]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	330d      	adds	r3, #13
 800c6be:	404a      	eors	r2, r1
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c6c4:	7d3b      	ldrb	r3, [r7, #20]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4b19      	ldr	r3, [pc, #100]	@ (800c730 <mix_sub_columns+0x348>)
 800c6ca:	5c9a      	ldrb	r2, [r3, r2]
 800c6cc:	7a7b      	ldrb	r3, [r7, #9]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4b17      	ldr	r3, [pc, #92]	@ (800c730 <mix_sub_columns+0x348>)
 800c6d2:	5c5b      	ldrb	r3, [r3, r1]
 800c6d4:	4053      	eors	r3, r2
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4b15      	ldr	r3, [pc, #84]	@ (800c734 <mix_sub_columns+0x34c>)
 800c6de:	5c5b      	ldrb	r3, [r3, r1]
 800c6e0:	4053      	eors	r3, r2
 800c6e2:	b2d9      	uxtb	r1, r3
 800c6e4:	7cfb      	ldrb	r3, [r7, #19]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b13      	ldr	r3, [pc, #76]	@ (800c738 <mix_sub_columns+0x350>)
 800c6ea:	5c9a      	ldrb	r2, [r3, r2]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	330e      	adds	r3, #14
 800c6f0:	404a      	eors	r2, r1
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c6f6:	7d3b      	ldrb	r3, [r7, #20]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <mix_sub_columns+0x350>)
 800c6fc:	5c9a      	ldrb	r2, [r3, r2]
 800c6fe:	7a7b      	ldrb	r3, [r7, #9]
 800c700:	4619      	mov	r1, r3
 800c702:	4b0b      	ldr	r3, [pc, #44]	@ (800c730 <mix_sub_columns+0x348>)
 800c704:	5c5b      	ldrb	r3, [r3, r1]
 800c706:	4053      	eors	r3, r2
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	4619      	mov	r1, r3
 800c70e:	4b08      	ldr	r3, [pc, #32]	@ (800c730 <mix_sub_columns+0x348>)
 800c710:	5c5b      	ldrb	r3, [r3, r1]
 800c712:	4053      	eors	r3, r2
 800c714:	b2d9      	uxtb	r1, r3
 800c716:	7cfb      	ldrb	r3, [r7, #19]
 800c718:	461a      	mov	r2, r3
 800c71a:	4b06      	ldr	r3, [pc, #24]	@ (800c734 <mix_sub_columns+0x34c>)
 800c71c:	5c9a      	ldrb	r2, [r3, r2]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	330f      	adds	r3, #15
 800c722:	404a      	eors	r2, r1
 800c724:	b2d2      	uxtb	r2, r2
 800c726:	701a      	strb	r2, [r3, #0]
  }
 800c728:	bf00      	nop
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	08020080 	.word	0x08020080
 800c734:	08020180 	.word	0x08020180
 800c738:	08020280 	.word	0x08020280

0800c73c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	460b      	mov	r3, r1
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c74a:	7afb      	ldrb	r3, [r7, #11]
 800c74c:	3b10      	subs	r3, #16
 800c74e:	2b10      	cmp	r3, #16
 800c750:	bf8c      	ite	hi
 800c752:	2201      	movhi	r2, #1
 800c754:	2200      	movls	r2, #0
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	2a00      	cmp	r2, #0
 800c75a:	d10b      	bne.n	800c774 <lorawan_aes_set_key+0x38>
 800c75c:	4a64      	ldr	r2, [pc, #400]	@ (800c8f0 <lorawan_aes_set_key+0x1b4>)
 800c75e:	fa22 f303 	lsr.w	r3, r2, r3
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	bf14      	ite	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	2300      	moveq	r3, #0
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d105      	bne.n	800c780 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c77c:	23ff      	movs	r3, #255	@ 0xff
 800c77e:	e0b2      	b.n	800c8e6 <lorawan_aes_set_key+0x1aa>
        break;
 800c780:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7afa      	ldrb	r2, [r7, #11]
 800c786:	68f9      	ldr	r1, [r7, #12]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fbfc 	bl	800bf86 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c78e:	7afb      	ldrb	r3, [r7, #11]
 800c790:	331c      	adds	r3, #28
 800c792:	b2db      	uxtb	r3, r3
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c798:	7c7b      	ldrb	r3, [r7, #17]
 800c79a:	091b      	lsrs	r3, r3, #4
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c7a8:	7afb      	ldrb	r3, [r7, #11]
 800c7aa:	75fb      	strb	r3, [r7, #23]
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	75bb      	strb	r3, [r7, #22]
 800c7b0:	e093      	b.n	800c8da <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	3b04      	subs	r3, #4
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	5cd3      	ldrb	r3, [r2, r3]
 800c7ba:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
 800c7be:	3b03      	subs	r3, #3
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	5cd3      	ldrb	r3, [r2, r3]
 800c7c4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	3b02      	subs	r3, #2
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	5cd3      	ldrb	r3, [r2, r3]
 800c7ce:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c7d0:	7dfb      	ldrb	r3, [r7, #23]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	5cd3      	ldrb	r3, [r2, r3]
 800c7d8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	7afa      	ldrb	r2, [r7, #11]
 800c7de:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7e2:	fb01 f202 	mul.w	r2, r1, r2
 800c7e6:	1a9b      	subs	r3, r3, r2
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d127      	bne.n	800c83e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800c7ee:	7d7b      	ldrb	r3, [r7, #21]
 800c7f0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c7f2:	7d3b      	ldrb	r3, [r7, #20]
 800c7f4:	4a3f      	ldr	r2, [pc, #252]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c7f6:	5cd2      	ldrb	r2, [r2, r3]
 800c7f8:	7dbb      	ldrb	r3, [r7, #22]
 800c7fa:	4053      	eors	r3, r2
 800c7fc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c7fe:	7cfb      	ldrb	r3, [r7, #19]
 800c800:	4a3c      	ldr	r2, [pc, #240]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c802:	5cd3      	ldrb	r3, [r2, r3]
 800c804:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c806:	7cbb      	ldrb	r3, [r7, #18]
 800c808:	4a3a      	ldr	r2, [pc, #232]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c80a:	5cd3      	ldrb	r3, [r2, r3]
 800c80c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c80e:	7c3b      	ldrb	r3, [r7, #16]
 800c810:	4a38      	ldr	r2, [pc, #224]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c812:	5cd3      	ldrb	r3, [r2, r3]
 800c814:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c816:	7dbb      	ldrb	r3, [r7, #22]
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	b25a      	sxtb	r2, r3
 800c81c:	7dbb      	ldrb	r3, [r7, #22]
 800c81e:	09db      	lsrs	r3, r3, #7
 800c820:	b2db      	uxtb	r3, r3
 800c822:	4619      	mov	r1, r3
 800c824:	0049      	lsls	r1, r1, #1
 800c826:	440b      	add	r3, r1
 800c828:	4619      	mov	r1, r3
 800c82a:	00c8      	lsls	r0, r1, #3
 800c82c:	4619      	mov	r1, r3
 800c82e:	4603      	mov	r3, r0
 800c830:	440b      	add	r3, r1
 800c832:	b2db      	uxtb	r3, r3
 800c834:	b25b      	sxtb	r3, r3
 800c836:	4053      	eors	r3, r2
 800c838:	b25b      	sxtb	r3, r3
 800c83a:	75bb      	strb	r3, [r7, #22]
 800c83c:	e01c      	b.n	800c878 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	2b18      	cmp	r3, #24
 800c842:	d919      	bls.n	800c878 <lorawan_aes_set_key+0x13c>
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	7afa      	ldrb	r2, [r7, #11]
 800c848:	fbb3 f1f2 	udiv	r1, r3, r2
 800c84c:	fb01 f202 	mul.w	r2, r1, r2
 800c850:	1a9b      	subs	r3, r3, r2
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b10      	cmp	r3, #16
 800c856:	d10f      	bne.n	800c878 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800c858:	7d7b      	ldrb	r3, [r7, #21]
 800c85a:	4a26      	ldr	r2, [pc, #152]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c85c:	5cd3      	ldrb	r3, [r2, r3]
 800c85e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c860:	7d3b      	ldrb	r3, [r7, #20]
 800c862:	4a24      	ldr	r2, [pc, #144]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c864:	5cd3      	ldrb	r3, [r2, r3]
 800c866:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c868:	7cfb      	ldrb	r3, [r7, #19]
 800c86a:	4a22      	ldr	r2, [pc, #136]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c86c:	5cd3      	ldrb	r3, [r2, r3]
 800c86e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c870:	7cbb      	ldrb	r3, [r7, #18]
 800c872:	4a20      	ldr	r2, [pc, #128]	@ (800c8f4 <lorawan_aes_set_key+0x1b8>)
 800c874:	5cd3      	ldrb	r3, [r2, r3]
 800c876:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c878:	7dfa      	ldrb	r2, [r7, #23]
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c880:	7c3b      	ldrb	r3, [r7, #16]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	5cd1      	ldrb	r1, [r2, r3]
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	7d7a      	ldrb	r2, [r7, #21]
 800c88a:	404a      	eors	r2, r1
 800c88c:	b2d1      	uxtb	r1, r2
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c892:	7c3b      	ldrb	r3, [r7, #16]
 800c894:	3301      	adds	r3, #1
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	5cd1      	ldrb	r1, [r2, r3]
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	3301      	adds	r3, #1
 800c89e:	7d3a      	ldrb	r2, [r7, #20]
 800c8a0:	404a      	eors	r2, r1
 800c8a2:	b2d1      	uxtb	r1, r2
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c8a8:	7c3b      	ldrb	r3, [r7, #16]
 800c8aa:	3302      	adds	r3, #2
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	5cd1      	ldrb	r1, [r2, r3]
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	7cfa      	ldrb	r2, [r7, #19]
 800c8b6:	404a      	eors	r2, r1
 800c8b8:	b2d1      	uxtb	r1, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c8be:	7c3b      	ldrb	r3, [r7, #16]
 800c8c0:	3303      	adds	r3, #3
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	5cd1      	ldrb	r1, [r2, r3]
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	3303      	adds	r3, #3
 800c8ca:	7cba      	ldrb	r2, [r7, #18]
 800c8cc:	404a      	eors	r2, r1
 800c8ce:	b2d1      	uxtb	r1, r2
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	75fb      	strb	r3, [r7, #23]
 800c8da:	7dfa      	ldrb	r2, [r7, #23]
 800c8dc:	7c7b      	ldrb	r3, [r7, #17]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	f4ff af67 	bcc.w	800c7b2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	00010101 	.word	0x00010101
 800c8f4:	08020080 	.word	0x08020080

0800c8f8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	@ 0x28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d038      	beq.n	800c980 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f107 0314 	add.w	r3, r7, #20
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff fc07 	bl	800c12a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c91c:	2301      	movs	r3, #1
 800c91e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c922:	e014      	b.n	800c94e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c924:	f107 0314 	add.w	r3, r7, #20
 800c928:	4618      	mov	r0, r3
 800c92a:	f7ff fd5d 	bl	800c3e8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c934:	0112      	lsls	r2, r2, #4
 800c936:	441a      	add	r2, r3
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fcab 	bl	800c29a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c948:	3301      	adds	r3, #1
 800c94a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c954:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c958:	429a      	cmp	r2, r3
 800c95a:	d3e3      	bcc.n	800c924 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c95c:	f107 0314 	add.w	r3, r7, #20
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff fca7 	bl	800c2b4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c96c:	0112      	lsls	r2, r2, #4
 800c96e:	441a      	add	r2, r3
 800c970:	f107 0314 	add.w	r3, r7, #20
 800c974:	4619      	mov	r1, r3
 800c976:	68b8      	ldr	r0, [r7, #8]
 800c978:	f7ff fbd7 	bl	800c12a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e000      	b.n	800c982 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c980:	23ff      	movs	r3, #255	@ 0xff
}
 800c982:	4618      	mov	r0, r3
 800c984:	3728      	adds	r7, #40	@ 0x28
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98e:	b09d      	sub	sp, #116	@ 0x74
 800c990:	af10      	add	r7, sp, #64	@ 0x40
 800c992:	4603      	mov	r3, r0
 800c994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c998:	2306      	movs	r3, #6
 800c99a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800c99e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 f9a7 	bl	800ccfc <SecureElementGetKeyByID>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800c9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 80b0 	bne.w	800cb1e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800c9be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800c9c6:	4b58      	ldr	r3, [pc, #352]	@ (800cb28 <PrintKey+0x19c>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	2002      	movs	r0, #2
 800c9ce:	f00f fd93 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800c9d2:	e056      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d106      	bne.n	800c9ea <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800c9dc:	4b53      	ldr	r3, [pc, #332]	@ (800cb2c <PrintKey+0x1a0>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	2002      	movs	r0, #2
 800c9e4:	f00f fd88 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800c9e8:	e04b      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800c9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d106      	bne.n	800ca00 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800c9f2:	4b4f      	ldr	r3, [pc, #316]	@ (800cb30 <PrintKey+0x1a4>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	2002      	movs	r0, #2
 800c9fa:	f00f fd7d 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800c9fe:	e040      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ca00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d106      	bne.n	800ca16 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ca08:	4b4a      	ldr	r3, [pc, #296]	@ (800cb34 <PrintKey+0x1a8>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	2002      	movs	r0, #2
 800ca10:	f00f fd72 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800ca14:	e035      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ca16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d106      	bne.n	800ca2c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ca1e:	4b46      	ldr	r3, [pc, #280]	@ (800cb38 <PrintKey+0x1ac>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	2100      	movs	r1, #0
 800ca24:	2002      	movs	r0, #2
 800ca26:	f00f fd67 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800ca2a:	e02a      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca30:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca32:	d106      	bne.n	800ca42 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ca34:	4b41      	ldr	r3, [pc, #260]	@ (800cb3c <PrintKey+0x1b0>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	2100      	movs	r1, #0
 800ca3a:	2002      	movs	r0, #2
 800ca3c:	f00f fd5c 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800ca40:	e01f      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ca42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca46:	2b80      	cmp	r3, #128	@ 0x80
 800ca48:	d106      	bne.n	800ca58 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ca4a:	4b3d      	ldr	r3, [pc, #244]	@ (800cb40 <PrintKey+0x1b4>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	2002      	movs	r0, #2
 800ca52:	f00f fd51 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800ca56:	e014      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ca58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca5c:	2b81      	cmp	r3, #129	@ 0x81
 800ca5e:	d106      	bne.n	800ca6e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ca60:	4b38      	ldr	r3, [pc, #224]	@ (800cb44 <PrintKey+0x1b8>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	2100      	movs	r1, #0
 800ca66:	2002      	movs	r0, #2
 800ca68:	f00f fd46 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 800ca6c:	e009      	b.n	800ca82 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ca6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca72:	2b82      	cmp	r3, #130	@ 0x82
 800ca74:	d105      	bne.n	800ca82 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ca76:	4b34      	ldr	r3, [pc, #208]	@ (800cb48 <PrintKey+0x1bc>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	2002      	movs	r0, #2
 800ca7e:	f00f fd3b 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ca82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca84:	785b      	ldrb	r3, [r3, #1]
 800ca86:	4618      	mov	r0, r3
 800ca88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8a:	789b      	ldrb	r3, [r3, #2]
 800ca8c:	461c      	mov	r4, r3
 800ca8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca90:	78db      	ldrb	r3, [r3, #3]
 800ca92:	461d      	mov	r5, r3
 800ca94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca96:	791b      	ldrb	r3, [r3, #4]
 800ca98:	461e      	mov	r6, r3
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	795b      	ldrb	r3, [r3, #5]
 800ca9e:	623b      	str	r3, [r7, #32]
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	799b      	ldrb	r3, [r3, #6]
 800caa4:	61fb      	str	r3, [r7, #28]
 800caa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa8:	79db      	ldrb	r3, [r3, #7]
 800caaa:	61bb      	str	r3, [r7, #24]
 800caac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caae:	7a1b      	ldrb	r3, [r3, #8]
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab4:	7a5b      	ldrb	r3, [r3, #9]
 800cab6:	613b      	str	r3, [r7, #16]
 800cab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caba:	7a9b      	ldrb	r3, [r3, #10]
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac0:	7adb      	ldrb	r3, [r3, #11]
 800cac2:	60bb      	str	r3, [r7, #8]
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	7b1b      	ldrb	r3, [r3, #12]
 800cac8:	607b      	str	r3, [r7, #4]
 800caca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cacc:	7b5b      	ldrb	r3, [r3, #13]
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad2:	7b9b      	ldrb	r3, [r3, #14]
 800cad4:	4619      	mov	r1, r3
 800cad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad8:	7bdb      	ldrb	r3, [r3, #15]
 800cada:	461a      	mov	r2, r3
 800cadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cade:	7c1b      	ldrb	r3, [r3, #16]
 800cae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cae2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cae4:	910d      	str	r1, [sp, #52]	@ 0x34
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	920c      	str	r2, [sp, #48]	@ 0x30
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	920a      	str	r2, [sp, #40]	@ 0x28
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	9208      	str	r2, [sp, #32]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	9207      	str	r2, [sp, #28]
 800cafe:	69ba      	ldr	r2, [r7, #24]
 800cb00:	9206      	str	r2, [sp, #24]
 800cb02:	69fa      	ldr	r2, [r7, #28]
 800cb04:	9205      	str	r2, [sp, #20]
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	9304      	str	r3, [sp, #16]
 800cb0a:	9603      	str	r6, [sp, #12]
 800cb0c:	9502      	str	r5, [sp, #8]
 800cb0e:	9401      	str	r4, [sp, #4]
 800cb10:	9000      	str	r0, [sp, #0]
 800cb12:	4b0e      	ldr	r3, [pc, #56]	@ (800cb4c <PrintKey+0x1c0>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	2100      	movs	r1, #0
 800cb18:	2002      	movs	r0, #2
 800cb1a:	f00f fced 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800cb1e:	bf00      	nop
 800cb20:	3734      	adds	r7, #52	@ 0x34
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb26:	bf00      	nop
 800cb28:	0801fae0 	.word	0x0801fae0
 800cb2c:	0801faf8 	.word	0x0801faf8
 800cb30:	0801fb10 	.word	0x0801fb10
 800cb34:	0801fb28 	.word	0x0801fb28
 800cb38:	0801fb40 	.word	0x0801fb40
 800cb3c:	0801fb58 	.word	0x0801fb58
 800cb40:	0801fb70 	.word	0x0801fb70
 800cb44:	0801fb88 	.word	0x0801fb88
 800cb48:	0801fba0 	.word	0x0801fba0
 800cb4c:	0801fbb8 	.word	0x0801fbb8

0800cb50 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	6039      	str	r1, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
 800cb60:	e01a      	b.n	800cb98 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cb62:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <GetKeyByID+0x5c>)
 800cb64:	6819      	ldr	r1, [r3, #0]
 800cb66:	7bfa      	ldrb	r2, [r7, #15]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	011b      	lsls	r3, r3, #4
 800cb6c:	4413      	add	r3, r2
 800cb6e:	440b      	add	r3, r1
 800cb70:	3310      	adds	r3, #16
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	79fa      	ldrb	r2, [r7, #7]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d10b      	bne.n	800cb92 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <GetKeyByID+0x5c>)
 800cb7c:	6819      	ldr	r1, [r3, #0]
 800cb7e:	7bfa      	ldrb	r2, [r7, #15]
 800cb80:	4613      	mov	r3, r2
 800cb82:	011b      	lsls	r3, r3, #4
 800cb84:	4413      	add	r3, r2
 800cb86:	3310      	adds	r3, #16
 800cb88:	18ca      	adds	r2, r1, r3
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e006      	b.n	800cba0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	3301      	adds	r3, #1
 800cb96:	73fb      	strb	r3, [r7, #15]
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	2b09      	cmp	r3, #9
 800cb9c:	d9e1      	bls.n	800cb62 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cb9e:	2303      	movs	r3, #3
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bc80      	pop	{r7}
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	20000730 	.word	0x20000730

0800cbb0 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b0d1      	sub	sp, #324	@ 0x144
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800cbba:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800cbbe:	6020      	str	r0, [r4, #0]
 800cbc0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800cbc4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cbc8:	6001      	str	r1, [r0, #0]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cbd0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cbd4:	801a      	strh	r2, [r3, #0]
 800cbd6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cbda:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800cbde:	460a      	mov	r2, r1
 800cbe0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cbe2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cbe6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <ComputeCmac+0x48>
 800cbf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	e05c      	b.n	800ccb6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cbfc:	f107 0314 	add.w	r3, r7, #20
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe ff1b 	bl	800ba3c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cc06:	f107 0210 	add.w	r2, r7, #16
 800cc0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc0e:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff ff9a 	bl	800cb50 <GetKeyByID>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cc22:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d143      	bne.n	800ccb2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800cc2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	1c5a      	adds	r2, r3, #1
 800cc36:	f107 0314 	add.w	r3, r7, #20
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe ff16 	bl	800ba6e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800cc42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d009      	beq.n	800cc64 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800cc50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cc58:	f107 0014 	add.w	r0, r7, #20
 800cc5c:	2210      	movs	r2, #16
 800cc5e:	6819      	ldr	r1, [r3, #0]
 800cc60:	f7fe ff14 	bl	800ba8c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800cc64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc68:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cc6c:	881a      	ldrh	r2, [r3, #0]
 800cc6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cc72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cc76:	f107 0014 	add.w	r0, r7, #20
 800cc7a:	6819      	ldr	r1, [r3, #0]
 800cc7c:	f7fe ff06 	bl	800ba8c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800cc80:	f107 0214 	add.w	r2, r7, #20
 800cc84:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe ffc0 	bl	800bc10 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800cc90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cc94:	061a      	lsls	r2, r3, #24
 800cc96:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800cc9a:	041b      	lsls	r3, r3, #16
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800cca6:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ccb0:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ccb2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd90      	pop	{r4, r7, pc}

0800ccc0 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	e00a      	b.n	800ccea <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ccd4:	4a07      	ldr	r2, [pc, #28]	@ (800ccf4 <SecureElementInit+0x34>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ccda:	4b06      	ldr	r3, [pc, #24]	@ (800ccf4 <SecureElementInit+0x34>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	22c0      	movs	r2, #192	@ 0xc0
 800cce0:	4905      	ldr	r1, [pc, #20]	@ (800ccf8 <SecureElementInit+0x38>)
 800cce2:	4618      	mov	r0, r3
 800cce4:	f00b f8b9 	bl	8017e5a <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20000730 	.word	0x20000730
 800ccf8:	08020908 	.word	0x08020908

0800ccfc <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
 800cd0c:	e01a      	b.n	800cd44 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800cd0e:	4b12      	ldr	r3, [pc, #72]	@ (800cd58 <SecureElementGetKeyByID+0x5c>)
 800cd10:	6819      	ldr	r1, [r3, #0]
 800cd12:	7bfa      	ldrb	r2, [r7, #15]
 800cd14:	4613      	mov	r3, r2
 800cd16:	011b      	lsls	r3, r3, #4
 800cd18:	4413      	add	r3, r2
 800cd1a:	440b      	add	r3, r1
 800cd1c:	3310      	adds	r3, #16
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	79fa      	ldrb	r2, [r7, #7]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d10b      	bne.n	800cd3e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800cd26:	4b0c      	ldr	r3, [pc, #48]	@ (800cd58 <SecureElementGetKeyByID+0x5c>)
 800cd28:	6819      	ldr	r1, [r3, #0]
 800cd2a:	7bfa      	ldrb	r2, [r7, #15]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	4413      	add	r3, r2
 800cd32:	3310      	adds	r3, #16
 800cd34:	18ca      	adds	r2, r1, r3
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e006      	b.n	800cd4c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	3301      	adds	r3, #1
 800cd42:	73fb      	strb	r3, [r7, #15]
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d9e1      	bls.n	800cd0e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cd4a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bc80      	pop	{r7}
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	20000730 	.word	0x20000730

0800cd5c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd5e:	b08b      	sub	sp, #44	@ 0x2c
 800cd60:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cd62:	4b3f      	ldr	r3, [pc, #252]	@ (800ce60 <SecureElementPrintKeys+0x104>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	2100      	movs	r1, #0
 800cd68:	2002      	movs	r0, #2
 800cd6a:	f00f fbc5 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cd6e:	2000      	movs	r0, #0
 800cd70:	f7ff fe0c 	bl	800c98c <PrintKey>
    PrintKey(NWK_KEY);
 800cd74:	2001      	movs	r0, #1
 800cd76:	f7ff fe09 	bl	800c98c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cd7a:	4b3a      	ldr	r3, [pc, #232]	@ (800ce64 <SecureElementPrintKeys+0x108>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2100      	movs	r1, #0
 800cd80:	2002      	movs	r0, #2
 800cd82:	f00f fbb9 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800cd86:	2003      	movs	r0, #3
 800cd88:	f7ff fe00 	bl	800c98c <PrintKey>
    PrintKey(NWK_S_KEY);
 800cd8c:	2002      	movs	r0, #2
 800cd8e:	f7ff fdfd 	bl	800c98c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800cd92:	4b35      	ldr	r3, [pc, #212]	@ (800ce68 <SecureElementPrintKeys+0x10c>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	2100      	movs	r1, #0
 800cd98:	2002      	movs	r0, #2
 800cd9a:	f00f fbad 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cd9e:	4b33      	ldr	r3, [pc, #204]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	4b31      	ldr	r3, [pc, #196]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	785b      	ldrb	r3, [r3, #1]
 800cdac:	4619      	mov	r1, r3
 800cdae:	4b2f      	ldr	r3, [pc, #188]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	789b      	ldrb	r3, [r3, #2]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	4b2d      	ldr	r3, [pc, #180]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	78db      	ldrb	r3, [r3, #3]
 800cdbc:	461c      	mov	r4, r3
 800cdbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	791b      	ldrb	r3, [r3, #4]
 800cdc4:	461d      	mov	r5, r3
 800cdc6:	4b29      	ldr	r3, [pc, #164]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	795b      	ldrb	r3, [r3, #5]
 800cdcc:	461e      	mov	r6, r3
 800cdce:	4b27      	ldr	r3, [pc, #156]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	799b      	ldrb	r3, [r3, #6]
 800cdd4:	607b      	str	r3, [r7, #4]
 800cdd6:	4b25      	ldr	r3, [pc, #148]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	79db      	ldrb	r3, [r3, #7]
 800cddc:	9307      	str	r3, [sp, #28]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	9306      	str	r3, [sp, #24]
 800cde2:	9605      	str	r6, [sp, #20]
 800cde4:	9504      	str	r5, [sp, #16]
 800cde6:	9403      	str	r4, [sp, #12]
 800cde8:	9002      	str	r0, [sp, #8]
 800cdea:	9101      	str	r1, [sp, #4]
 800cdec:	9200      	str	r2, [sp, #0]
 800cdee:	4b20      	ldr	r3, [pc, #128]	@ (800ce70 <SecureElementPrintKeys+0x114>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2002      	movs	r0, #2
 800cdf6:	f00f fb7f 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cdfa:	4b1c      	ldr	r3, [pc, #112]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	7a1b      	ldrb	r3, [r3, #8]
 800ce00:	461a      	mov	r2, r3
 800ce02:	4b1a      	ldr	r3, [pc, #104]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	7a5b      	ldrb	r3, [r3, #9]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4b18      	ldr	r3, [pc, #96]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	7a9b      	ldrb	r3, [r3, #10]
 800ce10:	4618      	mov	r0, r3
 800ce12:	4b16      	ldr	r3, [pc, #88]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	7adb      	ldrb	r3, [r3, #11]
 800ce18:	461c      	mov	r4, r3
 800ce1a:	4b14      	ldr	r3, [pc, #80]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	7b1b      	ldrb	r3, [r3, #12]
 800ce20:	461d      	mov	r5, r3
 800ce22:	4b12      	ldr	r3, [pc, #72]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	7b5b      	ldrb	r3, [r3, #13]
 800ce28:	461e      	mov	r6, r3
 800ce2a:	4b10      	ldr	r3, [pc, #64]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	7b9b      	ldrb	r3, [r3, #14]
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	4b0e      	ldr	r3, [pc, #56]	@ (800ce6c <SecureElementPrintKeys+0x110>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	7bdb      	ldrb	r3, [r3, #15]
 800ce38:	9307      	str	r3, [sp, #28]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	9306      	str	r3, [sp, #24]
 800ce3e:	9605      	str	r6, [sp, #20]
 800ce40:	9504      	str	r5, [sp, #16]
 800ce42:	9403      	str	r4, [sp, #12]
 800ce44:	9002      	str	r0, [sp, #8]
 800ce46:	9101      	str	r1, [sp, #4]
 800ce48:	9200      	str	r2, [sp, #0]
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce74 <SecureElementPrintKeys+0x118>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2100      	movs	r1, #0
 800ce50:	2002      	movs	r0, #2
 800ce52:	f00f fb51 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	0801fc0c 	.word	0x0801fc0c
 800ce64:	0801fc24 	.word	0x0801fc24
 800ce68:	0801fc3c 	.word	0x0801fc3c
 800ce6c:	20000730 	.word	0x20000730
 800ce70:	0801fc54 	.word	0x0801fc54
 800ce74:	0801fc94 	.word	0x0801fc94

0800ce78 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ce7c:	2004      	movs	r0, #4
 800ce7e:	f7ff fd85 	bl	800c98c <PrintKey>
    PrintKey(MC_KE_KEY);
 800ce82:	207f      	movs	r0, #127	@ 0x7f
 800ce84:	f7ff fd82 	bl	800c98c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800ce88:	2002      	movs	r0, #2
 800ce8a:	f7ff fd7f 	bl	800c98c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800ce8e:	2003      	movs	r0, #3
 800ce90:	f7ff fd7c 	bl	800c98c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	6039      	str	r1, [r7, #0]
 800cea6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d101      	bne.n	800ceb2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ceae:	2302      	movs	r3, #2
 800ceb0:	e04c      	b.n	800cf4c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	77fb      	strb	r3, [r7, #31]
 800ceb6:	e045      	b.n	800cf44 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ceb8:	4b26      	ldr	r3, [pc, #152]	@ (800cf54 <SecureElementSetKey+0xb8>)
 800ceba:	6819      	ldr	r1, [r3, #0]
 800cebc:	7ffa      	ldrb	r2, [r7, #31]
 800cebe:	4613      	mov	r3, r2
 800cec0:	011b      	lsls	r3, r3, #4
 800cec2:	4413      	add	r3, r2
 800cec4:	440b      	add	r3, r1
 800cec6:	3310      	adds	r3, #16
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	79fa      	ldrb	r2, [r7, #7]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d136      	bne.n	800cf3e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b80      	cmp	r3, #128	@ 0x80
 800ced4:	d123      	bne.n	800cf1e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800ced6:	2306      	movs	r3, #6
 800ced8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	f107 0310 	add.w	r3, r7, #16
 800cee2:	2200      	movs	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	605a      	str	r2, [r3, #4]
 800cee8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800ceea:	f107 030c 	add.w	r3, r7, #12
 800ceee:	227f      	movs	r2, #127	@ 0x7f
 800cef0:	2110      	movs	r1, #16
 800cef2:	6838      	ldr	r0, [r7, #0]
 800cef4:	f000 f87d 	bl	800cff2 <SecureElementAesEncrypt>
 800cef8:	4603      	mov	r3, r0
 800cefa:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cefc:	4b15      	ldr	r3, [pc, #84]	@ (800cf54 <SecureElementSetKey+0xb8>)
 800cefe:	6819      	ldr	r1, [r3, #0]
 800cf00:	7ffa      	ldrb	r2, [r7, #31]
 800cf02:	4613      	mov	r3, r2
 800cf04:	011b      	lsls	r3, r3, #4
 800cf06:	4413      	add	r3, r2
 800cf08:	3310      	adds	r3, #16
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	f107 010c 	add.w	r1, r7, #12
 800cf12:	2210      	movs	r2, #16
 800cf14:	4618      	mov	r0, r3
 800cf16:	f00a ffa0 	bl	8017e5a <memcpy1>
                return retval;
 800cf1a:	7fbb      	ldrb	r3, [r7, #30]
 800cf1c:	e016      	b.n	800cf4c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <SecureElementSetKey+0xb8>)
 800cf20:	6819      	ldr	r1, [r3, #0]
 800cf22:	7ffa      	ldrb	r2, [r7, #31]
 800cf24:	4613      	mov	r3, r2
 800cf26:	011b      	lsls	r3, r3, #4
 800cf28:	4413      	add	r3, r2
 800cf2a:	3310      	adds	r3, #16
 800cf2c:	440b      	add	r3, r1
 800cf2e:	3301      	adds	r3, #1
 800cf30:	2210      	movs	r2, #16
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f00a ff90 	bl	8017e5a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e006      	b.n	800cf4c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf3e:	7ffb      	ldrb	r3, [r7, #31]
 800cf40:	3301      	adds	r3, #1
 800cf42:	77fb      	strb	r3, [r7, #31]
 800cf44:	7ffb      	ldrb	r3, [r7, #31]
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d9b6      	bls.n	800ceb8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cf4a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3720      	adds	r7, #32
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	20000730 	.word	0x20000730

0800cf58 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af02      	add	r7, sp, #8
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	4611      	mov	r1, r2
 800cf64:	461a      	mov	r2, r3
 800cf66:	460b      	mov	r3, r1
 800cf68:	80fb      	strh	r3, [r7, #6]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800cf6e:	797b      	ldrb	r3, [r7, #5]
 800cf70:	2b7e      	cmp	r3, #126	@ 0x7e
 800cf72:	d901      	bls.n	800cf78 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e009      	b.n	800cf8c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800cf78:	7979      	ldrb	r1, [r7, #5]
 800cf7a:	88fa      	ldrh	r2, [r7, #6]
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	460b      	mov	r3, r1
 800cf82:	68b9      	ldr	r1, [r7, #8]
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f7ff fe13 	bl	800cbb0 <ComputeCmac>
 800cf8a:	4603      	mov	r3, r0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	817b      	strh	r3, [r7, #10]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e01b      	b.n	800cfea <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cfb2:	2306      	movs	r3, #6
 800cfb4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800cfba:	7a79      	ldrb	r1, [r7, #9]
 800cfbc:	897a      	ldrh	r2, [r7, #10]
 800cfbe:	f107 0310 	add.w	r3, r7, #16
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f7ff fdf1 	bl	800cbb0 <ComputeCmac>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cfd2:	7dfb      	ldrb	r3, [r7, #23]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	e006      	b.n	800cfea <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d001      	beq.n	800cfe8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b0c2      	sub	sp, #264	@ 0x108
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	4608      	mov	r0, r1
 800cffc:	4611      	mov	r1, r2
 800cffe:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d002:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800d006:	6013      	str	r3, [r2, #0]
 800d008:	4603      	mov	r3, r0
 800d00a:	817b      	strh	r3, [r7, #10]
 800d00c:	460b      	mov	r3, r1
 800d00e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d006      	beq.n	800d024 <SecureElementAesEncrypt+0x32>
 800d016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d024:	2302      	movs	r3, #2
 800d026:	e046      	b.n	800d0b6 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d028:	897b      	ldrh	r3, [r7, #10]
 800d02a:	f003 030f 	and.w	r3, r3, #15
 800d02e:	b29b      	uxth	r3, r3
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d034:	2305      	movs	r3, #5
 800d036:	e03e      	b.n	800d0b6 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d038:	f107 0314 	add.w	r3, r7, #20
 800d03c:	22f0      	movs	r2, #240	@ 0xf0
 800d03e:	2100      	movs	r1, #0
 800d040:	4618      	mov	r0, r3
 800d042:	f00a ff45 	bl	8017ed0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d046:	f107 0210 	add.w	r2, r7, #16
 800d04a:	7a7b      	ldrb	r3, [r7, #9]
 800d04c:	4611      	mov	r1, r2
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fd7e 	bl	800cb50 <GetKeyByID>
 800d054:	4603      	mov	r3, r0
 800d056:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d05a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d127      	bne.n	800d0b2 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3301      	adds	r3, #1
 800d066:	f107 0214 	add.w	r2, r7, #20
 800d06a:	2110      	movs	r1, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff fb65 	bl	800c73c <lorawan_aes_set_key>

        uint8_t block = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d078:	e018      	b.n	800d0ac <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d07a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	18d0      	adds	r0, r2, r3
 800d082:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d086:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d08a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800d08e:	6812      	ldr	r2, [r2, #0]
 800d090:	4413      	add	r3, r2
 800d092:	f107 0214 	add.w	r2, r7, #20
 800d096:	4619      	mov	r1, r3
 800d098:	f7ff fc2e 	bl	800c8f8 <lorawan_aes_encrypt>
            block = block + 16;
 800d09c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d0a0:	3310      	adds	r3, #16
 800d0a2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d0a6:	897b      	ldrh	r3, [r7, #10]
 800d0a8:	3b10      	subs	r3, #16
 800d0aa:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d0ac:	897b      	ldrh	r3, [r7, #10]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e3      	bne.n	800d07a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d0b2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	e02e      	b.n	800d138 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d0da:	2306      	movs	r3, #6
 800d0dc:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d0de:	78bb      	ldrb	r3, [r7, #2]
 800d0e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0e2:	d104      	bne.n	800d0ee <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	d001      	beq.n	800d0ee <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e024      	b.n	800d138 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	f107 0310 	add.w	r3, r7, #16
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	601a      	str	r2, [r3, #0]
 800d0fa:	605a      	str	r2, [r3, #4]
 800d0fc:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d0fe:	f107 030c 	add.w	r3, r7, #12
 800d102:	78fa      	ldrb	r2, [r7, #3]
 800d104:	2110      	movs	r1, #16
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff ff73 	bl	800cff2 <SecureElementAesEncrypt>
 800d10c:	4603      	mov	r3, r0
 800d10e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d110:	7ffb      	ldrb	r3, [r7, #31]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d116:	7ffb      	ldrb	r3, [r7, #31]
 800d118:	e00e      	b.n	800d138 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d11a:	f107 020c 	add.w	r2, r7, #12
 800d11e:	78bb      	ldrb	r3, [r7, #2]
 800d120:	4611      	mov	r1, r2
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff feba 	bl	800ce9c <SecureElementSetKey>
 800d128:	4603      	mov	r3, r0
 800d12a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d12c:	7ffb      	ldrb	r3, [r7, #31]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d132:	7ffb      	ldrb	r3, [r7, #31]
 800d134:	e000      	b.n	800d138 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d136:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3720      	adds	r7, #32
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	607b      	str	r3, [r7, #4]
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
 800d14e:	4613      	mov	r3, r2
 800d150:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <SecureElementProcessJoinAccept+0x24>
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <SecureElementProcessJoinAccept+0x24>
 800d15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d164:	2302      	movs	r3, #2
 800d166:	e064      	b.n	800d232 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d16c:	2b21      	cmp	r3, #33	@ 0x21
 800d16e:	d901      	bls.n	800d174 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d170:	2305      	movs	r3, #5
 800d172:	e05e      	b.n	800d232 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d174:	2301      	movs	r3, #1
 800d176:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d178:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	461a      	mov	r2, r3
 800d180:	6879      	ldr	r1, [r7, #4]
 800d182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d184:	f00a fe69 	bl	8017e5a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	1c58      	adds	r0, r3, #1
 800d18c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d190:	b29b      	uxth	r3, r3
 800d192:	3b01      	subs	r3, #1
 800d194:	b299      	uxth	r1, r3
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	3301      	adds	r3, #1
 800d19a:	7dfa      	ldrb	r2, [r7, #23]
 800d19c:	f7ff ff29 	bl	800cff2 <SecureElementAesEncrypt>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d1a6:	2307      	movs	r3, #7
 800d1a8:	e043      	b.n	800d232 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ac:	330b      	adds	r3, #11
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	09db      	lsrs	r3, r3, #7
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d1bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1c0:	3b04      	subs	r3, #4
 800d1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1c4:	4413      	add	r3, r2
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d1ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1ce:	3b03      	subs	r3, #3
 800d1d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1d2:	4413      	add	r3, r2
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	021b      	lsls	r3, r3, #8
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1e2:	3b02      	subs	r3, #2
 800d1e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1e6:	4413      	add	r3, r2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	041b      	lsls	r3, r3, #16
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1fa:	4413      	add	r3, r2
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	061b      	lsls	r3, r3, #24
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	4313      	orrs	r3, r2
 800d204:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10e      	bne.n	800d22c <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d20e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d212:	b29b      	uxth	r3, r3
 800d214:	3b04      	subs	r3, #4
 800d216:	b299      	uxth	r1, r3
 800d218:	2301      	movs	r3, #1
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d21e:	f7ff feb9 	bl	800cf94 <SecureElementVerifyAesCmac>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d228:	2301      	movs	r3, #1
 800d22a:	e002      	b.n	800d232 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d22c:	2304      	movs	r3, #4
 800d22e:	e000      	b.n	800d232 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3718      	adds	r7, #24
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d24a:	2302      	movs	r3, #2
 800d24c:	e007      	b.n	800d25e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d24e:	4b06      	ldr	r3, [pc, #24]	@ (800d268 <SecureElementSetDevEui+0x2c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2208      	movs	r2, #8
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	4618      	mov	r0, r3
 800d258:	f00a fdff 	bl	8017e5a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20000730 	.word	0x20000730

0800d26c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d26c:	b480      	push	{r7}
 800d26e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d270:	4b02      	ldr	r3, [pc, #8]	@ (800d27c <SecureElementGetDevEui+0x10>)
 800d272:	681b      	ldr	r3, [r3, #0]
}
 800d274:	4618      	mov	r0, r3
 800d276:	46bd      	mov	sp, r7
 800d278:	bc80      	pop	{r7}
 800d27a:	4770      	bx	lr
 800d27c:	20000730 	.word	0x20000730

0800d280 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d28e:	2302      	movs	r3, #2
 800d290:	e008      	b.n	800d2a4 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d292:	4b06      	ldr	r3, [pc, #24]	@ (800d2ac <SecureElementSetJoinEui+0x2c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3308      	adds	r3, #8
 800d298:	2208      	movs	r2, #8
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f00a fddc 	bl	8017e5a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	20000730 	.word	0x20000730

0800d2b0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d2b4:	4b03      	ldr	r3, [pc, #12]	@ (800d2c4 <SecureElementGetJoinEui+0x14>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	3308      	adds	r3, #8
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bc80      	pop	{r7}
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20000730 	.word	0x20000730

0800d2c8 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d2d2:	4a23      	ldr	r2, [pc, #140]	@ (800d360 <LmHandlerInit+0x98>)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d2d8:	4b22      	ldr	r3, [pc, #136]	@ (800d364 <LmHandlerInit+0x9c>)
 800d2da:	4a23      	ldr	r2, [pc, #140]	@ (800d368 <LmHandlerInit+0xa0>)
 800d2dc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d2de:	4b21      	ldr	r3, [pc, #132]	@ (800d364 <LmHandlerInit+0x9c>)
 800d2e0:	4a22      	ldr	r2, [pc, #136]	@ (800d36c <LmHandlerInit+0xa4>)
 800d2e2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d2e4:	4b1f      	ldr	r3, [pc, #124]	@ (800d364 <LmHandlerInit+0x9c>)
 800d2e6:	4a22      	ldr	r2, [pc, #136]	@ (800d370 <LmHandlerInit+0xa8>)
 800d2e8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d2ea:	4b1e      	ldr	r3, [pc, #120]	@ (800d364 <LmHandlerInit+0x9c>)
 800d2ec:	4a21      	ldr	r2, [pc, #132]	@ (800d374 <LmHandlerInit+0xac>)
 800d2ee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800d360 <LmHandlerInit+0x98>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a20      	ldr	r2, [pc, #128]	@ (800d378 <LmHandlerInit+0xb0>)
 800d2f8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d2fa:	4b19      	ldr	r3, [pc, #100]	@ (800d360 <LmHandlerInit+0x98>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4a1d      	ldr	r2, [pc, #116]	@ (800d378 <LmHandlerInit+0xb0>)
 800d302:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d304:	4b16      	ldr	r3, [pc, #88]	@ (800d360 <LmHandlerInit+0x98>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	4a1b      	ldr	r2, [pc, #108]	@ (800d378 <LmHandlerInit+0xb0>)
 800d30c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d30e:	4b1a      	ldr	r3, [pc, #104]	@ (800d378 <LmHandlerInit+0xb0>)
 800d310:	4a1a      	ldr	r2, [pc, #104]	@ (800d37c <LmHandlerInit+0xb4>)
 800d312:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d314:	4b12      	ldr	r3, [pc, #72]	@ (800d360 <LmHandlerInit+0x98>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	699b      	ldr	r3, [r3, #24]
 800d31a:	4a17      	ldr	r2, [pc, #92]	@ (800d378 <LmHandlerInit+0xb0>)
 800d31c:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d31e:	4a18      	ldr	r2, [pc, #96]	@ (800d380 <LmHandlerInit+0xb8>)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d324:	4b0e      	ldr	r3, [pc, #56]	@ (800d360 <LmHandlerInit+0x98>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d32a:	4a15      	ldr	r2, [pc, #84]	@ (800d380 <LmHandlerInit+0xb8>)
 800d32c:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800d32e:	4b0c      	ldr	r3, [pc, #48]	@ (800d360 <LmHandlerInit+0x98>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d334:	4a12      	ldr	r2, [pc, #72]	@ (800d380 <LmHandlerInit+0xb8>)
 800d336:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800d338:	4b09      	ldr	r3, [pc, #36]	@ (800d360 <LmHandlerInit+0x98>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d33e:	4a10      	ldr	r2, [pc, #64]	@ (800d380 <LmHandlerInit+0xb8>)
 800d340:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d342:	490f      	ldr	r1, [pc, #60]	@ (800d380 <LmHandlerInit+0xb8>)
 800d344:	2000      	movs	r0, #0
 800d346:	f000 fd87 	bl	800de58 <LmHandlerPackageRegister>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d002      	beq.n	800d356 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d350:	f04f 33ff 	mov.w	r3, #4294967295
 800d354:	e000      	b.n	800d358 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	2000076c 	.word	0x2000076c
 800d364:	20000770 	.word	0x20000770
 800d368:	0800db65 	.word	0x0800db65
 800d36c:	0800dbcd 	.word	0x0800dbcd
 800d370:	0800dc99 	.word	0x0800dc99
 800d374:	0800ddb1 	.word	0x0800ddb1
 800d378:	20000780 	.word	0x20000780
 800d37c:	0800e229 	.word	0x0800e229
 800d380:	20000734 	.word	0x20000734

0800d384 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b094      	sub	sp, #80	@ 0x50
 800d388:	af04      	add	r7, sp, #16
 800d38a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d38c:	2214      	movs	r2, #20
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4891      	ldr	r0, [pc, #580]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d392:	f00e f867 	bl	801b464 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800d396:	4b91      	ldr	r3, [pc, #580]	@ (800d5dc <LmHandlerConfigure+0x258>)
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d39c:	f7fe fb0c 	bl	800b9b8 <LoraInfo_GetPtr>
 800d3a0:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d3a2:	4b8d      	ldr	r3, [pc, #564]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4093      	lsls	r3, r2
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d107      	bne.n	800d3c8 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d3b8:	4b89      	ldr	r3, [pc, #548]	@ (800d5e0 <LmHandlerConfigure+0x25c>)
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	2100      	movs	r1, #0
 800d3be:	2000      	movs	r0, #0
 800d3c0:	f00f f89a 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d3c4:	bf00      	nop
 800d3c6:	e7fd      	b.n	800d3c4 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d3c8:	4b83      	ldr	r3, [pc, #524]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	4985      	ldr	r1, [pc, #532]	@ (800d5e4 <LmHandlerConfigure+0x260>)
 800d3d0:	4885      	ldr	r0, [pc, #532]	@ (800d5e8 <LmHandlerConfigure+0x264>)
 800d3d2:	f004 fe95 	bl	8012100 <LoRaMacInitialization>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e0:	e0f5      	b.n	800d5ce <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800d3e2:	2327      	movs	r3, #39	@ 0x27
 800d3e4:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d3e6:	f107 0318 	add.w	r3, r7, #24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f005 fbd8 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d103      	bne.n	800d3fe <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800d3f6:	4b7d      	ldr	r3, [pc, #500]	@ (800d5ec <LmHandlerConfigure+0x268>)
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	e02a      	b.n	800d454 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d3fe:	2328      	movs	r3, #40	@ 0x28
 800d400:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d402:	4b7b      	ldr	r3, [pc, #492]	@ (800d5f0 <LmHandlerConfigure+0x26c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d40c:	f107 0318 	add.w	r3, r7, #24
 800d410:	4618      	mov	r0, r3
 800d412:	f005 fa1f 	bl	8012854 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d416:	4b76      	ldr	r3, [pc, #472]	@ (800d5f0 <LmHandlerConfigure+0x26c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	f240 517c 	movw	r1, #1404	@ 0x57c
 800d422:	4610      	mov	r0, r2
 800d424:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800d426:	2327      	movs	r3, #39	@ 0x27
 800d428:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d42a:	f107 0318 	add.w	r3, r7, #24
 800d42e:	4618      	mov	r0, r3
 800d430:	f005 fbb6 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10c      	bne.n	800d454 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d43a:	2301      	movs	r3, #1
 800d43c:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d43e:	f107 0318 	add.w	r3, r7, #24
 800d442:	4618      	mov	r0, r3
 800d444:	f005 fa06 	bl	8012854 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d448:	7f3b      	ldrb	r3, [r7, #28]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d002      	beq.n	800d454 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800d44e:	4b67      	ldr	r3, [pc, #412]	@ (800d5ec <LmHandlerConfigure+0x268>)
 800d450:	2201      	movs	r2, #1
 800d452:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800d454:	4b65      	ldr	r3, [pc, #404]	@ (800d5ec <LmHandlerConfigure+0x268>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d02a      	beq.n	800d4b2 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d45c:	4b64      	ldr	r3, [pc, #400]	@ (800d5f0 <LmHandlerConfigure+0x26c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d004      	beq.n	800d470 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d466:	4b62      	ldr	r3, [pc, #392]	@ (800d5f0 <LmHandlerConfigure+0x26c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	69db      	ldr	r3, [r3, #28]
 800d46c:	2000      	movs	r0, #0
 800d46e:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800d470:	2306      	movs	r3, #6
 800d472:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d474:	f107 0318 	add.w	r3, r7, #24
 800d478:	4618      	mov	r0, r3
 800d47a:	f005 f9eb 	bl	8012854 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	4a5c      	ldr	r2, [pc, #368]	@ (800d5f4 <LmHandlerConfigure+0x270>)
 800d482:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800d484:	2327      	movs	r3, #39	@ 0x27
 800d486:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d488:	f107 0318 	add.w	r3, r7, #24
 800d48c:	4618      	mov	r0, r3
 800d48e:	f005 f9e1 	bl	8012854 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d498:	4b4f      	ldr	r3, [pc, #316]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d49a:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800d4a2:	4b4d      	ldr	r3, [pc, #308]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d4a4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800d4ac:	4b4a      	ldr	r3, [pc, #296]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d4ae:	709a      	strb	r2, [r3, #2]
 800d4b0:	e019      	b.n	800d4e6 <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d4b2:	2305      	movs	r3, #5
 800d4b4:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d4ba:	f107 0318 	add.w	r3, r7, #24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f005 fb6e 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d4c4:	4b4a      	ldr	r3, [pc, #296]	@ (800d5f0 <LmHandlerConfigure+0x26c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	4798      	blx	r3
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	4a49      	ldr	r2, [pc, #292]	@ (800d5f4 <LmHandlerConfigure+0x270>)
 800d4d0:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d4d2:	2306      	movs	r3, #6
 800d4d4:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d4d6:	4b47      	ldr	r3, [pc, #284]	@ (800d5f4 <LmHandlerConfigure+0x270>)
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d4dc:	f107 0318 	add.w	r3, r7, #24
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f005 fb5d 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d4ea:	f107 0318 	add.w	r3, r7, #24
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f005 f9b0 	bl	8012854 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	2208      	movs	r2, #8
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	483e      	ldr	r0, [pc, #248]	@ (800d5f4 <LmHandlerConfigure+0x270>)
 800d4fc:	f00a fcad 	bl	8017e5a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d500:	2303      	movs	r3, #3
 800d502:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d504:	f107 0318 	add.w	r3, r7, #24
 800d508:	4618      	mov	r0, r3
 800d50a:	f005 f9a3 	bl	8012854 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	2208      	movs	r2, #8
 800d512:	4619      	mov	r1, r3
 800d514:	4838      	ldr	r0, [pc, #224]	@ (800d5f8 <LmHandlerConfigure+0x274>)
 800d516:	f00a fca0 	bl	8017e5a <memcpy1>

    SecureElementPrintKeys();
 800d51a:	f7ff fc1f 	bl	800cd5c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d51e:	4b37      	ldr	r3, [pc, #220]	@ (800d5fc <LmHandlerConfigure+0x278>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	4b36      	ldr	r3, [pc, #216]	@ (800d600 <LmHandlerConfigure+0x27c>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	4619      	mov	r1, r3
 800d52a:	4b36      	ldr	r3, [pc, #216]	@ (800d604 <LmHandlerConfigure+0x280>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	4b35      	ldr	r3, [pc, #212]	@ (800d608 <LmHandlerConfigure+0x284>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	9303      	str	r3, [sp, #12]
 800d536:	9002      	str	r0, [sp, #8]
 800d538:	9101      	str	r1, [sp, #4]
 800d53a:	9200      	str	r2, [sp, #0]
 800d53c:	4b33      	ldr	r3, [pc, #204]	@ (800d60c <LmHandlerConfigure+0x288>)
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	2002      	movs	r0, #2
 800d544:	f00e ffd8 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d548:	230f      	movs	r3, #15
 800d54a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d54c:	2301      	movs	r3, #1
 800d54e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d550:	f107 0318 	add.w	r3, r7, #24
 800d554:	4618      	mov	r0, r3
 800d556:	f005 fb23 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d55a:	2310      	movs	r3, #16
 800d55c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d55e:	2300      	movs	r3, #0
 800d560:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d562:	f107 0318 	add.w	r3, r7, #24
 800d566:	4618      	mov	r0, r3
 800d568:	f005 fb1a 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d56c:	2304      	movs	r3, #4
 800d56e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d570:	4b19      	ldr	r3, [pc, #100]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d572:	789b      	ldrb	r3, [r3, #2]
 800d574:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d576:	f107 0318 	add.w	r3, r7, #24
 800d57a:	4618      	mov	r0, r3
 800d57c:	f005 fb10 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d580:	2338      	movs	r3, #56	@ 0x38
 800d582:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d584:	4b14      	ldr	r3, [pc, #80]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d58a:	f107 0318 	add.w	r3, r7, #24
 800d58e:	4618      	mov	r0, r3
 800d590:	f005 fb06 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d594:	230f      	movs	r3, #15
 800d596:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d598:	4b0f      	ldr	r3, [pc, #60]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	f107 0210 	add.w	r2, r7, #16
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f008 f9b8 	bl	8015918 <RegionGetPhyParam>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	bf14      	ite	ne
 800d5b2:	2301      	movne	r3, #1
 800d5b4:	2300      	moveq	r3, #0
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d5ba:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d5bc:	2014      	movs	r0, #20
 800d5be:	f000 fab9 	bl	800db34 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d5c2:	4b05      	ldr	r3, [pc, #20]	@ (800d5d8 <LmHandlerConfigure+0x254>)
 800d5c4:	799b      	ldrb	r3, [r3, #6]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f006 f918 	bl	80137fc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3740      	adds	r7, #64	@ 0x40
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20000758 	.word	0x20000758
 800d5dc:	20000798 	.word	0x20000798
 800d5e0:	0801fcd4 	.word	0x0801fcd4
 800d5e4:	20000780 	.word	0x20000780
 800d5e8:	20000770 	.word	0x20000770
 800d5ec:	2000088e 	.word	0x2000088e
 800d5f0:	2000076c 	.word	0x2000076c
 800d5f4:	20000090 	.word	0x20000090
 800d5f8:	20000098 	.word	0x20000098
 800d5fc:	200000a7 	.word	0x200000a7
 800d600:	200000a6 	.word	0x200000a6
 800d604:	200000a5 	.word	0x200000a5
 800d608:	200000a4 	.word	0x200000a4
 800d60c:	0801fd20 	.word	0x0801fd20

0800d610 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d616:	f002 fd45 	bl	80100a4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d61a:	f000 fd3b 	bl	800e094 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800d61e:	f000 fd0f 	bl	800e040 <LmHandlerPackageIsTxPending>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d117      	bne.n	800d658 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800d628:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <LmHandlerProcess+0x50>)
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d014      	beq.n	800d65a <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800d630:	2300      	movs	r3, #0
 800d632:	703b      	strb	r3, [r7, #0]
 800d634:	2300      	movs	r3, #0
 800d636:	707b      	strb	r3, [r7, #1]
 800d638:	2300      	movs	r3, #0
 800d63a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d63c:	4b09      	ldr	r3, [pc, #36]	@ (800d664 <LmHandlerProcess+0x54>)
 800d63e:	78d9      	ldrb	r1, [r3, #3]
 800d640:	463b      	mov	r3, r7
 800d642:	2200      	movs	r2, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f000 f8b7 	bl	800d7b8 <LmHandlerSend>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d650:	4b03      	ldr	r3, [pc, #12]	@ (800d660 <LmHandlerProcess+0x50>)
 800d652:	2200      	movs	r2, #0
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	e000      	b.n	800d65a <LmHandlerProcess+0x4a>
        return;
 800d658:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20000798 	.word	0x20000798
 800d664:	20000758 	.word	0x20000758

0800d668 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d66c:	4b02      	ldr	r3, [pc, #8]	@ (800d678 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d66e:	681b      	ldr	r3, [r3, #0]
}
 800d670:	4618      	mov	r0, r3
 800d672:	46bd      	mov	sp, r7
 800d674:	bc80      	pop	{r7}
 800d676:	4770      	bx	lr
 800d678:	20000794 	.word	0x20000794

0800d67c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b090      	sub	sp, #64	@ 0x40
 800d680:	af00      	add	r7, sp, #0
 800d682:	4603      	mov	r3, r0
 800d684:	460a      	mov	r2, r1
 800d686:	71fb      	strb	r3, [r7, #7]
 800d688:	4613      	mov	r3, r2
 800d68a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d68c:	2301      	movs	r3, #1
 800d68e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d692:	4b36      	ldr	r3, [pc, #216]	@ (800d76c <LmHandlerJoin+0xf0>)
 800d694:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d10b      	bne.n	800d6bc <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d6aa:	4b31      	ldr	r3, [pc, #196]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d6b0:	4a2f      	ldr	r2, [pc, #188]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6b2:	79bb      	ldrb	r3, [r7, #6]
 800d6b4:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d6b6:	f004 ffdb 	bl	8012670 <LoRaMacStart>
 800d6ba:	e041      	b.n	800d740 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d6c8:	4b28      	ldr	r3, [pc, #160]	@ (800d76c <LmHandlerJoin+0xf0>)
 800d6ca:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d6ce:	4b28      	ldr	r3, [pc, #160]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6d0:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d6d2:	4b27      	ldr	r3, [pc, #156]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d6d8:	4a25      	ldr	r2, [pc, #148]	@ (800d770 <LmHandlerJoin+0xf4>)
 800d6da:	79bb      	ldrb	r3, [r7, #6]
 800d6dc:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800d6de:	4b25      	ldr	r3, [pc, #148]	@ (800d774 <LmHandlerJoin+0xf8>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	f083 0301 	eor.w	r3, r3, #1
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d01e      	beq.n	800d72a <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d6ec:	231f      	movs	r3, #31
 800d6ee:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d6f0:	4b1e      	ldr	r3, [pc, #120]	@ (800d76c <LmHandlerJoin+0xf0>)
 800d6f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d6f6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d6f8:	f107 0308 	add.w	r3, r7, #8
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f005 fa4f 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d702:	2320      	movs	r3, #32
 800d704:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d706:	4b19      	ldr	r3, [pc, #100]	@ (800d76c <LmHandlerJoin+0xf0>)
 800d708:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d70c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f005 fa44 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d718:	2329      	movs	r3, #41	@ 0x29
 800d71a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d71c:	4b16      	ldr	r3, [pc, #88]	@ (800d778 <LmHandlerJoin+0xfc>)
 800d71e:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d720:	f107 0308 	add.w	r3, r7, #8
 800d724:	4618      	mov	r0, r3
 800d726:	f005 fa3b 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800d72a:	f004 ffa1 	bl	8012670 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d72e:	2301      	movs	r3, #1
 800d730:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d732:	2301      	movs	r3, #1
 800d734:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d736:	f107 0308 	add.w	r3, r7, #8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f005 fa30 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800d740:	4b0c      	ldr	r3, [pc, #48]	@ (800d774 <LmHandlerJoin+0xf8>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f083 0301 	eor.w	r3, r3, #1
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <LmHandlerJoin+0xd8>
 800d74e:	79bb      	ldrb	r3, [r7, #6]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d758:	4618      	mov	r0, r3
 800d75a:	f005 fd91 	bl	8013280 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d760:	4a06      	ldr	r2, [pc, #24]	@ (800d77c <LmHandlerJoin+0x100>)
 800d762:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d764:	bf00      	nop
 800d766:	3740      	adds	r7, #64	@ 0x40
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20000758 	.word	0x20000758
 800d770:	200000a8 	.word	0x200000a8
 800d774:	2000088e 	.word	0x2000088e
 800d778:	01000400 	.word	0x01000400
 800d77c:	20000794 	.word	0x20000794

0800d780 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08a      	sub	sp, #40	@ 0x28
 800d784:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d786:	2301      	movs	r3, #1
 800d788:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d78a:	463b      	mov	r3, r7
 800d78c:	4618      	mov	r0, r3
 800d78e:	f005 f861 	bl	8012854 <LoRaMacMibGetRequestConfirm>
 800d792:	4603      	mov	r3, r0
 800d794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800d798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d106      	bne.n	800d7ae <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d7a0:	793b      	ldrb	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e002      	b.n	800d7b0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e000      	b.n	800d7b0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d7ae:	2300      	movs	r3, #0
    }
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3728      	adds	r7, #40	@ 0x28
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08a      	sub	sp, #40	@ 0x28
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	70fb      	strb	r3, [r7, #3]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7c8:	23ff      	movs	r3, #255	@ 0xff
 800d7ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d7ce:	f002 f9c9 	bl	800fb64 <LoRaMacIsBusy>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d7d8:	f06f 0301 	mvn.w	r3, #1
 800d7dc:	e0a3      	b.n	800d926 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d7de:	f7ff ffcf 	bl	800d780 <LmHandlerJoinStatus>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d00a      	beq.n	800d7fe <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d7e8:	4b51      	ldr	r3, [pc, #324]	@ (800d930 <LmHandlerSend+0x178>)
 800d7ea:	799b      	ldrb	r3, [r3, #6]
 800d7ec:	4a50      	ldr	r2, [pc, #320]	@ (800d930 <LmHandlerSend+0x178>)
 800d7ee:	79d2      	ldrb	r2, [r2, #7]
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff ff42 	bl	800d67c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d7f8:	f06f 0302 	mvn.w	r3, #2
 800d7fc:	e093      	b.n	800d926 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d7fe:	4a4d      	ldr	r2, [pc, #308]	@ (800d934 <LmHandlerSend+0x17c>)
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	2b00      	cmp	r3, #0
 800d808:	bf14      	ite	ne
 800d80a:	2301      	movne	r3, #1
 800d80c:	2300      	moveq	r3, #0
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d812:	4b49      	ldr	r3, [pc, #292]	@ (800d938 <LmHandlerSend+0x180>)
 800d814:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d818:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	785b      	ldrb	r3, [r3, #1]
 800d81e:	f107 020c 	add.w	r2, r7, #12
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f004 ff85 	bl	8012734 <LoRaMacQueryTxPossible>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d830:	2300      	movs	r3, #0
 800d832:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d834:	2300      	movs	r3, #0
 800d836:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d83c:	23f9      	movs	r3, #249	@ 0xf9
 800d83e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d842:	e008      	b.n	800d856 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	785b      	ldrb	r3, [r3, #1]
 800d84e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d856:	4b37      	ldr	r3, [pc, #220]	@ (800d934 <LmHandlerSend+0x17c>)
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	3310      	adds	r3, #16
 800d85c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d860:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d864:	4b34      	ldr	r3, [pc, #208]	@ (800d938 <LmHandlerSend+0x180>)
 800d866:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d86a:	4b32      	ldr	r3, [pc, #200]	@ (800d934 <LmHandlerSend+0x17c>)
 800d86c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d86e:	78ba      	ldrb	r2, [r7, #2]
 800d870:	f107 0310 	add.w	r3, r7, #16
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f005 fe88 	bl	801358c <LoRaMacMcpsRequest>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	4a2d      	ldr	r2, [pc, #180]	@ (800d93c <LmHandlerSend+0x184>)
 800d886:	6013      	str	r3, [r2, #0]

    switch (status)
 800d888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d88c:	2b11      	cmp	r3, #17
 800d88e:	d843      	bhi.n	800d918 <LmHandlerSend+0x160>
 800d890:	a201      	add	r2, pc, #4	@ (adr r2, 800d898 <LmHandlerSend+0xe0>)
 800d892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d896:	bf00      	nop
 800d898:	0800d8e1 	.word	0x0800d8e1
 800d89c:	0800d8f9 	.word	0x0800d8f9
 800d8a0:	0800d919 	.word	0x0800d919
 800d8a4:	0800d919 	.word	0x0800d919
 800d8a8:	0800d919 	.word	0x0800d919
 800d8ac:	0800d919 	.word	0x0800d919
 800d8b0:	0800d919 	.word	0x0800d919
 800d8b4:	0800d901 	.word	0x0800d901
 800d8b8:	0800d919 	.word	0x0800d919
 800d8bc:	0800d919 	.word	0x0800d919
 800d8c0:	0800d919 	.word	0x0800d919
 800d8c4:	0800d911 	.word	0x0800d911
 800d8c8:	0800d919 	.word	0x0800d919
 800d8cc:	0800d919 	.word	0x0800d919
 800d8d0:	0800d8f9 	.word	0x0800d8f9
 800d8d4:	0800d8f9 	.word	0x0800d8f9
 800d8d8:	0800d8f9 	.word	0x0800d8f9
 800d8dc:	0800d909 	.word	0x0800d909
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800d8e0:	4b17      	ldr	r3, [pc, #92]	@ (800d940 <LmHandlerSend+0x188>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d8e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d8ea:	f113 0f07 	cmn.w	r3, #7
 800d8ee:	d017      	beq.n	800d920 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800d8f6:	e013      	b.n	800d920 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d8f8:	23fe      	movs	r3, #254	@ 0xfe
 800d8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d8fe:	e010      	b.n	800d922 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d900:	23fd      	movs	r3, #253	@ 0xfd
 800d902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d906:	e00c      	b.n	800d922 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d908:	23fb      	movs	r3, #251	@ 0xfb
 800d90a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d90e:	e008      	b.n	800d922 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d910:	23fa      	movs	r3, #250	@ 0xfa
 800d912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d916:	e004      	b.n	800d922 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d918:	23ff      	movs	r3, #255	@ 0xff
 800d91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d91e:	e000      	b.n	800d922 <LmHandlerSend+0x16a>
            break;
 800d920:	bf00      	nop
    }

    return lmhStatus;
 800d922:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d926:	4618      	mov	r0, r3
 800d928:	3728      	adds	r7, #40	@ 0x28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	200000a8 	.word	0x200000a8
 800d934:	200000b0 	.word	0x200000b0
 800d938:	20000758 	.word	0x20000758
 800d93c:	20000794 	.word	0x20000794
 800d940:	20000798 	.word	0x20000798

0800d944 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d94a:	2309      	movs	r3, #9
 800d94c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d94e:	463b      	mov	r3, r7
 800d950:	4618      	mov	r0, r3
 800d952:	f005 fc95 	bl	8013280 <LoRaMacMlmeRequest>
 800d956:	4603      	mov	r3, r0
 800d958:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	4a06      	ldr	r2, [pc, #24]	@ (800d978 <LmHandlerDeviceTimeReq+0x34>)
 800d95e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d960:	7dfb      	ldrb	r3, [r7, #23]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d966:	2300      	movs	r3, #0
 800d968:	e001      	b.n	800d96e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d96a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3718      	adds	r7, #24
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	20000794 	.word	0x20000794

0800d97c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d986:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	bc80      	pop	{r7}
 800d992:	4770      	bx	lr

0800d994 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b08c      	sub	sp, #48	@ 0x30
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800d9a4:	f002 f8de 	bl	800fb64 <LoRaMacIsBusy>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d9ae:	f06f 0301 	mvn.w	r3, #1
 800d9b2:	e071      	b.n	800da98 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d9b4:	f7ff fee4 	bl	800d780 <LmHandlerJoinStatus>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d002      	beq.n	800d9c4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d9be:	f06f 0302 	mvn.w	r3, #2
 800d9c2:	e069      	b.n	800da98 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d9c8:	f107 0308 	add.w	r3, r7, #8
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f004 ff41 	bl	8012854 <LoRaMacMibGetRequestConfirm>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9dc:	e05c      	b.n	800da98 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800d9de:	7b3b      	ldrb	r3, [r7, #12]
 800d9e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800d9e4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800d9e8:	79fb      	ldrb	r3, [r7, #7]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d052      	beq.n	800da94 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d028      	beq.n	800da46 <LmHandlerRequestClass+0xb2>
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	dc48      	bgt.n	800da8a <LmHandlerRequestClass+0xf6>
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <LmHandlerRequestClass+0x6e>
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d01e      	beq.n	800da3e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800da00:	e043      	b.n	800da8a <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800da02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da06:	2b00      	cmp	r3, #0
 800da08:	d041      	beq.n	800da8e <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800da0e:	f107 0308 	add.w	r3, r7, #8
 800da12:	4618      	mov	r0, r3
 800da14:	f005 f8c4 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10b      	bne.n	800da36 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800da1e:	4b20      	ldr	r3, [pc, #128]	@ (800daa0 <LmHandlerRequestClass+0x10c>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da24:	2b00      	cmp	r3, #0
 800da26:	d032      	beq.n	800da8e <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800da28:	4b1d      	ldr	r3, [pc, #116]	@ (800daa0 <LmHandlerRequestClass+0x10c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da2e:	79fa      	ldrb	r2, [r7, #7]
 800da30:	4610      	mov	r0, r2
 800da32:	4798      	blx	r3
            break;
 800da34:	e02b      	b.n	800da8e <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800da36:	23ff      	movs	r3, #255	@ 0xff
 800da38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800da3c:	e027      	b.n	800da8e <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800da3e:	23ff      	movs	r3, #255	@ 0xff
 800da40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800da44:	e026      	b.n	800da94 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800da46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800da4e:	23ff      	movs	r3, #255	@ 0xff
 800da50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800da54:	e01d      	b.n	800da92 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800da5a:	f107 0308 	add.w	r3, r7, #8
 800da5e:	4618      	mov	r0, r3
 800da60:	f005 f89e 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10b      	bne.n	800da82 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800da6a:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <LmHandlerRequestClass+0x10c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00e      	beq.n	800da92 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800da74:	4b0a      	ldr	r3, [pc, #40]	@ (800daa0 <LmHandlerRequestClass+0x10c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da7a:	79fa      	ldrb	r2, [r7, #7]
 800da7c:	4610      	mov	r0, r2
 800da7e:	4798      	blx	r3
            break;
 800da80:	e007      	b.n	800da92 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800da82:	23ff      	movs	r3, #255	@ 0xff
 800da84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800da88:	e003      	b.n	800da92 <LmHandlerRequestClass+0xfe>
            break;
 800da8a:	bf00      	nop
 800da8c:	e002      	b.n	800da94 <LmHandlerRequestClass+0x100>
            break;
 800da8e:	bf00      	nop
 800da90:	e000      	b.n	800da94 <LmHandlerRequestClass+0x100>
            break;
 800da92:	bf00      	nop
        }
    }
    return errorStatus;
 800da94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3730      	adds	r7, #48	@ 0x30
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	2000076c 	.word	0x2000076c

0800daa4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08c      	sub	sp, #48	@ 0x30
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d102      	bne.n	800dab8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800dab2:	f04f 33ff 	mov.w	r3, #4294967295
 800dab6:	e010      	b.n	800dada <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800dab8:	2300      	movs	r3, #0
 800daba:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800dabc:	f107 030c 	add.w	r3, r7, #12
 800dac0:	4618      	mov	r0, r3
 800dac2:	f004 fec7 	bl	8012854 <LoRaMacMibGetRequestConfirm>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
 800dad0:	e003      	b.n	800dada <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800dad2:	7c3a      	ldrb	r2, [r7, #16]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3730      	adds	r7, #48	@ 0x30
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08c      	sub	sp, #48	@ 0x30
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d102      	bne.n	800daf8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800daf2:	f04f 33ff 	mov.w	r3, #4294967295
 800daf6:	e016      	b.n	800db26 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800daf8:	2320      	movs	r3, #32
 800dafa:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800dafc:	f107 030c 	add.w	r3, r7, #12
 800db00:	4618      	mov	r0, r3
 800db02:	f004 fea7 	bl	8012854 <LoRaMacMibGetRequestConfirm>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db0c:	f04f 33ff 	mov.w	r3, #4294967295
 800db10:	e009      	b.n	800db26 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800db12:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f993 2000 	ldrsb.w	r2, [r3]
 800db20:	4b03      	ldr	r3, [pc, #12]	@ (800db30 <LmHandlerGetTxDatarate+0x4c>)
 800db22:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3730      	adds	r7, #48	@ 0x30
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20000758 	.word	0x20000758

0800db34 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	@ 0x30
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800db3c:	2323      	movs	r3, #35	@ 0x23
 800db3e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800db44:	f107 030c 	add.w	r3, r7, #12
 800db48:	4618      	mov	r0, r3
 800db4a:	f005 f829 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800db54:	f04f 33ff 	mov.w	r3, #4294967295
 800db58:	e000      	b.n	800db5c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3730      	adds	r7, #48	@ 0x30
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800db6c:	4b15      	ldr	r3, [pc, #84]	@ (800dbc4 <McpsConfirm+0x60>)
 800db6e:	2201      	movs	r2, #1
 800db70:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	785a      	ldrb	r2, [r3, #1]
 800db76:	4b13      	ldr	r3, [pc, #76]	@ (800dbc4 <McpsConfirm+0x60>)
 800db78:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	789b      	ldrb	r3, [r3, #2]
 800db7e:	b25a      	sxtb	r2, r3
 800db80:	4b10      	ldr	r3, [pc, #64]	@ (800dbc4 <McpsConfirm+0x60>)
 800db82:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	4a0e      	ldr	r2, [pc, #56]	@ (800dbc4 <McpsConfirm+0x60>)
 800db8a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800db92:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc4 <McpsConfirm+0x60>)
 800db94:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	4b09      	ldr	r3, [pc, #36]	@ (800dbc4 <McpsConfirm+0x60>)
 800db9e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	791b      	ldrb	r3, [r3, #4]
 800dba4:	461a      	mov	r2, r3
 800dba6:	4b07      	ldr	r3, [pc, #28]	@ (800dbc4 <McpsConfirm+0x60>)
 800dba8:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800dbaa:	4b07      	ldr	r3, [pc, #28]	@ (800dbc8 <McpsConfirm+0x64>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb0:	4804      	ldr	r0, [pc, #16]	@ (800dbc4 <McpsConfirm+0x60>)
 800dbb2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	f000 f9c6 	bl	800df48 <LmHandlerPackagesNotify>
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	200000b0 	.word	0x200000b0
 800dbc8:	2000076c 	.word	0x2000076c

0800dbcc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800dbda:	4b2c      	ldr	r3, [pc, #176]	@ (800dc8c <McpsIndication+0xc0>)
 800dbdc:	2201      	movs	r2, #1
 800dbde:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	785a      	ldrb	r2, [r3, #1]
 800dbe4:	4b29      	ldr	r3, [pc, #164]	@ (800dc8c <McpsIndication+0xc0>)
 800dbe6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dbe8:	4b28      	ldr	r3, [pc, #160]	@ (800dc8c <McpsIndication+0xc0>)
 800dbea:	785b      	ldrb	r3, [r3, #1]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d149      	bne.n	800dc84 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	791b      	ldrb	r3, [r3, #4]
 800dbf4:	b25a      	sxtb	r2, r3
 800dbf6:	4b25      	ldr	r3, [pc, #148]	@ (800dc8c <McpsIndication+0xc0>)
 800dbf8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc00:	b25a      	sxtb	r2, r3
 800dc02:	4b22      	ldr	r3, [pc, #136]	@ (800dc8c <McpsIndication+0xc0>)
 800dc04:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dc0c:	4b1f      	ldr	r3, [pc, #124]	@ (800dc8c <McpsIndication+0xc0>)
 800dc0e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	78da      	ldrb	r2, [r3, #3]
 800dc14:	4b1d      	ldr	r3, [pc, #116]	@ (800dc8c <McpsIndication+0xc0>)
 800dc16:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	691b      	ldr	r3, [r3, #16]
 800dc1c:	4a1b      	ldr	r2, [pc, #108]	@ (800dc8c <McpsIndication+0xc0>)
 800dc1e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	78db      	ldrb	r3, [r3, #3]
 800dc24:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7b1b      	ldrb	r3, [r3, #12]
 800dc2a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800dc32:	4b17      	ldr	r3, [pc, #92]	@ (800dc90 <McpsIndication+0xc4>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc38:	f107 0210 	add.w	r2, r7, #16
 800dc3c:	4913      	ldr	r1, [pc, #76]	@ (800dc8c <McpsIndication+0xc0>)
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dc42:	4b13      	ldr	r3, [pc, #76]	@ (800dc90 <McpsIndication+0xc4>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d007      	beq.n	800dc5c <McpsIndication+0x90>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	7e1b      	ldrb	r3, [r3, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d003      	beq.n	800dc5c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800dc54:	4b0e      	ldr	r3, [pc, #56]	@ (800dc90 <McpsIndication+0xc4>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	2001      	movs	r0, #1
 800dc60:	f000 f972 	bl	800df48 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800dc64:	f107 030f 	add.w	r3, r7, #15
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff ff1b 	bl	800daa4 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	795b      	ldrb	r3, [r3, #5]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d107      	bne.n	800dc86 <McpsIndication+0xba>
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d104      	bne.n	800dc86 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800dc7c:	4b05      	ldr	r3, [pc, #20]	@ (800dc94 <McpsIndication+0xc8>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	701a      	strb	r2, [r3, #0]
 800dc82:	e000      	b.n	800dc86 <McpsIndication+0xba>
        return;
 800dc84:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	200000cc 	.word	0x200000cc
 800dc90:	2000076c 	.word	0x2000076c
 800dc94:	20000798 	.word	0x20000798

0800dc98 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08c      	sub	sp, #48	@ 0x30
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800dca0:	4b3c      	ldr	r3, [pc, #240]	@ (800dd94 <MlmeConfirm+0xfc>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	785a      	ldrb	r2, [r3, #1]
 800dcaa:	4b3a      	ldr	r3, [pc, #232]	@ (800dd94 <MlmeConfirm+0xfc>)
 800dcac:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800dcae:	4b3a      	ldr	r3, [pc, #232]	@ (800dd98 <MlmeConfirm+0x100>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb4:	4837      	ldr	r0, [pc, #220]	@ (800dd94 <MlmeConfirm+0xfc>)
 800dcb6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	2002      	movs	r0, #2
 800dcbc:	f000 f944 	bl	800df48 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	2b0b      	cmp	r3, #11
 800dcc8:	d85c      	bhi.n	800dd84 <MlmeConfirm+0xec>
 800dcca:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <MlmeConfirm+0x38>)
 800dccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd0:	0800dd01 	.word	0x0800dd01
 800dcd4:	0800dd85 	.word	0x0800dd85
 800dcd8:	0800dd85 	.word	0x0800dd85
 800dcdc:	0800dd53 	.word	0x0800dd53
 800dce0:	0800dd85 	.word	0x0800dd85
 800dce4:	0800dd85 	.word	0x0800dd85
 800dce8:	0800dd85 	.word	0x0800dd85
 800dcec:	0800dd85 	.word	0x0800dd85
 800dcf0:	0800dd85 	.word	0x0800dd85
 800dcf4:	0800dd85 	.word	0x0800dd85
 800dcf8:	0800dd6b 	.word	0x0800dd6b
 800dcfc:	0800dd85 	.word	0x0800dd85
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800dd00:	2306      	movs	r3, #6
 800dd02:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd04:	f107 030c 	add.w	r3, r7, #12
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f004 fda3 	bl	8012854 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	4a22      	ldr	r2, [pc, #136]	@ (800dd9c <MlmeConfirm+0x104>)
 800dd12:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800dd14:	4822      	ldr	r0, [pc, #136]	@ (800dda0 <MlmeConfirm+0x108>)
 800dd16:	f7ff fee5 	bl	800dae4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	785b      	ldrb	r3, [r3, #1]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d108      	bne.n	800dd34 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dd22:	4b20      	ldr	r3, [pc, #128]	@ (800dda4 <MlmeConfirm+0x10c>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dd28:	4b1f      	ldr	r3, [pc, #124]	@ (800dda8 <MlmeConfirm+0x110>)
 800dd2a:	785b      	ldrb	r3, [r3, #1]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fe31 	bl	800d994 <LmHandlerRequestClass>
 800dd32:	e002      	b.n	800dd3a <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dd34:	4b1b      	ldr	r3, [pc, #108]	@ (800dda4 <MlmeConfirm+0x10c>)
 800dd36:	22ff      	movs	r2, #255	@ 0xff
 800dd38:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dd3a:	4b17      	ldr	r3, [pc, #92]	@ (800dd98 <MlmeConfirm+0x100>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd40:	4818      	ldr	r0, [pc, #96]	@ (800dda4 <MlmeConfirm+0x10c>)
 800dd42:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	785b      	ldrb	r3, [r3, #1]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d11d      	bne.n	800dd88 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800dd4c:	f7ff f894 	bl	800ce78 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800dd50:	e01a      	b.n	800dd88 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800dd52:	4b16      	ldr	r3, [pc, #88]	@ (800ddac <MlmeConfirm+0x114>)
 800dd54:	2201      	movs	r2, #1
 800dd56:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7a1a      	ldrb	r2, [r3, #8]
 800dd5c:	4b13      	ldr	r3, [pc, #76]	@ (800ddac <MlmeConfirm+0x114>)
 800dd5e:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	7a5a      	ldrb	r2, [r3, #9]
 800dd64:	4b11      	ldr	r3, [pc, #68]	@ (800ddac <MlmeConfirm+0x114>)
 800dd66:	74da      	strb	r2, [r3, #19]
        }
        break;
 800dd68:	e00f      	b.n	800dd8a <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d105      	bne.n	800dd7e <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <MlmeConfirm+0x110>)
 800dd74:	7b1b      	ldrb	r3, [r3, #12]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff fe00 	bl	800d97c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800dd7c:	e005      	b.n	800dd8a <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800dd7e:	f7ff fde1 	bl	800d944 <LmHandlerDeviceTimeReq>
        break;
 800dd82:	e002      	b.n	800dd8a <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800dd84:	bf00      	nop
 800dd86:	e000      	b.n	800dd8a <MlmeConfirm+0xf2>
        break;
 800dd88:	bf00      	nop
    }
}
 800dd8a:	bf00      	nop
 800dd8c:	3730      	adds	r7, #48	@ 0x30
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	200000b0 	.word	0x200000b0
 800dd98:	2000076c 	.word	0x2000076c
 800dd9c:	20000090 	.word	0x20000090
 800dda0:	200000ac 	.word	0x200000ac
 800dda4:	200000a8 	.word	0x200000a8
 800dda8:	20000758 	.word	0x20000758
 800ddac:	200000cc 	.word	0x200000cc

0800ddb0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ddba:	4b24      	ldr	r3, [pc, #144]	@ (800de4c <MlmeIndication+0x9c>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	785a      	ldrb	r2, [r3, #1]
 800ddc4:	4b21      	ldr	r3, [pc, #132]	@ (800de4c <MlmeIndication+0x9c>)
 800ddc6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	789b      	ldrb	r3, [r3, #2]
 800ddcc:	b25a      	sxtb	r2, r3
 800ddce:	4b1f      	ldr	r3, [pc, #124]	@ (800de4c <MlmeIndication+0x9c>)
 800ddd0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddd8:	b25a      	sxtb	r2, r3
 800ddda:	4b1c      	ldr	r3, [pc, #112]	@ (800de4c <MlmeIndication+0x9c>)
 800dddc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dde4:	4b19      	ldr	r3, [pc, #100]	@ (800de4c <MlmeIndication+0x9c>)
 800dde6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	78da      	ldrb	r2, [r3, #3]
 800ddec:	4b17      	ldr	r3, [pc, #92]	@ (800de4c <MlmeIndication+0x9c>)
 800ddee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	4a15      	ldr	r2, [pc, #84]	@ (800de4c <MlmeIndication+0x9c>)
 800ddf6:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b0a      	cmp	r3, #10
 800ddfe:	d009      	beq.n	800de14 <MlmeIndication+0x64>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b0e      	cmp	r3, #14
 800de06:	d005      	beq.n	800de14 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800de08:	4b11      	ldr	r3, [pc, #68]	@ (800de50 <MlmeIndication+0xa0>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0e:	490f      	ldr	r1, [pc, #60]	@ (800de4c <MlmeIndication+0x9c>)
 800de10:	2000      	movs	r0, #0
 800de12:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	2003      	movs	r0, #3
 800de18:	f000 f896 	bl	800df48 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b0e      	cmp	r3, #14
 800de22:	d00a      	beq.n	800de3a <MlmeIndication+0x8a>
 800de24:	2b0e      	cmp	r3, #14
 800de26:	dc0a      	bgt.n	800de3e <MlmeIndication+0x8e>
 800de28:	2b06      	cmp	r3, #6
 800de2a:	d002      	beq.n	800de32 <MlmeIndication+0x82>
 800de2c:	2b0a      	cmp	r3, #10
 800de2e:	d008      	beq.n	800de42 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800de30:	e005      	b.n	800de3e <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800de32:	4b08      	ldr	r3, [pc, #32]	@ (800de54 <MlmeIndication+0xa4>)
 800de34:	2201      	movs	r2, #1
 800de36:	701a      	strb	r2, [r3, #0]
        break;
 800de38:	e004      	b.n	800de44 <MlmeIndication+0x94>
        break;
 800de3a:	bf00      	nop
 800de3c:	e002      	b.n	800de44 <MlmeIndication+0x94>
        break;
 800de3e:	bf00      	nop
 800de40:	e000      	b.n	800de44 <MlmeIndication+0x94>
        break;
 800de42:	bf00      	nop
    }
}
 800de44:	bf00      	nop
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	200000cc 	.word	0x200000cc
 800de50:	2000076c 	.word	0x2000076c
 800de54:	20000798 	.word	0x20000798

0800de58 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	6039      	str	r1, [r7, #0]
 800de62:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800de64:	2300      	movs	r3, #0
 800de66:	60fb      	str	r3, [r7, #12]
    switch( id )
 800de68:	79fb      	ldrb	r3, [r7, #7]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d103      	bne.n	800de76 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800de6e:	f000 fa1d 	bl	800e2ac <LmhpCompliancePackageFactory>
 800de72:	60f8      	str	r0, [r7, #12]
            break;
 800de74:	e000      	b.n	800de78 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800de76:	bf00      	nop
        }
    }
    if( package != NULL )
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d035      	beq.n	800deea <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	491d      	ldr	r1, [pc, #116]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	4a1b      	ldr	r2, [pc, #108]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800de8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de90:	4a1a      	ldr	r2, [pc, #104]	@ (800defc <LmHandlerPackageRegister+0xa4>)
 800de92:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800de94:	4b1a      	ldr	r3, [pc, #104]	@ (800df00 <LmHandlerPackageRegister+0xa8>)
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	4917      	ldr	r1, [pc, #92]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800de9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dea0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800dea2:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800dea4:	4b16      	ldr	r3, [pc, #88]	@ (800df00 <LmHandlerPackageRegister+0xa8>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	4913      	ldr	r1, [pc, #76]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800deac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800deb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800deb2:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	4a10      	ldr	r2, [pc, #64]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800deb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800debc:	4a11      	ldr	r2, [pc, #68]	@ (800df04 <LmHandlerPackageRegister+0xac>)
 800debe:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800dec0:	4b0f      	ldr	r3, [pc, #60]	@ (800df00 <LmHandlerPackageRegister+0xa8>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	490c      	ldr	r1, [pc, #48]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800dec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800decc:	6992      	ldr	r2, [r2, #24]
 800dece:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ded0:	79fb      	ldrb	r3, [r7, #7]
 800ded2:	4a09      	ldr	r2, [pc, #36]	@ (800def8 <LmHandlerPackageRegister+0xa0>)
 800ded4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	4a0b      	ldr	r2, [pc, #44]	@ (800df08 <LmHandlerPackageRegister+0xb0>)
 800dedc:	6851      	ldr	r1, [r2, #4]
 800dede:	4a0a      	ldr	r2, [pc, #40]	@ (800df08 <LmHandlerPackageRegister+0xb0>)
 800dee0:	7852      	ldrb	r2, [r2, #1]
 800dee2:	6838      	ldr	r0, [r7, #0]
 800dee4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800dee6:	2300      	movs	r3, #0
 800dee8:	e001      	b.n	800deee <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800deea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20000744 	.word	0x20000744
 800defc:	0800d67d 	.word	0x0800d67d
 800df00:	2000076c 	.word	0x2000076c
 800df04:	0800d945 	.word	0x0800d945
 800df08:	200000e0 	.word	0x200000e0

0800df0c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d80e      	bhi.n	800df3a <LmHandlerPackageIsInitialized+0x2e>
 800df1c:	79fb      	ldrb	r3, [r7, #7]
 800df1e:	4a09      	ldr	r2, [pc, #36]	@ (800df44 <LmHandlerPackageIsInitialized+0x38>)
 800df20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d007      	beq.n	800df3a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800df2a:	79fb      	ldrb	r3, [r7, #7]
 800df2c:	4a05      	ldr	r2, [pc, #20]	@ (800df44 <LmHandlerPackageIsInitialized+0x38>)
 800df2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	4798      	blx	r3
 800df36:	4603      	mov	r3, r0
 800df38:	e000      	b.n	800df3c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800df3a:	2300      	movs	r3, #0
    }
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	20000744 	.word	0x20000744

0800df48 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	6039      	str	r1, [r7, #0]
 800df52:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800df54:	2300      	movs	r3, #0
 800df56:	73fb      	strb	r3, [r7, #15]
 800df58:	e067      	b.n	800e02a <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800df5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df5e:	4a37      	ldr	r2, [pc, #220]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800df60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d05a      	beq.n	800e01e <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d84e      	bhi.n	800e00c <LmHandlerPackagesNotify+0xc4>
 800df6e:	a201      	add	r2, pc, #4	@ (adr r2, 800df74 <LmHandlerPackagesNotify+0x2c>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800df85 	.word	0x0800df85
 800df78:	0800dfa7 	.word	0x0800dfa7
 800df7c:	0800dfc9 	.word	0x0800dfc9
 800df80:	0800dfeb 	.word	0x0800dfeb
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800df84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df88:	4a2c      	ldr	r2, [pc, #176]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800df8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d03d      	beq.n	800e010 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800df94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df98:	4a28      	ldr	r2, [pc, #160]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800df9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	6838      	ldr	r0, [r7, #0]
 800dfa2:	4798      	blx	r3
                    }
                    break;
 800dfa4:	e034      	b.n	800e010 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800dfa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfaa:	4a24      	ldr	r2, [pc, #144]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800dfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d02e      	beq.n	800e014 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800dfb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfba:	4a20      	ldr	r2, [pc, #128]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800dfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc0:	69db      	ldr	r3, [r3, #28]
 800dfc2:	6838      	ldr	r0, [r7, #0]
 800dfc4:	4798      	blx	r3
                    }
                    break;
 800dfc6:	e025      	b.n	800e014 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800dfc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfcc:	4a1b      	ldr	r2, [pc, #108]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800dfce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01f      	beq.n	800e018 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800dfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfdc:	4a17      	ldr	r2, [pc, #92]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800dfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe2:	6a1b      	ldr	r3, [r3, #32]
 800dfe4:	6838      	ldr	r0, [r7, #0]
 800dfe6:	4798      	blx	r3
                    }
                    break;
 800dfe8:	e016      	b.n	800e018 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800dfea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfee:	4a13      	ldr	r2, [pc, #76]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800dff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d010      	beq.n	800e01c <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800dffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dffe:	4a0f      	ldr	r2, [pc, #60]	@ (800e03c <LmHandlerPackagesNotify+0xf4>)
 800e000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e006:	6838      	ldr	r0, [r7, #0]
 800e008:	4798      	blx	r3
                    }
                    break;
 800e00a:	e007      	b.n	800e01c <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800e00c:	bf00      	nop
 800e00e:	e006      	b.n	800e01e <LmHandlerPackagesNotify+0xd6>
                    break;
 800e010:	bf00      	nop
 800e012:	e004      	b.n	800e01e <LmHandlerPackagesNotify+0xd6>
                    break;
 800e014:	bf00      	nop
 800e016:	e002      	b.n	800e01e <LmHandlerPackagesNotify+0xd6>
                    break;
 800e018:	bf00      	nop
 800e01a:	e000      	b.n	800e01e <LmHandlerPackagesNotify+0xd6>
                    break;
 800e01c:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e022:	b2db      	uxtb	r3, r3
 800e024:	3301      	adds	r3, #1
 800e026:	b2db      	uxtb	r3, r3
 800e028:	73fb      	strb	r3, [r7, #15]
 800e02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e02e:	2b04      	cmp	r3, #4
 800e030:	dd93      	ble.n	800df5a <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20000744 	.word	0x20000744

0800e040 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e046:	2300      	movs	r3, #0
 800e048:	71fb      	strb	r3, [r7, #7]
 800e04a:	e018      	b.n	800e07e <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800e04c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e050:	4a0f      	ldr	r2, [pc, #60]	@ (800e090 <LmHandlerPackageIsTxPending+0x50>)
 800e052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00b      	beq.n	800e072 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e05e:	4a0c      	ldr	r2, [pc, #48]	@ (800e090 <LmHandlerPackageIsTxPending+0x50>)
 800e060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4798      	blx	r3
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e06e:	2301      	movs	r3, #1
 800e070:	e00a      	b.n	800e088 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e076:	b2db      	uxtb	r3, r3
 800e078:	3301      	adds	r3, #1
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	71fb      	strb	r3, [r7, #7]
 800e07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e082:	2b04      	cmp	r3, #4
 800e084:	dde2      	ble.n	800e04c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	20000744 	.word	0x20000744

0800e094 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e09a:	2300      	movs	r3, #0
 800e09c:	71fb      	strb	r3, [r7, #7]
 800e09e:	e022      	b.n	800e0e6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a4:	4a14      	ldr	r2, [pc, #80]	@ (800e0f8 <LmHandlerPackagesProcess+0x64>)
 800e0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d015      	beq.n	800e0da <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0b2:	4a11      	ldr	r2, [pc, #68]	@ (800e0f8 <LmHandlerPackagesProcess+0x64>)
 800e0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0b8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00d      	beq.n	800e0da <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff ff23 	bl	800df0c <LmHandlerPackageIsInitialized>
 800e0c6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d006      	beq.n	800e0da <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e0cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0d0:	4a09      	ldr	r2, [pc, #36]	@ (800e0f8 <LmHandlerPackagesProcess+0x64>)
 800e0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	71fb      	strb	r3, [r7, #7]
 800e0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0ea:	2b04      	cmp	r3, #4
 800e0ec:	ddd8      	ble.n	800e0a0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	20000744 	.word	0x20000744

0800e0fc <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	6039      	str	r1, [r7, #0]
 800e106:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d102      	bne.n	800e114 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e10e:	f04f 33ff 	mov.w	r3, #4294967295
 800e112:	e00e      	b.n	800e132 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <LmHandlerGetVersion+0x24>
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d004      	beq.n	800e128 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800e11e:	e007      	b.n	800e130 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	4a06      	ldr	r2, [pc, #24]	@ (800e13c <LmHandlerGetVersion+0x40>)
 800e124:	601a      	str	r2, [r3, #0]
            break;
 800e126:	e003      	b.n	800e130 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	4a05      	ldr	r2, [pc, #20]	@ (800e140 <LmHandlerGetVersion+0x44>)
 800e12c:	601a      	str	r2, [r3, #0]
            break;
 800e12e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	370c      	adds	r7, #12
 800e136:	46bd      	mov	sp, r7
 800e138:	bc80      	pop	{r7}
 800e13a:	4770      	bx	lr
 800e13c:	01000400 	.word	0x01000400
 800e140:	02010001 	.word	0x02010001

0800e144 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800e148:	f005 fb76 	bl	8013838 <LoRaMacDeInitialization>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e152:	2300      	movs	r3, #0
 800e154:	e001      	b.n	800e15a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e156:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800e162:	f004 faaf 	bl	80126c4 <LoRaMacHalt>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e16c:	2300      	movs	r3, #0
 800e16e:	e001      	b.n	800e174 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e170:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e174:	4618      	mov	r0, r3
 800e176:	bd80      	pop	{r7, pc}

0800e178 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08e      	sub	sp, #56	@ 0x38
 800e17c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e17e:	2300      	movs	r3, #0
 800e180:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800e188:	f7ff ffe9 	bl	800e15e <LmHandlerHalt>
 800e18c:	4603      	mov	r3, r0
 800e18e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800e192:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e196:	2b00      	cmp	r3, #0
 800e198:	d12f      	bne.n	800e1fa <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e19a:	f000 f859 	bl	800e250 <NvmDataMgmtStoreBegin>
 800e19e:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a2:	f113 0f02 	cmn.w	r3, #2
 800e1a6:	d103      	bne.n	800e1b0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e1a8:	23f8      	movs	r3, #248	@ 0xf8
 800e1aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1ae:	e01c      	b.n	800e1ea <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d104      	bne.n	800e1c0 <LmHandlerNvmDataStore+0x48>
 800e1b6:	4b1b      	ldr	r3, [pc, #108]	@ (800e224 <LmHandlerNvmDataStore+0xac>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d103      	bne.n	800e1c8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e1c0:	23ff      	movs	r3, #255	@ 0xff
 800e1c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1c6:	e010      	b.n	800e1ea <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800e1c8:	2327      	movs	r3, #39	@ 0x27
 800e1ca:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800e1cc:	1d3b      	adds	r3, r7, #4
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f004 fb40 	bl	8012854 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800e1d8:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800e1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800e1de:	4b11      	ldr	r3, [pc, #68]	@ (800e224 <LmHandlerNvmDataStore+0xac>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1e8:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e1ea:	f000 f847 	bl	800e27c <NvmDataMgmtStoreEnd>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e1f4:	23ff      	movs	r3, #255	@ 0xff
 800e1f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800e1fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d109      	bne.n	800e216 <LmHandlerNvmDataStore+0x9e>
 800e202:	4b08      	ldr	r3, [pc, #32]	@ (800e224 <LmHandlerNvmDataStore+0xac>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	69db      	ldr	r3, [r3, #28]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e20c:	4b05      	ldr	r3, [pc, #20]	@ (800e224 <LmHandlerNvmDataStore+0xac>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	69db      	ldr	r3, [r3, #28]
 800e212:	2001      	movs	r0, #1
 800e214:	4798      	blx	r3
    }

    return lmhStatus;
 800e216:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3738      	adds	r7, #56	@ 0x38
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	2000076c 	.word	0x2000076c

0800e228 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e232:	4b06      	ldr	r3, [pc, #24]	@ (800e24c <NvmDataMgmtEvent+0x24>)
 800e234:	881a      	ldrh	r2, [r3, #0]
 800e236:	88fb      	ldrh	r3, [r7, #6]
 800e238:	4313      	orrs	r3, r2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	4b03      	ldr	r3, [pc, #12]	@ (800e24c <NvmDataMgmtEvent+0x24>)
 800e23e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	bc80      	pop	{r7}
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	20000890 	.word	0x20000890

0800e250 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e254:	4b08      	ldr	r3, [pc, #32]	@ (800e278 <NvmDataMgmtStoreBegin+0x28>)
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d102      	bne.n	800e262 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800e25c:	f06f 0301 	mvn.w	r3, #1
 800e260:	e008      	b.n	800e274 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e262:	f004 fa13 	bl	801268c <LoRaMacStop>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800e26c:	f06f 0302 	mvn.w	r3, #2
 800e270:	e000      	b.n	800e274 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800e272:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e274:	4618      	mov	r0, r3
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20000890 	.word	0x20000890

0800e27c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e280:	4b03      	ldr	r3, [pc, #12]	@ (800e290 <NvmDataMgmtStoreEnd+0x14>)
 800e282:	2200      	movs	r2, #0
 800e284:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800e286:	f004 f9f3 	bl	8012670 <LoRaMacStart>
    return NVM_DATA_OK;
 800e28a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	20000890 	.word	0x20000890

0800e294 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e298:	2220      	movs	r2, #32
 800e29a:	2100      	movs	r1, #0
 800e29c:	4802      	ldr	r0, [pc, #8]	@ (800e2a8 <ClassBStatusReset+0x14>)
 800e29e:	f009 fe17 	bl	8017ed0 <memset1>
}
 800e2a2:	bf00      	nop
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	200008a8 	.word	0x200008a8

0800e2ac <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e2b0:	4b02      	ldr	r3, [pc, #8]	@ (800e2bc <LmhpCompliancePackageFactory+0x10>)
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bc80      	pop	{r7}
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	200000e8 	.word	0x200000e8

0800e2c0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d018      	beq.n	800e306 <LmhpComplianceInit+0x46>
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d015      	beq.n	800e306 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800e2da:	4a19      	ldr	r2, [pc, #100]	@ (800e340 <LmhpComplianceInit+0x80>)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e2e0:	4a18      	ldr	r2, [pc, #96]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e2e6:	4a17      	ldr	r2, [pc, #92]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e2e8:	79fb      	ldrb	r3, [r7, #7]
 800e2ea:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e2ec:	4b15      	ldr	r3, [pc, #84]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	4b14      	ldr	r3, [pc, #80]	@ (800e348 <LmhpComplianceInit+0x88>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f04f 31ff 	mov.w	r1, #4294967295
 800e2fe:	4813      	ldr	r0, [pc, #76]	@ (800e34c <LmhpComplianceInit+0x8c>)
 800e300:	f00d fe4c 	bl	801bf9c <UTIL_TIMER_Create>
 800e304:	e005      	b.n	800e312 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e306:	4b0e      	ldr	r3, [pc, #56]	@ (800e340 <LmhpComplianceInit+0x80>)
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e30c:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e30e:	2200      	movs	r2, #0
 800e310:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e312:	4b0c      	ldr	r3, [pc, #48]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e314:	2200      	movs	r2, #0
 800e316:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e318:	f7ff ffbc 	bl	800e294 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e31c:	4b09      	ldr	r3, [pc, #36]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e31e:	2200      	movs	r2, #0
 800e320:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e322:	4b08      	ldr	r3, [pc, #32]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e324:	2200      	movs	r2, #0
 800e326:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e330:	4b04      	ldr	r3, [pc, #16]	@ (800e344 <LmhpComplianceInit+0x84>)
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800e338:	bf00      	nop
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200008cc 	.word	0x200008cc
 800e344:	20000894 	.word	0x20000894
 800e348:	0800ec35 	.word	0x0800ec35
 800e34c:	200008d0 	.word	0x200008d0

0800e350 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e350:	b480      	push	{r7}
 800e352:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e354:	4b02      	ldr	r3, [pc, #8]	@ (800e360 <LmhpComplianceIsInitialized+0x10>)
 800e356:	781b      	ldrb	r3, [r3, #0]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bc80      	pop	{r7}
 800e35e:	4770      	bx	lr
 800e360:	20000894 	.word	0x20000894

0800e364 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e368:	4b02      	ldr	r3, [pc, #8]	@ (800e374 <LmhpComplianceIsTxPending+0x10>)
 800e36a:	785b      	ldrb	r3, [r3, #1]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	46bd      	mov	sp, r7
 800e370:	bc80      	pop	{r7}
 800e372:	4770      	bx	lr
 800e374:	20000894 	.word	0x20000894

0800e378 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e37e:	4b33      	ldr	r3, [pc, #204]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e380:	785b      	ldrb	r3, [r3, #1]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d03f      	beq.n	800e406 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e386:	f00d ffc7 	bl	801c318 <UTIL_TIMER_GetCurrentTime>
 800e38a:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e38c:	4b2f      	ldr	r3, [pc, #188]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e38e:	685c      	ldr	r4, [r3, #4]
 800e390:	f7ff f96a 	bl	800d668 <LmHandlerGetDutyCycleWaitTime>
 800e394:	4603      	mov	r3, r0
 800e396:	4423      	add	r3, r4
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d942      	bls.n	800e424 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e39e:	4b2b      	ldr	r3, [pc, #172]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3a0:	7a9b      	ldrb	r3, [r3, #10]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d03e      	beq.n	800e424 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800e3a6:	23e0      	movs	r3, #224	@ 0xe0
 800e3a8:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e3aa:	4b28      	ldr	r3, [pc, #160]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3ac:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800e3ae:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e3b0:	4b26      	ldr	r3, [pc, #152]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3b2:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800e3b4:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e3b6:	23ff      	movs	r3, #255	@ 0xff
 800e3b8:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e3ba:	4b24      	ldr	r3, [pc, #144]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3bc:	7a19      	ldrb	r1, [r3, #8]
 800e3be:	463b      	mov	r3, r7
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff f9f8 	bl	800d7b8 <LmHandlerSend>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800e3cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e3d0:	f113 0f02 	cmn.w	r3, #2
 800e3d4:	d004      	beq.n	800e3e0 <LmhpComplianceProcess+0x68>
 800e3d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e3da:	f113 0f06 	cmn.w	r3, #6
 800e3de:	d108      	bne.n	800e3f2 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800e3e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e3e4:	481a      	ldr	r0, [pc, #104]	@ (800e450 <LmhpComplianceProcess+0xd8>)
 800e3e6:	f00d feed 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800e3ea:	4819      	ldr	r0, [pc, #100]	@ (800e450 <LmhpComplianceProcess+0xd8>)
 800e3ec:	f00d fe0c 	bl	801c008 <UTIL_TIMER_Start>
 800e3f0:	e005      	b.n	800e3fe <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800e3f2:	4b16      	ldr	r3, [pc, #88]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e3f8:	4b14      	ldr	r3, [pc, #80]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800e3fe:	4a13      	ldr	r2, [pc, #76]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6053      	str	r3, [r2, #4]
 800e404:	e00e      	b.n	800e424 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e406:	4b11      	ldr	r3, [pc, #68]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d009      	beq.n	800e424 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e410:	4b0e      	ldr	r3, [pc, #56]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e418:	4b0c      	ldr	r3, [pc, #48]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e41a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff fab8 	bl	800d994 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e424:	4b09      	ldr	r3, [pc, #36]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e426:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00a      	beq.n	800e444 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e42e:	4b07      	ldr	r3, [pc, #28]	@ (800e44c <LmhpComplianceProcess+0xd4>)
 800e430:	2200      	movs	r2, #0
 800e432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800e436:	4b07      	ldr	r3, [pc, #28]	@ (800e454 <LmhpComplianceProcess+0xdc>)
 800e438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800e43e:	4b05      	ldr	r3, [pc, #20]	@ (800e454 <LmhpComplianceProcess+0xdc>)
 800e440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e442:	4798      	blx	r3
        }
    }
}
 800e444:	bf00      	nop
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd90      	pop	{r4, r7, pc}
 800e44c:	20000894 	.word	0x20000894
 800e450:	200008d0 	.word	0x200008d0
 800e454:	200000e8 	.word	0x200000e8

0800e458 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e458:	b5b0      	push	{r4, r5, r7, lr}
 800e45a:	b0a4      	sub	sp, #144	@ 0x90
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e466:	4bce      	ldr	r3, [pc, #824]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f083 0301 	eor.w	r3, r3, #1
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b00      	cmp	r3, #0
 800e472:	f040 83b5 	bne.w	800ebe0 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	78db      	ldrb	r3, [r3, #3]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d103      	bne.n	800e486 <LmhpComplianceOnMcpsIndication+0x2e>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7b9b      	ldrb	r3, [r3, #14]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d005      	beq.n	800e492 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e486:	4bc6      	ldr	r3, [pc, #792]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e488:	8a1b      	ldrh	r3, [r3, #16]
 800e48a:	3301      	adds	r3, #1
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	4bc4      	ldr	r3, [pc, #784]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e490:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7b5b      	ldrb	r3, [r3, #13]
 800e496:	f083 0301 	eor.w	r3, r3, #1
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f040 83a1 	bne.w	800ebe4 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	78db      	ldrb	r3, [r3, #3]
 800e4a6:	2be0      	cmp	r3, #224	@ 0xe0
 800e4a8:	f040 839e 	bne.w	800ebe8 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e4ac:	4bbc      	ldr	r3, [pc, #752]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e4ba:	1c59      	adds	r1, r3, #1
 800e4bc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e4c0:	4413      	add	r3, r2
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4c6:	f200 836e 	bhi.w	800eba6 <LmhpComplianceOnMcpsIndication+0x74e>
 800e4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e4d0 <LmhpComplianceOnMcpsIndication+0x78>)
 800e4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d0:	0800e6d1 	.word	0x0800e6d1
 800e4d4:	0800e715 	.word	0x0800e715
 800e4d8:	0800e71f 	.word	0x0800e71f
 800e4dc:	0800e72b 	.word	0x0800e72b
 800e4e0:	0800e74d 	.word	0x0800e74d
 800e4e4:	0800e77b 	.word	0x0800e77b
 800e4e8:	0800e7a9 	.word	0x0800e7a9
 800e4ec:	0800e807 	.word	0x0800e807
 800e4f0:	0800e85f 	.word	0x0800e85f
 800e4f4:	0800e8cb 	.word	0x0800e8cb
 800e4f8:	0800e91b 	.word	0x0800e91b
 800e4fc:	0800eba7 	.word	0x0800eba7
 800e500:	0800eba7 	.word	0x0800eba7
 800e504:	0800eba7 	.word	0x0800eba7
 800e508:	0800eba7 	.word	0x0800eba7
 800e50c:	0800eba7 	.word	0x0800eba7
 800e510:	0800eba7 	.word	0x0800eba7
 800e514:	0800eba7 	.word	0x0800eba7
 800e518:	0800eba7 	.word	0x0800eba7
 800e51c:	0800eba7 	.word	0x0800eba7
 800e520:	0800eba7 	.word	0x0800eba7
 800e524:	0800eba7 	.word	0x0800eba7
 800e528:	0800eba7 	.word	0x0800eba7
 800e52c:	0800eba7 	.word	0x0800eba7
 800e530:	0800eba7 	.word	0x0800eba7
 800e534:	0800eba7 	.word	0x0800eba7
 800e538:	0800eba7 	.word	0x0800eba7
 800e53c:	0800eba7 	.word	0x0800eba7
 800e540:	0800eba7 	.word	0x0800eba7
 800e544:	0800eba7 	.word	0x0800eba7
 800e548:	0800eba7 	.word	0x0800eba7
 800e54c:	0800eba7 	.word	0x0800eba7
 800e550:	0800e923 	.word	0x0800e923
 800e554:	0800e935 	.word	0x0800e935
 800e558:	0800e93d 	.word	0x0800e93d
 800e55c:	0800eba7 	.word	0x0800eba7
 800e560:	0800eba7 	.word	0x0800eba7
 800e564:	0800eba7 	.word	0x0800eba7
 800e568:	0800eba7 	.word	0x0800eba7
 800e56c:	0800eba7 	.word	0x0800eba7
 800e570:	0800eba7 	.word	0x0800eba7
 800e574:	0800eba7 	.word	0x0800eba7
 800e578:	0800eba7 	.word	0x0800eba7
 800e57c:	0800eba7 	.word	0x0800eba7
 800e580:	0800eba7 	.word	0x0800eba7
 800e584:	0800eba7 	.word	0x0800eba7
 800e588:	0800eba7 	.word	0x0800eba7
 800e58c:	0800eba7 	.word	0x0800eba7
 800e590:	0800eba7 	.word	0x0800eba7
 800e594:	0800eba7 	.word	0x0800eba7
 800e598:	0800eba7 	.word	0x0800eba7
 800e59c:	0800eba7 	.word	0x0800eba7
 800e5a0:	0800eba7 	.word	0x0800eba7
 800e5a4:	0800eba7 	.word	0x0800eba7
 800e5a8:	0800eba7 	.word	0x0800eba7
 800e5ac:	0800eba7 	.word	0x0800eba7
 800e5b0:	0800eba7 	.word	0x0800eba7
 800e5b4:	0800eba7 	.word	0x0800eba7
 800e5b8:	0800eba7 	.word	0x0800eba7
 800e5bc:	0800eba7 	.word	0x0800eba7
 800e5c0:	0800eba7 	.word	0x0800eba7
 800e5c4:	0800eba7 	.word	0x0800eba7
 800e5c8:	0800eba7 	.word	0x0800eba7
 800e5cc:	0800eba7 	.word	0x0800eba7
 800e5d0:	0800eba7 	.word	0x0800eba7
 800e5d4:	0800eba7 	.word	0x0800eba7
 800e5d8:	0800eba7 	.word	0x0800eba7
 800e5dc:	0800eba7 	.word	0x0800eba7
 800e5e0:	0800eba7 	.word	0x0800eba7
 800e5e4:	0800eba7 	.word	0x0800eba7
 800e5e8:	0800eba7 	.word	0x0800eba7
 800e5ec:	0800eba7 	.word	0x0800eba7
 800e5f0:	0800eba7 	.word	0x0800eba7
 800e5f4:	0800eba7 	.word	0x0800eba7
 800e5f8:	0800eba7 	.word	0x0800eba7
 800e5fc:	0800eba7 	.word	0x0800eba7
 800e600:	0800eba7 	.word	0x0800eba7
 800e604:	0800eba7 	.word	0x0800eba7
 800e608:	0800eba7 	.word	0x0800eba7
 800e60c:	0800eba7 	.word	0x0800eba7
 800e610:	0800eba7 	.word	0x0800eba7
 800e614:	0800eba7 	.word	0x0800eba7
 800e618:	0800eba7 	.word	0x0800eba7
 800e61c:	0800eba7 	.word	0x0800eba7
 800e620:	0800eba7 	.word	0x0800eba7
 800e624:	0800eba7 	.word	0x0800eba7
 800e628:	0800eba7 	.word	0x0800eba7
 800e62c:	0800eba7 	.word	0x0800eba7
 800e630:	0800eba7 	.word	0x0800eba7
 800e634:	0800eba7 	.word	0x0800eba7
 800e638:	0800eba7 	.word	0x0800eba7
 800e63c:	0800eba7 	.word	0x0800eba7
 800e640:	0800eba7 	.word	0x0800eba7
 800e644:	0800eba7 	.word	0x0800eba7
 800e648:	0800eba7 	.word	0x0800eba7
 800e64c:	0800eba7 	.word	0x0800eba7
 800e650:	0800eba7 	.word	0x0800eba7
 800e654:	0800eba7 	.word	0x0800eba7
 800e658:	0800eba7 	.word	0x0800eba7
 800e65c:	0800eba7 	.word	0x0800eba7
 800e660:	0800eba7 	.word	0x0800eba7
 800e664:	0800eba7 	.word	0x0800eba7
 800e668:	0800eba7 	.word	0x0800eba7
 800e66c:	0800eba7 	.word	0x0800eba7
 800e670:	0800eba7 	.word	0x0800eba7
 800e674:	0800eba7 	.word	0x0800eba7
 800e678:	0800eba7 	.word	0x0800eba7
 800e67c:	0800eba7 	.word	0x0800eba7
 800e680:	0800eba7 	.word	0x0800eba7
 800e684:	0800eba7 	.word	0x0800eba7
 800e688:	0800eba7 	.word	0x0800eba7
 800e68c:	0800eba7 	.word	0x0800eba7
 800e690:	0800eba7 	.word	0x0800eba7
 800e694:	0800eba7 	.word	0x0800eba7
 800e698:	0800eba7 	.word	0x0800eba7
 800e69c:	0800eba7 	.word	0x0800eba7
 800e6a0:	0800eba7 	.word	0x0800eba7
 800e6a4:	0800eba7 	.word	0x0800eba7
 800e6a8:	0800eba7 	.word	0x0800eba7
 800e6ac:	0800eba7 	.word	0x0800eba7
 800e6b0:	0800eba7 	.word	0x0800eba7
 800e6b4:	0800eba7 	.word	0x0800eba7
 800e6b8:	0800eba7 	.word	0x0800eba7
 800e6bc:	0800eba7 	.word	0x0800eba7
 800e6c0:	0800eba7 	.word	0x0800eba7
 800e6c4:	0800e96f 	.word	0x0800e96f
 800e6c8:	0800ea1f 	.word	0x0800ea1f
 800e6cc:	0800ea51 	.word	0x0800ea51
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e6d0:	4b33      	ldr	r3, [pc, #204]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6d2:	68da      	ldr	r2, [r3, #12]
 800e6d4:	4b32      	ldr	r3, [pc, #200]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6d6:	7a9b      	ldrb	r3, [r3, #10]
 800e6d8:	1c59      	adds	r1, r3, #1
 800e6da:	b2c8      	uxtb	r0, r1
 800e6dc:	4930      	ldr	r1, [pc, #192]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6de:	7288      	strb	r0, [r1, #10]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e6e6:	4b2e      	ldr	r3, [pc, #184]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	4b2d      	ldr	r3, [pc, #180]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6ec:	7a9b      	ldrb	r3, [r3, #10]
 800e6ee:	1c59      	adds	r1, r3, #1
 800e6f0:	b2c8      	uxtb	r0, r1
 800e6f2:	492b      	ldr	r1, [pc, #172]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6f4:	7288      	strb	r0, [r1, #10]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	2206      	movs	r2, #6
 800e6fa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e6fc:	4b28      	ldr	r3, [pc, #160]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e6fe:	68da      	ldr	r2, [r3, #12]
 800e700:	4b27      	ldr	r3, [pc, #156]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e702:	7a9b      	ldrb	r3, [r3, #10]
 800e704:	1c59      	adds	r1, r3, #1
 800e706:	b2c8      	uxtb	r0, r1
 800e708:	4925      	ldr	r1, [pc, #148]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e70a:	7288      	strb	r0, [r1, #10]
 800e70c:	4413      	add	r3, r2
 800e70e:	2201      	movs	r2, #1
 800e710:	701a      	strb	r2, [r3, #0]
        break;
 800e712:	e251      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800e714:	4b22      	ldr	r3, [pc, #136]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800e71c:	e24c      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e71e:	4b21      	ldr	r3, [pc, #132]	@ (800e7a4 <LmhpComplianceOnMcpsIndication+0x34c>)
 800e720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e722:	2101      	movs	r1, #1
 800e724:	2002      	movs	r0, #2
 800e726:	4798      	blx	r3
        break;
 800e728:	e246      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	689a      	ldr	r2, [r3, #8]
 800e72e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e732:	1c59      	adds	r1, r3, #1
 800e734:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e738:	4413      	add	r3, r2
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	4b18      	ldr	r3, [pc, #96]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e73e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800e742:	4b17      	ldr	r3, [pc, #92]	@ (800e7a0 <LmhpComplianceOnMcpsIndication+0x348>)
 800e744:	2201      	movs	r2, #1
 800e746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800e74a:	e235      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800e74c:	2304      	movs	r3, #4
 800e74e:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	689a      	ldr	r2, [r3, #8]
 800e754:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e758:	1c59      	adds	r1, r3, #1
 800e75a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e75e:	4413      	add	r3, r2
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	bf14      	ite	ne
 800e766:	2301      	movne	r3, #1
 800e768:	2300      	moveq	r3, #0
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800e76e:	f107 030c 	add.w	r3, r7, #12
 800e772:	4618      	mov	r0, r3
 800e774:	f004 fa14 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>
        break;
 800e778:	e21e      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	689a      	ldr	r2, [r3, #8]
 800e77e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e788:	4413      	add	r3, r2
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bf14      	ite	ne
 800e790:	2301      	movne	r3, #1
 800e792:	2300      	moveq	r3, #0
 800e794:	b2db      	uxtb	r3, r3
 800e796:	4618      	mov	r0, r3
 800e798:	f005 f830 	bl	80137fc <LoRaMacTestSetDutyCycleOn>
        break;
 800e79c:	e20c      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
 800e79e:	bf00      	nop
 800e7a0:	20000894 	.word	0x20000894
 800e7a4:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800e7a8:	4ba5      	ldr	r3, [pc, #660]	@ (800ea40 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800e7aa:	f107 040c 	add.w	r4, r7, #12
 800e7ae:	461d      	mov	r5, r3
 800e7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e7bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	689a      	ldr	r2, [r3, #8]
 800e7c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e7c8:	1c59      	adds	r1, r3, #1
 800e7ca:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e7ce:	4413      	add	r3, r2
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800e7d6:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e7da:	2b0a      	cmp	r3, #10
 800e7dc:	f200 81e5 	bhi.w	800ebaa <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800e7e0:	4b98      	ldr	r3, [pc, #608]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f000 81df 	beq.w	800ebaa <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800e7ec:	4b95      	ldr	r3, [pc, #596]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	3390      	adds	r3, #144	@ 0x90
 800e7fa:	443b      	add	r3, r7
 800e7fc:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800e800:	4618      	mov	r0, r3
 800e802:	4790      	blx	r2
            }
        }
        break;
 800e804:	e1d1      	b.n	800ebaa <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	689a      	ldr	r2, [r3, #8]
 800e80a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e80e:	1c59      	adds	r1, r3, #1
 800e810:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e814:	4413      	add	r3, r2
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800e81c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e820:	2b01      	cmp	r3, #1
 800e822:	d004      	beq.n	800e82e <LmhpComplianceOnMcpsIndication+0x3d6>
 800e824:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e828:	2b02      	cmp	r3, #2
 800e82a:	f040 81c0 	bne.w	800ebae <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e82e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e832:	2b01      	cmp	r3, #1
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b82      	ldr	r3, [pc, #520]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e840:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800e842:	4b80      	ldr	r3, [pc, #512]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f000 81b0 	beq.w	800ebae <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800e84e:	4b7d      	ldr	r3, [pc, #500]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	4a7c      	ldr	r2, [pc, #496]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e856:	7a12      	ldrb	r2, [r2, #8]
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
            }
        }
        break;
 800e85c:	e1a7      	b.n	800ebae <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e85e:	4b7a      	ldr	r3, [pc, #488]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e860:	68da      	ldr	r2, [r3, #12]
 800e862:	4b79      	ldr	r3, [pc, #484]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e864:	7a9b      	ldrb	r3, [r3, #10]
 800e866:	1c59      	adds	r1, r3, #1
 800e868:	b2c8      	uxtb	r0, r1
 800e86a:	4977      	ldr	r1, [pc, #476]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e86c:	7288      	strb	r0, [r1, #10]
 800e86e:	4413      	add	r3, r2
 800e870:	2208      	movs	r2, #8
 800e872:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e874:	2301      	movs	r3, #1
 800e876:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800e87a:	e019      	b.n	800e8b0 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e884:	1c59      	adds	r1, r3, #1
 800e886:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e88a:	4413      	add	r3, r2
 800e88c:	781a      	ldrb	r2, [r3, #0]
 800e88e:	4b6e      	ldr	r3, [pc, #440]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e890:	68d9      	ldr	r1, [r3, #12]
 800e892:	4b6d      	ldr	r3, [pc, #436]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e894:	7a9b      	ldrb	r3, [r3, #10]
 800e896:	1c58      	adds	r0, r3, #1
 800e898:	b2c4      	uxtb	r4, r0
 800e89a:	486b      	ldr	r0, [pc, #428]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e89c:	7284      	strb	r4, [r0, #10]
 800e89e:	440b      	add	r3, r1
 800e8a0:	3201      	adds	r2, #1
 800e8a2:	b2d2      	uxtb	r2, r2
 800e8a4:	701a      	strb	r2, [r3, #0]
             i++ )
 800e8a6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e8b0:	4b65      	ldr	r3, [pc, #404]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8b2:	7a5a      	ldrb	r2, [r3, #9]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	7b1b      	ldrb	r3, [r3, #12]
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	bf28      	it	cs
 800e8bc:	4613      	movcs	r3, r2
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d3d9      	bcc.n	800e87c <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800e8c8:	e176      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e8ca:	4b5f      	ldr	r3, [pc, #380]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	4b5e      	ldr	r3, [pc, #376]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8d0:	7a9b      	ldrb	r3, [r3, #10]
 800e8d2:	1c59      	adds	r1, r3, #1
 800e8d4:	b2c8      	uxtb	r0, r1
 800e8d6:	495c      	ldr	r1, [pc, #368]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8d8:	7288      	strb	r0, [r1, #10]
 800e8da:	4413      	add	r3, r2
 800e8dc:	2209      	movs	r2, #9
 800e8de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e8e0:	4b59      	ldr	r3, [pc, #356]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8e2:	8a18      	ldrh	r0, [r3, #16]
 800e8e4:	4b58      	ldr	r3, [pc, #352]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8e6:	68da      	ldr	r2, [r3, #12]
 800e8e8:	4b57      	ldr	r3, [pc, #348]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8ea:	7a9b      	ldrb	r3, [r3, #10]
 800e8ec:	1c59      	adds	r1, r3, #1
 800e8ee:	b2cc      	uxtb	r4, r1
 800e8f0:	4955      	ldr	r1, [pc, #340]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8f2:	728c      	strb	r4, [r1, #10]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	b2c2      	uxtb	r2, r0
 800e8f8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e8fa:	4b53      	ldr	r3, [pc, #332]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e8fc:	8a1b      	ldrh	r3, [r3, #16]
 800e8fe:	0a1b      	lsrs	r3, r3, #8
 800e900:	b298      	uxth	r0, r3
 800e902:	4b51      	ldr	r3, [pc, #324]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	4b50      	ldr	r3, [pc, #320]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e908:	7a9b      	ldrb	r3, [r3, #10]
 800e90a:	1c59      	adds	r1, r3, #1
 800e90c:	b2cc      	uxtb	r4, r1
 800e90e:	494e      	ldr	r1, [pc, #312]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e910:	728c      	strb	r4, [r1, #10]
 800e912:	4413      	add	r3, r2
 800e914:	b2c2      	uxtb	r2, r0
 800e916:	701a      	strb	r2, [r3, #0]
        break;
 800e918:	e14e      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800e91a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e91c:	2200      	movs	r2, #0
 800e91e:	821a      	strh	r2, [r3, #16]
        break;
 800e920:	e14a      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800e922:	2304      	movs	r3, #4
 800e924:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800e928:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e92c:	4618      	mov	r0, r3
 800e92e:	f004 fca7 	bl	8013280 <LoRaMacMlmeRequest>
        break;
 800e932:	e141      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800e934:	4b45      	ldr	r3, [pc, #276]	@ (800ea4c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e938:	4798      	blx	r3
        break;
 800e93a:	e13d      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e944:	1c59      	adds	r1, r3, #1
 800e946:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e94a:	4413      	add	r3, r2
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e950:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e952:	4b3c      	ldr	r3, [pc, #240]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 812a 	beq.w	800ebb2 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e95e:	4b39      	ldr	r3, [pc, #228]	@ (800ea44 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	4a38      	ldr	r2, [pc, #224]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e966:	7d52      	ldrb	r2, [r2, #21]
 800e968:	4610      	mov	r0, r2
 800e96a:	4798      	blx	r3
        }
        break;
 800e96c:	e121      	b.n	800ebb2 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7b1b      	ldrb	r3, [r3, #12]
 800e972:	2b07      	cmp	r3, #7
 800e974:	f040 811f 	bne.w	800ebb6 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800e978:	2305      	movs	r3, #5
 800e97a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e986:	4413      	add	r3, r2
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	b21a      	sxth	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6899      	ldr	r1, [r3, #8]
 800e990:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e994:	3301      	adds	r3, #1
 800e996:	440b      	add	r3, r1
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	021b      	lsls	r3, r3, #8
 800e99c:	b21b      	sxth	r3, r3
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	b21b      	sxth	r3, r3
 800e9a2:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800e9a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800e9a8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9ac:	3302      	adds	r3, #2
 800e9ae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9ba:	4413      	add	r3, r2
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	021b      	lsls	r3, r3, #8
 800e9d0:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6899      	ldr	r1, [r3, #8]
 800e9d8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9dc:	3302      	adds	r3, #2
 800e9de:	440b      	add	r3, r1
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e9e8:	2364      	movs	r3, #100	@ 0x64
 800e9ea:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800e9ee:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800e9f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e9f4:	3303      	adds	r3, #3
 800e9f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	689a      	ldr	r2, [r3, #8]
 800e9fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea02:	1c59      	adds	r1, r3, #1
 800ea04:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ea08:	4413      	add	r3, r2
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	b25b      	sxtb	r3, r3
 800ea0e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800ea12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ea16:	4618      	mov	r0, r3
 800ea18:	f004 fc32 	bl	8013280 <LoRaMacMlmeRequest>
        }
        break;
 800ea1c:	e0cb      	b.n	800ebb6 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ea1e:	2339      	movs	r3, #57	@ 0x39
 800ea20:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800ea24:	2300      	movs	r3, #0
 800ea26:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ea2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f004 f8b6 	bl	8012ba0 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800ea34:	4b04      	ldr	r3, [pc, #16]	@ (800ea48 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800ea3c:	e0bc      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
 800ea3e:	bf00      	nop
 800ea40:	0801fd4c 	.word	0x0801fd4c
 800ea44:	200008cc 	.word	0x200008cc
 800ea48:	20000894 	.word	0x20000894
 800ea4c:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800ea50:	232a      	movs	r3, #42	@ 0x2a
 800ea52:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f003 fefb 	bl	8012854 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ea66:	4b62      	ldr	r3, [pc, #392]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea68:	68da      	ldr	r2, [r3, #12]
 800ea6a:	4b61      	ldr	r3, [pc, #388]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea6c:	7a9b      	ldrb	r3, [r3, #10]
 800ea6e:	1c59      	adds	r1, r3, #1
 800ea70:	b2c8      	uxtb	r0, r1
 800ea72:	495f      	ldr	r1, [pc, #380]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea74:	7288      	strb	r0, [r1, #10]
 800ea76:	4413      	add	r3, r2
 800ea78:	227f      	movs	r2, #127	@ 0x7f
 800ea7a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ea7c:	4b5d      	ldr	r3, [pc, #372]	@ (800ebf4 <LmhpComplianceOnMcpsIndication+0x79c>)
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	4b5b      	ldr	r3, [pc, #364]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea82:	68d9      	ldr	r1, [r3, #12]
 800ea84:	4b5a      	ldr	r3, [pc, #360]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea86:	7a9b      	ldrb	r3, [r3, #10]
 800ea88:	1c58      	adds	r0, r3, #1
 800ea8a:	b2c4      	uxtb	r4, r0
 800ea8c:	4858      	ldr	r0, [pc, #352]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea8e:	7284      	strb	r4, [r0, #10]
 800ea90:	440b      	add	r3, r1
 800ea92:	78d2      	ldrb	r2, [r2, #3]
 800ea94:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ea96:	4b57      	ldr	r3, [pc, #348]	@ (800ebf4 <LmhpComplianceOnMcpsIndication+0x79c>)
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	4b55      	ldr	r3, [pc, #340]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ea9c:	68d9      	ldr	r1, [r3, #12]
 800ea9e:	4b54      	ldr	r3, [pc, #336]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eaa0:	7a9b      	ldrb	r3, [r3, #10]
 800eaa2:	1c58      	adds	r0, r3, #1
 800eaa4:	b2c4      	uxtb	r4, r0
 800eaa6:	4852      	ldr	r0, [pc, #328]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eaa8:	7284      	strb	r4, [r0, #10]
 800eaaa:	440b      	add	r3, r1
 800eaac:	7892      	ldrb	r2, [r2, #2]
 800eaae:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800eab0:	4b50      	ldr	r3, [pc, #320]	@ (800ebf4 <LmhpComplianceOnMcpsIndication+0x79c>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	4b4e      	ldr	r3, [pc, #312]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eab6:	68d9      	ldr	r1, [r3, #12]
 800eab8:	4b4d      	ldr	r3, [pc, #308]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eaba:	7a9b      	ldrb	r3, [r3, #10]
 800eabc:	1c58      	adds	r0, r3, #1
 800eabe:	b2c4      	uxtb	r4, r0
 800eac0:	484b      	ldr	r0, [pc, #300]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eac2:	7284      	strb	r4, [r0, #10]
 800eac4:	440b      	add	r3, r1
 800eac6:	7852      	ldrb	r2, [r2, #1]
 800eac8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800eaca:	4b4a      	ldr	r3, [pc, #296]	@ (800ebf4 <LmhpComplianceOnMcpsIndication+0x79c>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	4b48      	ldr	r3, [pc, #288]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ead0:	68d9      	ldr	r1, [r3, #12]
 800ead2:	4b47      	ldr	r3, [pc, #284]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ead4:	7a9b      	ldrb	r3, [r3, #10]
 800ead6:	1c58      	adds	r0, r3, #1
 800ead8:	b2c4      	uxtb	r4, r0
 800eada:	4845      	ldr	r0, [pc, #276]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eadc:	7284      	strb	r4, [r0, #10]
 800eade:	440b      	add	r3, r1
 800eae0:	7812      	ldrb	r2, [r2, #0]
 800eae2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800eae4:	4b42      	ldr	r3, [pc, #264]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eae6:	68da      	ldr	r2, [r3, #12]
 800eae8:	4b41      	ldr	r3, [pc, #260]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eaea:	7a9b      	ldrb	r3, [r3, #10]
 800eaec:	1c59      	adds	r1, r3, #1
 800eaee:	b2c8      	uxtb	r0, r1
 800eaf0:	493f      	ldr	r1, [pc, #252]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eaf2:	7288      	strb	r0, [r1, #10]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800eafa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800eafc:	4b3c      	ldr	r3, [pc, #240]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eafe:	68da      	ldr	r2, [r3, #12]
 800eb00:	4b3b      	ldr	r3, [pc, #236]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb02:	7a9b      	ldrb	r3, [r3, #10]
 800eb04:	1c59      	adds	r1, r3, #1
 800eb06:	b2c8      	uxtb	r0, r1
 800eb08:	4939      	ldr	r1, [pc, #228]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb0a:	7288      	strb	r0, [r1, #10]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800eb12:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800eb14:	4b36      	ldr	r3, [pc, #216]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb16:	68da      	ldr	r2, [r3, #12]
 800eb18:	4b35      	ldr	r3, [pc, #212]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb1a:	7a9b      	ldrb	r3, [r3, #10]
 800eb1c:	1c59      	adds	r1, r3, #1
 800eb1e:	b2c8      	uxtb	r0, r1
 800eb20:	4933      	ldr	r1, [pc, #204]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb22:	7288      	strb	r0, [r1, #10]
 800eb24:	4413      	add	r3, r2
 800eb26:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800eb2a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800eb2c:	4b30      	ldr	r3, [pc, #192]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb2e:	68da      	ldr	r2, [r3, #12]
 800eb30:	4b2f      	ldr	r3, [pc, #188]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb32:	7a9b      	ldrb	r3, [r3, #10]
 800eb34:	1c59      	adds	r1, r3, #1
 800eb36:	b2c8      	uxtb	r0, r1
 800eb38:	492d      	ldr	r1, [pc, #180]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb3a:	7288      	strb	r0, [r1, #10]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800eb42:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800eb44:	4b2a      	ldr	r3, [pc, #168]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb46:	68da      	ldr	r2, [r3, #12]
 800eb48:	4b29      	ldr	r3, [pc, #164]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb4a:	7a9b      	ldrb	r3, [r3, #10]
 800eb4c:	1c59      	adds	r1, r3, #1
 800eb4e:	b2c8      	uxtb	r0, r1
 800eb50:	4927      	ldr	r1, [pc, #156]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb52:	7288      	strb	r0, [r1, #10]
 800eb54:	4413      	add	r3, r2
 800eb56:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800eb5a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800eb5c:	4b24      	ldr	r3, [pc, #144]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb5e:	68da      	ldr	r2, [r3, #12]
 800eb60:	4b23      	ldr	r3, [pc, #140]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb62:	7a9b      	ldrb	r3, [r3, #10]
 800eb64:	1c59      	adds	r1, r3, #1
 800eb66:	b2c8      	uxtb	r0, r1
 800eb68:	4921      	ldr	r1, [pc, #132]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb6a:	7288      	strb	r0, [r1, #10]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800eb72:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800eb74:	4b1e      	ldr	r3, [pc, #120]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	4b1d      	ldr	r3, [pc, #116]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb7a:	7a9b      	ldrb	r3, [r3, #10]
 800eb7c:	1c59      	adds	r1, r3, #1
 800eb7e:	b2c8      	uxtb	r0, r1
 800eb80:	491b      	ldr	r1, [pc, #108]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb82:	7288      	strb	r0, [r1, #10]
 800eb84:	4413      	add	r3, r2
 800eb86:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800eb8a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800eb8c:	4b18      	ldr	r3, [pc, #96]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	4b17      	ldr	r3, [pc, #92]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb92:	7a9b      	ldrb	r3, [r3, #10]
 800eb94:	1c59      	adds	r1, r3, #1
 800eb96:	b2c8      	uxtb	r0, r1
 800eb98:	4915      	ldr	r1, [pc, #84]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800eb9a:	7288      	strb	r0, [r1, #10]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800eba2:	701a      	strb	r2, [r3, #0]
        break;
 800eba4:	e008      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800eba6:	bf00      	nop
 800eba8:	e006      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ebaa:	bf00      	nop
 800ebac:	e004      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ebae:	bf00      	nop
 800ebb0:	e002      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ebb2:	bf00      	nop
 800ebb4:	e000      	b.n	800ebb8 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800ebb6:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800ebb8:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ebba:	7a9b      	ldrb	r3, [r3, #10]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d008      	beq.n	800ebd2 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800ebc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ebc4:	480c      	ldr	r0, [pc, #48]	@ (800ebf8 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ebc6:	f00d fafd 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800ebca:	480b      	ldr	r0, [pc, #44]	@ (800ebf8 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ebcc:	f00d fa1c 	bl	801c008 <UTIL_TIMER_Start>
 800ebd0:	e00b      	b.n	800ebea <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800ebd2:	4809      	ldr	r0, [pc, #36]	@ (800ebf8 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800ebd4:	f00d fa86 	bl	801c0e4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800ebd8:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <LmhpComplianceOnMcpsIndication+0x798>)
 800ebda:	2200      	movs	r2, #0
 800ebdc:	705a      	strb	r2, [r3, #1]
 800ebde:	e004      	b.n	800ebea <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ebe0:	bf00      	nop
 800ebe2:	e002      	b.n	800ebea <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ebe4:	bf00      	nop
 800ebe6:	e000      	b.n	800ebea <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800ebe8:	bf00      	nop
    }
}
 800ebea:	3790      	adds	r7, #144	@ 0x90
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf0:	20000894 	.word	0x20000894
 800ebf4:	200008cc 	.word	0x200008cc
 800ebf8:	200008d0 	.word	0x200008d0

0800ebfc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800ec04:	bf00      	nop
    }
}
 800ec06:	bf00      	nop
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bc80      	pop	{r7}
 800ec0e:	4770      	bx	lr

0800ec10 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ec18:	4b05      	ldr	r3, [pc, #20]	@ (800ec30 <LmhpComplianceOnMlmeIndication+0x20>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f083 0301 	eor.w	r3, r3, #1
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b00      	cmp	r3, #0
    {
        return;
 800ec24:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bc80      	pop	{r7}
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	20000894 	.word	0x20000894

0800ec34 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800ec3c:	4b04      	ldr	r3, [pc, #16]	@ (800ec50 <OnProcessTimer+0x1c>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800ec42:	4b04      	ldr	r3, [pc, #16]	@ (800ec54 <OnProcessTimer+0x20>)
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	4798      	blx	r3
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	20000894 	.word	0x20000894
 800ec54:	200000e8 	.word	0x200000e8

0800ec58 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800ec58:	b590      	push	{r4, r7, lr}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ec5e:	f00d fb5b 	bl	801c318 <UTIL_TIMER_GetCurrentTime>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4a16      	ldr	r2, [pc, #88]	@ (800ecc0 <OnRadioTxDone+0x68>)
 800ec66:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ec68:	4c16      	ldr	r4, [pc, #88]	@ (800ecc4 <OnRadioTxDone+0x6c>)
 800ec6a:	463b      	mov	r3, r7
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f00c fcd3 	bl	801b618 <SysTimeGet>
 800ec72:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ec76:	463a      	mov	r2, r7
 800ec78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec7c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ec80:	4a11      	ldr	r2, [pc, #68]	@ (800ecc8 <OnRadioTxDone+0x70>)
 800ec82:	7813      	ldrb	r3, [r2, #0]
 800ec84:	f043 0320 	orr.w	r3, r3, #32
 800ec88:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ec8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ecc4 <OnRadioTxDone+0x6c>)
 800ec8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00a      	beq.n	800ecaa <OnRadioTxDone+0x52>
 800ec94:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc4 <OnRadioTxDone+0x6c>)
 800ec96:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d004      	beq.n	800ecaa <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eca0:	4b08      	ldr	r3, [pc, #32]	@ (800ecc4 <OnRadioTxDone+0x6c>)
 800eca2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ecaa:	4b08      	ldr	r3, [pc, #32]	@ (800eccc <OnRadioTxDone+0x74>)
 800ecac:	2201      	movs	r2, #1
 800ecae:	2100      	movs	r1, #0
 800ecb0:	2002      	movs	r0, #2
 800ecb2:	f00d fc21 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ecb6:	bf00      	nop
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd90      	pop	{r4, r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20001994 	.word	0x20001994
 800ecc4:	200008e8 	.word	0x200008e8
 800ecc8:	20001990 	.word	0x20001990
 800eccc:	0801fd78 	.word	0x0801fd78

0800ecd0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	4608      	mov	r0, r1
 800ecda:	4611      	mov	r1, r2
 800ecdc:	461a      	mov	r2, r3
 800ecde:	4603      	mov	r3, r0
 800ece0:	817b      	strh	r3, [r7, #10]
 800ece2:	460b      	mov	r3, r1
 800ece4:	813b      	strh	r3, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ecea:	f00d fb15 	bl	801c318 <UTIL_TIMER_GetCurrentTime>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4a18      	ldr	r2, [pc, #96]	@ (800ed54 <OnRadioRxDone+0x84>)
 800ecf2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800ecf4:	4a17      	ldr	r2, [pc, #92]	@ (800ed54 <OnRadioRxDone+0x84>)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ecfa:	4a16      	ldr	r2, [pc, #88]	@ (800ed54 <OnRadioRxDone+0x84>)
 800ecfc:	897b      	ldrh	r3, [r7, #10]
 800ecfe:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ed00:	4a14      	ldr	r2, [pc, #80]	@ (800ed54 <OnRadioRxDone+0x84>)
 800ed02:	893b      	ldrh	r3, [r7, #8]
 800ed04:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ed06:	4a13      	ldr	r2, [pc, #76]	@ (800ed54 <OnRadioRxDone+0x84>)
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ed0c:	4a12      	ldr	r2, [pc, #72]	@ (800ed58 <OnRadioRxDone+0x88>)
 800ed0e:	7813      	ldrb	r3, [r2, #0]
 800ed10:	f043 0310 	orr.w	r3, r3, #16
 800ed14:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ed16:	4a10      	ldr	r2, [pc, #64]	@ (800ed58 <OnRadioRxDone+0x88>)
 800ed18:	7813      	ldrb	r3, [r2, #0]
 800ed1a:	f043 0301 	orr.w	r3, r3, #1
 800ed1e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed20:	4b0e      	ldr	r3, [pc, #56]	@ (800ed5c <OnRadioRxDone+0x8c>)
 800ed22:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <OnRadioRxDone+0x70>
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed5c <OnRadioRxDone+0x8c>)
 800ed2c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d004      	beq.n	800ed40 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed36:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <OnRadioRxDone+0x8c>)
 800ed38:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ed40:	4b07      	ldr	r3, [pc, #28]	@ (800ed60 <OnRadioRxDone+0x90>)
 800ed42:	2201      	movs	r2, #1
 800ed44:	2100      	movs	r1, #0
 800ed46:	2002      	movs	r0, #2
 800ed48:	f00d fbd6 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20001998 	.word	0x20001998
 800ed58:	20001990 	.word	0x20001990
 800ed5c:	200008e8 	.word	0x200008e8
 800ed60:	0801fd88 	.word	0x0801fd88

0800ed64 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ed68:	4a0e      	ldr	r2, [pc, #56]	@ (800eda4 <OnRadioTxTimeout+0x40>)
 800ed6a:	7813      	ldrb	r3, [r2, #0]
 800ed6c:	f043 0308 	orr.w	r3, r3, #8
 800ed70:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed72:	4b0d      	ldr	r3, [pc, #52]	@ (800eda8 <OnRadioTxTimeout+0x44>)
 800ed74:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00a      	beq.n	800ed92 <OnRadioTxTimeout+0x2e>
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	@ (800eda8 <OnRadioTxTimeout+0x44>)
 800ed7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed88:	4b07      	ldr	r3, [pc, #28]	@ (800eda8 <OnRadioTxTimeout+0x44>)
 800ed8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ed92:	4b06      	ldr	r3, [pc, #24]	@ (800edac <OnRadioTxTimeout+0x48>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	2100      	movs	r1, #0
 800ed98:	2002      	movs	r0, #2
 800ed9a:	f00d fbad 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ed9e:	bf00      	nop
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20001990 	.word	0x20001990
 800eda8:	200008e8 	.word	0x200008e8
 800edac:	0801fd98 	.word	0x0801fd98

0800edb0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800edb4:	4a0b      	ldr	r2, [pc, #44]	@ (800ede4 <OnRadioRxError+0x34>)
 800edb6:	7813      	ldrb	r3, [r2, #0]
 800edb8:	f043 0304 	orr.w	r3, r3, #4
 800edbc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800edbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ede8 <OnRadioRxError+0x38>)
 800edc0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00a      	beq.n	800edde <OnRadioRxError+0x2e>
 800edc8:	4b07      	ldr	r3, [pc, #28]	@ (800ede8 <OnRadioRxError+0x38>)
 800edca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800edd4:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <OnRadioRxError+0x38>)
 800edd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	4798      	blx	r3
    }
}
 800edde:	bf00      	nop
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	20001990 	.word	0x20001990
 800ede8:	200008e8 	.word	0x200008e8

0800edec <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800edf0:	4a0e      	ldr	r2, [pc, #56]	@ (800ee2c <OnRadioRxTimeout+0x40>)
 800edf2:	7813      	ldrb	r3, [r2, #0]
 800edf4:	f043 0302 	orr.w	r3, r3, #2
 800edf8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800edfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ee30 <OnRadioRxTimeout+0x44>)
 800edfc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <OnRadioRxTimeout+0x2e>
 800ee04:	4b0a      	ldr	r3, [pc, #40]	@ (800ee30 <OnRadioRxTimeout+0x44>)
 800ee06:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d004      	beq.n	800ee1a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ee10:	4b07      	ldr	r3, [pc, #28]	@ (800ee30 <OnRadioRxTimeout+0x44>)
 800ee12:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ee1a:	4b06      	ldr	r3, [pc, #24]	@ (800ee34 <OnRadioRxTimeout+0x48>)
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	2100      	movs	r1, #0
 800ee20:	2002      	movs	r0, #2
 800ee22:	f00d fb69 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ee26:	bf00      	nop
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20001990 	.word	0x20001990
 800ee30:	200008e8 	.word	0x200008e8
 800ee34:	0801fda8 	.word	0x0801fda8

0800ee38 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ee38:	b480      	push	{r7}
 800ee3a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ee3c:	4b08      	ldr	r3, [pc, #32]	@ (800ee60 <UpdateRxSlotIdleState+0x28>)
 800ee3e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d004      	beq.n	800ee50 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ee46:	4b07      	ldr	r3, [pc, #28]	@ (800ee64 <UpdateRxSlotIdleState+0x2c>)
 800ee48:	2206      	movs	r2, #6
 800ee4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ee4e:	e003      	b.n	800ee58 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee50:	4b04      	ldr	r3, [pc, #16]	@ (800ee64 <UpdateRxSlotIdleState+0x2c>)
 800ee52:	2202      	movs	r2, #2
 800ee54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800ee58:	bf00      	nop
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bc80      	pop	{r7}
 800ee5e:	4770      	bx	lr
 800ee60:	20000e08 	.word	0x20000e08
 800ee64:	200008e8 	.word	0x200008e8

0800ee68 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08e      	sub	sp, #56	@ 0x38
 800ee6c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ee6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800ee70:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d002      	beq.n	800ee7e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800ee78:	4b3c      	ldr	r3, [pc, #240]	@ (800ef6c <ProcessRadioTxDone+0x104>)
 800ee7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee7c:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800ee7e:	4b3c      	ldr	r3, [pc, #240]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800ee80:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800ee84:	4619      	mov	r1, r3
 800ee86:	483b      	ldr	r0, [pc, #236]	@ (800ef74 <ProcessRadioTxDone+0x10c>)
 800ee88:	f00d f99c 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800ee8c:	4839      	ldr	r0, [pc, #228]	@ (800ef74 <ProcessRadioTxDone+0x10c>)
 800ee8e:	f00d f8bb 	bl	801c008 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800ee92:	4b37      	ldr	r3, [pc, #220]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800ee94:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4837      	ldr	r0, [pc, #220]	@ (800ef78 <ProcessRadioTxDone+0x110>)
 800ee9c:	f00d f992 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800eea0:	4835      	ldr	r0, [pc, #212]	@ (800ef78 <ProcessRadioTxDone+0x110>)
 800eea2:	f00d f8b1 	bl	801c008 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800eea6:	4b32      	ldr	r3, [pc, #200]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800eea8:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d01a      	beq.n	800eee6 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800eeb0:	2315      	movs	r3, #21
 800eeb2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eeb6:	4b2c      	ldr	r3, [pc, #176]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800eeb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eebc:	f107 0220 	add.w	r2, r7, #32
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f006 fd28 	bl	8015918 <RegionGetPhyParam>
 800eec8:	4603      	mov	r3, r0
 800eeca:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800eecc:	4b28      	ldr	r3, [pc, #160]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800eece:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	4413      	add	r3, r2
 800eed6:	4619      	mov	r1, r3
 800eed8:	4828      	ldr	r0, [pc, #160]	@ (800ef7c <ProcessRadioTxDone+0x114>)
 800eeda:	f00d f973 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800eede:	4827      	ldr	r0, [pc, #156]	@ (800ef7c <ProcessRadioTxDone+0x114>)
 800eee0:	f00d f892 	bl	801c008 <UTIL_TIMER_Start>
 800eee4:	e003      	b.n	800eeee <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eee6:	4b22      	ldr	r3, [pc, #136]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800eeee:	4b24      	ldr	r3, [pc, #144]	@ (800ef80 <ProcessRadioTxDone+0x118>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a1d      	ldr	r2, [pc, #116]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800eef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800eef6:	4b1e      	ldr	r3, [pc, #120]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800eef8:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800eefc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800eefe:	4b20      	ldr	r3, [pc, #128]	@ (800ef80 <ProcessRadioTxDone+0x118>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ef04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f00c fbbd 	bl	801b688 <SysTimeGetMcuTime>
 800ef0e:	4638      	mov	r0, r7
 800ef10:	4b15      	ldr	r3, [pc, #84]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800ef12:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ef16:	9200      	str	r2, [sp, #0]
 800ef18:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ef1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ef20:	ca06      	ldmia	r2, {r1, r2}
 800ef22:	f00c fb12 	bl	801b54a <SysTimeSub>
 800ef26:	f107 0314 	add.w	r3, r7, #20
 800ef2a:	463a      	mov	r2, r7
 800ef2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef30:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ef34:	4b0e      	ldr	r3, [pc, #56]	@ (800ef70 <ProcessRadioTxDone+0x108>)
 800ef36:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800ef3a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ef40:	4b09      	ldr	r3, [pc, #36]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800ef42:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d101      	bne.n	800ef4e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ef4e:	4b06      	ldr	r3, [pc, #24]	@ (800ef68 <ProcessRadioTxDone+0x100>)
 800ef50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef54:	f107 0208 	add.w	r2, r7, #8
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f006 fcf4 	bl	8015948 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800ef60:	bf00      	nop
 800ef62:	3730      	adds	r7, #48	@ 0x30
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	20000e08 	.word	0x20000e08
 800ef6c:	08020450 	.word	0x08020450
 800ef70:	200008e8 	.word	0x200008e8
 800ef74:	20000c68 	.word	0x20000c68
 800ef78:	20000c80 	.word	0x20000c80
 800ef7c:	20000cec 	.word	0x20000cec
 800ef80:	20001994 	.word	0x20001994

0800ef84 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ef88:	4b10      	ldr	r3, [pc, #64]	@ (800efcc <PrepareRxDoneAbort+0x48>)
 800ef8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ef8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef92:	4a0e      	ldr	r2, [pc, #56]	@ (800efcc <PrepareRxDoneAbort+0x48>)
 800ef94:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800ef98:	4b0c      	ldr	r3, [pc, #48]	@ (800efcc <PrepareRxDoneAbort+0x48>)
 800ef9a:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800efa2:	2000      	movs	r0, #0
 800efa4:	f001 f99c 	bl	80102e0 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800efa8:	4a08      	ldr	r2, [pc, #32]	@ (800efcc <PrepareRxDoneAbort+0x48>)
 800efaa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800efae:	f043 0302 	orr.w	r3, r3, #2
 800efb2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800efb6:	4a05      	ldr	r2, [pc, #20]	@ (800efcc <PrepareRxDoneAbort+0x48>)
 800efb8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800efbc:	f043 0320 	orr.w	r3, r3, #32
 800efc0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800efc4:	f7ff ff38 	bl	800ee38 <UpdateRxSlotIdleState>
}
 800efc8:	bf00      	nop
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	200008e8 	.word	0x200008e8

0800efd0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800efd0:	b590      	push	{r4, r7, lr}
 800efd2:	b0a7      	sub	sp, #156	@ 0x9c
 800efd4:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800efd6:	2312      	movs	r3, #18
 800efd8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800efdc:	4bbd      	ldr	r3, [pc, #756]	@ (800f2d4 <ProcessRadioRxDone+0x304>)
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800efe4:	4bbb      	ldr	r3, [pc, #748]	@ (800f2d4 <ProcessRadioRxDone+0x304>)
 800efe6:	891b      	ldrh	r3, [r3, #8]
 800efe8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800efec:	4bb9      	ldr	r3, [pc, #740]	@ (800f2d4 <ProcessRadioRxDone+0x304>)
 800efee:	895b      	ldrh	r3, [r3, #10]
 800eff0:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800eff4:	4bb7      	ldr	r3, [pc, #732]	@ (800f2d4 <ProcessRadioRxDone+0x304>)
 800eff6:	7b1b      	ldrb	r3, [r3, #12]
 800eff8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f006:	4bb4      	ldr	r3, [pc, #720]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f008:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f00c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f016:	2301      	movs	r3, #1
 800f018:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f01c:	4aaf      	ldr	r2, [pc, #700]	@ (800f2dc <ProcessRadioRxDone+0x30c>)
 800f01e:	7813      	ldrb	r3, [r2, #0]
 800f020:	f36f 0300 	bfc	r3, #0, #1
 800f024:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f026:	4bae      	ldr	r3, [pc, #696]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800f02e:	4aac      	ldr	r2, [pc, #688]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f030:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800f034:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800f038:	4aa9      	ldr	r2, [pc, #676]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f03a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f03e:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f042:	4ba7      	ldr	r3, [pc, #668]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f044:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800f048:	4ba5      	ldr	r3, [pc, #660]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f04a:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800f04e:	4ba4      	ldr	r3, [pc, #656]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800f056:	4ba2      	ldr	r3, [pc, #648]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f058:	2200      	movs	r2, #0
 800f05a:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800f05e:	4ba0      	ldr	r3, [pc, #640]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f060:	2200      	movs	r2, #0
 800f062:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800f066:	4b9e      	ldr	r3, [pc, #632]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f068:	2200      	movs	r2, #0
 800f06a:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800f06e:	4b9c      	ldr	r3, [pc, #624]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f070:	2200      	movs	r2, #0
 800f072:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800f076:	4b9a      	ldr	r3, [pc, #616]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800f07e:	4b98      	ldr	r3, [pc, #608]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f080:	2200      	movs	r2, #0
 800f082:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f086:	4b96      	ldr	r3, [pc, #600]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f088:	2200      	movs	r2, #0
 800f08a:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f08e:	4b94      	ldr	r3, [pc, #592]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800f096:	4b92      	ldr	r3, [pc, #584]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f098:	2200      	movs	r2, #0
 800f09a:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f09e:	4b90      	ldr	r3, [pc, #576]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f0a6:	4b8e      	ldr	r3, [pc, #568]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f0ae:	4b8d      	ldr	r3, [pc, #564]	@ (800f2e4 <ProcessRadioRxDone+0x314>)
 800f0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b2:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f0b4:	4b8a      	ldr	r3, [pc, #552]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f0b6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d102      	bne.n	800f0c4 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f0be:	488a      	ldr	r0, [pc, #552]	@ (800f2e8 <ProcessRadioRxDone+0x318>)
 800f0c0:	f00d f810 	bl	801c0e4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f0c4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800f0ce:	f004 fcdb 	bl	8013a88 <LoRaMacClassBRxBeacon>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00b      	beq.n	800f0f0 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f0d8:	4a81      	ldr	r2, [pc, #516]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f0da:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800f0de:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f0e2:	4a7f      	ldr	r2, [pc, #508]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f0e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f0e8:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800f0ec:	f000 bc22 	b.w	800f934 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f0f0:	4b79      	ldr	r3, [pc, #484]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f0f2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d11e      	bne.n	800f138 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f0fa:	f004 fcd8 	bl	8013aae <LoRaMacClassBIsPingExpected>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00a      	beq.n	800f11a <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f104:	2000      	movs	r0, #0
 800f106:	f004 fc89 	bl	8013a1c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f10a:	2000      	movs	r0, #0
 800f10c:	f004 fcaa 	bl	8013a64 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f110:	4b73      	ldr	r3, [pc, #460]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f112:	2204      	movs	r2, #4
 800f114:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800f118:	e00e      	b.n	800f138 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f11a:	f004 fccf 	bl	8013abc <LoRaMacClassBIsMulticastExpected>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d009      	beq.n	800f138 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f124:	2000      	movs	r0, #0
 800f126:	f004 fc83 	bl	8013a30 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f12a:	2000      	movs	r0, #0
 800f12c:	f004 fca3 	bl	8013a76 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f130:	4b6b      	ldr	r3, [pc, #428]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f132:	2205      	movs	r2, #5
 800f134:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f138:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800f142:	461a      	mov	r2, r3
 800f144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f148:	4413      	add	r3, r2
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800f150:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f154:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	3b01      	subs	r3, #1
 800f15c:	2b06      	cmp	r3, #6
 800f15e:	f200 83bd 	bhi.w	800f8dc <ProcessRadioRxDone+0x90c>
 800f162:	a201      	add	r2, pc, #4	@ (adr r2, 800f168 <ProcessRadioRxDone+0x198>)
 800f164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f168:	0800f185 	.word	0x0800f185
 800f16c:	0800f8dd 	.word	0x0800f8dd
 800f170:	0800f319 	.word	0x0800f319
 800f174:	0800f8dd 	.word	0x0800f8dd
 800f178:	0800f311 	.word	0x0800f311
 800f17c:	0800f8dd 	.word	0x0800f8dd
 800f180:	0800f86f 	.word	0x0800f86f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f184:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f188:	2b10      	cmp	r3, #16
 800f18a:	d806      	bhi.n	800f19a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f18c:	4b54      	ldr	r3, [pc, #336]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f194:	f7ff fef6 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f198:	e3cc      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800f19a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f19e:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800f1a0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f1a8:	4b4b      	ldr	r3, [pc, #300]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f1aa:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1b2:	4b4b      	ldr	r3, [pc, #300]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f1ba:	f7ff fee3 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f1be:	e3b9      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f1c0:	f7fe f876 	bl	800d2b0 <SecureElementGetJoinEui>
 800f1c4:	4601      	mov	r1, r0
 800f1c6:	f107 030c 	add.w	r3, r7, #12
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	20ff      	movs	r0, #255	@ 0xff
 800f1ce:	f005 fe2d 	bl	8014e2c <LoRaMacCryptoHandleJoinAccept>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f1d8:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f040 8085 	bne.w	800f2ec <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f1e2:	7d7b      	ldrb	r3, [r7, #21]
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	4b3c      	ldr	r3, [pc, #240]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f1e8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f1ec:	4b3a      	ldr	r3, [pc, #232]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f1ee:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800f1f2:	7dbb      	ldrb	r3, [r7, #22]
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	4a37      	ldr	r2, [pc, #220]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f1fa:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f1fe:	4b36      	ldr	r3, [pc, #216]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f200:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800f204:	7dfb      	ldrb	r3, [r7, #23]
 800f206:	041b      	lsls	r3, r3, #16
 800f208:	4313      	orrs	r3, r2
 800f20a:	4a33      	ldr	r2, [pc, #204]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f20c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	4a31      	ldr	r2, [pc, #196]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f214:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f218:	7f3b      	ldrb	r3, [r7, #28]
 800f21a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	461a      	mov	r2, r3
 800f222:	4b2d      	ldr	r3, [pc, #180]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f224:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f228:	7f3b      	ldrb	r3, [r7, #28]
 800f22a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	461a      	mov	r2, r3
 800f232:	4b29      	ldr	r3, [pc, #164]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f234:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f238:	7f3b      	ldrb	r3, [r7, #28]
 800f23a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	461a      	mov	r2, r3
 800f242:	4b25      	ldr	r3, [pc, #148]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f244:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f248:	7f7b      	ldrb	r3, [r7, #29]
 800f24a:	461a      	mov	r2, r3
 800f24c:	4b22      	ldr	r3, [pc, #136]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f24e:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f250:	4b21      	ldr	r3, [pc, #132]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f258:	4b1f      	ldr	r3, [pc, #124]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f25a:	2201      	movs	r2, #1
 800f25c:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f25e:	4b1e      	ldr	r3, [pc, #120]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f266:	fb02 f303 	mul.w	r3, r2, r3
 800f26a:	4a1b      	ldr	r2, [pc, #108]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f26c:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f26e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f272:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f276:	4a18      	ldr	r2, [pc, #96]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f278:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f27a:	4b17      	ldr	r3, [pc, #92]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f282:	f107 030c 	add.w	r3, r7, #12
 800f286:	3312      	adds	r3, #18
 800f288:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f28a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	3b11      	subs	r3, #17
 800f292:	b2db      	uxtb	r3, r3
 800f294:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f298:	4b11      	ldr	r3, [pc, #68]	@ (800f2e0 <ProcessRadioRxDone+0x310>)
 800f29a:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800f29e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f2a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2a8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f006 fb84 	bl	80159bc <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f2b4:	4b08      	ldr	r3, [pc, #32]	@ (800f2d8 <ProcessRadioRxDone+0x308>)
 800f2b6:	2202      	movs	r2, #2
 800f2b8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f2bc:	2001      	movs	r0, #1
 800f2be:	f005 f8dd 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01b      	beq.n	800f300 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	f005 f84a 	bl	8014364 <LoRaMacConfirmQueueSetStatus>
 800f2d0:	e016      	b.n	800f300 <ProcessRadioRxDone+0x330>
 800f2d2:	bf00      	nop
 800f2d4:	20001998 	.word	0x20001998
 800f2d8:	20000e08 	.word	0x20000e08
 800f2dc:	20001990 	.word	0x20001990
 800f2e0:	200008e8 	.word	0x200008e8
 800f2e4:	08020450 	.word	0x08020450
 800f2e8:	20000c80 	.word	0x20000c80
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f2ec:	2001      	movs	r0, #1
 800f2ee:	f005 f8c5 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d003      	beq.n	800f300 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	2007      	movs	r0, #7
 800f2fc:	f005 f832 	bl	8014364 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f300:	4ab9      	ldr	r2, [pc, #740]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f302:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f306:	f043 0308 	orr.w	r3, r3, #8
 800f30a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800f30e:	e2ec      	b.n	800f8ea <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f310:	4bb5      	ldr	r3, [pc, #724]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f312:	2201      	movs	r2, #1
 800f314:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f318:	4bb4      	ldr	r3, [pc, #720]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f31a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800f31e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f322:	4bb1      	ldr	r3, [pc, #708]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f324:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800f328:	b25b      	sxtb	r3, r3
 800f32a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f32e:	230d      	movs	r3, #13
 800f330:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f334:	4bad      	ldr	r3, [pc, #692]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f336:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f33e:	230e      	movs	r3, #14
 800f340:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f344:	4ba9      	ldr	r3, [pc, #676]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f34a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800f34e:	4611      	mov	r1, r2
 800f350:	4618      	mov	r0, r3
 800f352:	f006 fae1 	bl	8015918 <RegionGetPhyParam>
 800f356:	4603      	mov	r3, r0
 800f358:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f35a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f35e:	3b0d      	subs	r3, #13
 800f360:	b29b      	uxth	r3, r3
 800f362:	b21b      	sxth	r3, r3
 800f364:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f368:	b21a      	sxth	r2, r3
 800f36a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f36c:	b21b      	sxth	r3, r3
 800f36e:	429a      	cmp	r2, r3
 800f370:	dc03      	bgt.n	800f37a <ProcessRadioRxDone+0x3aa>
 800f372:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f376:	2b0b      	cmp	r3, #11
 800f378:	d806      	bhi.n	800f388 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f37a:	4b9b      	ldr	r3, [pc, #620]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f382:	f7ff fdff 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f386:	e2d5      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800f388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f38c:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800f38e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f392:	b2db      	uxtb	r3, r3
 800f394:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f398:	4b95      	ldr	r3, [pc, #596]	@ (800f5f0 <ProcessRadioRxDone+0x620>)
 800f39a:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f39c:	23ff      	movs	r3, #255	@ 0xff
 800f39e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f3a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f006 f83d 	bl	8015426 <LoRaMacParserData>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d006      	beq.n	800f3c0 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3b2:	4b8d      	ldr	r3, [pc, #564]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f3ba:	f7ff fde3 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f3be:	e2b9      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f3c0:	4b8a      	ldr	r3, [pc, #552]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f3c2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d132      	bne.n	800f430 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f3ca:	f004 fb70 	bl	8013aae <LoRaMacClassBIsPingExpected>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d014      	beq.n	800f3fe <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	f004 fb21 	bl	8013a1c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f3da:	2000      	movs	r0, #0
 800f3dc:	f004 fb42 	bl	8013a64 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f3e0:	4b81      	ldr	r3, [pc, #516]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f3e2:	2204      	movs	r2, #4
 800f3e4:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f3e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3ea:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f3ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	f004 fbe2 	bl	8013bc0 <LoRaMacClassBSetFPendingBit>
 800f3fc:	e018      	b.n	800f430 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f3fe:	f004 fb5d 	bl	8013abc <LoRaMacClassBIsMulticastExpected>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d013      	beq.n	800f430 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f408:	2000      	movs	r0, #0
 800f40a:	f004 fb11 	bl	8013a30 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f40e:	2000      	movs	r0, #0
 800f410:	f004 fb31 	bl	8013a76 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f414:	4b74      	ldr	r3, [pc, #464]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f416:	2205      	movs	r2, #5
 800f418:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f41c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f41e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f422:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f426:	b2db      	uxtb	r3, r3
 800f428:	4619      	mov	r1, r3
 800f42a:	4610      	mov	r0, r2
 800f42c:	f004 fbc8 	bl	8013bc0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f432:	4a6d      	ldr	r2, [pc, #436]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f434:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f438:	1dba      	adds	r2, r7, #6
 800f43a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f43e:	4611      	mov	r1, r2
 800f440:	4618      	mov	r0, r3
 800f442:	f002 fd1f 	bl	8011e84 <DetermineFrameType>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f44c:	4b66      	ldr	r3, [pc, #408]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f454:	f7ff fd96 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f458:	e26c      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f464:	2300      	movs	r3, #0
 800f466:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800f46a:	e049      	b.n	800f500 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f46c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f470:	4a5e      	ldr	r2, [pc, #376]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f472:	212c      	movs	r1, #44	@ 0x2c
 800f474:	fb01 f303 	mul.w	r3, r1, r3
 800f478:	4413      	add	r3, r2
 800f47a:	33dc      	adds	r3, #220	@ 0xdc
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f480:	429a      	cmp	r2, r3
 800f482:	d138      	bne.n	800f4f6 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f484:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f488:	4a58      	ldr	r2, [pc, #352]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f48a:	212c      	movs	r1, #44	@ 0x2c
 800f48c:	fb01 f303 	mul.w	r3, r1, r3
 800f490:	4413      	add	r3, r2
 800f492:	33da      	adds	r3, #218	@ 0xda
 800f494:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f496:	2b00      	cmp	r3, #0
 800f498:	d02d      	beq.n	800f4f6 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800f49a:	2301      	movs	r3, #1
 800f49c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f4a0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f4a4:	4a51      	ldr	r2, [pc, #324]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f4a6:	212c      	movs	r1, #44	@ 0x2c
 800f4a8:	fb01 f303 	mul.w	r3, r1, r3
 800f4ac:	4413      	add	r3, r2
 800f4ae:	33db      	adds	r3, #219	@ 0xdb
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f4b6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f4ba:	4a4c      	ldr	r2, [pc, #304]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f4bc:	212c      	movs	r1, #44	@ 0x2c
 800f4be:	fb01 f303 	mul.w	r3, r1, r3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	33f8      	adds	r3, #248	@ 0xf8
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f4cc:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f4d0:	4a46      	ldr	r2, [pc, #280]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f4d2:	212c      	movs	r1, #44	@ 0x2c
 800f4d4:	fb01 f303 	mul.w	r3, r1, r3
 800f4d8:	4413      	add	r3, r2
 800f4da:	33dc      	adds	r3, #220	@ 0xdc
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f4e2:	4b42      	ldr	r3, [pc, #264]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f4e4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	d10e      	bne.n	800f50a <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f4ec:	4b3e      	ldr	r3, [pc, #248]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f4ee:	2203      	movs	r2, #3
 800f4f0:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800f4f4:	e009      	b.n	800f50a <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f4f6:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800f500:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f504:	2b00      	cmp	r3, #0
 800f506:	d0b1      	beq.n	800f46c <ProcessRadioRxDone+0x49c>
 800f508:	e000      	b.n	800f50c <ProcessRadioRxDone+0x53c>
                    break;
 800f50a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f50c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f510:	2b01      	cmp	r3, #1
 800f512:	d117      	bne.n	800f544 <ProcessRadioRxDone+0x574>
 800f514:	79bb      	ldrb	r3, [r7, #6]
 800f516:	2b03      	cmp	r3, #3
 800f518:	d10d      	bne.n	800f536 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f51a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f51e:	f003 0320 	and.w	r3, r3, #32
 800f522:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f524:	2b00      	cmp	r3, #0
 800f526:	d106      	bne.n	800f536 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f528:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f530:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f532:	2b00      	cmp	r3, #0
 800f534:	d006      	beq.n	800f544 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f536:	4b2c      	ldr	r3, [pc, #176]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f53e:	f7ff fd21 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f542:	e1f7      	b.n	800f934 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f544:	79b9      	ldrb	r1, [r7, #6]
 800f546:	4c29      	ldr	r4, [pc, #164]	@ (800f5ec <ProcessRadioRxDone+0x61c>)
 800f548:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f54c:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f550:	f107 0308 	add.w	r3, r7, #8
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	1dfb      	adds	r3, r7, #7
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800f55e:	f000 fee7 	bl	8010330 <GetFCntDown>
 800f562:	4603      	mov	r3, r0
 800f564:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f568:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d017      	beq.n	800f5a0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f570:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f574:	2b07      	cmp	r3, #7
 800f576:	d104      	bne.n	800f582 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f578:	4b1b      	ldr	r3, [pc, #108]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f57a:	2208      	movs	r2, #8
 800f57c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f580:	e003      	b.n	800f58a <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f582:	4b19      	ldr	r3, [pc, #100]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f584:	2201      	movs	r2, #1
 800f586:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	4a16      	ldr	r2, [pc, #88]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f58e:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	4a14      	ldr	r2, [pc, #80]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f596:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800f59a:	f7ff fcf3 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f59e:	e1c9      	b.n	800f934 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f5a0:	79fa      	ldrb	r2, [r7, #7]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f5a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800f5b4:	f005 fd86 	bl	80150c4 <LoRaMacCryptoUnsecureMessage>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f5be:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d016      	beq.n	800f5f4 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f5c6:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d104      	bne.n	800f5d8 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f5ce:	4b06      	ldr	r3, [pc, #24]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f5d0:	220a      	movs	r2, #10
 800f5d2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f5d6:	e003      	b.n	800f5e0 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f5d8:	4b03      	ldr	r3, [pc, #12]	@ (800f5e8 <ProcessRadioRxDone+0x618>)
 800f5da:	220b      	movs	r2, #11
 800f5dc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800f5e0:	f7ff fcd0 	bl	800ef84 <PrepareRxDoneAbort>
                return;
 800f5e4:	e1a6      	b.n	800f934 <ProcessRadioRxDone+0x964>
 800f5e6:	bf00      	nop
 800f5e8:	200008e8 	.word	0x200008e8
 800f5ec:	20000e08 	.word	0x20000e08
 800f5f0:	20000b20 	.word	0x20000b20
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f5f4:	4bb5      	ldr	r3, [pc, #724]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800f5fc:	4ab3      	ldr	r2, [pc, #716]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f5fe:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f602:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f606:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f60a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	461a      	mov	r2, r3
 800f612:	4bae      	ldr	r3, [pc, #696]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f614:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800f618:	4bac      	ldr	r3, [pc, #688]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800f620:	4baa      	ldr	r3, [pc, #680]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f622:	2200      	movs	r2, #0
 800f624:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	4aa8      	ldr	r2, [pc, #672]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f62c:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	4aa6      	ldr	r2, [pc, #664]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f634:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f638:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f63c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f640:	b2db      	uxtb	r3, r3
 800f642:	2b00      	cmp	r3, #0
 800f644:	bf14      	ite	ne
 800f646:	2301      	movne	r3, #1
 800f648:	2300      	moveq	r3, #0
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	4b9f      	ldr	r3, [pc, #636]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f64e:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f652:	4b9e      	ldr	r3, [pc, #632]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f65a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f65e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f662:	b2db      	uxtb	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	bf14      	ite	ne
 800f668:	2301      	movne	r3, #1
 800f66a:	2300      	moveq	r3, #0
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	4b97      	ldr	r3, [pc, #604]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f670:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f674:	4b95      	ldr	r3, [pc, #596]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f676:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d004      	beq.n	800f688 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f67e:	4b93      	ldr	r3, [pc, #588]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f680:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f684:	2b01      	cmp	r3, #1
 800f686:	d106      	bne.n	800f696 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f688:	4b91      	ldr	r3, [pc, #580]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f68e:	4b90      	ldr	r3, [pc, #576]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f690:	2201      	movs	r2, #1
 800f692:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f696:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d104      	bne.n	800f6a8 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f69e:	4b8b      	ldr	r3, [pc, #556]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6a0:	2202      	movs	r2, #2
 800f6a2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800f6a6:	e034      	b.n	800f712 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f6a8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f6ac:	f023 031f 	bic.w	r3, r3, #31
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	2ba0      	cmp	r3, #160	@ 0xa0
 800f6b4:	d125      	bne.n	800f702 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f6b6:	4b86      	ldr	r3, [pc, #536]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f6be:	4b84      	ldr	r3, [pc, #528]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f6c0:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d102      	bne.n	800f6ce <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6ca:	4a81      	ldr	r2, [pc, #516]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f6cc:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f6ce:	4b7f      	ldr	r3, [pc, #508]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f6d6:	4b7d      	ldr	r3, [pc, #500]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6d8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d018      	beq.n	800f712 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f6e0:	4b7a      	ldr	r3, [pc, #488]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6e2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d013      	beq.n	800f712 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f6ea:	4b79      	ldr	r3, [pc, #484]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6f0:	4a76      	ldr	r2, [pc, #472]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6f2:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f6f6:	4b77      	ldr	r3, [pc, #476]	@ (800f8d4 <ProcessRadioRxDone+0x904>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a74      	ldr	r2, [pc, #464]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f6fc:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800f700:	e007      	b.n	800f712 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f702:	4b73      	ldr	r3, [pc, #460]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f704:	2200      	movs	r2, #0
 800f706:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f70a:	4b70      	ldr	r3, [pc, #448]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f712:	4b6e      	ldr	r3, [pc, #440]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f714:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f718:	4a6c      	ldr	r2, [pc, #432]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f71a:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800f71e:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800f722:	4618      	mov	r0, r3
 800f724:	f001 ff96 	bl	8011654 <RemoveMacCommands>

            switch( fType )
 800f728:	79bb      	ldrb	r3, [r7, #6]
 800f72a:	2b03      	cmp	r3, #3
 800f72c:	d873      	bhi.n	800f816 <ProcessRadioRxDone+0x846>
 800f72e:	a201      	add	r2, pc, #4	@ (adr r2, 800f734 <ProcessRadioRxDone+0x764>)
 800f730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f734:	0800f745 	.word	0x0800f745
 800f738:	0800f795 	.word	0x0800f795
 800f73c:	0800f7cb 	.word	0x0800f7cb
 800f740:	0800f7f1 	.word	0x0800f7f1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f744:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f748:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	461c      	mov	r4, r3
 800f750:	4b5e      	ldr	r3, [pc, #376]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f752:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f756:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f75a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f75e:	f102 0010 	add.w	r0, r2, #16
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	460b      	mov	r3, r1
 800f766:	4622      	mov	r2, r4
 800f768:	2100      	movs	r1, #0
 800f76a:	f000 ff45 	bl	80105f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f76e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f772:	4b56      	ldr	r3, [pc, #344]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f774:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f77a:	4a54      	ldr	r2, [pc, #336]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f77c:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f780:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f784:	4b51      	ldr	r3, [pc, #324]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f786:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f78a:	4b50      	ldr	r3, [pc, #320]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800f792:	e047      	b.n	800f824 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f794:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f798:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	461c      	mov	r4, r3
 800f7a0:	4b4a      	ldr	r3, [pc, #296]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7a2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f7a6:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f7aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f7ae:	f102 0010 	add.w	r0, r2, #16
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	f000 ff1d 	bl	80105f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f7be:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f7c2:	4b42      	ldr	r3, [pc, #264]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7c4:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800f7c8:	e02c      	b.n	800f824 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f7ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f7cc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f7d0:	4b3e      	ldr	r3, [pc, #248]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7d2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f7d6:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	2100      	movs	r1, #0
 800f7e0:	f000 ff0a 	bl	80105f8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f7e4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f7e8:	4b38      	ldr	r3, [pc, #224]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7ea:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800f7ee:	e019      	b.n	800f824 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f7f0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f7f4:	4b35      	ldr	r3, [pc, #212]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7f6:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f7fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7fc:	4a33      	ldr	r2, [pc, #204]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f7fe:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f802:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f806:	4b31      	ldr	r3, [pc, #196]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f808:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f80c:	4b2f      	ldr	r3, [pc, #188]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800f814:	e006      	b.n	800f824 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f816:	4b2d      	ldr	r3, [pc, #180]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f818:	2201      	movs	r2, #1
 800f81a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800f81e:	f7ff fbb1 	bl	800ef84 <PrepareRxDoneAbort>
                    break;
 800f822:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f824:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f828:	2be0      	cmp	r3, #224	@ 0xe0
 800f82a:	d118      	bne.n	800f85e <ProcessRadioRxDone+0x88e>
 800f82c:	4b28      	ldr	r3, [pc, #160]	@ (800f8d0 <ProcessRadioRxDone+0x900>)
 800f82e:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800f832:	f083 0301 	eor.w	r3, r3, #1
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d010      	beq.n	800f85e <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f83c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f840:	4b22      	ldr	r3, [pc, #136]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f842:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800f846:	4b21      	ldr	r3, [pc, #132]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800f84e:	4b1f      	ldr	r3, [pc, #124]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800f856:	4b1d      	ldr	r3, [pc, #116]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f85e:	4a1b      	ldr	r2, [pc, #108]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f860:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f864:	f043 0302 	orr.w	r3, r3, #2
 800f868:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800f86c:	e03d      	b.n	800f8ea <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f86e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f872:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f876:	18d1      	adds	r1, r2, r3
 800f878:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	b29b      	uxth	r3, r3
 800f886:	461a      	mov	r2, r3
 800f888:	4813      	ldr	r0, [pc, #76]	@ (800f8d8 <ProcessRadioRxDone+0x908>)
 800f88a:	f008 fae6 	bl	8017e5a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f88e:	4b0f      	ldr	r3, [pc, #60]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f890:	2203      	movs	r2, #3
 800f892:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f896:	4b0d      	ldr	r3, [pc, #52]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f89e:	4b0b      	ldr	r3, [pc, #44]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f8a0:	4a0d      	ldr	r2, [pc, #52]	@ (800f8d8 <ProcessRadioRxDone+0x908>)
 800f8a2:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f8a6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b05      	ldr	r3, [pc, #20]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f8b6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f8ba:	4a04      	ldr	r2, [pc, #16]	@ (800f8cc <ProcessRadioRxDone+0x8fc>)
 800f8bc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f8c0:	f043 0302 	orr.w	r3, r3, #2
 800f8c4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800f8c8:	e00f      	b.n	800f8ea <ProcessRadioRxDone+0x91a>
 800f8ca:	bf00      	nop
 800f8cc:	200008e8 	.word	0x200008e8
 800f8d0:	20000e08 	.word	0x20000e08
 800f8d4:	20001998 	.word	0x20001998
 800f8d8:	20000b20 	.word	0x20000b20
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8dc:	4b17      	ldr	r3, [pc, #92]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800f8e4:	f7ff fb4e 	bl	800ef84 <PrepareRxDoneAbort>
            break;
 800f8e8:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f8ea:	4b14      	ldr	r3, [pc, #80]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f8ec:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d004      	beq.n	800f8fe <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f8f4:	4b11      	ldr	r3, [pc, #68]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f8f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d10c      	bne.n	800f918 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800f8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f900:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f904:	2b00      	cmp	r3, #0
 800f906:	d007      	beq.n	800f918 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f908:	4b0c      	ldr	r3, [pc, #48]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f90a:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d002      	beq.n	800f918 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f912:	2000      	movs	r0, #0
 800f914:	f000 fce4 	bl	80102e0 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f918:	4b08      	ldr	r3, [pc, #32]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f91a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d006      	beq.n	800f930 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f922:	4a06      	ldr	r2, [pc, #24]	@ (800f93c <ProcessRadioRxDone+0x96c>)
 800f924:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f928:	f043 0320 	orr.w	r3, r3, #32
 800f92c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f930:	f7ff fa82 	bl	800ee38 <UpdateRxSlotIdleState>
}
 800f934:	3794      	adds	r7, #148	@ 0x94
 800f936:	46bd      	mov	sp, r7
 800f938:	bd90      	pop	{r4, r7, pc}
 800f93a:	bf00      	nop
 800f93c:	200008e8 	.word	0x200008e8

0800f940 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f944:	4b11      	ldr	r3, [pc, #68]	@ (800f98c <ProcessRadioTxTimeout+0x4c>)
 800f946:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d002      	beq.n	800f954 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f94e:	4b10      	ldr	r3, [pc, #64]	@ (800f990 <ProcessRadioTxTimeout+0x50>)
 800f950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f952:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f954:	f7ff fa70 	bl	800ee38 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f958:	4b0e      	ldr	r3, [pc, #56]	@ (800f994 <ProcessRadioTxTimeout+0x54>)
 800f95a:	2202      	movs	r2, #2
 800f95c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f960:	2002      	movs	r0, #2
 800f962:	f004 fd57 	bl	8014414 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f966:	4b0b      	ldr	r3, [pc, #44]	@ (800f994 <ProcessRadioTxTimeout+0x54>)
 800f968:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d003      	beq.n	800f978 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800f970:	4b08      	ldr	r3, [pc, #32]	@ (800f994 <ProcessRadioTxTimeout+0x54>)
 800f972:	2201      	movs	r2, #1
 800f974:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f978:	4a06      	ldr	r2, [pc, #24]	@ (800f994 <ProcessRadioTxTimeout+0x54>)
 800f97a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f97e:	f043 0320 	orr.w	r3, r3, #32
 800f982:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800f986:	bf00      	nop
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20000e08 	.word	0x20000e08
 800f990:	08020450 	.word	0x08020450
 800f994:	200008e8 	.word	0x200008e8

0800f998 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	460a      	mov	r2, r1
 800f9a2:	71fb      	strb	r3, [r7, #7]
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f9ac:	4b3d      	ldr	r3, [pc, #244]	@ (800faa4 <HandleRadioRxErrorTimeout+0x10c>)
 800f9ae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f9b2:	2b02      	cmp	r3, #2
 800f9b4:	d002      	beq.n	800f9bc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f9b6:	4b3c      	ldr	r3, [pc, #240]	@ (800faa8 <HandleRadioRxErrorTimeout+0x110>)
 800f9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9ba:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f9bc:	f004 f870 	bl	8013aa0 <LoRaMacClassBIsBeaconExpected>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d007      	beq.n	800f9d6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f9c6:	2002      	movs	r0, #2
 800f9c8:	f004 f81e 	bl	8013a08 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	f004 f840 	bl	8013a52 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f9d6:	4b33      	ldr	r3, [pc, #204]	@ (800faa4 <HandleRadioRxErrorTimeout+0x10c>)
 800f9d8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d119      	bne.n	800fa14 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f9e0:	f004 f865 	bl	8013aae <LoRaMacClassBIsPingExpected>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d007      	beq.n	800f9fa <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	f004 f816 	bl	8013a1c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f004 f837 	bl	8013a64 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f9fa:	f004 f85f 	bl	8013abc <LoRaMacClassBIsMulticastExpected>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d007      	beq.n	800fa14 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa04:	2000      	movs	r0, #0
 800fa06:	f004 f813 	bl	8013a30 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	f004 f833 	bl	8013a76 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fa10:	2301      	movs	r3, #1
 800fa12:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	f083 0301 	eor.w	r3, r3, #1
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d03b      	beq.n	800fa98 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fa20:	4b22      	ldr	r3, [pc, #136]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d122      	bne.n	800fa70 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fa2a:	4b20      	ldr	r3, [pc, #128]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa2c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d003      	beq.n	800fa3c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fa34:	4a1d      	ldr	r2, [pc, #116]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fa3c:	79fb      	ldrb	r3, [r7, #7]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f004 fce8 	bl	8014414 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fa44:	4b17      	ldr	r3, [pc, #92]	@ (800faa4 <HandleRadioRxErrorTimeout+0x10c>)
 800fa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f00c fc77 	bl	801c33c <UTIL_TIMER_GetElapsedTime>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	4b16      	ldr	r3, [pc, #88]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa52:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d31e      	bcc.n	800fa98 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fa5a:	4815      	ldr	r0, [pc, #84]	@ (800fab0 <HandleRadioRxErrorTimeout+0x118>)
 800fa5c:	f00c fb42 	bl	801c0e4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fa60:	4a12      	ldr	r2, [pc, #72]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa62:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fa66:	f043 0320 	orr.w	r3, r3, #32
 800fa6a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800fa6e:	e013      	b.n	800fa98 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fa70:	4b0e      	ldr	r3, [pc, #56]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa72:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d003      	beq.n	800fa82 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fa7a:	4a0c      	ldr	r2, [pc, #48]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa7c:	79bb      	ldrb	r3, [r7, #6]
 800fa7e:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fa82:	79bb      	ldrb	r3, [r7, #6]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f004 fcc5 	bl	8014414 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800fa8a:	4a08      	ldr	r2, [pc, #32]	@ (800faac <HandleRadioRxErrorTimeout+0x114>)
 800fa8c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fa90:	f043 0320 	orr.w	r3, r3, #32
 800fa94:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fa98:	f7ff f9ce 	bl	800ee38 <UpdateRxSlotIdleState>
}
 800fa9c:	bf00      	nop
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20000e08 	.word	0x20000e08
 800faa8:	08020450 	.word	0x08020450
 800faac:	200008e8 	.word	0x200008e8
 800fab0:	20000c80 	.word	0x20000c80

0800fab4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fab8:	2106      	movs	r1, #6
 800faba:	2005      	movs	r0, #5
 800fabc:	f7ff ff6c 	bl	800f998 <HandleRadioRxErrorTimeout>
}
 800fac0:	bf00      	nop
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fac8:	2104      	movs	r1, #4
 800faca:	2003      	movs	r0, #3
 800facc:	f7ff ff64 	bl	800f998 <HandleRadioRxErrorTimeout>
}
 800fad0:	bf00      	nop
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fada:	f3ef 8310 	mrs	r3, PRIMASK
 800fade:	607b      	str	r3, [r7, #4]
  return(result);
 800fae0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fae2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fae4:	b672      	cpsid	i
}
 800fae6:	bf00      	nop
    events = LoRaMacRadioEvents;
 800fae8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb60 <LoRaMacHandleIrqEvents+0x8c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800faee:	4b1c      	ldr	r3, [pc, #112]	@ (800fb60 <LoRaMacHandleIrqEvents+0x8c>)
 800faf0:	2200      	movs	r2, #0
 800faf2:	601a      	str	r2, [r3, #0]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	f383 8810 	msr	PRIMASK, r3
}
 800fafe:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d027      	beq.n	800fb56 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800fb06:	783b      	ldrb	r3, [r7, #0]
 800fb08:	f003 0320 	and.w	r3, r3, #32
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800fb12:	f7ff f9a9 	bl	800ee68 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fb16:	783b      	ldrb	r3, [r7, #0]
 800fb18:	f003 0310 	and.w	r3, r3, #16
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d001      	beq.n	800fb26 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800fb22:	f7ff fa55 	bl	800efd0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fb26:	783b      	ldrb	r3, [r7, #0]
 800fb28:	f003 0308 	and.w	r3, r3, #8
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800fb32:	f7ff ff05 	bl	800f940 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fb36:	783b      	ldrb	r3, [r7, #0]
 800fb38:	f003 0304 	and.w	r3, r3, #4
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800fb42:	f7ff ffb7 	bl	800fab4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fb46:	783b      	ldrb	r3, [r7, #0]
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800fb52:	f7ff ffb7 	bl	800fac4 <ProcessRadioRxTimeout>
        }
    }
}
 800fb56:	bf00      	nop
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20001990 	.word	0x20001990

0800fb64 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800fb64:	b480      	push	{r7}
 800fb66:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800fb68:	4b0c      	ldr	r3, [pc, #48]	@ (800fb9c <LoRaMacIsBusy+0x38>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 0301 	and.w	r3, r3, #1
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <LoRaMacIsBusy+0x16>
    {
        return true;
 800fb76:	2301      	movs	r3, #1
 800fb78:	e00c      	b.n	800fb94 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fb7a:	4b09      	ldr	r3, [pc, #36]	@ (800fba0 <LoRaMacIsBusy+0x3c>)
 800fb7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fb84:	4b06      	ldr	r3, [pc, #24]	@ (800fba0 <LoRaMacIsBusy+0x3c>)
 800fb86:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d101      	bne.n	800fb92 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e000      	b.n	800fb94 <LoRaMacIsBusy+0x30>
    }
    return true;
 800fb92:	2301      	movs	r3, #1
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bc80      	pop	{r7}
 800fb9a:	4770      	bx	lr
 800fb9c:	20001990 	.word	0x20001990
 800fba0:	200008e8 	.word	0x200008e8

0800fba4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800fbae:	4a04      	ldr	r2, [pc, #16]	@ (800fbc0 <LoRaMacEnableRequests+0x1c>)
 800fbb0:	79fb      	ldrb	r3, [r7, #7]
 800fbb2:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bc80      	pop	{r7}
 800fbbe:	4770      	bx	lr
 800fbc0:	200008e8 	.word	0x200008e8

0800fbc4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800fbca:	4b2c      	ldr	r3, [pc, #176]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fbcc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fbd0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800fbd2:	4b2a      	ldr	r3, [pc, #168]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fbd4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d14a      	bne.n	800fc72 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fbdc:	4b27      	ldr	r3, [pc, #156]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fbde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fbe2:	f003 0301 	and.w	r3, r3, #1
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d006      	beq.n	800fbfa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800fbec:	4a23      	ldr	r2, [pc, #140]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fbee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fbf2:	f36f 0300 	bfc	r3, #0, #1
 800fbf6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fbfa:	4b20      	ldr	r3, [pc, #128]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fbfc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fc00:	f003 0304 	and.w	r3, r3, #4
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d006      	beq.n	800fc18 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800fc0a:	4a1c      	ldr	r2, [pc, #112]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fc0c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc10:	f36f 0382 	bfc	r3, #2, #1
 800fc14:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fc18:	2001      	movs	r0, #1
 800fc1a:	f7ff ffc3 	bl	800fba4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800fc1e:	793b      	ldrb	r3, [r7, #4]
 800fc20:	f003 0301 	and.w	r3, r3, #1
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d005      	beq.n	800fc36 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800fc2a:	4b14      	ldr	r3, [pc, #80]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fc2c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4813      	ldr	r0, [pc, #76]	@ (800fc80 <LoRaMacHandleRequestEvents+0xbc>)
 800fc34:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800fc36:	793b      	ldrb	r3, [r7, #4]
 800fc38:	f003 0304 	and.w	r3, r3, #4
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00e      	beq.n	800fc60 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800fc42:	4810      	ldr	r0, [pc, #64]	@ (800fc84 <LoRaMacHandleRequestEvents+0xc0>)
 800fc44:	f004 fc34 	bl	80144b0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800fc48:	f004 fc7e 	bl	8014548 <LoRaMacConfirmQueueGetCnt>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d006      	beq.n	800fc60 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800fc52:	4a0a      	ldr	r2, [pc, #40]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fc54:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc58:	f043 0304 	orr.w	r3, r3, #4
 800fc5c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800fc60:	f003 ff4a 	bl	8013af8 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800fc64:	4a05      	ldr	r2, [pc, #20]	@ (800fc7c <LoRaMacHandleRequestEvents+0xb8>)
 800fc66:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc6a:	f36f 1345 	bfc	r3, #5, #1
 800fc6e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800fc72:	bf00      	nop
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	200008e8 	.word	0x200008e8
 800fc80:	20000d2c 	.word	0x20000d2c
 800fc84:	20000d40 	.word	0x20000d40

0800fc88 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800fc8e:	4b07      	ldr	r3, [pc, #28]	@ (800fcac <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800fc90:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d105      	bne.n	800fca4 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800fc9c:	1dfb      	adds	r3, r7, #7
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f004 f9ec 	bl	801407c <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800fca4:	bf00      	nop
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	200008e8 	.word	0x200008e8

0800fcb0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800fcb4:	4b16      	ldr	r3, [pc, #88]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fcb6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fcba:	f003 0308 	and.w	r3, r3, #8
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00d      	beq.n	800fce0 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800fcc4:	4a12      	ldr	r2, [pc, #72]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fcc6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fcca:	f36f 03c3 	bfc	r3, #3, #1
 800fcce:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800fcd2:	4b0f      	ldr	r3, [pc, #60]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fcd4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	490e      	ldr	r1, [pc, #56]	@ (800fd14 <LoRaMacHandleIndicationEvents+0x64>)
 800fcdc:	480e      	ldr	r0, [pc, #56]	@ (800fd18 <LoRaMacHandleIndicationEvents+0x68>)
 800fcde:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fce0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fce2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fce6:	f003 0302 	and.w	r3, r3, #2
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00d      	beq.n	800fd0c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800fcf0:	4a07      	ldr	r2, [pc, #28]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fcf2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fcf6:	f36f 0341 	bfc	r3, #1, #1
 800fcfa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800fcfe:	4b04      	ldr	r3, [pc, #16]	@ (800fd10 <LoRaMacHandleIndicationEvents+0x60>)
 800fd00:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	4903      	ldr	r1, [pc, #12]	@ (800fd14 <LoRaMacHandleIndicationEvents+0x64>)
 800fd08:	4804      	ldr	r0, [pc, #16]	@ (800fd1c <LoRaMacHandleIndicationEvents+0x6c>)
 800fd0a:	4798      	blx	r3
    }
}
 800fd0c:	bf00      	nop
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	200008e8 	.word	0x200008e8
 800fd14:	20000d78 	.word	0x20000d78
 800fd18:	20000d54 	.word	0x20000d54
 800fd1c:	20000d0c 	.word	0x20000d0c

0800fd20 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fd26:	4b2a      	ldr	r3, [pc, #168]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd28:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fd2c:	f003 0301 	and.w	r3, r3, #1
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d048      	beq.n	800fdc8 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800fd36:	2300      	movs	r3, #0
 800fd38:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800fd3e:	4b24      	ldr	r3, [pc, #144]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd40:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d004      	beq.n	800fd52 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800fd48:	4b21      	ldr	r3, [pc, #132]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd4a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d104      	bne.n	800fd5c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800fd52:	f002 f8f9 	bl	8011f48 <CheckRetransUnconfirmedUplink>
 800fd56:	4603      	mov	r3, r0
 800fd58:	71fb      	strb	r3, [r7, #7]
 800fd5a:	e010      	b.n	800fd7e <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800fd5c:	4b1c      	ldr	r3, [pc, #112]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd5e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d10b      	bne.n	800fd7e <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800fd66:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd68:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d004      	beq.n	800fd7a <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800fd70:	f002 f916 	bl	8011fa0 <CheckRetransConfirmedUplink>
 800fd74:	4603      	mov	r3, r0
 800fd76:	71fb      	strb	r3, [r7, #7]
 800fd78:	e001      	b.n	800fd7e <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00d      	beq.n	800fda0 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800fd84:	4813      	ldr	r0, [pc, #76]	@ (800fdd4 <LoRaMacHandleMcpsRequest+0xb4>)
 800fd86:	f00c f9ad 	bl	801c0e4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fd8a:	4b11      	ldr	r3, [pc, #68]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd90:	f023 0320 	bic.w	r3, r3, #32
 800fd94:	4a0e      	ldr	r2, [pc, #56]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fd96:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800fd9a:	f002 f93b 	bl	8012014 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800fd9e:	e013      	b.n	800fdc8 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800fda0:	79bb      	ldrb	r3, [r7, #6]
 800fda2:	f083 0301 	eor.w	r3, r3, #1
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00d      	beq.n	800fdc8 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800fdac:	4a08      	ldr	r2, [pc, #32]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fdae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fdb2:	f36f 1345 	bfc	r3, #5, #1
 800fdb6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800fdba:	4b05      	ldr	r3, [pc, #20]	@ (800fdd0 <LoRaMacHandleMcpsRequest+0xb0>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	f000 f9c8 	bl	8010158 <OnTxDelayedTimerEvent>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	200008e8 	.word	0x200008e8
 800fdd4:	20000c50 	.word	0x20000c50

0800fdd8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fddc:	4b18      	ldr	r3, [pc, #96]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fdde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fde2:	f003 0304 	and.w	r3, r3, #4
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d026      	beq.n	800fe3a <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fdec:	2001      	movs	r0, #1
 800fdee:	f004 fb45 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d012      	beq.n	800fe1e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	f004 fae1 	bl	80143c0 <LoRaMacConfirmQueueGetStatus>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d103      	bne.n	800fe0c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800fe04:	4b0e      	ldr	r3, [pc, #56]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fe0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fe0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe12:	f023 0302 	bic.w	r3, r3, #2
 800fe16:	4a0a      	ldr	r2, [pc, #40]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fe18:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800fe1c:	e00d      	b.n	800fe3a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800fe1e:	2005      	movs	r0, #5
 800fe20:	f004 fb2c 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d007      	beq.n	800fe3a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fe2a:	4b05      	ldr	r3, [pc, #20]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fe2c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe30:	f023 0302 	bic.w	r3, r3, #2
 800fe34:	4a02      	ldr	r2, [pc, #8]	@ (800fe40 <LoRaMacHandleMlmeRequest+0x68>)
 800fe36:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800fe3a:	bf00      	nop
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	200008e8 	.word	0x200008e8

0800fe44 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fe48:	200b      	movs	r0, #11
 800fe4a:	f004 fb17 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d019      	beq.n	800fe88 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800fe54:	4b0e      	ldr	r3, [pc, #56]	@ (800fe90 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fe56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d111      	bne.n	800fe88 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fe64:	4b0a      	ldr	r3, [pc, #40]	@ (800fe90 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fe66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fe6a:	f003 0304 	and.w	r3, r3, #4
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d009      	beq.n	800fe88 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fe74:	4b06      	ldr	r3, [pc, #24]	@ (800fe90 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fe76:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe7a:	f023 0302 	bic.w	r3, r3, #2
 800fe7e:	4a04      	ldr	r2, [pc, #16]	@ (800fe90 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fe80:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800fe84:	2301      	movs	r3, #1
 800fe86:	e000      	b.n	800fe8a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	200008e8 	.word	0x200008e8

0800fe94 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	71fb      	strb	r3, [r7, #7]
 800fe9e:	460b      	mov	r3, r1
 800fea0:	71bb      	strb	r3, [r7, #6]
 800fea2:	4613      	mov	r3, r2
 800fea4:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00a      	beq.n	800fec2 <CheckForMinimumAbpDatarate+0x2e>
 800feac:	79bb      	ldrb	r3, [r7, #6]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d107      	bne.n	800fec2 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800feb2:	797b      	ldrb	r3, [r7, #5]
 800feb4:	f083 0301 	eor.w	r3, r3, #1
 800feb8:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800febe:	2301      	movs	r3, #1
 800fec0:	e000      	b.n	800fec4 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800fec2:	2300      	movs	r3, #0
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	bc80      	pop	{r7}
 800fecc:	4770      	bx	lr
	...

0800fed0 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fed4:	4b0d      	ldr	r3, [pc, #52]	@ (800ff0c <LoRaMacCheckForRxAbort+0x3c>)
 800fed6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800feda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00f      	beq.n	800ff02 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fee2:	4b0a      	ldr	r3, [pc, #40]	@ (800ff0c <LoRaMacCheckForRxAbort+0x3c>)
 800fee4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800feec:	4a07      	ldr	r2, [pc, #28]	@ (800ff0c <LoRaMacCheckForRxAbort+0x3c>)
 800feee:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fef2:	4b06      	ldr	r3, [pc, #24]	@ (800ff0c <LoRaMacCheckForRxAbort+0x3c>)
 800fef4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fef8:	f023 0302 	bic.w	r3, r3, #2
 800fefc:	4a03      	ldr	r2, [pc, #12]	@ (800ff0c <LoRaMacCheckForRxAbort+0x3c>)
 800fefe:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800ff02:	bf00      	nop
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bc80      	pop	{r7}
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	200008e8 	.word	0x200008e8

0800ff10 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800ff20:	4b50      	ldr	r3, [pc, #320]	@ (8010064 <LoRaMacHandleNvm+0x154>)
 800ff22:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 8098 	bne.w	801005c <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2124      	movs	r1, #36	@ 0x24
 800ff30:	4618      	mov	r0, r3
 800ff32:	f007 ffe7 	bl	8017f04 <Crc32>
 800ff36:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d006      	beq.n	800ff50 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ff48:	89fb      	ldrh	r3, [r7, #14]
 800ff4a:	f043 0301 	orr.w	r3, r3, #1
 800ff4e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	3328      	adds	r3, #40	@ 0x28
 800ff54:	2114      	movs	r1, #20
 800ff56:	4618      	mov	r0, r3
 800ff58:	f007 ffd4 	bl	8017f04 <Crc32>
 800ff5c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d006      	beq.n	800ff76 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ff6e:	89fb      	ldrh	r3, [r7, #14]
 800ff70:	f043 0302 	orr.w	r3, r3, #2
 800ff74:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	3340      	adds	r3, #64	@ 0x40
 800ff7a:	21e0      	movs	r1, #224	@ 0xe0
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f007 ffc1 	bl	8017f04 <Crc32>
 800ff82:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ff8a:	68ba      	ldr	r2, [r7, #8]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d007      	beq.n	800ffa0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ff98:	89fb      	ldrh	r3, [r7, #14]
 800ff9a:	f043 0304 	orr.w	r3, r3, #4
 800ff9e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ffa6:	21bc      	movs	r1, #188	@ 0xbc
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f007 ffab 	bl	8017f04 <Crc32>
 800ffae:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800ffb6:	68ba      	ldr	r2, [r7, #8]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d007      	beq.n	800ffcc <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ffc4:	89fb      	ldrh	r3, [r7, #14]
 800ffc6:	f043 0308 	orr.w	r3, r3, #8
 800ffca:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f007 ff95 	bl	8017f04 <Crc32>
 800ffda:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d007      	beq.n	800fff8 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fff0:	89fb      	ldrh	r3, [r7, #14]
 800fff2:	f043 0310 	orr.w	r3, r3, #16
 800fff6:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fffe:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010002:	4618      	mov	r0, r3
 8010004:	f007 ff7e 	bl	8017f04 <Crc32>
 8010008:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	429a      	cmp	r2, r3
 8010014:	d007      	beq.n	8010026 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801001e:	89fb      	ldrh	r3, [r7, #14]
 8010020:	f043 0320 	orr.w	r3, r3, #32
 8010024:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 801002c:	2114      	movs	r1, #20
 801002e:	4618      	mov	r0, r3
 8010030:	f007 ff68 	bl	8017f04 <Crc32>
 8010034:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 801003c:	68ba      	ldr	r2, [r7, #8]
 801003e:	429a      	cmp	r2, r3
 8010040:	d007      	beq.n	8010052 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 801004a:	89fb      	ldrh	r3, [r7, #14]
 801004c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010050:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010052:	89fb      	ldrh	r3, [r7, #14]
 8010054:	4618      	mov	r0, r3
 8010056:	f002 f819 	bl	801208c <CallNvmDataChangeCallback>
 801005a:	e000      	b.n	801005e <LoRaMacHandleNvm+0x14e>
        return;
 801005c:	bf00      	nop
}
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	200008e8 	.word	0x200008e8

08010068 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00d      	beq.n	8010094 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010078:	6838      	ldr	r0, [r7, #0]
 801007a:	f00c f95f 	bl	801c33c <UTIL_TIMER_GetElapsedTime>
 801007e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	429a      	cmp	r2, r3
 8010086:	d905      	bls.n	8010094 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010088:	4b05      	ldr	r3, [pc, #20]	@ (80100a0 <LoRaMacHandleResponseTimeout+0x38>)
 801008a:	2200      	movs	r2, #0
 801008c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8010090:	2301      	movs	r3, #1
 8010092:	e000      	b.n	8010096 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	20000e08 	.word	0x20000e08

080100a4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80100aa:	2300      	movs	r3, #0
 80100ac:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80100ae:	f7ff fd11 	bl	800fad4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80100b2:	f003 fd90 	bl	8013bd6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80100b6:	4b26      	ldr	r3, [pc, #152]	@ (8010150 <LoRaMacProcess+0xac>)
 80100b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80100bc:	f003 0320 	and.w	r3, r3, #32
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d025      	beq.n	8010112 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80100c6:	2000      	movs	r0, #0
 80100c8:	f7ff fd6c 	bl	800fba4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80100cc:	f7ff ff00 	bl	800fed0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80100d0:	f001 fffa 	bl	80120c8 <IsRequestPending>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d006      	beq.n	80100e8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80100da:	f7ff feb3 	bl	800fe44 <LoRaMacCheckForBeaconAcquisition>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	79fb      	ldrb	r3, [r7, #7]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80100e8:	79fb      	ldrb	r3, [r7, #7]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d103      	bne.n	80100f6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80100ee:	f7ff fe73 	bl	800fdd8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80100f2:	f7ff fe15 	bl	800fd20 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80100f6:	f7ff fd65 	bl	800fbc4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80100fa:	f7ff fdc5 	bl	800fc88 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80100fe:	2001      	movs	r0, #1
 8010100:	f7ff fd50 	bl	800fba4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010104:	4a12      	ldr	r2, [pc, #72]	@ (8010150 <LoRaMacProcess+0xac>)
 8010106:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801010a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801010e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 8010112:	f7ff fdcd 	bl	800fcb0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010116:	4b0e      	ldr	r3, [pc, #56]	@ (8010150 <LoRaMacProcess+0xac>)
 8010118:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801011c:	2b02      	cmp	r3, #2
 801011e:	d101      	bne.n	8010124 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 8010120:	f001 fbee 	bl	8011900 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010124:	4b0a      	ldr	r3, [pc, #40]	@ (8010150 <LoRaMacProcess+0xac>)
 8010126:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801012a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2b00      	cmp	r3, #0
 8010132:	d009      	beq.n	8010148 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010134:	4a06      	ldr	r2, [pc, #24]	@ (8010150 <LoRaMacProcess+0xac>)
 8010136:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801013a:	f36f 1386 	bfc	r3, #6, #1
 801013e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 8010142:	4804      	ldr	r0, [pc, #16]	@ (8010154 <LoRaMacProcess+0xb0>)
 8010144:	f7ff fee4 	bl	800ff10 <LoRaMacHandleNvm>
    }
}
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	200008e8 	.word	0x200008e8
 8010154:	20000e08 	.word	0x20000e08

08010158 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010160:	481e      	ldr	r0, [pc, #120]	@ (80101dc <OnTxDelayedTimerEvent+0x84>)
 8010162:	f00b ffbf 	bl	801c0e4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010166:	4b1e      	ldr	r3, [pc, #120]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 8010168:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801016c:	f023 0320 	bic.w	r3, r3, #32
 8010170:	4a1b      	ldr	r2, [pc, #108]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 8010172:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010176:	4b1b      	ldr	r3, [pc, #108]	@ (80101e4 <OnTxDelayedTimerEvent+0x8c>)
 8010178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801017c:	4a18      	ldr	r2, [pc, #96]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 801017e:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8010182:	4611      	mov	r1, r2
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff ff6f 	bl	8010068 <LoRaMacHandleResponseTimeout>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d11e      	bne.n	80101ce <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010190:	2001      	movs	r0, #1
 8010192:	f001 f93b 	bl	801140c <ScheduleTx>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01a      	beq.n	80101d2 <OnTxDelayedTimerEvent+0x7a>
 801019c:	2b0b      	cmp	r3, #11
 801019e:	d018      	beq.n	80101d2 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80101a0:	4b10      	ldr	r3, [pc, #64]	@ (80101e4 <OnTxDelayedTimerEvent+0x8c>)
 80101a2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	4b0d      	ldr	r3, [pc, #52]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 80101aa:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80101ae:	4b0c      	ldr	r3, [pc, #48]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 80101b0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80101b4:	4b0a      	ldr	r3, [pc, #40]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 80101b6:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80101ba:	4b09      	ldr	r3, [pc, #36]	@ (80101e0 <OnTxDelayedTimerEvent+0x88>)
 80101bc:	2209      	movs	r2, #9
 80101be:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80101c2:	2009      	movs	r0, #9
 80101c4:	f004 f926 	bl	8014414 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80101c8:	f001 ff24 	bl	8012014 <StopRetransmission>
            break;
 80101cc:	e002      	b.n	80101d4 <OnTxDelayedTimerEvent+0x7c>
        return;
 80101ce:	bf00      	nop
 80101d0:	e000      	b.n	80101d4 <OnTxDelayedTimerEvent+0x7c>
            break;
 80101d2:	bf00      	nop
        }
    }
}
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	20000c50 	.word	0x20000c50
 80101e0:	200008e8 	.word	0x200008e8
 80101e4:	20000e08 	.word	0x20000e08

080101e8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80101f0:	4b17      	ldr	r3, [pc, #92]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 80101f2:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80101f6:	4b16      	ldr	r3, [pc, #88]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 80101f8:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80101fc:	4b15      	ldr	r3, [pc, #84]	@ (8010254 <OnRxWindow1TimerEvent+0x6c>)
 80101fe:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8010202:	b25a      	sxtb	r2, r3
 8010204:	4b12      	ldr	r3, [pc, #72]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 8010206:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801020a:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <OnRxWindow1TimerEvent+0x6c>)
 801020c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010210:	4b0f      	ldr	r3, [pc, #60]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 8010212:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010216:	4b0f      	ldr	r3, [pc, #60]	@ (8010254 <OnRxWindow1TimerEvent+0x6c>)
 8010218:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 801021c:	4b0c      	ldr	r3, [pc, #48]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 801021e:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010222:	4b0b      	ldr	r3, [pc, #44]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 8010224:	2200      	movs	r2, #0
 8010226:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801022a:	4b09      	ldr	r3, [pc, #36]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 801022c:	2200      	movs	r2, #0
 801022e:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010232:	4b08      	ldr	r3, [pc, #32]	@ (8010254 <OnRxWindow1TimerEvent+0x6c>)
 8010234:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010238:	4b05      	ldr	r3, [pc, #20]	@ (8010250 <OnRxWindow1TimerEvent+0x68>)
 801023a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801023e:	4906      	ldr	r1, [pc, #24]	@ (8010258 <OnRxWindow1TimerEvent+0x70>)
 8010240:	4806      	ldr	r0, [pc, #24]	@ (801025c <OnRxWindow1TimerEvent+0x74>)
 8010242:	f001 fb29 	bl	8011898 <RxWindowSetup>
}
 8010246:	bf00      	nop
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	200008e8 	.word	0x200008e8
 8010254:	20000e08 	.word	0x20000e08
 8010258:	20000ca0 	.word	0x20000ca0
 801025c:	20000c68 	.word	0x20000c68

08010260 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010268:	4b19      	ldr	r3, [pc, #100]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 801026a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801026e:	2b00      	cmp	r3, #0
 8010270:	d029      	beq.n	80102c6 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010272:	4b17      	ldr	r3, [pc, #92]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 8010274:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010278:	4b15      	ldr	r3, [pc, #84]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 801027a:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801027e:	4b15      	ldr	r3, [pc, #84]	@ (80102d4 <OnRxWindow2TimerEvent+0x74>)
 8010280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010282:	4a13      	ldr	r2, [pc, #76]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 8010284:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010288:	4b12      	ldr	r3, [pc, #72]	@ (80102d4 <OnRxWindow2TimerEvent+0x74>)
 801028a:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 801028e:	4b10      	ldr	r3, [pc, #64]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 8010290:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010294:	4b0f      	ldr	r3, [pc, #60]	@ (80102d4 <OnRxWindow2TimerEvent+0x74>)
 8010296:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 801029a:	4b0d      	ldr	r3, [pc, #52]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 801029c:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80102a0:	4b0b      	ldr	r3, [pc, #44]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80102a8:	4b09      	ldr	r3, [pc, #36]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 80102aa:	2201      	movs	r2, #1
 80102ac:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80102b0:	4b08      	ldr	r3, [pc, #32]	@ (80102d4 <OnRxWindow2TimerEvent+0x74>)
 80102b2:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80102b6:	4b06      	ldr	r3, [pc, #24]	@ (80102d0 <OnRxWindow2TimerEvent+0x70>)
 80102b8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80102bc:	4906      	ldr	r1, [pc, #24]	@ (80102d8 <OnRxWindow2TimerEvent+0x78>)
 80102be:	4807      	ldr	r0, [pc, #28]	@ (80102dc <OnRxWindow2TimerEvent+0x7c>)
 80102c0:	f001 faea 	bl	8011898 <RxWindowSetup>
 80102c4:	e000      	b.n	80102c8 <OnRxWindow2TimerEvent+0x68>
        return;
 80102c6:	bf00      	nop
}
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	200008e8 	.word	0x200008e8
 80102d4:	20000e08 	.word	0x20000e08
 80102d8:	20000cb8 	.word	0x20000cb8
 80102dc:	20000c80 	.word	0x20000c80

080102e0 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80102e8:	480f      	ldr	r0, [pc, #60]	@ (8010328 <OnRetransmitTimeoutTimerEvent+0x48>)
 80102ea:	f00b fefb 	bl	801c0e4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80102ee:	4b0f      	ldr	r3, [pc, #60]	@ (801032c <OnRetransmitTimeoutTimerEvent+0x4c>)
 80102f0:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d003      	beq.n	8010300 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 80102f8:	4b0c      	ldr	r3, [pc, #48]	@ (801032c <OnRetransmitTimeoutTimerEvent+0x4c>)
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010300:	4b0a      	ldr	r3, [pc, #40]	@ (801032c <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010302:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010306:	2b00      	cmp	r3, #0
 8010308:	d00a      	beq.n	8010320 <OnRetransmitTimeoutTimerEvent+0x40>
 801030a:	4b08      	ldr	r3, [pc, #32]	@ (801032c <OnRetransmitTimeoutTimerEvent+0x4c>)
 801030c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010310:	691b      	ldr	r3, [r3, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d004      	beq.n	8010320 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010316:	4b05      	ldr	r3, [pc, #20]	@ (801032c <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010318:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	4798      	blx	r3
    }
}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	20000cec 	.word	0x20000cec
 801032c:	200008e8 	.word	0x200008e8

08010330 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	60ba      	str	r2, [r7, #8]
 8010338:	607b      	str	r3, [r7, #4]
 801033a:	4603      	mov	r3, r0
 801033c:	73fb      	strb	r3, [r7, #15]
 801033e:	460b      	mov	r3, r1
 8010340:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <GetFCntDown+0x24>
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <GetFCntDown+0x24>
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d101      	bne.n	8010358 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010354:	2309      	movs	r3, #9
 8010356:	e028      	b.n	80103aa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010358:	7bfb      	ldrb	r3, [r7, #15]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d016      	beq.n	801038c <GetFCntDown+0x5c>
 801035e:	2b01      	cmp	r3, #1
 8010360:	d118      	bne.n	8010394 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010362:	79bb      	ldrb	r3, [r7, #6]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d10d      	bne.n	8010384 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010368:	7bbb      	ldrb	r3, [r7, #14]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d002      	beq.n	8010374 <GetFCntDown+0x44>
 801036e:	7bbb      	ldrb	r3, [r7, #14]
 8010370:	2b03      	cmp	r3, #3
 8010372:	d103      	bne.n	801037c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	2202      	movs	r2, #2
 8010378:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801037a:	e00d      	b.n	8010398 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	2201      	movs	r2, #1
 8010380:	701a      	strb	r2, [r3, #0]
            break;
 8010382:	e009      	b.n	8010398 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	2203      	movs	r2, #3
 8010388:	701a      	strb	r2, [r3, #0]
            break;
 801038a:	e005      	b.n	8010398 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	2204      	movs	r2, #4
 8010390:	701a      	strb	r2, [r3, #0]
            break;
 8010392:	e001      	b.n	8010398 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010394:	2305      	movs	r3, #5
 8010396:	e008      	b.n	80103aa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	7818      	ldrb	r0, [r3, #0]
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	89db      	ldrh	r3, [r3, #14]
 80103a0:	69fa      	ldr	r2, [r7, #28]
 80103a2:	4619      	mov	r1, r3
 80103a4:	f004 fc60 	bl	8014c68 <LoRaMacCryptoGetFCntDown>
 80103a8:	4603      	mov	r3, r0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
	...

080103b4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80103b4:	b5b0      	push	{r4, r5, r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80103be:	2303      	movs	r3, #3
 80103c0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80103c2:	4b62      	ldr	r3, [pc, #392]	@ (801054c <SwitchClass+0x198>)
 80103c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80103c8:	2b02      	cmp	r3, #2
 80103ca:	f000 80a7 	beq.w	801051c <SwitchClass+0x168>
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	f300 80b6 	bgt.w	8010540 <SwitchClass+0x18c>
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d003      	beq.n	80103e0 <SwitchClass+0x2c>
 80103d8:	2b01      	cmp	r3, #1
 80103da:	f000 8091 	beq.w	8010500 <SwitchClass+0x14c>
 80103de:	e0af      	b.n	8010540 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80103e0:	79fb      	ldrb	r3, [r7, #7]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d107      	bne.n	80103f6 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80103e6:	4b59      	ldr	r3, [pc, #356]	@ (801054c <SwitchClass+0x198>)
 80103e8:	4a58      	ldr	r2, [pc, #352]	@ (801054c <SwitchClass+0x198>)
 80103ea:	336c      	adds	r3, #108	@ 0x6c
 80103ec:	3264      	adds	r2, #100	@ 0x64
 80103ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103f2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d10c      	bne.n	8010416 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80103fc:	79fb      	ldrb	r3, [r7, #7]
 80103fe:	4618      	mov	r0, r3
 8010400:	f003 fb80 	bl	8013b04 <LoRaMacClassBSwitchClass>
 8010404:	4603      	mov	r3, r0
 8010406:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d103      	bne.n	8010416 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801040e:	4a4f      	ldr	r2, [pc, #316]	@ (801054c <SwitchClass+0x198>)
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	2b02      	cmp	r3, #2
 801041a:	f040 808c 	bne.w	8010536 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801041e:	4a4b      	ldr	r2, [pc, #300]	@ (801054c <SwitchClass+0x198>)
 8010420:	79fb      	ldrb	r3, [r7, #7]
 8010422:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010426:	4a4a      	ldr	r2, [pc, #296]	@ (8010550 <SwitchClass+0x19c>)
 8010428:	4b49      	ldr	r3, [pc, #292]	@ (8010550 <SwitchClass+0x19c>)
 801042a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801042e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010436:	e895 0003 	ldmia.w	r5, {r0, r1}
 801043a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801043e:	4b44      	ldr	r3, [pc, #272]	@ (8010550 <SwitchClass+0x19c>)
 8010440:	2202      	movs	r2, #2
 8010442:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010446:	2300      	movs	r3, #0
 8010448:	73bb      	strb	r3, [r7, #14]
 801044a:	e049      	b.n	80104e0 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 801044c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010450:	4a3e      	ldr	r2, [pc, #248]	@ (801054c <SwitchClass+0x198>)
 8010452:	212c      	movs	r1, #44	@ 0x2c
 8010454:	fb01 f303 	mul.w	r3, r1, r3
 8010458:	4413      	add	r3, r2
 801045a:	33da      	adds	r3, #218	@ 0xda
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d038      	beq.n	80104d4 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010466:	4a39      	ldr	r2, [pc, #228]	@ (801054c <SwitchClass+0x198>)
 8010468:	212c      	movs	r1, #44	@ 0x2c
 801046a:	fb01 f303 	mul.w	r3, r1, r3
 801046e:	4413      	add	r3, r2
 8010470:	33f0      	adds	r3, #240	@ 0xf0
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a35      	ldr	r2, [pc, #212]	@ (801054c <SwitchClass+0x198>)
 8010476:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801047c:	4a33      	ldr	r2, [pc, #204]	@ (801054c <SwitchClass+0x198>)
 801047e:	212c      	movs	r1, #44	@ 0x2c
 8010480:	fb01 f303 	mul.w	r3, r1, r3
 8010484:	4413      	add	r3, r2
 8010486:	33f4      	adds	r3, #244	@ 0xf4
 8010488:	f993 3000 	ldrsb.w	r3, [r3]
 801048c:	b2da      	uxtb	r2, r3
 801048e:	4b2f      	ldr	r3, [pc, #188]	@ (801054c <SwitchClass+0x198>)
 8010490:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010494:	4b2e      	ldr	r3, [pc, #184]	@ (8010550 <SwitchClass+0x19c>)
 8010496:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801049a:	4b2d      	ldr	r3, [pc, #180]	@ (8010550 <SwitchClass+0x19c>)
 801049c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80104a0:	4b2a      	ldr	r3, [pc, #168]	@ (801054c <SwitchClass+0x198>)
 80104a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104a4:	4a2a      	ldr	r2, [pc, #168]	@ (8010550 <SwitchClass+0x19c>)
 80104a6:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80104aa:	4b28      	ldr	r3, [pc, #160]	@ (801054c <SwitchClass+0x198>)
 80104ac:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80104b0:	4b27      	ldr	r3, [pc, #156]	@ (8010550 <SwitchClass+0x19c>)
 80104b2:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80104b6:	4b25      	ldr	r3, [pc, #148]	@ (801054c <SwitchClass+0x198>)
 80104b8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80104bc:	4b24      	ldr	r3, [pc, #144]	@ (8010550 <SwitchClass+0x19c>)
 80104be:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80104c2:	4b23      	ldr	r3, [pc, #140]	@ (8010550 <SwitchClass+0x19c>)
 80104c4:	2203      	movs	r2, #3
 80104c6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80104ca:	4b21      	ldr	r3, [pc, #132]	@ (8010550 <SwitchClass+0x19c>)
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 80104d2:	e009      	b.n	80104e8 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80104d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	3301      	adds	r3, #1
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	73bb      	strb	r3, [r7, #14]
 80104e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	ddb1      	ble.n	801044c <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80104e8:	4b19      	ldr	r3, [pc, #100]	@ (8010550 <SwitchClass+0x19c>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80104f0:	4b18      	ldr	r3, [pc, #96]	@ (8010554 <SwitchClass+0x1a0>)
 80104f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80104f6:	f001 fa03 	bl	8011900 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80104fa:	2300      	movs	r3, #0
 80104fc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80104fe:	e01a      	b.n	8010536 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010500:	79fb      	ldrb	r3, [r7, #7]
 8010502:	4618      	mov	r0, r3
 8010504:	f003 fafe 	bl	8013b04 <LoRaMacClassBSwitchClass>
 8010508:	4603      	mov	r3, r0
 801050a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 801050c:	7bfb      	ldrb	r3, [r7, #15]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d113      	bne.n	801053a <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010512:	4a0e      	ldr	r2, [pc, #56]	@ (801054c <SwitchClass+0x198>)
 8010514:	79fb      	ldrb	r3, [r7, #7]
 8010516:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 801051a:	e00e      	b.n	801053a <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10d      	bne.n	801053e <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010522:	4a0a      	ldr	r2, [pc, #40]	@ (801054c <SwitchClass+0x198>)
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801052a:	4b0a      	ldr	r3, [pc, #40]	@ (8010554 <SwitchClass+0x1a0>)
 801052c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801052e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010534:	e003      	b.n	801053e <SwitchClass+0x18a>
            break;
 8010536:	bf00      	nop
 8010538:	e002      	b.n	8010540 <SwitchClass+0x18c>
            break;
 801053a:	bf00      	nop
 801053c:	e000      	b.n	8010540 <SwitchClass+0x18c>
            break;
 801053e:	bf00      	nop
        }
    }

    return status;
 8010540:	7bfb      	ldrb	r3, [r7, #15]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bdb0      	pop	{r4, r5, r7, pc}
 801054a:	bf00      	nop
 801054c:	20000e08 	.word	0x20000e08
 8010550:	200008e8 	.word	0x200008e8
 8010554:	08020450 	.word	0x08020450

08010558 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010562:	4b10      	ldr	r3, [pc, #64]	@ (80105a4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010564:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010568:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801056a:	79fb      	ldrb	r3, [r7, #7]
 801056c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801056e:	230d      	movs	r3, #13
 8010570:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010572:	4b0c      	ldr	r3, [pc, #48]	@ (80105a4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010574:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010578:	2b00      	cmp	r3, #0
 801057a:	d001      	beq.n	8010580 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801057c:	230e      	movs	r3, #14
 801057e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010580:	4b08      	ldr	r3, [pc, #32]	@ (80105a4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010586:	f107 0210 	add.w	r2, r7, #16
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f005 f9c3 	bl	8015918 <RegionGetPhyParam>
 8010592:	4603      	mov	r3, r0
 8010594:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	b2db      	uxtb	r3, r3
}
 801059a:	4618      	mov	r0, r3
 801059c:	3718      	adds	r7, #24
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	20000e08 	.word	0x20000e08

080105a8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	71fb      	strb	r3, [r7, #7]
 80105b2:	460b      	mov	r3, r1
 80105b4:	71bb      	strb	r3, [r7, #6]
 80105b6:	4613      	mov	r3, r2
 80105b8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80105c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff ffc6 	bl	8010558 <GetMaxAppPayloadWithoutFOptsLength>
 80105cc:	4603      	mov	r3, r0
 80105ce:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	797b      	ldrb	r3, [r7, #5]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	4413      	add	r3, r2
 80105da:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80105dc:	89ba      	ldrh	r2, [r7, #12]
 80105de:	89fb      	ldrh	r3, [r7, #14]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d804      	bhi.n	80105ee <ValidatePayloadLength+0x46>
 80105e4:	89bb      	ldrh	r3, [r7, #12]
 80105e6:	2bff      	cmp	r3, #255	@ 0xff
 80105e8:	d801      	bhi.n	80105ee <ValidatePayloadLength+0x46>
    {
        return true;
 80105ea:	2301      	movs	r3, #1
 80105ec:	e000      	b.n	80105f0 <ValidatePayloadLength+0x48>
    }
    return false;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3710      	adds	r7, #16
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b0a5      	sub	sp, #148	@ 0x94
 80105fc:	af02      	add	r7, sp, #8
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	4608      	mov	r0, r1
 8010602:	4611      	mov	r1, r2
 8010604:	461a      	mov	r2, r3
 8010606:	4603      	mov	r3, r0
 8010608:	70fb      	strb	r3, [r7, #3]
 801060a:	460b      	mov	r3, r1
 801060c:	70bb      	strb	r3, [r7, #2]
 801060e:	4613      	mov	r3, r2
 8010610:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010618:	2300      	movs	r3, #0
 801061a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801061e:	2300      	movs	r3, #0
 8010620:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010624:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010628:	2b00      	cmp	r3, #0
 801062a:	f000 84b9 	beq.w	8010fa0 <ProcessMacCommands+0x9a8>
 801062e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010632:	2b01      	cmp	r3, #1
 8010634:	f040 84ba 	bne.w	8010fac <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010638:	f000 bcb2 	b.w	8010fa0 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801063c:	78fb      	ldrb	r3, [r7, #3]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	4413      	add	r3, r2
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	4618      	mov	r0, r3
 8010646:	f003 fd41 	bl	80140cc <LoRaMacCommandsGetCmdSize>
 801064a:	4603      	mov	r3, r0
 801064c:	461a      	mov	r2, r3
 801064e:	78fb      	ldrb	r3, [r7, #3]
 8010650:	441a      	add	r2, r3
 8010652:	78bb      	ldrb	r3, [r7, #2]
 8010654:	429a      	cmp	r2, r3
 8010656:	f300 84ab 	bgt.w	8010fb0 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801065a:	78fb      	ldrb	r3, [r7, #3]
 801065c:	1c5a      	adds	r2, r3, #1
 801065e:	70fa      	strb	r2, [r7, #3]
 8010660:	461a      	mov	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4413      	add	r3, r2
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	3b02      	subs	r3, #2
 801066a:	2b11      	cmp	r3, #17
 801066c:	f200 84a2 	bhi.w	8010fb4 <ProcessMacCommands+0x9bc>
 8010670:	a201      	add	r2, pc, #4	@ (adr r2, 8010678 <ProcessMacCommands+0x80>)
 8010672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010676:	bf00      	nop
 8010678:	080106c1 	.word	0x080106c1
 801067c:	08010703 	.word	0x08010703
 8010680:	0801087f 	.word	0x0801087f
 8010684:	080108bd 	.word	0x080108bd
 8010688:	080109b5 	.word	0x080109b5
 801068c:	08010a05 	.word	0x08010a05
 8010690:	08010ac1 	.word	0x08010ac1
 8010694:	08010b17 	.word	0x08010b17
 8010698:	08010bfb 	.word	0x08010bfb
 801069c:	08010fb5 	.word	0x08010fb5
 80106a0:	08010fb5 	.word	0x08010fb5
 80106a4:	08010ca5 	.word	0x08010ca5
 80106a8:	08010fb5 	.word	0x08010fb5
 80106ac:	08010fb5 	.word	0x08010fb5
 80106b0:	08010dc5 	.word	0x08010dc5
 80106b4:	08010df9 	.word	0x08010df9
 80106b8:	08010e89 	.word	0x08010e89
 80106bc:	08010f01 	.word	0x08010f01
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80106c0:	2004      	movs	r0, #4
 80106c2:	f003 fedb 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 845c 	beq.w	8010f86 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80106ce:	2104      	movs	r1, #4
 80106d0:	2000      	movs	r0, #0
 80106d2:	f003 fe47 	bl	8014364 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	1c5a      	adds	r2, r3, #1
 80106da:	70fa      	strb	r2, [r7, #3]
 80106dc:	461a      	mov	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4413      	add	r3, r2
 80106e2:	781a      	ldrb	r2, [r3, #0]
 80106e4:	4bb0      	ldr	r3, [pc, #704]	@ (80109a8 <ProcessMacCommands+0x3b0>)
 80106e6:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80106ea:	78fb      	ldrb	r3, [r7, #3]
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	70fa      	strb	r2, [r7, #3]
 80106f0:	461a      	mov	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4413      	add	r3, r2
 80106f6:	781a      	ldrb	r2, [r3, #0]
 80106f8:	4bab      	ldr	r3, [pc, #684]	@ (80109a8 <ProcessMacCommands+0x3b0>)
 80106fa:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 80106fe:	f000 bc42 	b.w	8010f86 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010702:	2300      	movs	r3, #0
 8010704:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010708:	2300      	movs	r3, #0
 801070a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 801071a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801071e:	f083 0301 	eor.w	r3, r3, #1
 8010722:	b2db      	uxtb	r3, r3
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 80a6 	beq.w	8010876 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801072a:	2301      	movs	r3, #1
 801072c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	3b01      	subs	r3, #1
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	4413      	add	r3, r2
 8010738:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801073a:	4b9c      	ldr	r3, [pc, #624]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801073c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010740:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010744:	4b99      	ldr	r3, [pc, #612]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010746:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801074a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801074e:	4b97      	ldr	r3, [pc, #604]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010750:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010754:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010758:	4b94      	ldr	r3, [pc, #592]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801075a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801075e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010762:	4b92      	ldr	r3, [pc, #584]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010764:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8010768:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 801076c:	4b8f      	ldr	r3, [pc, #572]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801076e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8010772:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010774:	4b8d      	ldr	r3, [pc, #564]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010776:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801077a:	2b00      	cmp	r3, #0
 801077c:	d008      	beq.n	8010790 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801077e:	78ba      	ldrb	r2, [r7, #2]
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	b2db      	uxtb	r3, r3
 8010786:	3301      	adds	r3, #1
 8010788:	b2db      	uxtb	r3, r3
 801078a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 801078e:	e002      	b.n	8010796 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8010790:	2305      	movs	r3, #5
 8010792:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010796:	4b85      	ldr	r3, [pc, #532]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010798:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801079c:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80107a0:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80107a4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80107a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80107ac:	9301      	str	r3, [sp, #4]
 80107ae:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	4623      	mov	r3, r4
 80107b6:	f005 f96c 	bl	8015a92 <RegionLinkAdrReq>
 80107ba:	4603      	mov	r3, r0
 80107bc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80107c0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80107c4:	f003 0307 	and.w	r3, r3, #7
 80107c8:	2b07      	cmp	r3, #7
 80107ca:	d119      	bne.n	8010800 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80107cc:	4b77      	ldr	r3, [pc, #476]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80107ce:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80107d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80107d6:	429a      	cmp	r2, r3
 80107d8:	da03      	bge.n	80107e2 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80107da:	4b74      	ldr	r3, [pc, #464]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80107e2:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80107e6:	4b71      	ldr	r3, [pc, #452]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80107e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80107ec:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 80107f0:	4b6e      	ldr	r3, [pc, #440]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80107f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80107f6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80107fa:	4b6c      	ldr	r3, [pc, #432]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80107fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010800:	2300      	movs	r3, #0
 8010802:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010806:	e00b      	b.n	8010820 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010808:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 801080c:	2201      	movs	r2, #1
 801080e:	4619      	mov	r1, r3
 8010810:	2003      	movs	r0, #3
 8010812:	f003 fb0b 	bl	8013e2c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010816:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801081a:	3301      	adds	r3, #1
 801081c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010820:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010824:	4a62      	ldr	r2, [pc, #392]	@ (80109b0 <ProcessMacCommands+0x3b8>)
 8010826:	fba2 2303 	umull	r2, r3, r2, r3
 801082a:	089b      	lsrs	r3, r3, #2
 801082c:	b2db      	uxtb	r3, r3
 801082e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010832:	429a      	cmp	r2, r3
 8010834:	d3e8      	bcc.n	8010808 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010836:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801083a:	78fb      	ldrb	r3, [r7, #3]
 801083c:	4413      	add	r3, r2
 801083e:	b2db      	uxtb	r3, r3
 8010840:	3b01      	subs	r3, #1
 8010842:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010844:	78fa      	ldrb	r2, [r7, #3]
 8010846:	78bb      	ldrb	r3, [r7, #2]
 8010848:	429a      	cmp	r2, r3
 801084a:	d20a      	bcs.n	8010862 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 801084c:	78fb      	ldrb	r3, [r7, #3]
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	70fa      	strb	r2, [r7, #3]
 8010852:	461a      	mov	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4413      	add	r3, r2
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2b03      	cmp	r3, #3
 801085c:	f43f af68 	beq.w	8010730 <ProcessMacCommands+0x138>
 8010860:	e000      	b.n	8010864 <ProcessMacCommands+0x26c>
                            break;
 8010862:	bf00      	nop

                    if( macIndex < commandsSize )
 8010864:	78fa      	ldrb	r2, [r7, #3]
 8010866:	78bb      	ldrb	r3, [r7, #2]
 8010868:	429a      	cmp	r2, r3
 801086a:	f080 838e 	bcs.w	8010f8a <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 801086e:	78fb      	ldrb	r3, [r7, #3]
 8010870:	3b01      	subs	r3, #1
 8010872:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010874:	e389      	b.n	8010f8a <ProcessMacCommands+0x992>
                    macIndex += 4;
 8010876:	78fb      	ldrb	r3, [r7, #3]
 8010878:	3304      	adds	r3, #4
 801087a:	70fb      	strb	r3, [r7, #3]
                break;
 801087c:	e385      	b.n	8010f8a <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801087e:	78fb      	ldrb	r3, [r7, #3]
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	70fa      	strb	r2, [r7, #3]
 8010884:	461a      	mov	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4413      	add	r3, r2
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	f003 030f 	and.w	r3, r3, #15
 8010890:	b2da      	uxtb	r2, r3
 8010892:	4b46      	ldr	r3, [pc, #280]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010894:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010898:	4b44      	ldr	r3, [pc, #272]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801089a:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 801089e:	461a      	mov	r2, r3
 80108a0:	2301      	movs	r3, #1
 80108a2:	4093      	lsls	r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	4b41      	ldr	r3, [pc, #260]	@ (80109ac <ProcessMacCommands+0x3b4>)
 80108a8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80108ac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80108b0:	2200      	movs	r2, #0
 80108b2:	4619      	mov	r1, r3
 80108b4:	2004      	movs	r0, #4
 80108b6:	f003 fab9 	bl	8013e2c <LoRaMacCommandsAddCmd>
                break;
 80108ba:	e371      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80108bc:	2307      	movs	r3, #7
 80108be:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80108c2:	78fb      	ldrb	r3, [r7, #3]
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	4413      	add	r3, r2
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	091b      	lsrs	r3, r3, #4
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	b25b      	sxtb	r3, r3
 80108d0:	f003 0307 	and.w	r3, r3, #7
 80108d4:	b25b      	sxtb	r3, r3
 80108d6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80108da:	78fb      	ldrb	r3, [r7, #3]
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	4413      	add	r3, r2
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	b25b      	sxtb	r3, r3
 80108e4:	f003 030f 	and.w	r3, r3, #15
 80108e8:	b25b      	sxtb	r3, r3
 80108ea:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	3301      	adds	r3, #1
 80108f2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80108f4:	78fb      	ldrb	r3, [r7, #3]
 80108f6:	1c5a      	adds	r2, r3, #1
 80108f8:	70fa      	strb	r2, [r7, #3]
 80108fa:	461a      	mov	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4413      	add	r3, r2
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010904:	78fb      	ldrb	r3, [r7, #3]
 8010906:	1c5a      	adds	r2, r3, #1
 8010908:	70fa      	strb	r2, [r7, #3]
 801090a:	461a      	mov	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	4413      	add	r3, r2
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	021a      	lsls	r2, r3, #8
 8010914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010916:	4313      	orrs	r3, r2
 8010918:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801091a:	78fb      	ldrb	r3, [r7, #3]
 801091c:	1c5a      	adds	r2, r3, #1
 801091e:	70fa      	strb	r2, [r7, #3]
 8010920:	461a      	mov	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4413      	add	r3, r2
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	041a      	lsls	r2, r3, #16
 801092a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801092c:	4313      	orrs	r3, r2
 801092e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010932:	2264      	movs	r2, #100	@ 0x64
 8010934:	fb02 f303 	mul.w	r3, r2, r3
 8010938:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801093a:	4b1c      	ldr	r3, [pc, #112]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801093c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010940:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010944:	4611      	mov	r1, r2
 8010946:	4618      	mov	r0, r3
 8010948:	f005 f8bd 	bl	8015ac6 <RegionRxParamSetupReq>
 801094c:	4603      	mov	r3, r0
 801094e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010952:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010956:	f003 0307 	and.w	r3, r3, #7
 801095a:	2b07      	cmp	r3, #7
 801095c:	d117      	bne.n	801098e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801095e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010962:	b2da      	uxtb	r2, r3
 8010964:	4b11      	ldr	r3, [pc, #68]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010966:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801096a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801096e:	b2da      	uxtb	r2, r3
 8010970:	4b0e      	ldr	r3, [pc, #56]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010972:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010978:	4a0c      	ldr	r2, [pc, #48]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801097a:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801097c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801097e:	4a0b      	ldr	r2, [pc, #44]	@ (80109ac <ProcessMacCommands+0x3b4>)
 8010980:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010982:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b08      	ldr	r3, [pc, #32]	@ (80109ac <ProcessMacCommands+0x3b4>)
 801098a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 801098e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010992:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010996:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801099a:	2201      	movs	r2, #1
 801099c:	4619      	mov	r1, r3
 801099e:	2005      	movs	r0, #5
 80109a0:	f003 fa44 	bl	8013e2c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80109a4:	e2fc      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
 80109a6:	bf00      	nop
 80109a8:	200008e8 	.word	0x200008e8
 80109ac:	20000e08 	.word	0x20000e08
 80109b0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80109b4:	23ff      	movs	r3, #255	@ 0xff
 80109b6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80109ba:	4bb7      	ldr	r3, [pc, #732]	@ (8010c98 <ProcessMacCommands+0x6a0>)
 80109bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00d      	beq.n	80109e0 <ProcessMacCommands+0x3e8>
 80109c4:	4bb4      	ldr	r3, [pc, #720]	@ (8010c98 <ProcessMacCommands+0x6a0>)
 80109c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d007      	beq.n	80109e0 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80109d0:	4bb1      	ldr	r3, [pc, #708]	@ (8010c98 <ProcessMacCommands+0x6a0>)
 80109d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4798      	blx	r3
 80109da:	4603      	mov	r3, r0
 80109dc:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80109e0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80109e4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80109e8:	787b      	ldrb	r3, [r7, #1]
 80109ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80109f4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80109f8:	2202      	movs	r2, #2
 80109fa:	4619      	mov	r1, r3
 80109fc:	2006      	movs	r0, #6
 80109fe:	f003 fa15 	bl	8013e2c <LoRaMacCommandsAddCmd>
                break;
 8010a02:	e2cd      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010a04:	2303      	movs	r3, #3
 8010a06:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010a0a:	78fb      	ldrb	r3, [r7, #3]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	70fa      	strb	r2, [r7, #3]
 8010a10:	461a      	mov	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4413      	add	r3, r2
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	b25b      	sxtb	r3, r3
 8010a1a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010a1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010a22:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010a24:	78fb      	ldrb	r3, [r7, #3]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	70fa      	strb	r2, [r7, #3]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4413      	add	r3, r2
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010a34:	78fb      	ldrb	r3, [r7, #3]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	70fa      	strb	r2, [r7, #3]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	4413      	add	r3, r2
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	021a      	lsls	r2, r3, #8
 8010a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a46:	4313      	orrs	r3, r2
 8010a48:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010a4a:	78fb      	ldrb	r3, [r7, #3]
 8010a4c:	1c5a      	adds	r2, r3, #1
 8010a4e:	70fa      	strb	r2, [r7, #3]
 8010a50:	461a      	mov	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4413      	add	r3, r2
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	041a      	lsls	r2, r3, #16
 8010a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a62:	2264      	movs	r2, #100	@ 0x64
 8010a64:	fb02 f303 	mul.w	r3, r2, r3
 8010a68:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010a6e:	78fb      	ldrb	r3, [r7, #3]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	70fa      	strb	r2, [r7, #3]
 8010a74:	461a      	mov	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4413      	add	r3, r2
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010a82:	4b86      	ldr	r3, [pc, #536]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010a88:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f005 f82c 	bl	8015aec <RegionNewChannelReq>
 8010a94:	4603      	mov	r3, r0
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010a9c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010aa0:	b25b      	sxtb	r3, r3
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f2c0 8273 	blt.w	8010f8e <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 8010aa8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010aac:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010ab0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	2007      	movs	r0, #7
 8010aba:	f003 f9b7 	bl	8013e2c <LoRaMacCommandsAddCmd>
                }
                break;
 8010abe:	e266      	b.n	8010f8e <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	70fa      	strb	r2, [r7, #3]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	4413      	add	r3, r2
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 030f 	and.w	r3, r3, #15
 8010ad2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8010ad6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d104      	bne.n	8010ae8 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8010ade:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010ae8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010aec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010af0:	fb02 f303 	mul.w	r3, r2, r3
 8010af4:	461a      	mov	r2, r3
 8010af6:	4b69      	ldr	r3, [pc, #420]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010af8:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010afa:	4b68      	ldr	r3, [pc, #416]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010afe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010b02:	4a66      	ldr	r2, [pc, #408]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010b04:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010b06:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	2008      	movs	r0, #8
 8010b10:	f003 f98c 	bl	8013e2c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010b14:	e244      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010b16:	78fb      	ldrb	r3, [r7, #3]
 8010b18:	1c5a      	adds	r2, r3, #1
 8010b1a:	70fa      	strb	r2, [r7, #3]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4413      	add	r3, r2
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010b34:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010b38:	f003 0320 	and.w	r3, r3, #32
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010b40:	2301      	movs	r3, #1
 8010b42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010b46:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010b4a:	f003 0310 	and.w	r3, r3, #16
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d002      	beq.n	8010b58 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010b52:	2301      	movs	r3, #1
 8010b54:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010b58:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010b5c:	f003 030f 	and.w	r3, r3, #15
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010b66:	4b4d      	ldr	r3, [pc, #308]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010b68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b6c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010b70:	4611      	mov	r1, r2
 8010b72:	4618      	mov	r0, r3
 8010b74:	f004 ffcd 	bl	8015b12 <RegionTxParamSetupReq>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b7e:	f000 8208 	beq.w	8010f92 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010b82:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8010b86:	4b45      	ldr	r3, [pc, #276]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010b88:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010b8c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010b90:	4b42      	ldr	r3, [pc, #264]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010b92:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010b96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	4b40      	ldr	r3, [pc, #256]	@ (8010ca0 <ProcessMacCommands+0x6a8>)
 8010b9e:	5c9b      	ldrb	r3, [r3, r2]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f0 f88f 	bl	8000cc4 <__aeabi_ui2f>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010baa:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010bac:	2302      	movs	r3, #2
 8010bae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010bb8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bbc:	4b37      	ldr	r3, [pc, #220]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010bc2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010bc6:	4611      	mov	r1, r2
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f004 fea5 	bl	8015918 <RegionGetPhyParam>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd4:	b25a      	sxtb	r2, r3
 8010bd6:	4b31      	ldr	r3, [pc, #196]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010bd8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	bfb8      	it	lt
 8010be0:	4613      	movlt	r3, r2
 8010be2:	b25a      	sxtb	r2, r3
 8010be4:	4b2d      	ldr	r3, [pc, #180]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010bea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010bee:	2200      	movs	r2, #0
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	2009      	movs	r0, #9
 8010bf4:	f003 f91a 	bl	8013e2c <LoRaMacCommandsAddCmd>
                }
                break;
 8010bf8:	e1cb      	b.n	8010f92 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010bfa:	2303      	movs	r3, #3
 8010bfc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	70fa      	strb	r2, [r7, #3]
 8010c06:	461a      	mov	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010c12:	78fb      	ldrb	r3, [r7, #3]
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	70fa      	strb	r2, [r7, #3]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c22:	78fb      	ldrb	r3, [r7, #3]
 8010c24:	1c5a      	adds	r2, r3, #1
 8010c26:	70fa      	strb	r2, [r7, #3]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	021a      	lsls	r2, r3, #8
 8010c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c34:	4313      	orrs	r3, r2
 8010c36:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	70fa      	strb	r2, [r7, #3]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	041a      	lsls	r2, r3, #16
 8010c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c50:	2264      	movs	r2, #100	@ 0x64
 8010c52:	fb02 f303 	mul.w	r3, r2, r3
 8010c56:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010c58:	4b10      	ldr	r3, [pc, #64]	@ (8010c9c <ProcessMacCommands+0x6a4>)
 8010c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c5e:	f107 0220 	add.w	r2, r7, #32
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f004 ff67 	bl	8015b38 <RegionDlChannelReq>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010c72:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c76:	b25b      	sxtb	r3, r3
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f2c0 818c 	blt.w	8010f96 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 8010c7e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c82:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010c86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	200a      	movs	r0, #10
 8010c90:	f003 f8cc 	bl	8013e2c <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8010c94:	e17f      	b.n	8010f96 <ProcessMacCommands+0x99e>
 8010c96:	bf00      	nop
 8010c98:	200008e8 	.word	0x200008e8
 8010c9c:	20000e08 	.word	0x20000e08
 8010ca0:	08020380 	.word	0x08020380
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010ca4:	2009      	movs	r0, #9
 8010ca6:	f003 fbe9 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f000 8084 	beq.w	8010dba <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010cb2:	2109      	movs	r1, #9
 8010cb4:	2000      	movs	r0, #0
 8010cb6:	f003 fb55 	bl	8014364 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010cba:	f107 0318 	add.w	r3, r7, #24
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010cc4:	f107 0310 	add.w	r3, r7, #16
 8010cc8:	2200      	movs	r2, #0
 8010cca:	601a      	str	r2, [r3, #0]
 8010ccc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010cce:	f107 0308 	add.w	r3, r7, #8
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	601a      	str	r2, [r3, #0]
 8010cd6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010cd8:	78fb      	ldrb	r3, [r7, #3]
 8010cda:	1c5a      	adds	r2, r3, #1
 8010cdc:	70fa      	strb	r2, [r7, #3]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010ce8:	78fb      	ldrb	r3, [r7, #3]
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	70fa      	strb	r2, [r7, #3]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	021a      	lsls	r2, r3, #8
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010cfe:	78fb      	ldrb	r3, [r7, #3]
 8010d00:	1c5a      	adds	r2, r3, #1
 8010d02:	70fa      	strb	r2, [r7, #3]
 8010d04:	461a      	mov	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4413      	add	r3, r2
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	041a      	lsls	r2, r3, #16
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010d14:	78fb      	ldrb	r3, [r7, #3]
 8010d16:	1c5a      	adds	r2, r3, #1
 8010d18:	70fa      	strb	r2, [r7, #3]
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4413      	add	r3, r2
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	061a      	lsls	r2, r3, #24
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	4313      	orrs	r3, r2
 8010d28:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010d2a:	78fb      	ldrb	r3, [r7, #3]
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	70fa      	strb	r2, [r7, #3]
 8010d30:	461a      	mov	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4413      	add	r3, r2
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	b21b      	sxth	r3, r3
 8010d3a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010d3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d40:	461a      	mov	r2, r3
 8010d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d46:	fb02 f303 	mul.w	r3, r2, r3
 8010d4a:	121b      	asrs	r3, r3, #8
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010d50:	f107 0310 	add.w	r3, r7, #16
 8010d54:	f107 0218 	add.w	r2, r7, #24
 8010d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d5c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010d60:	693a      	ldr	r2, [r7, #16]
 8010d62:	4b96      	ldr	r3, [pc, #600]	@ (8010fbc <ProcessMacCommands+0x9c4>)
 8010d64:	4413      	add	r3, r2
 8010d66:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010d68:	f107 0308 	add.w	r3, r7, #8
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f00a fc53 	bl	801b618 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010d72:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8010d76:	4b92      	ldr	r3, [pc, #584]	@ (8010fc0 <ProcessMacCommands+0x9c8>)
 8010d78:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010d7c:	9200      	str	r2, [sp, #0]
 8010d7e:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8010d82:	f107 0210 	add.w	r2, r7, #16
 8010d86:	ca06      	ldmia	r2, {r1, r2}
 8010d88:	f00a fbdf 	bl	801b54a <SysTimeSub>
 8010d8c:	f107 0010 	add.w	r0, r7, #16
 8010d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d96:	f107 0208 	add.w	r2, r7, #8
 8010d9a:	ca06      	ldmia	r2, {r1, r2}
 8010d9c:	f00a fb9c 	bl	801b4d8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010da0:	f107 0310 	add.w	r3, r7, #16
 8010da4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010da8:	f00a fc08 	bl	801b5bc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010dac:	f002 fee8 	bl	8013b80 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010db0:	4b83      	ldr	r3, [pc, #524]	@ (8010fc0 <ProcessMacCommands+0x9c8>)
 8010db2:	2201      	movs	r2, #1
 8010db4:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010db8:	e0f2      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010dba:	4b81      	ldr	r3, [pc, #516]	@ (8010fc0 <ProcessMacCommands+0x9c8>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 8010dc2:	e0ed      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010dc4:	200c      	movs	r0, #12
 8010dc6:	f003 fb59 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f000 80e4 	beq.w	8010f9a <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010dd2:	210c      	movs	r1, #12
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	f003 fac5 	bl	8014364 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010dda:	4b79      	ldr	r3, [pc, #484]	@ (8010fc0 <ProcessMacCommands+0x9c8>)
 8010ddc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010de0:	2b04      	cmp	r3, #4
 8010de2:	f000 80da 	beq.w	8010f9a <ProcessMacCommands+0x9a2>
 8010de6:	4b76      	ldr	r3, [pc, #472]	@ (8010fc0 <ProcessMacCommands+0x9c8>)
 8010de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010dec:	2b05      	cmp	r3, #5
 8010dee:	f000 80d4 	beq.w	8010f9a <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010df2:	f002 fea6 	bl	8013b42 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010df6:	e0d0      	b.n	8010f9a <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010df8:	2303      	movs	r3, #3
 8010dfa:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010e02:	78fb      	ldrb	r3, [r7, #3]
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	70fa      	strb	r2, [r7, #3]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010e12:	78fb      	ldrb	r3, [r7, #3]
 8010e14:	1c5a      	adds	r2, r3, #1
 8010e16:	70fa      	strb	r2, [r7, #3]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	021b      	lsls	r3, r3, #8
 8010e22:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010e24:	4313      	orrs	r3, r2
 8010e26:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010e28:	78fb      	ldrb	r3, [r7, #3]
 8010e2a:	1c5a      	adds	r2, r3, #1
 8010e2c:	70fa      	strb	r2, [r7, #3]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4413      	add	r3, r2
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	041b      	lsls	r3, r3, #16
 8010e38:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010e40:	2264      	movs	r2, #100	@ 0x64
 8010e42:	fb02 f303 	mul.w	r3, r2, r3
 8010e46:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010e48:	78fb      	ldrb	r3, [r7, #3]
 8010e4a:	1c5a      	adds	r2, r3, #1
 8010e4c:	70fa      	strb	r2, [r7, #3]
 8010e4e:	461a      	mov	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	4413      	add	r3, r2
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	f003 030f 	and.w	r3, r3, #15
 8010e5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010e5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010e62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010e64:	4618      	mov	r0, r3
 8010e66:	f002 fe72 	bl	8013b4e <LoRaMacClassBPingSlotChannelReq>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8010e70:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8010e74:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010e78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	4619      	mov	r1, r3
 8010e80:	2011      	movs	r0, #17
 8010e82:	f002 ffd3 	bl	8013e2c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8010e86:	e08b      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010e88:	200d      	movs	r0, #13
 8010e8a:	f003 faf7 	bl	801447c <LoRaMacConfirmQueueIsCmdActive>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 8084 	beq.w	8010f9e <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010e96:	210d      	movs	r1, #13
 8010e98:	2000      	movs	r0, #0
 8010e9a:	f003 fa63 	bl	8014364 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010eaa:	78fb      	ldrb	r3, [r7, #3]
 8010eac:	1c5a      	adds	r2, r3, #1
 8010eae:	70fa      	strb	r2, [r7, #3]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4413      	add	r3, r2
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010ebc:	78fb      	ldrb	r3, [r7, #3]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	70fa      	strb	r2, [r7, #3]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	021b      	lsls	r3, r3, #8
 8010ecc:	b21a      	sxth	r2, r3
 8010ece:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	b21b      	sxth	r3, r3
 8010ed6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010eda:	78fb      	ldrb	r3, [r7, #3]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	70fa      	strb	r2, [r7, #3]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010eec:	4b35      	ldr	r3, [pc, #212]	@ (8010fc4 <ProcessMacCommands+0x9cc>)
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8010ef4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f002 fe34 	bl	8013b66 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010efe:	e04e      	b.n	8010f9e <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010f06:	78fb      	ldrb	r3, [r7, #3]
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	70fa      	strb	r2, [r7, #3]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4413      	add	r3, r2
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010f18:	78fb      	ldrb	r3, [r7, #3]
 8010f1a:	1c5a      	adds	r2, r3, #1
 8010f1c:	70fa      	strb	r2, [r7, #3]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4413      	add	r3, r2
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	021b      	lsls	r3, r3, #8
 8010f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010f2c:	4313      	orrs	r3, r2
 8010f2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010f32:	78fb      	ldrb	r3, [r7, #3]
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	70fa      	strb	r2, [r7, #3]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	041b      	lsls	r3, r3, #16
 8010f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010f46:	4313      	orrs	r3, r2
 8010f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010f50:	2264      	movs	r2, #100	@ 0x64
 8010f52:	fb02 f303 	mul.w	r3, r2, r3
 8010f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010f5a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010f5e:	f002 fe15 	bl	8013b8c <LoRaMacClassBBeaconFreqReq>
 8010f62:	4603      	mov	r3, r0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d003      	beq.n	8010f70 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8010f6e:	e002      	b.n	8010f76 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010f70:	2300      	movs	r3, #0
 8010f72:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010f76:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	2013      	movs	r0, #19
 8010f80:	f002 ff54 	bl	8013e2c <LoRaMacCommandsAddCmd>
                }
                break;
 8010f84:	e00c      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f86:	bf00      	nop
 8010f88:	e00a      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f8a:	bf00      	nop
 8010f8c:	e008      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f8e:	bf00      	nop
 8010f90:	e006      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f92:	bf00      	nop
 8010f94:	e004      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f96:	bf00      	nop
 8010f98:	e002      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <ProcessMacCommands+0x9a8>
                break;
 8010f9e:	bf00      	nop
    while( macIndex < commandsSize )
 8010fa0:	78fa      	ldrb	r2, [r7, #3]
 8010fa2:	78bb      	ldrb	r3, [r7, #2]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	f4ff ab49 	bcc.w	801063c <ProcessMacCommands+0x44>
 8010faa:	e004      	b.n	8010fb6 <ProcessMacCommands+0x9be>
        return;
 8010fac:	bf00      	nop
 8010fae:	e002      	b.n	8010fb6 <ProcessMacCommands+0x9be>
            return;
 8010fb0:	bf00      	nop
 8010fb2:	e000      	b.n	8010fb6 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010fb4:	bf00      	nop
        }
    }
}
 8010fb6:	378c      	adds	r7, #140	@ 0x8c
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd90      	pop	{r4, r7, pc}
 8010fbc:	12d53d80 	.word	0x12d53d80
 8010fc0:	200008e8 	.word	0x200008e8
 8010fc4:	20001998 	.word	0x20001998

08010fc8 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08e      	sub	sp, #56	@ 0x38
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	607a      	str	r2, [r7, #4]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	72fb      	strb	r3, [r7, #11]
 8010fd8:	4613      	mov	r3, r2
 8010fda:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010fe2:	4b66      	ldr	r3, [pc, #408]	@ (801117c <Send+0x1b4>)
 8010fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010fe8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010fec:	4b63      	ldr	r3, [pc, #396]	@ (801117c <Send+0x1b4>)
 8010fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010ff2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010ff6:	4b61      	ldr	r3, [pc, #388]	@ (801117c <Send+0x1b4>)
 8010ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010ffc:	4b5f      	ldr	r3, [pc, #380]	@ (801117c <Send+0x1b4>)
 8010ffe:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011002:	2b00      	cmp	r3, #0
 8011004:	d101      	bne.n	801100a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011006:	2307      	movs	r3, #7
 8011008:	e0b4      	b.n	8011174 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801100a:	4b5c      	ldr	r3, [pc, #368]	@ (801117c <Send+0x1b4>)
 801100c:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8011010:	2b00      	cmp	r3, #0
 8011012:	d102      	bne.n	801101a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011014:	4b59      	ldr	r3, [pc, #356]	@ (801117c <Send+0x1b4>)
 8011016:	2200      	movs	r2, #0
 8011018:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011020:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011024:	f36f 0303 	bfc	r3, #0, #4
 8011028:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801102c:	4b53      	ldr	r3, [pc, #332]	@ (801117c <Send+0x1b4>)
 801102e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011032:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011036:	f362 13c7 	bfi	r3, r2, #7, #1
 801103a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801103e:	4b4f      	ldr	r3, [pc, #316]	@ (801117c <Send+0x1b4>)
 8011040:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011044:	2b01      	cmp	r3, #1
 8011046:	d106      	bne.n	8011056 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011048:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801104c:	f043 0310 	orr.w	r3, r3, #16
 8011050:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011054:	e005      	b.n	8011062 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011056:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801105a:	f36f 1304 	bfc	r3, #4, #1
 801105e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011062:	4b46      	ldr	r3, [pc, #280]	@ (801117c <Send+0x1b4>)
 8011064:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011068:	2b00      	cmp	r3, #0
 801106a:	d005      	beq.n	8011078 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801106c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011070:	f043 0320 	orr.w	r3, r3, #32
 8011074:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8011078:	2301      	movs	r3, #1
 801107a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801107c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011080:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b00      	cmp	r3, #0
 8011088:	bf14      	ite	ne
 801108a:	2301      	movne	r3, #1
 801108c:	2300      	moveq	r3, #0
 801108e:	b2db      	uxtb	r3, r3
 8011090:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011092:	4b3a      	ldr	r3, [pc, #232]	@ (801117c <Send+0x1b4>)
 8011094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011096:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011098:	4b39      	ldr	r3, [pc, #228]	@ (8011180 <Send+0x1b8>)
 801109a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 801109e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80110a0:	4b37      	ldr	r3, [pc, #220]	@ (8011180 <Send+0x1b8>)
 80110a2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80110a6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80110a8:	4b34      	ldr	r3, [pc, #208]	@ (801117c <Send+0x1b4>)
 80110aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80110ae:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80110b2:	4b32      	ldr	r3, [pc, #200]	@ (801117c <Send+0x1b4>)
 80110b4:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80110b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80110bc:	4b2f      	ldr	r3, [pc, #188]	@ (801117c <Send+0x1b4>)
 80110be:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80110c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80110c6:	4b2d      	ldr	r3, [pc, #180]	@ (801117c <Send+0x1b4>)
 80110c8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80110cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80110d0:	4b2a      	ldr	r3, [pc, #168]	@ (801117c <Send+0x1b4>)
 80110d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80110d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80110da:	f107 0014 	add.w	r0, r7, #20
 80110de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	4b27      	ldr	r3, [pc, #156]	@ (8011184 <Send+0x1bc>)
 80110e6:	4a28      	ldr	r2, [pc, #160]	@ (8011188 <Send+0x1c0>)
 80110e8:	4928      	ldr	r1, [pc, #160]	@ (801118c <Send+0x1c4>)
 80110ea:	f002 fbc9 	bl	8013880 <LoRaMacAdrCalcNext>
 80110ee:	4603      	mov	r3, r0
 80110f0:	461a      	mov	r2, r3
 80110f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80110f6:	f362 1386 	bfi	r3, r2, #6, #1
 80110fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80110fe:	7afa      	ldrb	r2, [r7, #11]
 8011100:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011104:	893b      	ldrh	r3, [r7, #8]
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f000 fc42 	bl	8011994 <PrepareFrame>
 8011110:	4603      	mov	r3, r0
 8011112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801111a:	2b00      	cmp	r3, #0
 801111c:	d003      	beq.n	8011126 <Send+0x15e>
 801111e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011122:	2b0a      	cmp	r3, #10
 8011124:	d107      	bne.n	8011136 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011126:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801112a:	4618      	mov	r0, r3
 801112c:	f000 f96e 	bl	801140c <ScheduleTx>
 8011130:	4603      	mov	r3, r0
 8011132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00a      	beq.n	8011154 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801113e:	4a0f      	ldr	r2, [pc, #60]	@ (801117c <Send+0x1b4>)
 8011140:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011144:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011148:	4a0c      	ldr	r2, [pc, #48]	@ (801117c <Send+0x1b4>)
 801114a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801114e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8011152:	e00d      	b.n	8011170 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011154:	4b09      	ldr	r3, [pc, #36]	@ (801117c <Send+0x1b4>)
 8011156:	2200      	movs	r2, #0
 8011158:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801115c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115e:	4a07      	ldr	r2, [pc, #28]	@ (801117c <Send+0x1b4>)
 8011160:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011162:	f002 fedb 	bl	8013f1c <LoRaMacCommandsRemoveNoneStickyCmds>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801116c:	2313      	movs	r3, #19
 801116e:	e001      	b.n	8011174 <Send+0x1ac>
        }
    }
    return status;
 8011170:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011174:	4618      	mov	r0, r3
 8011176:	3730      	adds	r7, #48	@ 0x30
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	20000e08 	.word	0x20000e08
 8011180:	200008e8 	.word	0x200008e8
 8011184:	20000e68 	.word	0x20000e68
 8011188:	20000e40 	.word	0x20000e40
 801118c:	20000e41 	.word	0x20000e41

08011190 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	4603      	mov	r3, r0
 8011198:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80111a2:	2301      	movs	r3, #1
 80111a4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80111a6:	79fb      	ldrb	r3, [r7, #7]
 80111a8:	2bff      	cmp	r3, #255	@ 0xff
 80111aa:	d129      	bne.n	8011200 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80111ac:	2000      	movs	r0, #0
 80111ae:	f7ff f901 	bl	80103b4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80111b2:	4b1a      	ldr	r3, [pc, #104]	@ (801121c <SendReJoinReq+0x8c>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80111ba:	4b18      	ldr	r3, [pc, #96]	@ (801121c <SendReJoinReq+0x8c>)
 80111bc:	4a18      	ldr	r2, [pc, #96]	@ (8011220 <SendReJoinReq+0x90>)
 80111be:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80111c2:	4b16      	ldr	r3, [pc, #88]	@ (801121c <SendReJoinReq+0x8c>)
 80111c4:	22ff      	movs	r2, #255	@ 0xff
 80111c6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80111ca:	7b3b      	ldrb	r3, [r7, #12]
 80111cc:	f36f 1347 	bfc	r3, #5, #3
 80111d0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80111d2:	7b3a      	ldrb	r2, [r7, #12]
 80111d4:	4b11      	ldr	r3, [pc, #68]	@ (801121c <SendReJoinReq+0x8c>)
 80111d6:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80111da:	f7fc f869 	bl	800d2b0 <SecureElementGetJoinEui>
 80111de:	4603      	mov	r3, r0
 80111e0:	2208      	movs	r2, #8
 80111e2:	4619      	mov	r1, r3
 80111e4:	480f      	ldr	r0, [pc, #60]	@ (8011224 <SendReJoinReq+0x94>)
 80111e6:	f006 fe38 	bl	8017e5a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80111ea:	f7fc f83f 	bl	800d26c <SecureElementGetDevEui>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2208      	movs	r2, #8
 80111f2:	4619      	mov	r1, r3
 80111f4:	480c      	ldr	r0, [pc, #48]	@ (8011228 <SendReJoinReq+0x98>)
 80111f6:	f006 fe30 	bl	8017e5a <memcpy1>

            allowDelayedTx = false;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73fb      	strb	r3, [r7, #15]

            break;
 80111fe:	e002      	b.n	8011206 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011200:	2302      	movs	r3, #2
 8011202:	73bb      	strb	r3, [r7, #14]
            break;
 8011204:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011206:	7bfb      	ldrb	r3, [r7, #15]
 8011208:	4618      	mov	r0, r3
 801120a:	f000 f8ff 	bl	801140c <ScheduleTx>
 801120e:	4603      	mov	r3, r0
 8011210:	73bb      	strb	r3, [r7, #14]
    return status;
 8011212:	7bbb      	ldrb	r3, [r7, #14]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3710      	adds	r7, #16
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	200008e8 	.word	0x200008e8
 8011220:	200008ea 	.word	0x200008ea
 8011224:	200009f6 	.word	0x200009f6
 8011228:	200009fe 	.word	0x200009fe

0801122c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011230:	f002 fc36 	bl	8013aa0 <LoRaMacClassBIsBeaconExpected>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d001      	beq.n	801123e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801123a:	230e      	movs	r3, #14
 801123c:	e013      	b.n	8011266 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801123e:	4b0b      	ldr	r3, [pc, #44]	@ (801126c <CheckForClassBCollision+0x40>)
 8011240:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011244:	2b01      	cmp	r3, #1
 8011246:	d10d      	bne.n	8011264 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011248:	f002 fc31 	bl	8013aae <LoRaMacClassBIsPingExpected>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011252:	230f      	movs	r3, #15
 8011254:	e007      	b.n	8011266 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011256:	f002 fc31 	bl	8013abc <LoRaMacClassBIsMulticastExpected>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011260:	230f      	movs	r3, #15
 8011262:	e000      	b.n	8011266 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	20000e08 	.word	0x20000e08

08011270 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011270:	b590      	push	{r4, r7, lr}
 8011272:	b083      	sub	sp, #12
 8011274:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011276:	4b2d      	ldr	r3, [pc, #180]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 8011278:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801127c:	4b2b      	ldr	r3, [pc, #172]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 801127e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011282:	4b2a      	ldr	r3, [pc, #168]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 8011284:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 8011288:	4b28      	ldr	r3, [pc, #160]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 801128a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801128e:	4b27      	ldr	r3, [pc, #156]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 8011290:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011294:	b25b      	sxtb	r3, r3
 8011296:	f004 fc94 	bl	8015bc2 <RegionApplyDrOffset>
 801129a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801129c:	b259      	sxtb	r1, r3
 801129e:	4b23      	ldr	r3, [pc, #140]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112a0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80112a4:	4b21      	ldr	r3, [pc, #132]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112a8:	4821      	ldr	r0, [pc, #132]	@ (8011330 <ComputeRxWindowParameters+0xc0>)
 80112aa:	9000      	str	r0, [sp, #0]
 80112ac:	4620      	mov	r0, r4
 80112ae:	f004 fbaa 	bl	8015a06 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80112b2:	4b1e      	ldr	r3, [pc, #120]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112b4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80112b8:	4b1c      	ldr	r3, [pc, #112]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112ba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80112be:	b259      	sxtb	r1, r3
 80112c0:	4b1a      	ldr	r3, [pc, #104]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112c2:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80112c6:	4b19      	ldr	r3, [pc, #100]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112ca:	4c1a      	ldr	r4, [pc, #104]	@ (8011334 <ComputeRxWindowParameters+0xc4>)
 80112cc:	9400      	str	r4, [sp, #0]
 80112ce:	f004 fb9a 	bl	8015a06 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80112d2:	4b16      	ldr	r3, [pc, #88]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112d6:	4a18      	ldr	r2, [pc, #96]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 80112d8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80112dc:	4413      	add	r3, r2
 80112de:	4a16      	ldr	r2, [pc, #88]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 80112e0:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80112e4:	4b11      	ldr	r3, [pc, #68]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112e8:	4a13      	ldr	r2, [pc, #76]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 80112ea:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80112ee:	4413      	add	r3, r2
 80112f0:	4a11      	ldr	r2, [pc, #68]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 80112f2:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80112f6:	4b0d      	ldr	r3, [pc, #52]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 80112f8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d111      	bne.n	8011324 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011300:	4b0a      	ldr	r3, [pc, #40]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 8011302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011304:	4a0c      	ldr	r2, [pc, #48]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 8011306:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 801130a:	4413      	add	r3, r2
 801130c:	4a0a      	ldr	r2, [pc, #40]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 801130e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011312:	4b06      	ldr	r3, [pc, #24]	@ (801132c <ComputeRxWindowParameters+0xbc>)
 8011314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011316:	4a08      	ldr	r2, [pc, #32]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 8011318:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 801131c:	4413      	add	r3, r2
 801131e:	4a06      	ldr	r2, [pc, #24]	@ (8011338 <ComputeRxWindowParameters+0xc8>)
 8011320:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8011324:	bf00      	nop
 8011326:	3704      	adds	r7, #4
 8011328:	46bd      	mov	sp, r7
 801132a:	bd90      	pop	{r4, r7, pc}
 801132c:	20000e08 	.word	0x20000e08
 8011330:	20000ca0 	.word	0x20000ca0
 8011334:	20000cb8 	.word	0x20000cb8
 8011338:	200008e8 	.word	0x200008e8

0801133c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011346:	4b13      	ldr	r3, [pc, #76]	@ (8011394 <VerifyTxFrame+0x58>)
 8011348:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d01b      	beq.n	8011388 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011350:	1d3b      	adds	r3, r7, #4
 8011352:	4618      	mov	r0, r3
 8011354:	f002 fe28 	bl	8013fa8 <LoRaMacCommandsGetSizeSerializedCmds>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801135e:	2313      	movs	r3, #19
 8011360:	e013      	b.n	801138a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011362:	4b0d      	ldr	r3, [pc, #52]	@ (8011398 <VerifyTxFrame+0x5c>)
 8011364:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011368:	4a0a      	ldr	r2, [pc, #40]	@ (8011394 <VerifyTxFrame+0x58>)
 801136a:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	b2d2      	uxtb	r2, r2
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff f918 	bl	80105a8 <ValidatePayloadLength>
 8011378:	4603      	mov	r3, r0
 801137a:	f083 0301 	eor.w	r3, r3, #1
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b00      	cmp	r3, #0
 8011382:	d001      	beq.n	8011388 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011384:	2308      	movs	r3, #8
 8011386:	e000      	b.n	801138a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011388:	2300      	movs	r3, #0
}
 801138a:	4618      	mov	r0, r3
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	20000e08 	.word	0x20000e08
 8011398:	200008e8 	.word	0x200008e8

0801139c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80113a2:	4b18      	ldr	r3, [pc, #96]	@ (8011404 <SerializeTxFrame+0x68>)
 80113a4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d002      	beq.n	80113b2 <SerializeTxFrame+0x16>
 80113ac:	2b04      	cmp	r3, #4
 80113ae:	d011      	beq.n	80113d4 <SerializeTxFrame+0x38>
 80113b0:	e021      	b.n	80113f6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80113b2:	4815      	ldr	r0, [pc, #84]	@ (8011408 <SerializeTxFrame+0x6c>)
 80113b4:	f004 f929 	bl	801560a <LoRaMacSerializerJoinRequest>
 80113b8:	4603      	mov	r3, r0
 80113ba:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80113c2:	2311      	movs	r3, #17
 80113c4:	e01a      	b.n	80113fc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80113c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011404 <SerializeTxFrame+0x68>)
 80113c8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80113cc:	461a      	mov	r2, r3
 80113ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011404 <SerializeTxFrame+0x68>)
 80113d0:	801a      	strh	r2, [r3, #0]
            break;
 80113d2:	e012      	b.n	80113fa <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80113d4:	480c      	ldr	r0, [pc, #48]	@ (8011408 <SerializeTxFrame+0x6c>)
 80113d6:	f004 f99a 	bl	801570e <LoRaMacSerializerData>
 80113da:	4603      	mov	r3, r0
 80113dc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80113de:	79fb      	ldrb	r3, [r7, #7]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80113e4:	2311      	movs	r3, #17
 80113e6:	e009      	b.n	80113fc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80113e8:	4b06      	ldr	r3, [pc, #24]	@ (8011404 <SerializeTxFrame+0x68>)
 80113ea:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80113ee:	461a      	mov	r2, r3
 80113f0:	4b04      	ldr	r3, [pc, #16]	@ (8011404 <SerializeTxFrame+0x68>)
 80113f2:	801a      	strh	r2, [r3, #0]
            break;
 80113f4:	e001      	b.n	80113fa <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80113f6:	2303      	movs	r3, #3
 80113f8:	e000      	b.n	80113fc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	200008e8 	.word	0x200008e8
 8011408:	200009f0 	.word	0x200009f0

0801140c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b090      	sub	sp, #64	@ 0x40
 8011410:	af02      	add	r7, sp, #8
 8011412:	4603      	mov	r3, r0
 8011414:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011416:	2303      	movs	r3, #3
 8011418:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801141c:	f7ff ff06 	bl	801122c <CheckForClassBCollision>
 8011420:	4603      	mov	r3, r0
 8011422:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011426:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <ScheduleTx+0x28>
    {
        return status;
 801142e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011432:	e08f      	b.n	8011554 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011434:	f000 f8f4 	bl	8011620 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011438:	f7ff ffb0 	bl	801139c <SerializeTxFrame>
 801143c:	4603      	mov	r3, r0
 801143e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011442:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011446:	2b00      	cmp	r3, #0
 8011448:	d002      	beq.n	8011450 <ScheduleTx+0x44>
    {
        return status;
 801144a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801144e:	e081      	b.n	8011554 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011450:	4b42      	ldr	r3, [pc, #264]	@ (801155c <ScheduleTx+0x150>)
 8011452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011454:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011456:	4b41      	ldr	r3, [pc, #260]	@ (801155c <ScheduleTx+0x150>)
 8011458:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801145c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801145e:	4b3f      	ldr	r3, [pc, #252]	@ (801155c <ScheduleTx+0x150>)
 8011460:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8011464:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801146a:	4618      	mov	r0, r3
 801146c:	f00a f90c 	bl	801b688 <SysTimeGetMcuTime>
 8011470:	4638      	mov	r0, r7
 8011472:	4b3a      	ldr	r3, [pc, #232]	@ (801155c <ScheduleTx+0x150>)
 8011474:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8011478:	9200      	str	r2, [sp, #0]
 801147a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801147e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011482:	ca06      	ldmia	r2, {r1, r2}
 8011484:	f00a f861 	bl	801b54a <SysTimeSub>
 8011488:	f107 0320 	add.w	r3, r7, #32
 801148c:	463a      	mov	r2, r7
 801148e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011492:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011496:	4b31      	ldr	r3, [pc, #196]	@ (801155c <ScheduleTx+0x150>)
 8011498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801149a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 801149c:	2300      	movs	r3, #0
 801149e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80114a2:	2301      	movs	r3, #1
 80114a4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80114a6:	4b2e      	ldr	r3, [pc, #184]	@ (8011560 <ScheduleTx+0x154>)
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80114ac:	4b2b      	ldr	r3, [pc, #172]	@ (801155c <ScheduleTx+0x150>)
 80114ae:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d104      	bne.n	80114c0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80114b6:	2301      	movs	r3, #1
 80114b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80114bc:	2300      	movs	r3, #0
 80114be:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80114c0:	4b26      	ldr	r3, [pc, #152]	@ (801155c <ScheduleTx+0x150>)
 80114c2:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80114c6:	f107 0114 	add.w	r1, r7, #20
 80114ca:	4b26      	ldr	r3, [pc, #152]	@ (8011564 <ScheduleTx+0x158>)
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	4b26      	ldr	r3, [pc, #152]	@ (8011568 <ScheduleTx+0x15c>)
 80114d0:	4a26      	ldr	r2, [pc, #152]	@ (801156c <ScheduleTx+0x160>)
 80114d2:	f004 fb5e 	bl	8015b92 <RegionNextChannel>
 80114d6:	4603      	mov	r3, r0
 80114d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80114dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d022      	beq.n	801152a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80114e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114e8:	2b0b      	cmp	r3, #11
 80114ea:	d11b      	bne.n	8011524 <ScheduleTx+0x118>
 80114ec:	7bfb      	ldrb	r3, [r7, #15]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d018      	beq.n	8011524 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80114f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011560 <ScheduleTx+0x154>)
 80114f4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d011      	beq.n	8011520 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80114fc:	4b18      	ldr	r3, [pc, #96]	@ (8011560 <ScheduleTx+0x154>)
 80114fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011502:	f043 0320 	orr.w	r3, r3, #32
 8011506:	4a16      	ldr	r2, [pc, #88]	@ (8011560 <ScheduleTx+0x154>)
 8011508:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801150c:	4b14      	ldr	r3, [pc, #80]	@ (8011560 <ScheduleTx+0x154>)
 801150e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8011512:	4619      	mov	r1, r3
 8011514:	4816      	ldr	r0, [pc, #88]	@ (8011570 <ScheduleTx+0x164>)
 8011516:	f00a fe55 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801151a:	4815      	ldr	r0, [pc, #84]	@ (8011570 <ScheduleTx+0x164>)
 801151c:	f00a fd74 	bl	801c008 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011520:	2300      	movs	r3, #0
 8011522:	e017      	b.n	8011554 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011524:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011528:	e014      	b.n	8011554 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801152a:	f7ff fea1 	bl	8011270 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801152e:	f7ff ff05 	bl	801133c <VerifyTxFrame>
 8011532:	4603      	mov	r3, r0
 8011534:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011538:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <ScheduleTx+0x13a>
    {
        return status;
 8011540:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011544:	e006      	b.n	8011554 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011546:	4b06      	ldr	r3, [pc, #24]	@ (8011560 <ScheduleTx+0x154>)
 8011548:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 801154c:	4618      	mov	r0, r3
 801154e:	f000 fb3b 	bl	8011bc8 <SendFrameOnChannel>
 8011552:	4603      	mov	r3, r0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3738      	adds	r7, #56	@ 0x38
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	20000e08 	.word	0x20000e08
 8011560:	200008e8 	.word	0x200008e8
 8011564:	20000e38 	.word	0x20000e38
 8011568:	20000d80 	.word	0x20000d80
 801156c:	20000d07 	.word	0x20000d07
 8011570:	20000c50 	.word	0x20000c50

08011574 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	4603      	mov	r3, r0
 801157c:	460a      	mov	r2, r1
 801157e:	71fb      	strb	r3, [r7, #7]
 8011580:	4613      	mov	r3, r2
 8011582:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011584:	2312      	movs	r3, #18
 8011586:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011588:	2300      	movs	r3, #0
 801158a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801158c:	4b22      	ldr	r3, [pc, #136]	@ (8011618 <SecureFrame+0xa4>)
 801158e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <SecureFrame+0x28>
 8011596:	2b04      	cmp	r3, #4
 8011598:	d011      	beq.n	80115be <SecureFrame+0x4a>
 801159a:	e036      	b.n	801160a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801159c:	481f      	ldr	r0, [pc, #124]	@ (801161c <SecureFrame+0xa8>)
 801159e:	f003 fc07 	bl	8014db0 <LoRaMacCryptoPrepareJoinRequest>
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80115ac:	2311      	movs	r3, #17
 80115ae:	e02f      	b.n	8011610 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80115b0:	4b19      	ldr	r3, [pc, #100]	@ (8011618 <SecureFrame+0xa4>)
 80115b2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80115b6:	461a      	mov	r2, r3
 80115b8:	4b17      	ldr	r3, [pc, #92]	@ (8011618 <SecureFrame+0xa4>)
 80115ba:	801a      	strh	r2, [r3, #0]
            break;
 80115bc:	e027      	b.n	801160e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80115be:	f107 0308 	add.w	r3, r7, #8
 80115c2:	4618      	mov	r0, r3
 80115c4:	f003 fb38 	bl	8014c38 <LoRaMacCryptoGetFCntUp>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80115ce:	2312      	movs	r3, #18
 80115d0:	e01e      	b.n	8011610 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80115d2:	4b11      	ldr	r3, [pc, #68]	@ (8011618 <SecureFrame+0xa4>)
 80115d4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d002      	beq.n	80115e2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	3b01      	subs	r3, #1
 80115e0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80115e2:	68b8      	ldr	r0, [r7, #8]
 80115e4:	79ba      	ldrb	r2, [r7, #6]
 80115e6:	79f9      	ldrb	r1, [r7, #7]
 80115e8:	4b0c      	ldr	r3, [pc, #48]	@ (801161c <SecureFrame+0xa8>)
 80115ea:	f003 fcf3 	bl	8014fd4 <LoRaMacCryptoSecureMessage>
 80115ee:	4603      	mov	r3, r0
 80115f0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80115f2:	7bfb      	ldrb	r3, [r7, #15]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80115f8:	2311      	movs	r3, #17
 80115fa:	e009      	b.n	8011610 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80115fc:	4b06      	ldr	r3, [pc, #24]	@ (8011618 <SecureFrame+0xa4>)
 80115fe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011602:	461a      	mov	r2, r3
 8011604:	4b04      	ldr	r3, [pc, #16]	@ (8011618 <SecureFrame+0xa4>)
 8011606:	801a      	strh	r2, [r3, #0]
            break;
 8011608:	e001      	b.n	801160e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801160a:	2303      	movs	r3, #3
 801160c:	e000      	b.n	8011610 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	200008e8 	.word	0x200008e8
 801161c:	200009f0 	.word	0x200009f0

08011620 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011620:	b480      	push	{r7}
 8011622:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011624:	4b09      	ldr	r3, [pc, #36]	@ (801164c <CalculateBackOff+0x2c>)
 8011626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10a      	bne.n	8011642 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801162c:	4b07      	ldr	r3, [pc, #28]	@ (801164c <CalculateBackOff+0x2c>)
 801162e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8011632:	3b01      	subs	r3, #1
 8011634:	4a06      	ldr	r2, [pc, #24]	@ (8011650 <CalculateBackOff+0x30>)
 8011636:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 801163a:	fb02 f303 	mul.w	r3, r2, r3
 801163e:	4a03      	ldr	r2, [pc, #12]	@ (801164c <CalculateBackOff+0x2c>)
 8011640:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8011642:	bf00      	nop
 8011644:	46bd      	mov	sp, r7
 8011646:	bc80      	pop	{r7}
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	20000e08 	.word	0x20000e08
 8011650:	200008e8 	.word	0x200008e8

08011654 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	4603      	mov	r3, r0
 801165c:	7139      	strb	r1, [r7, #4]
 801165e:	71fb      	strb	r3, [r7, #7]
 8011660:	4613      	mov	r3, r2
 8011662:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011664:	79fb      	ldrb	r3, [r7, #7]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d002      	beq.n	8011670 <RemoveMacCommands+0x1c>
 801166a:	79fb      	ldrb	r3, [r7, #7]
 801166c:	2b01      	cmp	r3, #1
 801166e:	d10d      	bne.n	801168c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011670:	79bb      	ldrb	r3, [r7, #6]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d108      	bne.n	8011688 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011676:	793b      	ldrb	r3, [r7, #4]
 8011678:	f003 0320 	and.w	r3, r3, #32
 801167c:	b2db      	uxtb	r3, r3
 801167e:	2b00      	cmp	r3, #0
 8011680:	d004      	beq.n	801168c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011682:	f002 fc6f 	bl	8013f64 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011686:	e001      	b.n	801168c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011688:	f002 fc6c 	bl	8013f64 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801168c:	bf00      	nop
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011694:	b5b0      	push	{r4, r5, r7, lr}
 8011696:	b090      	sub	sp, #64	@ 0x40
 8011698:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801169a:	4b70      	ldr	r3, [pc, #448]	@ (801185c <ResetMacParameters+0x1c8>)
 801169c:	2200      	movs	r2, #0
 801169e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80116a2:	4b6e      	ldr	r3, [pc, #440]	@ (801185c <ResetMacParameters+0x1c8>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80116a8:	4b6d      	ldr	r3, [pc, #436]	@ (8011860 <ResetMacParameters+0x1cc>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80116b0:	4b6b      	ldr	r3, [pc, #428]	@ (8011860 <ResetMacParameters+0x1cc>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80116b8:	4b69      	ldr	r3, [pc, #420]	@ (8011860 <ResetMacParameters+0x1cc>)
 80116ba:	2200      	movs	r2, #0
 80116bc:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80116c0:	4b66      	ldr	r3, [pc, #408]	@ (801185c <ResetMacParameters+0x1c8>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80116c8:	4b64      	ldr	r3, [pc, #400]	@ (801185c <ResetMacParameters+0x1c8>)
 80116ca:	2201      	movs	r2, #1
 80116cc:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80116d0:	4b62      	ldr	r3, [pc, #392]	@ (801185c <ResetMacParameters+0x1c8>)
 80116d2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80116d6:	4b61      	ldr	r3, [pc, #388]	@ (801185c <ResetMacParameters+0x1c8>)
 80116d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80116dc:	4b5f      	ldr	r3, [pc, #380]	@ (801185c <ResetMacParameters+0x1c8>)
 80116de:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80116e2:	4b5e      	ldr	r3, [pc, #376]	@ (801185c <ResetMacParameters+0x1c8>)
 80116e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80116e8:	4b5c      	ldr	r3, [pc, #368]	@ (801185c <ResetMacParameters+0x1c8>)
 80116ea:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80116ee:	4b5b      	ldr	r3, [pc, #364]	@ (801185c <ResetMacParameters+0x1c8>)
 80116f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80116f4:	4b59      	ldr	r3, [pc, #356]	@ (801185c <ResetMacParameters+0x1c8>)
 80116f6:	4a59      	ldr	r2, [pc, #356]	@ (801185c <ResetMacParameters+0x1c8>)
 80116f8:	3364      	adds	r3, #100	@ 0x64
 80116fa:	32a8      	adds	r2, #168	@ 0xa8
 80116fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011700:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011704:	4b55      	ldr	r3, [pc, #340]	@ (801185c <ResetMacParameters+0x1c8>)
 8011706:	4a55      	ldr	r2, [pc, #340]	@ (801185c <ResetMacParameters+0x1c8>)
 8011708:	336c      	adds	r3, #108	@ 0x6c
 801170a:	32b0      	adds	r2, #176	@ 0xb0
 801170c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011710:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011714:	4b51      	ldr	r3, [pc, #324]	@ (801185c <ResetMacParameters+0x1c8>)
 8011716:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 801171a:	4b50      	ldr	r3, [pc, #320]	@ (801185c <ResetMacParameters+0x1c8>)
 801171c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011720:	4b4e      	ldr	r3, [pc, #312]	@ (801185c <ResetMacParameters+0x1c8>)
 8011722:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8011726:	4b4d      	ldr	r3, [pc, #308]	@ (801185c <ResetMacParameters+0x1c8>)
 8011728:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801172c:	4b4b      	ldr	r3, [pc, #300]	@ (801185c <ResetMacParameters+0x1c8>)
 801172e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011732:	4a4a      	ldr	r2, [pc, #296]	@ (801185c <ResetMacParameters+0x1c8>)
 8011734:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011736:	4b49      	ldr	r3, [pc, #292]	@ (801185c <ResetMacParameters+0x1c8>)
 8011738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801173c:	4a47      	ldr	r2, [pc, #284]	@ (801185c <ResetMacParameters+0x1c8>)
 801173e:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8011740:	4b47      	ldr	r3, [pc, #284]	@ (8011860 <ResetMacParameters+0x1cc>)
 8011742:	2200      	movs	r2, #0
 8011744:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8011748:	4b44      	ldr	r3, [pc, #272]	@ (801185c <ResetMacParameters+0x1c8>)
 801174a:	2200      	movs	r2, #0
 801174c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011750:	4b42      	ldr	r3, [pc, #264]	@ (801185c <ResetMacParameters+0x1c8>)
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8011758:	4b40      	ldr	r3, [pc, #256]	@ (801185c <ResetMacParameters+0x1c8>)
 801175a:	2200      	movs	r2, #0
 801175c:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011760:	2301      	movs	r3, #1
 8011762:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011764:	4b3f      	ldr	r3, [pc, #252]	@ (8011864 <ResetMacParameters+0x1d0>)
 8011766:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011768:	4b3f      	ldr	r3, [pc, #252]	@ (8011868 <ResetMacParameters+0x1d4>)
 801176a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 801176c:	4b3f      	ldr	r3, [pc, #252]	@ (801186c <ResetMacParameters+0x1d8>)
 801176e:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011770:	4b3a      	ldr	r3, [pc, #232]	@ (801185c <ResetMacParameters+0x1c8>)
 8011772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011776:	1d3a      	adds	r2, r7, #4
 8011778:	4611      	mov	r1, r2
 801177a:	4618      	mov	r0, r3
 801177c:	f004 f8f5 	bl	801596a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011780:	4b37      	ldr	r3, [pc, #220]	@ (8011860 <ResetMacParameters+0x1cc>)
 8011782:	2200      	movs	r2, #0
 8011784:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011788:	4b35      	ldr	r3, [pc, #212]	@ (8011860 <ResetMacParameters+0x1cc>)
 801178a:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801178e:	4b34      	ldr	r3, [pc, #208]	@ (8011860 <ResetMacParameters+0x1cc>)
 8011790:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011794:	4b31      	ldr	r3, [pc, #196]	@ (801185c <ResetMacParameters+0x1c8>)
 8011796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011798:	4a31      	ldr	r2, [pc, #196]	@ (8011860 <ResetMacParameters+0x1cc>)
 801179a:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801179e:	4b2f      	ldr	r3, [pc, #188]	@ (801185c <ResetMacParameters+0x1c8>)
 80117a0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80117a4:	4b2e      	ldr	r3, [pc, #184]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117a6:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80117aa:	4b2c      	ldr	r3, [pc, #176]	@ (801185c <ResetMacParameters+0x1c8>)
 80117ac:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80117b0:	4b2b      	ldr	r3, [pc, #172]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117b2:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80117b6:	4b2a      	ldr	r3, [pc, #168]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80117be:	4b28      	ldr	r3, [pc, #160]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117c0:	2201      	movs	r2, #1
 80117c2:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80117c6:	4b25      	ldr	r3, [pc, #148]	@ (801185c <ResetMacParameters+0x1c8>)
 80117c8:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80117cc:	4b24      	ldr	r3, [pc, #144]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117ce:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80117d2:	4a23      	ldr	r2, [pc, #140]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117d4:	4b22      	ldr	r3, [pc, #136]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117d6:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80117da:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80117de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80117e6:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80117ea:	4b1d      	ldr	r3, [pc, #116]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117ec:	2201      	movs	r2, #1
 80117ee:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80117f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011860 <ResetMacParameters+0x1cc>)
 80117f4:	2202      	movs	r2, #2
 80117f6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80117fe:	2300      	movs	r3, #0
 8011800:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011802:	4b17      	ldr	r3, [pc, #92]	@ (8011860 <ResetMacParameters+0x1cc>)
 8011804:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011808:	2b00      	cmp	r3, #0
 801180a:	d009      	beq.n	8011820 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801180c:	4b14      	ldr	r3, [pc, #80]	@ (8011860 <ResetMacParameters+0x1cc>)
 801180e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011816:	4b12      	ldr	r3, [pc, #72]	@ (8011860 <ResetMacParameters+0x1cc>)
 8011818:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011820:	4b13      	ldr	r3, [pc, #76]	@ (8011870 <ResetMacParameters+0x1dc>)
 8011822:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011824:	4b13      	ldr	r3, [pc, #76]	@ (8011874 <ResetMacParameters+0x1e0>)
 8011826:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011828:	4b13      	ldr	r3, [pc, #76]	@ (8011878 <ResetMacParameters+0x1e4>)
 801182a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801182c:	4b13      	ldr	r3, [pc, #76]	@ (801187c <ResetMacParameters+0x1e8>)
 801182e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011830:	4b13      	ldr	r3, [pc, #76]	@ (8011880 <ResetMacParameters+0x1ec>)
 8011832:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011834:	4b13      	ldr	r3, [pc, #76]	@ (8011884 <ResetMacParameters+0x1f0>)
 8011836:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011838:	4b13      	ldr	r3, [pc, #76]	@ (8011888 <ResetMacParameters+0x1f4>)
 801183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801183c:	4b13      	ldr	r3, [pc, #76]	@ (801188c <ResetMacParameters+0x1f8>)
 801183e:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011840:	4b13      	ldr	r3, [pc, #76]	@ (8011890 <ResetMacParameters+0x1fc>)
 8011842:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011844:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011848:	f107 0314 	add.w	r3, r7, #20
 801184c:	4a11      	ldr	r2, [pc, #68]	@ (8011894 <ResetMacParameters+0x200>)
 801184e:	4618      	mov	r0, r3
 8011850:	f002 f8cf 	bl	80139f2 <LoRaMacClassBInit>
}
 8011854:	bf00      	nop
 8011856:	3740      	adds	r7, #64	@ 0x40
 8011858:	46bd      	mov	sp, r7
 801185a:	bdb0      	pop	{r4, r5, r7, pc}
 801185c:	20000e08 	.word	0x20000e08
 8011860:	200008e8 	.word	0x200008e8
 8011864:	20000fec 	.word	0x20000fec
 8011868:	20000ff0 	.word	0x20000ff0
 801186c:	20001900 	.word	0x20001900
 8011870:	20000d54 	.word	0x20000d54
 8011874:	20000d0c 	.word	0x20000d0c
 8011878:	20000d40 	.word	0x20000d40
 801187c:	20000d7d 	.word	0x20000d7d
 8011880:	20000edc 	.word	0x20000edc
 8011884:	20000e48 	.word	0x20000e48
 8011888:	20000e4c 	.word	0x20000e4c
 801188c:	20000ee0 	.word	0x20000ee0
 8011890:	20000f24 	.word	0x20000f24
 8011894:	2000136c 	.word	0x2000136c

08011898 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f00a fc1e 	bl	801c0e4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80118a8:	4b11      	ldr	r3, [pc, #68]	@ (80118f0 <RxWindowSetup+0x58>)
 80118aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118ac:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80118ae:	4b11      	ldr	r3, [pc, #68]	@ (80118f4 <RxWindowSetup+0x5c>)
 80118b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118b4:	4a10      	ldr	r2, [pc, #64]	@ (80118f8 <RxWindowSetup+0x60>)
 80118b6:	6839      	ldr	r1, [r7, #0]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f004 f8be 	bl	8015a3a <RegionRxConfig>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d010      	beq.n	80118e6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80118c4:	4b0d      	ldr	r3, [pc, #52]	@ (80118fc <RxWindowSetup+0x64>)
 80118c6:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 80118ca:	4b0c      	ldr	r3, [pc, #48]	@ (80118fc <RxWindowSetup+0x64>)
 80118cc:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80118d0:	4b07      	ldr	r3, [pc, #28]	@ (80118f0 <RxWindowSetup+0x58>)
 80118d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118d4:	4a07      	ldr	r2, [pc, #28]	@ (80118f4 <RxWindowSetup+0x5c>)
 80118d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80118d8:	4610      	mov	r0, r2
 80118da:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	7cda      	ldrb	r2, [r3, #19]
 80118e0:	4b06      	ldr	r3, [pc, #24]	@ (80118fc <RxWindowSetup+0x64>)
 80118e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	08020450 	.word	0x08020450
 80118f4:	20000e08 	.word	0x20000e08
 80118f8:	20000d10 	.word	0x20000d10
 80118fc:	200008e8 	.word	0x200008e8

08011900 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011900:	b590      	push	{r4, r7, lr}
 8011902:	b083      	sub	sp, #12
 8011904:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011906:	4b1e      	ldr	r3, [pc, #120]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 8011908:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801190c:	4b1c      	ldr	r3, [pc, #112]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 801190e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011912:	b259      	sxtb	r1, r3
 8011914:	4b1a      	ldr	r3, [pc, #104]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 8011916:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801191a:	4b19      	ldr	r3, [pc, #100]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 801191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801191e:	4c19      	ldr	r4, [pc, #100]	@ (8011984 <OpenContinuousRxCWindow+0x84>)
 8011920:	9400      	str	r4, [sp, #0]
 8011922:	f004 f870 	bl	8015a06 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011926:	4b18      	ldr	r3, [pc, #96]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 8011928:	2202      	movs	r2, #2
 801192a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801192e:	4b14      	ldr	r3, [pc, #80]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 8011930:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011934:	4b14      	ldr	r3, [pc, #80]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 8011936:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801193a:	4b13      	ldr	r3, [pc, #76]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 801193c:	2201      	movs	r2, #1
 801193e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011942:	4b0f      	ldr	r3, [pc, #60]	@ (8011980 <OpenContinuousRxCWindow+0x80>)
 8011944:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011948:	4a10      	ldr	r2, [pc, #64]	@ (801198c <OpenContinuousRxCWindow+0x8c>)
 801194a:	490e      	ldr	r1, [pc, #56]	@ (8011984 <OpenContinuousRxCWindow+0x84>)
 801194c:	4618      	mov	r0, r3
 801194e:	f004 f874 	bl	8015a3a <RegionRxConfig>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00f      	beq.n	8011978 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011958:	4b0b      	ldr	r3, [pc, #44]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 801195a:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 801195e:	4b0a      	ldr	r3, [pc, #40]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 8011960:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8011964:	4b0a      	ldr	r3, [pc, #40]	@ (8011990 <OpenContinuousRxCWindow+0x90>)
 8011966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011968:	2000      	movs	r0, #0
 801196a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801196c:	4b06      	ldr	r3, [pc, #24]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 801196e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8011972:	4b05      	ldr	r3, [pc, #20]	@ (8011988 <OpenContinuousRxCWindow+0x88>)
 8011974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8011978:	bf00      	nop
 801197a:	3704      	adds	r7, #4
 801197c:	46bd      	mov	sp, r7
 801197e:	bd90      	pop	{r4, r7, pc}
 8011980:	20000e08 	.word	0x20000e08
 8011984:	20000cd0 	.word	0x20000cd0
 8011988:	200008e8 	.word	0x200008e8
 801198c:	20000d10 	.word	0x20000d10
 8011990:	08020450 	.word	0x08020450

08011994 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	603b      	str	r3, [r7, #0]
 80119a0:	4613      	mov	r3, r2
 80119a2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80119a4:	4b81      	ldr	r3, [pc, #516]	@ (8011bac <PrepareFrame+0x218>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80119aa:	4b80      	ldr	r3, [pc, #512]	@ (8011bac <PrepareFrame+0x218>)
 80119ac:	2200      	movs	r2, #0
 80119ae:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 80119b2:	2300      	movs	r3, #0
 80119b4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80119b6:	2300      	movs	r3, #0
 80119b8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80119ba:	2300      	movs	r3, #0
 80119bc:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d101      	bne.n	80119c8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80119c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119ca:	461a      	mov	r2, r3
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	4878      	ldr	r0, [pc, #480]	@ (8011bb0 <PrepareFrame+0x21c>)
 80119d0:	f006 fa43 	bl	8017e5a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80119d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119d6:	b2da      	uxtb	r2, r3
 80119d8:	4b74      	ldr	r3, [pc, #464]	@ (8011bac <PrepareFrame+0x218>)
 80119da:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	781a      	ldrb	r2, [r3, #0]
 80119e2:	4b72      	ldr	r3, [pc, #456]	@ (8011bac <PrepareFrame+0x218>)
 80119e4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	2b07      	cmp	r3, #7
 80119f2:	f000 80b9 	beq.w	8011b68 <PrepareFrame+0x1d4>
 80119f6:	2b07      	cmp	r3, #7
 80119f8:	f300 80ce 	bgt.w	8011b98 <PrepareFrame+0x204>
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d006      	beq.n	8011a0e <PrepareFrame+0x7a>
 8011a00:	2b04      	cmp	r3, #4
 8011a02:	f040 80c9 	bne.w	8011b98 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011a06:	4b69      	ldr	r3, [pc, #420]	@ (8011bac <PrepareFrame+0x218>)
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011a0e:	4b67      	ldr	r3, [pc, #412]	@ (8011bac <PrepareFrame+0x218>)
 8011a10:	2204      	movs	r2, #4
 8011a12:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011a16:	4b65      	ldr	r3, [pc, #404]	@ (8011bac <PrepareFrame+0x218>)
 8011a18:	4a66      	ldr	r2, [pc, #408]	@ (8011bb4 <PrepareFrame+0x220>)
 8011a1a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011a1e:	4b63      	ldr	r3, [pc, #396]	@ (8011bac <PrepareFrame+0x218>)
 8011a20:	22ff      	movs	r2, #255	@ 0xff
 8011a22:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	781a      	ldrb	r2, [r3, #0]
 8011a2a:	4b60      	ldr	r3, [pc, #384]	@ (8011bac <PrepareFrame+0x218>)
 8011a2c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011a30:	4a5e      	ldr	r2, [pc, #376]	@ (8011bac <PrepareFrame+0x218>)
 8011a32:	79fb      	ldrb	r3, [r7, #7]
 8011a34:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011a38:	4b5f      	ldr	r3, [pc, #380]	@ (8011bb8 <PrepareFrame+0x224>)
 8011a3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011a3e:	4a5b      	ldr	r2, [pc, #364]	@ (8011bac <PrepareFrame+0x218>)
 8011a40:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	781a      	ldrb	r2, [r3, #0]
 8011a48:	4b58      	ldr	r3, [pc, #352]	@ (8011bac <PrepareFrame+0x218>)
 8011a4a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011a4e:	4b57      	ldr	r3, [pc, #348]	@ (8011bac <PrepareFrame+0x218>)
 8011a50:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011a54:	4b55      	ldr	r3, [pc, #340]	@ (8011bac <PrepareFrame+0x218>)
 8011a56:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011a5a:	4b54      	ldr	r3, [pc, #336]	@ (8011bac <PrepareFrame+0x218>)
 8011a5c:	4a54      	ldr	r2, [pc, #336]	@ (8011bb0 <PrepareFrame+0x21c>)
 8011a5e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011a62:	f107 0318 	add.w	r3, r7, #24
 8011a66:	4618      	mov	r0, r3
 8011a68:	f003 f8e6 	bl	8014c38 <LoRaMacCryptoGetFCntUp>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011a72:	2312      	movs	r3, #18
 8011a74:	e096      	b.n	8011ba4 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8011bac <PrepareFrame+0x218>)
 8011a7c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011a80:	4b4a      	ldr	r3, [pc, #296]	@ (8011bac <PrepareFrame+0x218>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011a88:	4b48      	ldr	r3, [pc, #288]	@ (8011bac <PrepareFrame+0x218>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	4a46      	ldr	r2, [pc, #280]	@ (8011bac <PrepareFrame+0x218>)
 8011a94:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011a98:	f107 0314 	add.w	r3, r7, #20
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f002 fa83 	bl	8013fa8 <LoRaMacCommandsGetSizeSerializedCmds>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d001      	beq.n	8011aac <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011aa8:	2313      	movs	r3, #19
 8011aaa:	e07b      	b.n	8011ba4 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d074      	beq.n	8011b9c <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011ab2:	4b41      	ldr	r3, [pc, #260]	@ (8011bb8 <PrepareFrame+0x224>)
 8011ab4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fd4d 	bl	8010558 <GetMaxAppPayloadWithoutFOptsLength>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8011bac <PrepareFrame+0x218>)
 8011ac4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d01d      	beq.n	8011b08 <PrepareFrame+0x174>
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b0f      	cmp	r3, #15
 8011ad0:	d81a      	bhi.n	8011b08 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011ad2:	f107 0314 	add.w	r3, r7, #20
 8011ad6:	4a39      	ldr	r2, [pc, #228]	@ (8011bbc <PrepareFrame+0x228>)
 8011ad8:	4619      	mov	r1, r3
 8011ada:	200f      	movs	r0, #15
 8011adc:	f002 fa7a 	bl	8013fd4 <LoRaMacCommandsSerializeCmds>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ae6:	2313      	movs	r3, #19
 8011ae8:	e05c      	b.n	8011ba4 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f003 030f 	and.w	r3, r3, #15
 8011af0:	b2d9      	uxtb	r1, r3
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	7813      	ldrb	r3, [r2, #0]
 8011af6:	f361 0303 	bfi	r3, r1, #0, #4
 8011afa:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	781a      	ldrb	r2, [r3, #0]
 8011b00:	4b2a      	ldr	r3, [pc, #168]	@ (8011bac <PrepareFrame+0x218>)
 8011b02:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011b06:	e049      	b.n	8011b9c <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011b08:	4b28      	ldr	r3, [pc, #160]	@ (8011bac <PrepareFrame+0x218>)
 8011b0a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d010      	beq.n	8011b34 <PrepareFrame+0x1a0>
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	2b0f      	cmp	r3, #15
 8011b16:	d90d      	bls.n	8011b34 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011b18:	7ffb      	ldrb	r3, [r7, #31]
 8011b1a:	f107 0114 	add.w	r1, r7, #20
 8011b1e:	4a28      	ldr	r2, [pc, #160]	@ (8011bc0 <PrepareFrame+0x22c>)
 8011b20:	4618      	mov	r0, r3
 8011b22:	f002 fa57 	bl	8013fd4 <LoRaMacCommandsSerializeCmds>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d001      	beq.n	8011b30 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b2c:	2313      	movs	r3, #19
 8011b2e:	e039      	b.n	8011ba4 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011b30:	230a      	movs	r3, #10
 8011b32:	e037      	b.n	8011ba4 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011b34:	7ffb      	ldrb	r3, [r7, #31]
 8011b36:	f107 0114 	add.w	r1, r7, #20
 8011b3a:	4a21      	ldr	r2, [pc, #132]	@ (8011bc0 <PrepareFrame+0x22c>)
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f002 fa49 	bl	8013fd4 <LoRaMacCommandsSerializeCmds>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b48:	2313      	movs	r3, #19
 8011b4a:	e02b      	b.n	8011ba4 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011b4c:	4b17      	ldr	r3, [pc, #92]	@ (8011bac <PrepareFrame+0x218>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011b54:	4b15      	ldr	r3, [pc, #84]	@ (8011bac <PrepareFrame+0x218>)
 8011b56:	4a1a      	ldr	r2, [pc, #104]	@ (8011bc0 <PrepareFrame+0x22c>)
 8011b58:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	b2da      	uxtb	r2, r3
 8011b60:	4b12      	ldr	r3, [pc, #72]	@ (8011bac <PrepareFrame+0x218>)
 8011b62:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8011b66:	e019      	b.n	8011b9c <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d018      	beq.n	8011ba0 <PrepareFrame+0x20c>
 8011b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011bac <PrepareFrame+0x218>)
 8011b70:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d013      	beq.n	8011ba0 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011b78:	4812      	ldr	r0, [pc, #72]	@ (8011bc4 <PrepareFrame+0x230>)
 8011b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8011bac <PrepareFrame+0x218>)
 8011b7c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011b80:	461a      	mov	r2, r3
 8011b82:	6839      	ldr	r1, [r7, #0]
 8011b84:	f006 f969 	bl	8017e5a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011b88:	4b08      	ldr	r3, [pc, #32]	@ (8011bac <PrepareFrame+0x218>)
 8011b8a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011b8e:	3301      	adds	r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	4b06      	ldr	r3, [pc, #24]	@ (8011bac <PrepareFrame+0x218>)
 8011b94:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011b96:	e003      	b.n	8011ba0 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b98:	2302      	movs	r3, #2
 8011b9a:	e003      	b.n	8011ba4 <PrepareFrame+0x210>
            break;
 8011b9c:	bf00      	nop
 8011b9e:	e000      	b.n	8011ba2 <PrepareFrame+0x20e>
            break;
 8011ba0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3720      	adds	r7, #32
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	200008e8 	.word	0x200008e8
 8011bb0:	20000a20 	.word	0x20000a20
 8011bb4:	200008ea 	.word	0x200008ea
 8011bb8:	20000e08 	.word	0x20000e08
 8011bbc:	20000a00 	.word	0x20000a00
 8011bc0:	20000d88 	.word	0x20000d88
 8011bc4:	200008eb 	.word	0x200008eb

08011bc8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b08a      	sub	sp, #40	@ 0x28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	4603      	mov	r3, r0
 8011bd0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bd2:	2303      	movs	r3, #3
 8011bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011be0:	4b4a      	ldr	r3, [pc, #296]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011be2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011be6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011be8:	4b48      	ldr	r3, [pc, #288]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011bea:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011bee:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011bf0:	4b46      	ldr	r3, [pc, #280]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011bf4:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011bf6:	4b45      	ldr	r3, [pc, #276]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011bfa:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011bfc:	4b44      	ldr	r3, [pc, #272]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011c02:	4b42      	ldr	r3, [pc, #264]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011c04:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011c08:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011c0a:	4b40      	ldr	r3, [pc, #256]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011c0c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011c10:	f107 020f 	add.w	r2, r7, #15
 8011c14:	f107 0110 	add.w	r1, r7, #16
 8011c18:	4b3e      	ldr	r3, [pc, #248]	@ (8011d14 <SendFrameOnChannel+0x14c>)
 8011c1a:	f003 ff23 	bl	8015a64 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c20:	2201      	movs	r2, #1
 8011c22:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011c26:	4b39      	ldr	r3, [pc, #228]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011c28:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011c2c:	b2da      	uxtb	r2, r3
 8011c2e:	4b38      	ldr	r3, [pc, #224]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c30:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011c34:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011c38:	4b35      	ldr	r3, [pc, #212]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c3a:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011c3e:	79fb      	ldrb	r3, [r7, #7]
 8011c40:	4a33      	ldr	r2, [pc, #204]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c42:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011c46:	4b32      	ldr	r3, [pc, #200]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c48:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011c4c:	4a30      	ldr	r2, [pc, #192]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c4e:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011c52:	4b2f      	ldr	r3, [pc, #188]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c54:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011c58:	4a2d      	ldr	r2, [pc, #180]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c5a:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011c5e:	f001 ff34 	bl	8013aca <LoRaMacClassBIsBeaconModeActive>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d00b      	beq.n	8011c80 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011c68:	4b29      	ldr	r3, [pc, #164]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c6a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f001 ff96 	bl	8013ba0 <LoRaMacClassBIsUplinkCollision>
 8011c74:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d001      	beq.n	8011c80 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011c7c:	2310      	movs	r3, #16
 8011c7e:	e040      	b.n	8011d02 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011c80:	4b22      	ldr	r3, [pc, #136]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011c82:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d101      	bne.n	8011c8e <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011c8a:	f001 ff93 	bl	8013bb4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011c8e:	f001 ff2d 	bl	8013aec <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011c92:	4b1e      	ldr	r3, [pc, #120]	@ (8011d0c <SendFrameOnChannel+0x144>)
 8011c94:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011c9c:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7ff fc66 	bl	8011574 <SecureFrame>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d002      	beq.n	8011cbc <SendFrameOnChannel+0xf4>
    {
        return status;
 8011cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cba:	e022      	b.n	8011d02 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011cbc:	4b14      	ldr	r3, [pc, #80]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011cc2:	f043 0302 	orr.w	r3, r3, #2
 8011cc6:	4a12      	ldr	r2, [pc, #72]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cc8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011ccc:	4b10      	ldr	r3, [pc, #64]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cce:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cd8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cde:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011ce4:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8011ce8:	4b09      	ldr	r3, [pc, #36]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011cf0:	4b09      	ldr	r3, [pc, #36]	@ (8011d18 <SendFrameOnChannel+0x150>)
 8011cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cf4:	4a06      	ldr	r2, [pc, #24]	@ (8011d10 <SendFrameOnChannel+0x148>)
 8011cf6:	8812      	ldrh	r2, [r2, #0]
 8011cf8:	b2d2      	uxtb	r2, r2
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	4807      	ldr	r0, [pc, #28]	@ (8011d1c <SendFrameOnChannel+0x154>)
 8011cfe:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3728      	adds	r7, #40	@ 0x28
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	20000e08 	.word	0x20000e08
 8011d10:	200008e8 	.word	0x200008e8
 8011d14:	20000d08 	.word	0x20000d08
 8011d18:	08020450 	.word	0x08020450
 8011d1c:	200008ea 	.word	0x200008ea

08011d20 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	80fb      	strh	r3, [r7, #6]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011d30:	4b09      	ldr	r3, [pc, #36]	@ (8011d58 <SetTxContinuousWave+0x38>)
 8011d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d34:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011d38:	88fa      	ldrh	r2, [r7, #6]
 8011d3a:	6838      	ldr	r0, [r7, #0]
 8011d3c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011d3e:	4b07      	ldr	r3, [pc, #28]	@ (8011d5c <SetTxContinuousWave+0x3c>)
 8011d40:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011d44:	f043 0302 	orr.w	r3, r3, #2
 8011d48:	4a04      	ldr	r2, [pc, #16]	@ (8011d5c <SetTxContinuousWave+0x3c>)
 8011d4a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	08020450 	.word	0x08020450
 8011d5c:	200008e8 	.word	0x200008e8

08011d60 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e64 <RestoreNvmData+0x104>)
 8011d6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d001      	beq.n	8011d78 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011d74:	2301      	movs	r3, #1
 8011d76:	e071      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011d78:	2124      	movs	r1, #36	@ 0x24
 8011d7a:	483b      	ldr	r0, [pc, #236]	@ (8011e68 <RestoreNvmData+0x108>)
 8011d7c:	f006 f8c2 	bl	8017f04 <Crc32>
 8011d80:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8011d82:	4b39      	ldr	r3, [pc, #228]	@ (8011e68 <RestoreNvmData+0x108>)
 8011d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d001      	beq.n	8011d90 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011d8c:	2317      	movs	r3, #23
 8011d8e:	e065      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8011d90:	2114      	movs	r1, #20
 8011d92:	4836      	ldr	r0, [pc, #216]	@ (8011e6c <RestoreNvmData+0x10c>)
 8011d94:	f006 f8b6 	bl	8017f04 <Crc32>
 8011d98:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011d9a:	4b33      	ldr	r3, [pc, #204]	@ (8011e68 <RestoreNvmData+0x108>)
 8011d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d001      	beq.n	8011da8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011da4:	2317      	movs	r3, #23
 8011da6:	e059      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011da8:	21e0      	movs	r1, #224	@ 0xe0
 8011daa:	4831      	ldr	r0, [pc, #196]	@ (8011e70 <RestoreNvmData+0x110>)
 8011dac:	f006 f8aa 	bl	8017f04 <Crc32>
 8011db0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011db2:	4b2d      	ldr	r3, [pc, #180]	@ (8011e68 <RestoreNvmData+0x108>)
 8011db4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d001      	beq.n	8011dc2 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011dbe:	2317      	movs	r3, #23
 8011dc0:	e04c      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011dc2:	21bc      	movs	r1, #188	@ 0xbc
 8011dc4:	482b      	ldr	r0, [pc, #172]	@ (8011e74 <RestoreNvmData+0x114>)
 8011dc6:	f006 f89d 	bl	8017f04 <Crc32>
 8011dca:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011dcc:	4b26      	ldr	r3, [pc, #152]	@ (8011e68 <RestoreNvmData+0x108>)
 8011dce:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d001      	beq.n	8011ddc <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011dd8:	2317      	movs	r3, #23
 8011dda:	e03f      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011ddc:	2100      	movs	r1, #0
 8011dde:	4826      	ldr	r0, [pc, #152]	@ (8011e78 <RestoreNvmData+0x118>)
 8011de0:	f006 f890 	bl	8017f04 <Crc32>
 8011de4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011de6:	4b20      	ldr	r3, [pc, #128]	@ (8011e68 <RestoreNvmData+0x108>)
 8011de8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d001      	beq.n	8011df6 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011df2:	2317      	movs	r3, #23
 8011df4:	e032      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011df6:	2114      	movs	r1, #20
 8011df8:	4820      	ldr	r0, [pc, #128]	@ (8011e7c <RestoreNvmData+0x11c>)
 8011dfa:	f006 f883 	bl	8017f04 <Crc32>
 8011dfe:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011e00:	4b19      	ldr	r3, [pc, #100]	@ (8011e68 <RestoreNvmData+0x108>)
 8011e02:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d001      	beq.n	8011e10 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011e0c:	2317      	movs	r3, #23
 8011e0e:	e025      	b.n	8011e5c <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011e10:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011e14:	4914      	ldr	r1, [pc, #80]	@ (8011e68 <RestoreNvmData+0x108>)
 8011e16:	481a      	ldr	r0, [pc, #104]	@ (8011e80 <RestoreNvmData+0x120>)
 8011e18:	f006 f81f 	bl	8017e5a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011e1c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011e20:	2100      	movs	r1, #0
 8011e22:	4811      	ldr	r0, [pc, #68]	@ (8011e68 <RestoreNvmData+0x108>)
 8011e24:	f006 f854 	bl	8017ed0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011e28:	4b0e      	ldr	r3, [pc, #56]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e2a:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8011e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e30:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011e34:	4b12      	ldr	r3, [pc, #72]	@ (8011e80 <RestoreNvmData+0x120>)
 8011e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e38:	4a0a      	ldr	r2, [pc, #40]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e3a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011e3e:	4b10      	ldr	r3, [pc, #64]	@ (8011e80 <RestoreNvmData+0x120>)
 8011e40:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011e44:	4b07      	ldr	r3, [pc, #28]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e46:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011e4a:	4b06      	ldr	r3, [pc, #24]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011e52:	4b04      	ldr	r3, [pc, #16]	@ (8011e64 <RestoreNvmData+0x104>)
 8011e54:	2202      	movs	r2, #2
 8011e56:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	200008e8 	.word	0x200008e8
 8011e68:	20001384 	.word	0x20001384
 8011e6c:	200013ac 	.word	0x200013ac
 8011e70:	200013c4 	.word	0x200013c4
 8011e74:	200014a8 	.word	0x200014a8
 8011e78:	20001568 	.word	0x20001568
 8011e7c:	200018e8 	.word	0x200018e8
 8011e80:	20000e08 	.word	0x20000e08

08011e84 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d002      	beq.n	8011e9a <DetermineFrameType+0x16>
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d101      	bne.n	8011e9e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e9a:	2303      	movs	r3, #3
 8011e9c:	e03b      	b.n	8011f16 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7b1b      	ldrb	r3, [r3, #12]
 8011ea2:	f003 030f 	and.w	r3, r3, #15
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d008      	beq.n	8011ebe <DetermineFrameType+0x3a>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d003      	beq.n	8011ebe <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	701a      	strb	r2, [r3, #0]
 8011ebc:	e02a      	b.n	8011f14 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d103      	bne.n	8011ed0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	701a      	strb	r2, [r3, #0]
 8011ece:	e021      	b.n	8011f14 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7b1b      	ldrb	r3, [r3, #12]
 8011ed4:	f003 030f 	and.w	r3, r3, #15
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d108      	bne.n	8011ef0 <DetermineFrameType+0x6c>
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d103      	bne.n	8011ef0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	2202      	movs	r2, #2
 8011eec:	701a      	strb	r2, [r3, #0]
 8011eee:	e011      	b.n	8011f14 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7b1b      	ldrb	r3, [r3, #12]
 8011ef4:	f003 030f 	and.w	r3, r3, #15
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d108      	bne.n	8011f10 <DetermineFrameType+0x8c>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d003      	beq.n	8011f10 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	2203      	movs	r2, #3
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	e001      	b.n	8011f14 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011f10:	2318      	movs	r3, #24
 8011f12:	e000      	b.n	8011f16 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bc80      	pop	{r7}
 8011f1e:	4770      	bx	lr

08011f20 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	4603      	mov	r3, r0
 8011f28:	460a      	mov	r2, r1
 8011f2a:	71fb      	strb	r3, [r7, #7]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011f30:	79fa      	ldrb	r2, [r7, #7]
 8011f32:	79bb      	ldrb	r3, [r7, #6]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d301      	bcc.n	8011f3c <CheckRetrans+0x1c>
    {
        return true;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e000      	b.n	8011f3e <CheckRetrans+0x1e>
    }
    return false;
 8011f3c:	2300      	movs	r3, #0
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bc80      	pop	{r7}
 8011f46:	4770      	bx	lr

08011f48 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011f4c:	4b12      	ldr	r3, [pc, #72]	@ (8011f98 <CheckRetransUnconfirmedUplink+0x50>)
 8011f4e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011f52:	4a12      	ldr	r2, [pc, #72]	@ (8011f9c <CheckRetransUnconfirmedUplink+0x54>)
 8011f54:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011f58:	4611      	mov	r1, r2
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7ff ffe0 	bl	8011f20 <CheckRetrans>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e014      	b.n	8011f94 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f98 <CheckRetransUnconfirmedUplink+0x50>)
 8011f6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011f70:	f003 0302 	and.w	r3, r3, #2
 8011f74:	b2db      	uxtb	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00b      	beq.n	8011f92 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011f7a:	4b07      	ldr	r3, [pc, #28]	@ (8011f98 <CheckRetransUnconfirmedUplink+0x50>)
 8011f7c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d004      	beq.n	8011f8e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011f84:	4b04      	ldr	r3, [pc, #16]	@ (8011f98 <CheckRetransUnconfirmedUplink+0x50>)
 8011f86:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d101      	bne.n	8011f92 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e000      	b.n	8011f94 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	200008e8 	.word	0x200008e8
 8011f9c:	20000e08 	.word	0x20000e08

08011fa0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011fa4:	4b10      	ldr	r3, [pc, #64]	@ (8011fe8 <CheckRetransConfirmedUplink+0x48>)
 8011fa6:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011faa:	4a10      	ldr	r2, [pc, #64]	@ (8011fec <CheckRetransConfirmedUplink+0x4c>)
 8011fac:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011fb0:	4611      	mov	r1, r2
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff ffb4 	bl	8011f20 <CheckRetrans>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e00f      	b.n	8011fe2 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011fc2:	4b09      	ldr	r3, [pc, #36]	@ (8011fe8 <CheckRetransConfirmedUplink+0x48>)
 8011fc4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011fc8:	f003 0302 	and.w	r3, r3, #2
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d006      	beq.n	8011fe0 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011fd2:	4b05      	ldr	r3, [pc, #20]	@ (8011fe8 <CheckRetransConfirmedUplink+0x48>)
 8011fd4:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d001      	beq.n	8011fe0 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e000      	b.n	8011fe2 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011fe0:	2300      	movs	r3, #0
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	200008e8 	.word	0x200008e8
 8011fec:	20000e08 	.word	0x20000e08

08011ff0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ffe:	d002      	beq.n	8012006 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	3301      	adds	r3, #1
 8012004:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8012006:	687b      	ldr	r3, [r7, #4]
}
 8012008:	4618      	mov	r0, r3
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	bc80      	pop	{r7}
 8012010:	4770      	bx	lr
	...

08012014 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012018:	4b1a      	ldr	r3, [pc, #104]	@ (8012084 <StopRetransmission+0x70>)
 801201a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 801201e:	f003 0302 	and.w	r3, r3, #2
 8012022:	b2db      	uxtb	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	d009      	beq.n	801203c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012028:	4b16      	ldr	r3, [pc, #88]	@ (8012084 <StopRetransmission+0x70>)
 801202a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801202e:	2b00      	cmp	r3, #0
 8012030:	d011      	beq.n	8012056 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012032:	4b14      	ldr	r3, [pc, #80]	@ (8012084 <StopRetransmission+0x70>)
 8012034:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012038:	2b01      	cmp	r3, #1
 801203a:	d00c      	beq.n	8012056 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801203c:	4b12      	ldr	r3, [pc, #72]	@ (8012088 <StopRetransmission+0x74>)
 801203e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012042:	2b00      	cmp	r3, #0
 8012044:	d007      	beq.n	8012056 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012046:	4b10      	ldr	r3, [pc, #64]	@ (8012088 <StopRetransmission+0x74>)
 8012048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801204a:	4618      	mov	r0, r3
 801204c:	f7ff ffd0 	bl	8011ff0 <IncreaseAdrAckCounter>
 8012050:	4603      	mov	r3, r0
 8012052:	4a0d      	ldr	r2, [pc, #52]	@ (8012088 <StopRetransmission+0x74>)
 8012054:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012056:	4b0b      	ldr	r3, [pc, #44]	@ (8012084 <StopRetransmission+0x70>)
 8012058:	2200      	movs	r2, #0
 801205a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 801205e:	4b09      	ldr	r3, [pc, #36]	@ (8012084 <StopRetransmission+0x70>)
 8012060:	2200      	movs	r2, #0
 8012062:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8012066:	4b07      	ldr	r3, [pc, #28]	@ (8012084 <StopRetransmission+0x70>)
 8012068:	2200      	movs	r2, #0
 801206a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801206e:	4b05      	ldr	r3, [pc, #20]	@ (8012084 <StopRetransmission+0x70>)
 8012070:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012074:	f023 0302 	bic.w	r3, r3, #2
 8012078:	4a02      	ldr	r2, [pc, #8]	@ (8012084 <StopRetransmission+0x70>)
 801207a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801207e:	2301      	movs	r3, #1
}
 8012080:	4618      	mov	r0, r3
 8012082:	bd80      	pop	{r7, pc}
 8012084:	200008e8 	.word	0x200008e8
 8012088:	20000e08 	.word	0x20000e08

0801208c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	4603      	mov	r3, r0
 8012094:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8012096:	4b0b      	ldr	r3, [pc, #44]	@ (80120c4 <CallNvmDataChangeCallback+0x38>)
 8012098:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801209c:	2b00      	cmp	r3, #0
 801209e:	d00c      	beq.n	80120ba <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80120a0:	4b08      	ldr	r3, [pc, #32]	@ (80120c4 <CallNvmDataChangeCallback+0x38>)
 80120a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80120a6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d006      	beq.n	80120ba <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80120ac:	4b05      	ldr	r3, [pc, #20]	@ (80120c4 <CallNvmDataChangeCallback+0x38>)
 80120ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	88fa      	ldrh	r2, [r7, #6]
 80120b6:	4610      	mov	r0, r2
 80120b8:	4798      	blx	r3
    }
}
 80120ba:	bf00      	nop
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	200008e8 	.word	0x200008e8

080120c8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80120c8:	b480      	push	{r7}
 80120ca:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80120cc:	4b0b      	ldr	r3, [pc, #44]	@ (80120fc <IsRequestPending+0x34>)
 80120ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80120d2:	f003 0304 	and.w	r3, r3, #4
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d107      	bne.n	80120ec <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80120dc:	4b07      	ldr	r3, [pc, #28]	@ (80120fc <IsRequestPending+0x34>)
 80120de:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80120e2:	f003 0301 	and.w	r3, r3, #1
 80120e6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <IsRequestPending+0x28>
    {
        return 1;
 80120ec:	2301      	movs	r3, #1
 80120ee:	e000      	b.n	80120f2 <IsRequestPending+0x2a>
    }
    return 0;
 80120f0:	2300      	movs	r3, #0
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bc80      	pop	{r7}
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	200008e8 	.word	0x200008e8

08012100 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012100:	b590      	push	{r4, r7, lr}
 8012102:	b091      	sub	sp, #68	@ 0x44
 8012104:	af02      	add	r7, sp, #8
 8012106:	6178      	str	r0, [r7, #20]
 8012108:	6139      	str	r1, [r7, #16]
 801210a:	4613      	mov	r3, r2
 801210c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d002      	beq.n	801211a <LoRaMacInitialization+0x1a>
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d101      	bne.n	801211e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801211a:	2303      	movs	r3, #3
 801211c:	e27c      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d00b      	beq.n	801213e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801212a:	2b00      	cmp	r3, #0
 801212c:	d007      	beq.n	801213e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012132:	2b00      	cmp	r3, #0
 8012134:	d003      	beq.n	801213e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801213a:	2b00      	cmp	r3, #0
 801213c:	d101      	bne.n	8012142 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801213e:	2303      	movs	r3, #3
 8012140:	e26a      	b.n	8012618 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012142:	7bfb      	ldrb	r3, [r7, #15]
 8012144:	4618      	mov	r0, r3
 8012146:	f003 fbd7 	bl	80158f8 <RegionIsActive>
 801214a:	4603      	mov	r3, r0
 801214c:	f083 0301 	eor.w	r3, r3, #1
 8012150:	b2db      	uxtb	r3, r3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012156:	2309      	movs	r3, #9
 8012158:	e25e      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801215a:	6978      	ldr	r0, [r7, #20]
 801215c:	f002 f884 	bl	8014268 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012160:	f240 527c 	movw	r2, #1404	@ 0x57c
 8012164:	2100      	movs	r1, #0
 8012166:	48c7      	ldr	r0, [pc, #796]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012168:	f005 feb2 	bl	8017ed0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801216c:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8012170:	2100      	movs	r1, #0
 8012172:	48c5      	ldr	r0, [pc, #788]	@ (8012488 <LoRaMacInitialization+0x388>)
 8012174:	f005 feac 	bl	8017ed0 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012178:	4ac2      	ldr	r2, [pc, #776]	@ (8012484 <LoRaMacInitialization+0x384>)
 801217a:	7bfb      	ldrb	r3, [r7, #15]
 801217c:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012180:	4bc0      	ldr	r3, [pc, #768]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012182:	2200      	movs	r2, #0
 8012184:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8012188:	4bbe      	ldr	r3, [pc, #760]	@ (8012484 <LoRaMacInitialization+0x384>)
 801218a:	2200      	movs	r2, #0
 801218c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012190:	4bbc      	ldr	r3, [pc, #752]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012192:	4abe      	ldr	r2, [pc, #760]	@ (801248c <LoRaMacInitialization+0x38c>)
 8012194:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012198:	2300      	movs	r3, #0
 801219a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801219e:	4bbc      	ldr	r3, [pc, #752]	@ (8012490 <LoRaMacInitialization+0x390>)
 80121a0:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80121a2:	4bbc      	ldr	r3, [pc, #752]	@ (8012494 <LoRaMacInitialization+0x394>)
 80121a4:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80121a6:	4bbc      	ldr	r3, [pc, #752]	@ (8012498 <LoRaMacInitialization+0x398>)
 80121a8:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80121aa:	4bb6      	ldr	r3, [pc, #728]	@ (8012484 <LoRaMacInitialization+0x384>)
 80121ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121b0:	f107 021c 	add.w	r2, r7, #28
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f003 fbd7 	bl	801596a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80121bc:	230f      	movs	r3, #15
 80121be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80121c2:	4bb0      	ldr	r3, [pc, #704]	@ (8012484 <LoRaMacInitialization+0x384>)
 80121c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f003 fba2 	bl	8015918 <RegionGetPhyParam>
 80121d4:	4603      	mov	r3, r0
 80121d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80121d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121da:	2b00      	cmp	r3, #0
 80121dc:	bf14      	ite	ne
 80121de:	2301      	movne	r3, #1
 80121e0:	2300      	moveq	r3, #0
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	4ba7      	ldr	r3, [pc, #668]	@ (8012484 <LoRaMacInitialization+0x384>)
 80121e6:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80121ea:	230a      	movs	r3, #10
 80121ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80121f0:	4ba4      	ldr	r3, [pc, #656]	@ (8012484 <LoRaMacInitialization+0x384>)
 80121f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80121f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80121fa:	4611      	mov	r1, r2
 80121fc:	4618      	mov	r0, r3
 80121fe:	f003 fb8b 	bl	8015918 <RegionGetPhyParam>
 8012202:	4603      	mov	r3, r0
 8012204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012208:	b25a      	sxtb	r2, r3
 801220a:	4b9e      	ldr	r3, [pc, #632]	@ (8012484 <LoRaMacInitialization+0x384>)
 801220c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012210:	2306      	movs	r3, #6
 8012212:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012216:	4b9b      	ldr	r3, [pc, #620]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801221c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f003 fb78 	bl	8015918 <RegionGetPhyParam>
 8012228:	4603      	mov	r3, r0
 801222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222e:	b25a      	sxtb	r2, r3
 8012230:	4b94      	ldr	r3, [pc, #592]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012232:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012236:	2310      	movs	r3, #16
 8012238:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801223c:	4b91      	ldr	r3, [pc, #580]	@ (8012484 <LoRaMacInitialization+0x384>)
 801223e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012242:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012246:	4611      	mov	r1, r2
 8012248:	4618      	mov	r0, r3
 801224a:	f003 fb65 	bl	8015918 <RegionGetPhyParam>
 801224e:	4603      	mov	r3, r0
 8012250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012254:	4a8b      	ldr	r2, [pc, #556]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801225a:	2311      	movs	r3, #17
 801225c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012260:	4b88      	ldr	r3, [pc, #544]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012266:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801226a:	4611      	mov	r1, r2
 801226c:	4618      	mov	r0, r3
 801226e:	f003 fb53 	bl	8015918 <RegionGetPhyParam>
 8012272:	4603      	mov	r3, r0
 8012274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012278:	4a82      	ldr	r2, [pc, #520]	@ (8012484 <LoRaMacInitialization+0x384>)
 801227a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801227e:	2312      	movs	r3, #18
 8012280:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012284:	4b7f      	ldr	r3, [pc, #508]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801228a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801228e:	4611      	mov	r1, r2
 8012290:	4618      	mov	r0, r3
 8012292:	f003 fb41 	bl	8015918 <RegionGetPhyParam>
 8012296:	4603      	mov	r3, r0
 8012298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801229a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801229c:	4a79      	ldr	r2, [pc, #484]	@ (8012484 <LoRaMacInitialization+0x384>)
 801229e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80122a2:	2313      	movs	r3, #19
 80122a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122a8:	4b76      	ldr	r3, [pc, #472]	@ (8012484 <LoRaMacInitialization+0x384>)
 80122aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80122b2:	4611      	mov	r1, r2
 80122b4:	4618      	mov	r0, r3
 80122b6:	f003 fb2f 	bl	8015918 <RegionGetPhyParam>
 80122ba:	4603      	mov	r3, r0
 80122bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80122be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c0:	4a70      	ldr	r2, [pc, #448]	@ (8012484 <LoRaMacInitialization+0x384>)
 80122c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80122c6:	2314      	movs	r3, #20
 80122c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122cc:	4b6d      	ldr	r3, [pc, #436]	@ (8012484 <LoRaMacInitialization+0x384>)
 80122ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122d2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f003 fb1d 	bl	8015918 <RegionGetPhyParam>
 80122de:	4603      	mov	r3, r0
 80122e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80122e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e4:	4a67      	ldr	r2, [pc, #412]	@ (8012484 <LoRaMacInitialization+0x384>)
 80122e6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80122ea:	2316      	movs	r3, #22
 80122ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122f0:	4b64      	ldr	r3, [pc, #400]	@ (8012484 <LoRaMacInitialization+0x384>)
 80122f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f003 fb0b 	bl	8015918 <RegionGetPhyParam>
 8012302:	4603      	mov	r3, r0
 8012304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012308:	b2da      	uxtb	r2, r3
 801230a:	4b5e      	ldr	r3, [pc, #376]	@ (8012484 <LoRaMacInitialization+0x384>)
 801230c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012310:	2317      	movs	r3, #23
 8012312:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012316:	4b5b      	ldr	r3, [pc, #364]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012318:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801231c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012320:	4611      	mov	r1, r2
 8012322:	4618      	mov	r0, r3
 8012324:	f003 faf8 	bl	8015918 <RegionGetPhyParam>
 8012328:	4603      	mov	r3, r0
 801232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801232e:	4a55      	ldr	r2, [pc, #340]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012330:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012336:	4a53      	ldr	r2, [pc, #332]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012338:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801233c:	2318      	movs	r3, #24
 801233e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012342:	4b50      	ldr	r3, [pc, #320]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012348:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801234c:	4611      	mov	r1, r2
 801234e:	4618      	mov	r0, r3
 8012350:	f003 fae2 	bl	8015918 <RegionGetPhyParam>
 8012354:	4603      	mov	r3, r0
 8012356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801235a:	b2da      	uxtb	r2, r3
 801235c:	4b49      	ldr	r3, [pc, #292]	@ (8012484 <LoRaMacInitialization+0x384>)
 801235e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012364:	b2da      	uxtb	r2, r3
 8012366:	4b47      	ldr	r3, [pc, #284]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012368:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801236c:	231d      	movs	r3, #29
 801236e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012372:	4b44      	ldr	r3, [pc, #272]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012378:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801237c:	4611      	mov	r1, r2
 801237e:	4618      	mov	r0, r3
 8012380:	f003 faca 	bl	8015918 <RegionGetPhyParam>
 8012384:	4603      	mov	r3, r0
 8012386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238a:	b2da      	uxtb	r2, r3
 801238c:	4b3d      	ldr	r3, [pc, #244]	@ (8012484 <LoRaMacInitialization+0x384>)
 801238e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012392:	231e      	movs	r3, #30
 8012394:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012398:	4b3a      	ldr	r3, [pc, #232]	@ (8012484 <LoRaMacInitialization+0x384>)
 801239a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801239e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80123a2:	4611      	mov	r1, r2
 80123a4:	4618      	mov	r0, r3
 80123a6:	f003 fab7 	bl	8015918 <RegionGetPhyParam>
 80123aa:	4603      	mov	r3, r0
 80123ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80123ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b0:	b2da      	uxtb	r2, r3
 80123b2:	4b34      	ldr	r3, [pc, #208]	@ (8012484 <LoRaMacInitialization+0x384>)
 80123b4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80123b8:	231f      	movs	r3, #31
 80123ba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123be:	4b31      	ldr	r3, [pc, #196]	@ (8012484 <LoRaMacInitialization+0x384>)
 80123c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f003 faa4 	bl	8015918 <RegionGetPhyParam>
 80123d0:	4603      	mov	r3, r0
 80123d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80123d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d6:	4a2b      	ldr	r2, [pc, #172]	@ (8012484 <LoRaMacInitialization+0x384>)
 80123d8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80123dc:	2320      	movs	r3, #32
 80123de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123e2:	4b28      	ldr	r3, [pc, #160]	@ (8012484 <LoRaMacInitialization+0x384>)
 80123e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f003 fa92 	bl	8015918 <RegionGetPhyParam>
 80123f4:	4603      	mov	r3, r0
 80123f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80123f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123fa:	4a22      	ldr	r2, [pc, #136]	@ (8012484 <LoRaMacInitialization+0x384>)
 80123fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012400:	230b      	movs	r3, #11
 8012402:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012406:	4b1f      	ldr	r3, [pc, #124]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801240c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012410:	4611      	mov	r1, r2
 8012412:	4618      	mov	r0, r3
 8012414:	f003 fa80 	bl	8015918 <RegionGetPhyParam>
 8012418:	4603      	mov	r3, r0
 801241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 801241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801241e:	b29a      	uxth	r2, r3
 8012420:	4b19      	ldr	r3, [pc, #100]	@ (8012488 <LoRaMacInitialization+0x388>)
 8012422:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012426:	230c      	movs	r3, #12
 8012428:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801242c:	4b15      	ldr	r3, [pc, #84]	@ (8012484 <LoRaMacInitialization+0x384>)
 801242e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012432:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012436:	4611      	mov	r1, r2
 8012438:	4618      	mov	r0, r3
 801243a:	f003 fa6d 	bl	8015918 <RegionGetPhyParam>
 801243e:	4603      	mov	r3, r0
 8012440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8012442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012444:	b29a      	uxth	r2, r3
 8012446:	4b10      	ldr	r3, [pc, #64]	@ (8012488 <LoRaMacInitialization+0x388>)
 8012448:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801244c:	4b0d      	ldr	r3, [pc, #52]	@ (8012484 <LoRaMacInitialization+0x384>)
 801244e:	2201      	movs	r2, #1
 8012450:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012454:	4b0b      	ldr	r3, [pc, #44]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012456:	220a      	movs	r2, #10
 8012458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801245c:	4b09      	ldr	r3, [pc, #36]	@ (8012484 <LoRaMacInitialization+0x384>)
 801245e:	2206      	movs	r2, #6
 8012460:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012464:	4b07      	ldr	r3, [pc, #28]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801246a:	4a06      	ldr	r2, [pc, #24]	@ (8012484 <LoRaMacInitialization+0x384>)
 801246c:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801246e:	4b05      	ldr	r3, [pc, #20]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012470:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012474:	4b03      	ldr	r3, [pc, #12]	@ (8012484 <LoRaMacInitialization+0x384>)
 8012476:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801247a:	4b02      	ldr	r3, [pc, #8]	@ (8012484 <LoRaMacInitialization+0x384>)
 801247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012480:	e00c      	b.n	801249c <LoRaMacInitialization+0x39c>
 8012482:	bf00      	nop
 8012484:	20000e08 	.word	0x20000e08
 8012488:	200008e8 	.word	0x200008e8
 801248c:	01000400 	.word	0x01000400
 8012490:	20000fec 	.word	0x20000fec
 8012494:	20000ff0 	.word	0x20000ff0
 8012498:	20001900 	.word	0x20001900
 801249c:	4a60      	ldr	r2, [pc, #384]	@ (8012620 <LoRaMacInitialization+0x520>)
 801249e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80124a0:	4b5f      	ldr	r3, [pc, #380]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80124a6:	4a5e      	ldr	r2, [pc, #376]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124a8:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80124aa:	4b5d      	ldr	r3, [pc, #372]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80124b0:	4a5b      	ldr	r2, [pc, #364]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124b2:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80124b4:	4b5a      	ldr	r3, [pc, #360]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80124ba:	4a59      	ldr	r2, [pc, #356]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124bc:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80124be:	4b58      	ldr	r3, [pc, #352]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80124c4:	4a56      	ldr	r2, [pc, #344]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80124c8:	4b55      	ldr	r3, [pc, #340]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124ca:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80124ce:	4b54      	ldr	r3, [pc, #336]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124d0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80124d4:	4b52      	ldr	r3, [pc, #328]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124d6:	2201      	movs	r2, #1
 80124d8:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80124dc:	4a51      	ldr	r2, [pc, #324]	@ (8012624 <LoRaMacInitialization+0x524>)
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80124e4:	f7ff f8d6 	bl	8011694 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80124e8:	4b4d      	ldr	r3, [pc, #308]	@ (8012620 <LoRaMacInitialization+0x520>)
 80124ea:	2201      	movs	r2, #1
 80124ec:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80124f0:	4a4c      	ldr	r2, [pc, #304]	@ (8012624 <LoRaMacInitialization+0x524>)
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80124f8:	4b4a      	ldr	r3, [pc, #296]	@ (8012624 <LoRaMacInitialization+0x524>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8012500:	4b48      	ldr	r3, [pc, #288]	@ (8012624 <LoRaMacInitialization+0x524>)
 8012502:	2201      	movs	r2, #1
 8012504:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012508:	4b45      	ldr	r3, [pc, #276]	@ (8012620 <LoRaMacInitialization+0x520>)
 801250a:	2200      	movs	r2, #0
 801250c:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801250e:	4b44      	ldr	r3, [pc, #272]	@ (8012620 <LoRaMacInitialization+0x520>)
 8012510:	2200      	movs	r2, #0
 8012512:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012514:	2300      	movs	r3, #0
 8012516:	9300      	str	r3, [sp, #0]
 8012518:	4b43      	ldr	r3, [pc, #268]	@ (8012628 <LoRaMacInitialization+0x528>)
 801251a:	2200      	movs	r2, #0
 801251c:	f04f 31ff 	mov.w	r1, #4294967295
 8012520:	4842      	ldr	r0, [pc, #264]	@ (801262c <LoRaMacInitialization+0x52c>)
 8012522:	f009 fd3b 	bl	801bf9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012526:	2300      	movs	r3, #0
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	4b41      	ldr	r3, [pc, #260]	@ (8012630 <LoRaMacInitialization+0x530>)
 801252c:	2200      	movs	r2, #0
 801252e:	f04f 31ff 	mov.w	r1, #4294967295
 8012532:	4840      	ldr	r0, [pc, #256]	@ (8012634 <LoRaMacInitialization+0x534>)
 8012534:	f009 fd32 	bl	801bf9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012538:	2300      	movs	r3, #0
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	4b3e      	ldr	r3, [pc, #248]	@ (8012638 <LoRaMacInitialization+0x538>)
 801253e:	2200      	movs	r2, #0
 8012540:	f04f 31ff 	mov.w	r1, #4294967295
 8012544:	483d      	ldr	r0, [pc, #244]	@ (801263c <LoRaMacInitialization+0x53c>)
 8012546:	f009 fd29 	bl	801bf9c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801254a:	2300      	movs	r3, #0
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	4b3c      	ldr	r3, [pc, #240]	@ (8012640 <LoRaMacInitialization+0x540>)
 8012550:	2200      	movs	r2, #0
 8012552:	f04f 31ff 	mov.w	r1, #4294967295
 8012556:	483b      	ldr	r0, [pc, #236]	@ (8012644 <LoRaMacInitialization+0x544>)
 8012558:	f009 fd20 	bl	801bf9c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801255c:	4c30      	ldr	r4, [pc, #192]	@ (8012620 <LoRaMacInitialization+0x520>)
 801255e:	463b      	mov	r3, r7
 8012560:	4618      	mov	r0, r3
 8012562:	f009 f891 	bl	801b688 <SysTimeGetMcuTime>
 8012566:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 801256a:	463a      	mov	r2, r7
 801256c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012570:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012574:	4b34      	ldr	r3, [pc, #208]	@ (8012648 <LoRaMacInitialization+0x548>)
 8012576:	2200      	movs	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801257a:	4b2a      	ldr	r3, [pc, #168]	@ (8012624 <LoRaMacInitialization+0x524>)
 801257c:	4a33      	ldr	r2, [pc, #204]	@ (801264c <LoRaMacInitialization+0x54c>)
 801257e:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012582:	4b28      	ldr	r3, [pc, #160]	@ (8012624 <LoRaMacInitialization+0x524>)
 8012584:	4a32      	ldr	r2, [pc, #200]	@ (8012650 <LoRaMacInitialization+0x550>)
 8012586:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801258a:	4b26      	ldr	r3, [pc, #152]	@ (8012624 <LoRaMacInitialization+0x524>)
 801258c:	4a31      	ldr	r2, [pc, #196]	@ (8012654 <LoRaMacInitialization+0x554>)
 801258e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012592:	4b24      	ldr	r3, [pc, #144]	@ (8012624 <LoRaMacInitialization+0x524>)
 8012594:	4a30      	ldr	r2, [pc, #192]	@ (8012658 <LoRaMacInitialization+0x558>)
 8012596:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801259a:	4b22      	ldr	r3, [pc, #136]	@ (8012624 <LoRaMacInitialization+0x524>)
 801259c:	4a2f      	ldr	r2, [pc, #188]	@ (801265c <LoRaMacInitialization+0x55c>)
 801259e:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80125a2:	4b2f      	ldr	r3, [pc, #188]	@ (8012660 <LoRaMacInitialization+0x560>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	482f      	ldr	r0, [pc, #188]	@ (8012664 <LoRaMacInitialization+0x564>)
 80125a8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	689b      	ldr	r3, [r3, #8]
 80125ae:	4619      	mov	r1, r3
 80125b0:	482d      	ldr	r0, [pc, #180]	@ (8012668 <LoRaMacInitialization+0x568>)
 80125b2:	f7fa fb85 	bl	800ccc0 <SecureElementInit>
 80125b6:	4603      	mov	r3, r0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d001      	beq.n	80125c0 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80125bc:	2311      	movs	r3, #17
 80125be:	e02b      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80125c0:	4817      	ldr	r0, [pc, #92]	@ (8012620 <LoRaMacInitialization+0x520>)
 80125c2:	f002 fafd 	bl	8014bc0 <LoRaMacCryptoInit>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80125cc:	2311      	movs	r3, #17
 80125ce:	e023      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80125d0:	f001 fc1c 	bl	8013e0c <LoRaMacCommandsInit>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d001      	beq.n	80125de <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80125da:	2313      	movs	r3, #19
 80125dc:	e01c      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80125de:	4823      	ldr	r0, [pc, #140]	@ (801266c <LoRaMacInitialization+0x56c>)
 80125e0:	f002 fb8e 	bl	8014d00 <LoRaMacCryptoSetMulticastReference>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d001      	beq.n	80125ee <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80125ea:	2311      	movs	r3, #17
 80125ec:	e014      	b.n	8012618 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80125ee:	4b1c      	ldr	r3, [pc, #112]	@ (8012660 <LoRaMacInitialization+0x560>)
 80125f0:	695b      	ldr	r3, [r3, #20]
 80125f2:	4798      	blx	r3
 80125f4:	4603      	mov	r3, r0
 80125f6:	4618      	mov	r0, r3
 80125f8:	f005 fc0a 	bl	8017e10 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80125fc:	4b18      	ldr	r3, [pc, #96]	@ (8012660 <LoRaMacInitialization+0x560>)
 80125fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012600:	4a07      	ldr	r2, [pc, #28]	@ (8012620 <LoRaMacInitialization+0x520>)
 8012602:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8012606:	4610      	mov	r0, r2
 8012608:	4798      	blx	r3
    Radio.Sleep( );
 801260a:	4b15      	ldr	r3, [pc, #84]	@ (8012660 <LoRaMacInitialization+0x560>)
 801260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801260e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012610:	2001      	movs	r0, #1
 8012612:	f7fd fac7 	bl	800fba4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012616:	2300      	movs	r3, #0
}
 8012618:	4618      	mov	r0, r3
 801261a:	373c      	adds	r7, #60	@ 0x3c
 801261c:	46bd      	mov	sp, r7
 801261e:	bd90      	pop	{r4, r7, pc}
 8012620:	20000e08 	.word	0x20000e08
 8012624:	200008e8 	.word	0x200008e8
 8012628:	08010159 	.word	0x08010159
 801262c:	20000c50 	.word	0x20000c50
 8012630:	080101e9 	.word	0x080101e9
 8012634:	20000c68 	.word	0x20000c68
 8012638:	08010261 	.word	0x08010261
 801263c:	20000c80 	.word	0x20000c80
 8012640:	080102e1 	.word	0x080102e1
 8012644:	20000cec 	.word	0x20000cec
 8012648:	20001990 	.word	0x20001990
 801264c:	0800ec59 	.word	0x0800ec59
 8012650:	0800ecd1 	.word	0x0800ecd1
 8012654:	0800edb1 	.word	0x0800edb1
 8012658:	0800ed65 	.word	0x0800ed65
 801265c:	0800eded 	.word	0x0800eded
 8012660:	08020450 	.word	0x08020450
 8012664:	20000c34 	.word	0x20000c34
 8012668:	20000f2c 	.word	0x20000f2c
 801266c:	20000ee0 	.word	0x20000ee0

08012670 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012670:	b480      	push	{r7}
 8012672:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012674:	4b04      	ldr	r3, [pc, #16]	@ (8012688 <LoRaMacStart+0x18>)
 8012676:	2200      	movs	r2, #0
 8012678:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	46bd      	mov	sp, r7
 8012682:	bc80      	pop	{r7}
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	200008e8 	.word	0x200008e8

0801268c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012690:	f7fd fa68 	bl	800fb64 <LoRaMacIsBusy>
 8012694:	4603      	mov	r3, r0
 8012696:	f083 0301 	eor.w	r3, r3, #1
 801269a:	b2db      	uxtb	r3, r3
 801269c:	2b00      	cmp	r3, #0
 801269e:	d005      	beq.n	80126ac <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80126a0:	4b07      	ldr	r3, [pc, #28]	@ (80126c0 <LoRaMacStop+0x34>)
 80126a2:	2201      	movs	r2, #1
 80126a4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	e007      	b.n	80126bc <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80126ac:	4b04      	ldr	r3, [pc, #16]	@ (80126c0 <LoRaMacStop+0x34>)
 80126ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d101      	bne.n	80126ba <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80126b6:	2300      	movs	r3, #0
 80126b8:	e000      	b.n	80126bc <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80126ba:	2301      	movs	r3, #1
}
 80126bc:	4618      	mov	r0, r3
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	200008e8 	.word	0x200008e8

080126c4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80126c8:	4812      	ldr	r0, [pc, #72]	@ (8012714 <LoRaMacHalt+0x50>)
 80126ca:	f009 fd0b 	bl	801c0e4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80126ce:	4812      	ldr	r0, [pc, #72]	@ (8012718 <LoRaMacHalt+0x54>)
 80126d0:	f009 fd08 	bl	801c0e4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80126d4:	4811      	ldr	r0, [pc, #68]	@ (801271c <LoRaMacHalt+0x58>)
 80126d6:	f009 fd05 	bl	801c0e4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80126da:	4811      	ldr	r0, [pc, #68]	@ (8012720 <LoRaMacHalt+0x5c>)
 80126dc:	f009 fd02 	bl	801c0e4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80126e0:	f001 fa04 	bl	8013aec <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80126e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012724 <LoRaMacHalt+0x60>)
 80126e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126e8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80126ea:	4b0f      	ldr	r3, [pc, #60]	@ (8012728 <LoRaMacHalt+0x64>)
 80126ec:	2200      	movs	r2, #0
 80126ee:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80126f2:	480e      	ldr	r0, [pc, #56]	@ (801272c <LoRaMacHalt+0x68>)
 80126f4:	f7fd fc0c 	bl	800ff10 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80126f8:	f240 527c 	movw	r2, #1404	@ 0x57c
 80126fc:	490b      	ldr	r1, [pc, #44]	@ (801272c <LoRaMacHalt+0x68>)
 80126fe:	480c      	ldr	r0, [pc, #48]	@ (8012730 <LoRaMacHalt+0x6c>)
 8012700:	f005 fbab 	bl	8017e5a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012704:	4b08      	ldr	r3, [pc, #32]	@ (8012728 <LoRaMacHalt+0x64>)
 8012706:	2201      	movs	r2, #1
 8012708:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	20000c50 	.word	0x20000c50
 8012718:	20000c68 	.word	0x20000c68
 801271c:	20000c80 	.word	0x20000c80
 8012720:	20000cec 	.word	0x20000cec
 8012724:	08020450 	.word	0x08020450
 8012728:	200008e8 	.word	0x200008e8
 801272c:	20000e08 	.word	0x20000e08
 8012730:	20001384 	.word	0x20001384

08012734 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012734:	b590      	push	{r4, r7, lr}
 8012736:	b08d      	sub	sp, #52	@ 0x34
 8012738:	af02      	add	r7, sp, #8
 801273a:	4603      	mov	r3, r0
 801273c:	6039      	str	r1, [r7, #0]
 801273e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012740:	4b42      	ldr	r3, [pc, #264]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 8012742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012744:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012746:	4b41      	ldr	r3, [pc, #260]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 8012748:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 801274c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801274e:	4b3f      	ldr	r3, [pc, #252]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 8012750:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8012754:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8012756:	4b3e      	ldr	r3, [pc, #248]	@ (8012850 <LoRaMacQueryTxPossible+0x11c>)
 8012758:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801275c:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801275e:	2300      	movs	r3, #0
 8012760:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d101      	bne.n	801276c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012768:	2303      	movs	r3, #3
 801276a:	e06b      	b.n	8012844 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801276c:	2300      	movs	r3, #0
 801276e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012770:	4b36      	ldr	r3, [pc, #216]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 8012772:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012776:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012778:	4b34      	ldr	r3, [pc, #208]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 801277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801277c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801277e:	4b34      	ldr	r3, [pc, #208]	@ (8012850 <LoRaMacQueryTxPossible+0x11c>)
 8012780:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8012784:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012786:	4b32      	ldr	r3, [pc, #200]	@ (8012850 <LoRaMacQueryTxPossible+0x11c>)
 8012788:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 801278c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801278e:	4b2f      	ldr	r3, [pc, #188]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 8012790:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012794:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012798:	4b2c      	ldr	r3, [pc, #176]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 801279a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801279e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80127a2:	4b2b      	ldr	r3, [pc, #172]	@ (8012850 <LoRaMacQueryTxPossible+0x11c>)
 80127a4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80127a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80127ac:	4b27      	ldr	r3, [pc, #156]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 80127ae:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80127b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80127b6:	4b25      	ldr	r3, [pc, #148]	@ (801284c <LoRaMacQueryTxPossible+0x118>)
 80127b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80127c0:	f107 040d 	add.w	r4, r7, #13
 80127c4:	f107 020e 	add.w	r2, r7, #14
 80127c8:	f107 010f 	add.w	r1, r7, #15
 80127cc:	f107 0014 	add.w	r0, r7, #20
 80127d0:	f107 0310 	add.w	r3, r7, #16
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	4623      	mov	r3, r4
 80127d8:	f001 f852 	bl	8013880 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80127dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fd feb9 	bl	8010558 <GetMaxAppPayloadWithoutFOptsLength>
 80127e6:	4603      	mov	r3, r0
 80127e8:	461a      	mov	r2, r3
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80127ee:	f107 0308 	add.w	r3, r7, #8
 80127f2:	4618      	mov	r0, r3
 80127f4:	f001 fbd8 	bl	8013fa8 <LoRaMacCommandsGetSizeSerializedCmds>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127fe:	2313      	movs	r3, #19
 8012800:	e020      	b.n	8012844 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2b0f      	cmp	r3, #15
 8012806:	d819      	bhi.n	801283c <LoRaMacQueryTxPossible+0x108>
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	785b      	ldrb	r3, [r3, #1]
 801280c:	461a      	mov	r2, r3
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	429a      	cmp	r2, r3
 8012812:	d313      	bcc.n	801283c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	785a      	ldrb	r2, [r3, #1]
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	b2db      	uxtb	r3, r3
 801281c:	1ad3      	subs	r3, r2, r3
 801281e:	b2da      	uxtb	r2, r3
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	785b      	ldrb	r3, [r3, #1]
 8012828:	4619      	mov	r1, r3
 801282a:	79fa      	ldrb	r2, [r7, #7]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	4413      	add	r3, r2
 8012830:	4299      	cmp	r1, r3
 8012832:	d301      	bcc.n	8012838 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	e005      	b.n	8012844 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012838:	2308      	movs	r3, #8
 801283a:	e003      	b.n	8012844 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	2200      	movs	r2, #0
 8012840:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012842:	2308      	movs	r3, #8
    }
}
 8012844:	4618      	mov	r0, r3
 8012846:	372c      	adds	r7, #44	@ 0x2c
 8012848:	46bd      	mov	sp, r7
 801284a:	bd90      	pop	{r4, r7, pc}
 801284c:	20000e08 	.word	0x20000e08
 8012850:	200008e8 	.word	0x200008e8

08012854 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012854:	b590      	push	{r4, r7, lr}
 8012856:	b087      	sub	sp, #28
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801285c:	2300      	movs	r3, #0
 801285e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012866:	2303      	movs	r3, #3
 8012868:	e191      	b.n	8012b8e <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	2b39      	cmp	r3, #57	@ 0x39
 8012870:	f200 8186 	bhi.w	8012b80 <LoRaMacMibGetRequestConfirm+0x32c>
 8012874:	a201      	add	r2, pc, #4	@ (adr r2, 801287c <LoRaMacMibGetRequestConfirm+0x28>)
 8012876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801287a:	bf00      	nop
 801287c:	08012965 	.word	0x08012965
 8012880:	08012971 	.word	0x08012971
 8012884:	0801297d 	.word	0x0801297d
 8012888:	08012989 	.word	0x08012989
 801288c:	08012995 	.word	0x08012995
 8012890:	080129a1 	.word	0x080129a1
 8012894:	080129ad 	.word	0x080129ad
 8012898:	08012b81 	.word	0x08012b81
 801289c:	08012b81 	.word	0x08012b81
 80128a0:	08012b81 	.word	0x08012b81
 80128a4:	08012b81 	.word	0x08012b81
 80128a8:	08012b81 	.word	0x08012b81
 80128ac:	08012b81 	.word	0x08012b81
 80128b0:	08012b81 	.word	0x08012b81
 80128b4:	08012b81 	.word	0x08012b81
 80128b8:	080129b9 	.word	0x080129b9
 80128bc:	080129c5 	.word	0x080129c5
 80128c0:	080129d1 	.word	0x080129d1
 80128c4:	080129f3 	.word	0x080129f3
 80128c8:	08012a05 	.word	0x08012a05
 80128cc:	08012a17 	.word	0x08012a17
 80128d0:	08012a29 	.word	0x08012a29
 80128d4:	08012a5d 	.word	0x08012a5d
 80128d8:	08012a3b 	.word	0x08012a3b
 80128dc:	08012a7f 	.word	0x08012a7f
 80128e0:	08012a8b 	.word	0x08012a8b
 80128e4:	08012a95 	.word	0x08012a95
 80128e8:	08012a9f 	.word	0x08012a9f
 80128ec:	08012aa9 	.word	0x08012aa9
 80128f0:	08012ab3 	.word	0x08012ab3
 80128f4:	08012abd 	.word	0x08012abd
 80128f8:	08012ae9 	.word	0x08012ae9
 80128fc:	08012af5 	.word	0x08012af5
 8012900:	08012b0d 	.word	0x08012b0d
 8012904:	08012b01 	.word	0x08012b01
 8012908:	08012b19 	.word	0x08012b19
 801290c:	08012b23 	.word	0x08012b23
 8012910:	08012b2f 	.word	0x08012b2f
 8012914:	08012b49 	.word	0x08012b49
 8012918:	08012b39 	.word	0x08012b39
 801291c:	08012b41 	.word	0x08012b41
 8012920:	08012b81 	.word	0x08012b81
 8012924:	08012b55 	.word	0x08012b55
 8012928:	08012b81 	.word	0x08012b81
 801292c:	08012b81 	.word	0x08012b81
 8012930:	08012b81 	.word	0x08012b81
 8012934:	08012b81 	.word	0x08012b81
 8012938:	08012b81 	.word	0x08012b81
 801293c:	08012b81 	.word	0x08012b81
 8012940:	08012b81 	.word	0x08012b81
 8012944:	08012b81 	.word	0x08012b81
 8012948:	08012b81 	.word	0x08012b81
 801294c:	08012b81 	.word	0x08012b81
 8012950:	08012b81 	.word	0x08012b81
 8012954:	08012b81 	.word	0x08012b81
 8012958:	08012b81 	.word	0x08012b81
 801295c:	08012b69 	.word	0x08012b69
 8012960:	08012b75 	.word	0x08012b75
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012964:	4b8c      	ldr	r3, [pc, #560]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012966:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	711a      	strb	r2, [r3, #4]
            break;
 801296e:	e10d      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012970:	4b89      	ldr	r3, [pc, #548]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012972:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	711a      	strb	r2, [r3, #4]
            break;
 801297a:	e107      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801297c:	f7fa fc76 	bl	800d26c <SecureElementGetDevEui>
 8012980:	4602      	mov	r2, r0
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	605a      	str	r2, [r3, #4]
            break;
 8012986:	e101      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012988:	f7fa fc92 	bl	800d2b0 <SecureElementGetJoinEui>
 801298c:	4602      	mov	r2, r0
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	605a      	str	r2, [r3, #4]
            break;
 8012992:	e0fb      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012994:	4b80      	ldr	r3, [pc, #512]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012996:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	711a      	strb	r2, [r3, #4]
            break;
 801299e:	e0f5      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80129a0:	4b7d      	ldr	r3, [pc, #500]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	605a      	str	r2, [r3, #4]
            break;
 80129aa:	e0ef      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80129ac:	4b7a      	ldr	r3, [pc, #488]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	605a      	str	r2, [r3, #4]
            break;
 80129b6:	e0e9      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80129b8:	4b77      	ldr	r3, [pc, #476]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129ba:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	711a      	strb	r2, [r3, #4]
            break;
 80129c2:	e0e3      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80129c4:	4b74      	ldr	r3, [pc, #464]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129c6:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	711a      	strb	r2, [r3, #4]
            break;
 80129ce:	e0dd      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80129d0:	231c      	movs	r3, #28
 80129d2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80129d4:	4b70      	ldr	r3, [pc, #448]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129da:	f107 0210 	add.w	r2, r7, #16
 80129de:	4611      	mov	r1, r2
 80129e0:	4618      	mov	r0, r3
 80129e2:	f002 ff99 	bl	8015918 <RegionGetPhyParam>
 80129e6:	4603      	mov	r3, r0
 80129e8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	605a      	str	r2, [r3, #4]
            break;
 80129f0:	e0cc      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4a68      	ldr	r2, [pc, #416]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 80129f6:	3304      	adds	r3, #4
 80129f8:	3264      	adds	r2, #100	@ 0x64
 80129fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129fe:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a02:	e0c3      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4a64      	ldr	r2, [pc, #400]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a08:	3304      	adds	r3, #4
 8012a0a:	32a8      	adds	r2, #168	@ 0xa8
 8012a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a10:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a14:	e0ba      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	4a5f      	ldr	r2, [pc, #380]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	326c      	adds	r2, #108	@ 0x6c
 8012a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a22:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a26:	e0b1      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	32b0      	adds	r2, #176	@ 0xb0
 8012a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a34:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a38:	e0a8      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012a3a:	231a      	movs	r3, #26
 8012a3c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a3e:	4b56      	ldr	r3, [pc, #344]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a44:	f107 0210 	add.w	r2, r7, #16
 8012a48:	4611      	mov	r1, r2
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f002 ff64 	bl	8015918 <RegionGetPhyParam>
 8012a50:	4603      	mov	r3, r0
 8012a52:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	605a      	str	r2, [r3, #4]
            break;
 8012a5a:	e097      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012a5c:	2319      	movs	r3, #25
 8012a5e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a60:	4b4d      	ldr	r3, [pc, #308]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a66:	f107 0210 	add.w	r2, r7, #16
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f002 ff53 	bl	8015918 <RegionGetPhyParam>
 8012a72:	4603      	mov	r3, r0
 8012a74:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	605a      	str	r2, [r3, #4]
            break;
 8012a7c:	e086      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012a7e:	4b46      	ldr	r3, [pc, #280]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a80:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	711a      	strb	r2, [r3, #4]
            break;
 8012a88:	e080      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012a8a:	4b43      	ldr	r3, [pc, #268]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	605a      	str	r2, [r3, #4]
            break;
 8012a92:	e07b      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012a94:	4b40      	ldr	r3, [pc, #256]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	605a      	str	r2, [r3, #4]
            break;
 8012a9c:	e076      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	605a      	str	r2, [r3, #4]
            break;
 8012aa6:	e071      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012aaa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	605a      	str	r2, [r3, #4]
            break;
 8012ab0:	e06c      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012ab2:	4b39      	ldr	r3, [pc, #228]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	605a      	str	r2, [r3, #4]
            break;
 8012aba:	e067      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012abc:	2302      	movs	r3, #2
 8012abe:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012ac0:	4b35      	ldr	r3, [pc, #212]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012ac2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012ac6:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ac8:	4b33      	ldr	r3, [pc, #204]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ace:	f107 0210 	add.w	r2, r7, #16
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f002 ff1f 	bl	8015918 <RegionGetPhyParam>
 8012ada:	4603      	mov	r3, r0
 8012adc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	b25a      	sxtb	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	711a      	strb	r2, [r3, #4]
            break;
 8012ae6:	e051      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012aea:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	711a      	strb	r2, [r3, #4]
            break;
 8012af2:	e04b      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012af4:	4b28      	ldr	r3, [pc, #160]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012af6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	711a      	strb	r2, [r3, #4]
            break;
 8012afe:	e045      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012b00:	4b25      	ldr	r3, [pc, #148]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b02:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	711a      	strb	r2, [r3, #4]
            break;
 8012b0a:	e03f      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012b0c:	4b22      	ldr	r3, [pc, #136]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b0e:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	711a      	strb	r2, [r3, #4]
            break;
 8012b16:	e039      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012b18:	4b1f      	ldr	r3, [pc, #124]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	605a      	str	r2, [r3, #4]
            break;
 8012b20:	e034      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012b22:	4b1d      	ldr	r3, [pc, #116]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b24:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	711a      	strb	r2, [r3, #4]
            break;
 8012b2c:	e02e      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b30:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	605a      	str	r2, [r3, #4]
            break;
 8012b36:	e029      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	4a17      	ldr	r2, [pc, #92]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b3c:	605a      	str	r2, [r3, #4]
            break;
 8012b3e:	e025      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4a16      	ldr	r2, [pc, #88]	@ (8012b9c <LoRaMacMibGetRequestConfirm+0x348>)
 8012b44:	605a      	str	r2, [r3, #4]
            break;
 8012b46:	e021      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012b48:	4b13      	ldr	r3, [pc, #76]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	605a      	str	r2, [r3, #4]
            break;
 8012b52:	e01b      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	4a10      	ldr	r2, [pc, #64]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b58:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8012b5c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012b5e:	687c      	ldr	r4, [r7, #4]
 8012b60:	f003 f850 	bl	8015c04 <RegionGetVersion>
 8012b64:	60a0      	str	r0, [r4, #8]
            break;
 8012b66:	e011      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012b68:	4b0b      	ldr	r3, [pc, #44]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	605a      	str	r2, [r3, #4]
            break;
 8012b72:	e00b      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012b74:	4b08      	ldr	r3, [pc, #32]	@ (8012b98 <LoRaMacMibGetRequestConfirm+0x344>)
 8012b76:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	711a      	strb	r2, [r3, #4]
            break;
 8012b7e:	e005      	b.n	8012b8c <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 ffca 	bl	8013b1a <LoRaMacClassBMibGetRequestConfirm>
 8012b86:	4603      	mov	r3, r0
 8012b88:	75fb      	strb	r3, [r7, #23]
            break;
 8012b8a:	bf00      	nop
        }
    }
    return status;
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	371c      	adds	r7, #28
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd90      	pop	{r4, r7, pc}
 8012b96:	bf00      	nop
 8012b98:	20000e08 	.word	0x20000e08
 8012b9c:	20001384 	.word	0x20001384

08012ba0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b086      	sub	sp, #24
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d101      	bne.n	8012bb6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	e35c      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012bb6:	4bb9      	ldr	r3, [pc, #740]	@ (8012e9c <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012bb8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012bbc:	f003 0302 	and.w	r3, r3, #2
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d001      	beq.n	8012bc8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e353      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	2b39      	cmp	r3, #57	@ 0x39
 8012bce:	f200 8323 	bhi.w	8013218 <LoRaMacMibSetRequestConfirm+0x678>
 8012bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8012bd8 <LoRaMacMibSetRequestConfirm+0x38>)
 8012bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd8:	08012cc1 	.word	0x08012cc1
 8012bdc:	08012cd1 	.word	0x08012cd1
 8012be0:	08012ceb 	.word	0x08012ceb
 8012be4:	08012d03 	.word	0x08012d03
 8012be8:	08012d1b 	.word	0x08012d1b
 8012bec:	08012d27 	.word	0x08012d27
 8012bf0:	08012d33 	.word	0x08012d33
 8012bf4:	08012d3f 	.word	0x08012d3f
 8012bf8:	08012d65 	.word	0x08012d65
 8012bfc:	08012d8b 	.word	0x08012d8b
 8012c00:	08012db1 	.word	0x08012db1
 8012c04:	08012dd7 	.word	0x08012dd7
 8012c08:	08012dfd 	.word	0x08012dfd
 8012c0c:	08012e23 	.word	0x08012e23
 8012c10:	08012e49 	.word	0x08012e49
 8012c14:	08012e6f 	.word	0x08012e6f
 8012c18:	08012e8f 	.word	0x08012e8f
 8012c1c:	08013219 	.word	0x08013219
 8012c20:	08012ea9 	.word	0x08012ea9
 8012c24:	08012f19 	.word	0x08012f19
 8012c28:	08012f59 	.word	0x08012f59
 8012c2c:	08012fbb 	.word	0x08012fbb
 8012c30:	0801302b 	.word	0x0801302b
 8012c34:	08012ffb 	.word	0x08012ffb
 8012c38:	0801305b 	.word	0x0801305b
 8012c3c:	0801307d 	.word	0x0801307d
 8012c40:	08013087 	.word	0x08013087
 8012c44:	08013091 	.word	0x08013091
 8012c48:	0801309b 	.word	0x0801309b
 8012c4c:	080130a5 	.word	0x080130a5
 8012c50:	08013219 	.word	0x08013219
 8012c54:	080130af 	.word	0x080130af
 8012c58:	080130e1 	.word	0x080130e1
 8012c5c:	0801314d 	.word	0x0801314d
 8012c60:	0801311b 	.word	0x0801311b
 8012c64:	08013189 	.word	0x08013189
 8012c68:	0801319f 	.word	0x0801319f
 8012c6c:	080131b7 	.word	0x080131b7
 8012c70:	080131c1 	.word	0x080131c1
 8012c74:	080131cd 	.word	0x080131cd
 8012c78:	08013219 	.word	0x08013219
 8012c7c:	080131d7 	.word	0x080131d7
 8012c80:	08013219 	.word	0x08013219
 8012c84:	08013219 	.word	0x08013219
 8012c88:	08013219 	.word	0x08013219
 8012c8c:	08013219 	.word	0x08013219
 8012c90:	08013219 	.word	0x08013219
 8012c94:	08013219 	.word	0x08013219
 8012c98:	08013219 	.word	0x08013219
 8012c9c:	08013219 	.word	0x08013219
 8012ca0:	08013219 	.word	0x08013219
 8012ca4:	08013219 	.word	0x08013219
 8012ca8:	08013219 	.word	0x08013219
 8012cac:	08013219 	.word	0x08013219
 8012cb0:	08013219 	.word	0x08013219
 8012cb4:	08013219 	.word	0x08013219
 8012cb8:	08013201 	.word	0x08013201
 8012cbc:	0801320d 	.word	0x0801320d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	791b      	ldrb	r3, [r3, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fd fb75 	bl	80103b4 <SwitchClass>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	75fb      	strb	r3, [r7, #23]
            break;
 8012cce:	e2c4      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	791b      	ldrb	r3, [r3, #4]
 8012cd4:	2b02      	cmp	r3, #2
 8012cd6:	d005      	beq.n	8012ce4 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	791a      	ldrb	r2, [r3, #4]
 8012cdc:	4b70      	ldr	r3, [pc, #448]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012cde:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ce2:	e2ba      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8012ce8:	e2b7      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7fa faa4 	bl	800d23c <SecureElementSetDevEui>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f000 8294 	beq.w	8013224 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012cfc:	2303      	movs	r3, #3
 8012cfe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d00:	e290      	b.n	8013224 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fa faba 	bl	800d280 <SecureElementSetJoinEui>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f000 828a 	beq.w	8013228 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d14:	2303      	movs	r3, #3
 8012d16:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d18:	e286      	b.n	8013228 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	791a      	ldrb	r2, [r3, #4]
 8012d1e:	4b60      	ldr	r3, [pc, #384]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012d20:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8012d24:	e299      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012d2c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8012d30:	e293      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	4a5a      	ldr	r2, [pc, #360]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012d38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8012d3c:	e28d      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d00b      	beq.n	8012d5e <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	f001 ffff 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f000 8269 	beq.w	801322c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d5a:	2311      	movs	r3, #17
 8012d5c:	e288      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d5e:	2303      	movs	r3, #3
 8012d60:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d62:	e263      	b.n	801322c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00b      	beq.n	8012d84 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	4619      	mov	r1, r3
 8012d72:	2001      	movs	r0, #1
 8012d74:	f001 ffec 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	f000 8258 	beq.w	8013230 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d80:	2311      	movs	r3, #17
 8012d82:	e275      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d84:	2303      	movs	r3, #3
 8012d86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d88:	e252      	b.n	8013230 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00b      	beq.n	8012daa <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	4619      	mov	r1, r3
 8012d98:	2002      	movs	r0, #2
 8012d9a:	f001 ffd9 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	f000 8247 	beq.w	8013234 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012da6:	2311      	movs	r3, #17
 8012da8:	e262      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012daa:	2303      	movs	r3, #3
 8012dac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012dae:	e241      	b.n	8013234 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00b      	beq.n	8012dd0 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	2003      	movs	r0, #3
 8012dc0:	f001 ffc6 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 8236 	beq.w	8013238 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012dcc:	2311      	movs	r3, #17
 8012dce:	e24f      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012dd0:	2303      	movs	r3, #3
 8012dd2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012dd4:	e230      	b.n	8013238 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d00b      	beq.n	8012df6 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	4619      	mov	r1, r3
 8012de4:	207f      	movs	r0, #127	@ 0x7f
 8012de6:	f001 ffb3 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f000 8225 	beq.w	801323c <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012df2:	2311      	movs	r3, #17
 8012df4:	e23c      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012df6:	2303      	movs	r3, #3
 8012df8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012dfa:	e21f      	b.n	801323c <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d00b      	beq.n	8012e1c <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	2080      	movs	r0, #128	@ 0x80
 8012e0c:	f001 ffa0 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f000 8214 	beq.w	8013240 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e18:	2311      	movs	r3, #17
 8012e1a:	e229      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e1c:	2303      	movs	r3, #3
 8012e1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012e20:	e20e      	b.n	8013240 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00b      	beq.n	8012e42 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	2081      	movs	r0, #129	@ 0x81
 8012e32:	f001 ff8d 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f000 8203 	beq.w	8013244 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e3e:	2311      	movs	r3, #17
 8012e40:	e216      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e42:	2303      	movs	r3, #3
 8012e44:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012e46:	e1fd      	b.n	8013244 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00b      	beq.n	8012e68 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	4619      	mov	r1, r3
 8012e56:	2082      	movs	r0, #130	@ 0x82
 8012e58:	f001 ff7a 	bl	8014d50 <LoRaMacCryptoSetKey>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 81f2 	beq.w	8013248 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e64:	2311      	movs	r3, #17
 8012e66:	e203      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e68:	2303      	movs	r3, #3
 8012e6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012e6c:	e1ec      	b.n	8013248 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	791a      	ldrb	r2, [r3, #4]
 8012e72:	4b0b      	ldr	r3, [pc, #44]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012e74:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012e78:	4b0a      	ldr	r3, [pc, #40]	@ (8012ea4 <LoRaMacMibSetRequestConfirm+0x304>)
 8012e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e7c:	4a08      	ldr	r2, [pc, #32]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012e7e:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8012e82:	4610      	mov	r0, r2
 8012e84:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012e86:	4b07      	ldr	r3, [pc, #28]	@ (8012ea4 <LoRaMacMibSetRequestConfirm+0x304>)
 8012e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012e8c:	e1e5      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	791a      	ldrb	r2, [r3, #4]
 8012e92:	4b03      	ldr	r3, [pc, #12]	@ (8012ea0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012e94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8012e98:	e1df      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
 8012e9a:	bf00      	nop
 8012e9c:	200008e8 	.word	0x200008e8
 8012ea0:	20000e08 	.word	0x20000e08
 8012ea4:	08020450 	.word	0x08020450
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	7a1b      	ldrb	r3, [r3, #8]
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012eb0:	4bb3      	ldr	r3, [pc, #716]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012eb2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012eb6:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012eb8:	4bb1      	ldr	r3, [pc, #708]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ebe:	f107 0108 	add.w	r1, r7, #8
 8012ec2:	2207      	movs	r2, #7
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f002 fd62 	bl	801598e <RegionVerify>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	f083 0301 	eor.w	r3, r3, #1
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d002      	beq.n	8012edc <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ed6:	2303      	movs	r3, #3
 8012ed8:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012eda:	e1be      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012ee2:	4ba7      	ldr	r3, [pc, #668]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ee8:	f107 0108 	add.w	r1, r7, #8
 8012eec:	2200      	movs	r2, #0
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f002 fd4d 	bl	801598e <RegionVerify>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	f083 0301 	eor.w	r3, r3, #1
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d002      	beq.n	8012f06 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f00:	2303      	movs	r3, #3
 8012f02:	75fb      	strb	r3, [r7, #23]
            break;
 8012f04:	e1a9      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012f06:	4b9e      	ldr	r3, [pc, #632]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	3364      	adds	r3, #100	@ 0x64
 8012f0c:	3204      	adds	r2, #4
 8012f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f12:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012f16:	e1a0      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	7a1b      	ldrb	r3, [r3, #8]
 8012f1c:	b25b      	sxtb	r3, r3
 8012f1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012f20:	4b97      	ldr	r3, [pc, #604]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f22:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012f26:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012f28:	4b95      	ldr	r3, [pc, #596]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012f2e:	f107 0108 	add.w	r1, r7, #8
 8012f32:	2207      	movs	r2, #7
 8012f34:	4618      	mov	r0, r3
 8012f36:	f002 fd2a 	bl	801598e <RegionVerify>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d008      	beq.n	8012f52 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012f40:	4b8f      	ldr	r3, [pc, #572]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	33a8      	adds	r3, #168	@ 0xa8
 8012f46:	3204      	adds	r2, #4
 8012f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f4c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012f50:	e183      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f52:	2303      	movs	r3, #3
 8012f54:	75fb      	strb	r3, [r7, #23]
            break;
 8012f56:	e180      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	7a1b      	ldrb	r3, [r3, #8]
 8012f5c:	b25b      	sxtb	r3, r3
 8012f5e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012f60:	4b87      	ldr	r3, [pc, #540]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f62:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012f66:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012f68:	4b85      	ldr	r3, [pc, #532]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012f6e:	f107 0108 	add.w	r1, r7, #8
 8012f72:	2207      	movs	r2, #7
 8012f74:	4618      	mov	r0, r3
 8012f76:	f002 fd0a 	bl	801598e <RegionVerify>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d019      	beq.n	8012fb4 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012f80:	4b7f      	ldr	r3, [pc, #508]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	336c      	adds	r3, #108	@ 0x6c
 8012f86:	3204      	adds	r2, #4
 8012f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f8c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012f90:	4b7b      	ldr	r3, [pc, #492]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f92:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	f040 8158 	bne.w	801324c <LoRaMacMibSetRequestConfirm+0x6ac>
 8012f9c:	4b78      	ldr	r3, [pc, #480]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012f9e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f000 8152 	beq.w	801324c <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012fa8:	4b76      	ldr	r3, [pc, #472]	@ (8013184 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fac:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012fae:	f7fe fca7 	bl	8011900 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012fb2:	e14b      	b.n	801324c <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fb4:	2303      	movs	r3, #3
 8012fb6:	75fb      	strb	r3, [r7, #23]
            break;
 8012fb8:	e148      	b.n	801324c <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	7a1b      	ldrb	r3, [r3, #8]
 8012fbe:	b25b      	sxtb	r3, r3
 8012fc0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012fc4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012fc8:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012fca:	4b6d      	ldr	r3, [pc, #436]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012fd0:	f107 0108 	add.w	r1, r7, #8
 8012fd4:	2207      	movs	r2, #7
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f002 fcd9 	bl	801598e <RegionVerify>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d008      	beq.n	8012ff4 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012fe2:	4b67      	ldr	r3, [pc, #412]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	33b0      	adds	r3, #176	@ 0xb0
 8012fe8:	3204      	adds	r2, #4
 8012fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fee:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ff2:	e132      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ff4:	2303      	movs	r3, #3
 8012ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8012ff8:	e12f      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013000:	2301      	movs	r3, #1
 8013002:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013004:	4b5e      	ldr	r3, [pc, #376]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801300a:	f107 020c 	add.w	r2, r7, #12
 801300e:	4611      	mov	r1, r2
 8013010:	4618      	mov	r0, r3
 8013012:	f002 fce5 	bl	80159e0 <RegionChanMaskSet>
 8013016:	4603      	mov	r3, r0
 8013018:	f083 0301 	eor.w	r3, r3, #1
 801301c:	b2db      	uxtb	r3, r3
 801301e:	2b00      	cmp	r3, #0
 8013020:	f000 8116 	beq.w	8013250 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013024:	2303      	movs	r3, #3
 8013026:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013028:	e112      	b.n	8013250 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013030:	2300      	movs	r3, #0
 8013032:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013034:	4b52      	ldr	r3, [pc, #328]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801303a:	f107 020c 	add.w	r2, r7, #12
 801303e:	4611      	mov	r1, r2
 8013040:	4618      	mov	r0, r3
 8013042:	f002 fccd 	bl	80159e0 <RegionChanMaskSet>
 8013046:	4603      	mov	r3, r0
 8013048:	f083 0301 	eor.w	r3, r3, #1
 801304c:	b2db      	uxtb	r3, r3
 801304e:	2b00      	cmp	r3, #0
 8013050:	f000 8100 	beq.w	8013254 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013054:	2303      	movs	r3, #3
 8013056:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013058:	e0fc      	b.n	8013254 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	791b      	ldrb	r3, [r3, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d009      	beq.n	8013076 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013066:	2b0f      	cmp	r3, #15
 8013068:	d805      	bhi.n	8013076 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	791a      	ldrb	r2, [r3, #4]
 801306e:	4b44      	ldr	r3, [pc, #272]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013070:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013074:	e0f1      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013076:	2303      	movs	r3, #3
 8013078:	75fb      	strb	r3, [r7, #23]
            break;
 801307a:	e0ee      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	4a3f      	ldr	r2, [pc, #252]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013082:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8013084:	e0e9      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	4a3d      	ldr	r2, [pc, #244]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801308c:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 801308e:	e0e4      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	4a3a      	ldr	r2, [pc, #232]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013096:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013098:	e0df      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4a38      	ldr	r2, [pc, #224]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130a0:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80130a2:	e0da      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	4a35      	ldr	r2, [pc, #212]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80130ac:	e0d5      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80130b4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80130b6:	4b32      	ldr	r3, [pc, #200]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80130bc:	f107 0108 	add.w	r1, r7, #8
 80130c0:	2206      	movs	r2, #6
 80130c2:	4618      	mov	r0, r3
 80130c4:	f002 fc63 	bl	801598e <RegionVerify>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d005      	beq.n	80130da <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80130ce:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80130d2:	4b2b      	ldr	r3, [pc, #172]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130d4:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80130d8:	e0bf      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130da:	2303      	movs	r3, #3
 80130dc:	75fb      	strb	r3, [r7, #23]
            break;
 80130de:	e0bc      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80130e6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130e8:	4b25      	ldr	r3, [pc, #148]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130ea:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80130ee:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80130f0:	4b23      	ldr	r3, [pc, #140]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80130f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80130f6:	f107 0108 	add.w	r1, r7, #8
 80130fa:	2205      	movs	r2, #5
 80130fc:	4618      	mov	r0, r3
 80130fe:	f002 fc46 	bl	801598e <RegionVerify>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d005      	beq.n	8013114 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013108:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801310c:	4b1c      	ldr	r3, [pc, #112]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801310e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013112:	e0a2      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013114:	2303      	movs	r3, #3
 8013116:	75fb      	strb	r3, [r7, #23]
            break;
 8013118:	e09f      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013120:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013122:	4b17      	ldr	r3, [pc, #92]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013128:	f107 0108 	add.w	r1, r7, #8
 801312c:	220a      	movs	r2, #10
 801312e:	4618      	mov	r0, r3
 8013130:	f002 fc2d 	bl	801598e <RegionVerify>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d005      	beq.n	8013146 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801313a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801313e:	4b10      	ldr	r3, [pc, #64]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013140:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013144:	e089      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013146:	2303      	movs	r3, #3
 8013148:	75fb      	strb	r3, [r7, #23]
            break;
 801314a:	e086      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013152:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013154:	4b0a      	ldr	r3, [pc, #40]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801315a:	f107 0108 	add.w	r1, r7, #8
 801315e:	2209      	movs	r2, #9
 8013160:	4618      	mov	r0, r3
 8013162:	f002 fc14 	bl	801598e <RegionVerify>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d005      	beq.n	8013178 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801316c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013170:	4b03      	ldr	r3, [pc, #12]	@ (8013180 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013172:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013176:	e070      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013178:	2303      	movs	r3, #3
 801317a:	75fb      	strb	r3, [r7, #23]
            break;
 801317c:	e06d      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
 801317e:	bf00      	nop
 8013180:	20000e08 	.word	0x20000e08
 8013184:	08020450 	.word	0x08020450
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	4a3a      	ldr	r2, [pc, #232]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801318e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8013192:	4b39      	ldr	r3, [pc, #228]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013198:	4a37      	ldr	r2, [pc, #220]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801319a:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 801319c:	e05d      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	791a      	ldrb	r2, [r3, #4]
 80131a2:	4b35      	ldr	r3, [pc, #212]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131a4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80131a8:	4b33      	ldr	r3, [pc, #204]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131aa:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80131ae:	4b32      	ldr	r3, [pc, #200]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 80131b4:	e051      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	4a2f      	ldr	r2, [pc, #188]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131bc:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 80131be:	e04c      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	4a2c      	ldr	r2, [pc, #176]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 80131ca:	e046      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80131cc:	f7fe fdc8 	bl	8011d60 <RestoreNvmData>
 80131d0:	4603      	mov	r3, r0
 80131d2:	75fb      	strb	r3, [r7, #23]
            break;
 80131d4:	e041      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	799b      	ldrb	r3, [r3, #6]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d80d      	bhi.n	80131fa <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80131de:	4a26      	ldr	r2, [pc, #152]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6858      	ldr	r0, [r3, #4]
 80131ec:	f001 fd14 	bl	8014c18 <LoRaMacCryptoSetLrWanVersion>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d030      	beq.n	8013258 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80131f6:	2311      	movs	r3, #17
 80131f8:	e03a      	b.n	8013270 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131fa:	2303      	movs	r3, #3
 80131fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131fe:	e02b      	b.n	8013258 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	4a1c      	ldr	r2, [pc, #112]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013206:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 801320a:	e026      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	791a      	ldrb	r2, [r3, #4]
 8013210:	4b19      	ldr	r3, [pc, #100]	@ (8013278 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013212:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8013216:	e020      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f000 fc88 	bl	8013b2e <LoRaMacMibClassBSetRequestConfirm>
 801321e:	4603      	mov	r3, r0
 8013220:	75fb      	strb	r3, [r7, #23]
            break;
 8013222:	e01a      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013224:	bf00      	nop
 8013226:	e018      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013228:	bf00      	nop
 801322a:	e016      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801322c:	bf00      	nop
 801322e:	e014      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013230:	bf00      	nop
 8013232:	e012      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013234:	bf00      	nop
 8013236:	e010      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013238:	bf00      	nop
 801323a:	e00e      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801323c:	bf00      	nop
 801323e:	e00c      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013240:	bf00      	nop
 8013242:	e00a      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013244:	bf00      	nop
 8013246:	e008      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013248:	bf00      	nop
 801324a:	e006      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801324c:	bf00      	nop
 801324e:	e004      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013250:	bf00      	nop
 8013252:	e002      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013254:	bf00      	nop
 8013256:	e000      	b.n	801325a <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013258:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 801325a:	7dfb      	ldrb	r3, [r7, #23]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d106      	bne.n	801326e <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013260:	4a06      	ldr	r2, [pc, #24]	@ (801327c <LoRaMacMibSetRequestConfirm+0x6dc>)
 8013262:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8013266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801326a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 801326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013270:	4618      	mov	r0, r3
 8013272:	3718      	adds	r7, #24
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	20000e08 	.word	0x20000e08
 801327c:	200008e8 	.word	0x200008e8

08013280 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b08a      	sub	sp, #40	@ 0x28
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013288:	2302      	movs	r3, #2
 801328a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801328e:	2300      	movs	r3, #0
 8013290:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d101      	bne.n	801329c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013298:	2303      	movs	r3, #3
 801329a:	e16c      	b.n	8013576 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80132a2:	f7fc fc5f 	bl	800fb64 <LoRaMacIsBusy>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d001      	beq.n	80132b0 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80132ac:	2301      	movs	r3, #1
 80132ae:	e162      	b.n	8013576 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80132b0:	f001 f956 	bl	8014560 <LoRaMacConfirmQueueIsFull>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d001      	beq.n	80132be <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80132ba:	2301      	movs	r3, #1
 80132bc:	e15b      	b.n	8013576 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80132be:	f001 f943 	bl	8014548 <LoRaMacConfirmQueueGetCnt>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d104      	bne.n	80132d2 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80132c8:	2214      	movs	r2, #20
 80132ca:	2100      	movs	r1, #0
 80132cc:	48ac      	ldr	r0, [pc, #688]	@ (8013580 <LoRaMacMlmeRequest+0x300>)
 80132ce:	f004 fdff 	bl	8017ed0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80132d2:	4bac      	ldr	r3, [pc, #688]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 80132d4:	2201      	movs	r2, #1
 80132d6:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80132da:	4aaa      	ldr	r2, [pc, #680]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 80132dc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80132e0:	f043 0304 	orr.w	r3, r3, #4
 80132e4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80132f0:	2301      	movs	r3, #1
 80132f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80132f6:	2300      	movs	r3, #0
 80132f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 80132fc:	2300      	movs	r3, #0
 80132fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	3b01      	subs	r3, #1
 8013308:	2b0c      	cmp	r3, #12
 801330a:	f200 8108 	bhi.w	801351e <LoRaMacMlmeRequest+0x29e>
 801330e:	a201      	add	r2, pc, #4	@ (adr r2, 8013314 <LoRaMacMlmeRequest+0x94>)
 8013310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013314:	08013349 	.word	0x08013349
 8013318:	0801351f 	.word	0x0801351f
 801331c:	0801351f 	.word	0x0801351f
 8013320:	0801341f 	.word	0x0801341f
 8013324:	08013441 	.word	0x08013441
 8013328:	0801351f 	.word	0x0801351f
 801332c:	0801351f 	.word	0x0801351f
 8013330:	0801351f 	.word	0x0801351f
 8013334:	0801345f 	.word	0x0801345f
 8013338:	0801351f 	.word	0x0801351f
 801333c:	080134ed 	.word	0x080134ed
 8013340:	08013481 	.word	0x08013481
 8013344:	080134cb 	.word	0x080134cb
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013348:	4b8e      	ldr	r3, [pc, #568]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 801334a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801334e:	f003 0320 	and.w	r3, r3, #32
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8013356:	2301      	movs	r3, #1
 8013358:	e10d      	b.n	8013576 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	791b      	ldrb	r3, [r3, #4]
 801335e:	2b02      	cmp	r3, #2
 8013360:	d12e      	bne.n	80133c0 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8013362:	f7fe f997 	bl	8011694 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013366:	4b88      	ldr	r3, [pc, #544]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 8013368:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	795b      	ldrb	r3, [r3, #5]
 8013370:	b25b      	sxtb	r3, r3
 8013372:	2200      	movs	r2, #0
 8013374:	4619      	mov	r1, r3
 8013376:	f002 fbf2 	bl	8015b5e <RegionAlternateDr>
 801337a:	4603      	mov	r3, r0
 801337c:	461a      	mov	r2, r3
 801337e:	4b82      	ldr	r3, [pc, #520]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 8013380:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013384:	2307      	movs	r3, #7
 8013386:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 801338a:	20ff      	movs	r0, #255	@ 0xff
 801338c:	f7fd ff00 	bl	8011190 <SendReJoinReq>
 8013390:	4603      	mov	r3, r0
 8013392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8013396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801339a:	2b00      	cmp	r3, #0
 801339c:	f000 80c1 	beq.w	8013522 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80133a0:	4b79      	ldr	r3, [pc, #484]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 80133a2:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	795b      	ldrb	r3, [r3, #5]
 80133aa:	b25b      	sxtb	r3, r3
 80133ac:	2201      	movs	r2, #1
 80133ae:	4619      	mov	r1, r3
 80133b0:	f002 fbd5 	bl	8015b5e <RegionAlternateDr>
 80133b4:	4603      	mov	r3, r0
 80133b6:	461a      	mov	r2, r3
 80133b8:	4b73      	ldr	r3, [pc, #460]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 80133ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80133be:	e0b0      	b.n	8013522 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	791b      	ldrb	r3, [r3, #4]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	f040 80ac 	bne.w	8013522 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80133ca:	4b6f      	ldr	r3, [pc, #444]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 80133cc:	2200      	movs	r2, #0
 80133ce:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80133d2:	2302      	movs	r3, #2
 80133d4:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80133d6:	4b6c      	ldr	r3, [pc, #432]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 80133d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80133dc:	f107 020c 	add.w	r2, r7, #12
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f002 fac1 	bl	801596a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	791a      	ldrb	r2, [r3, #4]
 80133ec:	4b66      	ldr	r3, [pc, #408]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 80133ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80133f8:	2301      	movs	r3, #1
 80133fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80133fe:	4b61      	ldr	r3, [pc, #388]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 8013400:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8013404:	691b      	ldr	r3, [r3, #16]
 8013406:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013408:	4a5e      	ldr	r2, [pc, #376]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 801340a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801340e:	f043 0320 	orr.w	r3, r3, #32
 8013412:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8013416:	2300      	movs	r3, #0
 8013418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801341c:	e081      	b.n	8013522 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801341e:	2300      	movs	r3, #0
 8013420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013424:	f107 031c 	add.w	r3, r7, #28
 8013428:	2200      	movs	r2, #0
 801342a:	4619      	mov	r1, r3
 801342c:	2002      	movs	r0, #2
 801342e:	f000 fcfd 	bl	8013e2c <LoRaMacCommandsAddCmd>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d076      	beq.n	8013526 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013438:	2313      	movs	r3, #19
 801343a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801343e:	e072      	b.n	8013526 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	8898      	ldrh	r0, [r3, #4]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6899      	ldr	r1, [r3, #8]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801344e:	b2db      	uxtb	r3, r3
 8013450:	461a      	mov	r2, r3
 8013452:	f7fe fc65 	bl	8011d20 <SetTxContinuousWave>
 8013456:	4603      	mov	r3, r0
 8013458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801345c:	e06a      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801345e:	2300      	movs	r3, #0
 8013460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013464:	f107 031c 	add.w	r3, r7, #28
 8013468:	2200      	movs	r2, #0
 801346a:	4619      	mov	r1, r3
 801346c:	200d      	movs	r0, #13
 801346e:	f000 fcdd 	bl	8013e2c <LoRaMacCommandsAddCmd>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d058      	beq.n	801352a <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013478:	2313      	movs	r3, #19
 801347a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801347e:	e054      	b.n	801352a <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013480:	4b41      	ldr	r3, [pc, #260]	@ (8013588 <LoRaMacMlmeRequest+0x308>)
 8013482:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8013486:	2b00      	cmp	r3, #0
 8013488:	d151      	bne.n	801352e <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	791b      	ldrb	r3, [r3, #4]
 801348e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	791b      	ldrb	r3, [r3, #4]
 8013496:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801349a:	b2db      	uxtb	r3, r3
 801349c:	4618      	mov	r0, r3
 801349e:	f000 fb1b 	bl	8013ad8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80134a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134a6:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80134a8:	2300      	movs	r3, #0
 80134aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80134ae:	f107 031c 	add.w	r3, r7, #28
 80134b2:	2201      	movs	r2, #1
 80134b4:	4619      	mov	r1, r3
 80134b6:	2010      	movs	r0, #16
 80134b8:	f000 fcb8 	bl	8013e2c <LoRaMacCommandsAddCmd>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d035      	beq.n	801352e <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134c2:	2313      	movs	r3, #19
 80134c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80134c8:	e031      	b.n	801352e <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80134ca:	2300      	movs	r3, #0
 80134cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80134d0:	f107 031c 	add.w	r3, r7, #28
 80134d4:	2200      	movs	r2, #0
 80134d6:	4619      	mov	r1, r3
 80134d8:	2012      	movs	r0, #18
 80134da:	f000 fca7 	bl	8013e2c <LoRaMacCommandsAddCmd>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d026      	beq.n	8013532 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134e4:	2313      	movs	r3, #19
 80134e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80134ea:	e022      	b.n	8013532 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80134ec:	2301      	movs	r3, #1
 80134ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80134f2:	f000 faa7 	bl	8013a44 <LoRaMacClassBIsAcquisitionInProgress>
 80134f6:	4603      	mov	r3, r0
 80134f8:	f083 0301 	eor.w	r3, r3, #1
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d009      	beq.n	8013516 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013502:	2000      	movs	r0, #0
 8013504:	f000 fa80 	bl	8013a08 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013508:	2000      	movs	r0, #0
 801350a:	f000 faa2 	bl	8013a52 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801350e:	2300      	movs	r3, #0
 8013510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013514:	e00e      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8013516:	2301      	movs	r3, #1
 8013518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 801351c:	e00a      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801351e:	bf00      	nop
 8013520:	e008      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013522:	bf00      	nop
 8013524:	e006      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013526:	bf00      	nop
 8013528:	e004      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
            break;
 801352a:	bf00      	nop
 801352c:	e002      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
            break;
 801352e:	bf00      	nop
 8013530:	e000      	b.n	8013534 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013532:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013534:	4b13      	ldr	r3, [pc, #76]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 8013536:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801353e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013542:	2b00      	cmp	r3, #0
 8013544:	d010      	beq.n	8013568 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013546:	f000 ffff 	bl	8014548 <LoRaMacConfirmQueueGetCnt>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	d110      	bne.n	8013572 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8013550:	4b0c      	ldr	r3, [pc, #48]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 8013552:	2200      	movs	r2, #0
 8013554:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013558:	4a0a      	ldr	r2, [pc, #40]	@ (8013584 <LoRaMacMlmeRequest+0x304>)
 801355a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801355e:	f36f 0382 	bfc	r3, #2, #1
 8013562:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8013566:	e004      	b.n	8013572 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013568:	f107 0320 	add.w	r3, r7, #32
 801356c:	4618      	mov	r0, r3
 801356e:	f000 fe9d 	bl	80142ac <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013576:	4618      	mov	r0, r3
 8013578:	3728      	adds	r7, #40	@ 0x28
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	20000d40 	.word	0x20000d40
 8013584:	200008e8 	.word	0x200008e8
 8013588:	20000e08 	.word	0x20000e08

0801358c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801358c:	b5b0      	push	{r4, r5, r7, lr}
 801358e:	b092      	sub	sp, #72	@ 0x48
 8013590:	af02      	add	r7, sp, #8
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	460b      	mov	r3, r1
 8013596:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013598:	2302      	movs	r3, #2
 801359a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80135ae:	2300      	movs	r3, #0
 80135b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d101      	bne.n	80135be <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80135ba:	2303      	movs	r3, #3
 80135bc:	e113      	b.n	80137e6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2200      	movs	r2, #0
 80135c2:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80135c4:	f7fc face 	bl	800fb64 <LoRaMacIsBusy>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e109      	b.n	80137e6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f107 040c 	add.w	r4, r7, #12
 80135d8:	461d      	mov	r5, r3
 80135da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135de:	682b      	ldr	r3, [r5, #0]
 80135e0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80135e2:	2300      	movs	r3, #0
 80135e4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80135e8:	2214      	movs	r2, #20
 80135ea:	2100      	movs	r1, #0
 80135ec:	4880      	ldr	r0, [pc, #512]	@ (80137f0 <LoRaMacMcpsRequest+0x264>)
 80135ee:	f004 fc6f 	bl	8017ed0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80135f2:	4b80      	ldr	r3, [pc, #512]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 80135f4:	2201      	movs	r2, #1
 80135f6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80135fa:	4b7f      	ldr	r3, [pc, #508]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80135fc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8013600:	2b02      	cmp	r3, #2
 8013602:	d111      	bne.n	8013628 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013604:	4b7c      	ldr	r3, [pc, #496]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013606:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801360a:	2b02      	cmp	r3, #2
 801360c:	d10c      	bne.n	8013628 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801360e:	4b7a      	ldr	r3, [pc, #488]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013610:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8013614:	f083 0301 	eor.w	r3, r3, #1
 8013618:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801361a:	2b00      	cmp	r3, #0
 801361c:	d004      	beq.n	8013628 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801361e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013620:	2b00      	cmp	r3, #0
 8013622:	d101      	bne.n	8013628 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013624:	2301      	movs	r3, #1
 8013626:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013628:	7b3b      	ldrb	r3, [r7, #12]
 801362a:	2b03      	cmp	r3, #3
 801362c:	d030      	beq.n	8013690 <LoRaMacMcpsRequest+0x104>
 801362e:	2b03      	cmp	r3, #3
 8013630:	dc3f      	bgt.n	80136b2 <LoRaMacMcpsRequest+0x126>
 8013632:	2b00      	cmp	r3, #0
 8013634:	d002      	beq.n	801363c <LoRaMacMcpsRequest+0xb0>
 8013636:	2b01      	cmp	r3, #1
 8013638:	d015      	beq.n	8013666 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801363a:	e03a      	b.n	80136b2 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801363c:	2301      	movs	r3, #1
 801363e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013646:	2202      	movs	r2, #2
 8013648:	f362 1347 	bfi	r3, r2, #5, #3
 801364c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8013650:	7c3b      	ldrb	r3, [r7, #16]
 8013652:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801365a:	8b3b      	ldrh	r3, [r7, #24]
 801365c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801365e:	7ebb      	ldrb	r3, [r7, #26]
 8013660:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013664:	e026      	b.n	80136b4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013666:	2301      	movs	r3, #1
 8013668:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801366c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013670:	2204      	movs	r2, #4
 8013672:	f362 1347 	bfi	r3, r2, #5, #3
 8013676:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801367a:	7c3b      	ldrb	r3, [r7, #16]
 801367c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013684:	8b3b      	ldrh	r3, [r7, #24]
 8013686:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013688:	7ebb      	ldrb	r3, [r7, #26]
 801368a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801368e:	e011      	b.n	80136b4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013690:	2301      	movs	r3, #1
 8013692:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801369a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801369e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80136a6:	8abb      	ldrh	r3, [r7, #20]
 80136a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80136aa:	7dbb      	ldrb	r3, [r7, #22]
 80136ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80136b0:	e000      	b.n	80136b4 <LoRaMacMcpsRequest+0x128>
            break;
 80136b2:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80136b4:	2302      	movs	r3, #2
 80136b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80136ba:	4b4f      	ldr	r3, [pc, #316]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80136bc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80136c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80136c4:	4b4c      	ldr	r3, [pc, #304]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80136c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80136ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80136ce:	4611      	mov	r1, r2
 80136d0:	4618      	mov	r0, r3
 80136d2:	f002 f921 	bl	8015918 <RegionGetPhyParam>
 80136d6:	4603      	mov	r3, r0
 80136d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80136da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136dc:	b25b      	sxtb	r3, r3
 80136de:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80136e2:	4293      	cmp	r3, r2
 80136e4:	bfb8      	it	lt
 80136e6:	4613      	movlt	r3, r2
 80136e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80136ec:	4b42      	ldr	r3, [pc, #264]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80136ee:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80136f2:	4a41      	ldr	r2, [pc, #260]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80136f4:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80136f8:	4a3f      	ldr	r2, [pc, #252]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 80136fa:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fc fbc8 	bl	800fe94 <CheckForMinimumAbpDatarate>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d002      	beq.n	8013710 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013710:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013714:	2b00      	cmp	r3, #0
 8013716:	d05f      	beq.n	80137d8 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013718:	4b37      	ldr	r3, [pc, #220]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 801371a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801371e:	f083 0301 	eor.w	r3, r3, #1
 8013722:	b2db      	uxtb	r3, r3
 8013724:	2b00      	cmp	r3, #0
 8013726:	d10e      	bne.n	8013746 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013728:	4b33      	ldr	r3, [pc, #204]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 801372a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801372e:	4a32      	ldr	r2, [pc, #200]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013730:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8013734:	4a30      	ldr	r2, [pc, #192]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013736:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801373a:	4618      	mov	r0, r3
 801373c:	f7fc fbaa 	bl	800fe94 <CheckForMinimumAbpDatarate>
 8013740:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013742:	2b00      	cmp	r3, #0
 8013744:	d01c      	beq.n	8013780 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013746:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801374a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801374e:	4b2a      	ldr	r3, [pc, #168]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013750:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8013754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013758:	4b27      	ldr	r3, [pc, #156]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 801375a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801375e:	f107 0120 	add.w	r1, r7, #32
 8013762:	2205      	movs	r2, #5
 8013764:	4618      	mov	r0, r3
 8013766:	f002 f912 	bl	801598e <RegionVerify>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d005      	beq.n	801377c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013770:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013774:	4b20      	ldr	r3, [pc, #128]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013776:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801377a:	e001      	b.n	8013780 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801377c:	2303      	movs	r3, #3
 801377e:	e032      	b.n	80137e6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013780:	4b1d      	ldr	r3, [pc, #116]	@ (80137f8 <LoRaMacMcpsRequest+0x26c>)
 8013782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013786:	4a1b      	ldr	r2, [pc, #108]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 8013788:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7fc fc6a 	bl	8010068 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8013794:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013796:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 801379a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801379e:	78fb      	ldrb	r3, [r7, #3]
 80137a0:	9300      	str	r3, [sp, #0]
 80137a2:	4613      	mov	r3, r2
 80137a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137a6:	f7fd fc0f 	bl	8010fc8 <Send>
 80137aa:	4603      	mov	r3, r0
 80137ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80137b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10b      	bne.n	80137d0 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80137b8:	7b3a      	ldrb	r2, [r7, #12]
 80137ba:	4b0e      	ldr	r3, [pc, #56]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 80137bc:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80137c0:	4a0c      	ldr	r2, [pc, #48]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 80137c2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80137c6:	f043 0301 	orr.w	r3, r3, #1
 80137ca:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80137ce:	e003      	b.n	80137d8 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80137d0:	4b08      	ldr	r3, [pc, #32]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80137d8:	4b06      	ldr	r3, [pc, #24]	@ (80137f4 <LoRaMacMcpsRequest+0x268>)
 80137da:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	611a      	str	r2, [r3, #16]

    return status;
 80137e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3740      	adds	r7, #64	@ 0x40
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bdb0      	pop	{r4, r5, r7, pc}
 80137ee:	bf00      	nop
 80137f0:	20000d2c 	.word	0x20000d2c
 80137f4:	200008e8 	.word	0x200008e8
 80137f8:	20000e08 	.word	0x20000e08

080137fc <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	4603      	mov	r3, r0
 8013804:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013806:	79fb      	ldrb	r3, [r7, #7]
 8013808:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801380a:	4b0a      	ldr	r3, [pc, #40]	@ (8013834 <LoRaMacTestSetDutyCycleOn+0x38>)
 801380c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013810:	f107 010c 	add.w	r1, r7, #12
 8013814:	220f      	movs	r2, #15
 8013816:	4618      	mov	r0, r3
 8013818:	f002 f8b9 	bl	801598e <RegionVerify>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013822:	4a04      	ldr	r2, [pc, #16]	@ (8013834 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013824:	79fb      	ldrb	r3, [r7, #7]
 8013826:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 801382a:	bf00      	nop
 801382c:	3710      	adds	r7, #16
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	20000e08 	.word	0x20000e08

08013838 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801383c:	f7fe ff26 	bl	801268c <LoRaMacStop>
 8013840:	4603      	mov	r3, r0
 8013842:	2b00      	cmp	r3, #0
 8013844:	d111      	bne.n	801386a <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013846:	480a      	ldr	r0, [pc, #40]	@ (8013870 <LoRaMacDeInitialization+0x38>)
 8013848:	f008 fc4c 	bl	801c0e4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801384c:	4809      	ldr	r0, [pc, #36]	@ (8013874 <LoRaMacDeInitialization+0x3c>)
 801384e:	f008 fc49 	bl	801c0e4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013852:	4809      	ldr	r0, [pc, #36]	@ (8013878 <LoRaMacDeInitialization+0x40>)
 8013854:	f008 fc46 	bl	801c0e4 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013858:	f000 f948 	bl	8013aec <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 801385c:	f7fd ff1a 	bl	8011694 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013860:	4b06      	ldr	r3, [pc, #24]	@ (801387c <LoRaMacDeInitialization+0x44>)
 8013862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013864:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	e000      	b.n	801386c <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801386a:	2301      	movs	r3, #1
    }
}
 801386c:	4618      	mov	r0, r3
 801386e:	bd80      	pop	{r7, pc}
 8013870:	20000c50 	.word	0x20000c50
 8013874:	20000c68 	.word	0x20000c68
 8013878:	20000c80 	.word	0x20000c80
 801387c:	08020450 	.word	0x08020450

08013880 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b08c      	sub	sp, #48	@ 0x30
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	607a      	str	r2, [r7, #4]
 801388c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801388e:	2300      	movs	r3, #0
 8013890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	7b1b      	ldrb	r3, [r3, #12]
 8013898:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	7b5b      	ldrb	r3, [r3, #13]
 80138a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	7b9b      	ldrb	r3, [r3, #14]
 80138a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	685a      	ldr	r2, [r3, #4]
 80138b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	785b      	ldrb	r3, [r3, #1]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f000 8088 	beq.w	80139ce <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80138be:	2302      	movs	r3, #2
 80138c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	7bdb      	ldrb	r3, [r3, #15]
 80138c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	7c1b      	ldrb	r3, [r3, #16]
 80138d0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80138d4:	4611      	mov	r1, r2
 80138d6:	4618      	mov	r0, r3
 80138d8:	f002 f81e 	bl	8015918 <RegionGetPhyParam>
 80138dc:	4603      	mov	r3, r0
 80138de:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80138e0:	6a3b      	ldr	r3, [r7, #32]
 80138e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80138e6:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80138ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80138ee:	4293      	cmp	r3, r2
 80138f0:	bfb8      	it	lt
 80138f2:	4613      	movlt	r3, r2
 80138f4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	68fa      	ldr	r2, [r7, #12]
 80138fe:	8912      	ldrh	r2, [r2, #8]
 8013900:	4293      	cmp	r3, r2
 8013902:	d302      	bcc.n	801390a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013904:	2301      	movs	r3, #1
 8013906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	68fa      	ldr	r2, [r7, #12]
 8013910:	8912      	ldrh	r2, [r2, #8]
 8013912:	4611      	mov	r1, r2
 8013914:	68fa      	ldr	r2, [r7, #12]
 8013916:	8952      	ldrh	r2, [r2, #10]
 8013918:	440a      	add	r2, r1
 801391a:	4293      	cmp	r3, r2
 801391c:	d30f      	bcc.n	801393e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801391e:	230a      	movs	r3, #10
 8013920:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	7c1b      	ldrb	r3, [r3, #16]
 8013928:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f001 fff2 	bl	8015918 <RegionGetPhyParam>
 8013934:	4603      	mov	r3, r0
 8013936:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013938:	6a3b      	ldr	r3, [r7, #32]
 801393a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	8912      	ldrh	r2, [r2, #8]
 8013946:	4611      	mov	r1, r2
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	8952      	ldrh	r2, [r2, #10]
 801394c:	0052      	lsls	r2, r2, #1
 801394e:	440a      	add	r2, r1
 8013950:	4293      	cmp	r3, r2
 8013952:	d33c      	bcc.n	80139ce <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	8912      	ldrh	r2, [r2, #8]
 801395c:	1a9b      	subs	r3, r3, r2
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	8952      	ldrh	r2, [r2, #10]
 8013962:	fbb3 f1f2 	udiv	r1, r3, r2
 8013966:	fb01 f202 	mul.w	r2, r1, r2
 801396a:	1a9b      	subs	r3, r3, r2
 801396c:	2b00      	cmp	r3, #0
 801396e:	d12e      	bne.n	80139ce <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013970:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8013974:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013978:	429a      	cmp	r2, r3
 801397a:	d110      	bne.n	801399e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013984:	2302      	movs	r3, #2
 8013986:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	7c1b      	ldrb	r3, [r3, #16]
 801398c:	f107 0210 	add.w	r2, r7, #16
 8013990:	4611      	mov	r1, r2
 8013992:	4618      	mov	r0, r3
 8013994:	f001 ffe9 	bl	801596a <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013998:	2301      	movs	r3, #1
 801399a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801399e:	2321      	movs	r3, #33	@ 0x21
 80139a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80139a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80139a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	7bdb      	ldrb	r3, [r3, #15]
 80139b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	7c1b      	ldrb	r3, [r3, #16]
 80139b8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f001 ffaa 	bl	8015918 <RegionGetPhyParam>
 80139c4:	4603      	mov	r3, r0
 80139c6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80139c8:	6a3b      	ldr	r3, [r7, #32]
 80139ca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80139d4:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80139dc:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80139e4:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80139e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3730      	adds	r7, #48	@ 0x30
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80139f2:	b480      	push	{r7}
 80139f4:	b085      	sub	sp, #20
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	60f8      	str	r0, [r7, #12]
 80139fa:	60b9      	str	r1, [r7, #8]
 80139fc:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80139fe:	bf00      	nop
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bc80      	pop	{r7}
 8013a06:	4770      	bx	lr

08013a08 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	4603      	mov	r3, r0
 8013a10:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a12:	bf00      	nop
 8013a14:	370c      	adds	r7, #12
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bc80      	pop	{r7}
 8013a1a:	4770      	bx	lr

08013a1c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	b083      	sub	sp, #12
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	4603      	mov	r3, r0
 8013a24:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a26:	bf00      	nop
 8013a28:	370c      	adds	r7, #12
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bc80      	pop	{r7}
 8013a2e:	4770      	bx	lr

08013a30 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013a30:	b480      	push	{r7}
 8013a32:	b083      	sub	sp, #12
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	4603      	mov	r3, r0
 8013a38:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a3a:	bf00      	nop
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bc80      	pop	{r7}
 8013a42:	4770      	bx	lr

08013a44 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013a44:	b480      	push	{r7}
 8013a46:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013a48:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bc80      	pop	{r7}
 8013a50:	4770      	bx	lr

08013a52 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013a52:	b480      	push	{r7}
 8013a54:	b083      	sub	sp, #12
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a5a:	bf00      	nop
 8013a5c:	370c      	adds	r7, #12
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bc80      	pop	{r7}
 8013a62:	4770      	bx	lr

08013a64 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013a64:	b480      	push	{r7}
 8013a66:	b083      	sub	sp, #12
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a6c:	bf00      	nop
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bc80      	pop	{r7}
 8013a74:	4770      	bx	lr

08013a76 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013a76:	b480      	push	{r7}
 8013a78:	b083      	sub	sp, #12
 8013a7a:	af00      	add	r7, sp, #0
 8013a7c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a7e:	bf00      	nop
 8013a80:	370c      	adds	r7, #12
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bc80      	pop	{r7}
 8013a86:	4770      	bx	lr

08013a88 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	460b      	mov	r3, r1
 8013a92:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013a94:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	370c      	adds	r7, #12
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bc80      	pop	{r7}
 8013a9e:	4770      	bx	lr

08013aa0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013aa4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bc80      	pop	{r7}
 8013aac:	4770      	bx	lr

08013aae <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013aae:	b480      	push	{r7}
 8013ab0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013ab2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bc80      	pop	{r7}
 8013aba:	4770      	bx	lr

08013abc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013abc:	b480      	push	{r7}
 8013abe:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013ac0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bc80      	pop	{r7}
 8013ac8:	4770      	bx	lr

08013aca <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013aca:	b480      	push	{r7}
 8013acc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013ace:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bc80      	pop	{r7}
 8013ad6:	4770      	bx	lr

08013ad8 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ae2:	bf00      	nop
 8013ae4:	370c      	adds	r7, #12
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bc80      	pop	{r7}
 8013aea:	4770      	bx	lr

08013aec <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013aec:	b480      	push	{r7}
 8013aee:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013af0:	bf00      	nop
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bc80      	pop	{r7}
 8013af6:	4770      	bx	lr

08013af8 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013af8:	b480      	push	{r7}
 8013afa:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013afc:	bf00      	nop
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bc80      	pop	{r7}
 8013b02:	4770      	bx	lr

08013b04 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b0e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bc80      	pop	{r7}
 8013b18:	4770      	bx	lr

08013b1a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013b1a:	b480      	push	{r7}
 8013b1c:	b083      	sub	sp, #12
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b22:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bc80      	pop	{r7}
 8013b2c:	4770      	bx	lr

08013b2e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013b2e:	b480      	push	{r7}
 8013b30:	b083      	sub	sp, #12
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b36:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bc80      	pop	{r7}
 8013b40:	4770      	bx	lr

08013b42 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013b42:	b480      	push	{r7}
 8013b44:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b46:	bf00      	nop
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bc80      	pop	{r7}
 8013b4c:	4770      	bx	lr

08013b4e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013b4e:	b480      	push	{r7}
 8013b50:	b083      	sub	sp, #12
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	4603      	mov	r3, r0
 8013b56:	6039      	str	r1, [r7, #0]
 8013b58:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013b5a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	370c      	adds	r7, #12
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bc80      	pop	{r7}
 8013b64:	4770      	bx	lr

08013b66 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013b66:	b480      	push	{r7}
 8013b68:	b083      	sub	sp, #12
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	603a      	str	r2, [r7, #0]
 8013b70:	80fb      	strh	r3, [r7, #6]
 8013b72:	460b      	mov	r3, r1
 8013b74:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b76:	bf00      	nop
 8013b78:	370c      	adds	r7, #12
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bc80      	pop	{r7}
 8013b7e:	4770      	bx	lr

08013b80 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013b80:	b480      	push	{r7}
 8013b82:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b84:	bf00      	nop
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bc80      	pop	{r7}
 8013b8a:	4770      	bx	lr

08013b8c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013b94:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bc80      	pop	{r7}
 8013b9e:	4770      	bx	lr

08013ba0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b083      	sub	sp, #12
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013ba8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bc80      	pop	{r7}
 8013bb2:	4770      	bx	lr

08013bb4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013bb8:	bf00      	nop
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bc80      	pop	{r7}
 8013bbe:	4770      	bx	lr

08013bc0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b083      	sub	sp, #12
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	460b      	mov	r3, r1
 8013bca:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bc80      	pop	{r7}
 8013bd4:	4770      	bx	lr

08013bd6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013bd6:	b480      	push	{r7}
 8013bd8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013bda:	bf00      	nop
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bc80      	pop	{r7}
 8013be0:	4770      	bx	lr

08013be2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013be2:	b480      	push	{r7}
 8013be4:	b085      	sub	sp, #20
 8013be6:	af00      	add	r7, sp, #0
 8013be8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013bee:	2300      	movs	r3, #0
 8013bf0:	81fb      	strh	r3, [r7, #14]
 8013bf2:	e00a      	b.n	8013c0a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013bf4:	89fb      	ldrh	r3, [r7, #14]
 8013bf6:	68ba      	ldr	r2, [r7, #8]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <IsSlotFree+0x22>
        {
            return false;
 8013c00:	2300      	movs	r3, #0
 8013c02:	e006      	b.n	8013c12 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013c04:	89fb      	ldrh	r3, [r7, #14]
 8013c06:	3301      	adds	r3, #1
 8013c08:	81fb      	strh	r3, [r7, #14]
 8013c0a:	89fb      	ldrh	r3, [r7, #14]
 8013c0c:	2b0f      	cmp	r3, #15
 8013c0e:	d9f1      	bls.n	8013bf4 <IsSlotFree+0x12>
        }
    }
    return true;
 8013c10:	2301      	movs	r3, #1
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3714      	adds	r7, #20
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bc80      	pop	{r7}
 8013c1a:	4770      	bx	lr

08013c1c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013c26:	e007      	b.n	8013c38 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013c2e:	79fb      	ldrb	r3, [r7, #7]
 8013c30:	2b20      	cmp	r3, #32
 8013c32:	d101      	bne.n	8013c38 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013c34:	2300      	movs	r3, #0
 8013c36:	e012      	b.n	8013c5e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013c38:	79fb      	ldrb	r3, [r7, #7]
 8013c3a:	011b      	lsls	r3, r3, #4
 8013c3c:	3308      	adds	r3, #8
 8013c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8013c68 <MallocNewMacCommandSlot+0x4c>)
 8013c40:	4413      	add	r3, r2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff ffcd 	bl	8013be2 <IsSlotFree>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f083 0301 	eor.w	r3, r3, #1
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1e9      	bne.n	8013c28 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013c54:	79fb      	ldrb	r3, [r7, #7]
 8013c56:	011b      	lsls	r3, r3, #4
 8013c58:	3308      	adds	r3, #8
 8013c5a:	4a03      	ldr	r2, [pc, #12]	@ (8013c68 <MallocNewMacCommandSlot+0x4c>)
 8013c5c:	4413      	add	r3, r2
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3708      	adds	r7, #8
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	200019a8 	.word	0x200019a8

08013c6c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d101      	bne.n	8013c7e <FreeMacCommandSlot+0x12>
    {
        return false;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e005      	b.n	8013c8a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013c7e:	2210      	movs	r2, #16
 8013c80:	2100      	movs	r1, #0
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f004 f924 	bl	8017ed0 <memset1>

    return true;
 8013c88:	2301      	movs	r3, #1
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013c92:	b480      	push	{r7}
 8013c94:	b083      	sub	sp, #12
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d101      	bne.n	8013ca4 <LinkedListInit+0x12>
    {
        return false;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	e006      	b.n	8013cb2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	605a      	str	r2, [r3, #4]

    return true;
 8013cb0:	2301      	movs	r3, #1
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	370c      	adds	r7, #12
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bc80      	pop	{r7}
 8013cba:	4770      	bx	lr

08013cbc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d002      	beq.n	8013cd2 <LinkedListAdd+0x16>
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d101      	bne.n	8013cd6 <LinkedListAdd+0x1a>
    {
        return false;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	e015      	b.n	8013d02 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d102      	bne.n	8013ce4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	683a      	ldr	r2, [r7, #0]
 8013ce2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d003      	beq.n	8013cf4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	683a      	ldr	r2, [r7, #0]
 8013cf2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	605a      	str	r2, [r3, #4]

    return true;
 8013d00:	2301      	movs	r3, #1
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	370c      	adds	r7, #12
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bc80      	pop	{r7}
 8013d0a:	4770      	bx	lr

08013d0c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d002      	beq.n	8013d22 <LinkedListGetPrevious+0x16>
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d101      	bne.n	8013d26 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013d22:	2300      	movs	r3, #0
 8013d24:	e016      	b.n	8013d54 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013d2c:	683a      	ldr	r2, [r7, #0]
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d00c      	beq.n	8013d4e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013d34:	e002      	b.n	8013d3c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d007      	beq.n	8013d52 <LinkedListGetPrevious+0x46>
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d1f4      	bne.n	8013d36 <LinkedListGetPrevious+0x2a>
 8013d4c:	e001      	b.n	8013d52 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013d52:	68fb      	ldr	r3, [r7, #12]
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3714      	adds	r7, #20
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bc80      	pop	{r7}
 8013d5c:	4770      	bx	lr

08013d5e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b084      	sub	sp, #16
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
 8013d66:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d002      	beq.n	8013d74 <LinkedListRemove+0x16>
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d101      	bne.n	8013d78 <LinkedListRemove+0x1a>
    {
        return false;
 8013d74:	2300      	movs	r3, #0
 8013d76:	e020      	b.n	8013dba <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013d78:	6839      	ldr	r1, [r7, #0]
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7ff ffc6 	bl	8013d0c <LinkedListGetPrevious>
 8013d80:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	683a      	ldr	r2, [r7, #0]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d103      	bne.n	8013d94 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	685b      	ldr	r3, [r3, #4]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d102      	bne.n	8013da4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d003      	beq.n	8013db2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	2200      	movs	r2, #0
 8013db6:	601a      	str	r2, [r3, #0]

    return true;
 8013db8:	2301      	movs	r3, #1
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
	...

08013dc4 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	4603      	mov	r3, r0
 8013dcc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013dce:	79fb      	ldrb	r3, [r7, #7]
 8013dd0:	2b11      	cmp	r3, #17
 8013dd2:	bf8c      	ite	hi
 8013dd4:	2201      	movhi	r2, #1
 8013dd6:	2200      	movls	r2, #0
 8013dd8:	b2d2      	uxtb	r2, r2
 8013dda:	2a00      	cmp	r2, #0
 8013ddc:	d10d      	bne.n	8013dfa <IsSticky+0x36>
 8013dde:	4a0a      	ldr	r2, [pc, #40]	@ (8013e08 <IsSticky+0x44>)
 8013de0:	fa22 f303 	lsr.w	r3, r2, r3
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	bf14      	ite	ne
 8013dec:	2301      	movne	r3, #1
 8013dee:	2300      	moveq	r3, #0
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d001      	beq.n	8013dfa <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013df6:	2301      	movs	r3, #1
 8013df8:	e000      	b.n	8013dfc <IsSticky+0x38>
        default:
            return false;
 8013dfa:	2300      	movs	r3, #0
    }
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	370c      	adds	r7, #12
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bc80      	pop	{r7}
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	00020720 	.word	0x00020720

08013e0c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013e10:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8013e14:	2100      	movs	r1, #0
 8013e16:	4804      	ldr	r0, [pc, #16]	@ (8013e28 <LoRaMacCommandsInit+0x1c>)
 8013e18:	f004 f85a 	bl	8017ed0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013e1c:	4802      	ldr	r0, [pc, #8]	@ (8013e28 <LoRaMacCommandsInit+0x1c>)
 8013e1e:	f7ff ff38 	bl	8013c92 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013e22:	2300      	movs	r3, #0
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	200019a8 	.word	0x200019a8

08013e2c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	4603      	mov	r3, r0
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d101      	bne.n	8013e44 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013e40:	2301      	movs	r3, #1
 8013e42:	e033      	b.n	8013eac <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013e44:	f7ff feea 	bl	8013c1c <MallocNewMacCommandSlot>
 8013e48:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d101      	bne.n	8013e54 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013e50:	2302      	movs	r3, #2
 8013e52:	e02b      	b.n	8013eac <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013e54:	6979      	ldr	r1, [r7, #20]
 8013e56:	4817      	ldr	r0, [pc, #92]	@ (8013eb4 <LoRaMacCommandsAddCmd+0x88>)
 8013e58:	f7ff ff30 	bl	8013cbc <LinkedListAdd>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	f083 0301 	eor.w	r3, r3, #1
 8013e62:	b2db      	uxtb	r3, r3
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d001      	beq.n	8013e6c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013e68:	2305      	movs	r3, #5
 8013e6a:	e01f      	b.n	8013eac <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	7bfa      	ldrb	r2, [r7, #15]
 8013e70:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	3305      	adds	r3, #5
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	b292      	uxth	r2, r2
 8013e80:	68b9      	ldr	r1, [r7, #8]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f003 ffe9 	bl	8017e5a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013e88:	7bfb      	ldrb	r3, [r7, #15]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7ff ff9a 	bl	8013dc4 <IsSticky>
 8013e90:	4603      	mov	r3, r0
 8013e92:	461a      	mov	r2, r3
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013e98:	4b06      	ldr	r3, [pc, #24]	@ (8013eb4 <LoRaMacCommandsAddCmd+0x88>)
 8013e9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	4a03      	ldr	r2, [pc, #12]	@ (8013eb4 <LoRaMacCommandsAddCmd+0x88>)
 8013ea6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013eaa:	2300      	movs	r3, #0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3718      	adds	r7, #24
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	200019a8 	.word	0x200019a8

08013eb8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d101      	bne.n	8013eca <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e021      	b.n	8013f0e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013eca:	6879      	ldr	r1, [r7, #4]
 8013ecc:	4812      	ldr	r0, [pc, #72]	@ (8013f18 <LoRaMacCommandsRemoveCmd+0x60>)
 8013ece:	f7ff ff46 	bl	8013d5e <LinkedListRemove>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	f083 0301 	eor.w	r3, r3, #1
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d001      	beq.n	8013ee2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	e015      	b.n	8013f0e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8013f18 <LoRaMacCommandsRemoveCmd+0x60>)
 8013ee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	689b      	ldr	r3, [r3, #8]
 8013eec:	1ad3      	subs	r3, r2, r3
 8013eee:	3b01      	subs	r3, #1
 8013ef0:	4a09      	ldr	r2, [pc, #36]	@ (8013f18 <LoRaMacCommandsRemoveCmd+0x60>)
 8013ef2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7ff feb8 	bl	8013c6c <FreeMacCommandSlot>
 8013efc:	4603      	mov	r3, r0
 8013efe:	f083 0301 	eor.w	r3, r3, #1
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d001      	beq.n	8013f0c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013f08:	2305      	movs	r3, #5
 8013f0a:	e000      	b.n	8013f0e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013f0c:	2300      	movs	r3, #0
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	200019a8 	.word	0x200019a8

08013f1c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013f22:	4b0f      	ldr	r3, [pc, #60]	@ (8013f60 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013f28:	e012      	b.n	8013f50 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	7b1b      	ldrb	r3, [r3, #12]
 8013f2e:	f083 0301 	eor.w	r3, r3, #1
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d008      	beq.n	8013f4a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff ffba 	bl	8013eb8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	607b      	str	r3, [r7, #4]
 8013f48:	e002      	b.n	8013f50 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1e9      	bne.n	8013f2a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013f56:	2300      	movs	r3, #0
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	200019a8 	.word	0x200019a8

08013f64 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8013fa4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013f70:	e00f      	b.n	8013f92 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	791b      	ldrb	r3, [r3, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ff ff21 	bl	8013dc4 <IsSticky>
 8013f82:	4603      	mov	r3, r0
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d002      	beq.n	8013f8e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7ff ff95 	bl	8013eb8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d1ec      	bne.n	8013f72 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3708      	adds	r7, #8
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	200019a8 	.word	0x200019a8

08013fa8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b083      	sub	sp, #12
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d101      	bne.n	8013fba <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e005      	b.n	8013fc6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013fba:	4b05      	ldr	r3, [pc, #20]	@ (8013fd0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013fbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013fc4:	2300      	movs	r3, #0
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bc80      	pop	{r7}
 8013fce:	4770      	bx	lr
 8013fd0:	200019a8 	.word	0x200019a8

08013fd4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b088      	sub	sp, #32
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013fe0:	4b25      	ldr	r3, [pc, #148]	@ (8014078 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d002      	beq.n	8013ff6 <LoRaMacCommandsSerializeCmds+0x22>
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d126      	bne.n	8014044 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	e039      	b.n	801406e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013ffa:	7efb      	ldrb	r3, [r7, #27]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	1ad2      	subs	r2, r2, r3
 8014000:	69fb      	ldr	r3, [r7, #28]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	3301      	adds	r3, #1
 8014006:	429a      	cmp	r2, r3
 8014008:	d320      	bcc.n	801404c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801400a:	7efb      	ldrb	r3, [r7, #27]
 801400c:	1c5a      	adds	r2, r3, #1
 801400e:	76fa      	strb	r2, [r7, #27]
 8014010:	461a      	mov	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	4413      	add	r3, r2
 8014016:	69fa      	ldr	r2, [r7, #28]
 8014018:	7912      	ldrb	r2, [r2, #4]
 801401a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801401c:	7efb      	ldrb	r3, [r7, #27]
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	18d0      	adds	r0, r2, r3
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	1d59      	adds	r1, r3, #5
 8014026:	69fb      	ldr	r3, [r7, #28]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	b29b      	uxth	r3, r3
 801402c:	461a      	mov	r2, r3
 801402e:	f003 ff14 	bl	8017e5a <memcpy1>
            itr += curElement->PayloadSize;
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	b2da      	uxtb	r2, r3
 8014038:	7efb      	ldrb	r3, [r7, #27]
 801403a:	4413      	add	r3, r2
 801403c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d1d7      	bne.n	8013ffa <LoRaMacCommandsSerializeCmds+0x26>
 801404a:	e009      	b.n	8014060 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801404c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801404e:	e007      	b.n	8014060 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014056:	69f8      	ldr	r0, [r7, #28]
 8014058:	f7ff ff2e 	bl	8013eb8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1f4      	bne.n	8014050 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014066:	68b8      	ldr	r0, [r7, #8]
 8014068:	f7ff ff9e 	bl	8013fa8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 801406c:	2300      	movs	r3, #0
}
 801406e:	4618      	mov	r0, r3
 8014070:	3720      	adds	r7, #32
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	200019a8 	.word	0x200019a8

0801407c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 801407c:	b480      	push	{r7}
 801407e:	b085      	sub	sp, #20
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d101      	bne.n	801408e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801408a:	2301      	movs	r3, #1
 801408c:	e016      	b.n	80140bc <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801408e:	4b0e      	ldr	r3, [pc, #56]	@ (80140c8 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2200      	movs	r2, #0
 8014098:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801409a:	e00b      	b.n	80140b4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	7b1b      	ldrb	r3, [r3, #12]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d004      	beq.n	80140ae <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80140aa:	2300      	movs	r3, #0
 80140ac:	e006      	b.n	80140bc <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1f0      	bne.n	801409c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80140ba:	2300      	movs	r3, #0
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3714      	adds	r7, #20
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bc80      	pop	{r7}
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop
 80140c8:	200019a8 	.word	0x200019a8

080140cc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80140cc:	b480      	push	{r7}
 80140ce:	b085      	sub	sp, #20
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	4603      	mov	r3, r0
 80140d4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80140d6:	2300      	movs	r3, #0
 80140d8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80140da:	79fb      	ldrb	r3, [r7, #7]
 80140dc:	3b02      	subs	r3, #2
 80140de:	2b11      	cmp	r3, #17
 80140e0:	d850      	bhi.n	8014184 <LoRaMacCommandsGetCmdSize+0xb8>
 80140e2:	a201      	add	r2, pc, #4	@ (adr r2, 80140e8 <LoRaMacCommandsGetCmdSize+0x1c>)
 80140e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140e8:	08014131 	.word	0x08014131
 80140ec:	08014137 	.word	0x08014137
 80140f0:	0801413d 	.word	0x0801413d
 80140f4:	08014143 	.word	0x08014143
 80140f8:	08014149 	.word	0x08014149
 80140fc:	0801414f 	.word	0x0801414f
 8014100:	08014155 	.word	0x08014155
 8014104:	0801415b 	.word	0x0801415b
 8014108:	08014161 	.word	0x08014161
 801410c:	08014185 	.word	0x08014185
 8014110:	08014185 	.word	0x08014185
 8014114:	08014167 	.word	0x08014167
 8014118:	08014185 	.word	0x08014185
 801411c:	08014185 	.word	0x08014185
 8014120:	0801416d 	.word	0x0801416d
 8014124:	08014173 	.word	0x08014173
 8014128:	08014179 	.word	0x08014179
 801412c:	0801417f 	.word	0x0801417f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014130:	2303      	movs	r3, #3
 8014132:	73fb      	strb	r3, [r7, #15]
            break;
 8014134:	e027      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014136:	2305      	movs	r3, #5
 8014138:	73fb      	strb	r3, [r7, #15]
            break;
 801413a:	e024      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801413c:	2302      	movs	r3, #2
 801413e:	73fb      	strb	r3, [r7, #15]
            break;
 8014140:	e021      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014142:	2305      	movs	r3, #5
 8014144:	73fb      	strb	r3, [r7, #15]
            break;
 8014146:	e01e      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014148:	2301      	movs	r3, #1
 801414a:	73fb      	strb	r3, [r7, #15]
            break;
 801414c:	e01b      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801414e:	2306      	movs	r3, #6
 8014150:	73fb      	strb	r3, [r7, #15]
            break;
 8014152:	e018      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014154:	2302      	movs	r3, #2
 8014156:	73fb      	strb	r3, [r7, #15]
            break;
 8014158:	e015      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801415a:	2302      	movs	r3, #2
 801415c:	73fb      	strb	r3, [r7, #15]
            break;
 801415e:	e012      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014160:	2305      	movs	r3, #5
 8014162:	73fb      	strb	r3, [r7, #15]
            break;
 8014164:	e00f      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014166:	2306      	movs	r3, #6
 8014168:	73fb      	strb	r3, [r7, #15]
            break;
 801416a:	e00c      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801416c:	2301      	movs	r3, #1
 801416e:	73fb      	strb	r3, [r7, #15]
            break;
 8014170:	e009      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014172:	2305      	movs	r3, #5
 8014174:	73fb      	strb	r3, [r7, #15]
            break;
 8014176:	e006      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014178:	2304      	movs	r3, #4
 801417a:	73fb      	strb	r3, [r7, #15]
            break;
 801417c:	e003      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801417e:	2304      	movs	r3, #4
 8014180:	73fb      	strb	r3, [r7, #15]
            break;
 8014182:	e000      	b.n	8014186 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014184:	bf00      	nop
        }
    }
    return cidSize;
 8014186:	7bfb      	ldrb	r3, [r7, #15]
}
 8014188:	4618      	mov	r0, r3
 801418a:	3714      	adds	r7, #20
 801418c:	46bd      	mov	sp, r7
 801418e:	bc80      	pop	{r7}
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop

08014194 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	4a07      	ldr	r2, [pc, #28]	@ (80141bc <IncreaseBufferPointer+0x28>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d102      	bne.n	80141aa <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80141a4:	4b06      	ldr	r3, [pc, #24]	@ (80141c0 <IncreaseBufferPointer+0x2c>)
 80141a6:	607b      	str	r3, [r7, #4]
 80141a8:	e002      	b.n	80141b0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	3304      	adds	r3, #4
 80141ae:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80141b0:	687b      	ldr	r3, [r7, #4]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	370c      	adds	r7, #12
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bc80      	pop	{r7}
 80141ba:	4770      	bx	lr
 80141bc:	20001bd0 	.word	0x20001bd0
 80141c0:	20001bc0 	.word	0x20001bc0

080141c4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	4603      	mov	r3, r0
 80141cc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80141ce:	79fb      	ldrb	r3, [r7, #7]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d101      	bne.n	80141d8 <IsListEmpty+0x14>
    {
        return true;
 80141d4:	2301      	movs	r3, #1
 80141d6:	e000      	b.n	80141da <IsListEmpty+0x16>
    }
    return false;
 80141d8:	2300      	movs	r3, #0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	bc80      	pop	{r7}
 80141e2:	4770      	bx	lr

080141e4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80141e4:	b480      	push	{r7}
 80141e6:	b083      	sub	sp, #12
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	4603      	mov	r3, r0
 80141ec:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80141ee:	79fb      	ldrb	r3, [r7, #7]
 80141f0:	2b04      	cmp	r3, #4
 80141f2:	d901      	bls.n	80141f8 <IsListFull+0x14>
    {
        return true;
 80141f4:	2301      	movs	r3, #1
 80141f6:	e000      	b.n	80141fa <IsListFull+0x16>
    }
    return false;
 80141f8:	2300      	movs	r3, #0
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	370c      	adds	r7, #12
 80141fe:	46bd      	mov	sp, r7
 8014200:	bc80      	pop	{r7}
 8014202:	4770      	bx	lr

08014204 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b086      	sub	sp, #24
 8014208:	af00      	add	r7, sp, #0
 801420a:	4603      	mov	r3, r0
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	607a      	str	r2, [r7, #4]
 8014210:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014216:	4b13      	ldr	r3, [pc, #76]	@ (8014264 <GetElement+0x60>)
 8014218:	f893 3020 	ldrb.w	r3, [r3, #32]
 801421c:	4618      	mov	r0, r3
 801421e:	f7ff ffd1 	bl	80141c4 <IsListEmpty>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d001      	beq.n	801422c <GetElement+0x28>
    {
        return NULL;
 8014228:	2300      	movs	r3, #0
 801422a:	e017      	b.n	801425c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801422c:	2300      	movs	r3, #0
 801422e:	74fb      	strb	r3, [r7, #19]
 8014230:	e00d      	b.n	801424e <GetElement+0x4a>
    {
        if( element->Request == request )
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	7bfa      	ldrb	r2, [r7, #15]
 8014238:	429a      	cmp	r2, r3
 801423a:	d101      	bne.n	8014240 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	e00d      	b.n	801425c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014240:	6978      	ldr	r0, [r7, #20]
 8014242:	f7ff ffa7 	bl	8014194 <IncreaseBufferPointer>
 8014246:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014248:	7cfb      	ldrb	r3, [r7, #19]
 801424a:	3301      	adds	r3, #1
 801424c:	74fb      	strb	r3, [r7, #19]
 801424e:	4b05      	ldr	r3, [pc, #20]	@ (8014264 <GetElement+0x60>)
 8014250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014254:	7cfa      	ldrb	r2, [r7, #19]
 8014256:	429a      	cmp	r2, r3
 8014258:	d3eb      	bcc.n	8014232 <GetElement+0x2e>
    }

    return NULL;
 801425a:	2300      	movs	r3, #0
}
 801425c:	4618      	mov	r0, r3
 801425e:	3718      	adds	r7, #24
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}
 8014264:	20001bb4 	.word	0x20001bb4

08014268 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014270:	4a0c      	ldr	r2, [pc, #48]	@ (80142a4 <LoRaMacConfirmQueueInit+0x3c>)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014276:	4b0b      	ldr	r3, [pc, #44]	@ (80142a4 <LoRaMacConfirmQueueInit+0x3c>)
 8014278:	2200      	movs	r2, #0
 801427a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801427e:	4b09      	ldr	r3, [pc, #36]	@ (80142a4 <LoRaMacConfirmQueueInit+0x3c>)
 8014280:	4a09      	ldr	r2, [pc, #36]	@ (80142a8 <LoRaMacConfirmQueueInit+0x40>)
 8014282:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014284:	4b07      	ldr	r3, [pc, #28]	@ (80142a4 <LoRaMacConfirmQueueInit+0x3c>)
 8014286:	4a08      	ldr	r2, [pc, #32]	@ (80142a8 <LoRaMacConfirmQueueInit+0x40>)
 8014288:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801428a:	2214      	movs	r2, #20
 801428c:	21ff      	movs	r1, #255	@ 0xff
 801428e:	4806      	ldr	r0, [pc, #24]	@ (80142a8 <LoRaMacConfirmQueueInit+0x40>)
 8014290:	f003 fe1e 	bl	8017ed0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014294:	4b03      	ldr	r3, [pc, #12]	@ (80142a4 <LoRaMacConfirmQueueInit+0x3c>)
 8014296:	2201      	movs	r2, #1
 8014298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	20001bb4 	.word	0x20001bb4
 80142a8:	20001bc0 	.word	0x20001bc0

080142ac <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80142b4:	4b19      	ldr	r3, [pc, #100]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7ff ff92 	bl	80141e4 <IsListFull>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d001      	beq.n	80142ca <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80142c6:	2300      	movs	r3, #0
 80142c8:	e024      	b.n	8014314 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80142ca:	4b14      	ldr	r3, [pc, #80]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	7812      	ldrb	r2, [r2, #0]
 80142d2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80142d4:	4b11      	ldr	r3, [pc, #68]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142d6:	689b      	ldr	r3, [r3, #8]
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	7852      	ldrb	r2, [r2, #1]
 80142dc:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80142de:	4b0f      	ldr	r3, [pc, #60]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	78d2      	ldrb	r2, [r2, #3]
 80142e6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80142e8:	4b0c      	ldr	r3, [pc, #48]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	7892      	ldrb	r2, [r2, #2]
 80142f0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80142f2:	4b0a      	ldr	r3, [pc, #40]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142f8:	3301      	adds	r3, #1
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	4b07      	ldr	r3, [pc, #28]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 80142fe:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014302:	4b06      	ldr	r3, [pc, #24]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff ff44 	bl	8014194 <IncreaseBufferPointer>
 801430c:	4603      	mov	r3, r0
 801430e:	4a03      	ldr	r2, [pc, #12]	@ (801431c <LoRaMacConfirmQueueAdd+0x70>)
 8014310:	6093      	str	r3, [r2, #8]

    return true;
 8014312:	2301      	movs	r3, #1
}
 8014314:	4618      	mov	r0, r3
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	20001bb4 	.word	0x20001bb4

08014320 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014320:	b580      	push	{r7, lr}
 8014322:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014324:	4b0e      	ldr	r3, [pc, #56]	@ (8014360 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014326:	f893 3020 	ldrb.w	r3, [r3, #32]
 801432a:	4618      	mov	r0, r3
 801432c:	f7ff ff4a 	bl	80141c4 <IsListEmpty>
 8014330:	4603      	mov	r3, r0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d001      	beq.n	801433a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014336:	2300      	movs	r3, #0
 8014338:	e010      	b.n	801435c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801433a:	4b09      	ldr	r3, [pc, #36]	@ (8014360 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801433c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014340:	3b01      	subs	r3, #1
 8014342:	b2da      	uxtb	r2, r3
 8014344:	4b06      	ldr	r3, [pc, #24]	@ (8014360 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014346:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801434a:	4b05      	ldr	r3, [pc, #20]	@ (8014360 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	4618      	mov	r0, r3
 8014350:	f7ff ff20 	bl	8014194 <IncreaseBufferPointer>
 8014354:	4603      	mov	r3, r0
 8014356:	4a02      	ldr	r2, [pc, #8]	@ (8014360 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014358:	6053      	str	r3, [r2, #4]

    return true;
 801435a:	2301      	movs	r3, #1
}
 801435c:	4618      	mov	r0, r3
 801435e:	bd80      	pop	{r7, pc}
 8014360:	20001bb4 	.word	0x20001bb4

08014364 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	4603      	mov	r3, r0
 801436c:	460a      	mov	r2, r1
 801436e:	71fb      	strb	r3, [r7, #7]
 8014370:	4613      	mov	r3, r2
 8014372:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014374:	2300      	movs	r3, #0
 8014376:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014378:	4b10      	ldr	r3, [pc, #64]	@ (80143bc <LoRaMacConfirmQueueSetStatus+0x58>)
 801437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff ff20 	bl	80141c4 <IsListEmpty>
 8014384:	4603      	mov	r3, r0
 8014386:	f083 0301 	eor.w	r3, r3, #1
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	d011      	beq.n	80143b4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014390:	4b0a      	ldr	r3, [pc, #40]	@ (80143bc <LoRaMacConfirmQueueSetStatus+0x58>)
 8014392:	6859      	ldr	r1, [r3, #4]
 8014394:	4b09      	ldr	r3, [pc, #36]	@ (80143bc <LoRaMacConfirmQueueSetStatus+0x58>)
 8014396:	689a      	ldr	r2, [r3, #8]
 8014398:	79bb      	ldrb	r3, [r7, #6]
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff ff32 	bl	8014204 <GetElement>
 80143a0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d005      	beq.n	80143b4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	79fa      	ldrb	r2, [r7, #7]
 80143ac:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2201      	movs	r2, #1
 80143b2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80143b4:	bf00      	nop
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	20001bb4 	.word	0x20001bb4

080143c0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	4603      	mov	r3, r0
 80143c8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80143ca:	2300      	movs	r3, #0
 80143cc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80143ce:	4b10      	ldr	r3, [pc, #64]	@ (8014410 <LoRaMacConfirmQueueGetStatus+0x50>)
 80143d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff fef5 	bl	80141c4 <IsListEmpty>
 80143da:	4603      	mov	r3, r0
 80143dc:	f083 0301 	eor.w	r3, r3, #1
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d00e      	beq.n	8014404 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80143e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014410 <LoRaMacConfirmQueueGetStatus+0x50>)
 80143e8:	6859      	ldr	r1, [r3, #4]
 80143ea:	4b09      	ldr	r3, [pc, #36]	@ (8014410 <LoRaMacConfirmQueueGetStatus+0x50>)
 80143ec:	689a      	ldr	r2, [r3, #8]
 80143ee:	79fb      	ldrb	r3, [r7, #7]
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7ff ff07 	bl	8014204 <GetElement>
 80143f6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d002      	beq.n	8014404 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	785b      	ldrb	r3, [r3, #1]
 8014402:	e000      	b.n	8014406 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014404:	2301      	movs	r3, #1
}
 8014406:	4618      	mov	r0, r3
 8014408:	3710      	adds	r7, #16
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
 801440e:	bf00      	nop
 8014410:	20001bb4 	.word	0x20001bb4

08014414 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	4603      	mov	r3, r0
 801441c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801441e:	4b16      	ldr	r3, [pc, #88]	@ (8014478 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014424:	4a14      	ldr	r2, [pc, #80]	@ (8014478 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014426:	79fb      	ldrb	r3, [r7, #7]
 8014428:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801442c:	4b12      	ldr	r3, [pc, #72]	@ (8014478 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801442e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014432:	4618      	mov	r0, r3
 8014434:	f7ff fec6 	bl	80141c4 <IsListEmpty>
 8014438:	4603      	mov	r3, r0
 801443a:	f083 0301 	eor.w	r3, r3, #1
 801443e:	b2db      	uxtb	r3, r3
 8014440:	2b00      	cmp	r3, #0
 8014442:	d015      	beq.n	8014470 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	79fa      	ldrb	r2, [r7, #7]
 8014448:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	78db      	ldrb	r3, [r3, #3]
 801444e:	f083 0301 	eor.w	r3, r3, #1
 8014452:	b2db      	uxtb	r3, r3
 8014454:	2b00      	cmp	r3, #0
 8014456:	d002      	beq.n	801445e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	2201      	movs	r2, #1
 801445c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	f7ff fe98 	bl	8014194 <IncreaseBufferPointer>
 8014464:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014466:	4b04      	ldr	r3, [pc, #16]	@ (8014478 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014468:	689b      	ldr	r3, [r3, #8]
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	429a      	cmp	r2, r3
 801446e:	d1e9      	bne.n	8014444 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014470:	bf00      	nop
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	20001bb4 	.word	0x20001bb4

0801447c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	4603      	mov	r3, r0
 8014484:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014486:	4b09      	ldr	r3, [pc, #36]	@ (80144ac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014488:	6859      	ldr	r1, [r3, #4]
 801448a:	4b08      	ldr	r3, [pc, #32]	@ (80144ac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801448c:	689a      	ldr	r2, [r3, #8]
 801448e:	79fb      	ldrb	r3, [r7, #7]
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff feb7 	bl	8014204 <GetElement>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d001      	beq.n	80144a0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801449c:	2301      	movs	r3, #1
 801449e:	e000      	b.n	80144a2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3708      	adds	r7, #8
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	20001bb4 	.word	0x20001bb4

080144b0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80144b8:	4b22      	ldr	r3, [pc, #136]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144be:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80144c0:	2300      	movs	r3, #0
 80144c2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80144c4:	2300      	movs	r3, #0
 80144c6:	73fb      	strb	r3, [r7, #15]
 80144c8:	e032      	b.n	8014530 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80144ca:	4b1e      	ldr	r3, [pc, #120]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	781a      	ldrb	r2, [r3, #0]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80144d4:	4b1b      	ldr	r3, [pc, #108]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	785a      	ldrb	r2, [r3, #1]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80144de:	4b19      	ldr	r3, [pc, #100]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	789b      	ldrb	r3, [r3, #2]
 80144e4:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80144e6:	7b7b      	ldrb	r3, [r7, #13]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d005      	beq.n	80144f8 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80144ec:	4b15      	ldr	r3, [pc, #84]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	4798      	blx	r3
 80144f6:	e00b      	b.n	8014510 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80144f8:	4b12      	ldr	r3, [pc, #72]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014500:	4b10      	ldr	r3, [pc, #64]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	785b      	ldrb	r3, [r3, #1]
 8014506:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014508:	4b0e      	ldr	r3, [pc, #56]	@ (8014544 <LoRaMacConfirmQueueHandleCb+0x94>)
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	78db      	ldrb	r3, [r3, #3]
 801450e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014510:	f7ff ff06 	bl	8014320 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014514:	7b7b      	ldrb	r3, [r7, #13]
 8014516:	f083 0301 	eor.w	r3, r3, #1
 801451a:	b2db      	uxtb	r3, r3
 801451c:	2b00      	cmp	r3, #0
 801451e:	d004      	beq.n	801452a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014520:	f107 0308 	add.w	r3, r7, #8
 8014524:	4618      	mov	r0, r3
 8014526:	f7ff fec1 	bl	80142ac <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801452a:	7bfb      	ldrb	r3, [r7, #15]
 801452c:	3301      	adds	r3, #1
 801452e:	73fb      	strb	r3, [r7, #15]
 8014530:	7bfa      	ldrb	r2, [r7, #15]
 8014532:	7bbb      	ldrb	r3, [r7, #14]
 8014534:	429a      	cmp	r2, r3
 8014536:	d3c8      	bcc.n	80144ca <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014538:	bf00      	nop
 801453a:	bf00      	nop
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	20001bb4 	.word	0x20001bb4

08014548 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014548:	b480      	push	{r7}
 801454a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801454c:	4b03      	ldr	r3, [pc, #12]	@ (801455c <LoRaMacConfirmQueueGetCnt+0x14>)
 801454e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014552:	4618      	mov	r0, r3
 8014554:	46bd      	mov	sp, r7
 8014556:	bc80      	pop	{r7}
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop
 801455c:	20001bb4 	.word	0x20001bb4

08014560 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014564:	4b06      	ldr	r3, [pc, #24]	@ (8014580 <LoRaMacConfirmQueueIsFull+0x20>)
 8014566:	f893 3020 	ldrb.w	r3, [r3, #32]
 801456a:	4618      	mov	r0, r3
 801456c:	f7ff fe3a 	bl	80141e4 <IsListFull>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d001      	beq.n	801457a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014576:	2301      	movs	r3, #1
 8014578:	e000      	b.n	801457c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801457a:	2300      	movs	r3, #0
    }
}
 801457c:	4618      	mov	r0, r3
 801457e:	bd80      	pop	{r7, pc}
 8014580:	20001bb4 	.word	0x20001bb4

08014584 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b08e      	sub	sp, #56	@ 0x38
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	607b      	str	r3, [r7, #4]
 801458e:	460b      	mov	r3, r1
 8014590:	817b      	strh	r3, [r7, #10]
 8014592:	4613      	mov	r3, r2
 8014594:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801459c:	2309      	movs	r3, #9
 801459e:	e086      	b.n	80146ae <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80145a6:	2301      	movs	r3, #1
 80145a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80145aa:	2300      	movs	r3, #0
 80145ac:	623b      	str	r3, [r7, #32]
 80145ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80145b2:	2200      	movs	r2, #0
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	605a      	str	r2, [r3, #4]
 80145b8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80145ba:	2300      	movs	r3, #0
 80145bc:	613b      	str	r3, [r7, #16]
 80145be:	f107 0314 	add.w	r3, r7, #20
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
 80145c6:	605a      	str	r2, [r3, #4]
 80145c8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80145ca:	2301      	movs	r3, #1
 80145cc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80145ce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80145d2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	b2db      	uxtb	r3, r3
 80145d8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	0a1b      	lsrs	r3, r3, #8
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	0c1b      	lsrs	r3, r3, #16
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	0e1b      	lsrs	r3, r3, #24
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80145f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80145f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145fa:	0a1b      	lsrs	r3, r3, #8
 80145fc:	b2db      	uxtb	r3, r3
 80145fe:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014602:	0c1b      	lsrs	r3, r3, #16
 8014604:	b2db      	uxtb	r3, r3
 8014606:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801460a:	0e1b      	lsrs	r3, r3, #24
 801460c:	b2db      	uxtb	r3, r3
 801460e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014610:	e048      	b.n	80146a4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8014612:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014614:	b2db      	uxtb	r3, r3
 8014616:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014618:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801461a:	3301      	adds	r3, #1
 801461c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801461e:	f107 0320 	add.w	r3, r7, #32
 8014622:	7a7a      	ldrb	r2, [r7, #9]
 8014624:	f107 0010 	add.w	r0, r7, #16
 8014628:	2110      	movs	r1, #16
 801462a:	f7f8 fce2 	bl	800cff2 <SecureElementAesEncrypt>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014634:	230e      	movs	r3, #14
 8014636:	e03a      	b.n	80146ae <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014638:	2300      	movs	r3, #0
 801463a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801463e:	e01e      	b.n	801467e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014640:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014644:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014648:	4413      	add	r3, r2
 801464a:	461a      	mov	r2, r3
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	4413      	add	r3, r2
 8014650:	7819      	ldrb	r1, [r3, #0]
 8014652:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014656:	3338      	adds	r3, #56	@ 0x38
 8014658:	443b      	add	r3, r7
 801465a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801465e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8014662:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014666:	4403      	add	r3, r0
 8014668:	4618      	mov	r0, r3
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	4403      	add	r3, r0
 801466e:	404a      	eors	r2, r1
 8014670:	b2d2      	uxtb	r2, r2
 8014672:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014674:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014678:	3301      	adds	r3, #1
 801467a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801467e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014682:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014686:	2a10      	cmp	r2, #16
 8014688:	bfa8      	it	ge
 801468a:	2210      	movge	r2, #16
 801468c:	b212      	sxth	r2, r2
 801468e:	4293      	cmp	r3, r2
 8014690:	dbd6      	blt.n	8014640 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014692:	897b      	ldrh	r3, [r7, #10]
 8014694:	3b10      	subs	r3, #16
 8014696:	b29b      	uxth	r3, r3
 8014698:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801469a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801469e:	3310      	adds	r3, #16
 80146a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80146a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	dcb2      	bgt.n	8014612 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3738      	adds	r7, #56	@ 0x38
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80146b6:	b490      	push	{r4, r7}
 80146b8:	b082      	sub	sp, #8
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	4604      	mov	r4, r0
 80146be:	4608      	mov	r0, r1
 80146c0:	4611      	mov	r1, r2
 80146c2:	461a      	mov	r2, r3
 80146c4:	4623      	mov	r3, r4
 80146c6:	80fb      	strh	r3, [r7, #6]
 80146c8:	4603      	mov	r3, r0
 80146ca:	717b      	strb	r3, [r7, #5]
 80146cc:	460b      	mov	r3, r1
 80146ce:	713b      	strb	r3, [r7, #4]
 80146d0:	4613      	mov	r3, r2
 80146d2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d101      	bne.n	80146de <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80146da:	2309      	movs	r3, #9
 80146dc:	e04e      	b.n	801477c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	2249      	movs	r2, #73	@ 0x49
 80146e2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	3301      	adds	r3, #1
 80146e8:	2200      	movs	r2, #0
 80146ea:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	3302      	adds	r3, #2
 80146f0:	2200      	movs	r2, #0
 80146f2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	3303      	adds	r3, #3
 80146f8:	2200      	movs	r2, #0
 80146fa:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	3304      	adds	r3, #4
 8014700:	2200      	movs	r2, #0
 8014702:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	3305      	adds	r3, #5
 8014708:	78fa      	ldrb	r2, [r7, #3]
 801470a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	3306      	adds	r3, #6
 8014710:	693a      	ldr	r2, [r7, #16]
 8014712:	b2d2      	uxtb	r2, r2
 8014714:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	0a1a      	lsrs	r2, r3, #8
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	3307      	adds	r3, #7
 801471e:	b2d2      	uxtb	r2, r2
 8014720:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	0c1a      	lsrs	r2, r3, #16
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	3308      	adds	r3, #8
 801472a:	b2d2      	uxtb	r2, r2
 801472c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	0e1a      	lsrs	r2, r3, #24
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	3309      	adds	r3, #9
 8014736:	b2d2      	uxtb	r2, r2
 8014738:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	330a      	adds	r3, #10
 801473e:	697a      	ldr	r2, [r7, #20]
 8014740:	b2d2      	uxtb	r2, r2
 8014742:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	0a1a      	lsrs	r2, r3, #8
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	330b      	adds	r3, #11
 801474c:	b2d2      	uxtb	r2, r2
 801474e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	0c1a      	lsrs	r2, r3, #16
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	330c      	adds	r3, #12
 8014758:	b2d2      	uxtb	r2, r2
 801475a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	0e1a      	lsrs	r2, r3, #24
 8014760:	69bb      	ldr	r3, [r7, #24]
 8014762:	330d      	adds	r3, #13
 8014764:	b2d2      	uxtb	r2, r2
 8014766:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	330e      	adds	r3, #14
 801476c:	2200      	movs	r2, #0
 801476e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	330f      	adds	r3, #15
 8014774:	88fa      	ldrh	r2, [r7, #6]
 8014776:	b2d2      	uxtb	r2, r2
 8014778:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bc90      	pop	{r4, r7}
 8014784:	4770      	bx	lr

08014786 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014786:	b590      	push	{r4, r7, lr}
 8014788:	b08b      	sub	sp, #44	@ 0x2c
 801478a:	af04      	add	r7, sp, #16
 801478c:	6078      	str	r0, [r7, #4]
 801478e:	4608      	mov	r0, r1
 8014790:	4611      	mov	r1, r2
 8014792:	461a      	mov	r2, r3
 8014794:	4603      	mov	r3, r0
 8014796:	807b      	strh	r3, [r7, #2]
 8014798:	460b      	mov	r3, r1
 801479a:	707b      	strb	r3, [r7, #1]
 801479c:	4613      	mov	r3, r2
 801479e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d002      	beq.n	80147ac <ComputeCmacB0+0x26>
 80147a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d101      	bne.n	80147b0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147ac:	2309      	movs	r3, #9
 80147ae:	e024      	b.n	80147fa <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80147b0:	887b      	ldrh	r3, [r7, #2]
 80147b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80147b6:	d901      	bls.n	80147bc <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80147b8:	230d      	movs	r3, #13
 80147ba:	e01e      	b.n	80147fa <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80147bc:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80147c0:	783a      	ldrb	r2, [r7, #0]
 80147c2:	7879      	ldrb	r1, [r7, #1]
 80147c4:	8878      	ldrh	r0, [r7, #2]
 80147c6:	f107 0308 	add.w	r3, r7, #8
 80147ca:	9302      	str	r3, [sp, #8]
 80147cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ce:	9301      	str	r3, [sp, #4]
 80147d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	4623      	mov	r3, r4
 80147d6:	f7ff ff6e 	bl	80146b6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80147da:	7879      	ldrb	r1, [r7, #1]
 80147dc:	887a      	ldrh	r2, [r7, #2]
 80147de:	f107 0008 	add.w	r0, r7, #8
 80147e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147e4:	9300      	str	r3, [sp, #0]
 80147e6:	460b      	mov	r3, r1
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	f7f8 fbb5 	bl	800cf58 <SecureElementComputeAesCmac>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d001      	beq.n	80147f8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147f4:	230e      	movs	r3, #14
 80147f6:	e000      	b.n	80147fa <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80147f8:	2300      	movs	r3, #0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	371c      	adds	r7, #28
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd90      	pop	{r4, r7, pc}

08014802 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014802:	b590      	push	{r4, r7, lr}
 8014804:	b0cd      	sub	sp, #308	@ 0x134
 8014806:	af04      	add	r7, sp, #16
 8014808:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801480c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014810:	6020      	str	r0, [r4, #0]
 8014812:	460c      	mov	r4, r1
 8014814:	4610      	mov	r0, r2
 8014816:	4619      	mov	r1, r3
 8014818:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801481c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014820:	4622      	mov	r2, r4
 8014822:	801a      	strh	r2, [r3, #0]
 8014824:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014828:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801482c:	4602      	mov	r2, r0
 801482e:	701a      	strb	r2, [r3, #0]
 8014830:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014834:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014838:	460a      	mov	r2, r1
 801483a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801483c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014840:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d101      	bne.n	801484e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801484a:	2309      	movs	r3, #9
 801484c:	e063      	b.n	8014916 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801484e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014852:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801485c:	d901      	bls.n	8014862 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801485e:	230d      	movs	r3, #13
 8014860:	e059      	b.n	8014916 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014862:	f107 030c 	add.w	r3, r7, #12
 8014866:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801486a:	2100      	movs	r1, #0
 801486c:	4618      	mov	r0, r3
 801486e:	f003 fb2f 	bl	8017ed0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014872:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8014876:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801487a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801487e:	781a      	ldrb	r2, [r3, #0]
 8014880:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014884:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014888:	7819      	ldrb	r1, [r3, #0]
 801488a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801488e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014892:	8818      	ldrh	r0, [r3, #0]
 8014894:	f107 030c 	add.w	r3, r7, #12
 8014898:	9302      	str	r3, [sp, #8]
 801489a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	4623      	mov	r3, r4
 80148a8:	f7ff ff05 	bl	80146b6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80148ac:	f107 030c 	add.w	r3, r7, #12
 80148b0:	3310      	adds	r3, #16
 80148b2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80148b6:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80148ba:	8812      	ldrh	r2, [r2, #0]
 80148bc:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80148c0:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80148c4:	6809      	ldr	r1, [r1, #0]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f003 fac7 	bl	8017e5a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80148cc:	2306      	movs	r3, #6
 80148ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80148d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80148d6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	3310      	adds	r3, #16
 80148de:	b299      	uxth	r1, r3
 80148e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80148e4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	f107 000c 	add.w	r0, r7, #12
 80148ee:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80148f2:	f7f8 fb4f 	bl	800cf94 <SecureElementVerifyAesCmac>
 80148f6:	4603      	mov	r3, r0
 80148f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80148fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014900:	2b00      	cmp	r3, #0
 8014902:	d101      	bne.n	8014908 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014904:	2300      	movs	r3, #0
 8014906:	e006      	b.n	8014916 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014908:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801490c:	2b01      	cmp	r3, #1
 801490e:	d101      	bne.n	8014914 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014910:	2301      	movs	r3, #1
 8014912:	e000      	b.n	8014916 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014914:	230e      	movs	r3, #14
}
 8014916:	4618      	mov	r0, r3
 8014918:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801491c:	46bd      	mov	sp, r7
 801491e:	bd90      	pop	{r4, r7, pc}

08014920 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014920:	b480      	push	{r7}
 8014922:	b085      	sub	sp, #20
 8014924:	af00      	add	r7, sp, #0
 8014926:	4603      	mov	r3, r0
 8014928:	6039      	str	r1, [r7, #0]
 801492a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801492c:	2300      	movs	r3, #0
 801492e:	73fb      	strb	r3, [r7, #15]
 8014930:	e011      	b.n	8014956 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014932:	7bfb      	ldrb	r3, [r7, #15]
 8014934:	4a0c      	ldr	r2, [pc, #48]	@ (8014968 <GetKeyAddrItem+0x48>)
 8014936:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801493a:	79fa      	ldrb	r2, [r7, #7]
 801493c:	429a      	cmp	r2, r3
 801493e:	d107      	bne.n	8014950 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014940:	7bfb      	ldrb	r3, [r7, #15]
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	4a08      	ldr	r2, [pc, #32]	@ (8014968 <GetKeyAddrItem+0x48>)
 8014946:	441a      	add	r2, r3
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801494c:	2300      	movs	r3, #0
 801494e:	e006      	b.n	801495e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	3301      	adds	r3, #1
 8014954:	73fb      	strb	r3, [r7, #15]
 8014956:	7bfb      	ldrb	r3, [r7, #15]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d9ea      	bls.n	8014932 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801495c:	230b      	movs	r3, #11
}
 801495e:	4618      	mov	r0, r3
 8014960:	3714      	adds	r7, #20
 8014962:	46bd      	mov	sp, r7
 8014964:	bc80      	pop	{r7}
 8014966:	4770      	bx	lr
 8014968:	20000120 	.word	0x20000120

0801496c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b088      	sub	sp, #32
 8014970:	af00      	add	r7, sp, #0
 8014972:	60b9      	str	r1, [r7, #8]
 8014974:	607a      	str	r2, [r7, #4]
 8014976:	461a      	mov	r2, r3
 8014978:	4603      	mov	r3, r0
 801497a:	73fb      	strb	r3, [r7, #15]
 801497c:	4613      	mov	r3, r2
 801497e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014980:	2300      	movs	r3, #0
 8014982:	613b      	str	r3, [r7, #16]
 8014984:	f107 0314 	add.w	r3, r7, #20
 8014988:	2200      	movs	r2, #0
 801498a:	601a      	str	r2, [r3, #0]
 801498c:	605a      	str	r2, [r3, #4]
 801498e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014990:	7bfb      	ldrb	r3, [r7, #15]
 8014992:	2b02      	cmp	r3, #2
 8014994:	d002      	beq.n	801499c <DeriveSessionKey10x+0x30>
 8014996:	2b03      	cmp	r3, #3
 8014998:	d003      	beq.n	80149a2 <DeriveSessionKey10x+0x36>
 801499a:	e005      	b.n	80149a8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 801499c:	2301      	movs	r3, #1
 801499e:	743b      	strb	r3, [r7, #16]
            break;
 80149a0:	e004      	b.n	80149ac <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80149a2:	2302      	movs	r3, #2
 80149a4:	743b      	strb	r3, [r7, #16]
            break;
 80149a6:	e001      	b.n	80149ac <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80149a8:	230a      	movs	r3, #10
 80149aa:	e02a      	b.n	8014a02 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	b2db      	uxtb	r3, r3
 80149b0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	0a1b      	lsrs	r3, r3, #8
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	0c1b      	lsrs	r3, r3, #16
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	0a1b      	lsrs	r3, r3, #8
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	0c1b      	lsrs	r3, r3, #16
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80149d8:	89bb      	ldrh	r3, [r7, #12]
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80149de:	89bb      	ldrh	r3, [r7, #12]
 80149e0:	0a1b      	lsrs	r3, r3, #8
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80149e8:	7bfa      	ldrb	r2, [r7, #15]
 80149ea:	f107 0310 	add.w	r3, r7, #16
 80149ee:	2101      	movs	r1, #1
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7f8 fb65 	bl	800d0c0 <SecureElementDeriveAndStoreKey>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80149fc:	230e      	movs	r3, #14
 80149fe:	e000      	b.n	8014a02 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a00:	2300      	movs	r3, #0
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3720      	adds	r7, #32
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
	...

08014a0c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	4603      	mov	r3, r0
 8014a14:	6039      	str	r1, [r7, #0]
 8014a16:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d101      	bne.n	8014a22 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a1e:	2309      	movs	r3, #9
 8014a20:	e03b      	b.n	8014a9a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014a22:	79fb      	ldrb	r3, [r7, #7]
 8014a24:	3b01      	subs	r3, #1
 8014a26:	2b03      	cmp	r3, #3
 8014a28:	d834      	bhi.n	8014a94 <GetLastFcntDown+0x88>
 8014a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8014a30 <GetLastFcntDown+0x24>)
 8014a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a30:	08014a41 	.word	0x08014a41
 8014a34:	08014a59 	.word	0x08014a59
 8014a38:	08014a71 	.word	0x08014a71
 8014a3c:	08014a89 	.word	0x08014a89
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014a40:	4b18      	ldr	r3, [pc, #96]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	691a      	ldr	r2, [r3, #16]
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014a4a:	4b16      	ldr	r3, [pc, #88]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	4b15      	ldr	r3, [pc, #84]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	6912      	ldr	r2, [r2, #16]
 8014a54:	621a      	str	r2, [r3, #32]
            break;
 8014a56:	e01f      	b.n	8014a98 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014a58:	4b12      	ldr	r3, [pc, #72]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	695a      	ldr	r2, [r3, #20]
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014a62:	4b10      	ldr	r3, [pc, #64]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a64:	681a      	ldr	r2, [r3, #0]
 8014a66:	4b0f      	ldr	r3, [pc, #60]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	6952      	ldr	r2, [r2, #20]
 8014a6c:	621a      	str	r2, [r3, #32]
            break;
 8014a6e:	e013      	b.n	8014a98 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014a70:	4b0c      	ldr	r3, [pc, #48]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	699a      	ldr	r2, [r3, #24]
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	4b09      	ldr	r3, [pc, #36]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	6992      	ldr	r2, [r2, #24]
 8014a84:	621a      	str	r2, [r3, #32]
            break;
 8014a86:	e007      	b.n	8014a98 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014a88:	4b06      	ldr	r3, [pc, #24]	@ (8014aa4 <GetLastFcntDown+0x98>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	69da      	ldr	r2, [r3, #28]
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	601a      	str	r2, [r3, #0]
            break;
 8014a92:	e001      	b.n	8014a98 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014a94:	2305      	movs	r3, #5
 8014a96:	e000      	b.n	8014a9a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014a98:	2300      	movs	r3, #0
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	370c      	adds	r7, #12
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bc80      	pop	{r7}
 8014aa2:	4770      	bx	lr
 8014aa4:	20001bd8 	.word	0x20001bd8

08014aa8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	4603      	mov	r3, r0
 8014ab0:	6039      	str	r1, [r7, #0]
 8014ab2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014ab8:	f107 020c 	add.w	r2, r7, #12
 8014abc:	79fb      	ldrb	r3, [r7, #7]
 8014abe:	4611      	mov	r1, r2
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7ff ffa3 	bl	8014a0c <GetLastFcntDown>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d001      	beq.n	8014ad0 <CheckFCntDown+0x28>
    {
        return false;
 8014acc:	2300      	movs	r3, #0
 8014ace:	e00a      	b.n	8014ae6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d803      	bhi.n	8014ae0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014ad8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ade:	d101      	bne.n	8014ae4 <CheckFCntDown+0x3c>
    {
        return true;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	e000      	b.n	8014ae6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014ae4:	2300      	movs	r3, #0
    }
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
	...

08014af0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014af0:	b480      	push	{r7}
 8014af2:	b083      	sub	sp, #12
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	4603      	mov	r3, r0
 8014af8:	6039      	str	r1, [r7, #0]
 8014afa:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014afc:	79fb      	ldrb	r3, [r7, #7]
 8014afe:	3b01      	subs	r3, #1
 8014b00:	2b03      	cmp	r3, #3
 8014b02:	d81f      	bhi.n	8014b44 <UpdateFCntDown+0x54>
 8014b04:	a201      	add	r2, pc, #4	@ (adr r2, 8014b0c <UpdateFCntDown+0x1c>)
 8014b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b0a:	bf00      	nop
 8014b0c:	08014b1d 	.word	0x08014b1d
 8014b10:	08014b27 	.word	0x08014b27
 8014b14:	08014b31 	.word	0x08014b31
 8014b18:	08014b3b 	.word	0x08014b3b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8014b50 <UpdateFCntDown+0x60>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	683a      	ldr	r2, [r7, #0]
 8014b22:	611a      	str	r2, [r3, #16]
            break;
 8014b24:	e00f      	b.n	8014b46 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014b26:	4b0a      	ldr	r3, [pc, #40]	@ (8014b50 <UpdateFCntDown+0x60>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	615a      	str	r2, [r3, #20]
            break;
 8014b2e:	e00a      	b.n	8014b46 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014b30:	4b07      	ldr	r3, [pc, #28]	@ (8014b50 <UpdateFCntDown+0x60>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	683a      	ldr	r2, [r7, #0]
 8014b36:	619a      	str	r2, [r3, #24]
            break;
 8014b38:	e005      	b.n	8014b46 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014b3a:	4b05      	ldr	r3, [pc, #20]	@ (8014b50 <UpdateFCntDown+0x60>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	61da      	str	r2, [r3, #28]
            break;
 8014b42:	e000      	b.n	8014b46 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014b44:	bf00      	nop
    }
}
 8014b46:	bf00      	nop
 8014b48:	370c      	adds	r7, #12
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bc80      	pop	{r7}
 8014b4e:	4770      	bx	lr
 8014b50:	20001bd8 	.word	0x20001bd8

08014b54 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014b5a:	4b18      	ldr	r3, [pc, #96]	@ (8014bbc <ResetFCnts+0x68>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014b62:	4b16      	ldr	r3, [pc, #88]	@ (8014bbc <ResetFCnts+0x68>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f04f 32ff 	mov.w	r2, #4294967295
 8014b6a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014b6c:	4b13      	ldr	r3, [pc, #76]	@ (8014bbc <ResetFCnts+0x68>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f04f 32ff 	mov.w	r2, #4294967295
 8014b74:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014b76:	4b11      	ldr	r3, [pc, #68]	@ (8014bbc <ResetFCnts+0x68>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b7e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014b80:	4b0e      	ldr	r3, [pc, #56]	@ (8014bbc <ResetFCnts+0x68>)
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	4b0d      	ldr	r3, [pc, #52]	@ (8014bbc <ResetFCnts+0x68>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	6992      	ldr	r2, [r2, #24]
 8014b8a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	607b      	str	r3, [r7, #4]
 8014b90:	e00b      	b.n	8014baa <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014b92:	4b0a      	ldr	r3, [pc, #40]	@ (8014bbc <ResetFCnts+0x68>)
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	3306      	adds	r3, #6
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	4413      	add	r3, r2
 8014b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8014ba2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	607b      	str	r3, [r7, #4]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	ddf0      	ble.n	8014b92 <ResetFCnts+0x3e>
    }
}
 8014bb0:	bf00      	nop
 8014bb2:	bf00      	nop
 8014bb4:	370c      	adds	r7, #12
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bc80      	pop	{r7}
 8014bba:	4770      	bx	lr
 8014bbc:	20001bd8 	.word	0x20001bd8

08014bc0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d101      	bne.n	8014bd2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014bce:	2308      	movs	r3, #8
 8014bd0:	e01c      	b.n	8014c0c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014bd2:	4a10      	ldr	r2, [pc, #64]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2228      	movs	r2, #40	@ 0x28
 8014bde:	2100      	movs	r1, #0
 8014be0:	4618      	mov	r0, r3
 8014be2:	f003 f975 	bl	8017ed0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014be6:	4b0b      	ldr	r3, [pc, #44]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2201      	movs	r2, #1
 8014bec:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014bee:	4b09      	ldr	r3, [pc, #36]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2201      	movs	r2, #1
 8014bf4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014bf6:	4b07      	ldr	r3, [pc, #28]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014bfe:	4b05      	ldr	r3, [pc, #20]	@ (8014c14 <LoRaMacCryptoInit+0x54>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2200      	movs	r2, #0
 8014c04:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014c06:	f7ff ffa5 	bl	8014b54 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014c0a:	2300      	movs	r3, #0
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3708      	adds	r7, #8
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	20001bd8 	.word	0x20001bd8

08014c18 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014c20:	4b04      	ldr	r3, [pc, #16]	@ (8014c34 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	370c      	adds	r7, #12
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bc80      	pop	{r7}
 8014c32:	4770      	bx	lr
 8014c34:	20001bd8 	.word	0x20001bd8

08014c38 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d101      	bne.n	8014c4a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c46:	2309      	movs	r3, #9
 8014c48:	e006      	b.n	8014c58 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014c4a:	4b06      	ldr	r3, [pc, #24]	@ (8014c64 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	1c5a      	adds	r2, r3, #1
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014c56:	2300      	movs	r3, #0
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bc80      	pop	{r7}
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	20001bd8 	.word	0x20001bd8

08014c68 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b088      	sub	sp, #32
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	4603      	mov	r3, r0
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
 8014c74:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014c7e:	2312      	movs	r3, #18
 8014c80:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d101      	bne.n	8014c8c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c88:	2309      	movs	r3, #9
 8014c8a:	e035      	b.n	8014cf8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014c8c:	f107 0214 	add.w	r2, r7, #20
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
 8014c92:	4611      	mov	r1, r2
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ff feb9 	bl	8014a0c <GetLastFcntDown>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014c9e:	7efb      	ldrb	r3, [r7, #27]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d001      	beq.n	8014ca8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014ca4:	7efb      	ldrb	r3, [r7, #27]
 8014ca6:	e027      	b.n	8014cf8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cae:	d103      	bne.n	8014cb8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	601a      	str	r2, [r3, #0]
 8014cb6:	e01e      	b.n	8014cf6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	dd05      	ble.n	8014cd4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	441a      	add	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	601a      	str	r2, [r3, #0]
 8014cd2:	e010      	b.n	8014cf6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d104      	bne.n	8014ce4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014cda:	697a      	ldr	r2, [r7, #20]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014ce0:	2307      	movs	r3, #7
 8014ce2:	e009      	b.n	8014cf8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	0c1b      	lsrs	r3, r3, #16
 8014ce8:	041b      	lsls	r3, r3, #16
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	4413      	add	r3, r2
 8014cee:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014cf6:	2300      	movs	r3, #0
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3720      	adds	r7, #32
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014d00:	b480      	push	{r7}
 8014d02:	b085      	sub	sp, #20
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d101      	bne.n	8014d12 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d0e:	2309      	movs	r3, #9
 8014d10:	e017      	b.n	8014d42 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014d12:	2300      	movs	r3, #0
 8014d14:	60fb      	str	r3, [r7, #12]
 8014d16:	e010      	b.n	8014d3a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014d18:	4b0c      	ldr	r3, [pc, #48]	@ (8014d4c <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014d1a:	6819      	ldr	r1, [r3, #0]
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	222c      	movs	r2, #44	@ 0x2c
 8014d20:	fb02 f303 	mul.w	r3, r2, r3
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	4413      	add	r3, r2
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	3206      	adds	r2, #6
 8014d2c:	0092      	lsls	r2, r2, #2
 8014d2e:	440a      	add	r2, r1
 8014d30:	3204      	adds	r2, #4
 8014d32:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	3301      	adds	r3, #1
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	ddeb      	ble.n	8014d18 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014d40:	2300      	movs	r3, #0
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3714      	adds	r7, #20
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bc80      	pop	{r7}
 8014d4a:	4770      	bx	lr
 8014d4c:	20001bd8 	.word	0x20001bd8

08014d50 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	4603      	mov	r3, r0
 8014d58:	6039      	str	r1, [r7, #0]
 8014d5a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014d5c:	79fb      	ldrb	r3, [r7, #7]
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7f8 f89b 	bl	800ce9c <SecureElementSetKey>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d001      	beq.n	8014d70 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d6c:	230e      	movs	r3, #14
 8014d6e:	e018      	b.n	8014da2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014d70:	79fb      	ldrb	r3, [r7, #7]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d114      	bne.n	8014da0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8014d76:	4b0d      	ldr	r3, [pc, #52]	@ (8014dac <LoRaMacCryptoSetKey+0x5c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	789b      	ldrb	r3, [r3, #2]
 8014d7c:	79fa      	ldrb	r2, [r7, #7]
 8014d7e:	4611      	mov	r1, r2
 8014d80:	4618      	mov	r0, r3
 8014d82:	f000 fa37 	bl	80151f4 <LoRaMacCryptoDeriveMcRootKey>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d001      	beq.n	8014d90 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d8c:	230e      	movs	r3, #14
 8014d8e:	e008      	b.n	8014da2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014d90:	2004      	movs	r0, #4
 8014d92:	f000 fa5a 	bl	801524a <LoRaMacCryptoDeriveMcKEKey>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d001      	beq.n	8014da0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d9c:	230e      	movs	r3, #14
 8014d9e:	e000      	b.n	8014da2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3708      	adds	r7, #8
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	20001bd8 	.word	0x20001bd8

08014db0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b086      	sub	sp, #24
 8014db4:	af02      	add	r7, sp, #8
 8014db6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d101      	bne.n	8014dc2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014dbe:	2309      	movs	r3, #9
 8014dc0:	e02d      	b.n	8014e1e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014dc6:	4b18      	ldr	r3, [pc, #96]	@ (8014e28 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	889a      	ldrh	r2, [r3, #4]
 8014dcc:	3201      	adds	r2, #1
 8014dce:	b292      	uxth	r2, r2
 8014dd0:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014dd2:	4b15      	ldr	r3, [pc, #84]	@ (8014e28 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	889a      	ldrh	r2, [r3, #4]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f000 fc14 	bl	801560a <LoRaMacSerializerJoinRequest>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d001      	beq.n	8014dec <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014de8:	2310      	movs	r3, #16
 8014dea:	e018      	b.n	8014e1e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6819      	ldr	r1, [r3, #0]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3318      	adds	r3, #24
 8014df4:	7bfa      	ldrb	r2, [r7, #15]
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	4613      	mov	r3, r2
 8014dfa:	2213      	movs	r2, #19
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	f7f8 f8ab 	bl	800cf58 <SecureElementComputeAesCmac>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014e08:	230e      	movs	r3, #14
 8014e0a:	e008      	b.n	8014e1e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f000 fbfc 	bl	801560a <LoRaMacSerializerJoinRequest>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d001      	beq.n	8014e1c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014e18:	2310      	movs	r3, #16
 8014e1a:	e000      	b.n	8014e1e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	20001bd8 	.word	0x20001bd8

08014e2c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014e2c:	b590      	push	{r4, r7, lr}
 8014e2e:	b097      	sub	sp, #92	@ 0x5c
 8014e30:	af04      	add	r7, sp, #16
 8014e32:	4603      	mov	r3, r0
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	607a      	str	r2, [r7, #4]
 8014e38:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d002      	beq.n	8014e46 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d101      	bne.n	8014e4a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e46:	2309      	movs	r3, #9
 8014e48:	e0bd      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014e4a:	2312      	movs	r3, #18
 8014e4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014e50:	2300      	movs	r3, #0
 8014e52:	61bb      	str	r3, [r7, #24]
 8014e54:	f107 031c 	add.w	r3, r7, #28
 8014e58:	221d      	movs	r2, #29
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f008 fc25 	bl	801d6ac <memset>
    uint8_t versionMinor         = 0;
 8014e62:	2300      	movs	r3, #0
 8014e64:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014e66:	4b5a      	ldr	r3, [pc, #360]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	889b      	ldrh	r3, [r3, #4]
 8014e6c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681c      	ldr	r4, [r3, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	791b      	ldrb	r3, [r3, #4]
 8014e78:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8014e7c:	7bf8      	ldrb	r0, [r7, #15]
 8014e7e:	f107 0217 	add.w	r2, r7, #23
 8014e82:	9202      	str	r2, [sp, #8]
 8014e84:	f107 0218 	add.w	r2, r7, #24
 8014e88:	9201      	str	r2, [sp, #4]
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	4623      	mov	r3, r4
 8014e8e:	460a      	mov	r2, r1
 8014e90:	68b9      	ldr	r1, [r7, #8]
 8014e92:	f7f8 f955 	bl	800d140 <SecureElementProcessJoinAccept>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d001      	beq.n	8014ea0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014e9c:	230e      	movs	r3, #14
 8014e9e:	e092      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6818      	ldr	r0, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	791b      	ldrb	r3, [r3, #4]
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	f107 0318 	add.w	r3, r7, #24
 8014eae:	4619      	mov	r1, r3
 8014eb0:	f002 ffd3 	bl	8017e5a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 f9eb 	bl	8015290 <LoRaMacParserJoinAccept>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d001      	beq.n	8014ec4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014ec0:	230f      	movs	r3, #15
 8014ec2:	e080      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	799b      	ldrb	r3, [r3, #6]
 8014ec8:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	79db      	ldrb	r3, [r3, #7]
 8014ece:	021b      	lsls	r3, r3, #8
 8014ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	7a1b      	ldrb	r3, [r3, #8]
 8014eda:	041b      	lsls	r3, r3, #16
 8014edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014ede:	4313      	orrs	r3, r2
 8014ee0:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d010      	beq.n	8014f10 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014eee:	4b38      	ldr	r3, [pc, #224]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014ef4:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014ef6:	7dfb      	ldrb	r3, [r7, #23]
 8014ef8:	2100      	movs	r1, #0
 8014efa:	4618      	mov	r0, r3
 8014efc:	f000 f97a 	bl	80151f4 <LoRaMacCryptoDeriveMcRootKey>
 8014f00:	4603      	mov	r3, r0
 8014f02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014f06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d005      	beq.n	8014f1a <LoRaMacCryptoHandleJoinAccept+0xee>
 8014f0e:	e001      	b.n	8014f14 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014f10:	2303      	movs	r3, #3
 8014f12:	e058      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8014f14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f18:	e055      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014f1a:	2004      	movs	r0, #4
 8014f1c:	f000 f995 	bl	801524a <LoRaMacCryptoDeriveMcKEKey>
 8014f20:	4603      	mov	r3, r0
 8014f22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014f26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d002      	beq.n	8014f34 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014f2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f32:	e048      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	7a5b      	ldrb	r3, [r3, #9]
 8014f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	7a9b      	ldrb	r3, [r3, #10]
 8014f3e:	021b      	lsls	r3, r3, #8
 8014f40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f42:	4313      	orrs	r3, r2
 8014f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	7adb      	ldrb	r3, [r3, #11]
 8014f4a:	041b      	lsls	r3, r3, #16
 8014f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f4e:	4313      	orrs	r3, r2
 8014f50:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014f52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014f56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014f5a:	2003      	movs	r0, #3
 8014f5c:	f7ff fd06 	bl	801496c <DeriveSessionKey10x>
 8014f60:	4603      	mov	r3, r0
 8014f62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014f66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d002      	beq.n	8014f74 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014f6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f72:	e028      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014f78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014f7c:	2002      	movs	r0, #2
 8014f7e:	f7ff fcf5 	bl	801496c <DeriveSessionKey10x>
 8014f82:	4603      	mov	r3, r0
 8014f84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014f88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d002      	beq.n	8014f96 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014f90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014f94:	e017      	b.n	8014fc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014f96:	4b0e      	ldr	r3, [pc, #56]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	7dfa      	ldrb	r2, [r7, #23]
 8014f9c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f04f 32ff 	mov.w	r2, #4294967295
 8014fae:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014fb0:	4b07      	ldr	r3, [pc, #28]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8014fb8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014fba:	4b05      	ldr	r3, [pc, #20]	@ (8014fd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	374c      	adds	r7, #76	@ 0x4c
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd90      	pop	{r4, r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	20001bd8 	.word	0x20001bd8

08014fd4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014fd4:	b590      	push	{r4, r7, lr}
 8014fd6:	b08b      	sub	sp, #44	@ 0x2c
 8014fd8:	af04      	add	r7, sp, #16
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	607b      	str	r3, [r7, #4]
 8014fde:	460b      	mov	r3, r1
 8014fe0:	72fb      	strb	r3, [r7, #11]
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014fe6:	2312      	movs	r3, #18
 8014fe8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014fea:	2303      	movs	r3, #3
 8014fec:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ff4:	2309      	movs	r3, #9
 8014ff6:	e05e      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014ff8:	4b31      	ldr	r3, [pc, #196]	@ (80150c0 <LoRaMacCryptoSecureMessage+0xec>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	429a      	cmp	r2, r3
 8015002:	d201      	bcs.n	8015008 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015004:	2306      	movs	r3, #6
 8015006:	e056      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d101      	bne.n	8015016 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015012:	2302      	movs	r3, #2
 8015014:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015016:	4b2a      	ldr	r3, [pc, #168]	@ (80150c0 <LoRaMacCryptoSecureMessage+0xec>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	68fa      	ldr	r2, [r7, #12]
 801501e:	429a      	cmp	r2, r3
 8015020:	d916      	bls.n	8015050 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801502c:	b219      	sxth	r1, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	689c      	ldr	r4, [r3, #8]
 8015032:	7dfa      	ldrb	r2, [r7, #23]
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	9301      	str	r3, [sp, #4]
 8015038:	2300      	movs	r3, #0
 801503a:	9300      	str	r3, [sp, #0]
 801503c:	4623      	mov	r3, r4
 801503e:	f7ff faa1 	bl	8014584 <PayloadEncrypt>
 8015042:	4603      	mov	r3, r0
 8015044:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015046:	7dbb      	ldrb	r3, [r7, #22]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801504c:	7dbb      	ldrb	r3, [r7, #22]
 801504e:	e032      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 fb5c 	bl	801570e <LoRaMacSerializerData>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d001      	beq.n	8015060 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801505c:	2310      	movs	r3, #16
 801505e:	e02a      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015060:	2302      	movs	r3, #2
 8015062:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6818      	ldr	r0, [r3, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	791b      	ldrb	r3, [r3, #4]
 801506c:	3b04      	subs	r3, #4
 801506e:	b299      	uxth	r1, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	322c      	adds	r2, #44	@ 0x2c
 8015078:	7dfc      	ldrb	r4, [r7, #23]
 801507a:	9203      	str	r2, [sp, #12]
 801507c:	68fa      	ldr	r2, [r7, #12]
 801507e:	9202      	str	r2, [sp, #8]
 8015080:	9301      	str	r3, [sp, #4]
 8015082:	2300      	movs	r3, #0
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	2300      	movs	r3, #0
 8015088:	4622      	mov	r2, r4
 801508a:	f7ff fb7c 	bl	8014786 <ComputeCmacB0>
 801508e:	4603      	mov	r3, r0
 8015090:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015092:	7dbb      	ldrb	r3, [r7, #22]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d001      	beq.n	801509c <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015098:	7dbb      	ldrb	r3, [r7, #22]
 801509a:	e00c      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 fb36 	bl	801570e <LoRaMacSerializerData>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d001      	beq.n	80150ac <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80150a8:	2310      	movs	r3, #16
 80150aa:	e004      	b.n	80150b6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80150ac:	4b04      	ldr	r3, [pc, #16]	@ (80150c0 <LoRaMacCryptoSecureMessage+0xec>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	371c      	adds	r7, #28
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd90      	pop	{r4, r7, pc}
 80150be:	bf00      	nop
 80150c0:	20001bd8 	.word	0x20001bd8

080150c4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80150c4:	b590      	push	{r4, r7, lr}
 80150c6:	b08b      	sub	sp, #44	@ 0x2c
 80150c8:	af04      	add	r7, sp, #16
 80150ca:	60b9      	str	r1, [r7, #8]
 80150cc:	607b      	str	r3, [r7, #4]
 80150ce:	4603      	mov	r3, r0
 80150d0:	73fb      	strb	r3, [r7, #15]
 80150d2:	4613      	mov	r3, r2
 80150d4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80150d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d101      	bne.n	80150e0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150dc:	2309      	movs	r3, #9
 80150de:	e083      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80150e0:	7bbb      	ldrb	r3, [r7, #14]
 80150e2:	6879      	ldr	r1, [r7, #4]
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7ff fcdf 	bl	8014aa8 <CheckFCntDown>
 80150ea:	4603      	mov	r3, r0
 80150ec:	f083 0301 	eor.w	r3, r3, #1
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d001      	beq.n	80150fa <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80150f6:	2306      	movs	r3, #6
 80150f8:	e076      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80150fa:	2312      	movs	r3, #18
 80150fc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80150fe:	2303      	movs	r3, #3
 8015100:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015102:	2302      	movs	r3, #2
 8015104:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015108:	f000 f98d 	bl	8015426 <LoRaMacParserData>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d001      	beq.n	8015116 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015112:	230f      	movs	r3, #15
 8015114:	e068      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015116:	f107 0210 	add.w	r2, r7, #16
 801511a:	7bfb      	ldrb	r3, [r7, #15]
 801511c:	4611      	mov	r1, r2
 801511e:	4618      	mov	r0, r3
 8015120:	f7ff fbfe 	bl	8014920 <GetKeyAddrItem>
 8015124:	4603      	mov	r3, r0
 8015126:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015128:	7d7b      	ldrb	r3, [r7, #21]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d001      	beq.n	8015132 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801512e:	7d7b      	ldrb	r3, [r7, #21]
 8015130:	e05a      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	785b      	ldrb	r3, [r3, #1]
 8015136:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	789b      	ldrb	r3, [r3, #2]
 801513c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015140:	689b      	ldr	r3, [r3, #8]
 8015142:	68ba      	ldr	r2, [r7, #8]
 8015144:	429a      	cmp	r2, r3
 8015146:	d001      	beq.n	801514c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015148:	2302      	movs	r3, #2
 801514a:	e04d      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801514e:	7b1b      	ldrb	r3, [r3, #12]
 8015150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b00      	cmp	r3, #0
 8015158:	bf14      	ite	ne
 801515a:	2301      	movne	r3, #1
 801515c:	2300      	moveq	r3, #0
 801515e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015160:	4b23      	ldr	r3, [pc, #140]	@ (80151f0 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	789b      	ldrb	r3, [r3, #2]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d101      	bne.n	801516e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801516a:	2300      	movs	r3, #0
 801516c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015170:	6818      	ldr	r0, [r3, #0]
 8015172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015174:	791b      	ldrb	r3, [r3, #4]
 8015176:	3b04      	subs	r3, #4
 8015178:	b299      	uxth	r1, r3
 801517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801517e:	7dbc      	ldrb	r4, [r7, #22]
 8015180:	7d3a      	ldrb	r2, [r7, #20]
 8015182:	9303      	str	r3, [sp, #12]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	9302      	str	r3, [sp, #8]
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	9301      	str	r3, [sp, #4]
 801518c:	2301      	movs	r3, #1
 801518e:	9300      	str	r3, [sp, #0]
 8015190:	4623      	mov	r3, r4
 8015192:	f7ff fb36 	bl	8014802 <VerifyCmacB0>
 8015196:	4603      	mov	r3, r0
 8015198:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801519a:	7d7b      	ldrb	r3, [r7, #21]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d001      	beq.n	80151a4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80151a0:	7d7b      	ldrb	r3, [r7, #21]
 80151a2:	e021      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80151a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d101      	bne.n	80151b2 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80151ae:	2302      	movs	r3, #2
 80151b0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80151b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80151b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80151bc:	b219      	sxth	r1, r3
 80151be:	7dfa      	ldrb	r2, [r7, #23]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	9301      	str	r3, [sp, #4]
 80151c4:	2301      	movs	r3, #1
 80151c6:	9300      	str	r3, [sp, #0]
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	f7ff f9db 	bl	8014584 <PayloadEncrypt>
 80151ce:	4603      	mov	r3, r0
 80151d0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80151d2:	7d7b      	ldrb	r3, [r7, #21]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d001      	beq.n	80151dc <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80151d8:	7d7b      	ldrb	r3, [r7, #21]
 80151da:	e005      	b.n	80151e8 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80151dc:	7bbb      	ldrb	r3, [r7, #14]
 80151de:	6879      	ldr	r1, [r7, #4]
 80151e0:	4618      	mov	r0, r3
 80151e2:	f7ff fc85 	bl	8014af0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80151e6:	2300      	movs	r3, #0
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	371c      	adds	r7, #28
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd90      	pop	{r4, r7, pc}
 80151f0:	20001bd8 	.word	0x20001bd8

080151f4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b086      	sub	sp, #24
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	4603      	mov	r3, r0
 80151fc:	460a      	mov	r2, r1
 80151fe:	71fb      	strb	r3, [r7, #7]
 8015200:	4613      	mov	r3, r2
 8015202:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015204:	79bb      	ldrb	r3, [r7, #6]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d001      	beq.n	801520e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801520a:	230a      	movs	r3, #10
 801520c:	e019      	b.n	8015242 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801520e:	2300      	movs	r3, #0
 8015210:	60bb      	str	r3, [r7, #8]
 8015212:	f107 030c 	add.w	r3, r7, #12
 8015216:	2200      	movs	r2, #0
 8015218:	601a      	str	r2, [r3, #0]
 801521a:	605a      	str	r2, [r3, #4]
 801521c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801521e:	79fb      	ldrb	r3, [r7, #7]
 8015220:	2b01      	cmp	r3, #1
 8015222:	d101      	bne.n	8015228 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8015224:	2320      	movs	r3, #32
 8015226:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015228:	79b9      	ldrb	r1, [r7, #6]
 801522a:	f107 0308 	add.w	r3, r7, #8
 801522e:	2204      	movs	r2, #4
 8015230:	4618      	mov	r0, r3
 8015232:	f7f7 ff45 	bl	800d0c0 <SecureElementDeriveAndStoreKey>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801523c:	230e      	movs	r3, #14
 801523e:	e000      	b.n	8015242 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015240:	2300      	movs	r3, #0
}
 8015242:	4618      	mov	r0, r3
 8015244:	3718      	adds	r7, #24
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801524a:	b580      	push	{r7, lr}
 801524c:	b086      	sub	sp, #24
 801524e:	af00      	add	r7, sp, #0
 8015250:	4603      	mov	r3, r0
 8015252:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015254:	79fb      	ldrb	r3, [r7, #7]
 8015256:	2b04      	cmp	r3, #4
 8015258:	d001      	beq.n	801525e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801525a:	230a      	movs	r3, #10
 801525c:	e014      	b.n	8015288 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801525e:	2300      	movs	r3, #0
 8015260:	60bb      	str	r3, [r7, #8]
 8015262:	f107 030c 	add.w	r3, r7, #12
 8015266:	2200      	movs	r2, #0
 8015268:	601a      	str	r2, [r3, #0]
 801526a:	605a      	str	r2, [r3, #4]
 801526c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801526e:	79f9      	ldrb	r1, [r7, #7]
 8015270:	f107 0308 	add.w	r3, r7, #8
 8015274:	227f      	movs	r2, #127	@ 0x7f
 8015276:	4618      	mov	r0, r3
 8015278:	f7f7 ff22 	bl	800d0c0 <SecureElementDeriveAndStoreKey>
 801527c:	4603      	mov	r3, r0
 801527e:	2b00      	cmp	r3, #0
 8015280:	d001      	beq.n	8015286 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015282:	230e      	movs	r3, #14
 8015284:	e000      	b.n	8015288 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015286:	2300      	movs	r3, #0
}
 8015288:	4618      	mov	r0, r3
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d003      	beq.n	80152a6 <LoRaMacParserJoinAccept+0x16>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d101      	bne.n	80152aa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80152a6:	2302      	movs	r3, #2
 80152a8:	e0b9      	b.n	801541e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	89fb      	ldrh	r3, [r7, #14]
 80152b4:	1c59      	adds	r1, r3, #1
 80152b6:	81f9      	strh	r1, [r7, #14]
 80152b8:	4413      	add	r3, r2
 80152ba:	781a      	ldrb	r2, [r3, #0]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	1d98      	adds	r0, r3, #6
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	89fb      	ldrh	r3, [r7, #14]
 80152ca:	4413      	add	r3, r2
 80152cc:	2203      	movs	r2, #3
 80152ce:	4619      	mov	r1, r3
 80152d0:	f002 fdc3 	bl	8017e5a <memcpy1>
    bufItr = bufItr + 3;
 80152d4:	89fb      	ldrh	r3, [r7, #14]
 80152d6:	3303      	adds	r3, #3
 80152d8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f103 0009 	add.w	r0, r3, #9
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681a      	ldr	r2, [r3, #0]
 80152e4:	89fb      	ldrh	r3, [r7, #14]
 80152e6:	4413      	add	r3, r2
 80152e8:	2203      	movs	r2, #3
 80152ea:	4619      	mov	r1, r3
 80152ec:	f002 fdb5 	bl	8017e5a <memcpy1>
    bufItr = bufItr + 3;
 80152f0:	89fb      	ldrh	r3, [r7, #14]
 80152f2:	3303      	adds	r3, #3
 80152f4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	89fb      	ldrh	r3, [r7, #14]
 80152fc:	1c59      	adds	r1, r3, #1
 80152fe:	81f9      	strh	r1, [r7, #14]
 8015300:	4413      	add	r3, r2
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	461a      	mov	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	89fb      	ldrh	r3, [r7, #14]
 8015310:	1c59      	adds	r1, r3, #1
 8015312:	81f9      	strh	r1, [r7, #14]
 8015314:	4413      	add	r3, r2
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	021a      	lsls	r2, r3, #8
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	68db      	ldr	r3, [r3, #12]
 801531e:	431a      	orrs	r2, r3
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	89fb      	ldrh	r3, [r7, #14]
 801532a:	1c59      	adds	r1, r3, #1
 801532c:	81f9      	strh	r1, [r7, #14]
 801532e:	4413      	add	r3, r2
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	041a      	lsls	r2, r3, #16
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	431a      	orrs	r2, r3
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681a      	ldr	r2, [r3, #0]
 8015342:	89fb      	ldrh	r3, [r7, #14]
 8015344:	1c59      	adds	r1, r3, #1
 8015346:	81f9      	strh	r1, [r7, #14]
 8015348:	4413      	add	r3, r2
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	061a      	lsls	r2, r3, #24
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	68db      	ldr	r3, [r3, #12]
 8015352:	431a      	orrs	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	89fb      	ldrh	r3, [r7, #14]
 801535e:	1c59      	adds	r1, r3, #1
 8015360:	81f9      	strh	r1, [r7, #14]
 8015362:	4413      	add	r3, r2
 8015364:	781a      	ldrb	r2, [r3, #0]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	89fb      	ldrh	r3, [r7, #14]
 8015370:	1c59      	adds	r1, r3, #1
 8015372:	81f9      	strh	r1, [r7, #14]
 8015374:	4413      	add	r3, r2
 8015376:	781a      	ldrb	r2, [r3, #0]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	791b      	ldrb	r3, [r3, #4]
 8015380:	1f1a      	subs	r2, r3, #4
 8015382:	89fb      	ldrh	r3, [r7, #14]
 8015384:	1ad3      	subs	r3, r2, r3
 8015386:	2b10      	cmp	r3, #16
 8015388:	d10e      	bne.n	80153a8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f103 0012 	add.w	r0, r3, #18
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681a      	ldr	r2, [r3, #0]
 8015394:	89fb      	ldrh	r3, [r7, #14]
 8015396:	4413      	add	r3, r2
 8015398:	2210      	movs	r2, #16
 801539a:	4619      	mov	r1, r3
 801539c:	f002 fd5d 	bl	8017e5a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80153a0:	89fb      	ldrh	r3, [r7, #14]
 80153a2:	3310      	adds	r3, #16
 80153a4:	81fb      	strh	r3, [r7, #14]
 80153a6:	e008      	b.n	80153ba <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	791b      	ldrb	r3, [r3, #4]
 80153ac:	1f1a      	subs	r2, r3, #4
 80153ae:	89fb      	ldrh	r3, [r7, #14]
 80153b0:	1ad3      	subs	r3, r2, r3
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	dd01      	ble.n	80153ba <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80153b6:	2301      	movs	r3, #1
 80153b8:	e031      	b.n	801541e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	89fb      	ldrh	r3, [r7, #14]
 80153c0:	1c59      	adds	r1, r3, #1
 80153c2:	81f9      	strh	r1, [r7, #14]
 80153c4:	4413      	add	r3, r2
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	461a      	mov	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	89fb      	ldrh	r3, [r7, #14]
 80153d4:	1c59      	adds	r1, r3, #1
 80153d6:	81f9      	strh	r1, [r7, #14]
 80153d8:	4413      	add	r3, r2
 80153da:	781b      	ldrb	r3, [r3, #0]
 80153dc:	021a      	lsls	r2, r3, #8
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153e2:	431a      	orrs	r2, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	89fb      	ldrh	r3, [r7, #14]
 80153ee:	1c59      	adds	r1, r3, #1
 80153f0:	81f9      	strh	r1, [r7, #14]
 80153f2:	4413      	add	r3, r2
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	041a      	lsls	r2, r3, #16
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153fc:	431a      	orrs	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681a      	ldr	r2, [r3, #0]
 8015406:	89fb      	ldrh	r3, [r7, #14]
 8015408:	1c59      	adds	r1, r3, #1
 801540a:	81f9      	strh	r1, [r7, #14]
 801540c:	4413      	add	r3, r2
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	061a      	lsls	r2, r3, #24
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015416:	431a      	orrs	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b084      	sub	sp, #16
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d003      	beq.n	801543c <LoRaMacParserData+0x16>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d101      	bne.n	8015440 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801543c:	2302      	movs	r3, #2
 801543e:	e0e0      	b.n	8015602 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8015440:	2300      	movs	r3, #0
 8015442:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	89fb      	ldrh	r3, [r7, #14]
 801544a:	1c59      	adds	r1, r3, #1
 801544c:	81f9      	strh	r1, [r7, #14]
 801544e:	4413      	add	r3, r2
 8015450:	781a      	ldrb	r2, [r3, #0]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	89fb      	ldrh	r3, [r7, #14]
 801545c:	1c59      	adds	r1, r3, #1
 801545e:	81f9      	strh	r1, [r7, #14]
 8015460:	4413      	add	r3, r2
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	461a      	mov	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	89fb      	ldrh	r3, [r7, #14]
 8015470:	1c59      	adds	r1, r3, #1
 8015472:	81f9      	strh	r1, [r7, #14]
 8015474:	4413      	add	r3, r2
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	021a      	lsls	r2, r3, #8
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	689b      	ldr	r3, [r3, #8]
 801547e:	431a      	orrs	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	89fb      	ldrh	r3, [r7, #14]
 801548a:	1c59      	adds	r1, r3, #1
 801548c:	81f9      	strh	r1, [r7, #14]
 801548e:	4413      	add	r3, r2
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	041a      	lsls	r2, r3, #16
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	689b      	ldr	r3, [r3, #8]
 8015498:	431a      	orrs	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	89fb      	ldrh	r3, [r7, #14]
 80154a4:	1c59      	adds	r1, r3, #1
 80154a6:	81f9      	strh	r1, [r7, #14]
 80154a8:	4413      	add	r3, r2
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	061a      	lsls	r2, r3, #24
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	431a      	orrs	r2, r3
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681a      	ldr	r2, [r3, #0]
 80154bc:	89fb      	ldrh	r3, [r7, #14]
 80154be:	1c59      	adds	r1, r3, #1
 80154c0:	81f9      	strh	r1, [r7, #14]
 80154c2:	4413      	add	r3, r2
 80154c4:	781a      	ldrb	r2, [r3, #0]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	89fb      	ldrh	r3, [r7, #14]
 80154d0:	1c59      	adds	r1, r3, #1
 80154d2:	81f9      	strh	r1, [r7, #14]
 80154d4:	4413      	add	r3, r2
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	461a      	mov	r2, r3
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	89fb      	ldrh	r3, [r7, #14]
 80154e4:	1c59      	adds	r1, r3, #1
 80154e6:	81f9      	strh	r1, [r7, #14]
 80154e8:	4413      	add	r3, r2
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	0219      	lsls	r1, r3, #8
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	89db      	ldrh	r3, [r3, #14]
 80154f2:	b21a      	sxth	r2, r3
 80154f4:	b20b      	sxth	r3, r1
 80154f6:	4313      	orrs	r3, r2
 80154f8:	b21b      	sxth	r3, r3
 80154fa:	b29a      	uxth	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f103 0010 	add.w	r0, r3, #16
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681a      	ldr	r2, [r3, #0]
 801550a:	89fb      	ldrh	r3, [r7, #14]
 801550c:	18d1      	adds	r1, r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	7b1b      	ldrb	r3, [r3, #12]
 8015512:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015516:	b2db      	uxtb	r3, r3
 8015518:	461a      	mov	r2, r3
 801551a:	f002 fc9e 	bl	8017e5a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	7b1b      	ldrb	r3, [r3, #12]
 8015522:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015526:	b2db      	uxtb	r3, r3
 8015528:	461a      	mov	r2, r3
 801552a:	89fb      	ldrh	r3, [r7, #14]
 801552c:	4413      	add	r3, r2
 801552e:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2200      	movs	r2, #0
 801553c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	791b      	ldrb	r3, [r3, #4]
 8015544:	461a      	mov	r2, r3
 8015546:	89fb      	ldrh	r3, [r7, #14]
 8015548:	1ad3      	subs	r3, r2, r3
 801554a:	2b04      	cmp	r3, #4
 801554c:	dd27      	ble.n	801559e <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	89fb      	ldrh	r3, [r7, #14]
 8015554:	1c59      	adds	r1, r3, #1
 8015556:	81f9      	strh	r1, [r7, #14]
 8015558:	4413      	add	r3, r2
 801555a:	781a      	ldrb	r2, [r3, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	791a      	ldrb	r2, [r3, #4]
 8015566:	89fb      	ldrh	r3, [r7, #14]
 8015568:	b2db      	uxtb	r3, r3
 801556a:	1ad3      	subs	r3, r2, r3
 801556c:	b2db      	uxtb	r3, r3
 801556e:	3b04      	subs	r3, #4
 8015570:	b2da      	uxtb	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	89fb      	ldrh	r3, [r7, #14]
 8015582:	18d1      	adds	r1, r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801558a:	461a      	mov	r2, r3
 801558c:	f002 fc65 	bl	8017e5a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015596:	461a      	mov	r2, r3
 8015598:	89fb      	ldrh	r3, [r7, #14]
 801559a:	4413      	add	r3, r2
 801559c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681a      	ldr	r2, [r3, #0]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	791b      	ldrb	r3, [r3, #4]
 80155a6:	3b04      	subs	r3, #4
 80155a8:	4413      	add	r3, r2
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	461a      	mov	r2, r3
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6819      	ldr	r1, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	791b      	ldrb	r3, [r3, #4]
 80155be:	3b03      	subs	r3, #3
 80155c0:	440b      	add	r3, r1
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	021b      	lsls	r3, r3, #8
 80155c6:	431a      	orrs	r2, r3
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6819      	ldr	r1, [r3, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	791b      	ldrb	r3, [r3, #4]
 80155d8:	3b02      	subs	r3, #2
 80155da:	440b      	add	r3, r1
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	041b      	lsls	r3, r3, #16
 80155e0:	431a      	orrs	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6819      	ldr	r1, [r3, #0]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	791b      	ldrb	r3, [r3, #4]
 80155f2:	3b01      	subs	r3, #1
 80155f4:	440b      	add	r3, r1
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	061b      	lsls	r3, r3, #24
 80155fa:	431a      	orrs	r2, r3
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3710      	adds	r7, #16
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801560a:	b580      	push	{r7, lr}
 801560c:	b084      	sub	sp, #16
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d003      	beq.n	8015620 <LoRaMacSerializerJoinRequest+0x16>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d101      	bne.n	8015624 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015620:	2301      	movs	r3, #1
 8015622:	e070      	b.n	8015706 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	791b      	ldrb	r3, [r3, #4]
 801562c:	2b16      	cmp	r3, #22
 801562e:	d801      	bhi.n	8015634 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015630:	2302      	movs	r3, #2
 8015632:	e068      	b.n	8015706 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	89fb      	ldrh	r3, [r7, #14]
 801563a:	1c59      	adds	r1, r3, #1
 801563c:	81f9      	strh	r1, [r7, #14]
 801563e:	4413      	add	r3, r2
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	7952      	ldrb	r2, [r2, #5]
 8015644:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	89fb      	ldrh	r3, [r7, #14]
 801564c:	18d0      	adds	r0, r2, r3
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	3306      	adds	r3, #6
 8015652:	2208      	movs	r2, #8
 8015654:	4619      	mov	r1, r3
 8015656:	f002 fc1b 	bl	8017e90 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801565a:	89fb      	ldrh	r3, [r7, #14]
 801565c:	3308      	adds	r3, #8
 801565e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	89fb      	ldrh	r3, [r7, #14]
 8015666:	18d0      	adds	r0, r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	330e      	adds	r3, #14
 801566c:	2208      	movs	r2, #8
 801566e:	4619      	mov	r1, r3
 8015670:	f002 fc0e 	bl	8017e90 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015674:	89fb      	ldrh	r3, [r7, #14]
 8015676:	3308      	adds	r3, #8
 8015678:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	8ad9      	ldrh	r1, [r3, #22]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	89fb      	ldrh	r3, [r7, #14]
 8015684:	1c58      	adds	r0, r3, #1
 8015686:	81f8      	strh	r0, [r7, #14]
 8015688:	4413      	add	r3, r2
 801568a:	b2ca      	uxtb	r2, r1
 801568c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	8adb      	ldrh	r3, [r3, #22]
 8015692:	0a1b      	lsrs	r3, r3, #8
 8015694:	b299      	uxth	r1, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	89fb      	ldrh	r3, [r7, #14]
 801569c:	1c58      	adds	r0, r3, #1
 801569e:	81f8      	strh	r0, [r7, #14]
 80156a0:	4413      	add	r3, r2
 80156a2:	b2ca      	uxtb	r2, r1
 80156a4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6999      	ldr	r1, [r3, #24]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	89fb      	ldrh	r3, [r7, #14]
 80156b0:	1c58      	adds	r0, r3, #1
 80156b2:	81f8      	strh	r0, [r7, #14]
 80156b4:	4413      	add	r3, r2
 80156b6:	b2ca      	uxtb	r2, r1
 80156b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	699b      	ldr	r3, [r3, #24]
 80156be:	0a19      	lsrs	r1, r3, #8
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	89fb      	ldrh	r3, [r7, #14]
 80156c6:	1c58      	adds	r0, r3, #1
 80156c8:	81f8      	strh	r0, [r7, #14]
 80156ca:	4413      	add	r3, r2
 80156cc:	b2ca      	uxtb	r2, r1
 80156ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	699b      	ldr	r3, [r3, #24]
 80156d4:	0c19      	lsrs	r1, r3, #16
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	89fb      	ldrh	r3, [r7, #14]
 80156dc:	1c58      	adds	r0, r3, #1
 80156de:	81f8      	strh	r0, [r7, #14]
 80156e0:	4413      	add	r3, r2
 80156e2:	b2ca      	uxtb	r2, r1
 80156e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	699b      	ldr	r3, [r3, #24]
 80156ea:	0e19      	lsrs	r1, r3, #24
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	89fb      	ldrh	r3, [r7, #14]
 80156f2:	1c58      	adds	r0, r3, #1
 80156f4:	81f8      	strh	r0, [r7, #14]
 80156f6:	4413      	add	r3, r2
 80156f8:	b2ca      	uxtb	r2, r1
 80156fa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80156fc:	89fb      	ldrh	r3, [r7, #14]
 80156fe:	b2da      	uxtb	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015704:	2300      	movs	r3, #0
}
 8015706:	4618      	mov	r0, r3
 8015708:	3710      	adds	r7, #16
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}

0801570e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801570e:	b580      	push	{r7, lr}
 8015710:	b084      	sub	sp, #16
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d003      	beq.n	8015724 <LoRaMacSerializerData+0x16>
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d101      	bne.n	8015728 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015724:	2301      	movs	r3, #1
 8015726:	e0e3      	b.n	80158f0 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8015728:	2300      	movs	r3, #0
 801572a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801572c:	2308      	movs	r3, #8
 801572e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	7b1b      	ldrb	r3, [r3, #12]
 8015734:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015738:	b2db      	uxtb	r3, r3
 801573a:	461a      	mov	r2, r3
 801573c:	89bb      	ldrh	r3, [r7, #12]
 801573e:	4413      	add	r3, r2
 8015740:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015748:	2b00      	cmp	r3, #0
 801574a:	d002      	beq.n	8015752 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801574c:	89bb      	ldrh	r3, [r7, #12]
 801574e:	3301      	adds	r3, #1
 8015750:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015758:	461a      	mov	r2, r3
 801575a:	89bb      	ldrh	r3, [r7, #12]
 801575c:	4413      	add	r3, r2
 801575e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015760:	89bb      	ldrh	r3, [r7, #12]
 8015762:	3304      	adds	r3, #4
 8015764:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	791b      	ldrb	r3, [r3, #4]
 801576a:	461a      	mov	r2, r3
 801576c:	89bb      	ldrh	r3, [r7, #12]
 801576e:	4293      	cmp	r3, r2
 8015770:	d901      	bls.n	8015776 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015772:	2302      	movs	r3, #2
 8015774:	e0bc      	b.n	80158f0 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681a      	ldr	r2, [r3, #0]
 801577a:	89fb      	ldrh	r3, [r7, #14]
 801577c:	1c59      	adds	r1, r3, #1
 801577e:	81f9      	strh	r1, [r7, #14]
 8015780:	4413      	add	r3, r2
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	7952      	ldrb	r2, [r2, #5]
 8015786:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6899      	ldr	r1, [r3, #8]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	89fb      	ldrh	r3, [r7, #14]
 8015792:	1c58      	adds	r0, r3, #1
 8015794:	81f8      	strh	r0, [r7, #14]
 8015796:	4413      	add	r3, r2
 8015798:	b2ca      	uxtb	r2, r1
 801579a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	689b      	ldr	r3, [r3, #8]
 80157a0:	0a19      	lsrs	r1, r3, #8
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	89fb      	ldrh	r3, [r7, #14]
 80157a8:	1c58      	adds	r0, r3, #1
 80157aa:	81f8      	strh	r0, [r7, #14]
 80157ac:	4413      	add	r3, r2
 80157ae:	b2ca      	uxtb	r2, r1
 80157b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	0c19      	lsrs	r1, r3, #16
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	89fb      	ldrh	r3, [r7, #14]
 80157be:	1c58      	adds	r0, r3, #1
 80157c0:	81f8      	strh	r0, [r7, #14]
 80157c2:	4413      	add	r3, r2
 80157c4:	b2ca      	uxtb	r2, r1
 80157c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	689b      	ldr	r3, [r3, #8]
 80157cc:	0e19      	lsrs	r1, r3, #24
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	89fb      	ldrh	r3, [r7, #14]
 80157d4:	1c58      	adds	r0, r3, #1
 80157d6:	81f8      	strh	r0, [r7, #14]
 80157d8:	4413      	add	r3, r2
 80157da:	b2ca      	uxtb	r2, r1
 80157dc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	89fb      	ldrh	r3, [r7, #14]
 80157e4:	1c59      	adds	r1, r3, #1
 80157e6:	81f9      	strh	r1, [r7, #14]
 80157e8:	4413      	add	r3, r2
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	7b12      	ldrb	r2, [r2, #12]
 80157ee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	89d9      	ldrh	r1, [r3, #14]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681a      	ldr	r2, [r3, #0]
 80157f8:	89fb      	ldrh	r3, [r7, #14]
 80157fa:	1c58      	adds	r0, r3, #1
 80157fc:	81f8      	strh	r0, [r7, #14]
 80157fe:	4413      	add	r3, r2
 8015800:	b2ca      	uxtb	r2, r1
 8015802:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	89db      	ldrh	r3, [r3, #14]
 8015808:	0a1b      	lsrs	r3, r3, #8
 801580a:	b299      	uxth	r1, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	89fb      	ldrh	r3, [r7, #14]
 8015812:	1c58      	adds	r0, r3, #1
 8015814:	81f8      	strh	r0, [r7, #14]
 8015816:	4413      	add	r3, r2
 8015818:	b2ca      	uxtb	r2, r1
 801581a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	89fb      	ldrh	r3, [r7, #14]
 8015822:	18d0      	adds	r0, r2, r3
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f103 0110 	add.w	r1, r3, #16
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	7b1b      	ldrb	r3, [r3, #12]
 801582e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015832:	b2db      	uxtb	r3, r3
 8015834:	461a      	mov	r2, r3
 8015836:	f002 fb10 	bl	8017e5a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	7b1b      	ldrb	r3, [r3, #12]
 801583e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015842:	b2db      	uxtb	r3, r3
 8015844:	461a      	mov	r2, r3
 8015846:	89fb      	ldrh	r3, [r7, #14]
 8015848:	4413      	add	r3, r2
 801584a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015852:	2b00      	cmp	r3, #0
 8015854:	d009      	beq.n	801586a <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	89fb      	ldrh	r3, [r7, #14]
 801585c:	1c59      	adds	r1, r3, #1
 801585e:	81f9      	strh	r1, [r7, #14]
 8015860:	4413      	add	r3, r2
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015868:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681a      	ldr	r2, [r3, #0]
 801586e:	89fb      	ldrh	r3, [r7, #14]
 8015870:	18d0      	adds	r0, r2, r3
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801587c:	461a      	mov	r2, r3
 801587e:	f002 faec 	bl	8017e5a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015888:	461a      	mov	r2, r3
 801588a:	89fb      	ldrh	r3, [r7, #14]
 801588c:	4413      	add	r3, r2
 801588e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	89fb      	ldrh	r3, [r7, #14]
 801589a:	1c58      	adds	r0, r3, #1
 801589c:	81f8      	strh	r0, [r7, #14]
 801589e:	4413      	add	r3, r2
 80158a0:	b2ca      	uxtb	r2, r1
 80158a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158a8:	0a19      	lsrs	r1, r3, #8
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	89fb      	ldrh	r3, [r7, #14]
 80158b0:	1c58      	adds	r0, r3, #1
 80158b2:	81f8      	strh	r0, [r7, #14]
 80158b4:	4413      	add	r3, r2
 80158b6:	b2ca      	uxtb	r2, r1
 80158b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158be:	0c19      	lsrs	r1, r3, #16
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	89fb      	ldrh	r3, [r7, #14]
 80158c6:	1c58      	adds	r0, r3, #1
 80158c8:	81f8      	strh	r0, [r7, #14]
 80158ca:	4413      	add	r3, r2
 80158cc:	b2ca      	uxtb	r2, r1
 80158ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158d4:	0e19      	lsrs	r1, r3, #24
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	89fb      	ldrh	r3, [r7, #14]
 80158dc:	1c58      	adds	r0, r3, #1
 80158de:	81f8      	strh	r0, [r7, #14]
 80158e0:	4413      	add	r3, r2
 80158e2:	b2ca      	uxtb	r2, r1
 80158e4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80158e6:	89fb      	ldrh	r3, [r7, #14]
 80158e8:	b2da      	uxtb	r2, r3
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80158ee:	2300      	movs	r3, #0
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3710      	adds	r7, #16
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80158f8:	b480      	push	{r7}
 80158fa:	b083      	sub	sp, #12
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	4603      	mov	r3, r0
 8015900:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015902:	79fb      	ldrb	r3, [r7, #7]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d101      	bne.n	801590c <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8015908:	2301      	movs	r3, #1
 801590a:	e000      	b.n	801590e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801590c:	2300      	movs	r3, #0
        }
    }
}
 801590e:	4618      	mov	r0, r3
 8015910:	370c      	adds	r7, #12
 8015912:	46bd      	mov	sp, r7
 8015914:	bc80      	pop	{r7}
 8015916:	4770      	bx	lr

08015918 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	4603      	mov	r3, r0
 8015920:	6039      	str	r1, [r7, #0]
 8015922:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015924:	2300      	movs	r3, #0
 8015926:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015928:	79fb      	ldrb	r3, [r7, #7]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d105      	bne.n	801593a <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 801592e:	6838      	ldr	r0, [r7, #0]
 8015930:	f000 f9ec 	bl	8015d0c <RegionAS923GetPhyParam>
 8015934:	4603      	mov	r3, r0
 8015936:	60fb      	str	r3, [r7, #12]
 8015938:	e001      	b.n	801593e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	4618      	mov	r0, r3
 8015942:	3710      	adds	r7, #16
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	4603      	mov	r3, r0
 8015950:	6039      	str	r1, [r7, #0]
 8015952:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015954:	79fb      	ldrb	r3, [r7, #7]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d103      	bne.n	8015962 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 801595a:	6838      	ldr	r0, [r7, #0]
 801595c:	f000 fb4c 	bl	8015ff8 <RegionAS923SetBandTxDone>
 8015960:	e000      	b.n	8015964 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015962:	bf00      	nop
        }
    }
}
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801596a:	b580      	push	{r7, lr}
 801596c:	b082      	sub	sp, #8
 801596e:	af00      	add	r7, sp, #0
 8015970:	4603      	mov	r3, r0
 8015972:	6039      	str	r1, [r7, #0]
 8015974:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015976:	79fb      	ldrb	r3, [r7, #7]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d103      	bne.n	8015984 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 801597c:	6838      	ldr	r0, [r7, #0]
 801597e:	f000 fb67 	bl	8016050 <RegionAS923InitDefaults>
 8015982:	e000      	b.n	8015986 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015984:	bf00      	nop
        }
    }
}
 8015986:	bf00      	nop
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b082      	sub	sp, #8
 8015992:	af00      	add	r7, sp, #0
 8015994:	4603      	mov	r3, r0
 8015996:	6039      	str	r1, [r7, #0]
 8015998:	71fb      	strb	r3, [r7, #7]
 801599a:	4613      	mov	r3, r2
 801599c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801599e:	79fb      	ldrb	r3, [r7, #7]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d106      	bne.n	80159b2 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 80159a4:	79bb      	ldrb	r3, [r7, #6]
 80159a6:	4619      	mov	r1, r3
 80159a8:	6838      	ldr	r0, [r7, #0]
 80159aa:	f000 fbe3 	bl	8016174 <RegionAS923Verify>
 80159ae:	4603      	mov	r3, r0
 80159b0:	e000      	b.n	80159b4 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80159b2:	2300      	movs	r3, #0
        }
    }
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	4603      	mov	r3, r0
 80159c4:	6039      	str	r1, [r7, #0]
 80159c6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80159c8:	79fb      	ldrb	r3, [r7, #7]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d103      	bne.n	80159d6 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 80159ce:	6838      	ldr	r0, [r7, #0]
 80159d0:	f000 fc6e 	bl	80162b0 <RegionAS923ApplyCFList>
 80159d4:	e000      	b.n	80159d8 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80159d6:	bf00      	nop
        }
    }
}
 80159d8:	bf00      	nop
 80159da:	3708      	adds	r7, #8
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	4603      	mov	r3, r0
 80159e8:	6039      	str	r1, [r7, #0]
 80159ea:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80159ec:	79fb      	ldrb	r3, [r7, #7]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d104      	bne.n	80159fc <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80159f2:	6838      	ldr	r0, [r7, #0]
 80159f4:	f000 fcd0 	bl	8016398 <RegionAS923ChanMaskSet>
 80159f8:	4603      	mov	r3, r0
 80159fa:	e000      	b.n	80159fe <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80159fc:	2300      	movs	r3, #0
        }
    }
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3708      	adds	r7, #8
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}

08015a06 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015a06:	b580      	push	{r7, lr}
 8015a08:	b082      	sub	sp, #8
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	603b      	str	r3, [r7, #0]
 8015a0e:	4603      	mov	r3, r0
 8015a10:	71fb      	strb	r3, [r7, #7]
 8015a12:	460b      	mov	r3, r1
 8015a14:	71bb      	strb	r3, [r7, #6]
 8015a16:	4613      	mov	r3, r2
 8015a18:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015a1a:	79fb      	ldrb	r3, [r7, #7]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d107      	bne.n	8015a30 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015a20:	7979      	ldrb	r1, [r7, #5]
 8015a22:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015a26:	693b      	ldr	r3, [r7, #16]
 8015a28:	683a      	ldr	r2, [r7, #0]
 8015a2a:	f000 fcdf 	bl	80163ec <RegionAS923ComputeRxWindowParameters>
 8015a2e:	e000      	b.n	8015a32 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015a30:	bf00      	nop
        }
    }
}
 8015a32:	bf00      	nop
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	4603      	mov	r3, r0
 8015a42:	60b9      	str	r1, [r7, #8]
 8015a44:	607a      	str	r2, [r7, #4]
 8015a46:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015a48:	7bfb      	ldrb	r3, [r7, #15]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d105      	bne.n	8015a5a <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8015a4e:	6879      	ldr	r1, [r7, #4]
 8015a50:	68b8      	ldr	r0, [r7, #8]
 8015a52:	f000 fd25 	bl	80164a0 <RegionAS923RxConfig>
 8015a56:	4603      	mov	r3, r0
 8015a58:	e000      	b.n	8015a5c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015a5a:	2300      	movs	r3, #0
        }
    }
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	3710      	adds	r7, #16
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	60b9      	str	r1, [r7, #8]
 8015a6c:	607a      	str	r2, [r7, #4]
 8015a6e:	603b      	str	r3, [r7, #0]
 8015a70:	4603      	mov	r3, r0
 8015a72:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015a74:	7bfb      	ldrb	r3, [r7, #15]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d106      	bne.n	8015a88 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8015a7a:	683a      	ldr	r2, [r7, #0]
 8015a7c:	6879      	ldr	r1, [r7, #4]
 8015a7e:	68b8      	ldr	r0, [r7, #8]
 8015a80:	f000 fdde 	bl	8016640 <RegionAS923TxConfig>
 8015a84:	4603      	mov	r3, r0
 8015a86:	e000      	b.n	8015a8a <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015a88:	2300      	movs	r3, #0
        }
    }
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015a92:	b580      	push	{r7, lr}
 8015a94:	b086      	sub	sp, #24
 8015a96:	af02      	add	r7, sp, #8
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	603b      	str	r3, [r7, #0]
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015aa2:	7bfb      	ldrb	r3, [r7, #15]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d109      	bne.n	8015abc <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	9300      	str	r3, [sp, #0]
 8015aac:	69bb      	ldr	r3, [r7, #24]
 8015aae:	683a      	ldr	r2, [r7, #0]
 8015ab0:	6879      	ldr	r1, [r7, #4]
 8015ab2:	68b8      	ldr	r0, [r7, #8]
 8015ab4:	f000 fe94 	bl	80167e0 <RegionAS923LinkAdrReq>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	e000      	b.n	8015abe <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015abc:	2300      	movs	r3, #0
        }
    }
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b082      	sub	sp, #8
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	4603      	mov	r3, r0
 8015ace:	6039      	str	r1, [r7, #0]
 8015ad0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015ad2:	79fb      	ldrb	r3, [r7, #7]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d104      	bne.n	8015ae2 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 8015ad8:	6838      	ldr	r0, [r7, #0]
 8015ada:	f000 ffa3 	bl	8016a24 <RegionAS923RxParamSetupReq>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	e000      	b.n	8015ae4 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015ae2:	2300      	movs	r3, #0
        }
    }
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	4603      	mov	r3, r0
 8015af4:	6039      	str	r1, [r7, #0]
 8015af6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015af8:	79fb      	ldrb	r3, [r7, #7]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d104      	bne.n	8015b08 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8015afe:	6838      	ldr	r0, [r7, #0]
 8015b00:	f000 ffc8 	bl	8016a94 <RegionAS923NewChannelReq>
 8015b04:	4603      	mov	r3, r0
 8015b06:	e000      	b.n	8015b0a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015b08:	2300      	movs	r3, #0
        }
    }
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b082      	sub	sp, #8
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	4603      	mov	r3, r0
 8015b1a:	6039      	str	r1, [r7, #0]
 8015b1c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015b1e:	79fb      	ldrb	r3, [r7, #7]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d104      	bne.n	8015b2e <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8015b24:	6838      	ldr	r0, [r7, #0]
 8015b26:	f001 f813 	bl	8016b50 <RegionAS923TxParamSetupReq>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	e000      	b.n	8015b30 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015b2e:	2300      	movs	r3, #0
        }
    }
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	4603      	mov	r3, r0
 8015b40:	6039      	str	r1, [r7, #0]
 8015b42:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015b44:	79fb      	ldrb	r3, [r7, #7]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d104      	bne.n	8015b54 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8015b4a:	6838      	ldr	r0, [r7, #0]
 8015b4c:	f001 f80a 	bl	8016b64 <RegionAS923DlChannelReq>
 8015b50:	4603      	mov	r3, r0
 8015b52:	e000      	b.n	8015b56 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015b54:	2300      	movs	r3, #0
        }
    }
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	3708      	adds	r7, #8
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}

08015b5e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015b5e:	b580      	push	{r7, lr}
 8015b60:	b082      	sub	sp, #8
 8015b62:	af00      	add	r7, sp, #0
 8015b64:	4603      	mov	r3, r0
 8015b66:	71fb      	strb	r3, [r7, #7]
 8015b68:	460b      	mov	r3, r1
 8015b6a:	71bb      	strb	r3, [r7, #6]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015b70:	79fb      	ldrb	r3, [r7, #7]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d108      	bne.n	8015b88 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8015b76:	797a      	ldrb	r2, [r7, #5]
 8015b78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b7c:	4611      	mov	r1, r2
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f001 f830 	bl	8016be4 <RegionAS923AlternateDr>
 8015b84:	4603      	mov	r3, r0
 8015b86:	e000      	b.n	8015b8a <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015b88:	2300      	movs	r3, #0
        }
    }
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3708      	adds	r7, #8
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}

08015b92 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015b92:	b580      	push	{r7, lr}
 8015b94:	b084      	sub	sp, #16
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	607a      	str	r2, [r7, #4]
 8015b9c:	603b      	str	r3, [r7, #0]
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015ba2:	7bfb      	ldrb	r3, [r7, #15]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d107      	bne.n	8015bb8 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8015ba8:	69bb      	ldr	r3, [r7, #24]
 8015baa:	683a      	ldr	r2, [r7, #0]
 8015bac:	6879      	ldr	r1, [r7, #4]
 8015bae:	68b8      	ldr	r0, [r7, #8]
 8015bb0:	f001 f826 	bl	8016c00 <RegionAS923NextChannel>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	e000      	b.n	8015bba <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015bb8:	2309      	movs	r3, #9
        }
    }
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3710      	adds	r7, #16
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015bc2:	b590      	push	{r4, r7, lr}
 8015bc4:	b083      	sub	sp, #12
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4604      	mov	r4, r0
 8015bca:	4608      	mov	r0, r1
 8015bcc:	4611      	mov	r1, r2
 8015bce:	461a      	mov	r2, r3
 8015bd0:	4623      	mov	r3, r4
 8015bd2:	71fb      	strb	r3, [r7, #7]
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	71bb      	strb	r3, [r7, #6]
 8015bd8:	460b      	mov	r3, r1
 8015bda:	717b      	strb	r3, [r7, #5]
 8015bdc:	4613      	mov	r3, r2
 8015bde:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015be0:	79fb      	ldrb	r3, [r7, #7]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d109      	bne.n	8015bfa <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8015be6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015bea:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015bee:	79bb      	ldrb	r3, [r7, #6]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f001 f979 	bl	8016ee8 <RegionAS923ApplyDrOffset>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	e000      	b.n	8015bfc <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015bfa:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd90      	pop	{r4, r7, pc}

08015c04 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015c0a:	4b04      	ldr	r3, [pc, #16]	@ (8015c1c <RegionGetVersion+0x18>)
 8015c0c:	607b      	str	r3, [r7, #4]

    return version;
 8015c0e:	687b      	ldr	r3, [r7, #4]
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bc80      	pop	{r7}
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop
 8015c1c:	02010001 	.word	0x02010001

08015c20 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015c28:	4b0d      	ldr	r3, [pc, #52]	@ (8015c60 <VerifyRfFreq+0x40>)
 8015c2a:	6a1b      	ldr	r3, [r3, #32]
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	4798      	blx	r3
 8015c30:	4603      	mov	r3, r0
 8015c32:	f083 0301 	eor.w	r3, r3, #1
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <VerifyRfFreq+0x20>
    {
        return false;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	e00a      	b.n	8015c56 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	4a08      	ldr	r2, [pc, #32]	@ (8015c64 <VerifyRfFreq+0x44>)
 8015c44:	4293      	cmp	r3, r2
 8015c46:	d903      	bls.n	8015c50 <VerifyRfFreq+0x30>
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	4a07      	ldr	r2, [pc, #28]	@ (8015c68 <VerifyRfFreq+0x48>)
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d901      	bls.n	8015c54 <VerifyRfFreq+0x34>
    {
        return false;
 8015c50:	2300      	movs	r3, #0
 8015c52:	e000      	b.n	8015c56 <VerifyRfFreq+0x36>
    }
    return true;
 8015c54:	2301      	movs	r3, #1
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3708      	adds	r7, #8
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	08020450 	.word	0x08020450
 8015c64:	3689cabf 	.word	0x3689cabf
 8015c68:	37502800 	.word	0x37502800

08015c6c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015c6c:	b590      	push	{r4, r7, lr}
 8015c6e:	b08b      	sub	sp, #44	@ 0x2c
 8015c70:	af04      	add	r7, sp, #16
 8015c72:	4603      	mov	r3, r0
 8015c74:	460a      	mov	r2, r1
 8015c76:	71fb      	strb	r3, [r7, #7]
 8015c78:	4613      	mov	r3, r2
 8015c7a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8015c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c80:	4a1f      	ldr	r2, [pc, #124]	@ (8015d00 <GetTimeOnAir+0x94>)
 8015c82:	5cd3      	ldrb	r3, [r2, r3]
 8015c84:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8015c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c8a:	491e      	ldr	r1, [pc, #120]	@ (8015d04 <GetTimeOnAir+0x98>)
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f002 f835 	bl	8017cfc <RegionCommonGetBandwidth>
 8015c92:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015c94:	2300      	movs	r3, #0
 8015c96:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c9c:	2b07      	cmp	r3, #7
 8015c9e:	d118      	bne.n	8015cd2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015ca0:	4b19      	ldr	r3, [pc, #100]	@ (8015d08 <GetTimeOnAir+0x9c>)
 8015ca2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ca8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015cac:	fb02 f303 	mul.w	r3, r2, r3
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	88bb      	ldrh	r3, [r7, #4]
 8015cb4:	b2db      	uxtb	r3, r3
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	9203      	str	r2, [sp, #12]
 8015cba:	9302      	str	r3, [sp, #8]
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	9301      	str	r3, [sp, #4]
 8015cc0:	2305      	movs	r3, #5
 8015cc2:	9300      	str	r3, [sp, #0]
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	460a      	mov	r2, r1
 8015cc8:	68f9      	ldr	r1, [r7, #12]
 8015cca:	2000      	movs	r0, #0
 8015ccc:	47a0      	blx	r4
 8015cce:	6178      	str	r0, [r7, #20]
 8015cd0:	e011      	b.n	8015cf6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015d08 <GetTimeOnAir+0x9c>)
 8015cd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015cd6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015cda:	88bb      	ldrh	r3, [r7, #4]
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	2101      	movs	r1, #1
 8015ce0:	9103      	str	r1, [sp, #12]
 8015ce2:	9302      	str	r3, [sp, #8]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	9301      	str	r3, [sp, #4]
 8015ce8:	2308      	movs	r3, #8
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	2301      	movs	r3, #1
 8015cee:	68f9      	ldr	r1, [r7, #12]
 8015cf0:	2001      	movs	r0, #1
 8015cf2:	47a0      	blx	r4
 8015cf4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015cf6:	697b      	ldr	r3, [r7, #20]
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	371c      	adds	r7, #28
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd90      	pop	{r4, r7, pc}
 8015d00:	08020390 	.word	0x08020390
 8015d04:	08020398 	.word	0x08020398
 8015d08:	08020450 	.word	0x08020450

08015d0c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b088      	sub	sp, #32
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015d14:	2300      	movs	r3, #0
 8015d16:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	781b      	ldrb	r3, [r3, #0]
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	2b37      	cmp	r3, #55	@ 0x37
 8015d20:	f200 814e 	bhi.w	8015fc0 <RegionAS923GetPhyParam+0x2b4>
 8015d24:	a201      	add	r2, pc, #4	@ (adr r2, 8015d2c <RegionAS923GetPhyParam+0x20>)
 8015d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d2a:	bf00      	nop
 8015d2c:	08015e0d 	.word	0x08015e0d
 8015d30:	08015e21 	.word	0x08015e21
 8015d34:	08015fc1 	.word	0x08015fc1
 8015d38:	08015fc1 	.word	0x08015fc1
 8015d3c:	08015fc1 	.word	0x08015fc1
 8015d40:	08015e35 	.word	0x08015e35
 8015d44:	08015fc1 	.word	0x08015fc1
 8015d48:	08015e7b 	.word	0x08015e7b
 8015d4c:	08015fc1 	.word	0x08015fc1
 8015d50:	08015e81 	.word	0x08015e81
 8015d54:	08015e87 	.word	0x08015e87
 8015d58:	08015e8d 	.word	0x08015e8d
 8015d5c:	08015e93 	.word	0x08015e93
 8015d60:	08015ebb 	.word	0x08015ebb
 8015d64:	08015ee3 	.word	0x08015ee3
 8015d68:	08015ee9 	.word	0x08015ee9
 8015d6c:	08015ef1 	.word	0x08015ef1
 8015d70:	08015ef9 	.word	0x08015ef9
 8015d74:	08015f01 	.word	0x08015f01
 8015d78:	08015f09 	.word	0x08015f09
 8015d7c:	08015f11 	.word	0x08015f11
 8015d80:	08015f25 	.word	0x08015f25
 8015d84:	08015f2b 	.word	0x08015f2b
 8015d88:	08015f31 	.word	0x08015f31
 8015d8c:	08015f37 	.word	0x08015f37
 8015d90:	08015f43 	.word	0x08015f43
 8015d94:	08015f4f 	.word	0x08015f4f
 8015d98:	08015f55 	.word	0x08015f55
 8015d9c:	08015f5d 	.word	0x08015f5d
 8015da0:	08015f63 	.word	0x08015f63
 8015da4:	08015f69 	.word	0x08015f69
 8015da8:	08015f71 	.word	0x08015f71
 8015dac:	08015e3b 	.word	0x08015e3b
 8015db0:	08015fc1 	.word	0x08015fc1
 8015db4:	08015fc1 	.word	0x08015fc1
 8015db8:	08015fc1 	.word	0x08015fc1
 8015dbc:	08015fc1 	.word	0x08015fc1
 8015dc0:	08015fc1 	.word	0x08015fc1
 8015dc4:	08015fc1 	.word	0x08015fc1
 8015dc8:	08015fc1 	.word	0x08015fc1
 8015dcc:	08015fc1 	.word	0x08015fc1
 8015dd0:	08015fc1 	.word	0x08015fc1
 8015dd4:	08015fc1 	.word	0x08015fc1
 8015dd8:	08015fc1 	.word	0x08015fc1
 8015ddc:	08015fc1 	.word	0x08015fc1
 8015de0:	08015fc1 	.word	0x08015fc1
 8015de4:	08015f77 	.word	0x08015f77
 8015de8:	08015f7d 	.word	0x08015f7d
 8015dec:	08015f8b 	.word	0x08015f8b
 8015df0:	08015fc1 	.word	0x08015fc1
 8015df4:	08015fc1 	.word	0x08015fc1
 8015df8:	08015f91 	.word	0x08015f91
 8015dfc:	08015f97 	.word	0x08015f97
 8015e00:	08015fc1 	.word	0x08015fc1
 8015e04:	08015f9d 	.word	0x08015f9d
 8015e08:	08015fad 	.word	0x08015fad
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	78db      	ldrb	r3, [r3, #3]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d102      	bne.n	8015e1a <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8015e14:	2300      	movs	r3, #0
 8015e16:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015e18:	e0d3      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015e1a:	2302      	movs	r3, #2
 8015e1c:	61bb      	str	r3, [r7, #24]
            break;
 8015e1e:	e0d0      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	789b      	ldrb	r3, [r3, #2]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d102      	bne.n	8015e2e <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015e2c:	e0c9      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015e2e:	2302      	movs	r3, #2
 8015e30:	61bb      	str	r3, [r7, #24]
            break;
 8015e32:	e0c6      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015e34:	2302      	movs	r3, #2
 8015e36:	61bb      	str	r3, [r7, #24]
            break;
 8015e38:	e0c3      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015e40:	733b      	strb	r3, [r7, #12]
 8015e42:	2307      	movs	r3, #7
 8015e44:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	789b      	ldrb	r3, [r3, #2]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d101      	bne.n	8015e52 <RegionAS923GetPhyParam+0x146>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e000      	b.n	8015e54 <RegionAS923GetPhyParam+0x148>
 8015e52:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015e54:	73bb      	strb	r3, [r7, #14]
 8015e56:	2310      	movs	r3, #16
 8015e58:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8015fd0 <RegionAS923GetPhyParam+0x2c4>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015e62:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015e64:	4b5a      	ldr	r3, [pc, #360]	@ (8015fd0 <RegionAS923GetPhyParam+0x2c4>)
 8015e66:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015e68:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015e6a:	f107 030c 	add.w	r3, r7, #12
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f001 fef1 	bl	8017c56 <RegionCommonGetNextLowerTxDr>
 8015e74:	4603      	mov	r3, r0
 8015e76:	61bb      	str	r3, [r7, #24]
            break;
 8015e78:	e0a3      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	61bb      	str	r3, [r7, #24]
            break;
 8015e7e:	e0a0      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8015e80:	2300      	movs	r3, #0
 8015e82:	61bb      	str	r3, [r7, #24]
            break;
 8015e84:	e09d      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015e86:	2340      	movs	r3, #64	@ 0x40
 8015e88:	61bb      	str	r3, [r7, #24]
            break;
 8015e8a:	e09a      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015e8c:	2320      	movs	r3, #32
 8015e8e:	61bb      	str	r3, [r7, #24]
            break;
 8015e90:	e097      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	789b      	ldrb	r3, [r3, #2]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d107      	bne.n	8015eaa <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8015fd4 <RegionAS923GetPhyParam+0x2c8>)
 8015ea4:	5c9b      	ldrb	r3, [r3, r2]
 8015ea6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8015ea8:	e08b      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	4b49      	ldr	r3, [pc, #292]	@ (8015fd8 <RegionAS923GetPhyParam+0x2cc>)
 8015eb4:	5c9b      	ldrb	r3, [r3, r2]
 8015eb6:	61bb      	str	r3, [r7, #24]
            break;
 8015eb8:	e083      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	789b      	ldrb	r3, [r3, #2]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d107      	bne.n	8015ed2 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ec8:	461a      	mov	r2, r3
 8015eca:	4b44      	ldr	r3, [pc, #272]	@ (8015fdc <RegionAS923GetPhyParam+0x2d0>)
 8015ecc:	5c9b      	ldrb	r3, [r3, r2]
 8015ece:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8015ed0:	e077      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	4b3f      	ldr	r3, [pc, #252]	@ (8015fd8 <RegionAS923GetPhyParam+0x2cc>)
 8015edc:	5c9b      	ldrb	r3, [r3, r2]
 8015ede:	61bb      	str	r3, [r7, #24]
            break;
 8015ee0:	e06f      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	61bb      	str	r3, [r7, #24]
            break;
 8015ee6:	e06c      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8015ee8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015eec:	61bb      	str	r3, [r7, #24]
            break;
 8015eee:	e068      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015ef4:	61bb      	str	r3, [r7, #24]
            break;
 8015ef6:	e064      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015ef8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015efc:	61bb      	str	r3, [r7, #24]
            break;
 8015efe:	e060      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015f00:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015f04:	61bb      	str	r3, [r7, #24]
            break;
 8015f06:	e05c      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015f08:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015f0c:	61bb      	str	r3, [r7, #24]
            break;
 8015f0e:	e058      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8015f10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015f14:	4832      	ldr	r0, [pc, #200]	@ (8015fe0 <RegionAS923GetPhyParam+0x2d4>)
 8015f16:	f001 ff89 	bl	8017e2c <randr>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015f20:	61bb      	str	r3, [r7, #24]
            break;
 8015f22:	e04e      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015f24:	2300      	movs	r3, #0
 8015f26:	61bb      	str	r3, [r7, #24]
            break;
 8015f28:	e04b      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8015f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8015fe4 <RegionAS923GetPhyParam+0x2d8>)
 8015f2c:	61bb      	str	r3, [r7, #24]
            break;
 8015f2e:	e048      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015f30:	2302      	movs	r3, #2
 8015f32:	61bb      	str	r3, [r7, #24]
            break;
 8015f34:	e045      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015f36:	4b26      	ldr	r3, [pc, #152]	@ (8015fd0 <RegionAS923GetPhyParam+0x2c4>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015f3e:	61bb      	str	r3, [r7, #24]
            break;
 8015f40:	e03f      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015f42:	4b23      	ldr	r3, [pc, #140]	@ (8015fd0 <RegionAS923GetPhyParam+0x2c4>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015f4a:	61bb      	str	r3, [r7, #24]
            break;
 8015f4c:	e039      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015f4e:	2310      	movs	r3, #16
 8015f50:	61bb      	str	r3, [r7, #24]
            break;
 8015f52:	e036      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015f54:	4b1e      	ldr	r3, [pc, #120]	@ (8015fd0 <RegionAS923GetPhyParam+0x2c4>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	61bb      	str	r3, [r7, #24]
            break;
 8015f5a:	e032      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	61bb      	str	r3, [r7, #24]
            break;
 8015f60:	e02f      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8015f62:	2300      	movs	r3, #0
 8015f64:	61bb      	str	r3, [r7, #24]
            break;
 8015f66:	e02c      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8015f68:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015f6c:	61bb      	str	r3, [r7, #24]
            break;
 8015f6e:	e028      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8015f70:	4b1d      	ldr	r3, [pc, #116]	@ (8015fe8 <RegionAS923GetPhyParam+0x2dc>)
 8015f72:	61bb      	str	r3, [r7, #24]
            break;
 8015f74:	e025      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015f76:	4b1d      	ldr	r3, [pc, #116]	@ (8015fec <RegionAS923GetPhyParam+0x2e0>)
 8015f78:	61bb      	str	r3, [r7, #24]
            break;
 8015f7a:	e022      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015f7c:	2311      	movs	r3, #17
 8015f7e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8015f80:	2301      	movs	r3, #1
 8015f82:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8015f84:	2300      	movs	r3, #0
 8015f86:	76bb      	strb	r3, [r7, #26]
            break;
 8015f88:	e01b      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8015f8a:	2303      	movs	r3, #3
 8015f8c:	61bb      	str	r3, [r7, #24]
            break;
 8015f8e:	e018      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015f90:	4b16      	ldr	r3, [pc, #88]	@ (8015fec <RegionAS923GetPhyParam+0x2e0>)
 8015f92:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8015f94:	e015      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8015f96:	2303      	movs	r3, #3
 8015f98:	61bb      	str	r3, [r7, #24]
            break;
 8015f9a:	e012      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	4b12      	ldr	r3, [pc, #72]	@ (8015ff0 <RegionAS923GetPhyParam+0x2e4>)
 8015fa6:	5c9b      	ldrb	r3, [r3, r2]
 8015fa8:	61bb      	str	r3, [r7, #24]
            break;
 8015faa:	e00a      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fb2:	4910      	ldr	r1, [pc, #64]	@ (8015ff4 <RegionAS923GetPhyParam+0x2e8>)
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f001 fea1 	bl	8017cfc <RegionCommonGetBandwidth>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	61bb      	str	r3, [r7, #24]
            break;
 8015fbe:	e000      	b.n	8015fc2 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 8015fc0:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	61fb      	str	r3, [r7, #28]
 8015fc6:	69fb      	ldr	r3, [r7, #28]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3720      	adds	r7, #32
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	20001bdc 	.word	0x20001bdc
 8015fd4:	080203b8 	.word	0x080203b8
 8015fd8:	080203c8 	.word	0x080203c8
 8015fdc:	080203c0 	.word	0x080203c0
 8015fe0:	fffffc18 	.word	0xfffffc18
 8015fe4:	3706ea00 	.word	0x3706ea00
 8015fe8:	4009999a 	.word	0x4009999a
 8015fec:	3709f740 	.word	0x3709f740
 8015ff0:	08020390 	.word	0x08020390
 8015ff4:	08020398 	.word	0x08020398

08015ff8 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af02      	add	r7, sp, #8
 8015ffe:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016000:	4b11      	ldr	r3, [pc, #68]	@ (8016048 <RegionAS923SetBandTxDone+0x50>)
 8016002:	681a      	ldr	r2, [r3, #0]
 8016004:	4b11      	ldr	r3, [pc, #68]	@ (801604c <RegionAS923SetBandTxDone+0x54>)
 8016006:	6819      	ldr	r1, [r3, #0]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	4618      	mov	r0, r3
 801600e:	4603      	mov	r3, r0
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	4403      	add	r3, r0
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	440b      	add	r3, r1
 8016018:	3309      	adds	r3, #9
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	4619      	mov	r1, r3
 801601e:	460b      	mov	r3, r1
 8016020:	005b      	lsls	r3, r3, #1
 8016022:	440b      	add	r3, r1
 8016024:	00db      	lsls	r3, r3, #3
 8016026:	18d0      	adds	r0, r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6899      	ldr	r1, [r3, #8]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	785c      	ldrb	r4, [r3, #1]
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	691a      	ldr	r2, [r3, #16]
 8016034:	9200      	str	r2, [sp, #0]
 8016036:	68db      	ldr	r3, [r3, #12]
 8016038:	4622      	mov	r2, r4
 801603a:	f001 f9e5 	bl	8017408 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801603e:	bf00      	nop
 8016040:	370c      	adds	r7, #12
 8016042:	46bd      	mov	sp, r7
 8016044:	bd90      	pop	{r4, r7, pc}
 8016046:	bf00      	nop
 8016048:	20001be0 	.word	0x20001be0
 801604c:	20001bdc 	.word	0x20001bdc

08016050 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b08e      	sub	sp, #56	@ 0x38
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8016058:	2364      	movs	r3, #100	@ 0x64
 801605a:	843b      	strh	r3, [r7, #32]
 801605c:	2300      	movs	r3, #0
 801605e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016062:	2300      	movs	r3, #0
 8016064:	627b      	str	r3, [r7, #36]	@ 0x24
 8016066:	2300      	movs	r3, #0
 8016068:	62bb      	str	r3, [r7, #40]	@ 0x28
 801606a:	2300      	movs	r3, #0
 801606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801606e:	2300      	movs	r3, #0
 8016070:	633b      	str	r3, [r7, #48]	@ 0x30
 8016072:	2300      	movs	r3, #0
 8016074:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	7b1b      	ldrb	r3, [r3, #12]
 801607c:	2b02      	cmp	r3, #2
 801607e:	d05e      	beq.n	801613e <RegionAS923InitDefaults+0xee>
 8016080:	2b02      	cmp	r3, #2
 8016082:	dc6b      	bgt.n	801615c <RegionAS923InitDefaults+0x10c>
 8016084:	2b00      	cmp	r3, #0
 8016086:	d002      	beq.n	801608e <RegionAS923InitDefaults+0x3e>
 8016088:	2b01      	cmp	r3, #1
 801608a:	d043      	beq.n	8016114 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801608c:	e066      	b.n	801615c <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d063      	beq.n	801615e <RegionAS923InitDefaults+0x10e>
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	685b      	ldr	r3, [r3, #4]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d05f      	beq.n	801615e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	4a30      	ldr	r2, [pc, #192]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160a4:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	689b      	ldr	r3, [r3, #8]
 80160aa:	4a2f      	ldr	r2, [pc, #188]	@ (8016168 <RegionAS923InitDefaults+0x118>)
 80160ac:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80160ae:	4b2e      	ldr	r3, [pc, #184]	@ (8016168 <RegionAS923InitDefaults+0x118>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f107 0120 	add.w	r1, r7, #32
 80160b6:	2218      	movs	r2, #24
 80160b8:	4618      	mov	r0, r3
 80160ba:	f001 fece 	bl	8017e5a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80160be:	4b29      	ldr	r3, [pc, #164]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	4a2a      	ldr	r2, [pc, #168]	@ (801616c <RegionAS923InitDefaults+0x11c>)
 80160c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80160c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80160ca:	4b26      	ldr	r3, [pc, #152]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4a28      	ldr	r2, [pc, #160]	@ (8016170 <RegionAS923InitDefaults+0x120>)
 80160d0:	330c      	adds	r3, #12
 80160d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80160d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80160d8:	4b22      	ldr	r3, [pc, #136]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160da:	681a      	ldr	r2, [r3, #0]
 80160dc:	4b21      	ldr	r3, [pc, #132]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	6812      	ldr	r2, [r2, #0]
 80160e2:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80160e4:	4b1f      	ldr	r3, [pc, #124]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	4b1e      	ldr	r3, [pc, #120]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	68d2      	ldr	r2, [r2, #12]
 80160ee:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80160f0:	4b1c      	ldr	r3, [pc, #112]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	2203      	movs	r2, #3
 80160f6:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80160fa:	4b1a      	ldr	r3, [pc, #104]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016102:	4b18      	ldr	r3, [pc, #96]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801610a:	2201      	movs	r2, #1
 801610c:	4619      	mov	r1, r3
 801610e:	f001 f955 	bl	80173bc <RegionCommonChanMaskCopy>
 8016112:	e024      	b.n	801615e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016114:	4b13      	ldr	r3, [pc, #76]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2200      	movs	r2, #0
 801611a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801611c:	4b11      	ldr	r3, [pc, #68]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2200      	movs	r2, #0
 8016122:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016124:	4b0f      	ldr	r3, [pc, #60]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801612c:	4b0d      	ldr	r3, [pc, #52]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016134:	2201      	movs	r2, #1
 8016136:	4619      	mov	r1, r3
 8016138:	f001 f940 	bl	80173bc <RegionCommonChanMaskCopy>
            break;
 801613c:	e00f      	b.n	801615e <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801613e:	4b09      	ldr	r3, [pc, #36]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8016146:	4b07      	ldr	r3, [pc, #28]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 801614e:	4b05      	ldr	r3, [pc, #20]	@ (8016164 <RegionAS923InitDefaults+0x114>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	430a      	orrs	r2, r1
 8016154:	b292      	uxth	r2, r2
 8016156:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 801615a:	e000      	b.n	801615e <RegionAS923InitDefaults+0x10e>
            break;
 801615c:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801615e:	3738      	adds	r7, #56	@ 0x38
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	20001bdc 	.word	0x20001bdc
 8016168:	20001be0 	.word	0x20001be0
 801616c:	0801fdb8 	.word	0x0801fdb8
 8016170:	0801fdc4 	.word	0x0801fdc4

08016174 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	460b      	mov	r3, r1
 801617e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8016180:	78fb      	ldrb	r3, [r7, #3]
 8016182:	2b0f      	cmp	r3, #15
 8016184:	f200 808f 	bhi.w	80162a6 <RegionAS923Verify+0x132>
 8016188:	a201      	add	r2, pc, #4	@ (adr r2, 8016190 <RegionAS923Verify+0x1c>)
 801618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801618e:	bf00      	nop
 8016190:	080161d1 	.word	0x080161d1
 8016194:	080162a7 	.word	0x080162a7
 8016198:	080162a7 	.word	0x080162a7
 801619c:	080162a7 	.word	0x080162a7
 80161a0:	080162a7 	.word	0x080162a7
 80161a4:	080161df 	.word	0x080161df
 80161a8:	08016223 	.word	0x08016223
 80161ac:	08016241 	.word	0x08016241
 80161b0:	080162a7 	.word	0x080162a7
 80161b4:	08016285 	.word	0x08016285
 80161b8:	08016285 	.word	0x08016285
 80161bc:	080162a7 	.word	0x080162a7
 80161c0:	080162a7 	.word	0x080162a7
 80161c4:	080162a7 	.word	0x080162a7
 80161c8:	080162a7 	.word	0x080162a7
 80161cc:	080162a3 	.word	0x080162a3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7ff fd23 	bl	8015c20 <VerifyRfFreq>
 80161da:	4603      	mov	r3, r0
 80161dc:	e064      	b.n	80162a8 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	789b      	ldrb	r3, [r3, #2]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10e      	bne.n	8016204 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f993 3000 	ldrsb.w	r3, [r3]
 80161ec:	2207      	movs	r2, #7
 80161ee:	2100      	movs	r1, #0
 80161f0:	4618      	mov	r0, r3
 80161f2:	f001 f866 	bl	80172c2 <RegionCommonValueInRange>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	bf14      	ite	ne
 80161fc:	2301      	movne	r3, #1
 80161fe:	2300      	moveq	r3, #0
 8016200:	b2db      	uxtb	r3, r3
 8016202:	e051      	b.n	80162a8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f993 3000 	ldrsb.w	r3, [r3]
 801620a:	2207      	movs	r2, #7
 801620c:	2102      	movs	r1, #2
 801620e:	4618      	mov	r0, r3
 8016210:	f001 f857 	bl	80172c2 <RegionCommonValueInRange>
 8016214:	4603      	mov	r3, r0
 8016216:	2b00      	cmp	r3, #0
 8016218:	bf14      	ite	ne
 801621a:	2301      	movne	r3, #1
 801621c:	2300      	moveq	r3, #0
 801621e:	b2db      	uxtb	r3, r3
 8016220:	e042      	b.n	80162a8 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f993 3000 	ldrsb.w	r3, [r3]
 8016228:	2205      	movs	r2, #5
 801622a:	2100      	movs	r1, #0
 801622c:	4618      	mov	r0, r3
 801622e:	f001 f848 	bl	80172c2 <RegionCommonValueInRange>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	bf14      	ite	ne
 8016238:	2301      	movne	r3, #1
 801623a:	2300      	moveq	r3, #0
 801623c:	b2db      	uxtb	r3, r3
 801623e:	e033      	b.n	80162a8 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	785b      	ldrb	r3, [r3, #1]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d10e      	bne.n	8016266 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f993 3000 	ldrsb.w	r3, [r3]
 801624e:	2207      	movs	r2, #7
 8016250:	2100      	movs	r1, #0
 8016252:	4618      	mov	r0, r3
 8016254:	f001 f835 	bl	80172c2 <RegionCommonValueInRange>
 8016258:	4603      	mov	r3, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	bf14      	ite	ne
 801625e:	2301      	movne	r3, #1
 8016260:	2300      	moveq	r3, #0
 8016262:	b2db      	uxtb	r3, r3
 8016264:	e020      	b.n	80162a8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f993 3000 	ldrsb.w	r3, [r3]
 801626c:	2207      	movs	r2, #7
 801626e:	2102      	movs	r1, #2
 8016270:	4618      	mov	r0, r3
 8016272:	f001 f826 	bl	80172c2 <RegionCommonValueInRange>
 8016276:	4603      	mov	r3, r0
 8016278:	2b00      	cmp	r3, #0
 801627a:	bf14      	ite	ne
 801627c:	2301      	movne	r3, #1
 801627e:	2300      	moveq	r3, #0
 8016280:	b2db      	uxtb	r3, r3
 8016282:	e011      	b.n	80162a8 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f993 3000 	ldrsb.w	r3, [r3]
 801628a:	2207      	movs	r2, #7
 801628c:	2100      	movs	r1, #0
 801628e:	4618      	mov	r0, r3
 8016290:	f001 f817 	bl	80172c2 <RegionCommonValueInRange>
 8016294:	4603      	mov	r3, r0
 8016296:	2b00      	cmp	r3, #0
 8016298:	bf14      	ite	ne
 801629a:	2301      	movne	r3, #1
 801629c:	2300      	moveq	r3, #0
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	e002      	b.n	80162a8 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 80162a2:	2300      	movs	r3, #0
 80162a4:	e000      	b.n	80162a8 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 80162a6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b08a      	sub	sp, #40	@ 0x28
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80162b8:	2350      	movs	r3, #80	@ 0x50
 80162ba:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	7a1b      	ldrb	r3, [r3, #8]
 80162c2:	2b10      	cmp	r3, #16
 80162c4:	d162      	bne.n	801638c <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	330f      	adds	r3, #15
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d15e      	bne.n	8016390 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80162d2:	2300      	movs	r3, #0
 80162d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80162d8:	2302      	movs	r3, #2
 80162da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80162de:	e050      	b.n	8016382 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 80162e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80162e4:	2b06      	cmp	r3, #6
 80162e6:	d824      	bhi.n	8016332 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	685a      	ldr	r2, [r3, #4]
 80162ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162f0:	4413      	add	r3, r2
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80162f6:	69ba      	ldr	r2, [r7, #24]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6859      	ldr	r1, [r3, #4]
 80162fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016300:	3301      	adds	r3, #1
 8016302:	440b      	add	r3, r1
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	021b      	lsls	r3, r3, #8
 8016308:	4313      	orrs	r3, r2
 801630a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801630c:	69ba      	ldr	r2, [r7, #24]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6859      	ldr	r1, [r3, #4]
 8016312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016316:	3302      	adds	r3, #2
 8016318:	440b      	add	r3, r1
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	041b      	lsls	r3, r3, #16
 801631e:	4313      	orrs	r3, r2
 8016320:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	2264      	movs	r2, #100	@ 0x64
 8016326:	fb02 f303 	mul.w	r3, r2, r3
 801632a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801632c:	2300      	movs	r3, #0
 801632e:	61fb      	str	r3, [r7, #28]
 8016330:	e006      	b.n	8016340 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016336:	2300      	movs	r3, #0
 8016338:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801633c:	2300      	movs	r3, #0
 801633e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00b      	beq.n	801635e <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016346:	f107 0318 	add.w	r3, r7, #24
 801634a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801634c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016350:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8016352:	f107 0310 	add.w	r3, r7, #16
 8016356:	4618      	mov	r0, r3
 8016358:	f000 fd00 	bl	8016d5c <RegionAS923ChannelAdd>
 801635c:	e007      	b.n	801636e <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801635e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016362:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8016364:	f107 030c 	add.w	r3, r7, #12
 8016368:	4618      	mov	r0, r3
 801636a:	f000 fd93 	bl	8016e94 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801636e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016372:	3303      	adds	r3, #3
 8016374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801637c:	3301      	adds	r3, #1
 801637e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016382:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016386:	2b0f      	cmp	r3, #15
 8016388:	d9aa      	bls.n	80162e0 <RegionAS923ApplyCFList+0x30>
 801638a:	e002      	b.n	8016392 <RegionAS923ApplyCFList+0xe2>
        return;
 801638c:	bf00      	nop
 801638e:	e000      	b.n	8016392 <RegionAS923ApplyCFList+0xe2>
        return;
 8016390:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8016392:	3728      	adds	r7, #40	@ 0x28
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}

08016398 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	791b      	ldrb	r3, [r3, #4]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d002      	beq.n	80163ae <RegionAS923ChanMaskSet+0x16>
 80163a8:	2b01      	cmp	r3, #1
 80163aa:	d00b      	beq.n	80163c4 <RegionAS923ChanMaskSet+0x2c>
 80163ac:	e015      	b.n	80163da <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80163ae:	4b0e      	ldr	r3, [pc, #56]	@ (80163e8 <RegionAS923ChanMaskSet+0x50>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2201      	movs	r2, #1
 80163bc:	4619      	mov	r1, r3
 80163be:	f000 fffd 	bl	80173bc <RegionCommonChanMaskCopy>
            break;
 80163c2:	e00c      	b.n	80163de <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80163c4:	4b08      	ldr	r3, [pc, #32]	@ (80163e8 <RegionAS923ChanMaskSet+0x50>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	2201      	movs	r2, #1
 80163d2:	4619      	mov	r1, r3
 80163d4:	f000 fff2 	bl	80173bc <RegionCommonChanMaskCopy>
            break;
 80163d8:	e001      	b.n	80163de <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 80163da:	2300      	movs	r3, #0
 80163dc:	e000      	b.n	80163e0 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 80163de:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	3708      	adds	r7, #8
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	20001bdc 	.word	0x20001bdc

080163ec <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b088      	sub	sp, #32
 80163f0:	af02      	add	r7, sp, #8
 80163f2:	60ba      	str	r2, [r7, #8]
 80163f4:	607b      	str	r3, [r7, #4]
 80163f6:	4603      	mov	r3, r0
 80163f8:	73fb      	strb	r3, [r7, #15]
 80163fa:	460b      	mov	r3, r1
 80163fc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 80163fe:	2300      	movs	r3, #0
 8016400:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8016402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016406:	2b07      	cmp	r3, #7
 8016408:	bfa8      	it	ge
 801640a:	2307      	movge	r3, #7
 801640c:	b25a      	sxtb	r2, r3
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016418:	491e      	ldr	r1, [pc, #120]	@ (8016494 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801641a:	4618      	mov	r0, r3
 801641c:	f001 fc6e 	bl	8017cfc <RegionCommonGetBandwidth>
 8016420:	4603      	mov	r3, r0
 8016422:	b2da      	uxtb	r2, r3
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801642e:	2b07      	cmp	r3, #7
 8016430:	d10a      	bne.n	8016448 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016438:	461a      	mov	r2, r3
 801643a:	4b17      	ldr	r3, [pc, #92]	@ (8016498 <RegionAS923ComputeRxWindowParameters+0xac>)
 801643c:	5c9b      	ldrb	r3, [r3, r2]
 801643e:	4618      	mov	r0, r3
 8016440:	f001 f9f0 	bl	8017824 <RegionCommonComputeSymbolTimeFsk>
 8016444:	6178      	str	r0, [r7, #20]
 8016446:	e011      	b.n	801646c <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801644e:	461a      	mov	r2, r3
 8016450:	4b11      	ldr	r3, [pc, #68]	@ (8016498 <RegionAS923ComputeRxWindowParameters+0xac>)
 8016452:	5c9a      	ldrb	r2, [r3, r2]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801645a:	4619      	mov	r1, r3
 801645c:	4b0d      	ldr	r3, [pc, #52]	@ (8016494 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801645e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016462:	4619      	mov	r1, r3
 8016464:	4610      	mov	r0, r2
 8016466:	f001 f9c7 	bl	80177f8 <RegionCommonComputeSymbolTimeLoRa>
 801646a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801646c:	4b0b      	ldr	r3, [pc, #44]	@ (801649c <RegionAS923ComputeRxWindowParameters+0xb0>)
 801646e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016470:	4798      	blx	r3
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	3308      	adds	r3, #8
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	320c      	adds	r2, #12
 801647a:	7bb9      	ldrb	r1, [r7, #14]
 801647c:	9201      	str	r2, [sp, #4]
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	4603      	mov	r3, r0
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	6978      	ldr	r0, [r7, #20]
 8016486:	f001 f9dd 	bl	8017844 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 801648a:	bf00      	nop
 801648c:	3718      	adds	r7, #24
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	08020398 	.word	0x08020398
 8016498:	08020390 	.word	0x08020390
 801649c:	08020450 	.word	0x08020450

080164a0 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80164a0:	b5b0      	push	{r4, r5, r7, lr}
 80164a2:	b090      	sub	sp, #64	@ 0x40
 80164a4:	af0a      	add	r7, sp, #40	@ 0x28
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	785b      	ldrb	r3, [r3, #1]
 80164ae:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80164be:	4b5a      	ldr	r3, [pc, #360]	@ (8016628 <RegionAS923RxConfig+0x188>)
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	4798      	blx	r3
 80164c4:	4603      	mov	r3, r0
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d001      	beq.n	80164ce <RegionAS923RxConfig+0x2e>
    {
        return false;
 80164ca:	2300      	movs	r3, #0
 80164cc:	e0a8      	b.n	8016620 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	7cdb      	ldrb	r3, [r3, #19]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d126      	bne.n	8016524 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80164d6:	4b55      	ldr	r3, [pc, #340]	@ (801662c <RegionAS923RxConfig+0x18c>)
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	4619      	mov	r1, r3
 80164e0:	460b      	mov	r3, r1
 80164e2:	005b      	lsls	r3, r3, #1
 80164e4:	440b      	add	r3, r1
 80164e6:	009b      	lsls	r3, r3, #2
 80164e8:	4413      	add	r3, r2
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80164ee:	4b4f      	ldr	r3, [pc, #316]	@ (801662c <RegionAS923RxConfig+0x18c>)
 80164f0:	681a      	ldr	r2, [r3, #0]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	4619      	mov	r1, r3
 80164f8:	460b      	mov	r3, r1
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	440b      	add	r3, r1
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	4413      	add	r3, r2
 8016502:	3304      	adds	r3, #4
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d00c      	beq.n	8016524 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801650a:	4b48      	ldr	r3, [pc, #288]	@ (801662c <RegionAS923RxConfig+0x18c>)
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	4619      	mov	r1, r3
 8016514:	460b      	mov	r3, r1
 8016516:	005b      	lsls	r3, r3, #1
 8016518:	440b      	add	r3, r1
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	4413      	add	r3, r2
 801651e:	3304      	adds	r3, #4
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8016524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016528:	4a41      	ldr	r2, [pc, #260]	@ (8016630 <RegionAS923RxConfig+0x190>)
 801652a:	5cd3      	ldrb	r3, [r2, r3]
 801652c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801652e:	4b3e      	ldr	r3, [pc, #248]	@ (8016628 <RegionAS923RxConfig+0x188>)
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	6938      	ldr	r0, [r7, #16]
 8016534:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801653a:	2b07      	cmp	r3, #7
 801653c:	d128      	bne.n	8016590 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801653e:	2300      	movs	r3, #0
 8016540:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016542:	4b39      	ldr	r3, [pc, #228]	@ (8016628 <RegionAS923RxConfig+0x188>)
 8016544:	699c      	ldr	r4, [r3, #24]
 8016546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801654a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801654e:	fb02 f303 	mul.w	r3, r2, r3
 8016552:	4619      	mov	r1, r3
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	689b      	ldr	r3, [r3, #8]
 8016558:	b29b      	uxth	r3, r3
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	7c92      	ldrb	r2, [r2, #18]
 801655e:	7df8      	ldrb	r0, [r7, #23]
 8016560:	9209      	str	r2, [sp, #36]	@ 0x24
 8016562:	2200      	movs	r2, #0
 8016564:	9208      	str	r2, [sp, #32]
 8016566:	2200      	movs	r2, #0
 8016568:	9207      	str	r2, [sp, #28]
 801656a:	2200      	movs	r2, #0
 801656c:	9206      	str	r2, [sp, #24]
 801656e:	2201      	movs	r2, #1
 8016570:	9205      	str	r2, [sp, #20]
 8016572:	2200      	movs	r2, #0
 8016574:	9204      	str	r2, [sp, #16]
 8016576:	2200      	movs	r2, #0
 8016578:	9203      	str	r2, [sp, #12]
 801657a:	9302      	str	r3, [sp, #8]
 801657c:	2305      	movs	r3, #5
 801657e:	9301      	str	r3, [sp, #4]
 8016580:	4b2c      	ldr	r3, [pc, #176]	@ (8016634 <RegionAS923RxConfig+0x194>)
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	2300      	movs	r3, #0
 8016586:	460a      	mov	r2, r1
 8016588:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801658c:	47a0      	blx	r4
 801658e:	e024      	b.n	80165da <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016590:	2301      	movs	r3, #1
 8016592:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016594:	4b24      	ldr	r3, [pc, #144]	@ (8016628 <RegionAS923RxConfig+0x188>)
 8016596:	699c      	ldr	r4, [r3, #24]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	789b      	ldrb	r3, [r3, #2]
 801659c:	461d      	mov	r5, r3
 801659e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	689b      	ldr	r3, [r3, #8]
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	687a      	ldr	r2, [r7, #4]
 80165aa:	7c92      	ldrb	r2, [r2, #18]
 80165ac:	7df8      	ldrb	r0, [r7, #23]
 80165ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80165b0:	2201      	movs	r2, #1
 80165b2:	9208      	str	r2, [sp, #32]
 80165b4:	2200      	movs	r2, #0
 80165b6:	9207      	str	r2, [sp, #28]
 80165b8:	2200      	movs	r2, #0
 80165ba:	9206      	str	r2, [sp, #24]
 80165bc:	2200      	movs	r2, #0
 80165be:	9205      	str	r2, [sp, #20]
 80165c0:	2200      	movs	r2, #0
 80165c2:	9204      	str	r2, [sp, #16]
 80165c4:	2200      	movs	r2, #0
 80165c6:	9203      	str	r2, [sp, #12]
 80165c8:	9302      	str	r3, [sp, #8]
 80165ca:	2308      	movs	r3, #8
 80165cc:	9301      	str	r3, [sp, #4]
 80165ce:	2300      	movs	r3, #0
 80165d0:	9300      	str	r3, [sp, #0]
 80165d2:	2301      	movs	r3, #1
 80165d4:	460a      	mov	r2, r1
 80165d6:	4629      	mov	r1, r5
 80165d8:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	7c5b      	ldrb	r3, [r3, #17]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d005      	beq.n	80165ee <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80165e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165e6:	4a14      	ldr	r2, [pc, #80]	@ (8016638 <RegionAS923RxConfig+0x198>)
 80165e8:	5cd3      	ldrb	r3, [r2, r3]
 80165ea:	75bb      	strb	r3, [r7, #22]
 80165ec:	e004      	b.n	80165f8 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 80165ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165f2:	4a12      	ldr	r2, [pc, #72]	@ (801663c <RegionAS923RxConfig+0x19c>)
 80165f4:	5cd3      	ldrb	r3, [r2, r3]
 80165f6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80165f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016628 <RegionAS923RxConfig+0x188>)
 80165fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80165fc:	7dba      	ldrb	r2, [r7, #22]
 80165fe:	320d      	adds	r2, #13
 8016600:	b2d1      	uxtb	r1, r2
 8016602:	7dfa      	ldrb	r2, [r7, #23]
 8016604:	4610      	mov	r0, r2
 8016606:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	7cdb      	ldrb	r3, [r3, #19]
 801660c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016610:	6939      	ldr	r1, [r7, #16]
 8016612:	4618      	mov	r0, r3
 8016614:	f001 fb90 	bl	8017d38 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	7bfa      	ldrb	r2, [r7, #15]
 801661c:	701a      	strb	r2, [r3, #0]
    return true;
 801661e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016620:	4618      	mov	r0, r3
 8016622:	3718      	adds	r7, #24
 8016624:	46bd      	mov	sp, r7
 8016626:	bdb0      	pop	{r4, r5, r7, pc}
 8016628:	08020450 	.word	0x08020450
 801662c:	20001bdc 	.word	0x20001bdc
 8016630:	08020390 	.word	0x08020390
 8016634:	00014585 	.word	0x00014585
 8016638:	080203c0 	.word	0x080203c0
 801663c:	080203b8 	.word	0x080203b8

08016640 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016640:	b590      	push	{r4, r7, lr}
 8016642:	b093      	sub	sp, #76	@ 0x4c
 8016644:	af0a      	add	r7, sp, #40	@ 0x28
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016652:	461a      	mov	r2, r3
 8016654:	4b5d      	ldr	r3, [pc, #372]	@ (80167cc <RegionAS923TxConfig+0x18c>)
 8016656:	5c9b      	ldrb	r3, [r3, r2]
 8016658:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016660:	4b5b      	ldr	r3, [pc, #364]	@ (80167d0 <RegionAS923TxConfig+0x190>)
 8016662:	681a      	ldr	r2, [r3, #0]
 8016664:	4b5b      	ldr	r3, [pc, #364]	@ (80167d4 <RegionAS923TxConfig+0x194>)
 8016666:	6819      	ldr	r1, [r3, #0]
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	461c      	mov	r4, r3
 801666e:	4623      	mov	r3, r4
 8016670:	005b      	lsls	r3, r3, #1
 8016672:	4423      	add	r3, r4
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	440b      	add	r3, r1
 8016678:	3309      	adds	r3, #9
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	4619      	mov	r1, r3
 801667e:	460b      	mov	r3, r1
 8016680:	005b      	lsls	r3, r3, #1
 8016682:	440b      	add	r3, r1
 8016684:	00db      	lsls	r3, r3, #3
 8016686:	4413      	add	r3, r2
 8016688:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801668c:	4619      	mov	r1, r3
 801668e:	f001 fb20 	bl	8017cd2 <RegionCommonLimitTxPower>
 8016692:	4603      	mov	r3, r0
 8016694:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801669c:	494e      	ldr	r1, [pc, #312]	@ (80167d8 <RegionAS923TxConfig+0x198>)
 801669e:	4618      	mov	r0, r3
 80166a0:	f001 fb2c 	bl	8017cfc <RegionCommonGetBandwidth>
 80166a4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	6859      	ldr	r1, [r3, #4]
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	689a      	ldr	r2, [r3, #8]
 80166b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80166b6:	4618      	mov	r0, r3
 80166b8:	f001 f97c 	bl	80179b4 <RegionCommonComputeTxPower>
 80166bc:	4603      	mov	r3, r0
 80166be:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80166c0:	4b46      	ldr	r3, [pc, #280]	@ (80167dc <RegionAS923TxConfig+0x19c>)
 80166c2:	68da      	ldr	r2, [r3, #12]
 80166c4:	4b43      	ldr	r3, [pc, #268]	@ (80167d4 <RegionAS923TxConfig+0x194>)
 80166c6:	6819      	ldr	r1, [r3, #0]
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	781b      	ldrb	r3, [r3, #0]
 80166cc:	4618      	mov	r0, r3
 80166ce:	4603      	mov	r3, r0
 80166d0:	005b      	lsls	r3, r3, #1
 80166d2:	4403      	add	r3, r0
 80166d4:	009b      	lsls	r3, r3, #2
 80166d6:	440b      	add	r3, r1
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	4618      	mov	r0, r3
 80166dc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80166e4:	2b07      	cmp	r3, #7
 80166e6:	d124      	bne.n	8016732 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80166e8:	2300      	movs	r3, #0
 80166ea:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80166ec:	4b3b      	ldr	r3, [pc, #236]	@ (80167dc <RegionAS923TxConfig+0x19c>)
 80166ee:	69dc      	ldr	r4, [r3, #28]
 80166f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80166f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80166f8:	fb02 f303 	mul.w	r3, r2, r3
 80166fc:	461a      	mov	r2, r3
 80166fe:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016702:	7ff8      	ldrb	r0, [r7, #31]
 8016704:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016708:	9308      	str	r3, [sp, #32]
 801670a:	2300      	movs	r3, #0
 801670c:	9307      	str	r3, [sp, #28]
 801670e:	2300      	movs	r3, #0
 8016710:	9306      	str	r3, [sp, #24]
 8016712:	2300      	movs	r3, #0
 8016714:	9305      	str	r3, [sp, #20]
 8016716:	2301      	movs	r3, #1
 8016718:	9304      	str	r3, [sp, #16]
 801671a:	2300      	movs	r3, #0
 801671c:	9303      	str	r3, [sp, #12]
 801671e:	2305      	movs	r3, #5
 8016720:	9302      	str	r3, [sp, #8]
 8016722:	2300      	movs	r3, #0
 8016724:	9301      	str	r3, [sp, #4]
 8016726:	9200      	str	r2, [sp, #0]
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801672e:	47a0      	blx	r4
 8016730:	e01d      	b.n	801676e <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8016732:	2301      	movs	r3, #1
 8016734:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016736:	4b29      	ldr	r3, [pc, #164]	@ (80167dc <RegionAS923TxConfig+0x19c>)
 8016738:	69dc      	ldr	r4, [r3, #28]
 801673a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801673e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016742:	7ff8      	ldrb	r0, [r7, #31]
 8016744:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016748:	9208      	str	r2, [sp, #32]
 801674a:	2200      	movs	r2, #0
 801674c:	9207      	str	r2, [sp, #28]
 801674e:	2200      	movs	r2, #0
 8016750:	9206      	str	r2, [sp, #24]
 8016752:	2200      	movs	r2, #0
 8016754:	9205      	str	r2, [sp, #20]
 8016756:	2201      	movs	r2, #1
 8016758:	9204      	str	r2, [sp, #16]
 801675a:	2200      	movs	r2, #0
 801675c:	9203      	str	r2, [sp, #12]
 801675e:	2208      	movs	r2, #8
 8016760:	9202      	str	r2, [sp, #8]
 8016762:	2201      	movs	r2, #1
 8016764:	9201      	str	r2, [sp, #4]
 8016766:	9300      	str	r3, [sp, #0]
 8016768:	69bb      	ldr	r3, [r7, #24]
 801676a:	2200      	movs	r2, #0
 801676c:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801676e:	4b19      	ldr	r3, [pc, #100]	@ (80167d4 <RegionAS923TxConfig+0x194>)
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	4619      	mov	r1, r3
 8016778:	460b      	mov	r3, r1
 801677a:	005b      	lsls	r3, r3, #1
 801677c:	440b      	add	r3, r1
 801677e:	009b      	lsls	r3, r3, #2
 8016780:	4413      	add	r3, r2
 8016782:	681a      	ldr	r2, [r3, #0]
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801678a:	4619      	mov	r1, r3
 801678c:	4610      	mov	r0, r2
 801678e:	f001 fb05 	bl	8017d9c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	899b      	ldrh	r3, [r3, #12]
 801679c:	4619      	mov	r1, r3
 801679e:	4610      	mov	r0, r2
 80167a0:	f7ff fa64 	bl	8015c6c <GetTimeOnAir>
 80167a4:	4602      	mov	r2, r0
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80167aa:	4b0c      	ldr	r3, [pc, #48]	@ (80167dc <RegionAS923TxConfig+0x19c>)
 80167ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	8992      	ldrh	r2, [r2, #12]
 80167b2:	b2d1      	uxtb	r1, r2
 80167b4:	7ffa      	ldrb	r2, [r7, #31]
 80167b6:	4610      	mov	r0, r2
 80167b8:	4798      	blx	r3

    *txPower = txPowerLimited;
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	7f7a      	ldrb	r2, [r7, #29]
 80167be:	701a      	strb	r2, [r3, #0]
    return true;
 80167c0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3724      	adds	r7, #36	@ 0x24
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd90      	pop	{r4, r7, pc}
 80167ca:	bf00      	nop
 80167cc:	08020390 	.word	0x08020390
 80167d0:	20001be0 	.word	0x20001be0
 80167d4:	20001bdc 	.word	0x20001bdc
 80167d8:	08020398 	.word	0x08020398
 80167dc:	08020450 	.word	0x08020450

080167e0 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80167e0:	b590      	push	{r4, r7, lr}
 80167e2:	b093      	sub	sp, #76	@ 0x4c
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
 80167ec:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80167ee:	2307      	movs	r3, #7
 80167f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80167f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80167f8:	2200      	movs	r2, #0
 80167fa:	601a      	str	r2, [r3, #0]
 80167fc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80167fe:	2300      	movs	r3, #0
 8016800:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016804:	2300      	movs	r3, #0
 8016806:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801680a:	2300      	movs	r3, #0
 801680c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801680e:	e085      	b.n	801691c <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	685a      	ldr	r2, [r3, #4]
 8016814:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016818:	4413      	add	r3, r2
 801681a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801681e:	4611      	mov	r1, r2
 8016820:	4618      	mov	r0, r3
 8016822:	f000 ff0f 	bl	8017644 <RegionCommonParseLinkAdrReq>
 8016826:	4603      	mov	r3, r0
 8016828:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801682c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016830:	2b00      	cmp	r3, #0
 8016832:	d07b      	beq.n	801692c <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016834:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016838:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801683c:	4413      	add	r3, r2
 801683e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016842:	2307      	movs	r3, #7
 8016844:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801684c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801684e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016852:	2b00      	cmp	r3, #0
 8016854:	d109      	bne.n	801686a <RegionAS923LinkAdrReq+0x8a>
 8016856:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016858:	2b00      	cmp	r3, #0
 801685a:	d106      	bne.n	801686a <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801685c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016860:	f023 0301 	bic.w	r3, r3, #1
 8016864:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016868:	e058      	b.n	801691c <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801686a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801686e:	2b00      	cmp	r3, #0
 8016870:	d003      	beq.n	801687a <RegionAS923LinkAdrReq+0x9a>
 8016872:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016876:	2b05      	cmp	r3, #5
 8016878:	d903      	bls.n	8016882 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801687a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801687e:	2b06      	cmp	r3, #6
 8016880:	d906      	bls.n	8016890 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016882:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016886:	f023 0301 	bic.w	r3, r3, #1
 801688a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801688e:	e045      	b.n	801691c <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8016890:	2300      	movs	r3, #0
 8016892:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016896:	e03d      	b.n	8016914 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801689c:	2b06      	cmp	r3, #6
 801689e:	d118      	bne.n	80168d2 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80168a0:	4b5f      	ldr	r3, [pc, #380]	@ (8016a20 <RegionAS923LinkAdrReq+0x240>)
 80168a2:	6819      	ldr	r1, [r3, #0]
 80168a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80168a8:	4613      	mov	r3, r2
 80168aa:	005b      	lsls	r3, r3, #1
 80168ac:	4413      	add	r3, r2
 80168ae:	009b      	lsls	r3, r3, #2
 80168b0:	440b      	add	r3, r1
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d028      	beq.n	801690a <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80168b8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80168bc:	2201      	movs	r2, #1
 80168be:	fa02 f303 	lsl.w	r3, r2, r3
 80168c2:	b21a      	sxth	r2, r3
 80168c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80168c6:	b21b      	sxth	r3, r3
 80168c8:	4313      	orrs	r3, r2
 80168ca:	b21b      	sxth	r3, r3
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80168d0:	e01b      	b.n	801690a <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80168d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80168d4:	461a      	mov	r2, r3
 80168d6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80168da:	fa42 f303 	asr.w	r3, r2, r3
 80168de:	f003 0301 	and.w	r3, r3, #1
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d011      	beq.n	801690a <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80168e6:	4b4e      	ldr	r3, [pc, #312]	@ (8016a20 <RegionAS923LinkAdrReq+0x240>)
 80168e8:	6819      	ldr	r1, [r3, #0]
 80168ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80168ee:	4613      	mov	r3, r2
 80168f0:	005b      	lsls	r3, r3, #1
 80168f2:	4413      	add	r3, r2
 80168f4:	009b      	lsls	r3, r3, #2
 80168f6:	440b      	add	r3, r1
 80168f8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d105      	bne.n	801690a <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80168fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016902:	f023 0301 	bic.w	r3, r3, #1
 8016906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801690a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801690e:	3301      	adds	r3, #1
 8016910:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016914:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016918:	2b0f      	cmp	r3, #15
 801691a:	d9bd      	bls.n	8016898 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	7a1b      	ldrb	r3, [r3, #8]
 8016920:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016924:	429a      	cmp	r2, r3
 8016926:	f4ff af73 	bcc.w	8016810 <RegionAS923LinkAdrReq+0x30>
 801692a:	e000      	b.n	801692e <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801692c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801692e:	2302      	movs	r3, #2
 8016930:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	7a5b      	ldrb	r3, [r3, #9]
 8016938:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801693c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016940:	4618      	mov	r0, r3
 8016942:	f7ff f9e3 	bl	8015d0c <RegionAS923GetPhyParam>
 8016946:	4603      	mov	r3, r0
 8016948:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801694a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801694e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	7a9b      	ldrb	r3, [r3, #10]
 8016954:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016956:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801695a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801695c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8016960:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016962:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016966:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801696e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016976:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	7b5b      	ldrb	r3, [r3, #13]
 801697c:	b25b      	sxtb	r3, r3
 801697e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8016980:	2310      	movs	r3, #16
 8016982:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016984:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016988:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801698c:	b25b      	sxtb	r3, r3
 801698e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8016992:	2307      	movs	r3, #7
 8016994:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016998:	4b21      	ldr	r3, [pc, #132]	@ (8016a20 <RegionAS923LinkAdrReq+0x240>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 801699e:	2307      	movs	r3, #7
 80169a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80169a4:	2300      	movs	r3, #0
 80169a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80169b0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80169b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80169b8:	1c9a      	adds	r2, r3, #2
 80169ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80169be:	1c59      	adds	r1, r3, #1
 80169c0:	f107 0010 	add.w	r0, r7, #16
 80169c4:	4623      	mov	r3, r4
 80169c6:	f000 fe8e 	bl	80176e6 <RegionCommonLinkAdrReqVerifyParams>
 80169ca:	4603      	mov	r3, r0
 80169cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80169d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80169d4:	2b07      	cmp	r3, #7
 80169d6:	d10d      	bne.n	80169f4 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80169d8:	4b11      	ldr	r3, [pc, #68]	@ (8016a20 <RegionAS923LinkAdrReq+0x240>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80169e0:	220c      	movs	r2, #12
 80169e2:	2100      	movs	r1, #0
 80169e4:	4618      	mov	r0, r3
 80169e6:	f001 fa73 	bl	8017ed0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80169ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016a20 <RegionAS923LinkAdrReq+0x240>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80169f0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80169f4:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80169fc:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016a04:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a0e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016a12:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8016a14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016a18:	4618      	mov	r0, r3
 8016a1a:	374c      	adds	r7, #76	@ 0x4c
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd90      	pop	{r4, r7, pc}
 8016a20:	20001bdc 	.word	0x20001bdc

08016a24 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016a2c:	2307      	movs	r3, #7
 8016a2e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7ff f8f3 	bl	8015c20 <VerifyRfFreq>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	f083 0301 	eor.w	r3, r3, #1
 8016a40:	b2db      	uxtb	r3, r3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d003      	beq.n	8016a4e <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8016a46:	7bfb      	ldrb	r3, [r7, #15]
 8016a48:	f023 0301 	bic.w	r3, r3, #1
 8016a4c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f993 3000 	ldrsb.w	r3, [r3]
 8016a54:	2207      	movs	r2, #7
 8016a56:	2100      	movs	r1, #0
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f000 fc32 	bl	80172c2 <RegionCommonValueInRange>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d103      	bne.n	8016a6c <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8016a64:	7bfb      	ldrb	r3, [r7, #15]
 8016a66:	f023 0302 	bic.w	r3, r3, #2
 8016a6a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a72:	2207      	movs	r2, #7
 8016a74:	2100      	movs	r1, #0
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 fc23 	bl	80172c2 <RegionCommonValueInRange>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d103      	bne.n	8016a8a <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016a82:	7bfb      	ldrb	r3, [r7, #15]
 8016a84:	f023 0304 	bic.w	r3, r3, #4
 8016a88:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 8016a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b086      	sub	sp, #24
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016a9c:	2303      	movs	r3, #3
 8016a9e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d114      	bne.n	8016ad4 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8016ab4:	f107 0308 	add.w	r3, r7, #8
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f000 f9eb 	bl	8016e94 <RegionAS923ChannelsRemove>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	f083 0301 	eor.w	r3, r3, #1
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d03b      	beq.n	8016b42 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016aca:	7dfb      	ldrb	r3, [r7, #23]
 8016acc:	f023 0303 	bic.w	r3, r3, #3
 8016ad0:	75fb      	strb	r3, [r7, #23]
 8016ad2:	e036      	b.n	8016b42 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ae0:	b2db      	uxtb	r3, r3
 8016ae2:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8016ae4:	f107 030c 	add.w	r3, r7, #12
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 f937 	bl	8016d5c <RegionAS923ChannelAdd>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b06      	cmp	r3, #6
 8016af2:	d820      	bhi.n	8016b36 <RegionAS923NewChannelReq+0xa2>
 8016af4:	a201      	add	r2, pc, #4	@ (adr r2, 8016afc <RegionAS923NewChannelReq+0x68>)
 8016af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016afa:	bf00      	nop
 8016afc:	08016b41 	.word	0x08016b41
 8016b00:	08016b37 	.word	0x08016b37
 8016b04:	08016b37 	.word	0x08016b37
 8016b08:	08016b37 	.word	0x08016b37
 8016b0c:	08016b19 	.word	0x08016b19
 8016b10:	08016b23 	.word	0x08016b23
 8016b14:	08016b2d 	.word	0x08016b2d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016b18:	7dfb      	ldrb	r3, [r7, #23]
 8016b1a:	f023 0301 	bic.w	r3, r3, #1
 8016b1e:	75fb      	strb	r3, [r7, #23]
                break;
 8016b20:	e00f      	b.n	8016b42 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016b22:	7dfb      	ldrb	r3, [r7, #23]
 8016b24:	f023 0302 	bic.w	r3, r3, #2
 8016b28:	75fb      	strb	r3, [r7, #23]
                break;
 8016b2a:	e00a      	b.n	8016b42 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016b2c:	7dfb      	ldrb	r3, [r7, #23]
 8016b2e:	f023 0303 	bic.w	r3, r3, #3
 8016b32:	75fb      	strb	r3, [r7, #23]
                break;
 8016b34:	e005      	b.n	8016b42 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016b36:	7dfb      	ldrb	r3, [r7, #23]
 8016b38:	f023 0303 	bic.w	r3, r3, #3
 8016b3c:	75fb      	strb	r3, [r7, #23]
                break;
 8016b3e:	e000      	b.n	8016b42 <RegionAS923NewChannelReq+0xae>
                break;
 8016b40:	bf00      	nop
            }
        }
    }

    return status;
 8016b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3718      	adds	r7, #24
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop

08016b50 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	370c      	adds	r7, #12
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bc80      	pop	{r7}
 8016b62:	4770      	bx	lr

08016b64 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016b6c:	2303      	movs	r3, #3
 8016b6e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7ff f853 	bl	8015c20 <VerifyRfFreq>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	f083 0301 	eor.w	r3, r3, #1
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d003      	beq.n	8016b8e <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
 8016b88:	f023 0301 	bic.w	r3, r3, #1
 8016b8c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016b8e:	4b14      	ldr	r3, [pc, #80]	@ (8016be0 <RegionAS923DlChannelReq+0x7c>)
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	781b      	ldrb	r3, [r3, #0]
 8016b96:	4619      	mov	r1, r3
 8016b98:	460b      	mov	r3, r1
 8016b9a:	005b      	lsls	r3, r3, #1
 8016b9c:	440b      	add	r3, r1
 8016b9e:	009b      	lsls	r3, r3, #2
 8016ba0:	4413      	add	r3, r2
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d103      	bne.n	8016bb0 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 8016ba8:	7bfb      	ldrb	r3, [r7, #15]
 8016baa:	f023 0302 	bic.w	r3, r3, #2
 8016bae:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016bb0:	7bfb      	ldrb	r3, [r7, #15]
 8016bb2:	2b03      	cmp	r3, #3
 8016bb4:	d10d      	bne.n	8016bd2 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8016be0 <RegionAS923DlChannelReq+0x7c>)
 8016bb8:	6819      	ldr	r1, [r3, #0]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	685a      	ldr	r2, [r3, #4]
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	005b      	lsls	r3, r3, #1
 8016bc8:	4403      	add	r3, r0
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	440b      	add	r3, r1
 8016bce:	3304      	adds	r3, #4
 8016bd0:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8016bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3710      	adds	r7, #16
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
 8016bde:	bf00      	nop
 8016be0:	20001bdc 	.word	0x20001bdc

08016be4 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016be4:	b480      	push	{r7}
 8016be6:	b083      	sub	sp, #12
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	4603      	mov	r3, r0
 8016bec:	460a      	mov	r2, r1
 8016bee:	71fb      	strb	r3, [r7, #7]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8016bf4:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	370c      	adds	r7, #12
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bc80      	pop	{r7}
 8016bfe:	4770      	bx	lr

08016c00 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b09a      	sub	sp, #104	@ 0x68
 8016c04:	af02      	add	r7, sp, #8
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016c14:	2300      	movs	r3, #0
 8016c16:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016c1e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016c22:	2200      	movs	r2, #0
 8016c24:	601a      	str	r2, [r3, #0]
 8016c26:	605a      	str	r2, [r3, #4]
 8016c28:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016c2a:	230c      	movs	r3, #12
 8016c2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8016c30:	2303      	movs	r3, #3
 8016c32:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016c34:	4b47      	ldr	r3, [pc, #284]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	2100      	movs	r1, #0
 8016c40:	4618      	mov	r0, r3
 8016c42:	f000 fb8f 	bl	8017364 <RegionCommonCountChannels>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d10a      	bne.n	8016c62 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016c4c:	4b41      	ldr	r3, [pc, #260]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016c54:	4b3f      	ldr	r3, [pc, #252]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f042 0203 	orr.w	r2, r2, #3
 8016c5c:	b292      	uxth	r2, r2
 8016c5e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	7a5b      	ldrb	r3, [r3, #9]
 8016c66:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016c6e:	b2db      	uxtb	r3, r3
 8016c70:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016c72:	4b38      	ldr	r3, [pc, #224]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016c7a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016c7c:	4b35      	ldr	r3, [pc, #212]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016c82:	4b35      	ldr	r3, [pc, #212]	@ (8016d58 <RegionAS923NextChannel+0x158>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8016c88:	2310      	movs	r3, #16
 8016c8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016c8c:	f107 0312 	add.w	r3, r7, #18
 8016c90:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	685b      	ldr	r3, [r3, #4]
 8016c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	7a9b      	ldrb	r3, [r3, #10]
 8016ca2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016cb2:	320c      	adds	r2, #12
 8016cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016cb8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	7d1b      	ldrb	r3, [r3, #20]
 8016cc0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	8adb      	ldrh	r3, [r3, #22]
 8016cce:	4619      	mov	r1, r3
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	f7fe ffcb 	bl	8015c6c <GetTimeOnAir>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016cda:	f107 0314 	add.w	r3, r7, #20
 8016cde:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016ce0:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8016ce4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016ce8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	9301      	str	r3, [sp, #4]
 8016cf0:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8016cf4:	9300      	str	r3, [sp, #0]
 8016cf6:	460b      	mov	r3, r1
 8016cf8:	6839      	ldr	r1, [r7, #0]
 8016cfa:	f000 ff4a 	bl	8017b92 <RegionCommonIdentifyChannels>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016d04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10e      	bne.n	8016d2a <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016d0c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016d10:	3b01      	subs	r3, #1
 8016d12:	4619      	mov	r1, r3
 8016d14:	2000      	movs	r0, #0
 8016d16:	f001 f889 	bl	8017e2c <randr>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	3360      	adds	r3, #96	@ 0x60
 8016d1e:	443b      	add	r3, r7
 8016d20:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	701a      	strb	r2, [r3, #0]
 8016d28:	e00e      	b.n	8016d48 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016d2e:	2b0c      	cmp	r3, #12
 8016d30:	d10a      	bne.n	8016d48 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016d32:	4b08      	ldr	r3, [pc, #32]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016d3a:	4b06      	ldr	r3, [pc, #24]	@ (8016d54 <RegionAS923NextChannel+0x154>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f042 0203 	orr.w	r2, r2, #3
 8016d42:	b292      	uxth	r2, r2
 8016d44:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8016d48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3760      	adds	r7, #96	@ 0x60
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	20001bdc 	.word	0x20001bdc
 8016d58:	20001be0 	.word	0x20001be0

08016d5c <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b084      	sub	sp, #16
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8016d64:	2300      	movs	r3, #0
 8016d66:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	791b      	ldrb	r3, [r3, #4]
 8016d70:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8016d72:	7b7b      	ldrb	r3, [r7, #13]
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d801      	bhi.n	8016d7c <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016d78:	2306      	movs	r3, #6
 8016d7a:	e085      	b.n	8016e88 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8016d7c:	7b7b      	ldrb	r3, [r7, #13]
 8016d7e:	2b0f      	cmp	r3, #15
 8016d80:	d901      	bls.n	8016d86 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016d82:	2303      	movs	r3, #3
 8016d84:	e080      	b.n	8016e88 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	7a1b      	ldrb	r3, [r3, #8]
 8016d8c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d90:	b25b      	sxtb	r3, r3
 8016d92:	2207      	movs	r2, #7
 8016d94:	2100      	movs	r1, #0
 8016d96:	4618      	mov	r0, r3
 8016d98:	f000 fa93 	bl	80172c2 <RegionCommonValueInRange>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d101      	bne.n	8016da6 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8016da2:	2301      	movs	r3, #1
 8016da4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	7a1b      	ldrb	r3, [r3, #8]
 8016dac:	f343 1303 	sbfx	r3, r3, #4, #4
 8016db0:	b25b      	sxtb	r3, r3
 8016db2:	2207      	movs	r2, #7
 8016db4:	2100      	movs	r1, #0
 8016db6:	4618      	mov	r0, r3
 8016db8:	f000 fa83 	bl	80172c2 <RegionCommonValueInRange>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d101      	bne.n	8016dc6 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	7a1b      	ldrb	r3, [r3, #8]
 8016dcc:	f343 0303 	sbfx	r3, r3, #0, #4
 8016dd0:	b25a      	sxtb	r2, r3
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	7a1b      	ldrb	r3, [r3, #8]
 8016dd8:	f343 1303 	sbfx	r3, r3, #4, #4
 8016ddc:	b25b      	sxtb	r3, r3
 8016dde:	429a      	cmp	r2, r3
 8016de0:	dd01      	ble.n	8016de6 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8016de2:	2301      	movs	r3, #1
 8016de4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016de6:	7bbb      	ldrb	r3, [r7, #14]
 8016de8:	f083 0301 	eor.w	r3, r3, #1
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00d      	beq.n	8016e0e <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fe ff11 	bl	8015c20 <VerifyRfFreq>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	f083 0301 	eor.w	r3, r3, #1
 8016e04:	b2db      	uxtb	r3, r3
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d001      	beq.n	8016e0e <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016e0e:	7bfb      	ldrb	r3, [r7, #15]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d004      	beq.n	8016e1e <RegionAS923ChannelAdd+0xc2>
 8016e14:	7bbb      	ldrb	r3, [r7, #14]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d001      	beq.n	8016e1e <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016e1a:	2306      	movs	r3, #6
 8016e1c:	e034      	b.n	8016e88 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8016e1e:	7bfb      	ldrb	r3, [r7, #15]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d001      	beq.n	8016e28 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016e24:	2305      	movs	r3, #5
 8016e26:	e02f      	b.n	8016e88 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8016e28:	7bbb      	ldrb	r3, [r7, #14]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d001      	beq.n	8016e32 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016e2e:	2304      	movs	r3, #4
 8016e30:	e02a      	b.n	8016e88 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016e32:	4b17      	ldr	r3, [pc, #92]	@ (8016e90 <RegionAS923ChannelAdd+0x134>)
 8016e34:	6819      	ldr	r1, [r3, #0]
 8016e36:	7b7a      	ldrb	r2, [r7, #13]
 8016e38:	4613      	mov	r3, r2
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	4413      	add	r3, r2
 8016e3e:	009b      	lsls	r3, r3, #2
 8016e40:	18c8      	adds	r0, r1, r3
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	220c      	movs	r2, #12
 8016e48:	4619      	mov	r1, r3
 8016e4a:	f001 f806 	bl	8017e5a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8016e4e:	4b10      	ldr	r3, [pc, #64]	@ (8016e90 <RegionAS923ChannelAdd+0x134>)
 8016e50:	6819      	ldr	r1, [r3, #0]
 8016e52:	7b7a      	ldrb	r2, [r7, #13]
 8016e54:	4613      	mov	r3, r2
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	4413      	add	r3, r2
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	440b      	add	r3, r1
 8016e5e:	3309      	adds	r3, #9
 8016e60:	2200      	movs	r2, #0
 8016e62:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016e64:	4b0a      	ldr	r3, [pc, #40]	@ (8016e90 <RegionAS923ChannelAdd+0x134>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8016e6c:	b21a      	sxth	r2, r3
 8016e6e:	7b7b      	ldrb	r3, [r7, #13]
 8016e70:	2101      	movs	r1, #1
 8016e72:	fa01 f303 	lsl.w	r3, r1, r3
 8016e76:	b21b      	sxth	r3, r3
 8016e78:	4313      	orrs	r3, r2
 8016e7a:	b21a      	sxth	r2, r3
 8016e7c:	4b04      	ldr	r3, [pc, #16]	@ (8016e90 <RegionAS923ChannelAdd+0x134>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	b292      	uxth	r2, r2
 8016e82:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8016e86:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	20001bdc 	.word	0x20001bdc

08016e94 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8016ea2:	7dfb      	ldrb	r3, [r7, #23]
 8016ea4:	2b01      	cmp	r3, #1
 8016ea6:	d801      	bhi.n	8016eac <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	e016      	b.n	8016eda <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016eac:	4b0d      	ldr	r3, [pc, #52]	@ (8016ee4 <RegionAS923ChannelsRemove+0x50>)
 8016eae:	6819      	ldr	r1, [r3, #0]
 8016eb0:	7dfa      	ldrb	r2, [r7, #23]
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	009b      	lsls	r3, r3, #2
 8016eba:	440b      	add	r3, r1
 8016ebc:	461a      	mov	r2, r3
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	6013      	str	r3, [r2, #0]
 8016ec2:	6053      	str	r3, [r2, #4]
 8016ec4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8016ec6:	4b07      	ldr	r3, [pc, #28]	@ (8016ee4 <RegionAS923ChannelsRemove+0x50>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016ece:	7df9      	ldrb	r1, [r7, #23]
 8016ed0:	2210      	movs	r2, #16
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f000 fa12 	bl	80172fc <RegionCommonChanDisable>
 8016ed8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3718      	adds	r7, #24
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	20001bdc 	.word	0x20001bdc

08016ee8 <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016ee8:	b480      	push	{r7}
 8016eea:	b085      	sub	sp, #20
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	4603      	mov	r3, r0
 8016ef0:	71fb      	strb	r3, [r7, #7]
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	71bb      	strb	r3, [r7, #6]
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8016efa:	79fb      	ldrb	r3, [r7, #7]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d10a      	bne.n	8016f16 <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8016f00:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016f08:	490b      	ldr	r1, [pc, #44]	@ (8016f38 <RegionAS923ApplyDrOffset+0x50>)
 8016f0a:	00d2      	lsls	r2, r2, #3
 8016f0c:	440a      	add	r2, r1
 8016f0e:	4413      	add	r3, r2
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	73fb      	strb	r3, [r7, #15]
 8016f14:	e009      	b.n	8016f2a <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8016f16:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016f1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016f1e:	4907      	ldr	r1, [pc, #28]	@ (8016f3c <RegionAS923ApplyDrOffset+0x54>)
 8016f20:	00d2      	lsls	r2, r2, #3
 8016f22:	440a      	add	r2, r1
 8016f24:	4413      	add	r3, r2
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8016f2a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3714      	adds	r7, #20
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bc80      	pop	{r7}
 8016f34:	4770      	bx	lr
 8016f36:	bf00      	nop
 8016f38:	080203d0 	.word	0x080203d0
 8016f3c:	08020410 	.word	0x08020410

08016f40 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016f40:	b480      	push	{r7}
 8016f42:	b087      	sub	sp, #28
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	4608      	mov	r0, r1
 8016f4a:	4639      	mov	r1, r7
 8016f4c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016f50:	4603      	mov	r3, r0
 8016f52:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	881b      	ldrh	r3, [r3, #0]
 8016f58:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016f5a:	7afb      	ldrb	r3, [r7, #11]
 8016f5c:	f083 0301 	eor.w	r3, r3, #1
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d01b      	beq.n	8016f9e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016f66:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016f6a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016f72:	d202      	bcs.n	8016f7a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016f74:	2364      	movs	r3, #100	@ 0x64
 8016f76:	82bb      	strh	r3, [r7, #20]
 8016f78:	e00b      	b.n	8016f92 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016f80:	4293      	cmp	r3, r2
 8016f82:	d803      	bhi.n	8016f8c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016f88:	82bb      	strh	r3, [r7, #20]
 8016f8a:	e002      	b.n	8016f92 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016f8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016f90:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016f92:	8aba      	ldrh	r2, [r7, #20]
 8016f94:	8afb      	ldrh	r3, [r7, #22]
 8016f96:	4293      	cmp	r3, r2
 8016f98:	bf38      	it	cc
 8016f9a:	4613      	movcc	r3, r2
 8016f9c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016f9e:	8afb      	ldrh	r3, [r7, #22]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d101      	bne.n	8016fa8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016fa8:	8afb      	ldrh	r3, [r7, #22]
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	371c      	adds	r7, #28
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bc80      	pop	{r7}
 8016fb2:	4770      	bx	lr

08016fb4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b08e      	sub	sp, #56	@ 0x38
 8016fb8:	af02      	add	r7, sp, #8
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	4608      	mov	r0, r1
 8016fbe:	4639      	mov	r1, r7
 8016fc0:	e881 000c 	stmia.w	r1, {r2, r3}
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	881b      	ldrh	r3, [r3, #0]
 8016fcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016fce:	4b4b      	ldr	r3, [pc, #300]	@ (80170fc <SetMaxTimeCredits+0x148>)
 8016fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016fd2:	463b      	mov	r3, r7
 8016fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016fd8:	f004 fb76 	bl	801b6c8 <SysTimeToMs>
 8016fdc:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8016fde:	f107 0314 	add.w	r3, r7, #20
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	601a      	str	r2, [r3, #0]
 8016fe6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016fe8:	7af9      	ldrb	r1, [r7, #11]
 8016fea:	463b      	mov	r3, r7
 8016fec:	cb0c      	ldmia	r3, {r2, r3}
 8016fee:	68f8      	ldr	r0, [r7, #12]
 8016ff0:	f7ff ffa6 	bl	8016f40 <GetDutyCycle>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8016ff8:	7afb      	ldrb	r3, [r7, #11]
 8016ffa:	f083 0301 	eor.w	r3, r3, #1
 8016ffe:	b2db      	uxtb	r3, r3
 8017000:	2b00      	cmp	r3, #0
 8017002:	d062      	beq.n	80170ca <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017004:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017006:	2b64      	cmp	r3, #100	@ 0x64
 8017008:	d105      	bne.n	8017016 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801700a:	4b3c      	ldr	r3, [pc, #240]	@ (80170fc <SetMaxTimeCredits+0x148>)
 801700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017012:	609a      	str	r2, [r3, #8]
 8017014:	e00b      	b.n	801702e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801701c:	d105      	bne.n	801702a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801701e:	4b38      	ldr	r3, [pc, #224]	@ (8017100 <SetMaxTimeCredits+0x14c>)
 8017020:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017026:	609a      	str	r2, [r3, #8]
 8017028:	e001      	b.n	801702e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801702a:	4b36      	ldr	r3, [pc, #216]	@ (8017104 <SetMaxTimeCredits+0x150>)
 801702c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	689a      	ldr	r2, [r3, #8]
 8017032:	f107 031c 	add.w	r3, r7, #28
 8017036:	4611      	mov	r1, r2
 8017038:	4618      	mov	r0, r3
 801703a:	f004 fb6d 	bl	801b718 <SysTimeFromMs>
 801703e:	f107 0014 	add.w	r0, r7, #20
 8017042:	6a3b      	ldr	r3, [r7, #32]
 8017044:	9300      	str	r3, [sp, #0]
 8017046:	69fb      	ldr	r3, [r7, #28]
 8017048:	463a      	mov	r2, r7
 801704a:	ca06      	ldmia	r2, {r1, r2}
 801704c:	f004 fa7d 	bl	801b54a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017050:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017054:	f083 0301 	eor.w	r3, r3, #1
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	d006      	beq.n	801706c <SetMaxTimeCredits+0xb8>
 801705e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017062:	f083 0301 	eor.w	r3, r3, #1
 8017066:	b2db      	uxtb	r3, r3
 8017068:	2b00      	cmp	r3, #0
 801706a:	d108      	bne.n	801707e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017072:	429a      	cmp	r2, r3
 8017074:	d103      	bne.n	801707e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017076:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017078:	4a23      	ldr	r2, [pc, #140]	@ (8017108 <SetMaxTimeCredits+0x154>)
 801707a:	4293      	cmp	r3, r2
 801707c:	d92f      	bls.n	80170de <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017082:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	4a21      	ldr	r2, [pc, #132]	@ (801710c <SetMaxTimeCredits+0x158>)
 8017088:	4293      	cmp	r3, r2
 801708a:	d928      	bls.n	80170de <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8017092:	3b30      	subs	r3, #48	@ 0x30
 8017094:	4a1e      	ldr	r2, [pc, #120]	@ (8017110 <SetMaxTimeCredits+0x15c>)
 8017096:	fba2 2303 	umull	r2, r3, r2, r3
 801709a:	0c1b      	lsrs	r3, r3, #16
 801709c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	4a1c      	ldr	r2, [pc, #112]	@ (8017114 <SetMaxTimeCredits+0x160>)
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80170ae:	3330      	adds	r3, #48	@ 0x30
 80170b0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80170b6:	f107 0314 	add.w	r3, r7, #20
 80170ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170be:	f004 fb03 	bl	801b6c8 <SysTimeToMs>
 80170c2:	4602      	mov	r2, r0
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	609a      	str	r2, [r3, #8]
 80170c8:	e009      	b.n	80170de <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80170ca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80170ce:	f083 0301 	eor.w	r3, r3, #1
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d002      	beq.n	80170de <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80170dc:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d102      	bne.n	80170ec <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80170ea:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80170f0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80170f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3730      	adds	r7, #48	@ 0x30
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	001b7740 	.word	0x001b7740
 8017100:	0112a880 	.word	0x0112a880
 8017104:	02932e00 	.word	0x02932e00
 8017108:	0001517f 	.word	0x0001517f
 801710c:	0001ec2f 	.word	0x0001ec2f
 8017110:	c22e4507 	.word	0xc22e4507
 8017114:	00015180 	.word	0x00015180

08017118 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b086      	sub	sp, #24
 801711c:	af02      	add	r7, sp, #8
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	4608      	mov	r0, r1
 8017122:	4611      	mov	r1, r2
 8017124:	461a      	mov	r2, r3
 8017126:	4603      	mov	r3, r0
 8017128:	70fb      	strb	r3, [r7, #3]
 801712a:	460b      	mov	r3, r1
 801712c:	70bb      	strb	r3, [r7, #2]
 801712e:	4613      	mov	r3, r2
 8017130:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017132:	78f9      	ldrb	r1, [r7, #3]
 8017134:	787b      	ldrb	r3, [r7, #1]
 8017136:	9301      	str	r3, [sp, #4]
 8017138:	78bb      	ldrb	r3, [r7, #2]
 801713a:	9300      	str	r3, [sp, #0]
 801713c:	f107 0318 	add.w	r3, r7, #24
 8017140:	cb0c      	ldmia	r3, {r2, r3}
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f7ff ff36 	bl	8016fb4 <SetMaxTimeCredits>
 8017148:	4603      	mov	r3, r0
 801714a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801714c:	78fb      	ldrb	r3, [r7, #3]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00a      	beq.n	8017168 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	4618      	mov	r0, r3
 8017158:	f005 f8f0 	bl	801c33c <UTIL_TIMER_GetElapsedTime>
 801715c:	4602      	mov	r2, r0
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	441a      	add	r2, r3
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	68da      	ldr	r2, [r3, #12]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	691b      	ldr	r3, [r3, #16]
 8017170:	429a      	cmp	r2, r3
 8017172:	d903      	bls.n	801717c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	691a      	ldr	r2, [r3, #16]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6a3a      	ldr	r2, [r7, #32]
 8017180:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017182:	89fb      	ldrh	r3, [r7, #14]
}
 8017184:	4618      	mov	r0, r3
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}

0801718c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801718c:	b480      	push	{r7}
 801718e:	b085      	sub	sp, #20
 8017190:	af00      	add	r7, sp, #0
 8017192:	4603      	mov	r3, r0
 8017194:	460a      	mov	r2, r1
 8017196:	80fb      	strh	r3, [r7, #6]
 8017198:	4613      	mov	r3, r2
 801719a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801719c:	2300      	movs	r3, #0
 801719e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80171a0:	2300      	movs	r3, #0
 80171a2:	73bb      	strb	r3, [r7, #14]
 80171a4:	e011      	b.n	80171ca <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80171a6:	88fa      	ldrh	r2, [r7, #6]
 80171a8:	7bbb      	ldrb	r3, [r7, #14]
 80171aa:	2101      	movs	r1, #1
 80171ac:	fa01 f303 	lsl.w	r3, r1, r3
 80171b0:	401a      	ands	r2, r3
 80171b2:	7bbb      	ldrb	r3, [r7, #14]
 80171b4:	2101      	movs	r1, #1
 80171b6:	fa01 f303 	lsl.w	r3, r1, r3
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d102      	bne.n	80171c4 <CountChannels+0x38>
        {
            nbActiveBits++;
 80171be:	7bfb      	ldrb	r3, [r7, #15]
 80171c0:	3301      	adds	r3, #1
 80171c2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80171c4:	7bbb      	ldrb	r3, [r7, #14]
 80171c6:	3301      	adds	r3, #1
 80171c8:	73bb      	strb	r3, [r7, #14]
 80171ca:	7bba      	ldrb	r2, [r7, #14]
 80171cc:	797b      	ldrb	r3, [r7, #5]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d3e9      	bcc.n	80171a6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3714      	adds	r7, #20
 80171d8:	46bd      	mov	sp, r7
 80171da:	bc80      	pop	{r7}
 80171dc:	4770      	bx	lr

080171de <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80171de:	b580      	push	{r7, lr}
 80171e0:	b084      	sub	sp, #16
 80171e2:	af00      	add	r7, sp, #0
 80171e4:	6039      	str	r1, [r7, #0]
 80171e6:	4611      	mov	r1, r2
 80171e8:	461a      	mov	r2, r3
 80171ea:	4603      	mov	r3, r0
 80171ec:	71fb      	strb	r3, [r7, #7]
 80171ee:	460b      	mov	r3, r1
 80171f0:	71bb      	strb	r3, [r7, #6]
 80171f2:	4613      	mov	r3, r2
 80171f4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80171f6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80171fa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80171fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017202:	4618      	mov	r0, r3
 8017204:	f000 f85d 	bl	80172c2 <RegionCommonValueInRange>
 8017208:	4603      	mov	r3, r0
 801720a:	2b00      	cmp	r3, #0
 801720c:	d101      	bne.n	8017212 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801720e:	2300      	movs	r3, #0
 8017210:	e053      	b.n	80172ba <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017212:	2300      	movs	r3, #0
 8017214:	73fb      	strb	r3, [r7, #15]
 8017216:	2300      	movs	r3, #0
 8017218:	73bb      	strb	r3, [r7, #14]
 801721a:	e049      	b.n	80172b0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801721c:	2300      	movs	r3, #0
 801721e:	737b      	strb	r3, [r7, #13]
 8017220:	e03d      	b.n	801729e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017222:	7bbb      	ldrb	r3, [r7, #14]
 8017224:	005b      	lsls	r3, r3, #1
 8017226:	683a      	ldr	r2, [r7, #0]
 8017228:	4413      	add	r3, r2
 801722a:	881b      	ldrh	r3, [r3, #0]
 801722c:	461a      	mov	r2, r3
 801722e:	7b7b      	ldrb	r3, [r7, #13]
 8017230:	fa42 f303 	asr.w	r3, r2, r3
 8017234:	f003 0301 	and.w	r3, r3, #1
 8017238:	2b00      	cmp	r3, #0
 801723a:	d02d      	beq.n	8017298 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801723c:	7bfa      	ldrb	r2, [r7, #15]
 801723e:	7b7b      	ldrb	r3, [r7, #13]
 8017240:	4413      	add	r3, r2
 8017242:	461a      	mov	r2, r3
 8017244:	4613      	mov	r3, r2
 8017246:	005b      	lsls	r3, r3, #1
 8017248:	4413      	add	r3, r2
 801724a:	009b      	lsls	r3, r3, #2
 801724c:	461a      	mov	r2, r3
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	4413      	add	r3, r2
 8017252:	7a1b      	ldrb	r3, [r3, #8]
 8017254:	f343 0303 	sbfx	r3, r3, #0, #4
 8017258:	b25b      	sxtb	r3, r3
 801725a:	f003 030f 	and.w	r3, r3, #15
 801725e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017260:	7bfa      	ldrb	r2, [r7, #15]
 8017262:	7b7b      	ldrb	r3, [r7, #13]
 8017264:	4413      	add	r3, r2
 8017266:	461a      	mov	r2, r3
 8017268:	4613      	mov	r3, r2
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	4413      	add	r3, r2
 801726e:	009b      	lsls	r3, r3, #2
 8017270:	461a      	mov	r2, r3
 8017272:	69fb      	ldr	r3, [r7, #28]
 8017274:	4413      	add	r3, r2
 8017276:	7a1b      	ldrb	r3, [r3, #8]
 8017278:	f343 1303 	sbfx	r3, r3, #4, #4
 801727c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801727e:	f003 030f 	and.w	r3, r3, #15
 8017282:	b25a      	sxtb	r2, r3
 8017284:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017288:	4618      	mov	r0, r3
 801728a:	f000 f81a 	bl	80172c2 <RegionCommonValueInRange>
 801728e:	4603      	mov	r3, r0
 8017290:	2b01      	cmp	r3, #1
 8017292:	d101      	bne.n	8017298 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017294:	2301      	movs	r3, #1
 8017296:	e010      	b.n	80172ba <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017298:	7b7b      	ldrb	r3, [r7, #13]
 801729a:	3301      	adds	r3, #1
 801729c:	737b      	strb	r3, [r7, #13]
 801729e:	7b7b      	ldrb	r3, [r7, #13]
 80172a0:	2b0f      	cmp	r3, #15
 80172a2:	d9be      	bls.n	8017222 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80172a4:	7bfb      	ldrb	r3, [r7, #15]
 80172a6:	3310      	adds	r3, #16
 80172a8:	73fb      	strb	r3, [r7, #15]
 80172aa:	7bbb      	ldrb	r3, [r7, #14]
 80172ac:	3301      	adds	r3, #1
 80172ae:	73bb      	strb	r3, [r7, #14]
 80172b0:	7bfa      	ldrb	r2, [r7, #15]
 80172b2:	79fb      	ldrb	r3, [r7, #7]
 80172b4:	429a      	cmp	r2, r3
 80172b6:	d3b1      	bcc.n	801721c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80172b8:	2300      	movs	r3, #0
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}

080172c2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80172c2:	b480      	push	{r7}
 80172c4:	b083      	sub	sp, #12
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	4603      	mov	r3, r0
 80172ca:	71fb      	strb	r3, [r7, #7]
 80172cc:	460b      	mov	r3, r1
 80172ce:	71bb      	strb	r3, [r7, #6]
 80172d0:	4613      	mov	r3, r2
 80172d2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80172d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80172d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80172dc:	429a      	cmp	r2, r3
 80172de:	db07      	blt.n	80172f0 <RegionCommonValueInRange+0x2e>
 80172e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80172e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80172e8:	429a      	cmp	r2, r3
 80172ea:	dc01      	bgt.n	80172f0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80172ec:	2301      	movs	r3, #1
 80172ee:	e000      	b.n	80172f2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	370c      	adds	r7, #12
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bc80      	pop	{r7}
 80172fa:	4770      	bx	lr

080172fc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80172fc:	b480      	push	{r7}
 80172fe:	b085      	sub	sp, #20
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	460b      	mov	r3, r1
 8017306:	70fb      	strb	r3, [r7, #3]
 8017308:	4613      	mov	r3, r2
 801730a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801730c:	78fb      	ldrb	r3, [r7, #3]
 801730e:	091b      	lsrs	r3, r3, #4
 8017310:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017312:	78bb      	ldrb	r3, [r7, #2]
 8017314:	091b      	lsrs	r3, r3, #4
 8017316:	b2db      	uxtb	r3, r3
 8017318:	7bfa      	ldrb	r2, [r7, #15]
 801731a:	429a      	cmp	r2, r3
 801731c:	d803      	bhi.n	8017326 <RegionCommonChanDisable+0x2a>
 801731e:	78fa      	ldrb	r2, [r7, #3]
 8017320:	78bb      	ldrb	r3, [r7, #2]
 8017322:	429a      	cmp	r2, r3
 8017324:	d301      	bcc.n	801732a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017326:	2300      	movs	r3, #0
 8017328:	e017      	b.n	801735a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801732a:	7bfb      	ldrb	r3, [r7, #15]
 801732c:	005b      	lsls	r3, r3, #1
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	4413      	add	r3, r2
 8017332:	881b      	ldrh	r3, [r3, #0]
 8017334:	b21a      	sxth	r2, r3
 8017336:	78fb      	ldrb	r3, [r7, #3]
 8017338:	f003 030f 	and.w	r3, r3, #15
 801733c:	2101      	movs	r1, #1
 801733e:	fa01 f303 	lsl.w	r3, r1, r3
 8017342:	b21b      	sxth	r3, r3
 8017344:	43db      	mvns	r3, r3
 8017346:	b21b      	sxth	r3, r3
 8017348:	4013      	ands	r3, r2
 801734a:	b219      	sxth	r1, r3
 801734c:	7bfb      	ldrb	r3, [r7, #15]
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	687a      	ldr	r2, [r7, #4]
 8017352:	4413      	add	r3, r2
 8017354:	b28a      	uxth	r2, r1
 8017356:	801a      	strh	r2, [r3, #0]

    return true;
 8017358:	2301      	movs	r3, #1
}
 801735a:	4618      	mov	r0, r3
 801735c:	3714      	adds	r7, #20
 801735e:	46bd      	mov	sp, r7
 8017360:	bc80      	pop	{r7}
 8017362:	4770      	bx	lr

08017364 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b084      	sub	sp, #16
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	460b      	mov	r3, r1
 801736e:	70fb      	strb	r3, [r7, #3]
 8017370:	4613      	mov	r3, r2
 8017372:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017374:	2300      	movs	r3, #0
 8017376:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d101      	bne.n	8017382 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801737e:	2300      	movs	r3, #0
 8017380:	e018      	b.n	80173b4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017382:	78fb      	ldrb	r3, [r7, #3]
 8017384:	73bb      	strb	r3, [r7, #14]
 8017386:	e010      	b.n	80173aa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017388:	7bbb      	ldrb	r3, [r7, #14]
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	687a      	ldr	r2, [r7, #4]
 801738e:	4413      	add	r3, r2
 8017390:	881b      	ldrh	r3, [r3, #0]
 8017392:	2110      	movs	r1, #16
 8017394:	4618      	mov	r0, r3
 8017396:	f7ff fef9 	bl	801718c <CountChannels>
 801739a:	4603      	mov	r3, r0
 801739c:	461a      	mov	r2, r3
 801739e:	7bfb      	ldrb	r3, [r7, #15]
 80173a0:	4413      	add	r3, r2
 80173a2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80173a4:	7bbb      	ldrb	r3, [r7, #14]
 80173a6:	3301      	adds	r3, #1
 80173a8:	73bb      	strb	r3, [r7, #14]
 80173aa:	7bba      	ldrb	r2, [r7, #14]
 80173ac:	78bb      	ldrb	r3, [r7, #2]
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d3ea      	bcc.n	8017388 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80173b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3710      	adds	r7, #16
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80173bc:	b480      	push	{r7}
 80173be:	b087      	sub	sp, #28
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	4613      	mov	r3, r2
 80173c8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d016      	beq.n	80173fe <RegionCommonChanMaskCopy+0x42>
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d013      	beq.n	80173fe <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80173d6:	2300      	movs	r3, #0
 80173d8:	75fb      	strb	r3, [r7, #23]
 80173da:	e00c      	b.n	80173f6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80173dc:	7dfb      	ldrb	r3, [r7, #23]
 80173de:	005b      	lsls	r3, r3, #1
 80173e0:	68ba      	ldr	r2, [r7, #8]
 80173e2:	441a      	add	r2, r3
 80173e4:	7dfb      	ldrb	r3, [r7, #23]
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	68f9      	ldr	r1, [r7, #12]
 80173ea:	440b      	add	r3, r1
 80173ec:	8812      	ldrh	r2, [r2, #0]
 80173ee:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80173f0:	7dfb      	ldrb	r3, [r7, #23]
 80173f2:	3301      	adds	r3, #1
 80173f4:	75fb      	strb	r3, [r7, #23]
 80173f6:	7dfa      	ldrb	r2, [r7, #23]
 80173f8:	79fb      	ldrb	r3, [r7, #7]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	d3ee      	bcc.n	80173dc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80173fe:	bf00      	nop
 8017400:	371c      	adds	r7, #28
 8017402:	46bd      	mov	sp, r7
 8017404:	bc80      	pop	{r7}
 8017406:	4770      	bx	lr

08017408 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017408:	b082      	sub	sp, #8
 801740a:	b580      	push	{r7, lr}
 801740c:	b086      	sub	sp, #24
 801740e:	af00      	add	r7, sp, #0
 8017410:	60f8      	str	r0, [r7, #12]
 8017412:	60b9      	str	r1, [r7, #8]
 8017414:	627b      	str	r3, [r7, #36]	@ 0x24
 8017416:	4613      	mov	r3, r2
 8017418:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801741a:	79f9      	ldrb	r1, [r7, #7]
 801741c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017420:	cb0c      	ldmia	r3, {r2, r3}
 8017422:	68f8      	ldr	r0, [r7, #12]
 8017424:	f7ff fd8c 	bl	8016f40 <GetDutyCycle>
 8017428:	4603      	mov	r3, r0
 801742a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	68da      	ldr	r2, [r3, #12]
 8017430:	8afb      	ldrh	r3, [r7, #22]
 8017432:	68b9      	ldr	r1, [r7, #8]
 8017434:	fb01 f303 	mul.w	r3, r1, r3
 8017438:	429a      	cmp	r2, r3
 801743a:	d909      	bls.n	8017450 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	68da      	ldr	r2, [r3, #12]
 8017440:	8afb      	ldrh	r3, [r7, #22]
 8017442:	68b9      	ldr	r1, [r7, #8]
 8017444:	fb01 f303 	mul.w	r3, r1, r3
 8017448:	1ad2      	subs	r2, r2, r3
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801744e:	e002      	b.n	8017456 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2200      	movs	r2, #0
 8017454:	60da      	str	r2, [r3, #12]
}
 8017456:	bf00      	nop
 8017458:	3718      	adds	r7, #24
 801745a:	46bd      	mov	sp, r7
 801745c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017460:	b002      	add	sp, #8
 8017462:	4770      	bx	lr

08017464 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017466:	b08f      	sub	sp, #60	@ 0x3c
 8017468:	af04      	add	r7, sp, #16
 801746a:	6039      	str	r1, [r7, #0]
 801746c:	4611      	mov	r1, r2
 801746e:	461a      	mov	r2, r3
 8017470:	4603      	mov	r3, r0
 8017472:	71fb      	strb	r3, [r7, #7]
 8017474:	460b      	mov	r3, r1
 8017476:	71bb      	strb	r3, [r7, #6]
 8017478:	4613      	mov	r3, r2
 801747a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801747c:	f04f 33ff 	mov.w	r3, #4294967295
 8017480:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017482:	f004 ff49 	bl	801c318 <UTIL_TIMER_GetCurrentTime>
 8017486:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017488:	2300      	movs	r3, #0
 801748a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801748c:	2301      	movs	r3, #1
 801748e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017490:	2300      	movs	r3, #0
 8017492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017496:	2300      	movs	r3, #0
 8017498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801749c:	e0ba      	b.n	8017614 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801749e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80174a2:	4613      	mov	r3, r2
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	4413      	add	r3, r2
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	461a      	mov	r2, r3
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	189c      	adds	r4, r3, r2
 80174b0:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80174b4:	797a      	ldrb	r2, [r7, #5]
 80174b6:	79fd      	ldrb	r5, [r7, #7]
 80174b8:	69fb      	ldr	r3, [r7, #28]
 80174ba:	9302      	str	r3, [sp, #8]
 80174bc:	46ec      	mov	ip, sp
 80174be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80174c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174ca:	4633      	mov	r3, r6
 80174cc:	4629      	mov	r1, r5
 80174ce:	4620      	mov	r0, r4
 80174d0:	f7ff fe22 	bl	8017118 <UpdateTimeCredits>
 80174d4:	4603      	mov	r3, r0
 80174d6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80174d8:	8afa      	ldrh	r2, [r7, #22]
 80174da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80174dc:	fb02 f303 	mul.w	r3, r2, r3
 80174e0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80174e2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80174e6:	4613      	mov	r3, r2
 80174e8:	005b      	lsls	r3, r3, #1
 80174ea:	4413      	add	r3, r2
 80174ec:	00db      	lsls	r3, r3, #3
 80174ee:	461a      	mov	r2, r3
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	4413      	add	r3, r2
 80174f4:	68db      	ldr	r3, [r3, #12]
 80174f6:	69ba      	ldr	r2, [r7, #24]
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d308      	bcc.n	801750e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80174fc:	797b      	ldrb	r3, [r7, #5]
 80174fe:	f083 0301 	eor.w	r3, r3, #1
 8017502:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017504:	2b00      	cmp	r3, #0
 8017506:	d013      	beq.n	8017530 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017508:	79fb      	ldrb	r3, [r7, #7]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d010      	beq.n	8017530 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801750e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017512:	4613      	mov	r3, r2
 8017514:	005b      	lsls	r3, r3, #1
 8017516:	4413      	add	r3, r2
 8017518:	00db      	lsls	r3, r3, #3
 801751a:	461a      	mov	r2, r3
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	4413      	add	r3, r2
 8017520:	2201      	movs	r2, #1
 8017522:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017524:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017528:	3301      	adds	r3, #1
 801752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801752e:	e06c      	b.n	801760a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017530:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017534:	4613      	mov	r3, r2
 8017536:	005b      	lsls	r3, r3, #1
 8017538:	4413      	add	r3, r2
 801753a:	00db      	lsls	r3, r3, #3
 801753c:	461a      	mov	r2, r3
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	4413      	add	r3, r2
 8017542:	2200      	movs	r2, #0
 8017544:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017546:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801754a:	4613      	mov	r3, r2
 801754c:	005b      	lsls	r3, r3, #1
 801754e:	4413      	add	r3, r2
 8017550:	00db      	lsls	r3, r3, #3
 8017552:	461a      	mov	r2, r3
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	4413      	add	r3, r2
 8017558:	691b      	ldr	r3, [r3, #16]
 801755a:	69ba      	ldr	r2, [r7, #24]
 801755c:	429a      	cmp	r2, r3
 801755e:	d215      	bcs.n	801758c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017560:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	00db      	lsls	r3, r3, #3
 801756c:	461a      	mov	r2, r3
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	4413      	add	r3, r2
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	69ba      	ldr	r2, [r7, #24]
 8017576:	1ad3      	subs	r3, r2, r3
 8017578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801757a:	4293      	cmp	r3, r2
 801757c:	bf28      	it	cs
 801757e:	4613      	movcs	r3, r2
 8017580:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017586:	3301      	adds	r3, #1
 8017588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801758c:	79fb      	ldrb	r3, [r7, #7]
 801758e:	f083 0301 	eor.w	r3, r3, #1
 8017592:	b2db      	uxtb	r3, r3
 8017594:	2b00      	cmp	r3, #0
 8017596:	d038      	beq.n	801760a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017598:	2300      	movs	r3, #0
 801759a:	60fb      	str	r3, [r7, #12]
 801759c:	2300      	movs	r3, #0
 801759e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80175a0:	8afb      	ldrh	r3, [r7, #22]
 80175a2:	2b64      	cmp	r3, #100	@ 0x64
 80175a4:	d103      	bne.n	80175ae <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80175a6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80175aa:	60fb      	str	r3, [r7, #12]
 80175ac:	e009      	b.n	80175c2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80175ae:	8afb      	ldrh	r3, [r7, #22]
 80175b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80175b4:	d103      	bne.n	80175be <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80175b6:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80175ba:	60fb      	str	r3, [r7, #12]
 80175bc:	e001      	b.n	80175c2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80175be:	4b1e      	ldr	r3, [pc, #120]	@ (8017638 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80175c0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80175c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175c4:	4a1c      	ldr	r2, [pc, #112]	@ (8017638 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80175c6:	4293      	cmp	r3, r2
 80175c8:	d90e      	bls.n	80175e8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80175ca:	68fa      	ldr	r2, [r7, #12]
 80175cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175ce:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80175d2:	3b30      	subs	r3, #48	@ 0x30
 80175d4:	4919      	ldr	r1, [pc, #100]	@ (801763c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80175d6:	fba1 1303 	umull	r1, r3, r1, r3
 80175da:	0c1b      	lsrs	r3, r3, #16
 80175dc:	3301      	adds	r3, #1
 80175de:	4918      	ldr	r1, [pc, #96]	@ (8017640 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80175e0:	fb01 f303 	mul.w	r3, r1, r3
 80175e4:	4413      	add	r3, r2
 80175e6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80175e8:	f107 000c 	add.w	r0, r7, #12
 80175ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80175ee:	9300      	str	r3, [sp, #0]
 80175f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175f2:	f107 020c 	add.w	r2, r7, #12
 80175f6:	ca06      	ldmia	r2, {r1, r2}
 80175f8:	f003 ffa7 	bl	801b54a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80175fc:	f107 030c 	add.w	r3, r7, #12
 8017600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017604:	f004 f860 	bl	801b6c8 <SysTimeToMs>
 8017608:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801760a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801760e:	3301      	adds	r3, #1
 8017610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017614:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017618:	79bb      	ldrb	r3, [r7, #6]
 801761a:	429a      	cmp	r2, r3
 801761c:	f4ff af3f 	bcc.w	801749e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017620:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017624:	2b00      	cmp	r3, #0
 8017626:	d102      	bne.n	801762e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017628:	f04f 33ff 	mov.w	r3, #4294967295
 801762c:	e000      	b.n	8017630 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017630:	4618      	mov	r0, r3
 8017632:	372c      	adds	r7, #44	@ 0x2c
 8017634:	46bd      	mov	sp, r7
 8017636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017638:	0001ec30 	.word	0x0001ec30
 801763c:	c22e4507 	.word	0xc22e4507
 8017640:	00015180 	.word	0x00015180

08017644 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017644:	b480      	push	{r7}
 8017646:	b085      	sub	sp, #20
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801764e:	2300      	movs	r3, #0
 8017650:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	781b      	ldrb	r3, [r3, #0]
 8017656:	2b03      	cmp	r3, #3
 8017658:	d13f      	bne.n	80176da <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	3301      	adds	r3, #1
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	b25a      	sxtb	r2, r3
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801766c:	f003 030f 	and.w	r3, r3, #15
 8017670:	b25a      	sxtb	r2, r3
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801767c:	b2db      	uxtb	r3, r3
 801767e:	091b      	lsrs	r3, r3, #4
 8017680:	b2db      	uxtb	r3, r3
 8017682:	b25a      	sxtb	r2, r3
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	3302      	adds	r3, #2
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	461a      	mov	r2, r3
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	889b      	ldrh	r3, [r3, #4]
 8017698:	b21a      	sxth	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	3303      	adds	r3, #3
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	021b      	lsls	r3, r3, #8
 80176a2:	b21b      	sxth	r3, r3
 80176a4:	4313      	orrs	r3, r2
 80176a6:	b21b      	sxth	r3, r3
 80176a8:	b29a      	uxth	r2, r3
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	791a      	ldrb	r2, [r3, #4]
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	091b      	lsrs	r3, r3, #4
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	f003 0307 	and.w	r3, r3, #7
 80176c2:	b2da      	uxtb	r2, r3
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	f003 030f 	and.w	r3, r3, #15
 80176d0:	b2da      	uxtb	r2, r3
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80176d6:	2305      	movs	r3, #5
 80176d8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80176da:	7bfb      	ldrb	r3, [r7, #15]
}
 80176dc:	4618      	mov	r0, r3
 80176de:	3714      	adds	r7, #20
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bc80      	pop	{r7}
 80176e4:	4770      	bx	lr

080176e6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80176e6:	b5b0      	push	{r4, r5, r7, lr}
 80176e8:	b088      	sub	sp, #32
 80176ea:	af02      	add	r7, sp, #8
 80176ec:	60f8      	str	r0, [r7, #12]
 80176ee:	60b9      	str	r1, [r7, #8]
 80176f0:	607a      	str	r2, [r7, #4]
 80176f2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	791b      	ldrb	r3, [r3, #4]
 80176f8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	799b      	ldrb	r3, [r3, #6]
 80176fe:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	79db      	ldrb	r3, [r3, #7]
 8017704:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	7a1b      	ldrb	r3, [r3, #8]
 801770a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	795b      	ldrb	r3, [r3, #5]
 8017710:	f083 0301 	eor.w	r3, r3, #1
 8017714:	b2db      	uxtb	r3, r3
 8017716:	2b00      	cmp	r3, #0
 8017718:	d008      	beq.n	801772c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	7adb      	ldrb	r3, [r3, #11]
 801771e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	7a5b      	ldrb	r3, [r3, #9]
 8017724:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	7a9b      	ldrb	r3, [r3, #10]
 801772a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801772c:	7dfb      	ldrb	r3, [r7, #23]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d04a      	beq.n	80177c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017732:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017736:	2b0f      	cmp	r3, #15
 8017738:	d103      	bne.n	8017742 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	7a5b      	ldrb	r3, [r3, #9]
 801773e:	75bb      	strb	r3, [r7, #22]
 8017740:	e01d      	b.n	801777e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	7b18      	ldrb	r0, [r3, #12]
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	6919      	ldr	r1, [r3, #16]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017756:	68fa      	ldr	r2, [r7, #12]
 8017758:	6992      	ldr	r2, [r2, #24]
 801775a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801775e:	9201      	str	r2, [sp, #4]
 8017760:	9300      	str	r3, [sp, #0]
 8017762:	462b      	mov	r3, r5
 8017764:	4622      	mov	r2, r4
 8017766:	f7ff fd3a 	bl	80171de <RegionCommonChanVerifyDr>
 801776a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801776c:	f083 0301 	eor.w	r3, r3, #1
 8017770:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017772:	2b00      	cmp	r3, #0
 8017774:	d003      	beq.n	801777e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017776:	7dfb      	ldrb	r3, [r7, #23]
 8017778:	f023 0302 	bic.w	r3, r3, #2
 801777c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801777e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017782:	2b0f      	cmp	r3, #15
 8017784:	d103      	bne.n	801778e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	7a9b      	ldrb	r3, [r3, #10]
 801778a:	757b      	strb	r3, [r7, #21]
 801778c:	e01c      	b.n	80177c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801779a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801779e:	4618      	mov	r0, r3
 80177a0:	f7ff fd8f 	bl	80172c2 <RegionCommonValueInRange>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d10e      	bne.n	80177c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80177b0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	da03      	bge.n	80177c0 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	7f5b      	ldrb	r3, [r3, #29]
 80177bc:	757b      	strb	r3, [r7, #21]
 80177be:	e003      	b.n	80177c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80177c0:	7dfb      	ldrb	r3, [r7, #23]
 80177c2:	f023 0304 	bic.w	r3, r3, #4
 80177c6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80177c8:	7dfb      	ldrb	r3, [r7, #23]
 80177ca:	2b07      	cmp	r3, #7
 80177cc:	d105      	bne.n	80177da <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80177ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d101      	bne.n	80177da <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80177d6:	2301      	movs	r3, #1
 80177d8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	7dba      	ldrb	r2, [r7, #22]
 80177de:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	7d7a      	ldrb	r2, [r7, #21]
 80177e4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80177e6:	7d3a      	ldrb	r2, [r7, #20]
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	701a      	strb	r2, [r3, #0]

    return status;
 80177ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3718      	adds	r7, #24
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080177f8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80177f8:	b480      	push	{r7}
 80177fa:	b083      	sub	sp, #12
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	6039      	str	r1, [r7, #0]
 8017802:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017804:	79fb      	ldrb	r3, [r7, #7]
 8017806:	4a06      	ldr	r2, [pc, #24]	@ (8017820 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017808:	fa02 f303 	lsl.w	r3, r2, r3
 801780c:	461a      	mov	r2, r3
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017814:	4618      	mov	r0, r3
 8017816:	370c      	adds	r7, #12
 8017818:	46bd      	mov	sp, r7
 801781a:	bc80      	pop	{r7}
 801781c:	4770      	bx	lr
 801781e:	bf00      	nop
 8017820:	000f4240 	.word	0x000f4240

08017824 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017824:	b480      	push	{r7}
 8017826:	b083      	sub	sp, #12
 8017828:	af00      	add	r7, sp, #0
 801782a:	4603      	mov	r3, r0
 801782c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801782e:	79fb      	ldrb	r3, [r7, #7]
 8017830:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017834:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017838:	4618      	mov	r0, r3
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	bc80      	pop	{r7}
 8017840:	4770      	bx	lr
	...

08017844 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017844:	b480      	push	{r7}
 8017846:	b085      	sub	sp, #20
 8017848:	af00      	add	r7, sp, #0
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	607a      	str	r2, [r7, #4]
 801784e:	603b      	str	r3, [r7, #0]
 8017850:	460b      	mov	r3, r1
 8017852:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017854:	7afa      	ldrb	r2, [r7, #11]
 8017856:	7afb      	ldrb	r3, [r7, #11]
 8017858:	3b04      	subs	r3, #4
 801785a:	4619      	mov	r1, r3
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	fb03 f101 	mul.w	r1, r3, r1
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017868:	fb00 f303 	mul.w	r3, r0, r3
 801786c:	440b      	add	r3, r1
 801786e:	005b      	lsls	r3, r3, #1
 8017870:	2b00      	cmp	r3, #0
 8017872:	d013      	beq.n	801789c <RegionCommonComputeRxWindowParameters+0x58>
 8017874:	7afb      	ldrb	r3, [r7, #11]
 8017876:	3b04      	subs	r3, #4
 8017878:	4619      	mov	r1, r3
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	fb03 f101 	mul.w	r1, r3, r1
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017886:	fb00 f303 	mul.w	r3, r0, r3
 801788a:	440b      	add	r3, r1
 801788c:	0059      	lsls	r1, r3, #1
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	440b      	add	r3, r1
 8017892:	1e59      	subs	r1, r3, #1
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	fbb1 f3f3 	udiv	r3, r1, r3
 801789a:	e00f      	b.n	80178bc <RegionCommonComputeRxWindowParameters+0x78>
 801789c:	7afb      	ldrb	r3, [r7, #11]
 801789e:	3b04      	subs	r3, #4
 80178a0:	4619      	mov	r1, r3
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	fb03 f101 	mul.w	r1, r3, r1
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80178ae:	fb00 f303 	mul.w	r3, r0, r3
 80178b2:	440b      	add	r3, r1
 80178b4:	0059      	lsls	r1, r3, #1
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80178bc:	429a      	cmp	r2, r3
 80178be:	bf38      	it	cc
 80178c0:	461a      	movcc	r2, r3
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	009b      	lsls	r3, r3, #2
 80178ca:	4619      	mov	r1, r3
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	fb02 f303 	mul.w	r3, r2, r3
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d007      	beq.n	80178ea <RegionCommonComputeRxWindowParameters+0xa6>
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	68fa      	ldr	r2, [r7, #12]
 80178e0:	fb02 f303 	mul.w	r3, r2, r3
 80178e4:	3301      	adds	r3, #1
 80178e6:	085b      	lsrs	r3, r3, #1
 80178e8:	e005      	b.n	80178f6 <RegionCommonComputeRxWindowParameters+0xb2>
 80178ea:	69bb      	ldr	r3, [r7, #24]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	68fa      	ldr	r2, [r7, #12]
 80178f0:	fb02 f303 	mul.w	r3, r2, r3
 80178f4:	085b      	lsrs	r3, r3, #1
 80178f6:	1acb      	subs	r3, r1, r3
 80178f8:	683a      	ldr	r2, [r7, #0]
 80178fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80178fe:	fb01 f202 	mul.w	r2, r1, r2
 8017902:	1a9b      	subs	r3, r3, r2
 8017904:	2b00      	cmp	r3, #0
 8017906:	dd27      	ble.n	8017958 <RegionCommonComputeRxWindowParameters+0x114>
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	4619      	mov	r1, r3
 801790e:	69bb      	ldr	r3, [r7, #24]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	68fa      	ldr	r2, [r7, #12]
 8017914:	fb02 f303 	mul.w	r3, r2, r3
 8017918:	2b00      	cmp	r3, #0
 801791a:	d007      	beq.n	801792c <RegionCommonComputeRxWindowParameters+0xe8>
 801791c:	69bb      	ldr	r3, [r7, #24]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	68fa      	ldr	r2, [r7, #12]
 8017922:	fb02 f303 	mul.w	r3, r2, r3
 8017926:	3301      	adds	r3, #1
 8017928:	085b      	lsrs	r3, r3, #1
 801792a:	e005      	b.n	8017938 <RegionCommonComputeRxWindowParameters+0xf4>
 801792c:	69bb      	ldr	r3, [r7, #24]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	68fa      	ldr	r2, [r7, #12]
 8017932:	fb02 f303 	mul.w	r3, r2, r3
 8017936:	085b      	lsrs	r3, r3, #1
 8017938:	1acb      	subs	r3, r1, r3
 801793a:	683a      	ldr	r2, [r7, #0]
 801793c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017940:	fb01 f202 	mul.w	r2, r1, r2
 8017944:	1a9b      	subs	r3, r3, r2
 8017946:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801794a:	4a19      	ldr	r2, [pc, #100]	@ (80179b0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801794c:	fb82 1203 	smull	r1, r2, r2, r3
 8017950:	1192      	asrs	r2, r2, #6
 8017952:	17db      	asrs	r3, r3, #31
 8017954:	1ad3      	subs	r3, r2, r3
 8017956:	e024      	b.n	80179a2 <RegionCommonComputeRxWindowParameters+0x15e>
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	009b      	lsls	r3, r3, #2
 801795c:	4619      	mov	r1, r3
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	68fa      	ldr	r2, [r7, #12]
 8017964:	fb02 f303 	mul.w	r3, r2, r3
 8017968:	2b00      	cmp	r3, #0
 801796a:	d007      	beq.n	801797c <RegionCommonComputeRxWindowParameters+0x138>
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	68fa      	ldr	r2, [r7, #12]
 8017972:	fb02 f303 	mul.w	r3, r2, r3
 8017976:	3301      	adds	r3, #1
 8017978:	085b      	lsrs	r3, r3, #1
 801797a:	e005      	b.n	8017988 <RegionCommonComputeRxWindowParameters+0x144>
 801797c:	69bb      	ldr	r3, [r7, #24]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	68fa      	ldr	r2, [r7, #12]
 8017982:	fb02 f303 	mul.w	r3, r2, r3
 8017986:	085b      	lsrs	r3, r3, #1
 8017988:	1acb      	subs	r3, r1, r3
 801798a:	683a      	ldr	r2, [r7, #0]
 801798c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017990:	fb01 f202 	mul.w	r2, r1, r2
 8017994:	1a9b      	subs	r3, r3, r2
 8017996:	4a06      	ldr	r2, [pc, #24]	@ (80179b0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017998:	fb82 1203 	smull	r1, r2, r2, r3
 801799c:	1192      	asrs	r2, r2, #6
 801799e:	17db      	asrs	r3, r3, #31
 80179a0:	1ad3      	subs	r3, r2, r3
 80179a2:	69fa      	ldr	r2, [r7, #28]
 80179a4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80179a6:	bf00      	nop
 80179a8:	3714      	adds	r7, #20
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bc80      	pop	{r7}
 80179ae:	4770      	bx	lr
 80179b0:	10624dd3 	.word	0x10624dd3

080179b4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b086      	sub	sp, #24
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	4603      	mov	r3, r0
 80179bc:	60b9      	str	r1, [r7, #8]
 80179be:	607a      	str	r2, [r7, #4]
 80179c0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80179c2:	2300      	movs	r3, #0
 80179c4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80179c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179ca:	005b      	lsls	r3, r3, #1
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7e9 f979 	bl	8000cc4 <__aeabi_ui2f>
 80179d2:	4603      	mov	r3, r0
 80179d4:	4619      	mov	r1, r3
 80179d6:	68b8      	ldr	r0, [r7, #8]
 80179d8:	f7e9 f8c2 	bl	8000b60 <__aeabi_fsub>
 80179dc:	4603      	mov	r3, r0
 80179de:	6879      	ldr	r1, [r7, #4]
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7e9 f8bd 	bl	8000b60 <__aeabi_fsub>
 80179e6:	4603      	mov	r3, r0
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7e8 fd85 	bl	80004f8 <__aeabi_f2d>
 80179ee:	4602      	mov	r2, r0
 80179f0:	460b      	mov	r3, r1
 80179f2:	4610      	mov	r0, r2
 80179f4:	4619      	mov	r1, r3
 80179f6:	f007 fce7 	bl	801f3c8 <floor>
 80179fa:	4602      	mov	r2, r0
 80179fc:	460b      	mov	r3, r1
 80179fe:	4610      	mov	r0, r2
 8017a00:	4619      	mov	r1, r3
 8017a02:	f7e9 f881 	bl	8000b08 <__aeabi_d2iz>
 8017a06:	4603      	mov	r3, r0
 8017a08:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3718      	adds	r7, #24
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}

08017a16 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017a16:	b590      	push	{r4, r7, lr}
 8017a18:	b087      	sub	sp, #28
 8017a1a:	af00      	add	r7, sp, #0
 8017a1c:	60f8      	str	r0, [r7, #12]
 8017a1e:	60b9      	str	r1, [r7, #8]
 8017a20:	607a      	str	r2, [r7, #4]
 8017a22:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017a24:	2300      	movs	r3, #0
 8017a26:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	757b      	strb	r3, [r7, #21]
 8017a30:	2300      	movs	r3, #0
 8017a32:	753b      	strb	r3, [r7, #20]
 8017a34:	e09c      	b.n	8017b70 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017a36:	2300      	movs	r3, #0
 8017a38:	74fb      	strb	r3, [r7, #19]
 8017a3a:	e08f      	b.n	8017b5c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	685a      	ldr	r2, [r3, #4]
 8017a40:	7d3b      	ldrb	r3, [r7, #20]
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	4413      	add	r3, r2
 8017a46:	881b      	ldrh	r3, [r3, #0]
 8017a48:	461a      	mov	r2, r3
 8017a4a:	7cfb      	ldrb	r3, [r7, #19]
 8017a4c:	fa42 f303 	asr.w	r3, r2, r3
 8017a50:	f003 0301 	and.w	r3, r3, #1
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d07e      	beq.n	8017b56 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	689a      	ldr	r2, [r3, #8]
 8017a5c:	7d79      	ldrb	r1, [r7, #21]
 8017a5e:	7cfb      	ldrb	r3, [r7, #19]
 8017a60:	440b      	add	r3, r1
 8017a62:	4619      	mov	r1, r3
 8017a64:	460b      	mov	r3, r1
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	440b      	add	r3, r1
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	4413      	add	r3, r2
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d06b      	beq.n	8017b4c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	f083 0301 	eor.w	r3, r3, #1
 8017a7c:	b2db      	uxtb	r3, r3
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d011      	beq.n	8017aa6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d00d      	beq.n	8017aa6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	695a      	ldr	r2, [r3, #20]
 8017a8e:	7d3b      	ldrb	r3, [r7, #20]
 8017a90:	005b      	lsls	r3, r3, #1
 8017a92:	4413      	add	r3, r2
 8017a94:	881b      	ldrh	r3, [r3, #0]
 8017a96:	461a      	mov	r2, r3
 8017a98:	7cfb      	ldrb	r3, [r7, #19]
 8017a9a:	fa42 f303 	asr.w	r3, r2, r3
 8017a9e:	f003 0301 	and.w	r3, r3, #1
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d054      	beq.n	8017b50 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	785b      	ldrb	r3, [r3, #1]
 8017aaa:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	689a      	ldr	r2, [r3, #8]
 8017ab0:	7d79      	ldrb	r1, [r7, #21]
 8017ab2:	7cfb      	ldrb	r3, [r7, #19]
 8017ab4:	440b      	add	r3, r1
 8017ab6:	4619      	mov	r1, r3
 8017ab8:	460b      	mov	r3, r1
 8017aba:	005b      	lsls	r3, r3, #1
 8017abc:	440b      	add	r3, r1
 8017abe:	009b      	lsls	r3, r3, #2
 8017ac0:	4413      	add	r3, r2
 8017ac2:	7a1b      	ldrb	r3, [r3, #8]
 8017ac4:	f343 0303 	sbfx	r3, r3, #0, #4
 8017ac8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017aca:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	689a      	ldr	r2, [r3, #8]
 8017ad0:	7d79      	ldrb	r1, [r7, #21]
 8017ad2:	7cfb      	ldrb	r3, [r7, #19]
 8017ad4:	440b      	add	r3, r1
 8017ad6:	4619      	mov	r1, r3
 8017ad8:	460b      	mov	r3, r1
 8017ada:	005b      	lsls	r3, r3, #1
 8017adc:	440b      	add	r3, r1
 8017ade:	009b      	lsls	r3, r3, #2
 8017ae0:	4413      	add	r3, r2
 8017ae2:	7a1b      	ldrb	r3, [r3, #8]
 8017ae4:	f343 1303 	sbfx	r3, r3, #4, #4
 8017ae8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017aea:	461a      	mov	r2, r3
 8017aec:	4621      	mov	r1, r4
 8017aee:	f7ff fbe8 	bl	80172c2 <RegionCommonValueInRange>
 8017af2:	4603      	mov	r3, r0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d02d      	beq.n	8017b54 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	68da      	ldr	r2, [r3, #12]
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	6899      	ldr	r1, [r3, #8]
 8017b00:	7d78      	ldrb	r0, [r7, #21]
 8017b02:	7cfb      	ldrb	r3, [r7, #19]
 8017b04:	4403      	add	r3, r0
 8017b06:	4618      	mov	r0, r3
 8017b08:	4603      	mov	r3, r0
 8017b0a:	005b      	lsls	r3, r3, #1
 8017b0c:	4403      	add	r3, r0
 8017b0e:	009b      	lsls	r3, r3, #2
 8017b10:	440b      	add	r3, r1
 8017b12:	7a5b      	ldrb	r3, [r3, #9]
 8017b14:	4619      	mov	r1, r3
 8017b16:	460b      	mov	r3, r1
 8017b18:	005b      	lsls	r3, r3, #1
 8017b1a:	440b      	add	r3, r1
 8017b1c:	00db      	lsls	r3, r3, #3
 8017b1e:	4413      	add	r3, r2
 8017b20:	7d1b      	ldrb	r3, [r3, #20]
 8017b22:	f083 0301 	eor.w	r3, r3, #1
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d003      	beq.n	8017b34 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017b2c:	7dbb      	ldrb	r3, [r7, #22]
 8017b2e:	3301      	adds	r3, #1
 8017b30:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017b32:	e010      	b.n	8017b56 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017b34:	7dfb      	ldrb	r3, [r7, #23]
 8017b36:	1c5a      	adds	r2, r3, #1
 8017b38:	75fa      	strb	r2, [r7, #23]
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	4413      	add	r3, r2
 8017b40:	7d79      	ldrb	r1, [r7, #21]
 8017b42:	7cfa      	ldrb	r2, [r7, #19]
 8017b44:	440a      	add	r2, r1
 8017b46:	b2d2      	uxtb	r2, r2
 8017b48:	701a      	strb	r2, [r3, #0]
 8017b4a:	e004      	b.n	8017b56 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017b4c:	bf00      	nop
 8017b4e:	e002      	b.n	8017b56 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017b50:	bf00      	nop
 8017b52:	e000      	b.n	8017b56 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017b54:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017b56:	7cfb      	ldrb	r3, [r7, #19]
 8017b58:	3301      	adds	r3, #1
 8017b5a:	74fb      	strb	r3, [r7, #19]
 8017b5c:	7cfb      	ldrb	r3, [r7, #19]
 8017b5e:	2b0f      	cmp	r3, #15
 8017b60:	f67f af6c 	bls.w	8017a3c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017b64:	7d7b      	ldrb	r3, [r7, #21]
 8017b66:	3310      	adds	r3, #16
 8017b68:	757b      	strb	r3, [r7, #21]
 8017b6a:	7d3b      	ldrb	r3, [r7, #20]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	753b      	strb	r3, [r7, #20]
 8017b70:	7d7b      	ldrb	r3, [r7, #21]
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	8a1b      	ldrh	r3, [r3, #16]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	f4ff af5c 	bcc.w	8017a36 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	7dfa      	ldrb	r2, [r7, #23]
 8017b82:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017b84:	683b      	ldr	r3, [r7, #0]
 8017b86:	7dba      	ldrb	r2, [r7, #22]
 8017b88:	701a      	strb	r2, [r3, #0]
}
 8017b8a:	bf00      	nop
 8017b8c:	371c      	adds	r7, #28
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd90      	pop	{r4, r7, pc}

08017b92 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b94:	b08b      	sub	sp, #44	@ 0x2c
 8017b96:	af04      	add	r7, sp, #16
 8017b98:	60f8      	str	r0, [r7, #12]
 8017b9a:	60b9      	str	r1, [r7, #8]
 8017b9c:	607a      	str	r2, [r7, #4]
 8017b9e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	685b      	ldr	r3, [r3, #4]
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f004 fbc9 	bl	801c33c <UTIL_TIMER_GetElapsedTime>
 8017baa:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	681a      	ldr	r2, [r3, #0]
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	1ad2      	subs	r2, r2, r3
 8017bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bb6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bba:	2201      	movs	r2, #1
 8017bbc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017bbe:	683b      	ldr	r3, [r7, #0]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d004      	beq.n	8017bd6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017bd0:	697a      	ldr	r2, [r7, #20]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d32b      	bcc.n	8017c2e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017bd6:	68bb      	ldr	r3, [r7, #8]
 8017bd8:	2200      	movs	r2, #0
 8017bda:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	69db      	ldr	r3, [r3, #28]
 8017be0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017be6:	68dd      	ldr	r5, [r3, #12]
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	7a5e      	ldrb	r6, [r3, #9]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	7d1b      	ldrb	r3, [r3, #20]
 8017bf6:	68fa      	ldr	r2, [r7, #12]
 8017bf8:	6992      	ldr	r2, [r2, #24]
 8017bfa:	9203      	str	r2, [sp, #12]
 8017bfc:	68fa      	ldr	r2, [r7, #12]
 8017bfe:	f10d 0e04 	add.w	lr, sp, #4
 8017c02:	320c      	adds	r2, #12
 8017c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c08:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	4663      	mov	r3, ip
 8017c10:	4632      	mov	r2, r6
 8017c12:	4629      	mov	r1, r5
 8017c14:	4620      	mov	r0, r4
 8017c16:	f7ff fc25 	bl	8017464 <RegionCommonUpdateBandTimeOff>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c1e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	69d8      	ldr	r0, [r3, #28]
 8017c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c26:	683a      	ldr	r2, [r7, #0]
 8017c28:	6879      	ldr	r1, [r7, #4]
 8017c2a:	f7ff fef4 	bl	8017a16 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017c2e:	683b      	ldr	r3, [r7, #0]
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d004      	beq.n	8017c40 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c38:	2200      	movs	r2, #0
 8017c3a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	e006      	b.n	8017c4e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d001      	beq.n	8017c4c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017c48:	230b      	movs	r3, #11
 8017c4a:	e000      	b.n	8017c4e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017c4c:	230c      	movs	r3, #12
    }
}
 8017c4e:	4618      	mov	r0, r3
 8017c50:	371c      	adds	r7, #28
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c56 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017c56:	b5b0      	push	{r4, r5, r7, lr}
 8017c58:	b086      	sub	sp, #24
 8017c5a:	af02      	add	r7, sp, #8
 8017c5c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f993 2000 	ldrsb.w	r2, [r3]
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d103      	bne.n	8017c7c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017c7a:	e026      	b.n	8017cca <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017c7c:	7bfb      	ldrb	r3, [r7, #15]
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d019      	beq.n	8017cc6 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	78d8      	ldrb	r0, [r3, #3]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6859      	ldr	r1, [r3, #4]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	6892      	ldr	r2, [r2, #8]
 8017caa:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017cae:	9201      	str	r2, [sp, #4]
 8017cb0:	9300      	str	r3, [sp, #0]
 8017cb2:	462b      	mov	r3, r5
 8017cb4:	4622      	mov	r2, r4
 8017cb6:	f7ff fa92 	bl	80171de <RegionCommonChanVerifyDr>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	f083 0301 	eor.w	r3, r3, #1
 8017cc0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d1da      	bne.n	8017c7c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	3710      	adds	r7, #16
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bdb0      	pop	{r4, r5, r7, pc}

08017cd2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017cd2:	b480      	push	{r7}
 8017cd4:	b083      	sub	sp, #12
 8017cd6:	af00      	add	r7, sp, #0
 8017cd8:	4603      	mov	r3, r0
 8017cda:	460a      	mov	r2, r1
 8017cdc:	71fb      	strb	r3, [r7, #7]
 8017cde:	4613      	mov	r3, r2
 8017ce0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017ce2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cea:	4293      	cmp	r3, r2
 8017cec:	bfb8      	it	lt
 8017cee:	4613      	movlt	r3, r2
 8017cf0:	b25b      	sxtb	r3, r3
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	370c      	adds	r7, #12
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bc80      	pop	{r7}
 8017cfa:	4770      	bx	lr

08017cfc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b083      	sub	sp, #12
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	009b      	lsls	r3, r3, #2
 8017d0a:	683a      	ldr	r2, [r7, #0]
 8017d0c:	4413      	add	r3, r2
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	4a07      	ldr	r2, [pc, #28]	@ (8017d30 <RegionCommonGetBandwidth+0x34>)
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d004      	beq.n	8017d20 <RegionCommonGetBandwidth+0x24>
 8017d16:	4a07      	ldr	r2, [pc, #28]	@ (8017d34 <RegionCommonGetBandwidth+0x38>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d003      	beq.n	8017d24 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	e002      	b.n	8017d26 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017d20:	2301      	movs	r3, #1
 8017d22:	e000      	b.n	8017d26 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017d24:	2302      	movs	r3, #2
    }
}
 8017d26:	4618      	mov	r0, r3
 8017d28:	370c      	adds	r7, #12
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bc80      	pop	{r7}
 8017d2e:	4770      	bx	lr
 8017d30:	0003d090 	.word	0x0003d090
 8017d34:	0007a120 	.word	0x0007a120

08017d38 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af04      	add	r7, sp, #16
 8017d3e:	4603      	mov	r3, r0
 8017d40:	6039      	str	r1, [r7, #0]
 8017d42:	71fb      	strb	r3, [r7, #7]
 8017d44:	4613      	mov	r3, r2
 8017d46:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017d48:	79fb      	ldrb	r3, [r7, #7]
 8017d4a:	2b05      	cmp	r3, #5
 8017d4c:	d810      	bhi.n	8017d70 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017d4e:	79fb      	ldrb	r3, [r7, #7]
 8017d50:	4a0f      	ldr	r2, [pc, #60]	@ (8017d90 <RegionCommonRxConfigPrint+0x58>)
 8017d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d56:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017d5a:	9202      	str	r2, [sp, #8]
 8017d5c:	683a      	ldr	r2, [r7, #0]
 8017d5e:	9201      	str	r2, [sp, #4]
 8017d60:	9300      	str	r3, [sp, #0]
 8017d62:	4b0c      	ldr	r3, [pc, #48]	@ (8017d94 <RegionCommonRxConfigPrint+0x5c>)
 8017d64:	2201      	movs	r2, #1
 8017d66:	2100      	movs	r1, #0
 8017d68:	2002      	movs	r0, #2
 8017d6a:	f004 fbc5 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017d6e:	e00a      	b.n	8017d86 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017d70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017d74:	9301      	str	r3, [sp, #4]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	9300      	str	r3, [sp, #0]
 8017d7a:	4b07      	ldr	r3, [pc, #28]	@ (8017d98 <RegionCommonRxConfigPrint+0x60>)
 8017d7c:	2201      	movs	r2, #1
 8017d7e:	2100      	movs	r1, #0
 8017d80:	2002      	movs	r0, #2
 8017d82:	f004 fbb9 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 8017d86:	bf00      	nop
 8017d88:	3708      	adds	r7, #8
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	20000128 	.word	0x20000128
 8017d94:	0801fe10 	.word	0x0801fe10
 8017d98:	0801fe30 	.word	0x0801fe30

08017d9c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af02      	add	r7, sp, #8
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	460b      	mov	r3, r1
 8017da6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017dac:	9301      	str	r3, [sp, #4]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	4b05      	ldr	r3, [pc, #20]	@ (8017dc8 <RegionCommonTxConfigPrint+0x2c>)
 8017db4:	2201      	movs	r2, #1
 8017db6:	2100      	movs	r1, #0
 8017db8:	2002      	movs	r0, #2
 8017dba:	f004 fb9d 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
}
 8017dbe:	bf00      	nop
 8017dc0:	3708      	adds	r7, #8
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
 8017dc6:	bf00      	nop
 8017dc8:	0801fe4c 	.word	0x0801fe4c

08017dcc <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017dcc:	b480      	push	{r7}
 8017dce:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8017e08 <rand1+0x3c>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8017e0c <rand1+0x40>)
 8017dd6:	fb02 f303 	mul.w	r3, r2, r3
 8017dda:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017dde:	3339      	adds	r3, #57	@ 0x39
 8017de0:	4a09      	ldr	r2, [pc, #36]	@ (8017e08 <rand1+0x3c>)
 8017de2:	6013      	str	r3, [r2, #0]
 8017de4:	4b08      	ldr	r3, [pc, #32]	@ (8017e08 <rand1+0x3c>)
 8017de6:	681a      	ldr	r2, [r3, #0]
 8017de8:	2303      	movs	r3, #3
 8017dea:	fba3 1302 	umull	r1, r3, r3, r2
 8017dee:	1ad1      	subs	r1, r2, r3
 8017df0:	0849      	lsrs	r1, r1, #1
 8017df2:	440b      	add	r3, r1
 8017df4:	0f99      	lsrs	r1, r3, #30
 8017df6:	460b      	mov	r3, r1
 8017df8:	07db      	lsls	r3, r3, #31
 8017dfa:	1a5b      	subs	r3, r3, r1
 8017dfc:	1ad1      	subs	r1, r2, r3
 8017dfe:	460b      	mov	r3, r1
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bc80      	pop	{r7}
 8017e06:	4770      	bx	lr
 8017e08:	20000140 	.word	0x20000140
 8017e0c:	41c64e6d 	.word	0x41c64e6d

08017e10 <srand1>:

void srand1( uint32_t seed )
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
    next = seed;
 8017e18:	4a03      	ldr	r2, [pc, #12]	@ (8017e28 <srand1+0x18>)
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6013      	str	r3, [r2, #0]
}
 8017e1e:	bf00      	nop
 8017e20:	370c      	adds	r7, #12
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bc80      	pop	{r7}
 8017e26:	4770      	bx	lr
 8017e28:	20000140 	.word	0x20000140

08017e2c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8017e36:	f7ff ffc9 	bl	8017dcc <rand1>
 8017e3a:	4602      	mov	r2, r0
 8017e3c:	6839      	ldr	r1, [r7, #0]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	1acb      	subs	r3, r1, r3
 8017e42:	3301      	adds	r3, #1
 8017e44:	fb92 f1f3 	sdiv	r1, r2, r3
 8017e48:	fb01 f303 	mul.w	r3, r1, r3
 8017e4c:	1ad2      	subs	r2, r2, r3
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4413      	add	r3, r2
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3708      	adds	r7, #8
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017e5a:	b480      	push	{r7}
 8017e5c:	b085      	sub	sp, #20
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	60f8      	str	r0, [r7, #12]
 8017e62:	60b9      	str	r1, [r7, #8]
 8017e64:	4613      	mov	r3, r2
 8017e66:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017e68:	e007      	b.n	8017e7a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017e6a:	68ba      	ldr	r2, [r7, #8]
 8017e6c:	1c53      	adds	r3, r2, #1
 8017e6e:	60bb      	str	r3, [r7, #8]
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	1c59      	adds	r1, r3, #1
 8017e74:	60f9      	str	r1, [r7, #12]
 8017e76:	7812      	ldrb	r2, [r2, #0]
 8017e78:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017e7a:	88fb      	ldrh	r3, [r7, #6]
 8017e7c:	1e5a      	subs	r2, r3, #1
 8017e7e:	80fa      	strh	r2, [r7, #6]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d1f2      	bne.n	8017e6a <memcpy1+0x10>
    }
}
 8017e84:	bf00      	nop
 8017e86:	bf00      	nop
 8017e88:	3714      	adds	r7, #20
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bc80      	pop	{r7}
 8017e8e:	4770      	bx	lr

08017e90 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017e90:	b480      	push	{r7}
 8017e92:	b085      	sub	sp, #20
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	4613      	mov	r3, r2
 8017e9c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017e9e:	88fb      	ldrh	r3, [r7, #6]
 8017ea0:	3b01      	subs	r3, #1
 8017ea2:	68fa      	ldr	r2, [r7, #12]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017ea8:	e007      	b.n	8017eba <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8017eaa:	68ba      	ldr	r2, [r7, #8]
 8017eac:	1c53      	adds	r3, r2, #1
 8017eae:	60bb      	str	r3, [r7, #8]
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	1e59      	subs	r1, r3, #1
 8017eb4:	60f9      	str	r1, [r7, #12]
 8017eb6:	7812      	ldrb	r2, [r2, #0]
 8017eb8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017eba:	88fb      	ldrh	r3, [r7, #6]
 8017ebc:	1e5a      	subs	r2, r3, #1
 8017ebe:	80fa      	strh	r2, [r7, #6]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d1f2      	bne.n	8017eaa <memcpyr+0x1a>
    }
}
 8017ec4:	bf00      	nop
 8017ec6:	bf00      	nop
 8017ec8:	3714      	adds	r7, #20
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bc80      	pop	{r7}
 8017ece:	4770      	bx	lr

08017ed0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b083      	sub	sp, #12
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	460b      	mov	r3, r1
 8017eda:	70fb      	strb	r3, [r7, #3]
 8017edc:	4613      	mov	r3, r2
 8017ede:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017ee0:	e004      	b.n	8017eec <memset1+0x1c>
    {
        *dst++ = value;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	1c5a      	adds	r2, r3, #1
 8017ee6:	607a      	str	r2, [r7, #4]
 8017ee8:	78fa      	ldrb	r2, [r7, #3]
 8017eea:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017eec:	883b      	ldrh	r3, [r7, #0]
 8017eee:	1e5a      	subs	r2, r3, #1
 8017ef0:	803a      	strh	r2, [r7, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d1f5      	bne.n	8017ee2 <memset1+0x12>
    }
}
 8017ef6:	bf00      	nop
 8017ef8:	bf00      	nop
 8017efa:	370c      	adds	r7, #12
 8017efc:	46bd      	mov	sp, r7
 8017efe:	bc80      	pop	{r7}
 8017f00:	4770      	bx	lr
	...

08017f04 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017f04:	b480      	push	{r7}
 8017f06:	b085      	sub	sp, #20
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017f10:	f04f 33ff 	mov.w	r3, #4294967295
 8017f14:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d101      	bne.n	8017f20 <Crc32+0x1c>
    {
        return 0;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	e026      	b.n	8017f6e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017f20:	2300      	movs	r3, #0
 8017f22:	817b      	strh	r3, [r7, #10]
 8017f24:	e01d      	b.n	8017f62 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017f26:	897b      	ldrh	r3, [r7, #10]
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	4413      	add	r3, r2
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	461a      	mov	r2, r3
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	4053      	eors	r3, r2
 8017f34:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017f36:	2300      	movs	r3, #0
 8017f38:	813b      	strh	r3, [r7, #8]
 8017f3a:	e00c      	b.n	8017f56 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	085a      	lsrs	r2, r3, #1
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f003 0301 	and.w	r3, r3, #1
 8017f46:	425b      	negs	r3, r3
 8017f48:	490b      	ldr	r1, [pc, #44]	@ (8017f78 <Crc32+0x74>)
 8017f4a:	400b      	ands	r3, r1
 8017f4c:	4053      	eors	r3, r2
 8017f4e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017f50:	893b      	ldrh	r3, [r7, #8]
 8017f52:	3301      	adds	r3, #1
 8017f54:	813b      	strh	r3, [r7, #8]
 8017f56:	893b      	ldrh	r3, [r7, #8]
 8017f58:	2b07      	cmp	r3, #7
 8017f5a:	d9ef      	bls.n	8017f3c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017f5c:	897b      	ldrh	r3, [r7, #10]
 8017f5e:	3301      	adds	r3, #1
 8017f60:	817b      	strh	r3, [r7, #10]
 8017f62:	897a      	ldrh	r2, [r7, #10]
 8017f64:	887b      	ldrh	r3, [r7, #2]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d3dd      	bcc.n	8017f26 <Crc32+0x22>
        }
    }

    return ~crc;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	43db      	mvns	r3, r3
}
 8017f6e:	4618      	mov	r0, r3
 8017f70:	3714      	adds	r7, #20
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bc80      	pop	{r7}
 8017f76:	4770      	bx	lr
 8017f78:	edb88320 	.word	0xedb88320

08017f7c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b084      	sub	sp, #16
 8017f80:	af02      	add	r7, sp, #8
 8017f82:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017f84:	4a24      	ldr	r2, [pc, #144]	@ (8018018 <RadioInit+0x9c>)
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017f8a:	4b24      	ldr	r3, [pc, #144]	@ (801801c <RadioInit+0xa0>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017f90:	4b22      	ldr	r3, [pc, #136]	@ (801801c <RadioInit+0xa0>)
 8017f92:	2200      	movs	r2, #0
 8017f94:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017f96:	4b21      	ldr	r3, [pc, #132]	@ (801801c <RadioInit+0xa0>)
 8017f98:	2200      	movs	r2, #0
 8017f9a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017f9c:	4b1f      	ldr	r3, [pc, #124]	@ (801801c <RadioInit+0xa0>)
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8017fa2:	481f      	ldr	r0, [pc, #124]	@ (8018020 <RadioInit+0xa4>)
 8017fa4:	f001 ff88 	bl	8019eb8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017fa8:	4b1c      	ldr	r3, [pc, #112]	@ (801801c <RadioInit+0xa0>)
 8017faa:	2200      	movs	r2, #0
 8017fac:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017fae:	4b1b      	ldr	r3, [pc, #108]	@ (801801c <RadioInit+0xa0>)
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017fb4:	f002 fa16 	bl	801a3e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017fb8:	2100      	movs	r1, #0
 8017fba:	2000      	movs	r0, #0
 8017fbc:	f002 fdde 	bl	801ab7c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017fc0:	2204      	movs	r2, #4
 8017fc2:	2100      	movs	r1, #0
 8017fc4:	2001      	movs	r0, #1
 8017fc6:	f002 fb9b 	bl	801a700 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017fca:	2300      	movs	r3, #0
 8017fcc:	2200      	movs	r2, #0
 8017fce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017fd2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017fd6:	f002 facb 	bl	801a570 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8017fda:	f000 fe83 	bl	8018ce4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017fde:	2300      	movs	r3, #0
 8017fe0:	9300      	str	r3, [sp, #0]
 8017fe2:	4b10      	ldr	r3, [pc, #64]	@ (8018024 <RadioInit+0xa8>)
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8017fea:	480f      	ldr	r0, [pc, #60]	@ (8018028 <RadioInit+0xac>)
 8017fec:	f003 ffd6 	bl	801bf9c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801802c <RadioInit+0xb0>)
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8017ffc:	480c      	ldr	r0, [pc, #48]	@ (8018030 <RadioInit+0xb4>)
 8017ffe:	f003 ffcd 	bl	801bf9c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018002:	4809      	ldr	r0, [pc, #36]	@ (8018028 <RadioInit+0xac>)
 8018004:	f004 f86e 	bl	801c0e4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018008:	4809      	ldr	r0, [pc, #36]	@ (8018030 <RadioInit+0xb4>)
 801800a:	f004 f86b 	bl	801c0e4 <UTIL_TIMER_Stop>
}
 801800e:	bf00      	nop
 8018010:	3708      	adds	r7, #8
 8018012:	46bd      	mov	sp, r7
 8018014:	bd80      	pop	{r7, pc}
 8018016:	bf00      	nop
 8018018:	20001ce4 	.word	0x20001ce4
 801801c:	20001ce8 	.word	0x20001ce8
 8018020:	080190cd 	.word	0x080190cd
 8018024:	08019055 	.word	0x08019055
 8018028:	20001d44 	.word	0x20001d44
 801802c:	08019069 	.word	0x08019069
 8018030:	20001d5c 	.word	0x20001d5c

08018034 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018034:	b580      	push	{r7, lr}
 8018036:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018038:	f001 ff80 	bl	8019f3c <SUBGRF_GetOperatingMode>
 801803c:	4603      	mov	r3, r0
 801803e:	2b07      	cmp	r3, #7
 8018040:	d00a      	beq.n	8018058 <RadioGetStatus+0x24>
 8018042:	2b07      	cmp	r3, #7
 8018044:	dc0a      	bgt.n	801805c <RadioGetStatus+0x28>
 8018046:	2b04      	cmp	r3, #4
 8018048:	d002      	beq.n	8018050 <RadioGetStatus+0x1c>
 801804a:	2b05      	cmp	r3, #5
 801804c:	d002      	beq.n	8018054 <RadioGetStatus+0x20>
 801804e:	e005      	b.n	801805c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018050:	2302      	movs	r3, #2
 8018052:	e004      	b.n	801805e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018054:	2301      	movs	r3, #1
 8018056:	e002      	b.n	801805e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018058:	2303      	movs	r3, #3
 801805a:	e000      	b.n	801805e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801805c:	2300      	movs	r3, #0
    }
}
 801805e:	4618      	mov	r0, r3
 8018060:	bd80      	pop	{r7, pc}
	...

08018064 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	4603      	mov	r3, r0
 801806c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801806e:	4a2a      	ldr	r2, [pc, #168]	@ (8018118 <RadioSetModem+0xb4>)
 8018070:	79fb      	ldrb	r3, [r7, #7]
 8018072:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018074:	79fb      	ldrb	r3, [r7, #7]
 8018076:	4618      	mov	r0, r3
 8018078:	f003 f943 	bl	801b302 <RFW_SetRadioModem>
    switch( modem )
 801807c:	79fb      	ldrb	r3, [r7, #7]
 801807e:	2b05      	cmp	r3, #5
 8018080:	d80e      	bhi.n	80180a0 <RadioSetModem+0x3c>
 8018082:	a201      	add	r2, pc, #4	@ (adr r2, 8018088 <RadioSetModem+0x24>)
 8018084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018088:	080180af 	.word	0x080180af
 801808c:	080180bd 	.word	0x080180bd
 8018090:	080180a1 	.word	0x080180a1
 8018094:	080180e3 	.word	0x080180e3
 8018098:	080180f1 	.word	0x080180f1
 801809c:	080180ff 	.word	0x080180ff
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80180a0:	2003      	movs	r0, #3
 80180a2:	f002 fb07 	bl	801a6b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80180a6:	4b1c      	ldr	r3, [pc, #112]	@ (8018118 <RadioSetModem+0xb4>)
 80180a8:	2200      	movs	r2, #0
 80180aa:	735a      	strb	r2, [r3, #13]
        break;
 80180ac:	e02f      	b.n	801810e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80180ae:	2000      	movs	r0, #0
 80180b0:	f002 fb00 	bl	801a6b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80180b4:	4b18      	ldr	r3, [pc, #96]	@ (8018118 <RadioSetModem+0xb4>)
 80180b6:	2200      	movs	r2, #0
 80180b8:	735a      	strb	r2, [r3, #13]
        break;
 80180ba:	e028      	b.n	801810e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80180bc:	2001      	movs	r0, #1
 80180be:	f002 faf9 	bl	801a6b4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80180c2:	4b15      	ldr	r3, [pc, #84]	@ (8018118 <RadioSetModem+0xb4>)
 80180c4:	7b5a      	ldrb	r2, [r3, #13]
 80180c6:	4b14      	ldr	r3, [pc, #80]	@ (8018118 <RadioSetModem+0xb4>)
 80180c8:	7b1b      	ldrb	r3, [r3, #12]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d01e      	beq.n	801810c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80180ce:	4b12      	ldr	r3, [pc, #72]	@ (8018118 <RadioSetModem+0xb4>)
 80180d0:	7b1a      	ldrb	r2, [r3, #12]
 80180d2:	4b11      	ldr	r3, [pc, #68]	@ (8018118 <RadioSetModem+0xb4>)
 80180d4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80180d6:	4b10      	ldr	r3, [pc, #64]	@ (8018118 <RadioSetModem+0xb4>)
 80180d8:	7b5b      	ldrb	r3, [r3, #13]
 80180da:	4618      	mov	r0, r3
 80180dc:	f000 ff84 	bl	8018fe8 <RadioSetPublicNetwork>
        }
        break;
 80180e0:	e014      	b.n	801810c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80180e2:	2002      	movs	r0, #2
 80180e4:	f002 fae6 	bl	801a6b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80180e8:	4b0b      	ldr	r3, [pc, #44]	@ (8018118 <RadioSetModem+0xb4>)
 80180ea:	2200      	movs	r2, #0
 80180ec:	735a      	strb	r2, [r3, #13]
        break;
 80180ee:	e00e      	b.n	801810e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80180f0:	2002      	movs	r0, #2
 80180f2:	f002 fadf 	bl	801a6b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80180f6:	4b08      	ldr	r3, [pc, #32]	@ (8018118 <RadioSetModem+0xb4>)
 80180f8:	2200      	movs	r2, #0
 80180fa:	735a      	strb	r2, [r3, #13]
        break;
 80180fc:	e007      	b.n	801810e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80180fe:	2000      	movs	r0, #0
 8018100:	f002 fad8 	bl	801a6b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018104:	4b04      	ldr	r3, [pc, #16]	@ (8018118 <RadioSetModem+0xb4>)
 8018106:	2200      	movs	r2, #0
 8018108:	735a      	strb	r2, [r3, #13]
        break;
 801810a:	e000      	b.n	801810e <RadioSetModem+0xaa>
        break;
 801810c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801810e:	bf00      	nop
 8018110:	3708      	adds	r7, #8
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	20001ce8 	.word	0x20001ce8

0801811c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f002 fa7f 	bl	801a628 <SUBGRF_SetRfFrequency>
}
 801812a:	bf00      	nop
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}

08018132 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018132:	b580      	push	{r7, lr}
 8018134:	b090      	sub	sp, #64	@ 0x40
 8018136:	af0a      	add	r7, sp, #40	@ 0x28
 8018138:	60f8      	str	r0, [r7, #12]
 801813a:	60b9      	str	r1, [r7, #8]
 801813c:	603b      	str	r3, [r7, #0]
 801813e:	4613      	mov	r3, r2
 8018140:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018142:	2301      	movs	r3, #1
 8018144:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018146:	2300      	movs	r3, #0
 8018148:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801814a:	2300      	movs	r3, #0
 801814c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801814e:	f000 fddc 	bl	8018d0a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018152:	2000      	movs	r0, #0
 8018154:	f7ff ff86 	bl	8018064 <RadioSetModem>

    RadioSetChannel( freq );
 8018158:	68f8      	ldr	r0, [r7, #12]
 801815a:	f7ff ffdf 	bl	801811c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801815e:	2301      	movs	r3, #1
 8018160:	9309      	str	r3, [sp, #36]	@ 0x24
 8018162:	2300      	movs	r3, #0
 8018164:	9308      	str	r3, [sp, #32]
 8018166:	2300      	movs	r3, #0
 8018168:	9307      	str	r3, [sp, #28]
 801816a:	2300      	movs	r3, #0
 801816c:	9306      	str	r3, [sp, #24]
 801816e:	2300      	movs	r3, #0
 8018170:	9305      	str	r3, [sp, #20]
 8018172:	2300      	movs	r3, #0
 8018174:	9304      	str	r3, [sp, #16]
 8018176:	2300      	movs	r3, #0
 8018178:	9303      	str	r3, [sp, #12]
 801817a:	2300      	movs	r3, #0
 801817c:	9302      	str	r3, [sp, #8]
 801817e:	2303      	movs	r3, #3
 8018180:	9301      	str	r3, [sp, #4]
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	9300      	str	r3, [sp, #0]
 8018186:	2300      	movs	r3, #0
 8018188:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801818c:	68b9      	ldr	r1, [r7, #8]
 801818e:	2000      	movs	r0, #0
 8018190:	f000 f83c 	bl	801820c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018194:	2000      	movs	r0, #0
 8018196:	f000 fdbf 	bl	8018d18 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801819a:	f000 ff53 	bl	8019044 <RadioGetWakeupTime>
 801819e:	4603      	mov	r3, r0
 80181a0:	4618      	mov	r0, r3
 80181a2:	f7ea fad9 	bl	8002758 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80181a6:	f004 f8b7 	bl	801c318 <UTIL_TIMER_GetCurrentTime>
 80181aa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80181ac:	e00d      	b.n	80181ca <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80181ae:	2000      	movs	r0, #0
 80181b0:	f000 fe9a 	bl	8018ee8 <RadioRssi>
 80181b4:	4603      	mov	r3, r0
 80181b6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80181b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80181bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	dd02      	ble.n	80181ca <RadioIsChannelFree+0x98>
        {
            status = false;
 80181c4:	2300      	movs	r3, #0
 80181c6:	75fb      	strb	r3, [r7, #23]
            break;
 80181c8:	e006      	b.n	80181d8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80181ca:	6938      	ldr	r0, [r7, #16]
 80181cc:	f004 f8b6 	bl	801c33c <UTIL_TIMER_GetElapsedTime>
 80181d0:	4602      	mov	r2, r0
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	4293      	cmp	r3, r2
 80181d6:	d8ea      	bhi.n	80181ae <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80181d8:	f000 fd97 	bl	8018d0a <RadioStandby>

    return status;
 80181dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3718      	adds	r7, #24
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}

080181e6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80181e6:	b580      	push	{r7, lr}
 80181e8:	b082      	sub	sp, #8
 80181ea:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80181ec:	2300      	movs	r3, #0
 80181ee:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80181f0:	2300      	movs	r3, #0
 80181f2:	2200      	movs	r2, #0
 80181f4:	2100      	movs	r1, #0
 80181f6:	2000      	movs	r0, #0
 80181f8:	f002 f9ba 	bl	801a570 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80181fc:	f001 ff6f 	bl	801a0de <SUBGRF_GetRandom>
 8018200:	6078      	str	r0, [r7, #4]

    return rnd;
 8018202:	687b      	ldr	r3, [r7, #4]
}
 8018204:	4618      	mov	r0, r3
 8018206:	3708      	adds	r7, #8
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b08a      	sub	sp, #40	@ 0x28
 8018210:	af00      	add	r7, sp, #0
 8018212:	60b9      	str	r1, [r7, #8]
 8018214:	607a      	str	r2, [r7, #4]
 8018216:	461a      	mov	r2, r3
 8018218:	4603      	mov	r3, r0
 801821a:	73fb      	strb	r3, [r7, #15]
 801821c:	4613      	mov	r3, r2
 801821e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018220:	4ab9      	ldr	r2, [pc, #740]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018222:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018226:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018228:	f003 f829 	bl	801b27e <RFW_DeInit>
    if( rxContinuous == true )
 801822c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018230:	2b00      	cmp	r3, #0
 8018232:	d001      	beq.n	8018238 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018234:	2300      	movs	r3, #0
 8018236:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8018238:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801823c:	2b00      	cmp	r3, #0
 801823e:	d004      	beq.n	801824a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018240:	4ab2      	ldr	r2, [pc, #712]	@ (801850c <RadioSetRxConfig+0x300>)
 8018242:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018246:	7013      	strb	r3, [r2, #0]
 8018248:	e002      	b.n	8018250 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801824a:	4bb0      	ldr	r3, [pc, #704]	@ (801850c <RadioSetRxConfig+0x300>)
 801824c:	22ff      	movs	r2, #255	@ 0xff
 801824e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018250:	7bfb      	ldrb	r3, [r7, #15]
 8018252:	2b05      	cmp	r3, #5
 8018254:	d009      	beq.n	801826a <RadioSetRxConfig+0x5e>
 8018256:	2b05      	cmp	r3, #5
 8018258:	f300 81ca 	bgt.w	80185f0 <RadioSetRxConfig+0x3e4>
 801825c:	2b00      	cmp	r3, #0
 801825e:	f000 80bf 	beq.w	80183e0 <RadioSetRxConfig+0x1d4>
 8018262:	2b01      	cmp	r3, #1
 8018264:	f000 8124 	beq.w	80184b0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018268:	e1c2      	b.n	80185f0 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801826a:	2001      	movs	r0, #1
 801826c:	f002 f87c 	bl	801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018270:	4ba5      	ldr	r3, [pc, #660]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018272:	2200      	movs	r2, #0
 8018274:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018278:	4aa3      	ldr	r2, [pc, #652]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801827e:	4ba2      	ldr	r3, [pc, #648]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018280:	2209      	movs	r2, #9
 8018282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018286:	4ba0      	ldr	r3, [pc, #640]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018288:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801828c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801828e:	68b8      	ldr	r0, [r7, #8]
 8018290:	f002 ff28 	bl	801b0e4 <SUBGRF_GetFskBandwidthRegValue>
 8018294:	4603      	mov	r3, r0
 8018296:	461a      	mov	r2, r3
 8018298:	4b9b      	ldr	r3, [pc, #620]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801829a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801829e:	4b9a      	ldr	r3, [pc, #616]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182a0:	2200      	movs	r2, #0
 80182a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80182a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80182a6:	00db      	lsls	r3, r3, #3
 80182a8:	b29a      	uxth	r2, r3
 80182aa:	4b97      	ldr	r3, [pc, #604]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80182ae:	4b96      	ldr	r3, [pc, #600]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182b0:	2200      	movs	r2, #0
 80182b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80182b4:	4b94      	ldr	r3, [pc, #592]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182b6:	2210      	movs	r2, #16
 80182b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80182ba:	4b93      	ldr	r3, [pc, #588]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182bc:	2200      	movs	r2, #0
 80182be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80182c0:	4b91      	ldr	r3, [pc, #580]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182c2:	2200      	movs	r2, #0
 80182c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80182c6:	4b91      	ldr	r3, [pc, #580]	@ (801850c <RadioSetRxConfig+0x300>)
 80182c8:	781a      	ldrb	r2, [r3, #0]
 80182ca:	4b8f      	ldr	r3, [pc, #572]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182cc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80182ce:	4b8e      	ldr	r3, [pc, #568]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182d0:	2201      	movs	r2, #1
 80182d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80182d4:	4b8c      	ldr	r3, [pc, #560]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80182d6:	2200      	movs	r2, #0
 80182d8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80182da:	2005      	movs	r0, #5
 80182dc:	f7ff fec2 	bl	8018064 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182e0:	488b      	ldr	r0, [pc, #556]	@ (8018510 <RadioSetRxConfig+0x304>)
 80182e2:	f002 fadb 	bl	801a89c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80182e6:	488b      	ldr	r0, [pc, #556]	@ (8018514 <RadioSetRxConfig+0x308>)
 80182e8:	f002 fbaa 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80182ec:	4a8a      	ldr	r2, [pc, #552]	@ (8018518 <RadioSetRxConfig+0x30c>)
 80182ee:	f107 031c 	add.w	r3, r7, #28
 80182f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80182fa:	f107 031c 	add.w	r3, r7, #28
 80182fe:	4618      	mov	r0, r3
 8018300:	f001 fe6b 	bl	8019fda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018304:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018308:	f001 feb6 	bl	801a078 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801830c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018310:	f000 fe08 	bl	8018f24 <RadioRead>
 8018314:	4603      	mov	r3, r0
 8018316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 801831a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801831e:	f023 0310 	bic.w	r3, r3, #16
 8018322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801832a:	4619      	mov	r1, r3
 801832c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018330:	f000 fde6 	bl	8018f00 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018334:	2104      	movs	r1, #4
 8018336:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 801833a:	f000 fde1 	bl	8018f00 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801833e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018342:	f000 fdef 	bl	8018f24 <RadioRead>
 8018346:	4603      	mov	r3, r0
 8018348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801834c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018350:	f023 031c 	bic.w	r3, r3, #28
 8018354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801835c:	f043 0308 	orr.w	r3, r3, #8
 8018360:	b2db      	uxtb	r3, r3
 8018362:	4619      	mov	r1, r3
 8018364:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018368:	f000 fdca 	bl	8018f00 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801836c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018370:	f000 fdd8 	bl	8018f24 <RadioRead>
 8018374:	4603      	mov	r3, r0
 8018376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801837a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801837e:	f023 0318 	bic.w	r3, r3, #24
 8018382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801838a:	f043 0318 	orr.w	r3, r3, #24
 801838e:	b2db      	uxtb	r3, r3
 8018390:	4619      	mov	r1, r3
 8018392:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018396:	f000 fdb3 	bl	8018f00 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801839a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801839e:	f000 fdc1 	bl	8018f24 <RadioRead>
 80183a2:	4603      	mov	r3, r0
 80183a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80183a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80183ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80183b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80183b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80183b8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80183bc:	b2db      	uxtb	r3, r3
 80183be:	4619      	mov	r1, r3
 80183c0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80183c4:	f000 fd9c 	bl	8018f00 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80183c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80183ca:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80183ce:	fb02 f303 	mul.w	r3, r2, r3
 80183d2:	461a      	mov	r2, r3
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80183da:	4a4b      	ldr	r2, [pc, #300]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80183dc:	6093      	str	r3, [r2, #8]
            break;
 80183de:	e108      	b.n	80185f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80183e0:	2000      	movs	r0, #0
 80183e2:	f001 ffc1 	bl	801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80183e6:	4b48      	ldr	r3, [pc, #288]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80183e8:	2200      	movs	r2, #0
 80183ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80183ee:	4a46      	ldr	r2, [pc, #280]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80183f4:	4b44      	ldr	r3, [pc, #272]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80183f6:	220b      	movs	r2, #11
 80183f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80183fc:	68b8      	ldr	r0, [r7, #8]
 80183fe:	f002 fe71 	bl	801b0e4 <SUBGRF_GetFskBandwidthRegValue>
 8018402:	4603      	mov	r3, r0
 8018404:	461a      	mov	r2, r3
 8018406:	4b40      	ldr	r3, [pc, #256]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801840c:	4b3e      	ldr	r3, [pc, #248]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801840e:	2200      	movs	r2, #0
 8018410:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018412:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018414:	00db      	lsls	r3, r3, #3
 8018416:	b29a      	uxth	r2, r3
 8018418:	4b3b      	ldr	r3, [pc, #236]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801841a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801841c:	4b3a      	ldr	r3, [pc, #232]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801841e:	2204      	movs	r2, #4
 8018420:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018422:	4b39      	ldr	r3, [pc, #228]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018424:	2218      	movs	r2, #24
 8018426:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018428:	4b37      	ldr	r3, [pc, #220]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801842a:	2200      	movs	r2, #0
 801842c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801842e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018432:	f083 0301 	eor.w	r3, r3, #1
 8018436:	b2db      	uxtb	r3, r3
 8018438:	461a      	mov	r2, r3
 801843a:	4b33      	ldr	r3, [pc, #204]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801843c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801843e:	4b33      	ldr	r3, [pc, #204]	@ (801850c <RadioSetRxConfig+0x300>)
 8018440:	781a      	ldrb	r2, [r3, #0]
 8018442:	4b31      	ldr	r3, [pc, #196]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018444:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018446:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801844a:	2b00      	cmp	r3, #0
 801844c:	d003      	beq.n	8018456 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801844e:	4b2e      	ldr	r3, [pc, #184]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018450:	22f2      	movs	r2, #242	@ 0xf2
 8018452:	75da      	strb	r2, [r3, #23]
 8018454:	e002      	b.n	801845c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018456:	4b2c      	ldr	r3, [pc, #176]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 8018458:	2201      	movs	r2, #1
 801845a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801845c:	4b2a      	ldr	r3, [pc, #168]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 801845e:	2201      	movs	r2, #1
 8018460:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018462:	f000 fc52 	bl	8018d0a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018466:	2000      	movs	r0, #0
 8018468:	f7ff fdfc 	bl	8018064 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801846c:	4828      	ldr	r0, [pc, #160]	@ (8018510 <RadioSetRxConfig+0x304>)
 801846e:	f002 fa15 	bl	801a89c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018472:	4828      	ldr	r0, [pc, #160]	@ (8018514 <RadioSetRxConfig+0x308>)
 8018474:	f002 fae4 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018478:	4a28      	ldr	r2, [pc, #160]	@ (801851c <RadioSetRxConfig+0x310>)
 801847a:	f107 0314 	add.w	r3, r7, #20
 801847e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018482:	e883 0003 	stmia.w	r3, {r0, r1}
 8018486:	f107 0314 	add.w	r3, r7, #20
 801848a:	4618      	mov	r0, r3
 801848c:	f001 fda5 	bl	8019fda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018490:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018494:	f001 fdf0 	bl	801a078 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018498:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801849a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801849e:	fb02 f303 	mul.w	r3, r2, r3
 80184a2:	461a      	mov	r2, r3
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80184aa:	4a17      	ldr	r2, [pc, #92]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184ac:	6093      	str	r3, [r2, #8]
            break;
 80184ae:	e0a0      	b.n	80185f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80184b0:	2000      	movs	r0, #0
 80184b2:	f001 ff59 	bl	801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80184b6:	4b14      	ldr	r3, [pc, #80]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184b8:	2201      	movs	r2, #1
 80184ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	b2da      	uxtb	r2, r3
 80184c2:	4b11      	ldr	r3, [pc, #68]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80184c8:	4a15      	ldr	r2, [pc, #84]	@ (8018520 <RadioSetRxConfig+0x314>)
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	4413      	add	r3, r2
 80184ce:	781a      	ldrb	r2, [r3, #0]
 80184d0:	4b0d      	ldr	r3, [pc, #52]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80184d6:	4a0c      	ldr	r2, [pc, #48]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184d8:	7bbb      	ldrb	r3, [r7, #14]
 80184da:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d105      	bne.n	80184f0 <RadioSetRxConfig+0x2e4>
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b0b      	cmp	r3, #11
 80184e8:	d008      	beq.n	80184fc <RadioSetRxConfig+0x2f0>
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	2b0c      	cmp	r3, #12
 80184ee:	d005      	beq.n	80184fc <RadioSetRxConfig+0x2f0>
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d116      	bne.n	8018524 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	2b0c      	cmp	r3, #12
 80184fa:	d113      	bne.n	8018524 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80184fc:	4b02      	ldr	r3, [pc, #8]	@ (8018508 <RadioSetRxConfig+0x2fc>)
 80184fe:	2201      	movs	r2, #1
 8018500:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018504:	e012      	b.n	801852c <RadioSetRxConfig+0x320>
 8018506:	bf00      	nop
 8018508:	20001ce8 	.word	0x20001ce8
 801850c:	20000144 	.word	0x20000144
 8018510:	20001d20 	.word	0x20001d20
 8018514:	20001cf6 	.word	0x20001cf6
 8018518:	0801fe68 	.word	0x0801fe68
 801851c:	0801fe70 	.word	0x0801fe70
 8018520:	080204d4 	.word	0x080204d4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018524:	4b35      	ldr	r3, [pc, #212]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018526:	2200      	movs	r2, #0
 8018528:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801852c:	4b33      	ldr	r3, [pc, #204]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 801852e:	2201      	movs	r2, #1
 8018530:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018532:	4b32      	ldr	r3, [pc, #200]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018534:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018538:	2b05      	cmp	r3, #5
 801853a:	d004      	beq.n	8018546 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801853c:	4b2f      	ldr	r3, [pc, #188]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 801853e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018542:	2b06      	cmp	r3, #6
 8018544:	d10a      	bne.n	801855c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018546:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018548:	2b0b      	cmp	r3, #11
 801854a:	d803      	bhi.n	8018554 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801854c:	4b2b      	ldr	r3, [pc, #172]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 801854e:	220c      	movs	r2, #12
 8018550:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018552:	e006      	b.n	8018562 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018554:	4a29      	ldr	r2, [pc, #164]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018556:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018558:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801855a:	e002      	b.n	8018562 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801855c:	4a27      	ldr	r2, [pc, #156]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 801855e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018560:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018562:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018566:	4b25      	ldr	r3, [pc, #148]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018568:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801856a:	4b25      	ldr	r3, [pc, #148]	@ (8018600 <RadioSetRxConfig+0x3f4>)
 801856c:	781a      	ldrb	r2, [r3, #0]
 801856e:	4b23      	ldr	r3, [pc, #140]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018570:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018572:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018576:	4b21      	ldr	r3, [pc, #132]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018578:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801857c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018580:	4b1e      	ldr	r3, [pc, #120]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 8018582:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018586:	f000 fbc0 	bl	8018d0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801858a:	2001      	movs	r0, #1
 801858c:	f7ff fd6a 	bl	8018064 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018590:	481c      	ldr	r0, [pc, #112]	@ (8018604 <RadioSetRxConfig+0x3f8>)
 8018592:	f002 f983 	bl	801a89c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018596:	481c      	ldr	r0, [pc, #112]	@ (8018608 <RadioSetRxConfig+0x3fc>)
 8018598:	f002 fa52 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801859c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801859e:	b2db      	uxtb	r3, r3
 80185a0:	4618      	mov	r0, r3
 80185a2:	f001 fef0 	bl	801a386 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80185a6:	4b15      	ldr	r3, [pc, #84]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 80185a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d10d      	bne.n	80185cc <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80185b0:	f240 7036 	movw	r0, #1846	@ 0x736
 80185b4:	f002 fba0 	bl	801acf8 <SUBGRF_ReadRegister>
 80185b8:	4603      	mov	r3, r0
 80185ba:	f023 0304 	bic.w	r3, r3, #4
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	4619      	mov	r1, r3
 80185c2:	f240 7036 	movw	r0, #1846	@ 0x736
 80185c6:	f002 fb83 	bl	801acd0 <SUBGRF_WriteRegister>
 80185ca:	e00c      	b.n	80185e6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80185cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80185d0:	f002 fb92 	bl	801acf8 <SUBGRF_ReadRegister>
 80185d4:	4603      	mov	r3, r0
 80185d6:	f043 0304 	orr.w	r3, r3, #4
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	4619      	mov	r1, r3
 80185de:	f240 7036 	movw	r0, #1846	@ 0x736
 80185e2:	f002 fb75 	bl	801acd0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80185e6:	4b05      	ldr	r3, [pc, #20]	@ (80185fc <RadioSetRxConfig+0x3f0>)
 80185e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185ec:	609a      	str	r2, [r3, #8]
            break;
 80185ee:	e000      	b.n	80185f2 <RadioSetRxConfig+0x3e6>
            break;
 80185f0:	bf00      	nop
    }
}
 80185f2:	bf00      	nop
 80185f4:	3728      	adds	r7, #40	@ 0x28
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	bf00      	nop
 80185fc:	20001ce8 	.word	0x20001ce8
 8018600:	20000144 	.word	0x20000144
 8018604:	20001d20 	.word	0x20001d20
 8018608:	20001cf6 	.word	0x20001cf6

0801860c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b086      	sub	sp, #24
 8018610:	af00      	add	r7, sp, #0
 8018612:	60ba      	str	r2, [r7, #8]
 8018614:	607b      	str	r3, [r7, #4]
 8018616:	4603      	mov	r3, r0
 8018618:	73fb      	strb	r3, [r7, #15]
 801861a:	460b      	mov	r3, r1
 801861c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801861e:	f002 fe2e 	bl	801b27e <RFW_DeInit>
    switch( modem )
 8018622:	7bfb      	ldrb	r3, [r7, #15]
 8018624:	2b04      	cmp	r3, #4
 8018626:	f000 80c7 	beq.w	80187b8 <RadioSetTxConfig+0x1ac>
 801862a:	2b04      	cmp	r3, #4
 801862c:	f300 80d6 	bgt.w	80187dc <RadioSetTxConfig+0x1d0>
 8018630:	2b00      	cmp	r3, #0
 8018632:	d002      	beq.n	801863a <RadioSetTxConfig+0x2e>
 8018634:	2b01      	cmp	r3, #1
 8018636:	d059      	beq.n	80186ec <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018638:	e0d0      	b.n	80187dc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801863a:	4b74      	ldr	r3, [pc, #464]	@ (801880c <RadioSetTxConfig+0x200>)
 801863c:	2200      	movs	r2, #0
 801863e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018642:	4a72      	ldr	r2, [pc, #456]	@ (801880c <RadioSetTxConfig+0x200>)
 8018644:	6a3b      	ldr	r3, [r7, #32]
 8018646:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018648:	4b70      	ldr	r3, [pc, #448]	@ (801880c <RadioSetTxConfig+0x200>)
 801864a:	220b      	movs	r2, #11
 801864c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f002 fd47 	bl	801b0e4 <SUBGRF_GetFskBandwidthRegValue>
 8018656:	4603      	mov	r3, r0
 8018658:	461a      	mov	r2, r3
 801865a:	4b6c      	ldr	r3, [pc, #432]	@ (801880c <RadioSetTxConfig+0x200>)
 801865c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018660:	4a6a      	ldr	r2, [pc, #424]	@ (801880c <RadioSetTxConfig+0x200>)
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018666:	4b69      	ldr	r3, [pc, #420]	@ (801880c <RadioSetTxConfig+0x200>)
 8018668:	2200      	movs	r2, #0
 801866a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801866c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	b29a      	uxth	r2, r3
 8018672:	4b66      	ldr	r3, [pc, #408]	@ (801880c <RadioSetTxConfig+0x200>)
 8018674:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018676:	4b65      	ldr	r3, [pc, #404]	@ (801880c <RadioSetTxConfig+0x200>)
 8018678:	2204      	movs	r2, #4
 801867a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801867c:	4b63      	ldr	r3, [pc, #396]	@ (801880c <RadioSetTxConfig+0x200>)
 801867e:	2218      	movs	r2, #24
 8018680:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018682:	4b62      	ldr	r3, [pc, #392]	@ (801880c <RadioSetTxConfig+0x200>)
 8018684:	2200      	movs	r2, #0
 8018686:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018688:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801868c:	f083 0301 	eor.w	r3, r3, #1
 8018690:	b2db      	uxtb	r3, r3
 8018692:	461a      	mov	r2, r3
 8018694:	4b5d      	ldr	r3, [pc, #372]	@ (801880c <RadioSetTxConfig+0x200>)
 8018696:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018698:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801869c:	2b00      	cmp	r3, #0
 801869e:	d003      	beq.n	80186a8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80186a0:	4b5a      	ldr	r3, [pc, #360]	@ (801880c <RadioSetTxConfig+0x200>)
 80186a2:	22f2      	movs	r2, #242	@ 0xf2
 80186a4:	75da      	strb	r2, [r3, #23]
 80186a6:	e002      	b.n	80186ae <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80186a8:	4b58      	ldr	r3, [pc, #352]	@ (801880c <RadioSetTxConfig+0x200>)
 80186aa:	2201      	movs	r2, #1
 80186ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80186ae:	4b57      	ldr	r3, [pc, #348]	@ (801880c <RadioSetTxConfig+0x200>)
 80186b0:	2201      	movs	r2, #1
 80186b2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80186b4:	f000 fb29 	bl	8018d0a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80186b8:	2000      	movs	r0, #0
 80186ba:	f7ff fcd3 	bl	8018064 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80186be:	4854      	ldr	r0, [pc, #336]	@ (8018810 <RadioSetTxConfig+0x204>)
 80186c0:	f002 f8ec 	bl	801a89c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186c4:	4853      	ldr	r0, [pc, #332]	@ (8018814 <RadioSetTxConfig+0x208>)
 80186c6:	f002 f9bb 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80186ca:	4a53      	ldr	r2, [pc, #332]	@ (8018818 <RadioSetTxConfig+0x20c>)
 80186cc:	f107 0310 	add.w	r3, r7, #16
 80186d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80186d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80186d8:	f107 0310 	add.w	r3, r7, #16
 80186dc:	4618      	mov	r0, r3
 80186de:	f001 fc7c 	bl	8019fda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80186e2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80186e6:	f001 fcc7 	bl	801a078 <SUBGRF_SetWhiteningSeed>
            break;
 80186ea:	e078      	b.n	80187de <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80186ec:	4b47      	ldr	r3, [pc, #284]	@ (801880c <RadioSetTxConfig+0x200>)
 80186ee:	2201      	movs	r2, #1
 80186f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80186f4:	6a3b      	ldr	r3, [r7, #32]
 80186f6:	b2da      	uxtb	r2, r3
 80186f8:	4b44      	ldr	r3, [pc, #272]	@ (801880c <RadioSetTxConfig+0x200>)
 80186fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80186fe:	4a47      	ldr	r2, [pc, #284]	@ (801881c <RadioSetTxConfig+0x210>)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	4413      	add	r3, r2
 8018704:	781a      	ldrb	r2, [r3, #0]
 8018706:	4b41      	ldr	r3, [pc, #260]	@ (801880c <RadioSetTxConfig+0x200>)
 8018708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801870c:	4a3f      	ldr	r2, [pc, #252]	@ (801880c <RadioSetTxConfig+0x200>)
 801870e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018712:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d105      	bne.n	8018728 <RadioSetTxConfig+0x11c>
 801871c:	6a3b      	ldr	r3, [r7, #32]
 801871e:	2b0b      	cmp	r3, #11
 8018720:	d008      	beq.n	8018734 <RadioSetTxConfig+0x128>
 8018722:	6a3b      	ldr	r3, [r7, #32]
 8018724:	2b0c      	cmp	r3, #12
 8018726:	d005      	beq.n	8018734 <RadioSetTxConfig+0x128>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2b01      	cmp	r3, #1
 801872c:	d107      	bne.n	801873e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801872e:	6a3b      	ldr	r3, [r7, #32]
 8018730:	2b0c      	cmp	r3, #12
 8018732:	d104      	bne.n	801873e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018734:	4b35      	ldr	r3, [pc, #212]	@ (801880c <RadioSetTxConfig+0x200>)
 8018736:	2201      	movs	r2, #1
 8018738:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801873c:	e003      	b.n	8018746 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801873e:	4b33      	ldr	r3, [pc, #204]	@ (801880c <RadioSetTxConfig+0x200>)
 8018740:	2200      	movs	r2, #0
 8018742:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018746:	4b31      	ldr	r3, [pc, #196]	@ (801880c <RadioSetTxConfig+0x200>)
 8018748:	2201      	movs	r2, #1
 801874a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801874c:	4b2f      	ldr	r3, [pc, #188]	@ (801880c <RadioSetTxConfig+0x200>)
 801874e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018752:	2b05      	cmp	r3, #5
 8018754:	d004      	beq.n	8018760 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018756:	4b2d      	ldr	r3, [pc, #180]	@ (801880c <RadioSetTxConfig+0x200>)
 8018758:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801875c:	2b06      	cmp	r3, #6
 801875e:	d10a      	bne.n	8018776 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018760:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018762:	2b0b      	cmp	r3, #11
 8018764:	d803      	bhi.n	801876e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018766:	4b29      	ldr	r3, [pc, #164]	@ (801880c <RadioSetTxConfig+0x200>)
 8018768:	220c      	movs	r2, #12
 801876a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801876c:	e006      	b.n	801877c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801876e:	4a27      	ldr	r2, [pc, #156]	@ (801880c <RadioSetTxConfig+0x200>)
 8018770:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018772:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018774:	e002      	b.n	801877c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018776:	4a25      	ldr	r2, [pc, #148]	@ (801880c <RadioSetTxConfig+0x200>)
 8018778:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801877a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801877c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018780:	4b22      	ldr	r3, [pc, #136]	@ (801880c <RadioSetTxConfig+0x200>)
 8018782:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018784:	4b26      	ldr	r3, [pc, #152]	@ (8018820 <RadioSetTxConfig+0x214>)
 8018786:	781a      	ldrb	r2, [r3, #0]
 8018788:	4b20      	ldr	r3, [pc, #128]	@ (801880c <RadioSetTxConfig+0x200>)
 801878a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801878c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018790:	4b1e      	ldr	r3, [pc, #120]	@ (801880c <RadioSetTxConfig+0x200>)
 8018792:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018796:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801879a:	4b1c      	ldr	r3, [pc, #112]	@ (801880c <RadioSetTxConfig+0x200>)
 801879c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80187a0:	f000 fab3 	bl	8018d0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80187a4:	2001      	movs	r0, #1
 80187a6:	f7ff fc5d 	bl	8018064 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187aa:	4819      	ldr	r0, [pc, #100]	@ (8018810 <RadioSetTxConfig+0x204>)
 80187ac:	f002 f876 	bl	801a89c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187b0:	4818      	ldr	r0, [pc, #96]	@ (8018814 <RadioSetTxConfig+0x208>)
 80187b2:	f002 f945 	bl	801aa40 <SUBGRF_SetPacketParams>
            break;
 80187b6:	e012      	b.n	80187de <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80187b8:	2004      	movs	r0, #4
 80187ba:	f7ff fc53 	bl	8018064 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80187be:	4b13      	ldr	r3, [pc, #76]	@ (801880c <RadioSetTxConfig+0x200>)
 80187c0:	2202      	movs	r2, #2
 80187c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80187c6:	4a11      	ldr	r2, [pc, #68]	@ (801880c <RadioSetTxConfig+0x200>)
 80187c8:	6a3b      	ldr	r3, [r7, #32]
 80187ca:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80187cc:	4b0f      	ldr	r3, [pc, #60]	@ (801880c <RadioSetTxConfig+0x200>)
 80187ce:	2216      	movs	r2, #22
 80187d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187d4:	480e      	ldr	r0, [pc, #56]	@ (8018810 <RadioSetTxConfig+0x204>)
 80187d6:	f002 f861 	bl	801a89c <SUBGRF_SetModulationParams>
            break;
 80187da:	e000      	b.n	80187de <RadioSetTxConfig+0x1d2>
            break;
 80187dc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80187de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f002 fb90 	bl	801af08 <SUBGRF_SetRfTxPower>
 80187e8:	4603      	mov	r3, r0
 80187ea:	461a      	mov	r2, r3
 80187ec:	4b07      	ldr	r3, [pc, #28]	@ (801880c <RadioSetTxConfig+0x200>)
 80187ee:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80187f2:	4b06      	ldr	r3, [pc, #24]	@ (801880c <RadioSetTxConfig+0x200>)
 80187f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80187f8:	4618      	mov	r0, r3
 80187fa:	f002 fd54 	bl	801b2a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80187fe:	4a03      	ldr	r2, [pc, #12]	@ (801880c <RadioSetTxConfig+0x200>)
 8018800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018802:	6053      	str	r3, [r2, #4]
}
 8018804:	bf00      	nop
 8018806:	3718      	adds	r7, #24
 8018808:	46bd      	mov	sp, r7
 801880a:	bd80      	pop	{r7, pc}
 801880c:	20001ce8 	.word	0x20001ce8
 8018810:	20001d20 	.word	0x20001d20
 8018814:	20001cf6 	.word	0x20001cf6
 8018818:	0801fe70 	.word	0x0801fe70
 801881c:	080204d4 	.word	0x080204d4
 8018820:	20000144 	.word	0x20000144

08018824 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018824:	b480      	push	{r7}
 8018826:	b083      	sub	sp, #12
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
    return true;
 801882c:	2301      	movs	r3, #1
}
 801882e:	4618      	mov	r0, r3
 8018830:	370c      	adds	r7, #12
 8018832:	46bd      	mov	sp, r7
 8018834:	bc80      	pop	{r7}
 8018836:	4770      	bx	lr

08018838 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018838:	b480      	push	{r7}
 801883a:	b085      	sub	sp, #20
 801883c:	af00      	add	r7, sp, #0
 801883e:	4603      	mov	r3, r0
 8018840:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018842:	2300      	movs	r3, #0
 8018844:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018846:	79fb      	ldrb	r3, [r7, #7]
 8018848:	2b0a      	cmp	r3, #10
 801884a:	d83e      	bhi.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
 801884c:	a201      	add	r2, pc, #4	@ (adr r2, 8018854 <RadioGetLoRaBandwidthInHz+0x1c>)
 801884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018852:	bf00      	nop
 8018854:	08018881 	.word	0x08018881
 8018858:	08018891 	.word	0x08018891
 801885c:	080188a1 	.word	0x080188a1
 8018860:	080188b1 	.word	0x080188b1
 8018864:	080188b9 	.word	0x080188b9
 8018868:	080188bf 	.word	0x080188bf
 801886c:	080188c5 	.word	0x080188c5
 8018870:	080188cb 	.word	0x080188cb
 8018874:	08018889 	.word	0x08018889
 8018878:	08018899 	.word	0x08018899
 801887c:	080188a9 	.word	0x080188a9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018880:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018884:	60fb      	str	r3, [r7, #12]
        break;
 8018886:	e020      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018888:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 801888c:	60fb      	str	r3, [r7, #12]
        break;
 801888e:	e01c      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018890:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018894:	60fb      	str	r3, [r7, #12]
        break;
 8018896:	e018      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018898:	f245 1361 	movw	r3, #20833	@ 0x5161
 801889c:	60fb      	str	r3, [r7, #12]
        break;
 801889e:	e014      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80188a0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80188a4:	60fb      	str	r3, [r7, #12]
        break;
 80188a6:	e010      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80188a8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80188ac:	60fb      	str	r3, [r7, #12]
        break;
 80188ae:	e00c      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80188b0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80188b4:	60fb      	str	r3, [r7, #12]
        break;
 80188b6:	e008      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80188b8:	4b07      	ldr	r3, [pc, #28]	@ (80188d8 <RadioGetLoRaBandwidthInHz+0xa0>)
 80188ba:	60fb      	str	r3, [r7, #12]
        break;
 80188bc:	e005      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80188be:	4b07      	ldr	r3, [pc, #28]	@ (80188dc <RadioGetLoRaBandwidthInHz+0xa4>)
 80188c0:	60fb      	str	r3, [r7, #12]
        break;
 80188c2:	e002      	b.n	80188ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80188c4:	4b06      	ldr	r3, [pc, #24]	@ (80188e0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80188c6:	60fb      	str	r3, [r7, #12]
        break;
 80188c8:	bf00      	nop
    }

    return bandwidthInHz;
 80188ca:	68fb      	ldr	r3, [r7, #12]
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	3714      	adds	r7, #20
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bc80      	pop	{r7}
 80188d4:	4770      	bx	lr
 80188d6:	bf00      	nop
 80188d8:	0001e848 	.word	0x0001e848
 80188dc:	0003d090 	.word	0x0003d090
 80188e0:	0007a120 	.word	0x0007a120

080188e4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80188e4:	b480      	push	{r7}
 80188e6:	b083      	sub	sp, #12
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
 80188ec:	4608      	mov	r0, r1
 80188ee:	4611      	mov	r1, r2
 80188f0:	461a      	mov	r2, r3
 80188f2:	4603      	mov	r3, r0
 80188f4:	70fb      	strb	r3, [r7, #3]
 80188f6:	460b      	mov	r3, r1
 80188f8:	803b      	strh	r3, [r7, #0]
 80188fa:	4613      	mov	r3, r2
 80188fc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80188fe:	883b      	ldrh	r3, [r7, #0]
 8018900:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018902:	78ba      	ldrb	r2, [r7, #2]
 8018904:	f082 0201 	eor.w	r2, r2, #1
 8018908:	b2d2      	uxtb	r2, r2
 801890a:	2a00      	cmp	r2, #0
 801890c:	d001      	beq.n	8018912 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801890e:	2208      	movs	r2, #8
 8018910:	e000      	b.n	8018914 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018912:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018914:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018916:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801891a:	7c3b      	ldrb	r3, [r7, #16]
 801891c:	7d39      	ldrb	r1, [r7, #20]
 801891e:	2900      	cmp	r1, #0
 8018920:	d001      	beq.n	8018926 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018922:	2102      	movs	r1, #2
 8018924:	e000      	b.n	8018928 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018926:	2100      	movs	r1, #0
 8018928:	440b      	add	r3, r1
 801892a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801892c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801892e:	4618      	mov	r0, r3
 8018930:	370c      	adds	r7, #12
 8018932:	46bd      	mov	sp, r7
 8018934:	bc80      	pop	{r7}
 8018936:	4770      	bx	lr

08018938 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018938:	b480      	push	{r7}
 801893a:	b08b      	sub	sp, #44	@ 0x2c
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	4611      	mov	r1, r2
 8018944:	461a      	mov	r2, r3
 8018946:	460b      	mov	r3, r1
 8018948:	71fb      	strb	r3, [r7, #7]
 801894a:	4613      	mov	r3, r2
 801894c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801894e:	79fb      	ldrb	r3, [r7, #7]
 8018950:	3304      	adds	r3, #4
 8018952:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018954:	2300      	movs	r3, #0
 8018956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	2b05      	cmp	r3, #5
 801895e:	d002      	beq.n	8018966 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018960:	68bb      	ldr	r3, [r7, #8]
 8018962:	2b06      	cmp	r3, #6
 8018964:	d104      	bne.n	8018970 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018966:	88bb      	ldrh	r3, [r7, #4]
 8018968:	2b0b      	cmp	r3, #11
 801896a:	d801      	bhi.n	8018970 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801896c:	230c      	movs	r3, #12
 801896e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d105      	bne.n	8018982 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	2b0b      	cmp	r3, #11
 801897a:	d008      	beq.n	801898e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	2b0c      	cmp	r3, #12
 8018980:	d005      	beq.n	801898e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	2b01      	cmp	r3, #1
 8018986:	d105      	bne.n	8018994 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	2b0c      	cmp	r3, #12
 801898c:	d102      	bne.n	8018994 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801898e:	2301      	movs	r3, #1
 8018990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018994:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018998:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801899a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801899e:	2a00      	cmp	r2, #0
 80189a0:	d001      	beq.n	80189a6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80189a2:	2210      	movs	r2, #16
 80189a4:	e000      	b.n	80189a8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80189a6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80189a8:	4413      	add	r3, r2
 80189aa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80189b0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80189b2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80189b6:	2a00      	cmp	r2, #0
 80189b8:	d001      	beq.n	80189be <RadioGetLoRaTimeOnAirNumerator+0x86>
 80189ba:	2200      	movs	r2, #0
 80189bc:	e000      	b.n	80189c0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80189be:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80189c0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80189c2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	2b06      	cmp	r3, #6
 80189c8:	d803      	bhi.n	80189d2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	009b      	lsls	r3, r3, #2
 80189ce:	623b      	str	r3, [r7, #32]
 80189d0:	e00e      	b.n	80189f0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80189d2:	69fb      	ldr	r3, [r7, #28]
 80189d4:	3308      	adds	r3, #8
 80189d6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80189d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d004      	beq.n	80189ea <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	3b02      	subs	r3, #2
 80189e4:	009b      	lsls	r3, r3, #2
 80189e6:	623b      	str	r3, [r7, #32]
 80189e8:	e002      	b.n	80189f0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	009b      	lsls	r3, r3, #2
 80189ee:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80189f0:	69fb      	ldr	r3, [r7, #28]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	da01      	bge.n	80189fa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80189f6:	2300      	movs	r3, #0
 80189f8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80189fa:	69fa      	ldr	r2, [r7, #28]
 80189fc:	6a3b      	ldr	r3, [r7, #32]
 80189fe:	4413      	add	r3, r2
 8018a00:	1e5a      	subs	r2, r3, #1
 8018a02:	6a3b      	ldr	r3, [r7, #32]
 8018a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a08:	697a      	ldr	r2, [r7, #20]
 8018a0a:	fb03 f202 	mul.w	r2, r3, r2
 8018a0e:	88bb      	ldrh	r3, [r7, #4]
 8018a10:	4413      	add	r3, r2
    int32_t intermediate =
 8018a12:	330c      	adds	r3, #12
 8018a14:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018a16:	68bb      	ldr	r3, [r7, #8]
 8018a18:	2b06      	cmp	r3, #6
 8018a1a:	d802      	bhi.n	8018a22 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018a1c:	69bb      	ldr	r3, [r7, #24]
 8018a1e:	3302      	adds	r3, #2
 8018a20:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018a22:	69bb      	ldr	r3, [r7, #24]
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	1c5a      	adds	r2, r3, #1
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	3b02      	subs	r3, #2
 8018a2c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	372c      	adds	r7, #44	@ 0x2c
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bc80      	pop	{r7}
 8018a38:	4770      	bx	lr
	...

08018a3c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b08a      	sub	sp, #40	@ 0x28
 8018a40:	af04      	add	r7, sp, #16
 8018a42:	60b9      	str	r1, [r7, #8]
 8018a44:	607a      	str	r2, [r7, #4]
 8018a46:	461a      	mov	r2, r3
 8018a48:	4603      	mov	r3, r0
 8018a4a:	73fb      	strb	r3, [r7, #15]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018a50:	2300      	movs	r3, #0
 8018a52:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018a54:	2301      	movs	r3, #1
 8018a56:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018a58:	7bfb      	ldrb	r3, [r7, #15]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d002      	beq.n	8018a64 <RadioTimeOnAir+0x28>
 8018a5e:	2b01      	cmp	r3, #1
 8018a60:	d017      	beq.n	8018a92 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018a62:	e035      	b.n	8018ad0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018a64:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8018a68:	8c3a      	ldrh	r2, [r7, #32]
 8018a6a:	7bb9      	ldrb	r1, [r7, #14]
 8018a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018a70:	9301      	str	r3, [sp, #4]
 8018a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018a76:	9300      	str	r3, [sp, #0]
 8018a78:	4603      	mov	r3, r0
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f7ff ff32 	bl	80188e4 <RadioGetGfskTimeOnAirNumerator>
 8018a80:	4603      	mov	r3, r0
 8018a82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018a86:	fb02 f303 	mul.w	r3, r2, r3
 8018a8a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	613b      	str	r3, [r7, #16]
        break;
 8018a90:	e01e      	b.n	8018ad0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018a92:	8c39      	ldrh	r1, [r7, #32]
 8018a94:	7bba      	ldrb	r2, [r7, #14]
 8018a96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018a9a:	9302      	str	r3, [sp, #8]
 8018a9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018aa0:	9301      	str	r3, [sp, #4]
 8018aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018aa6:	9300      	str	r3, [sp, #0]
 8018aa8:	460b      	mov	r3, r1
 8018aaa:	6879      	ldr	r1, [r7, #4]
 8018aac:	68b8      	ldr	r0, [r7, #8]
 8018aae:	f7ff ff43 	bl	8018938 <RadioGetLoRaTimeOnAirNumerator>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018ab8:	fb02 f303 	mul.w	r3, r2, r3
 8018abc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018abe:	4a0a      	ldr	r2, [pc, #40]	@ (8018ae8 <RadioTimeOnAir+0xac>)
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7ff feb6 	bl	8018838 <RadioGetLoRaBandwidthInHz>
 8018acc:	6138      	str	r0, [r7, #16]
        break;
 8018ace:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018ad0:	697a      	ldr	r2, [r7, #20]
 8018ad2:	693b      	ldr	r3, [r7, #16]
 8018ad4:	4413      	add	r3, r2
 8018ad6:	1e5a      	subs	r2, r3, #1
 8018ad8:	693b      	ldr	r3, [r7, #16]
 8018ada:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3718      	adds	r7, #24
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	080204d4 	.word	0x080204d4

08018aec <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
 8018af4:	460b      	mov	r3, r1
 8018af6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018af8:	2300      	movs	r3, #0
 8018afa:	2200      	movs	r2, #0
 8018afc:	f240 2101 	movw	r1, #513	@ 0x201
 8018b00:	f240 2001 	movw	r0, #513	@ 0x201
 8018b04:	f001 fd34 	bl	801a570 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018b08:	4b71      	ldr	r3, [pc, #452]	@ (8018cd0 <RadioSend+0x1e4>)
 8018b0a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018b0e:	2101      	movs	r1, #1
 8018b10:	4618      	mov	r0, r3
 8018b12:	f002 f9d1 	bl	801aeb8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018b16:	4b6e      	ldr	r3, [pc, #440]	@ (8018cd0 <RadioSend+0x1e4>)
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	2b01      	cmp	r3, #1
 8018b1c:	d112      	bne.n	8018b44 <RadioSend+0x58>
 8018b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8018cd0 <RadioSend+0x1e4>)
 8018b20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018b24:	2b06      	cmp	r3, #6
 8018b26:	d10d      	bne.n	8018b44 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018b28:	f640 0089 	movw	r0, #2185	@ 0x889
 8018b2c:	f002 f8e4 	bl	801acf8 <SUBGRF_ReadRegister>
 8018b30:	4603      	mov	r3, r0
 8018b32:	f023 0304 	bic.w	r3, r3, #4
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	4619      	mov	r1, r3
 8018b3a:	f640 0089 	movw	r0, #2185	@ 0x889
 8018b3e:	f002 f8c7 	bl	801acd0 <SUBGRF_WriteRegister>
 8018b42:	e00c      	b.n	8018b5e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018b44:	f640 0089 	movw	r0, #2185	@ 0x889
 8018b48:	f002 f8d6 	bl	801acf8 <SUBGRF_ReadRegister>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	f043 0304 	orr.w	r3, r3, #4
 8018b52:	b2db      	uxtb	r3, r3
 8018b54:	4619      	mov	r1, r3
 8018b56:	f640 0089 	movw	r0, #2185	@ 0x889
 8018b5a:	f002 f8b9 	bl	801acd0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8018cd0 <RadioSend+0x1e4>)
 8018b60:	781b      	ldrb	r3, [r3, #0]
 8018b62:	2b04      	cmp	r3, #4
 8018b64:	f200 80a7 	bhi.w	8018cb6 <RadioSend+0x1ca>
 8018b68:	a201      	add	r2, pc, #4	@ (adr r2, 8018b70 <RadioSend+0x84>)
 8018b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b6e:	bf00      	nop
 8018b70:	08018b9f 	.word	0x08018b9f
 8018b74:	08018b85 	.word	0x08018b85
 8018b78:	08018b9f 	.word	0x08018b9f
 8018b7c:	08018bff 	.word	0x08018bff
 8018b80:	08018c1f 	.word	0x08018c1f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018b84:	4a52      	ldr	r2, [pc, #328]	@ (8018cd0 <RadioSend+0x1e4>)
 8018b86:	78fb      	ldrb	r3, [r7, #3]
 8018b88:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b8a:	4852      	ldr	r0, [pc, #328]	@ (8018cd4 <RadioSend+0x1e8>)
 8018b8c:	f001 ff58 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018b90:	78fb      	ldrb	r3, [r7, #3]
 8018b92:	2200      	movs	r2, #0
 8018b94:	4619      	mov	r1, r3
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f001 fa0c 	bl	8019fb4 <SUBGRF_SendPayload>
            break;
 8018b9c:	e08c      	b.n	8018cb8 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018b9e:	f002 fb74 	bl	801b28a <RFW_Is_Init>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b01      	cmp	r3, #1
 8018ba6:	d11d      	bne.n	8018be4 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018ba8:	f107 020d 	add.w	r2, r7, #13
 8018bac:	78fb      	ldrb	r3, [r7, #3]
 8018bae:	4619      	mov	r1, r3
 8018bb0:	6878      	ldr	r0, [r7, #4]
 8018bb2:	f002 fb82 	bl	801b2ba <RFW_TransmitInit>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d10c      	bne.n	8018bd6 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018bbc:	7b7a      	ldrb	r2, [r7, #13]
 8018bbe:	4b44      	ldr	r3, [pc, #272]	@ (8018cd0 <RadioSend+0x1e4>)
 8018bc0:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018bc2:	4844      	ldr	r0, [pc, #272]	@ (8018cd4 <RadioSend+0x1e8>)
 8018bc4:	f001 ff3c 	bl	801aa40 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018bc8:	7b7b      	ldrb	r3, [r7, #13]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	4619      	mov	r1, r3
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f001 f9f0 	bl	8019fb4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018bd4:	e070      	b.n	8018cb8 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018bd6:	4b40      	ldr	r3, [pc, #256]	@ (8018cd8 <RadioSend+0x1ec>)
 8018bd8:	2201      	movs	r2, #1
 8018bda:	2100      	movs	r1, #0
 8018bdc:	2002      	movs	r0, #2
 8018bde:	f003 fc8b 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
 8018be2:	e072      	b.n	8018cca <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018be4:	4a3a      	ldr	r2, [pc, #232]	@ (8018cd0 <RadioSend+0x1e4>)
 8018be6:	78fb      	ldrb	r3, [r7, #3]
 8018be8:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018bea:	483a      	ldr	r0, [pc, #232]	@ (8018cd4 <RadioSend+0x1e8>)
 8018bec:	f001 ff28 	bl	801aa40 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018bf0:	78fb      	ldrb	r3, [r7, #3]
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f001 f9dc 	bl	8019fb4 <SUBGRF_SendPayload>
            break;
 8018bfc:	e05c      	b.n	8018cb8 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018bfe:	4b34      	ldr	r3, [pc, #208]	@ (8018cd0 <RadioSend+0x1e4>)
 8018c00:	2202      	movs	r2, #2
 8018c02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018c04:	4a32      	ldr	r2, [pc, #200]	@ (8018cd0 <RadioSend+0x1e4>)
 8018c06:	78fb      	ldrb	r3, [r7, #3]
 8018c08:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c0a:	4832      	ldr	r0, [pc, #200]	@ (8018cd4 <RadioSend+0x1e8>)
 8018c0c:	f001 ff18 	bl	801aa40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018c10:	78fb      	ldrb	r3, [r7, #3]
 8018c12:	2200      	movs	r2, #0
 8018c14:	4619      	mov	r1, r3
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f001 f9cc 	bl	8019fb4 <SUBGRF_SendPayload>
            break;
 8018c1c:	e04c      	b.n	8018cb8 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018c1e:	78fb      	ldrb	r3, [r7, #3]
 8018c20:	461a      	mov	r2, r3
 8018c22:	6879      	ldr	r1, [r7, #4]
 8018c24:	482d      	ldr	r0, [pc, #180]	@ (8018cdc <RadioSend+0x1f0>)
 8018c26:	f000 fcbc 	bl	80195a2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018c2a:	4b29      	ldr	r3, [pc, #164]	@ (8018cd0 <RadioSend+0x1e4>)
 8018c2c:	2202      	movs	r2, #2
 8018c2e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018c30:	78fb      	ldrb	r3, [r7, #3]
 8018c32:	3301      	adds	r3, #1
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	4b26      	ldr	r3, [pc, #152]	@ (8018cd0 <RadioSend+0x1e4>)
 8018c38:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c3a:	4826      	ldr	r0, [pc, #152]	@ (8018cd4 <RadioSend+0x1e8>)
 8018c3c:	f001 ff00 	bl	801aa40 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018c40:	2100      	movs	r1, #0
 8018c42:	20f1      	movs	r0, #241	@ 0xf1
 8018c44:	f000 f95c 	bl	8018f00 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018c48:	2100      	movs	r1, #0
 8018c4a:	20f0      	movs	r0, #240	@ 0xf0
 8018c4c:	f000 f958 	bl	8018f00 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018c50:	4b1f      	ldr	r3, [pc, #124]	@ (8018cd0 <RadioSend+0x1e4>)
 8018c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c54:	2b64      	cmp	r3, #100	@ 0x64
 8018c56:	d108      	bne.n	8018c6a <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018c58:	2170      	movs	r1, #112	@ 0x70
 8018c5a:	20f3      	movs	r0, #243	@ 0xf3
 8018c5c:	f000 f950 	bl	8018f00 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018c60:	211d      	movs	r1, #29
 8018c62:	20f2      	movs	r0, #242	@ 0xf2
 8018c64:	f000 f94c 	bl	8018f00 <RadioWrite>
 8018c68:	e007      	b.n	8018c7a <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018c6a:	21e1      	movs	r1, #225	@ 0xe1
 8018c6c:	20f3      	movs	r0, #243	@ 0xf3
 8018c6e:	f000 f947 	bl	8018f00 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018c72:	2104      	movs	r1, #4
 8018c74:	20f2      	movs	r0, #242	@ 0xf2
 8018c76:	f000 f943 	bl	8018f00 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018c7a:	78fb      	ldrb	r3, [r7, #3]
 8018c7c:	b29b      	uxth	r3, r3
 8018c7e:	00db      	lsls	r3, r3, #3
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	3302      	adds	r3, #2
 8018c84:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018c86:	89fb      	ldrh	r3, [r7, #14]
 8018c88:	0a1b      	lsrs	r3, r3, #8
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	4619      	mov	r1, r3
 8018c90:	20f4      	movs	r0, #244	@ 0xf4
 8018c92:	f000 f935 	bl	8018f00 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018c96:	89fb      	ldrh	r3, [r7, #14]
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	20f5      	movs	r0, #245	@ 0xf5
 8018c9e:	f000 f92f 	bl	8018f00 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8018ca2:	78fb      	ldrb	r3, [r7, #3]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018cac:	4619      	mov	r1, r3
 8018cae:	480b      	ldr	r0, [pc, #44]	@ (8018cdc <RadioSend+0x1f0>)
 8018cb0:	f001 f980 	bl	8019fb4 <SUBGRF_SendPayload>
            break;
 8018cb4:	e000      	b.n	8018cb8 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018cb6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018cb8:	4b05      	ldr	r3, [pc, #20]	@ (8018cd0 <RadioSend+0x1e4>)
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	4619      	mov	r1, r3
 8018cbe:	4808      	ldr	r0, [pc, #32]	@ (8018ce0 <RadioSend+0x1f4>)
 8018cc0:	f003 fa80 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018cc4:	4806      	ldr	r0, [pc, #24]	@ (8018ce0 <RadioSend+0x1f4>)
 8018cc6:	f003 f99f 	bl	801c008 <UTIL_TIMER_Start>
}
 8018cca:	3710      	adds	r7, #16
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}
 8018cd0:	20001ce8 	.word	0x20001ce8
 8018cd4:	20001cf6 	.word	0x20001cf6
 8018cd8:	0801fe78 	.word	0x0801fe78
 8018cdc:	20001be4 	.word	0x20001be4
 8018ce0:	20001d44 	.word	0x20001d44

08018ce4 <RadioSleep>:

static void RadioSleep( void )
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b082      	sub	sp, #8
 8018ce8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8018cea:	2300      	movs	r3, #0
 8018cec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018cee:	793b      	ldrb	r3, [r7, #4]
 8018cf0:	f043 0304 	orr.w	r3, r3, #4
 8018cf4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018cf6:	7938      	ldrb	r0, [r7, #4]
 8018cf8:	f001 fa38 	bl	801a16c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018cfc:	2002      	movs	r0, #2
 8018cfe:	f7e9 fd2b 	bl	8002758 <HAL_Delay>
}
 8018d02:	bf00      	nop
 8018d04:	3708      	adds	r7, #8
 8018d06:	46bd      	mov	sp, r7
 8018d08:	bd80      	pop	{r7, pc}

08018d0a <RadioStandby>:

static void RadioStandby( void )
{
 8018d0a:	b580      	push	{r7, lr}
 8018d0c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8018d0e:	2000      	movs	r0, #0
 8018d10:	f001 fa5e 	bl	801a1d0 <SUBGRF_SetStandby>
}
 8018d14:	bf00      	nop
 8018d16:	bd80      	pop	{r7, pc}

08018d18 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018d20:	f002 fab3 	bl	801b28a <RFW_Is_Init>
 8018d24:	4603      	mov	r3, r0
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d102      	bne.n	8018d30 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8018d2a:	f002 fad6 	bl	801b2da <RFW_ReceiveInit>
 8018d2e:	e007      	b.n	8018d40 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018d30:	2300      	movs	r3, #0
 8018d32:	2200      	movs	r2, #0
 8018d34:	f240 2162 	movw	r1, #610	@ 0x262
 8018d38:	f240 2062 	movw	r0, #610	@ 0x262
 8018d3c:	f001 fc18 	bl	801a570 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d006      	beq.n	8018d54 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018d46:	6879      	ldr	r1, [r7, #4]
 8018d48:	4811      	ldr	r0, [pc, #68]	@ (8018d90 <RadioRx+0x78>)
 8018d4a:	f003 fa3b 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018d4e:	4810      	ldr	r0, [pc, #64]	@ (8018d90 <RadioRx+0x78>)
 8018d50:	f003 f95a 	bl	801c008 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018d54:	4b0f      	ldr	r3, [pc, #60]	@ (8018d94 <RadioRx+0x7c>)
 8018d56:	2200      	movs	r2, #0
 8018d58:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8018d94 <RadioRx+0x7c>)
 8018d5c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018d60:	2100      	movs	r1, #0
 8018d62:	4618      	mov	r0, r3
 8018d64:	f002 f8a8 	bl	801aeb8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018d68:	4b0a      	ldr	r3, [pc, #40]	@ (8018d94 <RadioRx+0x7c>)
 8018d6a:	785b      	ldrb	r3, [r3, #1]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d004      	beq.n	8018d7a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018d70:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018d74:	f001 fa68 	bl	801a248 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018d78:	e005      	b.n	8018d86 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018d7a:	4b06      	ldr	r3, [pc, #24]	@ (8018d94 <RadioRx+0x7c>)
 8018d7c:	689b      	ldr	r3, [r3, #8]
 8018d7e:	019b      	lsls	r3, r3, #6
 8018d80:	4618      	mov	r0, r3
 8018d82:	f001 fa61 	bl	801a248 <SUBGRF_SetRx>
}
 8018d86:	bf00      	nop
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	20001d5c 	.word	0x20001d5c
 8018d94:	20001ce8 	.word	0x20001ce8

08018d98 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b082      	sub	sp, #8
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8018da0:	f002 fa73 	bl	801b28a <RFW_Is_Init>
 8018da4:	4603      	mov	r3, r0
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d102      	bne.n	8018db0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8018daa:	f002 fa96 	bl	801b2da <RFW_ReceiveInit>
 8018dae:	e007      	b.n	8018dc0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018db0:	2300      	movs	r3, #0
 8018db2:	2200      	movs	r2, #0
 8018db4:	f240 2162 	movw	r1, #610	@ 0x262
 8018db8:	f240 2062 	movw	r0, #610	@ 0x262
 8018dbc:	f001 fbd8 	bl	801a570 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d006      	beq.n	8018dd4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018dc6:	6879      	ldr	r1, [r7, #4]
 8018dc8:	4811      	ldr	r0, [pc, #68]	@ (8018e10 <RadioRxBoosted+0x78>)
 8018dca:	f003 f9fb 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018dce:	4810      	ldr	r0, [pc, #64]	@ (8018e10 <RadioRxBoosted+0x78>)
 8018dd0:	f003 f91a 	bl	801c008 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8018e14 <RadioRxBoosted+0x7c>)
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018dda:	4b0e      	ldr	r3, [pc, #56]	@ (8018e14 <RadioRxBoosted+0x7c>)
 8018ddc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018de0:	2100      	movs	r1, #0
 8018de2:	4618      	mov	r0, r3
 8018de4:	f002 f868 	bl	801aeb8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018de8:	4b0a      	ldr	r3, [pc, #40]	@ (8018e14 <RadioRxBoosted+0x7c>)
 8018dea:	785b      	ldrb	r3, [r3, #1]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d004      	beq.n	8018dfa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018df0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018df4:	f001 fa48 	bl	801a288 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8018df8:	e005      	b.n	8018e06 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8018dfa:	4b06      	ldr	r3, [pc, #24]	@ (8018e14 <RadioRxBoosted+0x7c>)
 8018dfc:	689b      	ldr	r3, [r3, #8]
 8018dfe:	019b      	lsls	r3, r3, #6
 8018e00:	4618      	mov	r0, r3
 8018e02:	f001 fa41 	bl	801a288 <SUBGRF_SetRxBoosted>
}
 8018e06:	bf00      	nop
 8018e08:	3708      	adds	r7, #8
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd80      	pop	{r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	20001d5c 	.word	0x20001d5c
 8018e14:	20001ce8 	.word	0x20001ce8

08018e18 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b082      	sub	sp, #8
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	005a      	lsls	r2, r3, #1
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	4413      	add	r3, r2
 8018e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8018e5c <RadioSetRxDutyCycle+0x44>)
 8018e2c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018e2e:	2300      	movs	r3, #0
 8018e30:	2200      	movs	r2, #0
 8018e32:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018e36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018e3a:	f001 fb99 	bl	801a570 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018e3e:	4b07      	ldr	r3, [pc, #28]	@ (8018e5c <RadioSetRxDutyCycle+0x44>)
 8018e40:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018e44:	2100      	movs	r1, #0
 8018e46:	4618      	mov	r0, r3
 8018e48:	f002 f836 	bl	801aeb8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018e4c:	6839      	ldr	r1, [r7, #0]
 8018e4e:	6878      	ldr	r0, [r7, #4]
 8018e50:	f001 fa3e 	bl	801a2d0 <SUBGRF_SetRxDutyCycle>
}
 8018e54:	bf00      	nop
 8018e56:	3708      	adds	r7, #8
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	20001ce8 	.word	0x20001ce8

08018e60 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018e64:	4b09      	ldr	r3, [pc, #36]	@ (8018e8c <RadioStartCad+0x2c>)
 8018e66:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018e6a:	2100      	movs	r1, #0
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f002 f823 	bl	801aeb8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018e72:	2300      	movs	r3, #0
 8018e74:	2200      	movs	r2, #0
 8018e76:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018e7a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018e7e:	f001 fb77 	bl	801a570 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018e82:	f001 fa51 	bl	801a328 <SUBGRF_SetCad>
}
 8018e86:	bf00      	nop
 8018e88:	bd80      	pop	{r7, pc}
 8018e8a:	bf00      	nop
 8018e8c:	20001ce8 	.word	0x20001ce8

08018e90 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	460b      	mov	r3, r1
 8018e9a:	70fb      	strb	r3, [r7, #3]
 8018e9c:	4613      	mov	r3, r2
 8018e9e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8018ea0:	883b      	ldrh	r3, [r7, #0]
 8018ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018ea6:	fb02 f303 	mul.w	r3, r2, r3
 8018eaa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f001 fbbb 	bl	801a628 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f002 f826 	bl	801af08 <SUBGRF_SetRfTxPower>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8018ec0:	7afb      	ldrb	r3, [r7, #11]
 8018ec2:	2101      	movs	r1, #1
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f001 fff7 	bl	801aeb8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018eca:	f001 fa3b 	bl	801a344 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018ece:	68f9      	ldr	r1, [r7, #12]
 8018ed0:	4804      	ldr	r0, [pc, #16]	@ (8018ee4 <RadioSetTxContinuousWave+0x54>)
 8018ed2:	f003 f977 	bl	801c1c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018ed6:	4803      	ldr	r0, [pc, #12]	@ (8018ee4 <RadioSetTxContinuousWave+0x54>)
 8018ed8:	f003 f896 	bl	801c008 <UTIL_TIMER_Start>
}
 8018edc:	bf00      	nop
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	20001d44 	.word	0x20001d44

08018ee8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	4603      	mov	r3, r0
 8018ef0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018ef2:	f001 fe5a 	bl	801abaa <SUBGRF_GetRssiInst>
 8018ef6:	4603      	mov	r3, r0
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3708      	adds	r7, #8
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}

08018f00 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b082      	sub	sp, #8
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	4603      	mov	r3, r0
 8018f08:	460a      	mov	r2, r1
 8018f0a:	80fb      	strh	r3, [r7, #6]
 8018f0c:	4613      	mov	r3, r2
 8018f0e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018f10:	797a      	ldrb	r2, [r7, #5]
 8018f12:	88fb      	ldrh	r3, [r7, #6]
 8018f14:	4611      	mov	r1, r2
 8018f16:	4618      	mov	r0, r3
 8018f18:	f001 feda 	bl	801acd0 <SUBGRF_WriteRegister>
}
 8018f1c:	bf00      	nop
 8018f1e:	3708      	adds	r7, #8
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}

08018f24 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018f2e:	88fb      	ldrh	r3, [r7, #6]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f001 fee1 	bl	801acf8 <SUBGRF_ReadRegister>
 8018f36:	4603      	mov	r3, r0
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3708      	adds	r7, #8
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}

08018f40 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	4603      	mov	r3, r0
 8018f48:	6039      	str	r1, [r7, #0]
 8018f4a:	80fb      	strh	r3, [r7, #6]
 8018f4c:	4613      	mov	r3, r2
 8018f4e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018f50:	797b      	ldrb	r3, [r7, #5]
 8018f52:	b29a      	uxth	r2, r3
 8018f54:	88fb      	ldrh	r3, [r7, #6]
 8018f56:	6839      	ldr	r1, [r7, #0]
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f001 fee1 	bl	801ad20 <SUBGRF_WriteRegisters>
}
 8018f5e:	bf00      	nop
 8018f60:	3708      	adds	r7, #8
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}

08018f66 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018f66:	b580      	push	{r7, lr}
 8018f68:	b082      	sub	sp, #8
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	6039      	str	r1, [r7, #0]
 8018f70:	80fb      	strh	r3, [r7, #6]
 8018f72:	4613      	mov	r3, r2
 8018f74:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018f76:	797b      	ldrb	r3, [r7, #5]
 8018f78:	b29a      	uxth	r2, r3
 8018f7a:	88fb      	ldrh	r3, [r7, #6]
 8018f7c:	6839      	ldr	r1, [r7, #0]
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f001 fef0 	bl	801ad64 <SUBGRF_ReadRegisters>
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b082      	sub	sp, #8
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	4603      	mov	r3, r0
 8018f94:	460a      	mov	r2, r1
 8018f96:	71fb      	strb	r3, [r7, #7]
 8018f98:	4613      	mov	r3, r2
 8018f9a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018f9c:	79fb      	ldrb	r3, [r7, #7]
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	d10a      	bne.n	8018fb8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8018fdc <RadioSetMaxPayloadLength+0x50>)
 8018fa4:	79bb      	ldrb	r3, [r7, #6]
 8018fa6:	7013      	strb	r3, [r2, #0]
 8018fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8018fdc <RadioSetMaxPayloadLength+0x50>)
 8018faa:	781a      	ldrb	r2, [r3, #0]
 8018fac:	4b0c      	ldr	r3, [pc, #48]	@ (8018fe0 <RadioSetMaxPayloadLength+0x54>)
 8018fae:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fb0:	480c      	ldr	r0, [pc, #48]	@ (8018fe4 <RadioSetMaxPayloadLength+0x58>)
 8018fb2:	f001 fd45 	bl	801aa40 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018fb6:	e00d      	b.n	8018fd4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018fb8:	4b09      	ldr	r3, [pc, #36]	@ (8018fe0 <RadioSetMaxPayloadLength+0x54>)
 8018fba:	7d5b      	ldrb	r3, [r3, #21]
 8018fbc:	2b01      	cmp	r3, #1
 8018fbe:	d109      	bne.n	8018fd4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018fc0:	4a06      	ldr	r2, [pc, #24]	@ (8018fdc <RadioSetMaxPayloadLength+0x50>)
 8018fc2:	79bb      	ldrb	r3, [r7, #6]
 8018fc4:	7013      	strb	r3, [r2, #0]
 8018fc6:	4b05      	ldr	r3, [pc, #20]	@ (8018fdc <RadioSetMaxPayloadLength+0x50>)
 8018fc8:	781a      	ldrb	r2, [r3, #0]
 8018fca:	4b05      	ldr	r3, [pc, #20]	@ (8018fe0 <RadioSetMaxPayloadLength+0x54>)
 8018fcc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fce:	4805      	ldr	r0, [pc, #20]	@ (8018fe4 <RadioSetMaxPayloadLength+0x58>)
 8018fd0:	f001 fd36 	bl	801aa40 <SUBGRF_SetPacketParams>
}
 8018fd4:	bf00      	nop
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}
 8018fdc:	20000144 	.word	0x20000144
 8018fe0:	20001ce8 	.word	0x20001ce8
 8018fe4:	20001cf6 	.word	0x20001cf6

08018fe8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	4603      	mov	r3, r0
 8018ff0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018ff2:	4a13      	ldr	r2, [pc, #76]	@ (8019040 <RadioSetPublicNetwork+0x58>)
 8018ff4:	79fb      	ldrb	r3, [r7, #7]
 8018ff6:	7313      	strb	r3, [r2, #12]
 8018ff8:	4b11      	ldr	r3, [pc, #68]	@ (8019040 <RadioSetPublicNetwork+0x58>)
 8018ffa:	7b1a      	ldrb	r2, [r3, #12]
 8018ffc:	4b10      	ldr	r3, [pc, #64]	@ (8019040 <RadioSetPublicNetwork+0x58>)
 8018ffe:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019000:	2001      	movs	r0, #1
 8019002:	f7ff f82f 	bl	8018064 <RadioSetModem>
    if( enable == true )
 8019006:	79fb      	ldrb	r3, [r7, #7]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d00a      	beq.n	8019022 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801900c:	2134      	movs	r1, #52	@ 0x34
 801900e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019012:	f001 fe5d 	bl	801acd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019016:	2144      	movs	r1, #68	@ 0x44
 8019018:	f240 7041 	movw	r0, #1857	@ 0x741
 801901c:	f001 fe58 	bl	801acd0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019020:	e009      	b.n	8019036 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019022:	2114      	movs	r1, #20
 8019024:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019028:	f001 fe52 	bl	801acd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801902c:	2124      	movs	r1, #36	@ 0x24
 801902e:	f240 7041 	movw	r0, #1857	@ 0x741
 8019032:	f001 fe4d 	bl	801acd0 <SUBGRF_WriteRegister>
}
 8019036:	bf00      	nop
 8019038:	3708      	adds	r7, #8
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	20001ce8 	.word	0x20001ce8

08019044 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019048:	f001 ff92 	bl	801af70 <SUBGRF_GetRadioWakeUpTime>
 801904c:	4603      	mov	r3, r0
 801904e:	3303      	adds	r3, #3
}
 8019050:	4618      	mov	r0, r3
 8019052:	bd80      	pop	{r7, pc}

08019054 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801905c:	f000 f80e 	bl	801907c <RadioOnTxTimeoutProcess>
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019070:	f000 f818 	bl	80190a4 <RadioOnRxTimeoutProcess>
}
 8019074:	bf00      	nop
 8019076:	3708      	adds	r7, #8
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019080:	4b07      	ldr	r3, [pc, #28]	@ (80190a0 <RadioOnTxTimeoutProcess+0x24>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d008      	beq.n	801909a <RadioOnTxTimeoutProcess+0x1e>
 8019088:	4b05      	ldr	r3, [pc, #20]	@ (80190a0 <RadioOnTxTimeoutProcess+0x24>)
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	685b      	ldr	r3, [r3, #4]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d003      	beq.n	801909a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019092:	4b03      	ldr	r3, [pc, #12]	@ (80190a0 <RadioOnTxTimeoutProcess+0x24>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	4798      	blx	r3
    }
}
 801909a:	bf00      	nop
 801909c:	bd80      	pop	{r7, pc}
 801909e:	bf00      	nop
 80190a0:	20001ce4 	.word	0x20001ce4

080190a4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80190a8:	4b07      	ldr	r3, [pc, #28]	@ (80190c8 <RadioOnRxTimeoutProcess+0x24>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d008      	beq.n	80190c2 <RadioOnRxTimeoutProcess+0x1e>
 80190b0:	4b05      	ldr	r3, [pc, #20]	@ (80190c8 <RadioOnRxTimeoutProcess+0x24>)
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	68db      	ldr	r3, [r3, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d003      	beq.n	80190c2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80190ba:	4b03      	ldr	r3, [pc, #12]	@ (80190c8 <RadioOnRxTimeoutProcess+0x24>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	68db      	ldr	r3, [r3, #12]
 80190c0:	4798      	blx	r3
    }
}
 80190c2:	bf00      	nop
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	bf00      	nop
 80190c8:	20001ce4 	.word	0x20001ce4

080190cc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b082      	sub	sp, #8
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	4603      	mov	r3, r0
 80190d4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80190d6:	4a05      	ldr	r2, [pc, #20]	@ (80190ec <RadioOnDioIrq+0x20>)
 80190d8:	88fb      	ldrh	r3, [r7, #6]
 80190da:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80190de:	f000 f807 	bl	80190f0 <RadioIrqProcess>
}
 80190e2:	bf00      	nop
 80190e4:	3708      	adds	r7, #8
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bd80      	pop	{r7, pc}
 80190ea:	bf00      	nop
 80190ec:	20001ce8 	.word	0x20001ce8

080190f0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80190f0:	b5b0      	push	{r4, r5, r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80190f6:	2300      	movs	r3, #0
 80190f8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80190fa:	2300      	movs	r3, #0
 80190fc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80190fe:	4ba8      	ldr	r3, [pc, #672]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 8019100:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019108:	f000 810d 	beq.w	8019326 <RadioIrqProcess+0x236>
 801910c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019110:	f300 81e8 	bgt.w	80194e4 <RadioIrqProcess+0x3f4>
 8019114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019118:	f000 80f1 	beq.w	80192fe <RadioIrqProcess+0x20e>
 801911c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019120:	f300 81e0 	bgt.w	80194e4 <RadioIrqProcess+0x3f4>
 8019124:	2b80      	cmp	r3, #128	@ 0x80
 8019126:	f000 80d6 	beq.w	80192d6 <RadioIrqProcess+0x1e6>
 801912a:	2b80      	cmp	r3, #128	@ 0x80
 801912c:	f300 81da 	bgt.w	80194e4 <RadioIrqProcess+0x3f4>
 8019130:	2b20      	cmp	r3, #32
 8019132:	dc49      	bgt.n	80191c8 <RadioIrqProcess+0xd8>
 8019134:	2b00      	cmp	r3, #0
 8019136:	f340 81d5 	ble.w	80194e4 <RadioIrqProcess+0x3f4>
 801913a:	3b01      	subs	r3, #1
 801913c:	2b1f      	cmp	r3, #31
 801913e:	f200 81d1 	bhi.w	80194e4 <RadioIrqProcess+0x3f4>
 8019142:	a201      	add	r2, pc, #4	@ (adr r2, 8019148 <RadioIrqProcess+0x58>)
 8019144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019148:	080191d1 	.word	0x080191d1
 801914c:	0801920b 	.word	0x0801920b
 8019150:	080194e5 	.word	0x080194e5
 8019154:	080193c1 	.word	0x080193c1
 8019158:	080194e5 	.word	0x080194e5
 801915c:	080194e5 	.word	0x080194e5
 8019160:	080194e5 	.word	0x080194e5
 8019164:	0801943d 	.word	0x0801943d
 8019168:	080194e5 	.word	0x080194e5
 801916c:	080194e5 	.word	0x080194e5
 8019170:	080194e5 	.word	0x080194e5
 8019174:	080194e5 	.word	0x080194e5
 8019178:	080194e5 	.word	0x080194e5
 801917c:	080194e5 	.word	0x080194e5
 8019180:	080194e5 	.word	0x080194e5
 8019184:	08019459 	.word	0x08019459
 8019188:	080194e5 	.word	0x080194e5
 801918c:	080194e5 	.word	0x080194e5
 8019190:	080194e5 	.word	0x080194e5
 8019194:	080194e5 	.word	0x080194e5
 8019198:	080194e5 	.word	0x080194e5
 801919c:	080194e5 	.word	0x080194e5
 80191a0:	080194e5 	.word	0x080194e5
 80191a4:	080194e5 	.word	0x080194e5
 80191a8:	080194e5 	.word	0x080194e5
 80191ac:	080194e5 	.word	0x080194e5
 80191b0:	080194e5 	.word	0x080194e5
 80191b4:	080194e5 	.word	0x080194e5
 80191b8:	080194e5 	.word	0x080194e5
 80191bc:	080194e5 	.word	0x080194e5
 80191c0:	080194e5 	.word	0x080194e5
 80191c4:	08019467 	.word	0x08019467
 80191c8:	2b40      	cmp	r3, #64	@ 0x40
 80191ca:	f000 816d 	beq.w	80194a8 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80191ce:	e189      	b.n	80194e4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80191d0:	4874      	ldr	r0, [pc, #464]	@ (80193a4 <RadioIrqProcess+0x2b4>)
 80191d2:	f002 ff87 	bl	801c0e4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80191d6:	2000      	movs	r0, #0
 80191d8:	f000 fffa 	bl	801a1d0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80191dc:	f002 f85c 	bl	801b298 <RFW_Is_LongPacketModeEnabled>
 80191e0:	4603      	mov	r3, r0
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	d101      	bne.n	80191ea <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80191e6:	f002 f880 	bl	801b2ea <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80191ea:	4b6f      	ldr	r3, [pc, #444]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	f000 817a 	beq.w	80194e8 <RadioIrqProcess+0x3f8>
 80191f4:	4b6c      	ldr	r3, [pc, #432]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	f000 8174 	beq.w	80194e8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019200:	4b69      	ldr	r3, [pc, #420]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	4798      	blx	r3
        break;
 8019208:	e16e      	b.n	80194e8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801920a:	4868      	ldr	r0, [pc, #416]	@ (80193ac <RadioIrqProcess+0x2bc>)
 801920c:	f002 ff6a 	bl	801c0e4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019210:	4b63      	ldr	r3, [pc, #396]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 8019212:	785b      	ldrb	r3, [r3, #1]
 8019214:	f083 0301 	eor.w	r3, r3, #1
 8019218:	b2db      	uxtb	r3, r3
 801921a:	2b00      	cmp	r3, #0
 801921c:	d014      	beq.n	8019248 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801921e:	2000      	movs	r0, #0
 8019220:	f000 ffd6 	bl	801a1d0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019224:	2100      	movs	r1, #0
 8019226:	f640 1002 	movw	r0, #2306	@ 0x902
 801922a:	f001 fd51 	bl	801acd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801922e:	f640 1044 	movw	r0, #2372	@ 0x944
 8019232:	f001 fd61 	bl	801acf8 <SUBGRF_ReadRegister>
 8019236:	4603      	mov	r3, r0
 8019238:	f043 0302 	orr.w	r3, r3, #2
 801923c:	b2db      	uxtb	r3, r3
 801923e:	4619      	mov	r1, r3
 8019240:	f640 1044 	movw	r0, #2372	@ 0x944
 8019244:	f001 fd44 	bl	801acd0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019248:	1dfb      	adds	r3, r7, #7
 801924a:	22ff      	movs	r2, #255	@ 0xff
 801924c:	4619      	mov	r1, r3
 801924e:	4858      	ldr	r0, [pc, #352]	@ (80193b0 <RadioIrqProcess+0x2c0>)
 8019250:	f000 fe8e 	bl	8019f70 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019254:	4857      	ldr	r0, [pc, #348]	@ (80193b4 <RadioIrqProcess+0x2c4>)
 8019256:	f001 fce9 	bl	801ac2c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801925a:	4b53      	ldr	r3, [pc, #332]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	f000 8144 	beq.w	80194ec <RadioIrqProcess+0x3fc>
 8019264:	4b50      	ldr	r3, [pc, #320]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	689b      	ldr	r3, [r3, #8]
 801926a:	2b00      	cmp	r3, #0
 801926c:	f000 813e 	beq.w	80194ec <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8019270:	4b4b      	ldr	r3, [pc, #300]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 8019272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019276:	2b01      	cmp	r3, #1
 8019278:	d10e      	bne.n	8019298 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801927a:	4b4b      	ldr	r3, [pc, #300]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	689c      	ldr	r4, [r3, #8]
 8019280:	79fb      	ldrb	r3, [r7, #7]
 8019282:	4619      	mov	r1, r3
 8019284:	4b46      	ldr	r3, [pc, #280]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 8019286:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801928a:	461a      	mov	r2, r3
 801928c:	4b44      	ldr	r3, [pc, #272]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 801928e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8019292:	4847      	ldr	r0, [pc, #284]	@ (80193b0 <RadioIrqProcess+0x2c0>)
 8019294:	47a0      	blx	r4
                break;
 8019296:	e01d      	b.n	80192d4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019298:	4b41      	ldr	r3, [pc, #260]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 801929a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801929c:	463a      	mov	r2, r7
 801929e:	4611      	mov	r1, r2
 80192a0:	4618      	mov	r0, r3
 80192a2:	f001 ff47 	bl	801b134 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80192a6:	4b40      	ldr	r3, [pc, #256]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	689c      	ldr	r4, [r3, #8]
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	4619      	mov	r1, r3
 80192b0:	4b3b      	ldr	r3, [pc, #236]	@ (80193a0 <RadioIrqProcess+0x2b0>)
 80192b2:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80192b6:	4618      	mov	r0, r3
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80192be:	4a3e      	ldr	r2, [pc, #248]	@ (80193b8 <RadioIrqProcess+0x2c8>)
 80192c0:	fb82 5203 	smull	r5, r2, r2, r3
 80192c4:	1192      	asrs	r2, r2, #6
 80192c6:	17db      	asrs	r3, r3, #31
 80192c8:	1ad3      	subs	r3, r2, r3
 80192ca:	b25b      	sxtb	r3, r3
 80192cc:	4602      	mov	r2, r0
 80192ce:	4838      	ldr	r0, [pc, #224]	@ (80193b0 <RadioIrqProcess+0x2c0>)
 80192d0:	47a0      	blx	r4
                break;
 80192d2:	bf00      	nop
        break;
 80192d4:	e10a      	b.n	80194ec <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80192d6:	2000      	movs	r0, #0
 80192d8:	f000 ff7a 	bl	801a1d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80192dc:	4b32      	ldr	r3, [pc, #200]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	f000 8105 	beq.w	80194f0 <RadioIrqProcess+0x400>
 80192e6:	4b30      	ldr	r3, [pc, #192]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	699b      	ldr	r3, [r3, #24]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	f000 80ff 	beq.w	80194f0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80192f2:	4b2d      	ldr	r3, [pc, #180]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	699b      	ldr	r3, [r3, #24]
 80192f8:	2000      	movs	r0, #0
 80192fa:	4798      	blx	r3
        break;
 80192fc:	e0f8      	b.n	80194f0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80192fe:	2000      	movs	r0, #0
 8019300:	f000 ff66 	bl	801a1d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019304:	4b28      	ldr	r3, [pc, #160]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	f000 80f3 	beq.w	80194f4 <RadioIrqProcess+0x404>
 801930e:	4b26      	ldr	r3, [pc, #152]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	699b      	ldr	r3, [r3, #24]
 8019314:	2b00      	cmp	r3, #0
 8019316:	f000 80ed 	beq.w	80194f4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801931a:	4b23      	ldr	r3, [pc, #140]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	699b      	ldr	r3, [r3, #24]
 8019320:	2001      	movs	r0, #1
 8019322:	4798      	blx	r3
        break;
 8019324:	e0e6      	b.n	80194f4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019326:	4b25      	ldr	r3, [pc, #148]	@ (80193bc <RadioIrqProcess+0x2cc>)
 8019328:	2201      	movs	r2, #1
 801932a:	2100      	movs	r1, #0
 801932c:	2002      	movs	r0, #2
 801932e:	f003 f8e3 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019332:	f000 fe03 	bl	8019f3c <SUBGRF_GetOperatingMode>
 8019336:	4603      	mov	r3, r0
 8019338:	2b04      	cmp	r3, #4
 801933a:	d115      	bne.n	8019368 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801933c:	4819      	ldr	r0, [pc, #100]	@ (80193a4 <RadioIrqProcess+0x2b4>)
 801933e:	f002 fed1 	bl	801c0e4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019342:	2000      	movs	r0, #0
 8019344:	f000 ff44 	bl	801a1d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019348:	4b17      	ldr	r3, [pc, #92]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	f000 80d3 	beq.w	80194f8 <RadioIrqProcess+0x408>
 8019352:	4b15      	ldr	r3, [pc, #84]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	f000 80cd 	beq.w	80194f8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801935e:	4b12      	ldr	r3, [pc, #72]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	685b      	ldr	r3, [r3, #4]
 8019364:	4798      	blx	r3
        break;
 8019366:	e0c7      	b.n	80194f8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019368:	f000 fde8 	bl	8019f3c <SUBGRF_GetOperatingMode>
 801936c:	4603      	mov	r3, r0
 801936e:	2b05      	cmp	r3, #5
 8019370:	f040 80c2 	bne.w	80194f8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8019374:	480d      	ldr	r0, [pc, #52]	@ (80193ac <RadioIrqProcess+0x2bc>)
 8019376:	f002 feb5 	bl	801c0e4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801937a:	2000      	movs	r0, #0
 801937c:	f000 ff28 	bl	801a1d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019380:	4b09      	ldr	r3, [pc, #36]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	f000 80b7 	beq.w	80194f8 <RadioIrqProcess+0x408>
 801938a:	4b07      	ldr	r3, [pc, #28]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	68db      	ldr	r3, [r3, #12]
 8019390:	2b00      	cmp	r3, #0
 8019392:	f000 80b1 	beq.w	80194f8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8019396:	4b04      	ldr	r3, [pc, #16]	@ (80193a8 <RadioIrqProcess+0x2b8>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	68db      	ldr	r3, [r3, #12]
 801939c:	4798      	blx	r3
        break;
 801939e:	e0ab      	b.n	80194f8 <RadioIrqProcess+0x408>
 80193a0:	20001ce8 	.word	0x20001ce8
 80193a4:	20001d44 	.word	0x20001d44
 80193a8:	20001ce4 	.word	0x20001ce4
 80193ac:	20001d5c 	.word	0x20001d5c
 80193b0:	20001be4 	.word	0x20001be4
 80193b4:	20001d0c 	.word	0x20001d0c
 80193b8:	10624dd3 	.word	0x10624dd3
 80193bc:	0801fe90 	.word	0x0801fe90
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80193c0:	4b54      	ldr	r3, [pc, #336]	@ (8019514 <RadioIrqProcess+0x424>)
 80193c2:	2201      	movs	r2, #1
 80193c4:	2100      	movs	r1, #0
 80193c6:	2002      	movs	r0, #2
 80193c8:	f003 f896 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80193cc:	4b52      	ldr	r3, [pc, #328]	@ (8019518 <RadioIrqProcess+0x428>)
 80193ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f000 8093 	beq.w	80194fc <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80193d6:	4a51      	ldr	r2, [pc, #324]	@ (801951c <RadioIrqProcess+0x42c>)
 80193d8:	4b4f      	ldr	r3, [pc, #316]	@ (8019518 <RadioIrqProcess+0x428>)
 80193da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193dc:	0c1b      	lsrs	r3, r3, #16
 80193de:	b2db      	uxtb	r3, r3
 80193e0:	4619      	mov	r1, r3
 80193e2:	f640 1003 	movw	r0, #2307	@ 0x903
 80193e6:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80193e8:	4a4c      	ldr	r2, [pc, #304]	@ (801951c <RadioIrqProcess+0x42c>)
 80193ea:	4b4b      	ldr	r3, [pc, #300]	@ (8019518 <RadioIrqProcess+0x428>)
 80193ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80193ee:	0a1b      	lsrs	r3, r3, #8
 80193f0:	b2db      	uxtb	r3, r3
 80193f2:	4619      	mov	r1, r3
 80193f4:	f640 1004 	movw	r0, #2308	@ 0x904
 80193f8:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80193fa:	4a48      	ldr	r2, [pc, #288]	@ (801951c <RadioIrqProcess+0x42c>)
 80193fc:	4b46      	ldr	r3, [pc, #280]	@ (8019518 <RadioIrqProcess+0x428>)
 80193fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019400:	b2db      	uxtb	r3, r3
 8019402:	4619      	mov	r1, r3
 8019404:	f640 1005 	movw	r0, #2309	@ 0x905
 8019408:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801940a:	4c44      	ldr	r4, [pc, #272]	@ (801951c <RadioIrqProcess+0x42c>)
 801940c:	4b44      	ldr	r3, [pc, #272]	@ (8019520 <RadioIrqProcess+0x430>)
 801940e:	f640 1002 	movw	r0, #2306	@ 0x902
 8019412:	4798      	blx	r3
 8019414:	4603      	mov	r3, r0
 8019416:	f043 0301 	orr.w	r3, r3, #1
 801941a:	b2db      	uxtb	r3, r3
 801941c:	4619      	mov	r1, r3
 801941e:	f640 1002 	movw	r0, #2306	@ 0x902
 8019422:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019424:	4b3c      	ldr	r3, [pc, #240]	@ (8019518 <RadioIrqProcess+0x428>)
 8019426:	2200      	movs	r2, #0
 8019428:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801942a:	2300      	movs	r3, #0
 801942c:	2200      	movs	r2, #0
 801942e:	f240 2162 	movw	r1, #610	@ 0x262
 8019432:	f240 2062 	movw	r0, #610	@ 0x262
 8019436:	f001 f89b 	bl	801a570 <SUBGRF_SetDioIrqParams>
        break;
 801943a:	e05f      	b.n	80194fc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801943c:	4b39      	ldr	r3, [pc, #228]	@ (8019524 <RadioIrqProcess+0x434>)
 801943e:	2201      	movs	r2, #1
 8019440:	2100      	movs	r1, #0
 8019442:	2002      	movs	r0, #2
 8019444:	f003 f858 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019448:	f001 ff1f 	bl	801b28a <RFW_Is_Init>
 801944c:	4603      	mov	r3, r0
 801944e:	2b01      	cmp	r3, #1
 8019450:	d156      	bne.n	8019500 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8019452:	f001 ff50 	bl	801b2f6 <RFW_ReceivePayload>
        break;
 8019456:	e053      	b.n	8019500 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019458:	4b33      	ldr	r3, [pc, #204]	@ (8019528 <RadioIrqProcess+0x438>)
 801945a:	2201      	movs	r2, #1
 801945c:	2100      	movs	r1, #0
 801945e:	2002      	movs	r0, #2
 8019460:	f003 f84a 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019464:	e051      	b.n	801950a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019466:	4831      	ldr	r0, [pc, #196]	@ (801952c <RadioIrqProcess+0x43c>)
 8019468:	f002 fe3c 	bl	801c0e4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801946c:	4b2a      	ldr	r3, [pc, #168]	@ (8019518 <RadioIrqProcess+0x428>)
 801946e:	785b      	ldrb	r3, [r3, #1]
 8019470:	f083 0301 	eor.w	r3, r3, #1
 8019474:	b2db      	uxtb	r3, r3
 8019476:	2b00      	cmp	r3, #0
 8019478:	d002      	beq.n	8019480 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801947a:	2000      	movs	r0, #0
 801947c:	f000 fea8 	bl	801a1d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019480:	4b2b      	ldr	r3, [pc, #172]	@ (8019530 <RadioIrqProcess+0x440>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d03d      	beq.n	8019504 <RadioIrqProcess+0x414>
 8019488:	4b29      	ldr	r3, [pc, #164]	@ (8019530 <RadioIrqProcess+0x440>)
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	68db      	ldr	r3, [r3, #12]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d038      	beq.n	8019504 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8019492:	4b27      	ldr	r3, [pc, #156]	@ (8019530 <RadioIrqProcess+0x440>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801949a:	4b26      	ldr	r3, [pc, #152]	@ (8019534 <RadioIrqProcess+0x444>)
 801949c:	2201      	movs	r2, #1
 801949e:	2100      	movs	r1, #0
 80194a0:	2002      	movs	r0, #2
 80194a2:	f003 f829 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80194a6:	e02d      	b.n	8019504 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80194a8:	4b23      	ldr	r3, [pc, #140]	@ (8019538 <RadioIrqProcess+0x448>)
 80194aa:	2201      	movs	r2, #1
 80194ac:	2100      	movs	r1, #0
 80194ae:	2002      	movs	r0, #2
 80194b0:	f003 f822 	bl	801c4f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80194b4:	4b18      	ldr	r3, [pc, #96]	@ (8019518 <RadioIrqProcess+0x428>)
 80194b6:	785b      	ldrb	r3, [r3, #1]
 80194b8:	f083 0301 	eor.w	r3, r3, #1
 80194bc:	b2db      	uxtb	r3, r3
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d002      	beq.n	80194c8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80194c2:	2000      	movs	r0, #0
 80194c4:	f000 fe84 	bl	801a1d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80194c8:	4b19      	ldr	r3, [pc, #100]	@ (8019530 <RadioIrqProcess+0x440>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d01b      	beq.n	8019508 <RadioIrqProcess+0x418>
 80194d0:	4b17      	ldr	r3, [pc, #92]	@ (8019530 <RadioIrqProcess+0x440>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	691b      	ldr	r3, [r3, #16]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d016      	beq.n	8019508 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80194da:	4b15      	ldr	r3, [pc, #84]	@ (8019530 <RadioIrqProcess+0x440>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	691b      	ldr	r3, [r3, #16]
 80194e0:	4798      	blx	r3
        break;
 80194e2:	e011      	b.n	8019508 <RadioIrqProcess+0x418>
        break;
 80194e4:	bf00      	nop
 80194e6:	e010      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194e8:	bf00      	nop
 80194ea:	e00e      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194ec:	bf00      	nop
 80194ee:	e00c      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194f0:	bf00      	nop
 80194f2:	e00a      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194f4:	bf00      	nop
 80194f6:	e008      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194f8:	bf00      	nop
 80194fa:	e006      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 80194fc:	bf00      	nop
 80194fe:	e004      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 8019500:	bf00      	nop
 8019502:	e002      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 8019504:	bf00      	nop
 8019506:	e000      	b.n	801950a <RadioIrqProcess+0x41a>
        break;
 8019508:	bf00      	nop
    }
}
 801950a:	bf00      	nop
 801950c:	3708      	adds	r7, #8
 801950e:	46bd      	mov	sp, r7
 8019510:	bdb0      	pop	{r4, r5, r7, pc}
 8019512:	bf00      	nop
 8019514:	0801fea4 	.word	0x0801fea4
 8019518:	20001ce8 	.word	0x20001ce8
 801951c:	08018f01 	.word	0x08018f01
 8019520:	08018f25 	.word	0x08018f25
 8019524:	0801feb0 	.word	0x0801feb0
 8019528:	0801febc 	.word	0x0801febc
 801952c:	20001d5c 	.word	0x20001d5c
 8019530:	20001ce4 	.word	0x20001ce4
 8019534:	0801fec8 	.word	0x0801fec8
 8019538:	0801fed4 	.word	0x0801fed4

0801953c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801953c:	b580      	push	{r7, lr}
 801953e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019540:	4b09      	ldr	r3, [pc, #36]	@ (8019568 <RadioTxPrbs+0x2c>)
 8019542:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019546:	2101      	movs	r1, #1
 8019548:	4618      	mov	r0, r3
 801954a:	f001 fcb5 	bl	801aeb8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801954e:	4b07      	ldr	r3, [pc, #28]	@ (801956c <RadioTxPrbs+0x30>)
 8019550:	212d      	movs	r1, #45	@ 0x2d
 8019552:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019556:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019558:	f000 fefd 	bl	801a356 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801955c:	4804      	ldr	r0, [pc, #16]	@ (8019570 <RadioTxPrbs+0x34>)
 801955e:	f000 fe53 	bl	801a208 <SUBGRF_SetTx>
}
 8019562:	bf00      	nop
 8019564:	bd80      	pop	{r7, pc}
 8019566:	bf00      	nop
 8019568:	20001ce8 	.word	0x20001ce8
 801956c:	08018f01 	.word	0x08018f01
 8019570:	000fffff 	.word	0x000fffff

08019574 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b084      	sub	sp, #16
 8019578:	af00      	add	r7, sp, #0
 801957a:	4603      	mov	r3, r0
 801957c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801957e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019582:	4618      	mov	r0, r3
 8019584:	f001 fcc0 	bl	801af08 <SUBGRF_SetRfTxPower>
 8019588:	4603      	mov	r3, r0
 801958a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801958c:	7bfb      	ldrb	r3, [r7, #15]
 801958e:	2101      	movs	r1, #1
 8019590:	4618      	mov	r0, r3
 8019592:	f001 fc91 	bl	801aeb8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019596:	f000 fed5 	bl	801a344 <SUBGRF_SetTxContinuousWave>
}
 801959a:	bf00      	nop
 801959c:	3710      	adds	r7, #16
 801959e:	46bd      	mov	sp, r7
 80195a0:	bd80      	pop	{r7, pc}

080195a2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80195a2:	b480      	push	{r7}
 80195a4:	b089      	sub	sp, #36	@ 0x24
 80195a6:	af00      	add	r7, sp, #0
 80195a8:	60f8      	str	r0, [r7, #12]
 80195aa:	60b9      	str	r1, [r7, #8]
 80195ac:	4613      	mov	r3, r2
 80195ae:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80195b0:	2300      	movs	r3, #0
 80195b2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80195b8:	2300      	movs	r3, #0
 80195ba:	61bb      	str	r3, [r7, #24]
 80195bc:	e011      	b.n	80195e2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80195be:	69bb      	ldr	r3, [r7, #24]
 80195c0:	68ba      	ldr	r2, [r7, #8]
 80195c2:	4413      	add	r3, r2
 80195c4:	781a      	ldrb	r2, [r3, #0]
 80195c6:	69bb      	ldr	r3, [r7, #24]
 80195c8:	68b9      	ldr	r1, [r7, #8]
 80195ca:	440b      	add	r3, r1
 80195cc:	43d2      	mvns	r2, r2
 80195ce:	b2d2      	uxtb	r2, r2
 80195d0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80195d2:	69bb      	ldr	r3, [r7, #24]
 80195d4:	68fa      	ldr	r2, [r7, #12]
 80195d6:	4413      	add	r3, r2
 80195d8:	2200      	movs	r2, #0
 80195da:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80195dc:	69bb      	ldr	r3, [r7, #24]
 80195de:	3301      	adds	r3, #1
 80195e0:	61bb      	str	r3, [r7, #24]
 80195e2:	79fb      	ldrb	r3, [r7, #7]
 80195e4:	69ba      	ldr	r2, [r7, #24]
 80195e6:	429a      	cmp	r2, r3
 80195e8:	dbe9      	blt.n	80195be <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80195ea:	2300      	movs	r3, #0
 80195ec:	61bb      	str	r3, [r7, #24]
 80195ee:	e049      	b.n	8019684 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80195f0:	69bb      	ldr	r3, [r7, #24]
 80195f2:	425a      	negs	r2, r3
 80195f4:	f003 0307 	and.w	r3, r3, #7
 80195f8:	f002 0207 	and.w	r2, r2, #7
 80195fc:	bf58      	it	pl
 80195fe:	4253      	negpl	r3, r2
 8019600:	b2db      	uxtb	r3, r3
 8019602:	f1c3 0307 	rsb	r3, r3, #7
 8019606:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019608:	69bb      	ldr	r3, [r7, #24]
 801960a:	2b00      	cmp	r3, #0
 801960c:	da00      	bge.n	8019610 <payload_integration+0x6e>
 801960e:	3307      	adds	r3, #7
 8019610:	10db      	asrs	r3, r3, #3
 8019612:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019614:	69bb      	ldr	r3, [r7, #24]
 8019616:	3301      	adds	r3, #1
 8019618:	425a      	negs	r2, r3
 801961a:	f003 0307 	and.w	r3, r3, #7
 801961e:	f002 0207 	and.w	r2, r2, #7
 8019622:	bf58      	it	pl
 8019624:	4253      	negpl	r3, r2
 8019626:	b2db      	uxtb	r3, r3
 8019628:	f1c3 0307 	rsb	r3, r3, #7
 801962c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801962e:	69bb      	ldr	r3, [r7, #24]
 8019630:	3301      	adds	r3, #1
 8019632:	2b00      	cmp	r3, #0
 8019634:	da00      	bge.n	8019638 <payload_integration+0x96>
 8019636:	3307      	adds	r3, #7
 8019638:	10db      	asrs	r3, r3, #3
 801963a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801963c:	7dbb      	ldrb	r3, [r7, #22]
 801963e:	68ba      	ldr	r2, [r7, #8]
 8019640:	4413      	add	r3, r2
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	461a      	mov	r2, r3
 8019646:	7dfb      	ldrb	r3, [r7, #23]
 8019648:	fa42 f303 	asr.w	r3, r2, r3
 801964c:	b2db      	uxtb	r3, r3
 801964e:	f003 0301 	and.w	r3, r3, #1
 8019652:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019654:	7ffa      	ldrb	r2, [r7, #31]
 8019656:	7cfb      	ldrb	r3, [r7, #19]
 8019658:	4053      	eors	r3, r2
 801965a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801965c:	7d3b      	ldrb	r3, [r7, #20]
 801965e:	68fa      	ldr	r2, [r7, #12]
 8019660:	4413      	add	r3, r2
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	b25a      	sxtb	r2, r3
 8019666:	7ff9      	ldrb	r1, [r7, #31]
 8019668:	7d7b      	ldrb	r3, [r7, #21]
 801966a:	fa01 f303 	lsl.w	r3, r1, r3
 801966e:	b25b      	sxtb	r3, r3
 8019670:	4313      	orrs	r3, r2
 8019672:	b259      	sxtb	r1, r3
 8019674:	7d3b      	ldrb	r3, [r7, #20]
 8019676:	68fa      	ldr	r2, [r7, #12]
 8019678:	4413      	add	r3, r2
 801967a:	b2ca      	uxtb	r2, r1
 801967c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801967e:	69bb      	ldr	r3, [r7, #24]
 8019680:	3301      	adds	r3, #1
 8019682:	61bb      	str	r3, [r7, #24]
 8019684:	79fb      	ldrb	r3, [r7, #7]
 8019686:	00db      	lsls	r3, r3, #3
 8019688:	69ba      	ldr	r2, [r7, #24]
 801968a:	429a      	cmp	r2, r3
 801968c:	dbb0      	blt.n	80195f0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801968e:	7ffb      	ldrb	r3, [r7, #31]
 8019690:	01db      	lsls	r3, r3, #7
 8019692:	b25a      	sxtb	r2, r3
 8019694:	7ffb      	ldrb	r3, [r7, #31]
 8019696:	019b      	lsls	r3, r3, #6
 8019698:	b25b      	sxtb	r3, r3
 801969a:	4313      	orrs	r3, r2
 801969c:	b25b      	sxtb	r3, r3
 801969e:	7ffa      	ldrb	r2, [r7, #31]
 80196a0:	2a00      	cmp	r2, #0
 80196a2:	d101      	bne.n	80196a8 <payload_integration+0x106>
 80196a4:	2220      	movs	r2, #32
 80196a6:	e000      	b.n	80196aa <payload_integration+0x108>
 80196a8:	2200      	movs	r2, #0
 80196aa:	4313      	orrs	r3, r2
 80196ac:	b259      	sxtb	r1, r3
 80196ae:	79fb      	ldrb	r3, [r7, #7]
 80196b0:	68fa      	ldr	r2, [r7, #12]
 80196b2:	4413      	add	r3, r2
 80196b4:	b2ca      	uxtb	r2, r1
 80196b6:	701a      	strb	r2, [r3, #0]
}
 80196b8:	bf00      	nop
 80196ba:	3724      	adds	r7, #36	@ 0x24
 80196bc:	46bd      	mov	sp, r7
 80196be:	bc80      	pop	{r7}
 80196c0:	4770      	bx	lr
	...

080196c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b08c      	sub	sp, #48	@ 0x30
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	60b9      	str	r1, [r7, #8]
 80196cc:	607a      	str	r2, [r7, #4]
 80196ce:	603b      	str	r3, [r7, #0]
 80196d0:	4603      	mov	r3, r0
 80196d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80196d4:	2300      	movs	r3, #0
 80196d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80196d8:	2300      	movs	r3, #0
 80196da:	623b      	str	r3, [r7, #32]
 80196dc:	2300      	movs	r3, #0
 80196de:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80196e0:	f001 fdcd 	bl	801b27e <RFW_DeInit>

    if( rxContinuous != 0 )
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d001      	beq.n	80196ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80196ea:	2300      	movs	r3, #0
 80196ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	bf14      	ite	ne
 80196f4:	2301      	movne	r3, #1
 80196f6:	2300      	moveq	r3, #0
 80196f8:	b2da      	uxtb	r2, r3
 80196fa:	4ba3      	ldr	r3, [pc, #652]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80196fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80196fe:	7bfb      	ldrb	r3, [r7, #15]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d003      	beq.n	801970c <RadioSetRxGenericConfig+0x48>
 8019704:	2b01      	cmp	r3, #1
 8019706:	f000 80dc 	beq.w	80198c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801970a:	e194      	b.n	8019a36 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	689b      	ldr	r3, [r3, #8]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d003      	beq.n	801971c <RadioSetRxGenericConfig+0x58>
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	68db      	ldr	r3, [r3, #12]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d102      	bne.n	8019722 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801971c:	f04f 33ff 	mov.w	r3, #4294967295
 8019720:	e18a      	b.n	8019a38 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019722:	68bb      	ldr	r3, [r7, #8]
 8019724:	7f9b      	ldrb	r3, [r3, #30]
 8019726:	2b08      	cmp	r3, #8
 8019728:	d902      	bls.n	8019730 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801972a:	f04f 33ff 	mov.w	r3, #4294967295
 801972e:	e183      	b.n	8019a38 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	6919      	ldr	r1, [r3, #16]
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	7f9b      	ldrb	r3, [r3, #30]
 8019738:	461a      	mov	r2, r3
 801973a:	f107 0320 	add.w	r3, r7, #32
 801973e:	4618      	mov	r0, r3
 8019740:	f001 fe90 	bl	801b464 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	2b00      	cmp	r3, #0
 801974a:	bf14      	ite	ne
 801974c:	2301      	movne	r3, #1
 801974e:	2300      	moveq	r3, #0
 8019750:	b2db      	uxtb	r3, r3
 8019752:	4618      	mov	r0, r3
 8019754:	f000 fe08 	bl	801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019758:	4b8b      	ldr	r3, [pc, #556]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801975a:	2200      	movs	r2, #0
 801975c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	689b      	ldr	r3, [r3, #8]
 8019764:	4a88      	ldr	r2, [pc, #544]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019766:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801976e:	4b86      	ldr	r3, [pc, #536]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	685b      	ldr	r3, [r3, #4]
 8019778:	4618      	mov	r0, r3
 801977a:	f001 fcb3 	bl	801b0e4 <SUBGRF_GetFskBandwidthRegValue>
 801977e:	4603      	mov	r3, r0
 8019780:	461a      	mov	r2, r3
 8019782:	4b81      	ldr	r3, [pc, #516]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019788:	4b7f      	ldr	r3, [pc, #508]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801978a:	2200      	movs	r2, #0
 801978c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801978e:	68bb      	ldr	r3, [r7, #8]
 8019790:	68db      	ldr	r3, [r3, #12]
 8019792:	b29b      	uxth	r3, r3
 8019794:	00db      	lsls	r3, r3, #3
 8019796:	b29a      	uxth	r2, r3
 8019798:	4b7b      	ldr	r3, [pc, #492]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801979a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801979c:	68bb      	ldr	r3, [r7, #8]
 801979e:	7fda      	ldrb	r2, [r3, #31]
 80197a0:	4b79      	ldr	r3, [pc, #484]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	7f9b      	ldrb	r3, [r3, #30]
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	b2da      	uxtb	r2, r3
 80197ac:	4b76      	ldr	r3, [pc, #472]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80197b6:	4b74      	ldr	r3, [pc, #464]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80197ba:	68bb      	ldr	r3, [r7, #8]
 80197bc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d105      	bne.n	80197d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	695b      	ldr	r3, [r3, #20]
 80197c8:	b2da      	uxtb	r2, r3
 80197ca:	4b6f      	ldr	r3, [pc, #444]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197cc:	759a      	strb	r2, [r3, #22]
 80197ce:	e00b      	b.n	80197e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80197d6:	2b02      	cmp	r3, #2
 80197d8:	d103      	bne.n	80197e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80197da:	4b6b      	ldr	r3, [pc, #428]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197dc:	22ff      	movs	r2, #255	@ 0xff
 80197de:	759a      	strb	r2, [r3, #22]
 80197e0:	e002      	b.n	80197e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80197e2:	4b69      	ldr	r3, [pc, #420]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80197e4:	22ff      	movs	r2, #255	@ 0xff
 80197e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	d004      	beq.n	80197fc <RadioSetRxGenericConfig+0x138>
 80197f2:	68bb      	ldr	r3, [r7, #8]
 80197f4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80197f8:	2b02      	cmp	r3, #2
 80197fa:	d12d      	bne.n	8019858 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80197fc:	68bb      	ldr	r3, [r7, #8]
 80197fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019802:	2bf1      	cmp	r3, #241	@ 0xf1
 8019804:	d00c      	beq.n	8019820 <RadioSetRxGenericConfig+0x15c>
 8019806:	68bb      	ldr	r3, [r7, #8]
 8019808:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801980c:	2bf2      	cmp	r3, #242	@ 0xf2
 801980e:	d007      	beq.n	8019820 <RadioSetRxGenericConfig+0x15c>
 8019810:	68bb      	ldr	r3, [r7, #8]
 8019812:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019816:	2b01      	cmp	r3, #1
 8019818:	d002      	beq.n	8019820 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801981a:	f04f 33ff 	mov.w	r3, #4294967295
 801981e:	e10b      	b.n	8019a38 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019820:	2300      	movs	r3, #0
 8019822:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019824:	68bb      	ldr	r3, [r7, #8]
 8019826:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019828:	4b58      	ldr	r3, [pc, #352]	@ (801998c <RadioSetRxGenericConfig+0x2c8>)
 801982a:	6819      	ldr	r1, [r3, #0]
 801982c:	f107 0314 	add.w	r3, r7, #20
 8019830:	4a57      	ldr	r2, [pc, #348]	@ (8019990 <RadioSetRxGenericConfig+0x2cc>)
 8019832:	4618      	mov	r0, r3
 8019834:	f001 fd16 	bl	801b264 <RFW_Init>
 8019838:	4603      	mov	r3, r0
 801983a:	2b00      	cmp	r3, #0
 801983c:	d002      	beq.n	8019844 <RadioSetRxGenericConfig+0x180>
            return -1;
 801983e:	f04f 33ff 	mov.w	r3, #4294967295
 8019842:	e0f9      	b.n	8019a38 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019844:	4b50      	ldr	r3, [pc, #320]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019846:	2200      	movs	r2, #0
 8019848:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801984a:	4b4f      	ldr	r3, [pc, #316]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801984c:	2201      	movs	r2, #1
 801984e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019850:	4b4d      	ldr	r3, [pc, #308]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019852:	2200      	movs	r2, #0
 8019854:	755a      	strb	r2, [r3, #21]
        {
 8019856:	e00e      	b.n	8019876 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019858:	68bb      	ldr	r3, [r7, #8]
 801985a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801985e:	4b4a      	ldr	r3, [pc, #296]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019860:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019868:	4b47      	ldr	r3, [pc, #284]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801986a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019872:	4b45      	ldr	r3, [pc, #276]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019874:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019876:	f7ff fa48 	bl	8018d0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801987a:	2000      	movs	r0, #0
 801987c:	f7fe fbf2 	bl	8018064 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019880:	4844      	ldr	r0, [pc, #272]	@ (8019994 <RadioSetRxGenericConfig+0x2d0>)
 8019882:	f001 f80b 	bl	801a89c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019886:	4844      	ldr	r0, [pc, #272]	@ (8019998 <RadioSetRxGenericConfig+0x2d4>)
 8019888:	f001 f8da 	bl	801aa40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801988c:	f107 0320 	add.w	r3, r7, #32
 8019890:	4618      	mov	r0, r3
 8019892:	f000 fba2 	bl	8019fda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	8b9b      	ldrh	r3, [r3, #28]
 801989a:	4618      	mov	r0, r3
 801989c:	f000 fbec 	bl	801a078 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	8b1b      	ldrh	r3, [r3, #24]
 80198a4:	4618      	mov	r0, r3
 80198a6:	f000 fbc7 	bl	801a038 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80198b0:	fb03 f202 	mul.w	r2, r3, r2
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	689b      	ldr	r3, [r3, #8]
 80198b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80198bc:	4a32      	ldr	r2, [pc, #200]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 80198be:	6093      	str	r3, [r2, #8]
        break;
 80198c0:	e0b9      	b.n	8019a36 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80198c2:	68bb      	ldr	r3, [r7, #8]
 80198c4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d102      	bne.n	80198d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80198ca:	f04f 33ff 	mov.w	r3, #4294967295
 80198ce:	e0b3      	b.n	8019a38 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80198d0:	68bb      	ldr	r3, [r7, #8]
 80198d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d104      	bne.n	80198e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	695b      	ldr	r3, [r3, #20]
 80198de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80198e2:	e002      	b.n	80198ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80198e4:	23ff      	movs	r3, #255	@ 0xff
 80198e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80198ea:	68bb      	ldr	r3, [r7, #8]
 80198ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	bf14      	ite	ne
 80198f2:	2301      	movne	r3, #1
 80198f4:	2300      	moveq	r3, #0
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	4618      	mov	r0, r3
 80198fa:	f000 fd35 	bl	801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80198fe:	683b      	ldr	r3, [r7, #0]
 8019900:	b2db      	uxtb	r3, r3
 8019902:	4618      	mov	r0, r3
 8019904:	f000 fd3f 	bl	801a386 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019908:	4b1f      	ldr	r3, [pc, #124]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801990a:	2201      	movs	r2, #1
 801990c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019916:	4b1c      	ldr	r3, [pc, #112]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019922:	4b19      	ldr	r3, [pc, #100]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801992e:	4b16      	ldr	r3, [pc, #88]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019930:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801993a:	2b02      	cmp	r3, #2
 801993c:	d010      	beq.n	8019960 <RadioSetRxGenericConfig+0x29c>
 801993e:	2b02      	cmp	r3, #2
 8019940:	dc2c      	bgt.n	801999c <RadioSetRxGenericConfig+0x2d8>
 8019942:	2b00      	cmp	r3, #0
 8019944:	d002      	beq.n	801994c <RadioSetRxGenericConfig+0x288>
 8019946:	2b01      	cmp	r3, #1
 8019948:	d005      	beq.n	8019956 <RadioSetRxGenericConfig+0x292>
            break;
 801994a:	e027      	b.n	801999c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801994c:	4b0e      	ldr	r3, [pc, #56]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 801994e:	2200      	movs	r2, #0
 8019950:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019954:	e023      	b.n	801999e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019956:	4b0c      	ldr	r3, [pc, #48]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019958:	2201      	movs	r2, #1
 801995a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801995e:	e01e      	b.n	801999e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019966:	2b0b      	cmp	r3, #11
 8019968:	d004      	beq.n	8019974 <RadioSetRxGenericConfig+0x2b0>
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019970:	2b0c      	cmp	r3, #12
 8019972:	d104      	bne.n	801997e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019974:	4b04      	ldr	r3, [pc, #16]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019976:	2201      	movs	r2, #1
 8019978:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801997c:	e00f      	b.n	801999e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801997e:	4b02      	ldr	r3, [pc, #8]	@ (8019988 <RadioSetRxGenericConfig+0x2c4>)
 8019980:	2200      	movs	r2, #0
 8019982:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019986:	e00a      	b.n	801999e <RadioSetRxGenericConfig+0x2da>
 8019988:	20001ce8 	.word	0x20001ce8
 801998c:	20001ce4 	.word	0x20001ce4
 8019990:	20001d5c 	.word	0x20001d5c
 8019994:	20001d20 	.word	0x20001d20
 8019998:	20001cf6 	.word	0x20001cf6
            break;
 801999c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801999e:	4b28      	ldr	r3, [pc, #160]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199a0:	2201      	movs	r2, #1
 80199a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80199a8:	4b25      	ldr	r3, [pc, #148]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80199b2:	4b23      	ldr	r3, [pc, #140]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80199b6:	4a22      	ldr	r2, [pc, #136]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80199bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80199c4:	4b1e      	ldr	r3, [pc, #120]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80199ca:	68bb      	ldr	r3, [r7, #8]
 80199cc:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80199d0:	4b1b      	ldr	r3, [pc, #108]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80199d6:	f7ff f998 	bl	8018d0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80199da:	2001      	movs	r0, #1
 80199dc:	f7fe fb42 	bl	8018064 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80199e0:	4818      	ldr	r0, [pc, #96]	@ (8019a44 <RadioSetRxGenericConfig+0x380>)
 80199e2:	f000 ff5b 	bl	801a89c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80199e6:	4818      	ldr	r0, [pc, #96]	@ (8019a48 <RadioSetRxGenericConfig+0x384>)
 80199e8:	f001 f82a 	bl	801aa40 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80199ec:	4b14      	ldr	r3, [pc, #80]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 80199ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80199f2:	2b01      	cmp	r3, #1
 80199f4:	d10d      	bne.n	8019a12 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80199f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80199fa:	f001 f97d 	bl	801acf8 <SUBGRF_ReadRegister>
 80199fe:	4603      	mov	r3, r0
 8019a00:	f023 0304 	bic.w	r3, r3, #4
 8019a04:	b2db      	uxtb	r3, r3
 8019a06:	4619      	mov	r1, r3
 8019a08:	f240 7036 	movw	r0, #1846	@ 0x736
 8019a0c:	f001 f960 	bl	801acd0 <SUBGRF_WriteRegister>
 8019a10:	e00c      	b.n	8019a2c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019a12:	f240 7036 	movw	r0, #1846	@ 0x736
 8019a16:	f001 f96f 	bl	801acf8 <SUBGRF_ReadRegister>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	f043 0304 	orr.w	r3, r3, #4
 8019a20:	b2db      	uxtb	r3, r3
 8019a22:	4619      	mov	r1, r3
 8019a24:	f240 7036 	movw	r0, #1846	@ 0x736
 8019a28:	f001 f952 	bl	801acd0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019a2c:	4b04      	ldr	r3, [pc, #16]	@ (8019a40 <RadioSetRxGenericConfig+0x37c>)
 8019a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019a32:	609a      	str	r2, [r3, #8]
        break;
 8019a34:	bf00      	nop
    }
    return status;
 8019a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3730      	adds	r7, #48	@ 0x30
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	20001ce8 	.word	0x20001ce8
 8019a44:	20001d20 	.word	0x20001d20
 8019a48:	20001cf6 	.word	0x20001cf6

08019a4c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b08e      	sub	sp, #56	@ 0x38
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60b9      	str	r1, [r7, #8]
 8019a54:	607b      	str	r3, [r7, #4]
 8019a56:	4603      	mov	r3, r0
 8019a58:	73fb      	strb	r3, [r7, #15]
 8019a5a:	4613      	mov	r3, r2
 8019a5c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019a5e:	2300      	movs	r3, #0
 8019a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a62:	2300      	movs	r3, #0
 8019a64:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019a66:	f001 fc0a 	bl	801b27e <RFW_DeInit>
    switch( modem )
 8019a6a:	7bfb      	ldrb	r3, [r7, #15]
 8019a6c:	2b03      	cmp	r3, #3
 8019a6e:	f200 8204 	bhi.w	8019e7a <RadioSetTxGenericConfig+0x42e>
 8019a72:	a201      	add	r2, pc, #4	@ (adr r2, 8019a78 <RadioSetTxGenericConfig+0x2c>)
 8019a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a78:	08019bfd 	.word	0x08019bfd
 8019a7c:	08019d45 	.word	0x08019d45
 8019a80:	08019e3d 	.word	0x08019e3d
 8019a84:	08019a89 	.word	0x08019a89
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	7c9b      	ldrb	r3, [r3, #18]
 8019a8c:	2b08      	cmp	r3, #8
 8019a8e:	d902      	bls.n	8019a96 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019a90:	f04f 33ff 	mov.w	r3, #4294967295
 8019a94:	e206      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	6899      	ldr	r1, [r3, #8]
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	7c9b      	ldrb	r3, [r3, #18]
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f001 fcdd 	bl	801b464 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019aaa:	68bb      	ldr	r3, [r7, #8]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d102      	bne.n	8019ab8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ab6:	e1f5      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019ab8:	68bb      	ldr	r3, [r7, #8]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8019ac0:	4293      	cmp	r3, r2
 8019ac2:	d813      	bhi.n	8019aec <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019ac4:	2302      	movs	r3, #2
 8019ac6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019aca:	4b99      	ldr	r3, [pc, #612]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019acc:	2203      	movs	r2, #3
 8019ace:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019ad0:	4b97      	ldr	r3, [pc, #604]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019ad2:	2203      	movs	r2, #3
 8019ad4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	4a94      	ldr	r2, [pc, #592]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019ade:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	7cda      	ldrb	r2, [r3, #19]
 8019ae4:	4b92      	ldr	r3, [pc, #584]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019aea:	e017      	b.n	8019b1c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019aec:	2300      	movs	r3, #0
 8019aee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019af2:	4b8f      	ldr	r3, [pc, #572]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019af4:	2200      	movs	r2, #0
 8019af6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019af8:	4b8d      	ldr	r3, [pc, #564]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019afa:	2200      	movs	r2, #0
 8019afc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	4a8a      	ldr	r2, [pc, #552]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b06:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	7cda      	ldrb	r2, [r3, #19]
 8019b0c:	4b88      	ldr	r3, [pc, #544]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	089b      	lsrs	r3, r3, #2
 8019b18:	4a85      	ldr	r2, [pc, #532]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b1a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019b1c:	68bb      	ldr	r3, [r7, #8]
 8019b1e:	685b      	ldr	r3, [r3, #4]
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	00db      	lsls	r3, r3, #3
 8019b24:	b29a      	uxth	r2, r3
 8019b26:	4b82      	ldr	r3, [pc, #520]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019b2a:	4b81      	ldr	r3, [pc, #516]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b2c:	2204      	movs	r2, #4
 8019b2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	7c9b      	ldrb	r3, [r3, #18]
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	b2da      	uxtb	r2, r3
 8019b38:	4b7d      	ldr	r3, [pc, #500]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b3e:	2200      	movs	r2, #0
 8019b40:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	7d9b      	ldrb	r3, [r3, #22]
 8019b46:	2b02      	cmp	r3, #2
 8019b48:	d003      	beq.n	8019b52 <RadioSetTxGenericConfig+0x106>
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	7d1b      	ldrb	r3, [r3, #20]
 8019b4e:	2b02      	cmp	r3, #2
 8019b50:	d12b      	bne.n	8019baa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019b52:	68bb      	ldr	r3, [r7, #8]
 8019b54:	7d5b      	ldrb	r3, [r3, #21]
 8019b56:	2bf1      	cmp	r3, #241	@ 0xf1
 8019b58:	d00a      	beq.n	8019b70 <RadioSetTxGenericConfig+0x124>
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	7d5b      	ldrb	r3, [r3, #21]
 8019b5e:	2bf2      	cmp	r3, #242	@ 0xf2
 8019b60:	d006      	beq.n	8019b70 <RadioSetTxGenericConfig+0x124>
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	7d5b      	ldrb	r3, [r3, #21]
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	d002      	beq.n	8019b70 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b6e:	e199      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019b74:	2301      	movs	r3, #1
 8019b76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8019d34 <RadioSetTxGenericConfig+0x2e8>)
 8019b7c:	6819      	ldr	r1, [r3, #0]
 8019b7e:	f107 0320 	add.w	r3, r7, #32
 8019b82:	4a6d      	ldr	r2, [pc, #436]	@ (8019d38 <RadioSetTxGenericConfig+0x2ec>)
 8019b84:	4618      	mov	r0, r3
 8019b86:	f001 fb6d 	bl	801b264 <RFW_Init>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d002      	beq.n	8019b96 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019b90:	f04f 33ff 	mov.w	r3, #4294967295
 8019b94:	e186      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019b96:	4b66      	ldr	r3, [pc, #408]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b98:	2200      	movs	r2, #0
 8019b9a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019b9c:	4b64      	ldr	r3, [pc, #400]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019b9e:	2201      	movs	r2, #1
 8019ba0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019ba2:	4b63      	ldr	r3, [pc, #396]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	755a      	strb	r2, [r3, #21]
        {
 8019ba8:	e00b      	b.n	8019bc2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	7d5a      	ldrb	r2, [r3, #21]
 8019bae:	4b60      	ldr	r3, [pc, #384]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019bb0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	7d9a      	ldrb	r2, [r3, #22]
 8019bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019bb8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	7d1a      	ldrb	r2, [r3, #20]
 8019bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019bc0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019bc2:	f7ff f8a2 	bl	8018d0a <RadioStandby>
        RadioSetModem( radio_modem );
 8019bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7fe fa4a 	bl	8018064 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019bd0:	485a      	ldr	r0, [pc, #360]	@ (8019d3c <RadioSetTxGenericConfig+0x2f0>)
 8019bd2:	f000 fe63 	bl	801a89c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bd6:	485a      	ldr	r0, [pc, #360]	@ (8019d40 <RadioSetTxGenericConfig+0x2f4>)
 8019bd8:	f000 ff32 	bl	801aa40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019be0:	4618      	mov	r0, r3
 8019be2:	f000 f9fa 	bl	8019fda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	8a1b      	ldrh	r3, [r3, #16]
 8019bea:	4618      	mov	r0, r3
 8019bec:	f000 fa44 	bl	801a078 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	899b      	ldrh	r3, [r3, #12]
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f000 fa1f 	bl	801a038 <SUBGRF_SetCrcPolynomial>
        break;
 8019bfa:	e13f      	b.n	8019e7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019c04:	f04f 33ff 	mov.w	r3, #4294967295
 8019c08:	e14c      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	7c9b      	ldrb	r3, [r3, #18]
 8019c0e:	2b08      	cmp	r3, #8
 8019c10:	d902      	bls.n	8019c18 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019c12:	f04f 33ff 	mov.w	r3, #4294967295
 8019c16:	e145      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	6899      	ldr	r1, [r3, #8]
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	7c9b      	ldrb	r3, [r3, #18]
 8019c20:	461a      	mov	r2, r3
 8019c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019c26:	4618      	mov	r0, r3
 8019c28:	f001 fc1c 	bl	801b464 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c2c:	4b40      	ldr	r3, [pc, #256]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	4a3d      	ldr	r2, [pc, #244]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	7cda      	ldrb	r2, [r3, #19]
 8019c40:	4b3b      	ldr	r3, [pc, #236]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	699b      	ldr	r3, [r3, #24]
 8019c4a:	4a39      	ldr	r2, [pc, #228]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c4c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019c4e:	4b38      	ldr	r3, [pc, #224]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c50:	2200      	movs	r2, #0
 8019c52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	685b      	ldr	r3, [r3, #4]
 8019c58:	b29b      	uxth	r3, r3
 8019c5a:	00db      	lsls	r3, r3, #3
 8019c5c:	b29a      	uxth	r2, r3
 8019c5e:	4b34      	ldr	r3, [pc, #208]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019c62:	4b33      	ldr	r3, [pc, #204]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c64:	2204      	movs	r2, #4
 8019c66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	7c9b      	ldrb	r3, [r3, #18]
 8019c6c:	00db      	lsls	r3, r3, #3
 8019c6e:	b2da      	uxtb	r2, r3
 8019c70:	4b2f      	ldr	r3, [pc, #188]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019c74:	4b2e      	ldr	r3, [pc, #184]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019c76:	2200      	movs	r2, #0
 8019c78:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	7d9b      	ldrb	r3, [r3, #22]
 8019c7e:	2b02      	cmp	r3, #2
 8019c80:	d003      	beq.n	8019c8a <RadioSetTxGenericConfig+0x23e>
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	7d1b      	ldrb	r3, [r3, #20]
 8019c86:	2b02      	cmp	r3, #2
 8019c88:	d12a      	bne.n	8019ce0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	7d5b      	ldrb	r3, [r3, #21]
 8019c8e:	2bf1      	cmp	r3, #241	@ 0xf1
 8019c90:	d00a      	beq.n	8019ca8 <RadioSetTxGenericConfig+0x25c>
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	7d5b      	ldrb	r3, [r3, #21]
 8019c96:	2bf2      	cmp	r3, #242	@ 0xf2
 8019c98:	d006      	beq.n	8019ca8 <RadioSetTxGenericConfig+0x25c>
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	7d5b      	ldrb	r3, [r3, #21]
 8019c9e:	2b01      	cmp	r3, #1
 8019ca0:	d002      	beq.n	8019ca8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ca6:	e0fd      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019ca8:	2301      	movs	r3, #1
 8019caa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019cb0:	4b20      	ldr	r3, [pc, #128]	@ (8019d34 <RadioSetTxGenericConfig+0x2e8>)
 8019cb2:	6819      	ldr	r1, [r3, #0]
 8019cb4:	f107 0314 	add.w	r3, r7, #20
 8019cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8019d38 <RadioSetTxGenericConfig+0x2ec>)
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f001 fad2 	bl	801b264 <RFW_Init>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d002      	beq.n	8019ccc <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8019cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8019cca:	e0eb      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019ccc:	4b18      	ldr	r3, [pc, #96]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019cce:	2200      	movs	r2, #0
 8019cd0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019cd2:	4b17      	ldr	r3, [pc, #92]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019cd8:	4b15      	ldr	r3, [pc, #84]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019cda:	2200      	movs	r2, #0
 8019cdc:	755a      	strb	r2, [r3, #21]
        {
 8019cde:	e00b      	b.n	8019cf8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	7d5a      	ldrb	r2, [r3, #21]
 8019ce4:	4b12      	ldr	r3, [pc, #72]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019ce6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	7d9a      	ldrb	r2, [r3, #22]
 8019cec:	4b10      	ldr	r3, [pc, #64]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019cee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	7d1a      	ldrb	r2, [r3, #20]
 8019cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8019d30 <RadioSetTxGenericConfig+0x2e4>)
 8019cf6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019cf8:	f7ff f807 	bl	8018d0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019cfc:	2000      	movs	r0, #0
 8019cfe:	f7fe f9b1 	bl	8018064 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d02:	480e      	ldr	r0, [pc, #56]	@ (8019d3c <RadioSetTxGenericConfig+0x2f0>)
 8019d04:	f000 fdca 	bl	801a89c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d08:	480d      	ldr	r0, [pc, #52]	@ (8019d40 <RadioSetTxGenericConfig+0x2f4>)
 8019d0a:	f000 fe99 	bl	801aa40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019d12:	4618      	mov	r0, r3
 8019d14:	f000 f961 	bl	8019fda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019d18:	68bb      	ldr	r3, [r7, #8]
 8019d1a:	8a1b      	ldrh	r3, [r3, #16]
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f000 f9ab 	bl	801a078 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	899b      	ldrh	r3, [r3, #12]
 8019d26:	4618      	mov	r0, r3
 8019d28:	f000 f986 	bl	801a038 <SUBGRF_SetCrcPolynomial>
        break;
 8019d2c:	e0a6      	b.n	8019e7c <RadioSetTxGenericConfig+0x430>
 8019d2e:	bf00      	nop
 8019d30:	20001ce8 	.word	0x20001ce8
 8019d34:	20001ce4 	.word	0x20001ce4
 8019d38:	20001d44 	.word	0x20001d44
 8019d3c:	20001d20 	.word	0x20001d20
 8019d40:	20001cf6 	.word	0x20001cf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019d44:	4b59      	ldr	r3, [pc, #356]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d46:	2201      	movs	r2, #1
 8019d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	781a      	ldrb	r2, [r3, #0]
 8019d50:	4b56      	ldr	r3, [pc, #344]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	785a      	ldrb	r2, [r3, #1]
 8019d5a:	4b54      	ldr	r3, [pc, #336]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	789a      	ldrb	r2, [r3, #2]
 8019d64:	4b51      	ldr	r3, [pc, #324]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019d6a:	68bb      	ldr	r3, [r7, #8]
 8019d6c:	78db      	ldrb	r3, [r3, #3]
 8019d6e:	2b02      	cmp	r3, #2
 8019d70:	d010      	beq.n	8019d94 <RadioSetTxGenericConfig+0x348>
 8019d72:	2b02      	cmp	r3, #2
 8019d74:	dc20      	bgt.n	8019db8 <RadioSetTxGenericConfig+0x36c>
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d002      	beq.n	8019d80 <RadioSetTxGenericConfig+0x334>
 8019d7a:	2b01      	cmp	r3, #1
 8019d7c:	d005      	beq.n	8019d8a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8019d7e:	e01b      	b.n	8019db8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019d80:	4b4a      	ldr	r3, [pc, #296]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d82:	2200      	movs	r2, #0
 8019d84:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019d88:	e017      	b.n	8019dba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019d8a:	4b48      	ldr	r3, [pc, #288]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019d8c:	2201      	movs	r2, #1
 8019d8e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019d92:	e012      	b.n	8019dba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	2b0b      	cmp	r3, #11
 8019d9a:	d003      	beq.n	8019da4 <RadioSetTxGenericConfig+0x358>
 8019d9c:	68bb      	ldr	r3, [r7, #8]
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	2b0c      	cmp	r3, #12
 8019da2:	d104      	bne.n	8019dae <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019da4:	4b41      	ldr	r3, [pc, #260]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019da6:	2201      	movs	r2, #1
 8019da8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019dac:	e005      	b.n	8019dba <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019dae:	4b3f      	ldr	r3, [pc, #252]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019db0:	2200      	movs	r2, #0
 8019db2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019db6:	e000      	b.n	8019dba <RadioSetTxGenericConfig+0x36e>
            break;
 8019db8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019dba:	4b3c      	ldr	r3, [pc, #240]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019dbc:	2201      	movs	r2, #1
 8019dbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	889a      	ldrh	r2, [r3, #4]
 8019dc4:	4b39      	ldr	r3, [pc, #228]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019dc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	799a      	ldrb	r2, [r3, #6]
 8019dcc:	4b37      	ldr	r3, [pc, #220]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019dce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	79da      	ldrb	r2, [r3, #7]
 8019dd4:	4b35      	ldr	r3, [pc, #212]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019dd6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019dda:	68bb      	ldr	r3, [r7, #8]
 8019ddc:	7a1a      	ldrb	r2, [r3, #8]
 8019dde:	4b33      	ldr	r3, [pc, #204]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019de0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8019de4:	f7fe ff91 	bl	8018d0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019de8:	2001      	movs	r0, #1
 8019dea:	f7fe f93b 	bl	8018064 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019dee:	4830      	ldr	r0, [pc, #192]	@ (8019eb0 <RadioSetTxGenericConfig+0x464>)
 8019df0:	f000 fd54 	bl	801a89c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019df4:	482f      	ldr	r0, [pc, #188]	@ (8019eb4 <RadioSetTxGenericConfig+0x468>)
 8019df6:	f000 fe23 	bl	801aa40 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8019dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019e00:	2b06      	cmp	r3, #6
 8019e02:	d10d      	bne.n	8019e20 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019e04:	f640 0089 	movw	r0, #2185	@ 0x889
 8019e08:	f000 ff76 	bl	801acf8 <SUBGRF_ReadRegister>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	f023 0304 	bic.w	r3, r3, #4
 8019e12:	b2db      	uxtb	r3, r3
 8019e14:	4619      	mov	r1, r3
 8019e16:	f640 0089 	movw	r0, #2185	@ 0x889
 8019e1a:	f000 ff59 	bl	801acd0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8019e1e:	e02d      	b.n	8019e7c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019e20:	f640 0089 	movw	r0, #2185	@ 0x889
 8019e24:	f000 ff68 	bl	801acf8 <SUBGRF_ReadRegister>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	f043 0304 	orr.w	r3, r3, #4
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	4619      	mov	r1, r3
 8019e32:	f640 0089 	movw	r0, #2185	@ 0x889
 8019e36:	f000 ff4b 	bl	801acd0 <SUBGRF_WriteRegister>
        break;
 8019e3a:	e01f      	b.n	8019e7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d004      	beq.n	8019e4e <RadioSetTxGenericConfig+0x402>
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019e4c:	d902      	bls.n	8019e54 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8019e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e52:	e027      	b.n	8019ea4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8019e54:	2003      	movs	r0, #3
 8019e56:	f7fe f905 	bl	8018064 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019e5a:	4b14      	ldr	r3, [pc, #80]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e5c:	2202      	movs	r2, #2
 8019e5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019e62:	68bb      	ldr	r3, [r7, #8]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	4a11      	ldr	r2, [pc, #68]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e68:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019e6a:	4b10      	ldr	r3, [pc, #64]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e6c:	2216      	movs	r2, #22
 8019e6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e72:	480f      	ldr	r0, [pc, #60]	@ (8019eb0 <RadioSetTxGenericConfig+0x464>)
 8019e74:	f000 fd12 	bl	801a89c <SUBGRF_SetModulationParams>
        break;
 8019e78:	e000      	b.n	8019e7c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8019e7a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019e7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019e80:	4618      	mov	r0, r3
 8019e82:	f001 f841 	bl	801af08 <SUBGRF_SetRfTxPower>
 8019e86:	4603      	mov	r3, r0
 8019e88:	461a      	mov	r2, r3
 8019e8a:	4b08      	ldr	r3, [pc, #32]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e8c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019e90:	4b06      	ldr	r3, [pc, #24]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e92:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019e96:	4618      	mov	r0, r3
 8019e98:	f001 fa05 	bl	801b2a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019e9c:	4a03      	ldr	r2, [pc, #12]	@ (8019eac <RadioSetTxGenericConfig+0x460>)
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6053      	str	r3, [r2, #4]
    return 0;
 8019ea2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	3738      	adds	r7, #56	@ 0x38
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}
 8019eac:	20001ce8 	.word	0x20001ce8
 8019eb0:	20001d20 	.word	0x20001d20
 8019eb4:	20001cf6 	.word	0x20001cf6

08019eb8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d002      	beq.n	8019ecc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8019f30 <SUBGRF_Init+0x78>)
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019ecc:	f7e8 fa76 	bl	80023bc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019ed0:	2002      	movs	r0, #2
 8019ed2:	f001 f8e5 	bl	801b0a0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019ed6:	4b17      	ldr	r3, [pc, #92]	@ (8019f34 <SUBGRF_Init+0x7c>)
 8019ed8:	2200      	movs	r2, #0
 8019eda:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019edc:	2000      	movs	r0, #0
 8019ede:	f000 f977 	bl	801a1d0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019ee2:	f7f1 fd8f 	bl	800ba04 <RBI_IsTCXO>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	2b01      	cmp	r3, #1
 8019eea:	d10e      	bne.n	8019f0a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019eec:	2140      	movs	r1, #64	@ 0x40
 8019eee:	2001      	movs	r0, #1
 8019ef0:	f000 fb78 	bl	801a5e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019ef4:	2100      	movs	r1, #0
 8019ef6:	f640 1011 	movw	r0, #2321	@ 0x911
 8019efa:	f000 fee9 	bl	801acd0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019efe:	237f      	movs	r3, #127	@ 0x7f
 8019f00:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019f02:	7b38      	ldrb	r0, [r7, #12]
 8019f04:	f000 fa85 	bl	801a412 <SUBGRF_Calibrate>
 8019f08:	e009      	b.n	8019f1e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019f0a:	2120      	movs	r1, #32
 8019f0c:	f640 1011 	movw	r0, #2321	@ 0x911
 8019f10:	f000 fede 	bl	801acd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019f14:	2120      	movs	r1, #32
 8019f16:	f640 1012 	movw	r0, #2322	@ 0x912
 8019f1a:	f000 fed9 	bl	801acd0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019f1e:	f7f1 fd55 	bl	800b9cc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019f22:	4b05      	ldr	r3, [pc, #20]	@ (8019f38 <SUBGRF_Init+0x80>)
 8019f24:	2201      	movs	r2, #1
 8019f26:	701a      	strb	r2, [r3, #0]
}
 8019f28:	bf00      	nop
 8019f2a:	3710      	adds	r7, #16
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	20001d80 	.word	0x20001d80
 8019f34:	20001d7c 	.word	0x20001d7c
 8019f38:	20001d74 	.word	0x20001d74

08019f3c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019f40:	4b02      	ldr	r3, [pc, #8]	@ (8019f4c <SUBGRF_GetOperatingMode+0x10>)
 8019f42:	781b      	ldrb	r3, [r3, #0]
}
 8019f44:	4618      	mov	r0, r3
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bc80      	pop	{r7}
 8019f4a:	4770      	bx	lr
 8019f4c:	20001d74 	.word	0x20001d74

08019f50 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
 8019f58:	460b      	mov	r3, r1
 8019f5a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019f5c:	78fb      	ldrb	r3, [r7, #3]
 8019f5e:	461a      	mov	r2, r3
 8019f60:	6879      	ldr	r1, [r7, #4]
 8019f62:	2000      	movs	r0, #0
 8019f64:	f000 ff20 	bl	801ada8 <SUBGRF_WriteBuffer>
}
 8019f68:	bf00      	nop
 8019f6a:	3708      	adds	r7, #8
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd80      	pop	{r7, pc}

08019f70 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019f82:	f107 0317 	add.w	r3, r7, #23
 8019f86:	4619      	mov	r1, r3
 8019f88:	68b8      	ldr	r0, [r7, #8]
 8019f8a:	f000 fe23 	bl	801abd4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	79fa      	ldrb	r2, [r7, #7]
 8019f94:	429a      	cmp	r2, r3
 8019f96:	d201      	bcs.n	8019f9c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019f98:	2301      	movs	r3, #1
 8019f9a:	e007      	b.n	8019fac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019f9c:	7df8      	ldrb	r0, [r7, #23]
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	461a      	mov	r2, r3
 8019fa4:	68f9      	ldr	r1, [r7, #12]
 8019fa6:	f000 ff21 	bl	801adec <SUBGRF_ReadBuffer>

    return 0;
 8019faa:	2300      	movs	r3, #0
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	3718      	adds	r7, #24
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bd80      	pop	{r7, pc}

08019fb4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b084      	sub	sp, #16
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	60f8      	str	r0, [r7, #12]
 8019fbc:	460b      	mov	r3, r1
 8019fbe:	607a      	str	r2, [r7, #4]
 8019fc0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019fc2:	7afb      	ldrb	r3, [r7, #11]
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	68f8      	ldr	r0, [r7, #12]
 8019fc8:	f7ff ffc2 	bl	8019f50 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019fcc:	6878      	ldr	r0, [r7, #4]
 8019fce:	f000 f91b 	bl	801a208 <SUBGRF_SetTx>
}
 8019fd2:	bf00      	nop
 8019fd4:	3710      	adds	r7, #16
 8019fd6:	46bd      	mov	sp, r7
 8019fd8:	bd80      	pop	{r7, pc}

08019fda <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019fda:	b580      	push	{r7, lr}
 8019fdc:	b082      	sub	sp, #8
 8019fde:	af00      	add	r7, sp, #0
 8019fe0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019fe2:	2208      	movs	r2, #8
 8019fe4:	6879      	ldr	r1, [r7, #4]
 8019fe6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8019fea:	f000 fe99 	bl	801ad20 <SUBGRF_WriteRegisters>
    return 0;
 8019fee:	2300      	movs	r3, #0
}
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3708      	adds	r7, #8
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}

08019ff8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b084      	sub	sp, #16
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	4603      	mov	r3, r0
 801a000:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a002:	88fb      	ldrh	r3, [r7, #6]
 801a004:	0a1b      	lsrs	r3, r3, #8
 801a006:	b29b      	uxth	r3, r3
 801a008:	b2db      	uxtb	r3, r3
 801a00a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a00c:	88fb      	ldrh	r3, [r7, #6]
 801a00e:	b2db      	uxtb	r3, r3
 801a010:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a012:	f000 fb6b 	bl	801a6ec <SUBGRF_GetPacketType>
 801a016:	4603      	mov	r3, r0
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d108      	bne.n	801a02e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a01c:	f107 030c 	add.w	r3, r7, #12
 801a020:	2202      	movs	r2, #2
 801a022:	4619      	mov	r1, r3
 801a024:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a028:	f000 fe7a 	bl	801ad20 <SUBGRF_WriteRegisters>
            break;
 801a02c:	e000      	b.n	801a030 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a02e:	bf00      	nop
    }
}
 801a030:	bf00      	nop
 801a032:	3710      	adds	r7, #16
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}

0801a038 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b084      	sub	sp, #16
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	4603      	mov	r3, r0
 801a040:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a042:	88fb      	ldrh	r3, [r7, #6]
 801a044:	0a1b      	lsrs	r3, r3, #8
 801a046:	b29b      	uxth	r3, r3
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a04c:	88fb      	ldrh	r3, [r7, #6]
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a052:	f000 fb4b 	bl	801a6ec <SUBGRF_GetPacketType>
 801a056:	4603      	mov	r3, r0
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d108      	bne.n	801a06e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a05c:	f107 030c 	add.w	r3, r7, #12
 801a060:	2202      	movs	r2, #2
 801a062:	4619      	mov	r1, r3
 801a064:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a068:	f000 fe5a 	bl	801ad20 <SUBGRF_WriteRegisters>
            break;
 801a06c:	e000      	b.n	801a070 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a06e:	bf00      	nop
    }
}
 801a070:	bf00      	nop
 801a072:	3710      	adds	r7, #16
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}

0801a078 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b084      	sub	sp, #16
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	4603      	mov	r3, r0
 801a080:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a082:	2300      	movs	r3, #0
 801a084:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a086:	f000 fb31 	bl	801a6ec <SUBGRF_GetPacketType>
 801a08a:	4603      	mov	r3, r0
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d121      	bne.n	801a0d4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a090:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a094:	f000 fe30 	bl	801acf8 <SUBGRF_ReadRegister>
 801a098:	4603      	mov	r3, r0
 801a09a:	f023 0301 	bic.w	r3, r3, #1
 801a09e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a0a0:	88fb      	ldrh	r3, [r7, #6]
 801a0a2:	0a1b      	lsrs	r3, r3, #8
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	b25b      	sxtb	r3, r3
 801a0a8:	f003 0301 	and.w	r3, r3, #1
 801a0ac:	b25a      	sxtb	r2, r3
 801a0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0b2:	4313      	orrs	r3, r2
 801a0b4:	b25b      	sxtb	r3, r3
 801a0b6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a0b8:	7bfb      	ldrb	r3, [r7, #15]
 801a0ba:	4619      	mov	r1, r3
 801a0bc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a0c0:	f000 fe06 	bl	801acd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a0c4:	88fb      	ldrh	r3, [r7, #6]
 801a0c6:	b2db      	uxtb	r3, r3
 801a0c8:	4619      	mov	r1, r3
 801a0ca:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a0ce:	f000 fdff 	bl	801acd0 <SUBGRF_WriteRegister>
            break;
 801a0d2:	e000      	b.n	801a0d6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a0d4:	bf00      	nop
    }
}
 801a0d6:	bf00      	nop
 801a0d8:	3710      	adds	r7, #16
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}

0801a0de <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a0de:	b580      	push	{r7, lr}
 801a0e0:	b082      	sub	sp, #8
 801a0e2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a0f0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a0f4:	f000 fe00 	bl	801acf8 <SUBGRF_ReadRegister>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a0fc:	79fb      	ldrb	r3, [r7, #7]
 801a0fe:	f023 0301 	bic.w	r3, r3, #1
 801a102:	b2db      	uxtb	r3, r3
 801a104:	4619      	mov	r1, r3
 801a106:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a10a:	f000 fde1 	bl	801acd0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a10e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a112:	f000 fdf1 	bl	801acf8 <SUBGRF_ReadRegister>
 801a116:	4603      	mov	r3, r0
 801a118:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a11a:	79bb      	ldrb	r3, [r7, #6]
 801a11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a120:	b2db      	uxtb	r3, r3
 801a122:	4619      	mov	r1, r3
 801a124:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a128:	f000 fdd2 	bl	801acd0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a12c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a130:	f000 f88a 	bl	801a248 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a134:	463b      	mov	r3, r7
 801a136:	2204      	movs	r2, #4
 801a138:	4619      	mov	r1, r3
 801a13a:	f640 0019 	movw	r0, #2073	@ 0x819
 801a13e:	f000 fe11 	bl	801ad64 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a142:	2000      	movs	r0, #0
 801a144:	f000 f844 	bl	801a1d0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a148:	79fb      	ldrb	r3, [r7, #7]
 801a14a:	4619      	mov	r1, r3
 801a14c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a150:	f000 fdbe 	bl	801acd0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a154:	79bb      	ldrb	r3, [r7, #6]
 801a156:	4619      	mov	r1, r3
 801a158:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a15c:	f000 fdb8 	bl	801acd0 <SUBGRF_WriteRegister>

    return number;
 801a160:	683b      	ldr	r3, [r7, #0]
}
 801a162:	4618      	mov	r0, r3
 801a164:	3708      	adds	r7, #8
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
	...

0801a16c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b084      	sub	sp, #16
 801a170:	af00      	add	r7, sp, #0
 801a172:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a174:	2000      	movs	r0, #0
 801a176:	f7f1 fc30 	bl	800b9da <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a17a:	2002      	movs	r0, #2
 801a17c:	f000 ff90 	bl	801b0a0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a180:	793b      	ldrb	r3, [r7, #4]
 801a182:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a186:	b2db      	uxtb	r3, r3
 801a188:	009b      	lsls	r3, r3, #2
 801a18a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a18c:	793b      	ldrb	r3, [r7, #4]
 801a18e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a192:	b2db      	uxtb	r3, r3
 801a194:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a196:	b25b      	sxtb	r3, r3
 801a198:	4313      	orrs	r3, r2
 801a19a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a19c:	793b      	ldrb	r3, [r7, #4]
 801a19e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a1a6:	4313      	orrs	r3, r2
 801a1a8:	b25b      	sxtb	r3, r3
 801a1aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a1ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a1ae:	f107 030f 	add.w	r3, r7, #15
 801a1b2:	2201      	movs	r2, #1
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	2084      	movs	r0, #132	@ 0x84
 801a1b8:	f000 fe3a 	bl	801ae30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a1bc:	4b03      	ldr	r3, [pc, #12]	@ (801a1cc <SUBGRF_SetSleep+0x60>)
 801a1be:	2200      	movs	r2, #0
 801a1c0:	701a      	strb	r2, [r3, #0]
}
 801a1c2:	bf00      	nop
 801a1c4:	3710      	adds	r7, #16
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bd80      	pop	{r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	20001d74 	.word	0x20001d74

0801a1d0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b082      	sub	sp, #8
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a1da:	1dfb      	adds	r3, r7, #7
 801a1dc:	2201      	movs	r2, #1
 801a1de:	4619      	mov	r1, r3
 801a1e0:	2080      	movs	r0, #128	@ 0x80
 801a1e2:	f000 fe25 	bl	801ae30 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a1e6:	79fb      	ldrb	r3, [r7, #7]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d103      	bne.n	801a1f4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a1ec:	4b05      	ldr	r3, [pc, #20]	@ (801a204 <SUBGRF_SetStandby+0x34>)
 801a1ee:	2201      	movs	r2, #1
 801a1f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a1f2:	e002      	b.n	801a1fa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a1f4:	4b03      	ldr	r3, [pc, #12]	@ (801a204 <SUBGRF_SetStandby+0x34>)
 801a1f6:	2202      	movs	r2, #2
 801a1f8:	701a      	strb	r2, [r3, #0]
}
 801a1fa:	bf00      	nop
 801a1fc:	3708      	adds	r7, #8
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	20001d74 	.word	0x20001d74

0801a208 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b084      	sub	sp, #16
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a210:	4b0c      	ldr	r3, [pc, #48]	@ (801a244 <SUBGRF_SetTx+0x3c>)
 801a212:	2204      	movs	r2, #4
 801a214:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	0c1b      	lsrs	r3, r3, #16
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	0a1b      	lsrs	r3, r3, #8
 801a222:	b2db      	uxtb	r3, r3
 801a224:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	b2db      	uxtb	r3, r3
 801a22a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a22c:	f107 030c 	add.w	r3, r7, #12
 801a230:	2203      	movs	r2, #3
 801a232:	4619      	mov	r1, r3
 801a234:	2083      	movs	r0, #131	@ 0x83
 801a236:	f000 fdfb 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a23a:	bf00      	nop
 801a23c:	3710      	adds	r7, #16
 801a23e:	46bd      	mov	sp, r7
 801a240:	bd80      	pop	{r7, pc}
 801a242:	bf00      	nop
 801a244:	20001d74 	.word	0x20001d74

0801a248 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b084      	sub	sp, #16
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a250:	4b0c      	ldr	r3, [pc, #48]	@ (801a284 <SUBGRF_SetRx+0x3c>)
 801a252:	2205      	movs	r2, #5
 801a254:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	0c1b      	lsrs	r3, r3, #16
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	0a1b      	lsrs	r3, r3, #8
 801a262:	b2db      	uxtb	r3, r3
 801a264:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	b2db      	uxtb	r3, r3
 801a26a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a26c:	f107 030c 	add.w	r3, r7, #12
 801a270:	2203      	movs	r2, #3
 801a272:	4619      	mov	r1, r3
 801a274:	2082      	movs	r0, #130	@ 0x82
 801a276:	f000 fddb 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a27a:	bf00      	nop
 801a27c:	3710      	adds	r7, #16
 801a27e:	46bd      	mov	sp, r7
 801a280:	bd80      	pop	{r7, pc}
 801a282:	bf00      	nop
 801a284:	20001d74 	.word	0x20001d74

0801a288 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b084      	sub	sp, #16
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a290:	4b0e      	ldr	r3, [pc, #56]	@ (801a2cc <SUBGRF_SetRxBoosted+0x44>)
 801a292:	2205      	movs	r2, #5
 801a294:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a296:	2197      	movs	r1, #151	@ 0x97
 801a298:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a29c:	f000 fd18 	bl	801acd0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	0c1b      	lsrs	r3, r3, #16
 801a2a4:	b2db      	uxtb	r3, r3
 801a2a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	0a1b      	lsrs	r3, r3, #8
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a2b6:	f107 030c 	add.w	r3, r7, #12
 801a2ba:	2203      	movs	r2, #3
 801a2bc:	4619      	mov	r1, r3
 801a2be:	2082      	movs	r0, #130	@ 0x82
 801a2c0:	f000 fdb6 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a2c4:	bf00      	nop
 801a2c6:	3710      	adds	r7, #16
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}
 801a2cc:	20001d74 	.word	0x20001d74

0801a2d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
 801a2d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	0c1b      	lsrs	r3, r3, #16
 801a2de:	b2db      	uxtb	r3, r3
 801a2e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	0a1b      	lsrs	r3, r3, #8
 801a2e6:	b2db      	uxtb	r3, r3
 801a2e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	0c1b      	lsrs	r3, r3, #16
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	0a1b      	lsrs	r3, r3, #8
 801a2fc:	b2db      	uxtb	r3, r3
 801a2fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a300:	683b      	ldr	r3, [r7, #0]
 801a302:	b2db      	uxtb	r3, r3
 801a304:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a306:	f107 0308 	add.w	r3, r7, #8
 801a30a:	2206      	movs	r2, #6
 801a30c:	4619      	mov	r1, r3
 801a30e:	2094      	movs	r0, #148	@ 0x94
 801a310:	f000 fd8e 	bl	801ae30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a314:	4b03      	ldr	r3, [pc, #12]	@ (801a324 <SUBGRF_SetRxDutyCycle+0x54>)
 801a316:	2206      	movs	r2, #6
 801a318:	701a      	strb	r2, [r3, #0]
}
 801a31a:	bf00      	nop
 801a31c:	3710      	adds	r7, #16
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}
 801a322:	bf00      	nop
 801a324:	20001d74 	.word	0x20001d74

0801a328 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a32c:	2200      	movs	r2, #0
 801a32e:	2100      	movs	r1, #0
 801a330:	20c5      	movs	r0, #197	@ 0xc5
 801a332:	f000 fd7d 	bl	801ae30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a336:	4b02      	ldr	r3, [pc, #8]	@ (801a340 <SUBGRF_SetCad+0x18>)
 801a338:	2207      	movs	r2, #7
 801a33a:	701a      	strb	r2, [r3, #0]
}
 801a33c:	bf00      	nop
 801a33e:	bd80      	pop	{r7, pc}
 801a340:	20001d74 	.word	0x20001d74

0801a344 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a344:	b580      	push	{r7, lr}
 801a346:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a348:	2200      	movs	r2, #0
 801a34a:	2100      	movs	r1, #0
 801a34c:	20d1      	movs	r0, #209	@ 0xd1
 801a34e:	f000 fd6f 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a352:	bf00      	nop
 801a354:	bd80      	pop	{r7, pc}

0801a356 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a356:	b580      	push	{r7, lr}
 801a358:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a35a:	2200      	movs	r2, #0
 801a35c:	2100      	movs	r1, #0
 801a35e:	20d2      	movs	r0, #210	@ 0xd2
 801a360:	f000 fd66 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a364:	bf00      	nop
 801a366:	bd80      	pop	{r7, pc}

0801a368 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	4603      	mov	r3, r0
 801a370:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a372:	1dfb      	adds	r3, r7, #7
 801a374:	2201      	movs	r2, #1
 801a376:	4619      	mov	r1, r3
 801a378:	209f      	movs	r0, #159	@ 0x9f
 801a37a:	f000 fd59 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a37e:	bf00      	nop
 801a380:	3708      	adds	r7, #8
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}

0801a386 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a386:	b580      	push	{r7, lr}
 801a388:	b084      	sub	sp, #16
 801a38a:	af00      	add	r7, sp, #0
 801a38c:	4603      	mov	r3, r0
 801a38e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a390:	1dfb      	adds	r3, r7, #7
 801a392:	2201      	movs	r2, #1
 801a394:	4619      	mov	r1, r3
 801a396:	20a0      	movs	r0, #160	@ 0xa0
 801a398:	f000 fd4a 	bl	801ae30 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a39c:	79fb      	ldrb	r3, [r7, #7]
 801a39e:	2b3f      	cmp	r3, #63	@ 0x3f
 801a3a0:	d91c      	bls.n	801a3dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a3a2:	79fb      	ldrb	r3, [r7, #7]
 801a3a4:	085b      	lsrs	r3, r3, #1
 801a3a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a3b0:	e005      	b.n	801a3be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a3b2:	7bfb      	ldrb	r3, [r7, #15]
 801a3b4:	089b      	lsrs	r3, r3, #2
 801a3b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a3b8:	7bbb      	ldrb	r3, [r7, #14]
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a3be:	7bfb      	ldrb	r3, [r7, #15]
 801a3c0:	2b1f      	cmp	r3, #31
 801a3c2:	d8f6      	bhi.n	801a3b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a3c4:	7bfb      	ldrb	r3, [r7, #15]
 801a3c6:	00db      	lsls	r3, r3, #3
 801a3c8:	b2da      	uxtb	r2, r3
 801a3ca:	7bbb      	ldrb	r3, [r7, #14]
 801a3cc:	4413      	add	r3, r2
 801a3ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a3d0:	7b7b      	ldrb	r3, [r7, #13]
 801a3d2:	4619      	mov	r1, r3
 801a3d4:	f240 7006 	movw	r0, #1798	@ 0x706
 801a3d8:	f000 fc7a 	bl	801acd0 <SUBGRF_WriteRegister>
    }
}
 801a3dc:	bf00      	nop
 801a3de:	3710      	adds	r7, #16
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}

0801a3e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b082      	sub	sp, #8
 801a3e8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a3ea:	f7f1 fb12 	bl	800ba12 <RBI_IsDCDC>
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	2b01      	cmp	r3, #1
 801a3f2:	d102      	bne.n	801a3fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	71fb      	strb	r3, [r7, #7]
 801a3f8:	e001      	b.n	801a3fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a3fe:	1dfb      	adds	r3, r7, #7
 801a400:	2201      	movs	r2, #1
 801a402:	4619      	mov	r1, r3
 801a404:	2096      	movs	r0, #150	@ 0x96
 801a406:	f000 fd13 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a40a:	bf00      	nop
 801a40c:	3708      	adds	r7, #8
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}

0801a412 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a412:	b580      	push	{r7, lr}
 801a414:	b084      	sub	sp, #16
 801a416:	af00      	add	r7, sp, #0
 801a418:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a41a:	793b      	ldrb	r3, [r7, #4]
 801a41c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a420:	b2db      	uxtb	r3, r3
 801a422:	019b      	lsls	r3, r3, #6
 801a424:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a426:	793b      	ldrb	r3, [r7, #4]
 801a428:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a430:	b25b      	sxtb	r3, r3
 801a432:	4313      	orrs	r3, r2
 801a434:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a436:	793b      	ldrb	r3, [r7, #4]
 801a438:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a440:	b25b      	sxtb	r3, r3
 801a442:	4313      	orrs	r3, r2
 801a444:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a446:	793b      	ldrb	r3, [r7, #4]
 801a448:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a450:	b25b      	sxtb	r3, r3
 801a452:	4313      	orrs	r3, r2
 801a454:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a456:	793b      	ldrb	r3, [r7, #4]
 801a458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a45c:	b2db      	uxtb	r3, r3
 801a45e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a460:	b25b      	sxtb	r3, r3
 801a462:	4313      	orrs	r3, r2
 801a464:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a466:	793b      	ldrb	r3, [r7, #4]
 801a468:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a46c:	b2db      	uxtb	r3, r3
 801a46e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a470:	b25b      	sxtb	r3, r3
 801a472:	4313      	orrs	r3, r2
 801a474:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a476:	793b      	ldrb	r3, [r7, #4]
 801a478:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a480:	4313      	orrs	r3, r2
 801a482:	b25b      	sxtb	r3, r3
 801a484:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a486:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a488:	f107 030f 	add.w	r3, r7, #15
 801a48c:	2201      	movs	r2, #1
 801a48e:	4619      	mov	r1, r3
 801a490:	2089      	movs	r0, #137	@ 0x89
 801a492:	f000 fccd 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a496:	bf00      	nop
 801a498:	3710      	adds	r7, #16
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bd80      	pop	{r7, pc}
	...

0801a4a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b084      	sub	sp, #16
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	4a1b      	ldr	r2, [pc, #108]	@ (801a518 <SUBGRF_CalibrateImage+0x78>)
 801a4ac:	4293      	cmp	r3, r2
 801a4ae:	d904      	bls.n	801a4ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a4b0:	23e1      	movs	r3, #225	@ 0xe1
 801a4b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a4b4:	23e9      	movs	r3, #233	@ 0xe9
 801a4b6:	737b      	strb	r3, [r7, #13]
 801a4b8:	e022      	b.n	801a500 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	4a17      	ldr	r2, [pc, #92]	@ (801a51c <SUBGRF_CalibrateImage+0x7c>)
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	d904      	bls.n	801a4cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a4c2:	23d7      	movs	r3, #215	@ 0xd7
 801a4c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a4c6:	23db      	movs	r3, #219	@ 0xdb
 801a4c8:	737b      	strb	r3, [r7, #13]
 801a4ca:	e019      	b.n	801a500 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	4a14      	ldr	r2, [pc, #80]	@ (801a520 <SUBGRF_CalibrateImage+0x80>)
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d904      	bls.n	801a4de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a4d4:	23c1      	movs	r3, #193	@ 0xc1
 801a4d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a4d8:	23c5      	movs	r3, #197	@ 0xc5
 801a4da:	737b      	strb	r3, [r7, #13]
 801a4dc:	e010      	b.n	801a500 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	4a10      	ldr	r2, [pc, #64]	@ (801a524 <SUBGRF_CalibrateImage+0x84>)
 801a4e2:	4293      	cmp	r3, r2
 801a4e4:	d904      	bls.n	801a4f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a4e6:	2375      	movs	r3, #117	@ 0x75
 801a4e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a4ea:	2381      	movs	r3, #129	@ 0x81
 801a4ec:	737b      	strb	r3, [r7, #13]
 801a4ee:	e007      	b.n	801a500 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	4a0d      	ldr	r2, [pc, #52]	@ (801a528 <SUBGRF_CalibrateImage+0x88>)
 801a4f4:	4293      	cmp	r3, r2
 801a4f6:	d903      	bls.n	801a500 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a4f8:	236b      	movs	r3, #107	@ 0x6b
 801a4fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a4fc:	236f      	movs	r3, #111	@ 0x6f
 801a4fe:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a500:	f107 030c 	add.w	r3, r7, #12
 801a504:	2202      	movs	r2, #2
 801a506:	4619      	mov	r1, r3
 801a508:	2098      	movs	r0, #152	@ 0x98
 801a50a:	f000 fc91 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a50e:	bf00      	nop
 801a510:	3710      	adds	r7, #16
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
 801a516:	bf00      	nop
 801a518:	35a4e900 	.word	0x35a4e900
 801a51c:	32a9f880 	.word	0x32a9f880
 801a520:	2de54480 	.word	0x2de54480
 801a524:	1b6b0b00 	.word	0x1b6b0b00
 801a528:	1954fc40 	.word	0x1954fc40

0801a52c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a52c:	b590      	push	{r4, r7, lr}
 801a52e:	b085      	sub	sp, #20
 801a530:	af00      	add	r7, sp, #0
 801a532:	4604      	mov	r4, r0
 801a534:	4608      	mov	r0, r1
 801a536:	4611      	mov	r1, r2
 801a538:	461a      	mov	r2, r3
 801a53a:	4623      	mov	r3, r4
 801a53c:	71fb      	strb	r3, [r7, #7]
 801a53e:	4603      	mov	r3, r0
 801a540:	71bb      	strb	r3, [r7, #6]
 801a542:	460b      	mov	r3, r1
 801a544:	717b      	strb	r3, [r7, #5]
 801a546:	4613      	mov	r3, r2
 801a548:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a54a:	79fb      	ldrb	r3, [r7, #7]
 801a54c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a54e:	79bb      	ldrb	r3, [r7, #6]
 801a550:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a552:	797b      	ldrb	r3, [r7, #5]
 801a554:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a556:	793b      	ldrb	r3, [r7, #4]
 801a558:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a55a:	f107 030c 	add.w	r3, r7, #12
 801a55e:	2204      	movs	r2, #4
 801a560:	4619      	mov	r1, r3
 801a562:	2095      	movs	r0, #149	@ 0x95
 801a564:	f000 fc64 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a568:	bf00      	nop
 801a56a:	3714      	adds	r7, #20
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd90      	pop	{r4, r7, pc}

0801a570 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a570:	b590      	push	{r4, r7, lr}
 801a572:	b085      	sub	sp, #20
 801a574:	af00      	add	r7, sp, #0
 801a576:	4604      	mov	r4, r0
 801a578:	4608      	mov	r0, r1
 801a57a:	4611      	mov	r1, r2
 801a57c:	461a      	mov	r2, r3
 801a57e:	4623      	mov	r3, r4
 801a580:	80fb      	strh	r3, [r7, #6]
 801a582:	4603      	mov	r3, r0
 801a584:	80bb      	strh	r3, [r7, #4]
 801a586:	460b      	mov	r3, r1
 801a588:	807b      	strh	r3, [r7, #2]
 801a58a:	4613      	mov	r3, r2
 801a58c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a58e:	88fb      	ldrh	r3, [r7, #6]
 801a590:	0a1b      	lsrs	r3, r3, #8
 801a592:	b29b      	uxth	r3, r3
 801a594:	b2db      	uxtb	r3, r3
 801a596:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a598:	88fb      	ldrh	r3, [r7, #6]
 801a59a:	b2db      	uxtb	r3, r3
 801a59c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a59e:	88bb      	ldrh	r3, [r7, #4]
 801a5a0:	0a1b      	lsrs	r3, r3, #8
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	b2db      	uxtb	r3, r3
 801a5a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a5a8:	88bb      	ldrh	r3, [r7, #4]
 801a5aa:	b2db      	uxtb	r3, r3
 801a5ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a5ae:	887b      	ldrh	r3, [r7, #2]
 801a5b0:	0a1b      	lsrs	r3, r3, #8
 801a5b2:	b29b      	uxth	r3, r3
 801a5b4:	b2db      	uxtb	r3, r3
 801a5b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a5b8:	887b      	ldrh	r3, [r7, #2]
 801a5ba:	b2db      	uxtb	r3, r3
 801a5bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a5be:	883b      	ldrh	r3, [r7, #0]
 801a5c0:	0a1b      	lsrs	r3, r3, #8
 801a5c2:	b29b      	uxth	r3, r3
 801a5c4:	b2db      	uxtb	r3, r3
 801a5c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a5c8:	883b      	ldrh	r3, [r7, #0]
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a5ce:	f107 0308 	add.w	r3, r7, #8
 801a5d2:	2208      	movs	r2, #8
 801a5d4:	4619      	mov	r1, r3
 801a5d6:	2008      	movs	r0, #8
 801a5d8:	f000 fc2a 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a5dc:	bf00      	nop
 801a5de:	3714      	adds	r7, #20
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd90      	pop	{r4, r7, pc}

0801a5e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b084      	sub	sp, #16
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	6039      	str	r1, [r7, #0]
 801a5ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a5f0:	79fb      	ldrb	r3, [r7, #7]
 801a5f2:	f003 0307 	and.w	r3, r3, #7
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	0c1b      	lsrs	r3, r3, #16
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	0a1b      	lsrs	r3, r3, #8
 801a606:	b2db      	uxtb	r3, r3
 801a608:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a610:	f107 030c 	add.w	r3, r7, #12
 801a614:	2204      	movs	r2, #4
 801a616:	4619      	mov	r1, r3
 801a618:	2097      	movs	r0, #151	@ 0x97
 801a61a:	f000 fc09 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a61e:	bf00      	nop
 801a620:	3710      	adds	r7, #16
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
	...

0801a628 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a62c:	b084      	sub	sp, #16
 801a62e:	af00      	add	r7, sp, #0
 801a630:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a632:	2300      	movs	r3, #0
 801a634:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a636:	4b1d      	ldr	r3, [pc, #116]	@ (801a6ac <SUBGRF_SetRfFrequency+0x84>)
 801a638:	781b      	ldrb	r3, [r3, #0]
 801a63a:	f083 0301 	eor.w	r3, r3, #1
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	2b00      	cmp	r3, #0
 801a642:	d005      	beq.n	801a650 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a644:	6878      	ldr	r0, [r7, #4]
 801a646:	f7ff ff2b 	bl	801a4a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a64a:	4b18      	ldr	r3, [pc, #96]	@ (801a6ac <SUBGRF_SetRfFrequency+0x84>)
 801a64c:	2201      	movs	r2, #1
 801a64e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2200      	movs	r2, #0
 801a654:	461c      	mov	r4, r3
 801a656:	4615      	mov	r5, r2
 801a658:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a65c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a660:	4a13      	ldr	r2, [pc, #76]	@ (801a6b0 <SUBGRF_SetRfFrequency+0x88>)
 801a662:	f04f 0300 	mov.w	r3, #0
 801a666:	4640      	mov	r0, r8
 801a668:	4649      	mov	r1, r9
 801a66a:	f7e6 fd19 	bl	80010a0 <__aeabi_uldivmod>
 801a66e:	4602      	mov	r2, r0
 801a670:	460b      	mov	r3, r1
 801a672:	4613      	mov	r3, r2
 801a674:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	0e1b      	lsrs	r3, r3, #24
 801a67a:	b2db      	uxtb	r3, r3
 801a67c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	0c1b      	lsrs	r3, r3, #16
 801a682:	b2db      	uxtb	r3, r3
 801a684:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	0a1b      	lsrs	r3, r3, #8
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	b2db      	uxtb	r3, r3
 801a692:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a694:	f107 0308 	add.w	r3, r7, #8
 801a698:	2204      	movs	r2, #4
 801a69a:	4619      	mov	r1, r3
 801a69c:	2086      	movs	r0, #134	@ 0x86
 801a69e:	f000 fbc7 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a6a2:	bf00      	nop
 801a6a4:	3710      	adds	r7, #16
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a6ac:	20001d7c 	.word	0x20001d7c
 801a6b0:	01e84800 	.word	0x01e84800

0801a6b4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b082      	sub	sp, #8
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a6be:	79fa      	ldrb	r2, [r7, #7]
 801a6c0:	4b09      	ldr	r3, [pc, #36]	@ (801a6e8 <SUBGRF_SetPacketType+0x34>)
 801a6c2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a6c4:	79fb      	ldrb	r3, [r7, #7]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d104      	bne.n	801a6d4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a6ca:	2100      	movs	r1, #0
 801a6cc:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a6d0:	f000 fafe 	bl	801acd0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a6d4:	1dfb      	adds	r3, r7, #7
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	4619      	mov	r1, r3
 801a6da:	208a      	movs	r0, #138	@ 0x8a
 801a6dc:	f000 fba8 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a6e0:	bf00      	nop
 801a6e2:	3708      	adds	r7, #8
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}
 801a6e8:	20001d75 	.word	0x20001d75

0801a6ec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a6ec:	b480      	push	{r7}
 801a6ee:	af00      	add	r7, sp, #0
    return PacketType;
 801a6f0:	4b02      	ldr	r3, [pc, #8]	@ (801a6fc <SUBGRF_GetPacketType+0x10>)
 801a6f2:	781b      	ldrb	r3, [r3, #0]
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bc80      	pop	{r7}
 801a6fa:	4770      	bx	lr
 801a6fc:	20001d75 	.word	0x20001d75

0801a700 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	4603      	mov	r3, r0
 801a708:	71fb      	strb	r3, [r7, #7]
 801a70a:	460b      	mov	r3, r1
 801a70c:	71bb      	strb	r3, [r7, #6]
 801a70e:	4613      	mov	r3, r2
 801a710:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a712:	79fb      	ldrb	r3, [r7, #7]
 801a714:	2b01      	cmp	r3, #1
 801a716:	d149      	bne.n	801a7ac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a718:	2000      	movs	r0, #0
 801a71a:	f7f1 f981 	bl	800ba20 <RBI_GetRFOMaxPowerConfig>
 801a71e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a720:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a724:	68fa      	ldr	r2, [r7, #12]
 801a726:	429a      	cmp	r2, r3
 801a728:	da01      	bge.n	801a72e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b0e      	cmp	r3, #14
 801a732:	d10e      	bne.n	801a752 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a734:	2301      	movs	r3, #1
 801a736:	2201      	movs	r2, #1
 801a738:	2100      	movs	r1, #0
 801a73a:	2004      	movs	r0, #4
 801a73c:	f7ff fef6 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a740:	79ba      	ldrb	r2, [r7, #6]
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	b2db      	uxtb	r3, r3
 801a746:	1ad3      	subs	r3, r2, r3
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	330e      	adds	r3, #14
 801a74c:	b2db      	uxtb	r3, r3
 801a74e:	71bb      	strb	r3, [r7, #6]
 801a750:	e01f      	b.n	801a792 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	2b0a      	cmp	r3, #10
 801a756:	d10e      	bne.n	801a776 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a758:	2301      	movs	r3, #1
 801a75a:	2201      	movs	r2, #1
 801a75c:	2100      	movs	r1, #0
 801a75e:	2001      	movs	r0, #1
 801a760:	f7ff fee4 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a764:	79ba      	ldrb	r2, [r7, #6]
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	b2db      	uxtb	r3, r3
 801a76a:	1ad3      	subs	r3, r2, r3
 801a76c:	b2db      	uxtb	r3, r3
 801a76e:	330d      	adds	r3, #13
 801a770:	b2db      	uxtb	r3, r3
 801a772:	71bb      	strb	r3, [r7, #6]
 801a774:	e00d      	b.n	801a792 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801a776:	2301      	movs	r3, #1
 801a778:	2201      	movs	r2, #1
 801a77a:	2100      	movs	r1, #0
 801a77c:	2006      	movs	r0, #6
 801a77e:	f7ff fed5 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a782:	79ba      	ldrb	r2, [r7, #6]
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	b2db      	uxtb	r3, r3
 801a788:	1ad3      	subs	r3, r2, r3
 801a78a:	b2db      	uxtb	r3, r3
 801a78c:	330e      	adds	r3, #14
 801a78e:	b2db      	uxtb	r3, r3
 801a790:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a792:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a796:	f113 0f11 	cmn.w	r3, #17
 801a79a:	da01      	bge.n	801a7a0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a79c:	23ef      	movs	r3, #239	@ 0xef
 801a79e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a7a0:	2118      	movs	r1, #24
 801a7a2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a7a6:	f000 fa93 	bl	801acd0 <SUBGRF_WriteRegister>
 801a7aa:	e067      	b.n	801a87c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a7ac:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a7b0:	f000 faa2 	bl	801acf8 <SUBGRF_ReadRegister>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	f043 031e 	orr.w	r3, r3, #30
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	4619      	mov	r1, r3
 801a7be:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a7c2:	f000 fa85 	bl	801acd0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a7c6:	2001      	movs	r0, #1
 801a7c8:	f7f1 f92a 	bl	800ba20 <RBI_GetRFOMaxPowerConfig>
 801a7cc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a7ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a7d2:	68fa      	ldr	r2, [r7, #12]
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	da01      	bge.n	801a7dc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2b14      	cmp	r3, #20
 801a7e0:	d10e      	bne.n	801a800 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a7e2:	2301      	movs	r3, #1
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	2105      	movs	r1, #5
 801a7e8:	2003      	movs	r0, #3
 801a7ea:	f7ff fe9f 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a7ee:	79ba      	ldrb	r2, [r7, #6]
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	1ad3      	subs	r3, r2, r3
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	3316      	adds	r3, #22
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	71bb      	strb	r3, [r7, #6]
 801a7fe:	e031      	b.n	801a864 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	2b11      	cmp	r3, #17
 801a804:	d10e      	bne.n	801a824 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a806:	2301      	movs	r3, #1
 801a808:	2200      	movs	r2, #0
 801a80a:	2103      	movs	r1, #3
 801a80c:	2002      	movs	r0, #2
 801a80e:	f7ff fe8d 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a812:	79ba      	ldrb	r2, [r7, #6]
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	b2db      	uxtb	r3, r3
 801a818:	1ad3      	subs	r3, r2, r3
 801a81a:	b2db      	uxtb	r3, r3
 801a81c:	3316      	adds	r3, #22
 801a81e:	b2db      	uxtb	r3, r3
 801a820:	71bb      	strb	r3, [r7, #6]
 801a822:	e01f      	b.n	801a864 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	2b0e      	cmp	r3, #14
 801a828:	d10e      	bne.n	801a848 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a82a:	2301      	movs	r3, #1
 801a82c:	2200      	movs	r2, #0
 801a82e:	2102      	movs	r1, #2
 801a830:	2002      	movs	r0, #2
 801a832:	f7ff fe7b 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a836:	79ba      	ldrb	r2, [r7, #6]
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	1ad3      	subs	r3, r2, r3
 801a83e:	b2db      	uxtb	r3, r3
 801a840:	330e      	adds	r3, #14
 801a842:	b2db      	uxtb	r3, r3
 801a844:	71bb      	strb	r3, [r7, #6]
 801a846:	e00d      	b.n	801a864 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a848:	2301      	movs	r3, #1
 801a84a:	2200      	movs	r2, #0
 801a84c:	2107      	movs	r1, #7
 801a84e:	2004      	movs	r0, #4
 801a850:	f7ff fe6c 	bl	801a52c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a854:	79ba      	ldrb	r2, [r7, #6]
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	b2db      	uxtb	r3, r3
 801a85a:	1ad3      	subs	r3, r2, r3
 801a85c:	b2db      	uxtb	r3, r3
 801a85e:	3316      	adds	r3, #22
 801a860:	b2db      	uxtb	r3, r3
 801a862:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a864:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a868:	f113 0f09 	cmn.w	r3, #9
 801a86c:	da01      	bge.n	801a872 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a86e:	23f7      	movs	r3, #247	@ 0xf7
 801a870:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a872:	2138      	movs	r1, #56	@ 0x38
 801a874:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a878:	f000 fa2a 	bl	801acd0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a87c:	79bb      	ldrb	r3, [r7, #6]
 801a87e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a880:	797b      	ldrb	r3, [r7, #5]
 801a882:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a884:	f107 0308 	add.w	r3, r7, #8
 801a888:	2202      	movs	r2, #2
 801a88a:	4619      	mov	r1, r3
 801a88c:	208e      	movs	r0, #142	@ 0x8e
 801a88e:	f000 facf 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801a892:	bf00      	nop
 801a894:	3710      	adds	r7, #16
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}
	...

0801a89c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a89c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a8a0:	b086      	sub	sp, #24
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a8aa:	4a61      	ldr	r2, [pc, #388]	@ (801aa30 <SUBGRF_SetModulationParams+0x194>)
 801a8ac:	f107 0308 	add.w	r3, r7, #8
 801a8b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a8b4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	781a      	ldrb	r2, [r3, #0]
 801a8bc:	4b5d      	ldr	r3, [pc, #372]	@ (801aa34 <SUBGRF_SetModulationParams+0x198>)
 801a8be:	781b      	ldrb	r3, [r3, #0]
 801a8c0:	429a      	cmp	r2, r3
 801a8c2:	d004      	beq.n	801a8ce <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f7ff fef3 	bl	801a6b4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	781b      	ldrb	r3, [r3, #0]
 801a8d2:	2b03      	cmp	r3, #3
 801a8d4:	f200 80a5 	bhi.w	801aa22 <SUBGRF_SetModulationParams+0x186>
 801a8d8:	a201      	add	r2, pc, #4	@ (adr r2, 801a8e0 <SUBGRF_SetModulationParams+0x44>)
 801a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8de:	bf00      	nop
 801a8e0:	0801a8f1 	.word	0x0801a8f1
 801a8e4:	0801a9b1 	.word	0x0801a9b1
 801a8e8:	0801a973 	.word	0x0801a973
 801a8ec:	0801a9df 	.word	0x0801a9df
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a8f0:	2308      	movs	r3, #8
 801a8f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	685b      	ldr	r3, [r3, #4]
 801a8f8:	4a4f      	ldr	r2, [pc, #316]	@ (801aa38 <SUBGRF_SetModulationParams+0x19c>)
 801a8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801a8fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a900:	697b      	ldr	r3, [r7, #20]
 801a902:	0c1b      	lsrs	r3, r3, #16
 801a904:	b2db      	uxtb	r3, r3
 801a906:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a908:	697b      	ldr	r3, [r7, #20]
 801a90a:	0a1b      	lsrs	r3, r3, #8
 801a90c:	b2db      	uxtb	r3, r3
 801a90e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a910:	697b      	ldr	r3, [r7, #20]
 801a912:	b2db      	uxtb	r3, r3
 801a914:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	7b1b      	ldrb	r3, [r3, #12]
 801a91a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	7b5b      	ldrb	r3, [r3, #13]
 801a920:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	689b      	ldr	r3, [r3, #8]
 801a926:	2200      	movs	r2, #0
 801a928:	461c      	mov	r4, r3
 801a92a:	4615      	mov	r5, r2
 801a92c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a930:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a934:	4a41      	ldr	r2, [pc, #260]	@ (801aa3c <SUBGRF_SetModulationParams+0x1a0>)
 801a936:	f04f 0300 	mov.w	r3, #0
 801a93a:	4640      	mov	r0, r8
 801a93c:	4649      	mov	r1, r9
 801a93e:	f7e6 fbaf 	bl	80010a0 <__aeabi_uldivmod>
 801a942:	4602      	mov	r2, r0
 801a944:	460b      	mov	r3, r1
 801a946:	4613      	mov	r3, r2
 801a948:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	0c1b      	lsrs	r3, r3, #16
 801a94e:	b2db      	uxtb	r3, r3
 801a950:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	0a1b      	lsrs	r3, r3, #8
 801a956:	b2db      	uxtb	r3, r3
 801a958:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	b2db      	uxtb	r3, r3
 801a95e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a960:	7cfb      	ldrb	r3, [r7, #19]
 801a962:	b29a      	uxth	r2, r3
 801a964:	f107 0308 	add.w	r3, r7, #8
 801a968:	4619      	mov	r1, r3
 801a96a:	208b      	movs	r0, #139	@ 0x8b
 801a96c:	f000 fa60 	bl	801ae30 <SUBGRF_WriteCommand>
        break;
 801a970:	e058      	b.n	801aa24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a972:	2304      	movs	r3, #4
 801a974:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	691b      	ldr	r3, [r3, #16]
 801a97a:	4a2f      	ldr	r2, [pc, #188]	@ (801aa38 <SUBGRF_SetModulationParams+0x19c>)
 801a97c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a980:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a982:	697b      	ldr	r3, [r7, #20]
 801a984:	0c1b      	lsrs	r3, r3, #16
 801a986:	b2db      	uxtb	r3, r3
 801a988:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a98a:	697b      	ldr	r3, [r7, #20]
 801a98c:	0a1b      	lsrs	r3, r3, #8
 801a98e:	b2db      	uxtb	r3, r3
 801a990:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a992:	697b      	ldr	r3, [r7, #20]
 801a994:	b2db      	uxtb	r3, r3
 801a996:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	7d1b      	ldrb	r3, [r3, #20]
 801a99c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a99e:	7cfb      	ldrb	r3, [r7, #19]
 801a9a0:	b29a      	uxth	r2, r3
 801a9a2:	f107 0308 	add.w	r3, r7, #8
 801a9a6:	4619      	mov	r1, r3
 801a9a8:	208b      	movs	r0, #139	@ 0x8b
 801a9aa:	f000 fa41 	bl	801ae30 <SUBGRF_WriteCommand>
        break;
 801a9ae:	e039      	b.n	801aa24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a9b0:	2304      	movs	r3, #4
 801a9b2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	7e1b      	ldrb	r3, [r3, #24]
 801a9b8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	7e5b      	ldrb	r3, [r3, #25]
 801a9be:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	7e9b      	ldrb	r3, [r3, #26]
 801a9c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	7edb      	ldrb	r3, [r3, #27]
 801a9ca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a9cc:	7cfb      	ldrb	r3, [r7, #19]
 801a9ce:	b29a      	uxth	r2, r3
 801a9d0:	f107 0308 	add.w	r3, r7, #8
 801a9d4:	4619      	mov	r1, r3
 801a9d6:	208b      	movs	r0, #139	@ 0x8b
 801a9d8:	f000 fa2a 	bl	801ae30 <SUBGRF_WriteCommand>

        break;
 801a9dc:	e022      	b.n	801aa24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a9de:	2305      	movs	r3, #5
 801a9e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	4a14      	ldr	r2, [pc, #80]	@ (801aa38 <SUBGRF_SetModulationParams+0x19c>)
 801a9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a9ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a9ee:	697b      	ldr	r3, [r7, #20]
 801a9f0:	0c1b      	lsrs	r3, r3, #16
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	0a1b      	lsrs	r3, r3, #8
 801a9fa:	b2db      	uxtb	r3, r3
 801a9fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a9fe:	697b      	ldr	r3, [r7, #20]
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	7b1b      	ldrb	r3, [r3, #12]
 801aa08:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	7b5b      	ldrb	r3, [r3, #13]
 801aa0e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801aa10:	7cfb      	ldrb	r3, [r7, #19]
 801aa12:	b29a      	uxth	r2, r3
 801aa14:	f107 0308 	add.w	r3, r7, #8
 801aa18:	4619      	mov	r1, r3
 801aa1a:	208b      	movs	r0, #139	@ 0x8b
 801aa1c:	f000 fa08 	bl	801ae30 <SUBGRF_WriteCommand>
        break;
 801aa20:	e000      	b.n	801aa24 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801aa22:	bf00      	nop
    }
}
 801aa24:	bf00      	nop
 801aa26:	3718      	adds	r7, #24
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801aa2e:	bf00      	nop
 801aa30:	0801fee4 	.word	0x0801fee4
 801aa34:	20001d75 	.word	0x20001d75
 801aa38:	3d090000 	.word	0x3d090000
 801aa3c:	01e84800 	.word	0x01e84800

0801aa40 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b086      	sub	sp, #24
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801aa48:	2300      	movs	r3, #0
 801aa4a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801aa4c:	4a48      	ldr	r2, [pc, #288]	@ (801ab70 <SUBGRF_SetPacketParams+0x130>)
 801aa4e:	f107 030c 	add.w	r3, r7, #12
 801aa52:	ca07      	ldmia	r2, {r0, r1, r2}
 801aa54:	c303      	stmia	r3!, {r0, r1}
 801aa56:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	781a      	ldrb	r2, [r3, #0]
 801aa5c:	4b45      	ldr	r3, [pc, #276]	@ (801ab74 <SUBGRF_SetPacketParams+0x134>)
 801aa5e:	781b      	ldrb	r3, [r3, #0]
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d004      	beq.n	801aa6e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f7ff fe23 	bl	801a6b4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	2b03      	cmp	r3, #3
 801aa74:	d878      	bhi.n	801ab68 <SUBGRF_SetPacketParams+0x128>
 801aa76:	a201      	add	r2, pc, #4	@ (adr r2, 801aa7c <SUBGRF_SetPacketParams+0x3c>)
 801aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa7c:	0801aa8d 	.word	0x0801aa8d
 801aa80:	0801ab1d 	.word	0x0801ab1d
 801aa84:	0801ab11 	.word	0x0801ab11
 801aa88:	0801aa8d 	.word	0x0801aa8d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	7a5b      	ldrb	r3, [r3, #9]
 801aa90:	2bf1      	cmp	r3, #241	@ 0xf1
 801aa92:	d10a      	bne.n	801aaaa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801aa94:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801aa98:	f7ff faae 	bl	8019ff8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801aa9c:	f248 0005 	movw	r0, #32773	@ 0x8005
 801aaa0:	f7ff faca 	bl	801a038 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801aaa4:	2302      	movs	r3, #2
 801aaa6:	75bb      	strb	r3, [r7, #22]
 801aaa8:	e011      	b.n	801aace <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	7a5b      	ldrb	r3, [r3, #9]
 801aaae:	2bf2      	cmp	r3, #242	@ 0xf2
 801aab0:	d10a      	bne.n	801aac8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801aab2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801aab6:	f7ff fa9f 	bl	8019ff8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801aaba:	f241 0021 	movw	r0, #4129	@ 0x1021
 801aabe:	f7ff fabb 	bl	801a038 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801aac2:	2306      	movs	r3, #6
 801aac4:	75bb      	strb	r3, [r7, #22]
 801aac6:	e002      	b.n	801aace <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	7a5b      	ldrb	r3, [r3, #9]
 801aacc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801aace:	2309      	movs	r3, #9
 801aad0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	885b      	ldrh	r3, [r3, #2]
 801aad6:	0a1b      	lsrs	r3, r3, #8
 801aad8:	b29b      	uxth	r3, r3
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	885b      	ldrh	r3, [r3, #2]
 801aae2:	b2db      	uxtb	r3, r3
 801aae4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	791b      	ldrb	r3, [r3, #4]
 801aaea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	795b      	ldrb	r3, [r3, #5]
 801aaf0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	799b      	ldrb	r3, [r3, #6]
 801aaf6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	79db      	ldrb	r3, [r3, #7]
 801aafc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	7a1b      	ldrb	r3, [r3, #8]
 801ab02:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ab04:	7dbb      	ldrb	r3, [r7, #22]
 801ab06:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	7a9b      	ldrb	r3, [r3, #10]
 801ab0c:	753b      	strb	r3, [r7, #20]
        break;
 801ab0e:	e022      	b.n	801ab56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ab10:	2301      	movs	r3, #1
 801ab12:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	7b1b      	ldrb	r3, [r3, #12]
 801ab18:	733b      	strb	r3, [r7, #12]
        break;
 801ab1a:	e01c      	b.n	801ab56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ab1c:	2306      	movs	r3, #6
 801ab1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	89db      	ldrh	r3, [r3, #14]
 801ab24:	0a1b      	lsrs	r3, r3, #8
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	89db      	ldrh	r3, [r3, #14]
 801ab30:	b2db      	uxtb	r3, r3
 801ab32:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	7c1a      	ldrb	r2, [r3, #16]
 801ab38:	4b0f      	ldr	r3, [pc, #60]	@ (801ab78 <SUBGRF_SetPacketParams+0x138>)
 801ab3a:	4611      	mov	r1, r2
 801ab3c:	7019      	strb	r1, [r3, #0]
 801ab3e:	4613      	mov	r3, r2
 801ab40:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	7c5b      	ldrb	r3, [r3, #17]
 801ab46:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	7c9b      	ldrb	r3, [r3, #18]
 801ab4c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	7cdb      	ldrb	r3, [r3, #19]
 801ab52:	747b      	strb	r3, [r7, #17]
        break;
 801ab54:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ab56:	7dfb      	ldrb	r3, [r7, #23]
 801ab58:	b29a      	uxth	r2, r3
 801ab5a:	f107 030c 	add.w	r3, r7, #12
 801ab5e:	4619      	mov	r1, r3
 801ab60:	208c      	movs	r0, #140	@ 0x8c
 801ab62:	f000 f965 	bl	801ae30 <SUBGRF_WriteCommand>
 801ab66:	e000      	b.n	801ab6a <SUBGRF_SetPacketParams+0x12a>
        return;
 801ab68:	bf00      	nop
}
 801ab6a:	3718      	adds	r7, #24
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}
 801ab70:	0801feec 	.word	0x0801feec
 801ab74:	20001d75 	.word	0x20001d75
 801ab78:	20001d76 	.word	0x20001d76

0801ab7c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b084      	sub	sp, #16
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	4603      	mov	r3, r0
 801ab84:	460a      	mov	r2, r1
 801ab86:	71fb      	strb	r3, [r7, #7]
 801ab88:	4613      	mov	r3, r2
 801ab8a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ab8c:	79fb      	ldrb	r3, [r7, #7]
 801ab8e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ab90:	79bb      	ldrb	r3, [r7, #6]
 801ab92:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ab94:	f107 030c 	add.w	r3, r7, #12
 801ab98:	2202      	movs	r2, #2
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	208f      	movs	r0, #143	@ 0x8f
 801ab9e:	f000 f947 	bl	801ae30 <SUBGRF_WriteCommand>
}
 801aba2:	bf00      	nop
 801aba4:	3710      	adds	r7, #16
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}

0801abaa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801abaa:	b580      	push	{r7, lr}
 801abac:	b082      	sub	sp, #8
 801abae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801abb0:	2300      	movs	r3, #0
 801abb2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801abb4:	1d3b      	adds	r3, r7, #4
 801abb6:	2201      	movs	r2, #1
 801abb8:	4619      	mov	r1, r3
 801abba:	2015      	movs	r0, #21
 801abbc:	f000 f95a 	bl	801ae74 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801abc0:	793b      	ldrb	r3, [r7, #4]
 801abc2:	425b      	negs	r3, r3
 801abc4:	105b      	asrs	r3, r3, #1
 801abc6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801abc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801abcc:	4618      	mov	r0, r3
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}

0801abd4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
 801abdc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801abde:	f107 030c 	add.w	r3, r7, #12
 801abe2:	2202      	movs	r2, #2
 801abe4:	4619      	mov	r1, r3
 801abe6:	2013      	movs	r0, #19
 801abe8:	f000 f944 	bl	801ae74 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801abec:	f7ff fd7e 	bl	801a6ec <SUBGRF_GetPacketType>
 801abf0:	4603      	mov	r3, r0
 801abf2:	2b01      	cmp	r3, #1
 801abf4:	d10d      	bne.n	801ac12 <SUBGRF_GetRxBufferStatus+0x3e>
 801abf6:	4b0c      	ldr	r3, [pc, #48]	@ (801ac28 <SUBGRF_GetRxBufferStatus+0x54>)
 801abf8:	781b      	ldrb	r3, [r3, #0]
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	2b01      	cmp	r3, #1
 801abfe:	d108      	bne.n	801ac12 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801ac00:	f240 7002 	movw	r0, #1794	@ 0x702
 801ac04:	f000 f878 	bl	801acf8 <SUBGRF_ReadRegister>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	461a      	mov	r2, r3
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	701a      	strb	r2, [r3, #0]
 801ac10:	e002      	b.n	801ac18 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801ac12:	7b3a      	ldrb	r2, [r7, #12]
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801ac18:	7b7a      	ldrb	r2, [r7, #13]
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	701a      	strb	r2, [r3, #0]
}
 801ac1e:	bf00      	nop
 801ac20:	3710      	adds	r7, #16
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	20001d76 	.word	0x20001d76

0801ac2c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801ac34:	f107 030c 	add.w	r3, r7, #12
 801ac38:	2203      	movs	r2, #3
 801ac3a:	4619      	mov	r1, r3
 801ac3c:	2014      	movs	r0, #20
 801ac3e:	f000 f919 	bl	801ae74 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ac42:	f7ff fd53 	bl	801a6ec <SUBGRF_GetPacketType>
 801ac46:	4603      	mov	r3, r0
 801ac48:	461a      	mov	r2, r3
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	781b      	ldrb	r3, [r3, #0]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d002      	beq.n	801ac5c <SUBGRF_GetPacketStatus+0x30>
 801ac56:	2b01      	cmp	r3, #1
 801ac58:	d013      	beq.n	801ac82 <SUBGRF_GetPacketStatus+0x56>
 801ac5a:	e02a      	b.n	801acb2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801ac5c:	7b3a      	ldrb	r2, [r7, #12]
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ac62:	7b7b      	ldrb	r3, [r7, #13]
 801ac64:	425b      	negs	r3, r3
 801ac66:	105b      	asrs	r3, r3, #1
 801ac68:	b25a      	sxtb	r2, r3
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ac6e:	7bbb      	ldrb	r3, [r7, #14]
 801ac70:	425b      	negs	r3, r3
 801ac72:	105b      	asrs	r3, r3, #1
 801ac74:	b25a      	sxtb	r2, r3
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	609a      	str	r2, [r3, #8]
            break;
 801ac80:	e020      	b.n	801acc4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ac82:	7b3b      	ldrb	r3, [r7, #12]
 801ac84:	425b      	negs	r3, r3
 801ac86:	105b      	asrs	r3, r3, #1
 801ac88:	b25a      	sxtb	r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ac8e:	7b7b      	ldrb	r3, [r7, #13]
 801ac90:	b25b      	sxtb	r3, r3
 801ac92:	3302      	adds	r3, #2
 801ac94:	109b      	asrs	r3, r3, #2
 801ac96:	b25a      	sxtb	r2, r3
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ac9c:	7bbb      	ldrb	r3, [r7, #14]
 801ac9e:	425b      	negs	r3, r3
 801aca0:	105b      	asrs	r3, r3, #1
 801aca2:	b25a      	sxtb	r2, r3
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801aca8:	4b08      	ldr	r3, [pc, #32]	@ (801accc <SUBGRF_GetPacketStatus+0xa0>)
 801acaa:	681a      	ldr	r2, [r3, #0]
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	611a      	str	r2, [r3, #16]
            break;
 801acb0:	e008      	b.n	801acc4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801acb2:	2214      	movs	r2, #20
 801acb4:	2100      	movs	r1, #0
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f000 fbf3 	bl	801b4a2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	220f      	movs	r2, #15
 801acc0:	701a      	strb	r2, [r3, #0]
            break;
 801acc2:	bf00      	nop
    }
}
 801acc4:	bf00      	nop
 801acc6:	3710      	adds	r7, #16
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}
 801accc:	20001d78 	.word	0x20001d78

0801acd0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b082      	sub	sp, #8
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	4603      	mov	r3, r0
 801acd8:	460a      	mov	r2, r1
 801acda:	80fb      	strh	r3, [r7, #6]
 801acdc:	4613      	mov	r3, r2
 801acde:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801ace0:	1d7a      	adds	r2, r7, #5
 801ace2:	88f9      	ldrh	r1, [r7, #6]
 801ace4:	2301      	movs	r3, #1
 801ace6:	4803      	ldr	r0, [pc, #12]	@ (801acf4 <SUBGRF_WriteRegister+0x24>)
 801ace8:	f7ec ffa6 	bl	8007c38 <HAL_SUBGHZ_WriteRegisters>
}
 801acec:	bf00      	nop
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	200003f0 	.word	0x200003f0

0801acf8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b084      	sub	sp, #16
 801acfc:	af00      	add	r7, sp, #0
 801acfe:	4603      	mov	r3, r0
 801ad00:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ad02:	f107 020f 	add.w	r2, r7, #15
 801ad06:	88f9      	ldrh	r1, [r7, #6]
 801ad08:	2301      	movs	r3, #1
 801ad0a:	4804      	ldr	r0, [pc, #16]	@ (801ad1c <SUBGRF_ReadRegister+0x24>)
 801ad0c:	f7ec fff3 	bl	8007cf6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3710      	adds	r7, #16
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	bf00      	nop
 801ad1c:	200003f0 	.word	0x200003f0

0801ad20 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b086      	sub	sp, #24
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	4603      	mov	r3, r0
 801ad28:	6039      	str	r1, [r7, #0]
 801ad2a:	80fb      	strh	r3, [r7, #6]
 801ad2c:	4613      	mov	r3, r2
 801ad2e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad30:	f3ef 8310 	mrs	r3, PRIMASK
 801ad34:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ad38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad3a:	b672      	cpsid	i
}
 801ad3c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801ad3e:	88bb      	ldrh	r3, [r7, #4]
 801ad40:	88f9      	ldrh	r1, [r7, #6]
 801ad42:	683a      	ldr	r2, [r7, #0]
 801ad44:	4806      	ldr	r0, [pc, #24]	@ (801ad60 <SUBGRF_WriteRegisters+0x40>)
 801ad46:	f7ec ff77 	bl	8007c38 <HAL_SUBGHZ_WriteRegisters>
 801ad4a:	697b      	ldr	r3, [r7, #20]
 801ad4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	f383 8810 	msr	PRIMASK, r3
}
 801ad54:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ad56:	bf00      	nop
 801ad58:	3718      	adds	r7, #24
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	200003f0 	.word	0x200003f0

0801ad64 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ad64:	b580      	push	{r7, lr}
 801ad66:	b086      	sub	sp, #24
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	6039      	str	r1, [r7, #0]
 801ad6e:	80fb      	strh	r3, [r7, #6]
 801ad70:	4613      	mov	r3, r2
 801ad72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad74:	f3ef 8310 	mrs	r3, PRIMASK
 801ad78:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ad7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad7e:	b672      	cpsid	i
}
 801ad80:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801ad82:	88bb      	ldrh	r3, [r7, #4]
 801ad84:	88f9      	ldrh	r1, [r7, #6]
 801ad86:	683a      	ldr	r2, [r7, #0]
 801ad88:	4806      	ldr	r0, [pc, #24]	@ (801ada4 <SUBGRF_ReadRegisters+0x40>)
 801ad8a:	f7ec ffb4 	bl	8007cf6 <HAL_SUBGHZ_ReadRegisters>
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	f383 8810 	msr	PRIMASK, r3
}
 801ad98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ad9a:	bf00      	nop
 801ad9c:	3718      	adds	r7, #24
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	bf00      	nop
 801ada4:	200003f0 	.word	0x200003f0

0801ada8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b086      	sub	sp, #24
 801adac:	af00      	add	r7, sp, #0
 801adae:	4603      	mov	r3, r0
 801adb0:	6039      	str	r1, [r7, #0]
 801adb2:	71fb      	strb	r3, [r7, #7]
 801adb4:	4613      	mov	r3, r2
 801adb6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adb8:	f3ef 8310 	mrs	r3, PRIMASK
 801adbc:	60fb      	str	r3, [r7, #12]
  return(result);
 801adbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801adc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801adc2:	b672      	cpsid	i
}
 801adc4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801adc6:	79bb      	ldrb	r3, [r7, #6]
 801adc8:	b29b      	uxth	r3, r3
 801adca:	79f9      	ldrb	r1, [r7, #7]
 801adcc:	683a      	ldr	r2, [r7, #0]
 801adce:	4806      	ldr	r0, [pc, #24]	@ (801ade8 <SUBGRF_WriteBuffer+0x40>)
 801add0:	f7ed f8a5 	bl	8007f1e <HAL_SUBGHZ_WriteBuffer>
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801add8:	693b      	ldr	r3, [r7, #16]
 801adda:	f383 8810 	msr	PRIMASK, r3
}
 801adde:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ade0:	bf00      	nop
 801ade2:	3718      	adds	r7, #24
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}
 801ade8:	200003f0 	.word	0x200003f0

0801adec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b086      	sub	sp, #24
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	4603      	mov	r3, r0
 801adf4:	6039      	str	r1, [r7, #0]
 801adf6:	71fb      	strb	r3, [r7, #7]
 801adf8:	4613      	mov	r3, r2
 801adfa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ae00:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ae04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae06:	b672      	cpsid	i
}
 801ae08:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ae0a:	79bb      	ldrb	r3, [r7, #6]
 801ae0c:	b29b      	uxth	r3, r3
 801ae0e:	79f9      	ldrb	r1, [r7, #7]
 801ae10:	683a      	ldr	r2, [r7, #0]
 801ae12:	4806      	ldr	r0, [pc, #24]	@ (801ae2c <SUBGRF_ReadBuffer+0x40>)
 801ae14:	f7ed f8d6 	bl	8007fc4 <HAL_SUBGHZ_ReadBuffer>
 801ae18:	697b      	ldr	r3, [r7, #20]
 801ae1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae1c:	693b      	ldr	r3, [r7, #16]
 801ae1e:	f383 8810 	msr	PRIMASK, r3
}
 801ae22:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ae24:	bf00      	nop
 801ae26:	3718      	adds	r7, #24
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}
 801ae2c:	200003f0 	.word	0x200003f0

0801ae30 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b086      	sub	sp, #24
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	4603      	mov	r3, r0
 801ae38:	6039      	str	r1, [r7, #0]
 801ae3a:	71fb      	strb	r3, [r7, #7]
 801ae3c:	4613      	mov	r3, r2
 801ae3e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae40:	f3ef 8310 	mrs	r3, PRIMASK
 801ae44:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ae48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae4a:	b672      	cpsid	i
}
 801ae4c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ae4e:	88bb      	ldrh	r3, [r7, #4]
 801ae50:	79f9      	ldrb	r1, [r7, #7]
 801ae52:	683a      	ldr	r2, [r7, #0]
 801ae54:	4806      	ldr	r0, [pc, #24]	@ (801ae70 <SUBGRF_WriteCommand+0x40>)
 801ae56:	f7ec ffaf 	bl	8007db8 <HAL_SUBGHZ_ExecSetCmd>
 801ae5a:	697b      	ldr	r3, [r7, #20]
 801ae5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	f383 8810 	msr	PRIMASK, r3
}
 801ae64:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ae66:	bf00      	nop
 801ae68:	3718      	adds	r7, #24
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
 801ae6e:	bf00      	nop
 801ae70:	200003f0 	.word	0x200003f0

0801ae74 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b086      	sub	sp, #24
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	6039      	str	r1, [r7, #0]
 801ae7e:	71fb      	strb	r3, [r7, #7]
 801ae80:	4613      	mov	r3, r2
 801ae82:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae84:	f3ef 8310 	mrs	r3, PRIMASK
 801ae88:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ae8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae8e:	b672      	cpsid	i
}
 801ae90:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ae92:	88bb      	ldrh	r3, [r7, #4]
 801ae94:	79f9      	ldrb	r1, [r7, #7]
 801ae96:	683a      	ldr	r2, [r7, #0]
 801ae98:	4806      	ldr	r0, [pc, #24]	@ (801aeb4 <SUBGRF_ReadCommand+0x40>)
 801ae9a:	f7ec ffec 	bl	8007e76 <HAL_SUBGHZ_ExecGetCmd>
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	f383 8810 	msr	PRIMASK, r3
}
 801aea8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aeaa:	bf00      	nop
 801aeac:	3718      	adds	r7, #24
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}
 801aeb2:	bf00      	nop
 801aeb4:	200003f0 	.word	0x200003f0

0801aeb8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b084      	sub	sp, #16
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	4603      	mov	r3, r0
 801aec0:	460a      	mov	r2, r1
 801aec2:	71fb      	strb	r3, [r7, #7]
 801aec4:	4613      	mov	r3, r2
 801aec6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801aec8:	2301      	movs	r3, #1
 801aeca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801aecc:	79bb      	ldrb	r3, [r7, #6]
 801aece:	2b01      	cmp	r3, #1
 801aed0:	d10d      	bne.n	801aeee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801aed2:	79fb      	ldrb	r3, [r7, #7]
 801aed4:	2b01      	cmp	r3, #1
 801aed6:	d104      	bne.n	801aee2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801aed8:	2302      	movs	r3, #2
 801aeda:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801aedc:	2004      	movs	r0, #4
 801aede:	f000 f8df 	bl	801b0a0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801aee2:	79fb      	ldrb	r3, [r7, #7]
 801aee4:	2b02      	cmp	r3, #2
 801aee6:	d107      	bne.n	801aef8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801aee8:	2303      	movs	r3, #3
 801aeea:	73fb      	strb	r3, [r7, #15]
 801aeec:	e004      	b.n	801aef8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801aeee:	79bb      	ldrb	r3, [r7, #6]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d101      	bne.n	801aef8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801aef4:	2301      	movs	r3, #1
 801aef6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801aef8:	7bfb      	ldrb	r3, [r7, #15]
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f0 fd6d 	bl	800b9da <RBI_ConfigRFSwitch>
}
 801af00:	bf00      	nop
 801af02:	3710      	adds	r7, #16
 801af04:	46bd      	mov	sp, r7
 801af06:	bd80      	pop	{r7, pc}

0801af08 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b084      	sub	sp, #16
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	4603      	mov	r3, r0
 801af10:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801af12:	2301      	movs	r3, #1
 801af14:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801af16:	f7f0 fd6e 	bl	800b9f6 <RBI_GetTxConfig>
 801af1a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801af1c:	68bb      	ldr	r3, [r7, #8]
 801af1e:	2b02      	cmp	r3, #2
 801af20:	d016      	beq.n	801af50 <SUBGRF_SetRfTxPower+0x48>
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	2b02      	cmp	r3, #2
 801af26:	dc16      	bgt.n	801af56 <SUBGRF_SetRfTxPower+0x4e>
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d003      	beq.n	801af36 <SUBGRF_SetRfTxPower+0x2e>
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	2b01      	cmp	r3, #1
 801af32:	d00a      	beq.n	801af4a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801af34:	e00f      	b.n	801af56 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801af36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af3a:	2b0f      	cmp	r3, #15
 801af3c:	dd02      	ble.n	801af44 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801af3e:	2302      	movs	r3, #2
 801af40:	73fb      	strb	r3, [r7, #15]
            break;
 801af42:	e009      	b.n	801af58 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801af44:	2301      	movs	r3, #1
 801af46:	73fb      	strb	r3, [r7, #15]
            break;
 801af48:	e006      	b.n	801af58 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801af4a:	2301      	movs	r3, #1
 801af4c:	73fb      	strb	r3, [r7, #15]
            break;
 801af4e:	e003      	b.n	801af58 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801af50:	2302      	movs	r3, #2
 801af52:	73fb      	strb	r3, [r7, #15]
            break;
 801af54:	e000      	b.n	801af58 <SUBGRF_SetRfTxPower+0x50>
            break;
 801af56:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801af58:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801af5c:	7bfb      	ldrb	r3, [r7, #15]
 801af5e:	2202      	movs	r2, #2
 801af60:	4618      	mov	r0, r3
 801af62:	f7ff fbcd 	bl	801a700 <SUBGRF_SetTxParams>

    return paSelect;
 801af66:	7bfb      	ldrb	r3, [r7, #15]
}
 801af68:	4618      	mov	r0, r3
 801af6a:	3710      	adds	r7, #16
 801af6c:	46bd      	mov	sp, r7
 801af6e:	bd80      	pop	{r7, pc}

0801af70 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801af70:	b480      	push	{r7}
 801af72:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801af74:	2301      	movs	r3, #1
}
 801af76:	4618      	mov	r0, r3
 801af78:	46bd      	mov	sp, r7
 801af7a:	bc80      	pop	{r7}
 801af7c:	4770      	bx	lr
	...

0801af80 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b082      	sub	sp, #8
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801af88:	4b03      	ldr	r3, [pc, #12]	@ (801af98 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	2001      	movs	r0, #1
 801af8e:	4798      	blx	r3
}
 801af90:	bf00      	nop
 801af92:	3708      	adds	r7, #8
 801af94:	46bd      	mov	sp, r7
 801af96:	bd80      	pop	{r7, pc}
 801af98:	20001d80 	.word	0x20001d80

0801af9c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b082      	sub	sp, #8
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801afa4:	4b03      	ldr	r3, [pc, #12]	@ (801afb4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	2002      	movs	r0, #2
 801afaa:	4798      	blx	r3
}
 801afac:	bf00      	nop
 801afae:	3708      	adds	r7, #8
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd80      	pop	{r7, pc}
 801afb4:	20001d80 	.word	0x20001d80

0801afb8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801afc0:	4b03      	ldr	r3, [pc, #12]	@ (801afd0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	2040      	movs	r0, #64	@ 0x40
 801afc6:	4798      	blx	r3
}
 801afc8:	bf00      	nop
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}
 801afd0:	20001d80 	.word	0x20001d80

0801afd4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801afd4:	b580      	push	{r7, lr}
 801afd6:	b082      	sub	sp, #8
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
 801afdc:	460b      	mov	r3, r1
 801afde:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801afe0:	78fb      	ldrb	r3, [r7, #3]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d002      	beq.n	801afec <HAL_SUBGHZ_CADStatusCallback+0x18>
 801afe6:	2b01      	cmp	r3, #1
 801afe8:	d005      	beq.n	801aff6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801afea:	e00a      	b.n	801b002 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801afec:	4b07      	ldr	r3, [pc, #28]	@ (801b00c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	2080      	movs	r0, #128	@ 0x80
 801aff2:	4798      	blx	r3
            break;
 801aff4:	e005      	b.n	801b002 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801aff6:	4b05      	ldr	r3, [pc, #20]	@ (801b00c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801affe:	4798      	blx	r3
            break;
 801b000:	bf00      	nop
    }
}
 801b002:	bf00      	nop
 801b004:	3708      	adds	r7, #8
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}
 801b00a:	bf00      	nop
 801b00c:	20001d80 	.word	0x20001d80

0801b010 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b018:	4b04      	ldr	r3, [pc, #16]	@ (801b02c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b020:	4798      	blx	r3
}
 801b022:	bf00      	nop
 801b024:	3708      	adds	r7, #8
 801b026:	46bd      	mov	sp, r7
 801b028:	bd80      	pop	{r7, pc}
 801b02a:	bf00      	nop
 801b02c:	20001d80 	.word	0x20001d80

0801b030 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b082      	sub	sp, #8
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b038:	4b03      	ldr	r3, [pc, #12]	@ (801b048 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	2020      	movs	r0, #32
 801b03e:	4798      	blx	r3
}
 801b040:	bf00      	nop
 801b042:	3708      	adds	r7, #8
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}
 801b048:	20001d80 	.word	0x20001d80

0801b04c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b082      	sub	sp, #8
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b054:	4b03      	ldr	r3, [pc, #12]	@ (801b064 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	2004      	movs	r0, #4
 801b05a:	4798      	blx	r3
}
 801b05c:	bf00      	nop
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	20001d80 	.word	0x20001d80

0801b068 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b082      	sub	sp, #8
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b070:	4b03      	ldr	r3, [pc, #12]	@ (801b080 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	2008      	movs	r0, #8
 801b076:	4798      	blx	r3
}
 801b078:	bf00      	nop
 801b07a:	3708      	adds	r7, #8
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}
 801b080:	20001d80 	.word	0x20001d80

0801b084 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b084:	b580      	push	{r7, lr}
 801b086:	b082      	sub	sp, #8
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b08c:	4b03      	ldr	r3, [pc, #12]	@ (801b09c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	2010      	movs	r0, #16
 801b092:	4798      	blx	r3
}
 801b094:	bf00      	nop
 801b096:	3708      	adds	r7, #8
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}
 801b09c:	20001d80 	.word	0x20001d80

0801b0a0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b084      	sub	sp, #16
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b0aa:	f7f0 fcb2 	bl	800ba12 <RBI_IsDCDC>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	2b01      	cmp	r3, #1
 801b0b2:	d112      	bne.n	801b0da <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b0b4:	f640 1023 	movw	r0, #2339	@ 0x923
 801b0b8:	f7ff fe1e 	bl	801acf8 <SUBGRF_ReadRegister>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b0c0:	7bfb      	ldrb	r3, [r7, #15]
 801b0c2:	f023 0306 	bic.w	r3, r3, #6
 801b0c6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b0c8:	7bfa      	ldrb	r2, [r7, #15]
 801b0ca:	79fb      	ldrb	r3, [r7, #7]
 801b0cc:	4313      	orrs	r3, r2
 801b0ce:	b2db      	uxtb	r3, r3
 801b0d0:	4619      	mov	r1, r3
 801b0d2:	f640 1023 	movw	r0, #2339	@ 0x923
 801b0d6:	f7ff fdfb 	bl	801acd0 <SUBGRF_WriteRegister>
  }
}
 801b0da:	bf00      	nop
 801b0dc:	3710      	adds	r7, #16
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
	...

0801b0e4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b0e4:	b480      	push	{r7}
 801b0e6:	b085      	sub	sp, #20
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d101      	bne.n	801b0f6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b0f2:	231f      	movs	r3, #31
 801b0f4:	e017      	b.n	801b126 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	73fb      	strb	r3, [r7, #15]
 801b0fa:	e00f      	b.n	801b11c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b0fc:	7bfb      	ldrb	r3, [r7, #15]
 801b0fe:	4a0c      	ldr	r2, [pc, #48]	@ (801b130 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b104:	687a      	ldr	r2, [r7, #4]
 801b106:	429a      	cmp	r2, r3
 801b108:	d205      	bcs.n	801b116 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b10a:	7bfb      	ldrb	r3, [r7, #15]
 801b10c:	4a08      	ldr	r2, [pc, #32]	@ (801b130 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b10e:	00db      	lsls	r3, r3, #3
 801b110:	4413      	add	r3, r2
 801b112:	791b      	ldrb	r3, [r3, #4]
 801b114:	e007      	b.n	801b126 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b116:	7bfb      	ldrb	r3, [r7, #15]
 801b118:	3301      	adds	r3, #1
 801b11a:	73fb      	strb	r3, [r7, #15]
 801b11c:	7bfb      	ldrb	r3, [r7, #15]
 801b11e:	2b15      	cmp	r3, #21
 801b120:	d9ec      	bls.n	801b0fc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b122:	bf00      	nop
 801b124:	e7fd      	b.n	801b122 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b126:	4618      	mov	r0, r3
 801b128:	3714      	adds	r7, #20
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bc80      	pop	{r7}
 801b12e:	4770      	bx	lr
 801b130:	080204d8 	.word	0x080204d8

0801b134 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b08a      	sub	sp, #40	@ 0x28
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
 801b13c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b13e:	4b35      	ldr	r3, [pc, #212]	@ (801b214 <SUBGRF_GetCFO+0xe0>)
 801b140:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b142:	f640 0007 	movw	r0, #2055	@ 0x807
 801b146:	f7ff fdd7 	bl	801acf8 <SUBGRF_ReadRegister>
 801b14a:	4603      	mov	r3, r0
 801b14c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b14e:	7ffb      	ldrb	r3, [r7, #31]
 801b150:	08db      	lsrs	r3, r3, #3
 801b152:	b2db      	uxtb	r3, r3
 801b154:	f003 0303 	and.w	r3, r3, #3
 801b158:	3328      	adds	r3, #40	@ 0x28
 801b15a:	443b      	add	r3, r7
 801b15c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b160:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b162:	7ffb      	ldrb	r3, [r7, #31]
 801b164:	f003 0307 	and.w	r3, r3, #7
 801b168:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b16a:	7fba      	ldrb	r2, [r7, #30]
 801b16c:	7f7b      	ldrb	r3, [r7, #29]
 801b16e:	3b01      	subs	r3, #1
 801b170:	fa02 f303 	lsl.w	r3, r2, r3
 801b174:	461a      	mov	r2, r3
 801b176:	4b28      	ldr	r3, [pc, #160]	@ (801b218 <SUBGRF_GetCFO+0xe4>)
 801b178:	fbb3 f3f2 	udiv	r3, r3, r2
 801b17c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b17e:	69ba      	ldr	r2, [r7, #24]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	fbb2 f3f3 	udiv	r3, r2, r3
 801b186:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b188:	2301      	movs	r3, #1
 801b18a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b18e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b192:	697a      	ldr	r2, [r7, #20]
 801b194:	fb02 f303 	mul.w	r3, r2, r3
 801b198:	2b07      	cmp	r3, #7
 801b19a:	d802      	bhi.n	801b1a2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b19c:	2302      	movs	r3, #2
 801b19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b1a6:	697a      	ldr	r2, [r7, #20]
 801b1a8:	fb02 f303 	mul.w	r3, r2, r3
 801b1ac:	2b03      	cmp	r3, #3
 801b1ae:	d802      	bhi.n	801b1b6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b1b0:	2304      	movs	r3, #4
 801b1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b1b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b1ba:	69bb      	ldr	r3, [r7, #24]
 801b1bc:	fb02 f303 	mul.w	r3, r2, r3
 801b1c0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b1c2:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b1c6:	f7ff fd97 	bl	801acf8 <SUBGRF_ReadRegister>
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	021b      	lsls	r3, r3, #8
 801b1ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b1d2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b1d4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b1d8:	f7ff fd8e 	bl	801acf8 <SUBGRF_ReadRegister>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	461a      	mov	r2, r3
 801b1e0:	6a3b      	ldr	r3, [r7, #32]
 801b1e2:	4313      	orrs	r3, r2
 801b1e4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b1e6:	6a3b      	ldr	r3, [r7, #32]
 801b1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d005      	beq.n	801b1fc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b1f0:	6a3b      	ldr	r3, [r7, #32]
 801b1f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b1f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b1fa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b1fc:	693b      	ldr	r3, [r7, #16]
 801b1fe:	095b      	lsrs	r3, r3, #5
 801b200:	6a3a      	ldr	r2, [r7, #32]
 801b202:	fb02 f303 	mul.w	r3, r2, r3
 801b206:	11da      	asrs	r2, r3, #7
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	601a      	str	r2, [r3, #0]
}
 801b20c:	bf00      	nop
 801b20e:	3728      	adds	r7, #40	@ 0x28
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}
 801b214:	0c0a0804 	.word	0x0c0a0804
 801b218:	01e84800 	.word	0x01e84800

0801b21c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b21c:	b480      	push	{r7}
 801b21e:	b087      	sub	sp, #28
 801b220:	af00      	add	r7, sp, #0
 801b222:	4603      	mov	r3, r0
 801b224:	60b9      	str	r1, [r7, #8]
 801b226:	607a      	str	r2, [r7, #4]
 801b228:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b22a:	2300      	movs	r3, #0
 801b22c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b22e:	f04f 33ff 	mov.w	r3, #4294967295
 801b232:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b234:	697b      	ldr	r3, [r7, #20]
}
 801b236:	4618      	mov	r0, r3
 801b238:	371c      	adds	r7, #28
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bc80      	pop	{r7}
 801b23e:	4770      	bx	lr

0801b240 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b240:	b480      	push	{r7}
 801b242:	b087      	sub	sp, #28
 801b244:	af00      	add	r7, sp, #0
 801b246:	4603      	mov	r3, r0
 801b248:	60b9      	str	r1, [r7, #8]
 801b24a:	607a      	str	r2, [r7, #4]
 801b24c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b24e:	2300      	movs	r3, #0
 801b250:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b252:	f04f 33ff 	mov.w	r3, #4294967295
 801b256:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b258:	697b      	ldr	r3, [r7, #20]
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	371c      	adds	r7, #28
 801b25e:	46bd      	mov	sp, r7
 801b260:	bc80      	pop	{r7}
 801b262:	4770      	bx	lr

0801b264 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b264:	b480      	push	{r7}
 801b266:	b085      	sub	sp, #20
 801b268:	af00      	add	r7, sp, #0
 801b26a:	60f8      	str	r0, [r7, #12]
 801b26c:	60b9      	str	r1, [r7, #8]
 801b26e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b270:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b274:	4618      	mov	r0, r3
 801b276:	3714      	adds	r7, #20
 801b278:	46bd      	mov	sp, r7
 801b27a:	bc80      	pop	{r7}
 801b27c:	4770      	bx	lr

0801b27e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b27e:	b480      	push	{r7}
 801b280:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b282:	bf00      	nop
 801b284:	46bd      	mov	sp, r7
 801b286:	bc80      	pop	{r7}
 801b288:	4770      	bx	lr

0801b28a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b28a:	b480      	push	{r7}
 801b28c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b28e:	2300      	movs	r3, #0
#endif
}
 801b290:	4618      	mov	r0, r3
 801b292:	46bd      	mov	sp, r7
 801b294:	bc80      	pop	{r7}
 801b296:	4770      	bx	lr

0801b298 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b298:	b480      	push	{r7}
 801b29a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b29c:	2300      	movs	r3, #0
#endif
}
 801b29e:	4618      	mov	r0, r3
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	bc80      	pop	{r7}
 801b2a4:	4770      	bx	lr

0801b2a6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b2a6:	b480      	push	{r7}
 801b2a8:	b083      	sub	sp, #12
 801b2aa:	af00      	add	r7, sp, #0
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b2b0:	bf00      	nop
 801b2b2:	370c      	adds	r7, #12
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bc80      	pop	{r7}
 801b2b8:	4770      	bx	lr

0801b2ba <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b2ba:	b480      	push	{r7}
 801b2bc:	b087      	sub	sp, #28
 801b2be:	af00      	add	r7, sp, #0
 801b2c0:	60f8      	str	r0, [r7, #12]
 801b2c2:	460b      	mov	r3, r1
 801b2c4:	607a      	str	r2, [r7, #4]
 801b2c6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b2c8:	f04f 33ff 	mov.w	r3, #4294967295
 801b2cc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b2ce:	697b      	ldr	r3, [r7, #20]
}
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	371c      	adds	r7, #28
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bc80      	pop	{r7}
 801b2d8:	4770      	bx	lr

0801b2da <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b2da:	b480      	push	{r7}
 801b2dc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b2de:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	bc80      	pop	{r7}
 801b2e8:	4770      	bx	lr

0801b2ea <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b2ea:	b480      	push	{r7}
 801b2ec:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b2ee:	bf00      	nop
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bc80      	pop	{r7}
 801b2f4:	4770      	bx	lr

0801b2f6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b2f6:	b480      	push	{r7}
 801b2f8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b2fa:	bf00      	nop
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	bc80      	pop	{r7}
 801b300:	4770      	bx	lr

0801b302 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b302:	b480      	push	{r7}
 801b304:	b083      	sub	sp, #12
 801b306:	af00      	add	r7, sp, #0
 801b308:	4603      	mov	r3, r0
 801b30a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b30c:	bf00      	nop
 801b30e:	370c      	adds	r7, #12
 801b310:	46bd      	mov	sp, r7
 801b312:	bc80      	pop	{r7}
 801b314:	4770      	bx	lr
	...

0801b318 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b318:	b480      	push	{r7}
 801b31a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b31c:	4b04      	ldr	r3, [pc, #16]	@ (801b330 <UTIL_LPM_Init+0x18>)
 801b31e:	2200      	movs	r2, #0
 801b320:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b322:	4b04      	ldr	r3, [pc, #16]	@ (801b334 <UTIL_LPM_Init+0x1c>)
 801b324:	2200      	movs	r2, #0
 801b326:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b328:	bf00      	nop
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bc80      	pop	{r7}
 801b32e:	4770      	bx	lr
 801b330:	20001d84 	.word	0x20001d84
 801b334:	20001d88 	.word	0x20001d88

0801b338 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b338:	b480      	push	{r7}
 801b33a:	b087      	sub	sp, #28
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
 801b340:	460b      	mov	r3, r1
 801b342:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b344:	f3ef 8310 	mrs	r3, PRIMASK
 801b348:	613b      	str	r3, [r7, #16]
  return(result);
 801b34a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b34c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b34e:	b672      	cpsid	i
}
 801b350:	bf00      	nop
  
  switch( state )
 801b352:	78fb      	ldrb	r3, [r7, #3]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d008      	beq.n	801b36a <UTIL_LPM_SetStopMode+0x32>
 801b358:	2b01      	cmp	r3, #1
 801b35a:	d10e      	bne.n	801b37a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b35c:	4b0d      	ldr	r3, [pc, #52]	@ (801b394 <UTIL_LPM_SetStopMode+0x5c>)
 801b35e:	681a      	ldr	r2, [r3, #0]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	4313      	orrs	r3, r2
 801b364:	4a0b      	ldr	r2, [pc, #44]	@ (801b394 <UTIL_LPM_SetStopMode+0x5c>)
 801b366:	6013      	str	r3, [r2, #0]
      break;
 801b368:	e008      	b.n	801b37c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	43da      	mvns	r2, r3
 801b36e:	4b09      	ldr	r3, [pc, #36]	@ (801b394 <UTIL_LPM_SetStopMode+0x5c>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	4013      	ands	r3, r2
 801b374:	4a07      	ldr	r2, [pc, #28]	@ (801b394 <UTIL_LPM_SetStopMode+0x5c>)
 801b376:	6013      	str	r3, [r2, #0]
      break;
 801b378:	e000      	b.n	801b37c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b37a:	bf00      	nop
 801b37c:	697b      	ldr	r3, [r7, #20]
 801b37e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	f383 8810 	msr	PRIMASK, r3
}
 801b386:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b388:	bf00      	nop
 801b38a:	371c      	adds	r7, #28
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bc80      	pop	{r7}
 801b390:	4770      	bx	lr
 801b392:	bf00      	nop
 801b394:	20001d84 	.word	0x20001d84

0801b398 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b398:	b480      	push	{r7}
 801b39a:	b087      	sub	sp, #28
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
 801b3a0:	460b      	mov	r3, r1
 801b3a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3a4:	f3ef 8310 	mrs	r3, PRIMASK
 801b3a8:	613b      	str	r3, [r7, #16]
  return(result);
 801b3aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b3ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3ae:	b672      	cpsid	i
}
 801b3b0:	bf00      	nop
  
  switch(state)
 801b3b2:	78fb      	ldrb	r3, [r7, #3]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d008      	beq.n	801b3ca <UTIL_LPM_SetOffMode+0x32>
 801b3b8:	2b01      	cmp	r3, #1
 801b3ba:	d10e      	bne.n	801b3da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b3bc:	4b0d      	ldr	r3, [pc, #52]	@ (801b3f4 <UTIL_LPM_SetOffMode+0x5c>)
 801b3be:	681a      	ldr	r2, [r3, #0]
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	4313      	orrs	r3, r2
 801b3c4:	4a0b      	ldr	r2, [pc, #44]	@ (801b3f4 <UTIL_LPM_SetOffMode+0x5c>)
 801b3c6:	6013      	str	r3, [r2, #0]
      break;
 801b3c8:	e008      	b.n	801b3dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	43da      	mvns	r2, r3
 801b3ce:	4b09      	ldr	r3, [pc, #36]	@ (801b3f4 <UTIL_LPM_SetOffMode+0x5c>)
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	4013      	ands	r3, r2
 801b3d4:	4a07      	ldr	r2, [pc, #28]	@ (801b3f4 <UTIL_LPM_SetOffMode+0x5c>)
 801b3d6:	6013      	str	r3, [r2, #0]
      break;
 801b3d8:	e000      	b.n	801b3dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b3da:	bf00      	nop
 801b3dc:	697b      	ldr	r3, [r7, #20]
 801b3de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	f383 8810 	msr	PRIMASK, r3
}
 801b3e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b3e8:	bf00      	nop
 801b3ea:	371c      	adds	r7, #28
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	bc80      	pop	{r7}
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop
 801b3f4:	20001d88 	.word	0x20001d88

0801b3f8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b084      	sub	sp, #16
 801b3fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3fe:	f3ef 8310 	mrs	r3, PRIMASK
 801b402:	60bb      	str	r3, [r7, #8]
  return(result);
 801b404:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b408:	b672      	cpsid	i
}
 801b40a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b40c:	4b12      	ldr	r3, [pc, #72]	@ (801b458 <UTIL_LPM_EnterLowPower+0x60>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	2b00      	cmp	r3, #0
 801b412:	d006      	beq.n	801b422 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b414:	4b11      	ldr	r3, [pc, #68]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b41a:	4b10      	ldr	r3, [pc, #64]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b41c:	685b      	ldr	r3, [r3, #4]
 801b41e:	4798      	blx	r3
 801b420:	e010      	b.n	801b444 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b422:	4b0f      	ldr	r3, [pc, #60]	@ (801b460 <UTIL_LPM_EnterLowPower+0x68>)
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d006      	beq.n	801b438 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b42a:	4b0c      	ldr	r3, [pc, #48]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b42c:	689b      	ldr	r3, [r3, #8]
 801b42e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b430:	4b0a      	ldr	r3, [pc, #40]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b432:	68db      	ldr	r3, [r3, #12]
 801b434:	4798      	blx	r3
 801b436:	e005      	b.n	801b444 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b438:	4b08      	ldr	r3, [pc, #32]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b43a:	691b      	ldr	r3, [r3, #16]
 801b43c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b43e:	4b07      	ldr	r3, [pc, #28]	@ (801b45c <UTIL_LPM_EnterLowPower+0x64>)
 801b440:	695b      	ldr	r3, [r3, #20]
 801b442:	4798      	blx	r3
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	f383 8810 	msr	PRIMASK, r3
}
 801b44e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b450:	bf00      	nop
 801b452:	3710      	adds	r7, #16
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}
 801b458:	20001d84 	.word	0x20001d84
 801b45c:	0801ff50 	.word	0x0801ff50
 801b460:	20001d88 	.word	0x20001d88

0801b464 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b464:	b480      	push	{r7}
 801b466:	b087      	sub	sp, #28
 801b468:	af00      	add	r7, sp, #0
 801b46a:	60f8      	str	r0, [r7, #12]
 801b46c:	60b9      	str	r1, [r7, #8]
 801b46e:	4613      	mov	r3, r2
 801b470:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b476:	68bb      	ldr	r3, [r7, #8]
 801b478:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b47a:	e007      	b.n	801b48c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b47c:	693a      	ldr	r2, [r7, #16]
 801b47e:	1c53      	adds	r3, r2, #1
 801b480:	613b      	str	r3, [r7, #16]
 801b482:	697b      	ldr	r3, [r7, #20]
 801b484:	1c59      	adds	r1, r3, #1
 801b486:	6179      	str	r1, [r7, #20]
 801b488:	7812      	ldrb	r2, [r2, #0]
 801b48a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b48c:	88fb      	ldrh	r3, [r7, #6]
 801b48e:	1e5a      	subs	r2, r3, #1
 801b490:	80fa      	strh	r2, [r7, #6]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d1f2      	bne.n	801b47c <UTIL_MEM_cpy_8+0x18>
    }
}
 801b496:	bf00      	nop
 801b498:	bf00      	nop
 801b49a:	371c      	adds	r7, #28
 801b49c:	46bd      	mov	sp, r7
 801b49e:	bc80      	pop	{r7}
 801b4a0:	4770      	bx	lr

0801b4a2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b4a2:	b480      	push	{r7}
 801b4a4:	b085      	sub	sp, #20
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	6078      	str	r0, [r7, #4]
 801b4aa:	460b      	mov	r3, r1
 801b4ac:	70fb      	strb	r3, [r7, #3]
 801b4ae:	4613      	mov	r3, r2
 801b4b0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b4b6:	e004      	b.n	801b4c2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	1c5a      	adds	r2, r3, #1
 801b4bc:	60fa      	str	r2, [r7, #12]
 801b4be:	78fa      	ldrb	r2, [r7, #3]
 801b4c0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b4c2:	883b      	ldrh	r3, [r7, #0]
 801b4c4:	1e5a      	subs	r2, r3, #1
 801b4c6:	803a      	strh	r2, [r7, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d1f5      	bne.n	801b4b8 <UTIL_MEM_set_8+0x16>
  }
}
 801b4cc:	bf00      	nop
 801b4ce:	bf00      	nop
 801b4d0:	3714      	adds	r7, #20
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bc80      	pop	{r7}
 801b4d6:	4770      	bx	lr

0801b4d8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b4d8:	b082      	sub	sp, #8
 801b4da:	b480      	push	{r7}
 801b4dc:	b087      	sub	sp, #28
 801b4de:	af00      	add	r7, sp, #0
 801b4e0:	60f8      	str	r0, [r7, #12]
 801b4e2:	1d38      	adds	r0, r7, #4
 801b4e4:	e880 0006 	stmia.w	r0, {r1, r2}
 801b4e8:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	613b      	str	r3, [r7, #16]
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b4f2:	687a      	ldr	r2, [r7, #4]
 801b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f6:	4413      	add	r3, r2
 801b4f8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b4fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b4fe:	b29a      	uxth	r2, r3
 801b500:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b504:	b29b      	uxth	r3, r3
 801b506:	4413      	add	r3, r2
 801b508:	b29b      	uxth	r3, r3
 801b50a:	b21b      	sxth	r3, r3
 801b50c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b50e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b512:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b516:	db0a      	blt.n	801b52e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b518:	693b      	ldr	r3, [r7, #16]
 801b51a:	3301      	adds	r3, #1
 801b51c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b51e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b522:	b29b      	uxth	r3, r3
 801b524:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801b528:	b29b      	uxth	r3, r3
 801b52a:	b21b      	sxth	r3, r3
 801b52c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	461a      	mov	r2, r3
 801b532:	f107 0310 	add.w	r3, r7, #16
 801b536:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b53a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b53e:	68f8      	ldr	r0, [r7, #12]
 801b540:	371c      	adds	r7, #28
 801b542:	46bd      	mov	sp, r7
 801b544:	bc80      	pop	{r7}
 801b546:	b002      	add	sp, #8
 801b548:	4770      	bx	lr

0801b54a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b54a:	b082      	sub	sp, #8
 801b54c:	b480      	push	{r7}
 801b54e:	b087      	sub	sp, #28
 801b550:	af00      	add	r7, sp, #0
 801b552:	60f8      	str	r0, [r7, #12]
 801b554:	1d38      	adds	r0, r7, #4
 801b556:	e880 0006 	stmia.w	r0, {r1, r2}
 801b55a:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b55c:	2300      	movs	r3, #0
 801b55e:	613b      	str	r3, [r7, #16]
 801b560:	2300      	movs	r3, #0
 801b562:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b564:	687a      	ldr	r2, [r7, #4]
 801b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b568:	1ad3      	subs	r3, r2, r3
 801b56a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b56c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b570:	b29a      	uxth	r2, r3
 801b572:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b576:	b29b      	uxth	r3, r3
 801b578:	1ad3      	subs	r3, r2, r3
 801b57a:	b29b      	uxth	r3, r3
 801b57c:	b21b      	sxth	r3, r3
 801b57e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b580:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b584:	2b00      	cmp	r3, #0
 801b586:	da0a      	bge.n	801b59e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b588:	693b      	ldr	r3, [r7, #16]
 801b58a:	3b01      	subs	r3, #1
 801b58c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b58e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b592:	b29b      	uxth	r3, r3
 801b594:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801b598:	b29b      	uxth	r3, r3
 801b59a:	b21b      	sxth	r3, r3
 801b59c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	461a      	mov	r2, r3
 801b5a2:	f107 0310 	add.w	r3, r7, #16
 801b5a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b5aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b5ae:	68f8      	ldr	r0, [r7, #12]
 801b5b0:	371c      	adds	r7, #28
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bc80      	pop	{r7}
 801b5b6:	b002      	add	sp, #8
 801b5b8:	4770      	bx	lr
	...

0801b5bc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b088      	sub	sp, #32
 801b5c0:	af02      	add	r7, sp, #8
 801b5c2:	463b      	mov	r3, r7
 801b5c4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	60bb      	str	r3, [r7, #8]
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b5d0:	4b10      	ldr	r3, [pc, #64]	@ (801b614 <SysTimeSet+0x58>)
 801b5d2:	691b      	ldr	r3, [r3, #16]
 801b5d4:	f107 0208 	add.w	r2, r7, #8
 801b5d8:	3204      	adds	r2, #4
 801b5da:	4610      	mov	r0, r2
 801b5dc:	4798      	blx	r3
 801b5de:	4603      	mov	r3, r0
 801b5e0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b5e2:	f107 0010 	add.w	r0, r7, #16
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	9300      	str	r3, [sp, #0]
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	463a      	mov	r2, r7
 801b5ee:	ca06      	ldmia	r2, {r1, r2}
 801b5f0:	f7ff ffab 	bl	801b54a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b5f4:	4b07      	ldr	r3, [pc, #28]	@ (801b614 <SysTimeSet+0x58>)
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	693a      	ldr	r2, [r7, #16]
 801b5fa:	4610      	mov	r0, r2
 801b5fc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b5fe:	4b05      	ldr	r3, [pc, #20]	@ (801b614 <SysTimeSet+0x58>)
 801b600:	689b      	ldr	r3, [r3, #8]
 801b602:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b606:	4610      	mov	r0, r2
 801b608:	4798      	blx	r3
}
 801b60a:	bf00      	nop
 801b60c:	3718      	adds	r7, #24
 801b60e:	46bd      	mov	sp, r7
 801b610:	bd80      	pop	{r7, pc}
 801b612:	bf00      	nop
 801b614:	08020034 	.word	0x08020034

0801b618 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b08a      	sub	sp, #40	@ 0x28
 801b61c:	af02      	add	r7, sp, #8
 801b61e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b620:	2300      	movs	r3, #0
 801b622:	61bb      	str	r3, [r7, #24]
 801b624:	2300      	movs	r3, #0
 801b626:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b628:	2300      	movs	r3, #0
 801b62a:	613b      	str	r3, [r7, #16]
 801b62c:	2300      	movs	r3, #0
 801b62e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b630:	4b14      	ldr	r3, [pc, #80]	@ (801b684 <SysTimeGet+0x6c>)
 801b632:	691b      	ldr	r3, [r3, #16]
 801b634:	f107 0218 	add.w	r2, r7, #24
 801b638:	3204      	adds	r2, #4
 801b63a:	4610      	mov	r0, r2
 801b63c:	4798      	blx	r3
 801b63e:	4603      	mov	r3, r0
 801b640:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b642:	4b10      	ldr	r3, [pc, #64]	@ (801b684 <SysTimeGet+0x6c>)
 801b644:	68db      	ldr	r3, [r3, #12]
 801b646:	4798      	blx	r3
 801b648:	4603      	mov	r3, r0
 801b64a:	b21b      	sxth	r3, r3
 801b64c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b64e:	4b0d      	ldr	r3, [pc, #52]	@ (801b684 <SysTimeGet+0x6c>)
 801b650:	685b      	ldr	r3, [r3, #4]
 801b652:	4798      	blx	r3
 801b654:	4603      	mov	r3, r0
 801b656:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b658:	f107 0010 	add.w	r0, r7, #16
 801b65c:	69fb      	ldr	r3, [r7, #28]
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	69bb      	ldr	r3, [r7, #24]
 801b662:	f107 0208 	add.w	r2, r7, #8
 801b666:	ca06      	ldmia	r2, {r1, r2}
 801b668:	f7ff ff36 	bl	801b4d8 <SysTimeAdd>

  return sysTime;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	461a      	mov	r2, r3
 801b670:	f107 0310 	add.w	r3, r7, #16
 801b674:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b678:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	3720      	adds	r7, #32
 801b680:	46bd      	mov	sp, r7
 801b682:	bd80      	pop	{r7, pc}
 801b684:	08020034 	.word	0x08020034

0801b688 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b084      	sub	sp, #16
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b690:	2300      	movs	r3, #0
 801b692:	60bb      	str	r3, [r7, #8]
 801b694:	2300      	movs	r3, #0
 801b696:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b698:	4b0a      	ldr	r3, [pc, #40]	@ (801b6c4 <SysTimeGetMcuTime+0x3c>)
 801b69a:	691b      	ldr	r3, [r3, #16]
 801b69c:	f107 0208 	add.w	r2, r7, #8
 801b6a0:	3204      	adds	r2, #4
 801b6a2:	4610      	mov	r0, r2
 801b6a4:	4798      	blx	r3
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	461a      	mov	r2, r3
 801b6ae:	f107 0308 	add.w	r3, r7, #8
 801b6b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b6b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b6ba:	6878      	ldr	r0, [r7, #4]
 801b6bc:	3710      	adds	r7, #16
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}
 801b6c2:	bf00      	nop
 801b6c4:	08020034 	.word	0x08020034

0801b6c8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b088      	sub	sp, #32
 801b6cc:	af02      	add	r7, sp, #8
 801b6ce:	463b      	mov	r3, r7
 801b6d0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b6d4:	4b0f      	ldr	r3, [pc, #60]	@ (801b714 <SysTimeToMs+0x4c>)
 801b6d6:	68db      	ldr	r3, [r3, #12]
 801b6d8:	4798      	blx	r3
 801b6da:	4603      	mov	r3, r0
 801b6dc:	b21b      	sxth	r3, r3
 801b6de:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b6e0:	4b0c      	ldr	r3, [pc, #48]	@ (801b714 <SysTimeToMs+0x4c>)
 801b6e2:	685b      	ldr	r3, [r3, #4]
 801b6e4:	4798      	blx	r3
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b6ea:	f107 0008 	add.w	r0, r7, #8
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	9300      	str	r3, [sp, #0]
 801b6f2:	693b      	ldr	r3, [r7, #16]
 801b6f4:	463a      	mov	r2, r7
 801b6f6:	ca06      	ldmia	r2, {r1, r2}
 801b6f8:	f7ff ff27 	bl	801b54a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b702:	fb02 f303 	mul.w	r3, r2, r3
 801b706:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b70a:	4413      	add	r3, r2
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	3718      	adds	r7, #24
 801b710:	46bd      	mov	sp, r7
 801b712:	bd80      	pop	{r7, pc}
 801b714:	08020034 	.word	0x08020034

0801b718 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b08a      	sub	sp, #40	@ 0x28
 801b71c:	af02      	add	r7, sp, #8
 801b71e:	6078      	str	r0, [r7, #4]
 801b720:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	4a19      	ldr	r2, [pc, #100]	@ (801b78c <SysTimeFromMs+0x74>)
 801b726:	fba2 2303 	umull	r2, r3, r2, r3
 801b72a:	099b      	lsrs	r3, r3, #6
 801b72c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b72e:	69fb      	ldr	r3, [r7, #28]
 801b730:	617b      	str	r3, [r7, #20]
 801b732:	683b      	ldr	r3, [r7, #0]
 801b734:	b29a      	uxth	r2, r3
 801b736:	69fb      	ldr	r3, [r7, #28]
 801b738:	b29b      	uxth	r3, r3
 801b73a:	4619      	mov	r1, r3
 801b73c:	0149      	lsls	r1, r1, #5
 801b73e:	1ac9      	subs	r1, r1, r3
 801b740:	0089      	lsls	r1, r1, #2
 801b742:	440b      	add	r3, r1
 801b744:	00db      	lsls	r3, r3, #3
 801b746:	b29b      	uxth	r3, r3
 801b748:	1ad3      	subs	r3, r2, r3
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	b21b      	sxth	r3, r3
 801b74e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b750:	f107 030c 	add.w	r3, r7, #12
 801b754:	2200      	movs	r2, #0
 801b756:	601a      	str	r2, [r3, #0]
 801b758:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b75a:	4b0d      	ldr	r3, [pc, #52]	@ (801b790 <SysTimeFromMs+0x78>)
 801b75c:	68db      	ldr	r3, [r3, #12]
 801b75e:	4798      	blx	r3
 801b760:	4603      	mov	r3, r0
 801b762:	b21b      	sxth	r3, r3
 801b764:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b766:	4b0a      	ldr	r3, [pc, #40]	@ (801b790 <SysTimeFromMs+0x78>)
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	4798      	blx	r3
 801b76c:	4603      	mov	r3, r0
 801b76e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b770:	6878      	ldr	r0, [r7, #4]
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	9300      	str	r3, [sp, #0]
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	f107 0214 	add.w	r2, r7, #20
 801b77c:	ca06      	ldmia	r2, {r1, r2}
 801b77e:	f7ff feab 	bl	801b4d8 <SysTimeAdd>
}
 801b782:	6878      	ldr	r0, [r7, #4]
 801b784:	3720      	adds	r7, #32
 801b786:	46bd      	mov	sp, r7
 801b788:	bd80      	pop	{r7, pc}
 801b78a:	bf00      	nop
 801b78c:	10624dd3 	.word	0x10624dd3
 801b790:	08020034 	.word	0x08020034

0801b794 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b794:	b480      	push	{r7}
 801b796:	b085      	sub	sp, #20
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b79c:	2300      	movs	r3, #0
 801b79e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b7a0:	e00e      	b.n	801b7c0 <ee_skip_atoi+0x2c>
 801b7a2:	68fa      	ldr	r2, [r7, #12]
 801b7a4:	4613      	mov	r3, r2
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	4413      	add	r3, r2
 801b7aa:	005b      	lsls	r3, r3, #1
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	1c59      	adds	r1, r3, #1
 801b7b4:	687a      	ldr	r2, [r7, #4]
 801b7b6:	6011      	str	r1, [r2, #0]
 801b7b8:	781b      	ldrb	r3, [r3, #0]
 801b7ba:	4403      	add	r3, r0
 801b7bc:	3b30      	subs	r3, #48	@ 0x30
 801b7be:	60fb      	str	r3, [r7, #12]
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	781b      	ldrb	r3, [r3, #0]
 801b7c6:	2b2f      	cmp	r3, #47	@ 0x2f
 801b7c8:	d904      	bls.n	801b7d4 <ee_skip_atoi+0x40>
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	781b      	ldrb	r3, [r3, #0]
 801b7d0:	2b39      	cmp	r3, #57	@ 0x39
 801b7d2:	d9e6      	bls.n	801b7a2 <ee_skip_atoi+0xe>
  return i;
 801b7d4:	68fb      	ldr	r3, [r7, #12]
}
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	3714      	adds	r7, #20
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	bc80      	pop	{r7}
 801b7de:	4770      	bx	lr

0801b7e0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	b099      	sub	sp, #100	@ 0x64
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	60f8      	str	r0, [r7, #12]
 801b7e8:	60b9      	str	r1, [r7, #8]
 801b7ea:	607a      	str	r2, [r7, #4]
 801b7ec:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b7ee:	4b71      	ldr	r3, [pc, #452]	@ (801b9b4 <ee_number+0x1d4>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b7f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b7f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d002      	beq.n	801b804 <ee_number+0x24>
 801b7fe:	4b6e      	ldr	r3, [pc, #440]	@ (801b9b8 <ee_number+0x1d8>)
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b804:	683b      	ldr	r3, [r7, #0]
 801b806:	2b01      	cmp	r3, #1
 801b808:	dd02      	ble.n	801b810 <ee_number+0x30>
 801b80a:	683b      	ldr	r3, [r7, #0]
 801b80c:	2b24      	cmp	r3, #36	@ 0x24
 801b80e:	dd01      	ble.n	801b814 <ee_number+0x34>
 801b810:	2300      	movs	r3, #0
 801b812:	e0ca      	b.n	801b9aa <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b816:	f003 0301 	and.w	r3, r3, #1
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d001      	beq.n	801b822 <ee_number+0x42>
 801b81e:	2330      	movs	r3, #48	@ 0x30
 801b820:	e000      	b.n	801b824 <ee_number+0x44>
 801b822:	2320      	movs	r3, #32
 801b824:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b828:	2300      	movs	r3, #0
 801b82a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b82e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b830:	f003 0302 	and.w	r3, r3, #2
 801b834:	2b00      	cmp	r3, #0
 801b836:	d00b      	beq.n	801b850 <ee_number+0x70>
  {
    if (num < 0)
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	da08      	bge.n	801b850 <ee_number+0x70>
    {
      sign = '-';
 801b83e:	232d      	movs	r3, #45	@ 0x2d
 801b840:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	425b      	negs	r3, r3
 801b848:	607b      	str	r3, [r7, #4]
      size--;
 801b84a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b84c:	3b01      	subs	r3, #1
 801b84e:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b850:	2300      	movs	r3, #0
 801b852:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d11e      	bne.n	801b898 <ee_number+0xb8>
    tmp[i++] = '0';
 801b85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b85c:	1c5a      	adds	r2, r3, #1
 801b85e:	657a      	str	r2, [r7, #84]	@ 0x54
 801b860:	3360      	adds	r3, #96	@ 0x60
 801b862:	443b      	add	r3, r7
 801b864:	2230      	movs	r2, #48	@ 0x30
 801b866:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b86a:	e018      	b.n	801b89e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	683a      	ldr	r2, [r7, #0]
 801b870:	fbb3 f1f2 	udiv	r1, r3, r2
 801b874:	fb01 f202 	mul.w	r2, r1, r2
 801b878:	1a9b      	subs	r3, r3, r2
 801b87a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b87c:	441a      	add	r2, r3
 801b87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b880:	1c59      	adds	r1, r3, #1
 801b882:	6579      	str	r1, [r7, #84]	@ 0x54
 801b884:	7812      	ldrb	r2, [r2, #0]
 801b886:	3360      	adds	r3, #96	@ 0x60
 801b888:	443b      	add	r3, r7
 801b88a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	683b      	ldr	r3, [r7, #0]
 801b892:	fbb2 f3f3 	udiv	r3, r2, r3
 801b896:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d1e6      	bne.n	801b86c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b89e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b8a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b8a2:	429a      	cmp	r2, r3
 801b8a4:	dd01      	ble.n	801b8aa <ee_number+0xca>
 801b8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b8a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b8aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b8ae:	1ad3      	subs	r3, r2, r3
 801b8b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b8b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b8b4:	f003 0301 	and.w	r3, r3, #1
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d112      	bne.n	801b8e2 <ee_number+0x102>
 801b8bc:	e00c      	b.n	801b8d8 <ee_number+0xf8>
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	1c5a      	adds	r2, r3, #1
 801b8c2:	60fa      	str	r2, [r7, #12]
 801b8c4:	2220      	movs	r2, #32
 801b8c6:	701a      	strb	r2, [r3, #0]
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	3b01      	subs	r3, #1
 801b8cc:	60bb      	str	r3, [r7, #8]
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d101      	bne.n	801b8d8 <ee_number+0xf8>
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	e068      	b.n	801b9aa <ee_number+0x1ca>
 801b8d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b8da:	1e5a      	subs	r2, r3, #1
 801b8dc:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	dced      	bgt.n	801b8be <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b8e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d01b      	beq.n	801b922 <ee_number+0x142>
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	1c5a      	adds	r2, r3, #1
 801b8ee:	60fa      	str	r2, [r7, #12]
 801b8f0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b8f4:	701a      	strb	r2, [r3, #0]
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	3b01      	subs	r3, #1
 801b8fa:	60bb      	str	r3, [r7, #8]
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d10f      	bne.n	801b922 <ee_number+0x142>
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	e051      	b.n	801b9aa <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	1c5a      	adds	r2, r3, #1
 801b90a:	60fa      	str	r2, [r7, #12]
 801b90c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b910:	701a      	strb	r2, [r3, #0]
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	3b01      	subs	r3, #1
 801b916:	60bb      	str	r3, [r7, #8]
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d101      	bne.n	801b922 <ee_number+0x142>
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	e043      	b.n	801b9aa <ee_number+0x1ca>
 801b922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b924:	1e5a      	subs	r2, r3, #1
 801b926:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b928:	2b00      	cmp	r3, #0
 801b92a:	dcec      	bgt.n	801b906 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b92c:	e00c      	b.n	801b948 <ee_number+0x168>
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	1c5a      	adds	r2, r3, #1
 801b932:	60fa      	str	r2, [r7, #12]
 801b934:	2230      	movs	r2, #48	@ 0x30
 801b936:	701a      	strb	r2, [r3, #0]
 801b938:	68bb      	ldr	r3, [r7, #8]
 801b93a:	3b01      	subs	r3, #1
 801b93c:	60bb      	str	r3, [r7, #8]
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d101      	bne.n	801b948 <ee_number+0x168>
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	e030      	b.n	801b9aa <ee_number+0x1ca>
 801b948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b94a:	1e5a      	subs	r2, r3, #1
 801b94c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b94e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b950:	429a      	cmp	r2, r3
 801b952:	dbec      	blt.n	801b92e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b954:	e010      	b.n	801b978 <ee_number+0x198>
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	1c5a      	adds	r2, r3, #1
 801b95a:	60fa      	str	r2, [r7, #12]
 801b95c:	f107 0110 	add.w	r1, r7, #16
 801b960:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b962:	440a      	add	r2, r1
 801b964:	7812      	ldrb	r2, [r2, #0]
 801b966:	701a      	strb	r2, [r3, #0]
 801b968:	68bb      	ldr	r3, [r7, #8]
 801b96a:	3b01      	subs	r3, #1
 801b96c:	60bb      	str	r3, [r7, #8]
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d101      	bne.n	801b978 <ee_number+0x198>
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	e018      	b.n	801b9aa <ee_number+0x1ca>
 801b978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b97a:	1e5a      	subs	r2, r3, #1
 801b97c:	657a      	str	r2, [r7, #84]	@ 0x54
 801b97e:	2b00      	cmp	r3, #0
 801b980:	dce9      	bgt.n	801b956 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b982:	e00c      	b.n	801b99e <ee_number+0x1be>
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	1c5a      	adds	r2, r3, #1
 801b988:	60fa      	str	r2, [r7, #12]
 801b98a:	2220      	movs	r2, #32
 801b98c:	701a      	strb	r2, [r3, #0]
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	3b01      	subs	r3, #1
 801b992:	60bb      	str	r3, [r7, #8]
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d101      	bne.n	801b99e <ee_number+0x1be>
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	e005      	b.n	801b9aa <ee_number+0x1ca>
 801b99e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b9a0:	1e5a      	subs	r2, r3, #1
 801b9a2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	dced      	bgt.n	801b984 <ee_number+0x1a4>

  return str;
 801b9a8:	68fb      	ldr	r3, [r7, #12]
}
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	3764      	adds	r7, #100	@ 0x64
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	bc80      	pop	{r7}
 801b9b2:	4770      	bx	lr
 801b9b4:	20000148 	.word	0x20000148
 801b9b8:	2000014c 	.word	0x2000014c

0801b9bc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b092      	sub	sp, #72	@ 0x48
 801b9c0:	af04      	add	r7, sp, #16
 801b9c2:	60f8      	str	r0, [r7, #12]
 801b9c4:	60b9      	str	r1, [r7, #8]
 801b9c6:	607a      	str	r2, [r7, #4]
 801b9c8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	dc01      	bgt.n	801b9d4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	e13e      	b.n	801bc52 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b9d8:	e128      	b.n	801bc2c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b9da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	1ad2      	subs	r2, r2, r3
 801b9e0:	68bb      	ldr	r3, [r7, #8]
 801b9e2:	3b01      	subs	r3, #1
 801b9e4:	429a      	cmp	r2, r3
 801b9e6:	f280 812e 	bge.w	801bc46 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	2b25      	cmp	r3, #37	@ 0x25
 801b9f0:	d006      	beq.n	801ba00 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b9f2:	687a      	ldr	r2, [r7, #4]
 801b9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9f6:	1c59      	adds	r1, r3, #1
 801b9f8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b9fa:	7812      	ldrb	r2, [r2, #0]
 801b9fc:	701a      	strb	r2, [r3, #0]
      continue;
 801b9fe:	e112      	b.n	801bc26 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ba00:	2300      	movs	r3, #0
 801ba02:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	3301      	adds	r3, #1
 801ba08:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	781b      	ldrb	r3, [r3, #0]
 801ba0e:	2b30      	cmp	r3, #48	@ 0x30
 801ba10:	d103      	bne.n	801ba1a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801ba12:	6a3b      	ldr	r3, [r7, #32]
 801ba14:	f043 0301 	orr.w	r3, r3, #1
 801ba18:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801ba1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba1e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	2b2f      	cmp	r3, #47	@ 0x2f
 801ba26:	d908      	bls.n	801ba3a <tiny_vsnprintf_like+0x7e>
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	781b      	ldrb	r3, [r3, #0]
 801ba2c:	2b39      	cmp	r3, #57	@ 0x39
 801ba2e:	d804      	bhi.n	801ba3a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801ba30:	1d3b      	adds	r3, r7, #4
 801ba32:	4618      	mov	r0, r3
 801ba34:	f7ff feae 	bl	801b794 <ee_skip_atoi>
 801ba38:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801ba3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba3e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801ba40:	f04f 33ff 	mov.w	r3, #4294967295
 801ba44:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801ba46:	230a      	movs	r3, #10
 801ba48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	781b      	ldrb	r3, [r3, #0]
 801ba4e:	3b58      	subs	r3, #88	@ 0x58
 801ba50:	2b20      	cmp	r3, #32
 801ba52:	f200 8094 	bhi.w	801bb7e <tiny_vsnprintf_like+0x1c2>
 801ba56:	a201      	add	r2, pc, #4	@ (adr r2, 801ba5c <tiny_vsnprintf_like+0xa0>)
 801ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba5c:	0801bb67 	.word	0x0801bb67
 801ba60:	0801bb7f 	.word	0x0801bb7f
 801ba64:	0801bb7f 	.word	0x0801bb7f
 801ba68:	0801bb7f 	.word	0x0801bb7f
 801ba6c:	0801bb7f 	.word	0x0801bb7f
 801ba70:	0801bb7f 	.word	0x0801bb7f
 801ba74:	0801bb7f 	.word	0x0801bb7f
 801ba78:	0801bb7f 	.word	0x0801bb7f
 801ba7c:	0801bb7f 	.word	0x0801bb7f
 801ba80:	0801bb7f 	.word	0x0801bb7f
 801ba84:	0801bb7f 	.word	0x0801bb7f
 801ba88:	0801baeb 	.word	0x0801baeb
 801ba8c:	0801bb75 	.word	0x0801bb75
 801ba90:	0801bb7f 	.word	0x0801bb7f
 801ba94:	0801bb7f 	.word	0x0801bb7f
 801ba98:	0801bb7f 	.word	0x0801bb7f
 801ba9c:	0801bb7f 	.word	0x0801bb7f
 801baa0:	0801bb75 	.word	0x0801bb75
 801baa4:	0801bb7f 	.word	0x0801bb7f
 801baa8:	0801bb7f 	.word	0x0801bb7f
 801baac:	0801bb7f 	.word	0x0801bb7f
 801bab0:	0801bb7f 	.word	0x0801bb7f
 801bab4:	0801bb7f 	.word	0x0801bb7f
 801bab8:	0801bb7f 	.word	0x0801bb7f
 801babc:	0801bb7f 	.word	0x0801bb7f
 801bac0:	0801bb7f 	.word	0x0801bb7f
 801bac4:	0801bb7f 	.word	0x0801bb7f
 801bac8:	0801bb0b 	.word	0x0801bb0b
 801bacc:	0801bb7f 	.word	0x0801bb7f
 801bad0:	0801bbcb 	.word	0x0801bbcb
 801bad4:	0801bb7f 	.word	0x0801bb7f
 801bad8:	0801bb7f 	.word	0x0801bb7f
 801badc:	0801bb6f 	.word	0x0801bb6f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bae2:	1c5a      	adds	r2, r3, #1
 801bae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bae6:	2220      	movs	r2, #32
 801bae8:	701a      	strb	r2, [r3, #0]
 801baea:	69fb      	ldr	r3, [r7, #28]
 801baec:	3b01      	subs	r3, #1
 801baee:	61fb      	str	r3, [r7, #28]
 801baf0:	69fb      	ldr	r3, [r7, #28]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	dcf4      	bgt.n	801bae0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	1d1a      	adds	r2, r3, #4
 801bafa:	603a      	str	r2, [r7, #0]
 801bafc:	6819      	ldr	r1, [r3, #0]
 801bafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb00:	1c5a      	adds	r2, r3, #1
 801bb02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bb04:	b2ca      	uxtb	r2, r1
 801bb06:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801bb08:	e08d      	b.n	801bc26 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	1d1a      	adds	r2, r3, #4
 801bb0e:	603a      	str	r2, [r7, #0]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d101      	bne.n	801bb1e <tiny_vsnprintf_like+0x162>
 801bb1a:	4b50      	ldr	r3, [pc, #320]	@ (801bc5c <tiny_vsnprintf_like+0x2a0>)
 801bb1c:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801bb1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bb20:	f7e4 fb7e 	bl	8000220 <strlen>
 801bb24:	4603      	mov	r3, r0
 801bb26:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801bb28:	e004      	b.n	801bb34 <tiny_vsnprintf_like+0x178>
 801bb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb2c:	1c5a      	adds	r2, r3, #1
 801bb2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bb30:	2220      	movs	r2, #32
 801bb32:	701a      	strb	r2, [r3, #0]
 801bb34:	69fb      	ldr	r3, [r7, #28]
 801bb36:	1e5a      	subs	r2, r3, #1
 801bb38:	61fa      	str	r2, [r7, #28]
 801bb3a:	693a      	ldr	r2, [r7, #16]
 801bb3c:	429a      	cmp	r2, r3
 801bb3e:	dbf4      	blt.n	801bb2a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801bb40:	2300      	movs	r3, #0
 801bb42:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bb44:	e00a      	b.n	801bb5c <tiny_vsnprintf_like+0x1a0>
 801bb46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb48:	1c53      	adds	r3, r2, #1
 801bb4a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb4e:	1c59      	adds	r1, r3, #1
 801bb50:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bb52:	7812      	ldrb	r2, [r2, #0]
 801bb54:	701a      	strb	r2, [r3, #0]
 801bb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb58:	3301      	adds	r3, #1
 801bb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bb5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bb5e:	693b      	ldr	r3, [r7, #16]
 801bb60:	429a      	cmp	r2, r3
 801bb62:	dbf0      	blt.n	801bb46 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801bb64:	e05f      	b.n	801bc26 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801bb66:	6a3b      	ldr	r3, [r7, #32]
 801bb68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb6c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801bb6e:	2310      	movs	r3, #16
 801bb70:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801bb72:	e02b      	b.n	801bbcc <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801bb74:	6a3b      	ldr	r3, [r7, #32]
 801bb76:	f043 0302 	orr.w	r3, r3, #2
 801bb7a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801bb7c:	e025      	b.n	801bbca <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	2b25      	cmp	r3, #37	@ 0x25
 801bb84:	d004      	beq.n	801bb90 <tiny_vsnprintf_like+0x1d4>
 801bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb88:	1c5a      	adds	r2, r3, #1
 801bb8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bb8c:	2225      	movs	r2, #37	@ 0x25
 801bb8e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801bb90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	1ad2      	subs	r2, r2, r3
 801bb96:	68bb      	ldr	r3, [r7, #8]
 801bb98:	3b01      	subs	r3, #1
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	da16      	bge.n	801bbcc <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	781b      	ldrb	r3, [r3, #0]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d006      	beq.n	801bbb4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801bba6:	687a      	ldr	r2, [r7, #4]
 801bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbaa:	1c59      	adds	r1, r3, #1
 801bbac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bbae:	7812      	ldrb	r2, [r2, #0]
 801bbb0:	701a      	strb	r2, [r3, #0]
 801bbb2:	e002      	b.n	801bbba <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	3b01      	subs	r3, #1
 801bbb8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801bbba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	1ad2      	subs	r2, r2, r3
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	3b01      	subs	r3, #1
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	db2d      	blt.n	801bc24 <tiny_vsnprintf_like+0x268>
 801bbc8:	e000      	b.n	801bbcc <tiny_vsnprintf_like+0x210>
        break;
 801bbca:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	2b6c      	cmp	r3, #108	@ 0x6c
 801bbd0:	d105      	bne.n	801bbde <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801bbd2:	683b      	ldr	r3, [r7, #0]
 801bbd4:	1d1a      	adds	r2, r3, #4
 801bbd6:	603a      	str	r2, [r7, #0]
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	637b      	str	r3, [r7, #52]	@ 0x34
 801bbdc:	e00f      	b.n	801bbfe <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801bbde:	6a3b      	ldr	r3, [r7, #32]
 801bbe0:	f003 0302 	and.w	r3, r3, #2
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d005      	beq.n	801bbf4 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801bbe8:	683b      	ldr	r3, [r7, #0]
 801bbea:	1d1a      	adds	r2, r3, #4
 801bbec:	603a      	str	r2, [r7, #0]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	637b      	str	r3, [r7, #52]	@ 0x34
 801bbf2:	e004      	b.n	801bbfe <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801bbf4:	683b      	ldr	r3, [r7, #0]
 801bbf6:	1d1a      	adds	r2, r3, #4
 801bbf8:	603a      	str	r2, [r7, #0]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	1e5a      	subs	r2, r3, #1
 801bc02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	1acb      	subs	r3, r1, r3
 801bc08:	1ad1      	subs	r1, r2, r3
 801bc0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bc0c:	6a3b      	ldr	r3, [r7, #32]
 801bc0e:	9302      	str	r3, [sp, #8]
 801bc10:	69bb      	ldr	r3, [r7, #24]
 801bc12:	9301      	str	r3, [sp, #4]
 801bc14:	69fb      	ldr	r3, [r7, #28]
 801bc16:	9300      	str	r3, [sp, #0]
 801bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bc1c:	f7ff fde0 	bl	801b7e0 <ee_number>
 801bc20:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801bc22:	e000      	b.n	801bc26 <tiny_vsnprintf_like+0x26a>
        continue;
 801bc24:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	3301      	adds	r3, #1
 801bc2a:	607b      	str	r3, [r7, #4]
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	781b      	ldrb	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f47f aed2 	bne.w	801b9da <tiny_vsnprintf_like+0x1e>
 801bc36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	1ad2      	subs	r2, r2, r3
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	3b01      	subs	r3, #1
 801bc40:	429a      	cmp	r2, r3
 801bc42:	f6bf aeca 	bge.w	801b9da <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801bc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc48:	2200      	movs	r2, #0
 801bc4a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801bc4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	1ad3      	subs	r3, r2, r3
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3738      	adds	r7, #56	@ 0x38
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
 801bc5a:	bf00      	nop
 801bc5c:	0801ff48 	.word	0x0801ff48

0801bc60 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bc60:	b580      	push	{r7, lr}
 801bc62:	b090      	sub	sp, #64	@ 0x40
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bc68:	4b73      	ldr	r3, [pc, #460]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801bc6e:	4b72      	ldr	r3, [pc, #456]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	4013      	ands	r3, r2
 801bc76:	4a70      	ldr	r2, [pc, #448]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bc78:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801bc7a:	4b70      	ldr	r3, [pc, #448]	@ (801be3c <UTIL_SEQ_Run+0x1dc>)
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801bc80:	4b6f      	ldr	r3, [pc, #444]	@ (801be40 <UTIL_SEQ_Run+0x1e0>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801bc86:	4b6f      	ldr	r3, [pc, #444]	@ (801be44 <UTIL_SEQ_Run+0x1e4>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801bc8c:	4b6e      	ldr	r3, [pc, #440]	@ (801be48 <UTIL_SEQ_Run+0x1e8>)
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bc92:	e08d      	b.n	801bdb0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801bc94:	2300      	movs	r3, #0
 801bc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bc98:	e002      	b.n	801bca0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801bc9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bc9c:	3301      	adds	r3, #1
 801bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bca0:	4a6a      	ldr	r2, [pc, #424]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bca4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcaa:	401a      	ands	r2, r3
 801bcac:	4b62      	ldr	r3, [pc, #392]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	4013      	ands	r3, r2
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d0f1      	beq.n	801bc9a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801bcb6:	4a65      	ldr	r2, [pc, #404]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bcb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bcba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcc0:	401a      	ands	r2, r3
 801bcc2:	4b5d      	ldr	r3, [pc, #372]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	4013      	ands	r3, r2
 801bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bcca:	4a60      	ldr	r2, [pc, #384]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bcce:	00db      	lsls	r3, r3, #3
 801bcd0:	4413      	add	r3, r2
 801bcd2:	685a      	ldr	r2, [r3, #4]
 801bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcd6:	4013      	ands	r3, r2
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d106      	bne.n	801bcea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801bcdc:	4a5b      	ldr	r2, [pc, #364]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bce0:	00db      	lsls	r3, r3, #3
 801bce2:	4413      	add	r3, r2
 801bce4:	f04f 32ff 	mov.w	r2, #4294967295
 801bce8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801bcea:	4a58      	ldr	r2, [pc, #352]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bcec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bcee:	00db      	lsls	r3, r3, #3
 801bcf0:	4413      	add	r3, r2
 801bcf2:	685a      	ldr	r2, [r3, #4]
 801bcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf6:	4013      	ands	r3, r2
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f000 f907 	bl	801bf0c <SEQ_BitPosition>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	461a      	mov	r2, r3
 801bd02:	4b53      	ldr	r3, [pc, #332]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bd04:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801bd06:	4a51      	ldr	r2, [pc, #324]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd0a:	00db      	lsls	r3, r3, #3
 801bd0c:	4413      	add	r3, r2
 801bd0e:	685a      	ldr	r2, [r3, #4]
 801bd10:	4b4f      	ldr	r3, [pc, #316]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	2101      	movs	r1, #1
 801bd16:	fa01 f303 	lsl.w	r3, r1, r3
 801bd1a:	43db      	mvns	r3, r3
 801bd1c:	401a      	ands	r2, r3
 801bd1e:	494b      	ldr	r1, [pc, #300]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd22:	00db      	lsls	r3, r3, #3
 801bd24:	440b      	add	r3, r1
 801bd26:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd28:	f3ef 8310 	mrs	r3, PRIMASK
 801bd2c:	61bb      	str	r3, [r7, #24]
  return(result);
 801bd2e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bd30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd32:	b672      	cpsid	i
}
 801bd34:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801bd36:	4b46      	ldr	r3, [pc, #280]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	2201      	movs	r2, #1
 801bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 801bd40:	43da      	mvns	r2, r3
 801bd42:	4b3e      	ldr	r3, [pc, #248]	@ (801be3c <UTIL_SEQ_Run+0x1dc>)
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	4013      	ands	r3, r2
 801bd48:	4a3c      	ldr	r2, [pc, #240]	@ (801be3c <UTIL_SEQ_Run+0x1dc>)
 801bd4a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bd50:	e013      	b.n	801bd7a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801bd52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd54:	3b01      	subs	r3, #1
 801bd56:	4a3d      	ldr	r2, [pc, #244]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bd58:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801bd5c:	4b3c      	ldr	r3, [pc, #240]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2201      	movs	r2, #1
 801bd62:	fa02 f303 	lsl.w	r3, r2, r3
 801bd66:	43da      	mvns	r2, r3
 801bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd6a:	3b01      	subs	r3, #1
 801bd6c:	400a      	ands	r2, r1
 801bd6e:	4937      	ldr	r1, [pc, #220]	@ (801be4c <UTIL_SEQ_Run+0x1ec>)
 801bd70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801bd74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd76:	3b01      	subs	r3, #1
 801bd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bd7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d1e8      	bne.n	801bd52 <UTIL_SEQ_Run+0xf2>
 801bd80:	6a3b      	ldr	r3, [r7, #32]
 801bd82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	f383 8810 	msr	PRIMASK, r3
}
 801bd8a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801bd8c:	4b30      	ldr	r3, [pc, #192]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	4a30      	ldr	r2, [pc, #192]	@ (801be54 <UTIL_SEQ_Run+0x1f4>)
 801bd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd96:	4798      	blx	r3

    local_taskset = TaskSet;
 801bd98:	4b28      	ldr	r3, [pc, #160]	@ (801be3c <UTIL_SEQ_Run+0x1dc>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801bd9e:	4b28      	ldr	r3, [pc, #160]	@ (801be40 <UTIL_SEQ_Run+0x1e0>)
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801bda4:	4b27      	ldr	r3, [pc, #156]	@ (801be44 <UTIL_SEQ_Run+0x1e4>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801bdaa:	4b27      	ldr	r3, [pc, #156]	@ (801be48 <UTIL_SEQ_Run+0x1e8>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bdb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdb4:	401a      	ands	r2, r3
 801bdb6:	4b20      	ldr	r3, [pc, #128]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	4013      	ands	r3, r2
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d005      	beq.n	801bdcc <UTIL_SEQ_Run+0x16c>
 801bdc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdc4:	4013      	ands	r3, r2
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	f43f af64 	beq.w	801bc94 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801bdcc:	4b20      	ldr	r3, [pc, #128]	@ (801be50 <UTIL_SEQ_Run+0x1f0>)
 801bdce:	f04f 32ff 	mov.w	r2, #4294967295
 801bdd2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801bdd4:	f000 f88e 	bl	801bef4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdd8:	f3ef 8310 	mrs	r3, PRIMASK
 801bddc:	613b      	str	r3, [r7, #16]
  return(result);
 801bdde:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801bde0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bde2:	b672      	cpsid	i
}
 801bde4:	bf00      	nop
  local_taskset = TaskSet;
 801bde6:	4b15      	ldr	r3, [pc, #84]	@ (801be3c <UTIL_SEQ_Run+0x1dc>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801bdec:	4b14      	ldr	r3, [pc, #80]	@ (801be40 <UTIL_SEQ_Run+0x1e0>)
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801bdf2:	4b14      	ldr	r3, [pc, #80]	@ (801be44 <UTIL_SEQ_Run+0x1e4>)
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801bdf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdfc:	401a      	ands	r2, r3
 801bdfe:	4b0e      	ldr	r3, [pc, #56]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	4013      	ands	r3, r2
 801be04:	2b00      	cmp	r3, #0
 801be06:	d107      	bne.n	801be18 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801be08:	4b0f      	ldr	r3, [pc, #60]	@ (801be48 <UTIL_SEQ_Run+0x1e8>)
 801be0a:	681a      	ldr	r2, [r3, #0]
 801be0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be0e:	4013      	ands	r3, r2
 801be10:	2b00      	cmp	r3, #0
 801be12:	d101      	bne.n	801be18 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801be14:	f7e6 fb5a 	bl	80024cc <UTIL_SEQ_Idle>
 801be18:	69fb      	ldr	r3, [r7, #28]
 801be1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	f383 8810 	msr	PRIMASK, r3
}
 801be22:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801be24:	f000 f86c 	bl	801bf00 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801be28:	4a03      	ldr	r2, [pc, #12]	@ (801be38 <UTIL_SEQ_Run+0x1d8>)
 801be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be2c:	6013      	str	r3, [r2, #0]

  return;
 801be2e:	bf00      	nop
}
 801be30:	3740      	adds	r7, #64	@ 0x40
 801be32:	46bd      	mov	sp, r7
 801be34:	bd80      	pop	{r7, pc}
 801be36:	bf00      	nop
 801be38:	20000154 	.word	0x20000154
 801be3c:	20001d8c 	.word	0x20001d8c
 801be40:	20001d90 	.word	0x20001d90
 801be44:	20000150 	.word	0x20000150
 801be48:	20001d94 	.word	0x20001d94
 801be4c:	20001dac 	.word	0x20001dac
 801be50:	20001d98 	.word	0x20001d98
 801be54:	20001d9c 	.word	0x20001d9c

0801be58 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b088      	sub	sp, #32
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	60f8      	str	r0, [r7, #12]
 801be60:	60b9      	str	r1, [r7, #8]
 801be62:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be64:	f3ef 8310 	mrs	r3, PRIMASK
 801be68:	617b      	str	r3, [r7, #20]
  return(result);
 801be6a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801be6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801be6e:	b672      	cpsid	i
}
 801be70:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801be72:	68f8      	ldr	r0, [r7, #12]
 801be74:	f000 f84a 	bl	801bf0c <SEQ_BitPosition>
 801be78:	4603      	mov	r3, r0
 801be7a:	4619      	mov	r1, r3
 801be7c:	4a06      	ldr	r2, [pc, #24]	@ (801be98 <UTIL_SEQ_RegTask+0x40>)
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801be84:	69fb      	ldr	r3, [r7, #28]
 801be86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be88:	69bb      	ldr	r3, [r7, #24]
 801be8a:	f383 8810 	msr	PRIMASK, r3
}
 801be8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801be90:	bf00      	nop
}
 801be92:	3720      	adds	r7, #32
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	20001d9c 	.word	0x20001d9c

0801be9c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801be9c:	b480      	push	{r7}
 801be9e:	b087      	sub	sp, #28
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bea6:	f3ef 8310 	mrs	r3, PRIMASK
 801beaa:	60fb      	str	r3, [r7, #12]
  return(result);
 801beac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801beae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801beb0:	b672      	cpsid	i
}
 801beb2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801beb4:	4b0d      	ldr	r3, [pc, #52]	@ (801beec <UTIL_SEQ_SetTask+0x50>)
 801beb6:	681a      	ldr	r2, [r3, #0]
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	4313      	orrs	r3, r2
 801bebc:	4a0b      	ldr	r2, [pc, #44]	@ (801beec <UTIL_SEQ_SetTask+0x50>)
 801bebe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801bec0:	4a0b      	ldr	r2, [pc, #44]	@ (801bef0 <UTIL_SEQ_SetTask+0x54>)
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	431a      	orrs	r2, r3
 801becc:	4908      	ldr	r1, [pc, #32]	@ (801bef0 <UTIL_SEQ_SetTask+0x54>)
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bed8:	693b      	ldr	r3, [r7, #16]
 801beda:	f383 8810 	msr	PRIMASK, r3
}
 801bede:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bee0:	bf00      	nop
}
 801bee2:	371c      	adds	r7, #28
 801bee4:	46bd      	mov	sp, r7
 801bee6:	bc80      	pop	{r7}
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop
 801beec:	20001d8c 	.word	0x20001d8c
 801bef0:	20001dac 	.word	0x20001dac

0801bef4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801bef4:	b480      	push	{r7}
 801bef6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bef8:	bf00      	nop
}
 801befa:	46bd      	mov	sp, r7
 801befc:	bc80      	pop	{r7}
 801befe:	4770      	bx	lr

0801bf00 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801bf00:	b480      	push	{r7}
 801bf02:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bf04:	bf00      	nop
}
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bc80      	pop	{r7}
 801bf0a:	4770      	bx	lr

0801bf0c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801bf0c:	b480      	push	{r7}
 801bf0e:	b085      	sub	sp, #20
 801bf10:	af00      	add	r7, sp, #0
 801bf12:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801bf14:	2300      	movs	r3, #0
 801bf16:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf22:	d204      	bcs.n	801bf2e <SEQ_BitPosition+0x22>
 801bf24:	2310      	movs	r3, #16
 801bf26:	73fb      	strb	r3, [r7, #15]
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	041b      	lsls	r3, r3, #16
 801bf2c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801bf2e:	68bb      	ldr	r3, [r7, #8]
 801bf30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf34:	d205      	bcs.n	801bf42 <SEQ_BitPosition+0x36>
 801bf36:	7bfb      	ldrb	r3, [r7, #15]
 801bf38:	3308      	adds	r3, #8
 801bf3a:	73fb      	strb	r3, [r7, #15]
 801bf3c:	68bb      	ldr	r3, [r7, #8]
 801bf3e:	021b      	lsls	r3, r3, #8
 801bf40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801bf42:	68bb      	ldr	r3, [r7, #8]
 801bf44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bf48:	d205      	bcs.n	801bf56 <SEQ_BitPosition+0x4a>
 801bf4a:	7bfb      	ldrb	r3, [r7, #15]
 801bf4c:	3304      	adds	r3, #4
 801bf4e:	73fb      	strb	r3, [r7, #15]
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	011b      	lsls	r3, r3, #4
 801bf54:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	0f1b      	lsrs	r3, r3, #28
 801bf5a:	4a07      	ldr	r2, [pc, #28]	@ (801bf78 <SEQ_BitPosition+0x6c>)
 801bf5c:	5cd2      	ldrb	r2, [r2, r3]
 801bf5e:	7bfb      	ldrb	r3, [r7, #15]
 801bf60:	4413      	add	r3, r2
 801bf62:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801bf64:	7bfb      	ldrb	r3, [r7, #15]
 801bf66:	f1c3 031f 	rsb	r3, r3, #31
 801bf6a:	b2db      	uxtb	r3, r3
}
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	3714      	adds	r7, #20
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bc80      	pop	{r7}
 801bf74:	4770      	bx	lr
 801bf76:	bf00      	nop
 801bf78:	08020588 	.word	0x08020588

0801bf7c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801bf80:	4b04      	ldr	r3, [pc, #16]	@ (801bf94 <UTIL_TIMER_Init+0x18>)
 801bf82:	2200      	movs	r2, #0
 801bf84:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801bf86:	4b04      	ldr	r3, [pc, #16]	@ (801bf98 <UTIL_TIMER_Init+0x1c>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	4798      	blx	r3
 801bf8c:	4603      	mov	r3, r0
}
 801bf8e:	4618      	mov	r0, r3
 801bf90:	bd80      	pop	{r7, pc}
 801bf92:	bf00      	nop
 801bf94:	20001db4 	.word	0x20001db4
 801bf98:	08020008 	.word	0x08020008

0801bf9c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801bf9c:	b580      	push	{r7, lr}
 801bf9e:	b084      	sub	sp, #16
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	60f8      	str	r0, [r7, #12]
 801bfa4:	60b9      	str	r1, [r7, #8]
 801bfa6:	603b      	str	r3, [r7, #0]
 801bfa8:	4613      	mov	r3, r2
 801bfaa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d023      	beq.n	801bffa <UTIL_TIMER_Create+0x5e>
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d020      	beq.n	801bffa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	2200      	movs	r2, #0
 801bfbc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801bfbe:	4b11      	ldr	r3, [pc, #68]	@ (801c004 <UTIL_TIMER_Create+0x68>)
 801bfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bfc2:	68b8      	ldr	r0, [r7, #8]
 801bfc4:	4798      	blx	r3
 801bfc6:	4602      	mov	r2, r0
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	2200      	movs	r2, #0
 801bfd0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	2200      	movs	r2, #0
 801bfd6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	2200      	movs	r2, #0
 801bfdc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	683a      	ldr	r2, [r7, #0]
 801bfe2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	69ba      	ldr	r2, [r7, #24]
 801bfe8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	79fa      	ldrb	r2, [r7, #7]
 801bfee:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	2200      	movs	r2, #0
 801bff4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801bff6:	2300      	movs	r3, #0
 801bff8:	e000      	b.n	801bffc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bffa:	2301      	movs	r3, #1
  }
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	3710      	adds	r7, #16
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}
 801c004:	08020008 	.word	0x08020008

0801c008 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b08a      	sub	sp, #40	@ 0x28
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c010:	2300      	movs	r3, #0
 801c012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d056      	beq.n	801c0ca <UTIL_TIMER_Start+0xc2>
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f000 f9a9 	bl	801c374 <TimerExists>
 801c022:	4603      	mov	r3, r0
 801c024:	f083 0301 	eor.w	r3, r3, #1
 801c028:	b2db      	uxtb	r3, r3
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d04d      	beq.n	801c0ca <UTIL_TIMER_Start+0xc2>
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	7a5b      	ldrb	r3, [r3, #9]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d149      	bne.n	801c0ca <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c036:	f3ef 8310 	mrs	r3, PRIMASK
 801c03a:	613b      	str	r3, [r7, #16]
  return(result);
 801c03c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c03e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c040:	b672      	cpsid	i
}
 801c042:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	685b      	ldr	r3, [r3, #4]
 801c048:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c04a:	4b24      	ldr	r3, [pc, #144]	@ (801c0dc <UTIL_TIMER_Start+0xd4>)
 801c04c:	6a1b      	ldr	r3, [r3, #32]
 801c04e:	4798      	blx	r3
 801c050:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c052:	6a3a      	ldr	r2, [r7, #32]
 801c054:	69bb      	ldr	r3, [r7, #24]
 801c056:	429a      	cmp	r2, r3
 801c058:	d201      	bcs.n	801c05e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c05a:	69bb      	ldr	r3, [r7, #24]
 801c05c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	6a3a      	ldr	r2, [r7, #32]
 801c062:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2200      	movs	r2, #0
 801c068:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	2201      	movs	r2, #1
 801c06e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	2200      	movs	r2, #0
 801c074:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c076:	4b1a      	ldr	r3, [pc, #104]	@ (801c0e0 <UTIL_TIMER_Start+0xd8>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d106      	bne.n	801c08c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c07e:	4b17      	ldr	r3, [pc, #92]	@ (801c0dc <UTIL_TIMER_Start+0xd4>)
 801c080:	691b      	ldr	r3, [r3, #16]
 801c082:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c084:	6878      	ldr	r0, [r7, #4]
 801c086:	f000 f9eb 	bl	801c460 <TimerInsertNewHeadTimer>
 801c08a:	e017      	b.n	801c0bc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c08c:	4b13      	ldr	r3, [pc, #76]	@ (801c0dc <UTIL_TIMER_Start+0xd4>)
 801c08e:	699b      	ldr	r3, [r3, #24]
 801c090:	4798      	blx	r3
 801c092:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	681a      	ldr	r2, [r3, #0]
 801c098:	697b      	ldr	r3, [r7, #20]
 801c09a:	441a      	add	r2, r3
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681a      	ldr	r2, [r3, #0]
 801c0a4:	4b0e      	ldr	r3, [pc, #56]	@ (801c0e0 <UTIL_TIMER_Start+0xd8>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	429a      	cmp	r2, r3
 801c0ac:	d203      	bcs.n	801c0b6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c0ae:	6878      	ldr	r0, [r7, #4]
 801c0b0:	f000 f9d6 	bl	801c460 <TimerInsertNewHeadTimer>
 801c0b4:	e002      	b.n	801c0bc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f000 f9a2 	bl	801c400 <TimerInsertTimer>
 801c0bc:	69fb      	ldr	r3, [r7, #28]
 801c0be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	f383 8810 	msr	PRIMASK, r3
}
 801c0c6:	bf00      	nop
  {
 801c0c8:	e002      	b.n	801c0d0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c0ca:	2301      	movs	r3, #1
 801c0cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3728      	adds	r7, #40	@ 0x28
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}
 801c0dc:	08020008 	.word	0x08020008
 801c0e0:	20001db4 	.word	0x20001db4

0801c0e4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b088      	sub	sp, #32
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d05b      	beq.n	801c1ae <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0f6:	f3ef 8310 	mrs	r3, PRIMASK
 801c0fa:	60fb      	str	r3, [r7, #12]
  return(result);
 801c0fc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c0fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c100:	b672      	cpsid	i
}
 801c102:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c104:	4b2d      	ldr	r3, [pc, #180]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c10a:	4b2c      	ldr	r3, [pc, #176]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	2201      	movs	r2, #1
 801c114:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c116:	4b29      	ldr	r3, [pc, #164]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d041      	beq.n	801c1a2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	2200      	movs	r2, #0
 801c122:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c124:	4b25      	ldr	r3, [pc, #148]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	687a      	ldr	r2, [r7, #4]
 801c12a:	429a      	cmp	r2, r3
 801c12c:	d134      	bne.n	801c198 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c12e:	4b23      	ldr	r3, [pc, #140]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	2200      	movs	r2, #0
 801c134:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c136:	4b21      	ldr	r3, [pc, #132]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	695b      	ldr	r3, [r3, #20]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d00a      	beq.n	801c156 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c140:	4b1e      	ldr	r3, [pc, #120]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	695b      	ldr	r3, [r3, #20]
 801c146:	4a1d      	ldr	r2, [pc, #116]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c148:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c14a:	4b1c      	ldr	r3, [pc, #112]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4618      	mov	r0, r3
 801c150:	f000 f92c 	bl	801c3ac <TimerSetTimeout>
 801c154:	e023      	b.n	801c19e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c156:	4b1a      	ldr	r3, [pc, #104]	@ (801c1c0 <UTIL_TIMER_Stop+0xdc>)
 801c158:	68db      	ldr	r3, [r3, #12]
 801c15a:	4798      	blx	r3
            TimerListHead = NULL;
 801c15c:	4b17      	ldr	r3, [pc, #92]	@ (801c1bc <UTIL_TIMER_Stop+0xd8>)
 801c15e:	2200      	movs	r2, #0
 801c160:	601a      	str	r2, [r3, #0]
 801c162:	e01c      	b.n	801c19e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c164:	697a      	ldr	r2, [r7, #20]
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d110      	bne.n	801c18e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	695b      	ldr	r3, [r3, #20]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d006      	beq.n	801c182 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c174:	697b      	ldr	r3, [r7, #20]
 801c176:	695b      	ldr	r3, [r3, #20]
 801c178:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c17a:	69bb      	ldr	r3, [r7, #24]
 801c17c:	697a      	ldr	r2, [r7, #20]
 801c17e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c180:	e00d      	b.n	801c19e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c182:	2300      	movs	r3, #0
 801c184:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c186:	69bb      	ldr	r3, [r7, #24]
 801c188:	697a      	ldr	r2, [r7, #20]
 801c18a:	615a      	str	r2, [r3, #20]
            break;
 801c18c:	e007      	b.n	801c19e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c18e:	697b      	ldr	r3, [r7, #20]
 801c190:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c192:	697b      	ldr	r3, [r7, #20]
 801c194:	695b      	ldr	r3, [r3, #20]
 801c196:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c198:	697b      	ldr	r3, [r7, #20]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d1e2      	bne.n	801c164 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c19e:	2300      	movs	r3, #0
 801c1a0:	77fb      	strb	r3, [r7, #31]
 801c1a2:	693b      	ldr	r3, [r7, #16]
 801c1a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	f383 8810 	msr	PRIMASK, r3
}
 801c1ac:	e001      	b.n	801c1b2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c1ae:	2301      	movs	r3, #1
 801c1b0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	3720      	adds	r7, #32
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bd80      	pop	{r7, pc}
 801c1bc:	20001db4 	.word	0x20001db4
 801c1c0:	08020008 	.word	0x08020008

0801c1c4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b084      	sub	sp, #16
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
 801c1cc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d102      	bne.n	801c1de <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c1d8:	2301      	movs	r3, #1
 801c1da:	73fb      	strb	r3, [r7, #15]
 801c1dc:	e014      	b.n	801c208 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c1de:	4b0d      	ldr	r3, [pc, #52]	@ (801c214 <UTIL_TIMER_SetPeriod+0x50>)
 801c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1e2:	6838      	ldr	r0, [r7, #0]
 801c1e4:	4798      	blx	r3
 801c1e6:	4602      	mov	r2, r0
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c1ec:	6878      	ldr	r0, [r7, #4]
 801c1ee:	f000 f8c1 	bl	801c374 <TimerExists>
 801c1f2:	4603      	mov	r3, r0
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d007      	beq.n	801c208 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c1f8:	6878      	ldr	r0, [r7, #4]
 801c1fa:	f7ff ff73 	bl	801c0e4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c1fe:	6878      	ldr	r0, [r7, #4]
 801c200:	f7ff ff02 	bl	801c008 <UTIL_TIMER_Start>
 801c204:	4603      	mov	r3, r0
 801c206:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c208:	7bfb      	ldrb	r3, [r7, #15]
}
 801c20a:	4618      	mov	r0, r3
 801c20c:	3710      	adds	r7, #16
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	08020008 	.word	0x08020008

0801c218 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c218:	b590      	push	{r4, r7, lr}
 801c21a:	b089      	sub	sp, #36	@ 0x24
 801c21c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c21e:	f3ef 8310 	mrs	r3, PRIMASK
 801c222:	60bb      	str	r3, [r7, #8]
  return(result);
 801c224:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c226:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c228:	b672      	cpsid	i
}
 801c22a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c22c:	4b38      	ldr	r3, [pc, #224]	@ (801c310 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c22e:	695b      	ldr	r3, [r3, #20]
 801c230:	4798      	blx	r3
 801c232:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c234:	4b36      	ldr	r3, [pc, #216]	@ (801c310 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c236:	691b      	ldr	r3, [r3, #16]
 801c238:	4798      	blx	r3
 801c23a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c23c:	693a      	ldr	r2, [r7, #16]
 801c23e:	697b      	ldr	r3, [r7, #20]
 801c240:	1ad3      	subs	r3, r2, r3
 801c242:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c244:	4b33      	ldr	r3, [pc, #204]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d037      	beq.n	801c2bc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c24c:	4b31      	ldr	r3, [pc, #196]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c252:	69fb      	ldr	r3, [r7, #28]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	68fa      	ldr	r2, [r7, #12]
 801c258:	429a      	cmp	r2, r3
 801c25a:	d206      	bcs.n	801c26a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c25c:	69fb      	ldr	r3, [r7, #28]
 801c25e:	681a      	ldr	r2, [r3, #0]
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	1ad2      	subs	r2, r2, r3
 801c264:	69fb      	ldr	r3, [r7, #28]
 801c266:	601a      	str	r2, [r3, #0]
 801c268:	e002      	b.n	801c270 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c26a:	69fb      	ldr	r3, [r7, #28]
 801c26c:	2200      	movs	r2, #0
 801c26e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c270:	69fb      	ldr	r3, [r7, #28]
 801c272:	695b      	ldr	r3, [r3, #20]
 801c274:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c276:	69fb      	ldr	r3, [r7, #28]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d1ea      	bne.n	801c252 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c27c:	e01e      	b.n	801c2bc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c27e:	4b25      	ldr	r3, [pc, #148]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c284:	4b23      	ldr	r3, [pc, #140]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	695b      	ldr	r3, [r3, #20]
 801c28a:	4a22      	ldr	r2, [pc, #136]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c28c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c28e:	69fb      	ldr	r3, [r7, #28]
 801c290:	2200      	movs	r2, #0
 801c292:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c294:	69fb      	ldr	r3, [r7, #28]
 801c296:	2200      	movs	r2, #0
 801c298:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c29a:	69fb      	ldr	r3, [r7, #28]
 801c29c:	68db      	ldr	r3, [r3, #12]
 801c29e:	69fa      	ldr	r2, [r7, #28]
 801c2a0:	6912      	ldr	r2, [r2, #16]
 801c2a2:	4610      	mov	r0, r2
 801c2a4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c2a6:	69fb      	ldr	r3, [r7, #28]
 801c2a8:	7adb      	ldrb	r3, [r3, #11]
 801c2aa:	2b01      	cmp	r3, #1
 801c2ac:	d106      	bne.n	801c2bc <UTIL_TIMER_IRQ_Handler+0xa4>
 801c2ae:	69fb      	ldr	r3, [r7, #28]
 801c2b0:	7a9b      	ldrb	r3, [r3, #10]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d102      	bne.n	801c2bc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c2b6:	69f8      	ldr	r0, [r7, #28]
 801c2b8:	f7ff fea6 	bl	801c008 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c2bc:	4b15      	ldr	r3, [pc, #84]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d00d      	beq.n	801c2e0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801c2c4:	4b13      	ldr	r3, [pc, #76]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d0d7      	beq.n	801c27e <UTIL_TIMER_IRQ_Handler+0x66>
 801c2ce:	4b11      	ldr	r3, [pc, #68]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	681c      	ldr	r4, [r3, #0]
 801c2d4:	4b0e      	ldr	r3, [pc, #56]	@ (801c310 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c2d6:	699b      	ldr	r3, [r3, #24]
 801c2d8:	4798      	blx	r3
 801c2da:	4603      	mov	r3, r0
 801c2dc:	429c      	cmp	r4, r3
 801c2de:	d3ce      	bcc.n	801c27e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c2e0:	4b0c      	ldr	r3, [pc, #48]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d009      	beq.n	801c2fc <UTIL_TIMER_IRQ_Handler+0xe4>
 801c2e8:	4b0a      	ldr	r3, [pc, #40]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	7a1b      	ldrb	r3, [r3, #8]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d104      	bne.n	801c2fc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c2f2:	4b08      	ldr	r3, [pc, #32]	@ (801c314 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f000 f858 	bl	801c3ac <TimerSetTimeout>
 801c2fc:	69bb      	ldr	r3, [r7, #24]
 801c2fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	f383 8810 	msr	PRIMASK, r3
}
 801c306:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c308:	bf00      	nop
 801c30a:	3724      	adds	r7, #36	@ 0x24
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd90      	pop	{r4, r7, pc}
 801c310:	08020008 	.word	0x08020008
 801c314:	20001db4 	.word	0x20001db4

0801c318 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c31e:	4b06      	ldr	r3, [pc, #24]	@ (801c338 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c320:	69db      	ldr	r3, [r3, #28]
 801c322:	4798      	blx	r3
 801c324:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c326:	4b04      	ldr	r3, [pc, #16]	@ (801c338 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c32a:	6878      	ldr	r0, [r7, #4]
 801c32c:	4798      	blx	r3
 801c32e:	4603      	mov	r3, r0
}
 801c330:	4618      	mov	r0, r3
 801c332:	3708      	adds	r7, #8
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}
 801c338:	08020008 	.word	0x08020008

0801c33c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b084      	sub	sp, #16
 801c340:	af00      	add	r7, sp, #0
 801c342:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c344:	4b0a      	ldr	r3, [pc, #40]	@ (801c370 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c346:	69db      	ldr	r3, [r3, #28]
 801c348:	4798      	blx	r3
 801c34a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c34c:	4b08      	ldr	r3, [pc, #32]	@ (801c370 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	4798      	blx	r3
 801c354:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c356:	4b06      	ldr	r3, [pc, #24]	@ (801c370 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c35a:	68f9      	ldr	r1, [r7, #12]
 801c35c:	68ba      	ldr	r2, [r7, #8]
 801c35e:	1a8a      	subs	r2, r1, r2
 801c360:	4610      	mov	r0, r2
 801c362:	4798      	blx	r3
 801c364:	4603      	mov	r3, r0
}
 801c366:	4618      	mov	r0, r3
 801c368:	3710      	adds	r7, #16
 801c36a:	46bd      	mov	sp, r7
 801c36c:	bd80      	pop	{r7, pc}
 801c36e:	bf00      	nop
 801c370:	08020008 	.word	0x08020008

0801c374 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c374:	b480      	push	{r7}
 801c376:	b085      	sub	sp, #20
 801c378:	af00      	add	r7, sp, #0
 801c37a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c37c:	4b0a      	ldr	r3, [pc, #40]	@ (801c3a8 <TimerExists+0x34>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c382:	e008      	b.n	801c396 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c384:	68fa      	ldr	r2, [r7, #12]
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	429a      	cmp	r2, r3
 801c38a:	d101      	bne.n	801c390 <TimerExists+0x1c>
    {
      return true;
 801c38c:	2301      	movs	r3, #1
 801c38e:	e006      	b.n	801c39e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	695b      	ldr	r3, [r3, #20]
 801c394:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d1f3      	bne.n	801c384 <TimerExists+0x10>
  }
  return false;
 801c39c:	2300      	movs	r3, #0
}
 801c39e:	4618      	mov	r0, r3
 801c3a0:	3714      	adds	r7, #20
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	bc80      	pop	{r7}
 801c3a6:	4770      	bx	lr
 801c3a8:	20001db4 	.word	0x20001db4

0801c3ac <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c3ac:	b590      	push	{r4, r7, lr}
 801c3ae:	b085      	sub	sp, #20
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c3b4:	4b11      	ldr	r3, [pc, #68]	@ (801c3fc <TimerSetTimeout+0x50>)
 801c3b6:	6a1b      	ldr	r3, [r3, #32]
 801c3b8:	4798      	blx	r3
 801c3ba:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2201      	movs	r2, #1
 801c3c0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	681c      	ldr	r4, [r3, #0]
 801c3c6:	4b0d      	ldr	r3, [pc, #52]	@ (801c3fc <TimerSetTimeout+0x50>)
 801c3c8:	699b      	ldr	r3, [r3, #24]
 801c3ca:	4798      	blx	r3
 801c3cc:	4602      	mov	r2, r0
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	4413      	add	r3, r2
 801c3d2:	429c      	cmp	r4, r3
 801c3d4:	d207      	bcs.n	801c3e6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c3d6:	4b09      	ldr	r3, [pc, #36]	@ (801c3fc <TimerSetTimeout+0x50>)
 801c3d8:	699b      	ldr	r3, [r3, #24]
 801c3da:	4798      	blx	r3
 801c3dc:	4602      	mov	r2, r0
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	441a      	add	r2, r3
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c3e6:	4b05      	ldr	r3, [pc, #20]	@ (801c3fc <TimerSetTimeout+0x50>)
 801c3e8:	689b      	ldr	r3, [r3, #8]
 801c3ea:	687a      	ldr	r2, [r7, #4]
 801c3ec:	6812      	ldr	r2, [r2, #0]
 801c3ee:	4610      	mov	r0, r2
 801c3f0:	4798      	blx	r3
}
 801c3f2:	bf00      	nop
 801c3f4:	3714      	adds	r7, #20
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd90      	pop	{r4, r7, pc}
 801c3fa:	bf00      	nop
 801c3fc:	08020008 	.word	0x08020008

0801c400 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c400:	b480      	push	{r7}
 801c402:	b085      	sub	sp, #20
 801c404:	af00      	add	r7, sp, #0
 801c406:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c408:	4b14      	ldr	r3, [pc, #80]	@ (801c45c <TimerInsertTimer+0x5c>)
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c40e:	4b13      	ldr	r3, [pc, #76]	@ (801c45c <TimerInsertTimer+0x5c>)
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	695b      	ldr	r3, [r3, #20]
 801c414:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c416:	e012      	b.n	801c43e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	68bb      	ldr	r3, [r7, #8]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	429a      	cmp	r2, r3
 801c422:	d905      	bls.n	801c430 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	695b      	ldr	r3, [r3, #20]
 801c42c:	60bb      	str	r3, [r7, #8]
 801c42e:	e006      	b.n	801c43e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	687a      	ldr	r2, [r7, #4]
 801c434:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	68ba      	ldr	r2, [r7, #8]
 801c43a:	615a      	str	r2, [r3, #20]
        return;
 801c43c:	e009      	b.n	801c452 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	695b      	ldr	r3, [r3, #20]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d1e8      	bne.n	801c418 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	687a      	ldr	r2, [r7, #4]
 801c44a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	2200      	movs	r2, #0
 801c450:	615a      	str	r2, [r3, #20]
}
 801c452:	3714      	adds	r7, #20
 801c454:	46bd      	mov	sp, r7
 801c456:	bc80      	pop	{r7}
 801c458:	4770      	bx	lr
 801c45a:	bf00      	nop
 801c45c:	20001db4 	.word	0x20001db4

0801c460 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c460:	b580      	push	{r7, lr}
 801c462:	b084      	sub	sp, #16
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c468:	4b0b      	ldr	r3, [pc, #44]	@ (801c498 <TimerInsertNewHeadTimer+0x38>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d002      	beq.n	801c47a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	2200      	movs	r2, #0
 801c478:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	68fa      	ldr	r2, [r7, #12]
 801c47e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c480:	4a05      	ldr	r2, [pc, #20]	@ (801c498 <TimerInsertNewHeadTimer+0x38>)
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c486:	4b04      	ldr	r3, [pc, #16]	@ (801c498 <TimerInsertNewHeadTimer+0x38>)
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	4618      	mov	r0, r3
 801c48c:	f7ff ff8e 	bl	801c3ac <TimerSetTimeout>
}
 801c490:	bf00      	nop
 801c492:	3710      	adds	r7, #16
 801c494:	46bd      	mov	sp, r7
 801c496:	bd80      	pop	{r7, pc}
 801c498:	20001db4 	.word	0x20001db4

0801c49c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c4a0:	2218      	movs	r2, #24
 801c4a2:	2100      	movs	r1, #0
 801c4a4:	4807      	ldr	r0, [pc, #28]	@ (801c4c4 <UTIL_ADV_TRACE_Init+0x28>)
 801c4a6:	f7fe fffc 	bl	801b4a2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c4aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c4ae:	2100      	movs	r1, #0
 801c4b0:	4805      	ldr	r0, [pc, #20]	@ (801c4c8 <UTIL_ADV_TRACE_Init+0x2c>)
 801c4b2:	f7fe fff6 	bl	801b4a2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c4b6:	4b05      	ldr	r3, [pc, #20]	@ (801c4cc <UTIL_ADV_TRACE_Init+0x30>)
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	4805      	ldr	r0, [pc, #20]	@ (801c4d0 <UTIL_ADV_TRACE_Init+0x34>)
 801c4bc:	4798      	blx	r3
 801c4be:	4603      	mov	r3, r0
}
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	bd80      	pop	{r7, pc}
 801c4c4:	20001db8 	.word	0x20001db8
 801c4c8:	20001dd0 	.word	0x20001dd0
 801c4cc:	08020048 	.word	0x08020048
 801c4d0:	0801c73d 	.word	0x0801c73d

0801c4d4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c4d4:	b480      	push	{r7}
 801c4d6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c4d8:	4b06      	ldr	r3, [pc, #24]	@ (801c4f4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c4da:	8a5a      	ldrh	r2, [r3, #18]
 801c4dc:	4b05      	ldr	r3, [pc, #20]	@ (801c4f4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c4de:	8a1b      	ldrh	r3, [r3, #16]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d101      	bne.n	801c4e8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c4e4:	2301      	movs	r3, #1
 801c4e6:	e000      	b.n	801c4ea <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c4e8:	2300      	movs	r3, #0
}
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	46bd      	mov	sp, r7
 801c4ee:	bc80      	pop	{r7}
 801c4f0:	4770      	bx	lr
 801c4f2:	bf00      	nop
 801c4f4:	20001db8 	.word	0x20001db8

0801c4f8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c4f8:	b408      	push	{r3}
 801c4fa:	b580      	push	{r7, lr}
 801c4fc:	b08d      	sub	sp, #52	@ 0x34
 801c4fe:	af00      	add	r7, sp, #0
 801c500:	60f8      	str	r0, [r7, #12]
 801c502:	60b9      	str	r1, [r7, #8]
 801c504:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c506:	2300      	movs	r3, #0
 801c508:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c50a:	2300      	movs	r3, #0
 801c50c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c50e:	4b37      	ldr	r3, [pc, #220]	@ (801c5ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c510:	7a1b      	ldrb	r3, [r3, #8]
 801c512:	461a      	mov	r2, r3
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	4293      	cmp	r3, r2
 801c518:	d902      	bls.n	801c520 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c51a:	f06f 0304 	mvn.w	r3, #4
 801c51e:	e05e      	b.n	801c5de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c520:	4b32      	ldr	r3, [pc, #200]	@ (801c5ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c522:	68da      	ldr	r2, [r3, #12]
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	4013      	ands	r3, r2
 801c528:	68ba      	ldr	r2, [r7, #8]
 801c52a:	429a      	cmp	r2, r3
 801c52c:	d002      	beq.n	801c534 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c52e:	f06f 0305 	mvn.w	r3, #5
 801c532:	e054      	b.n	801c5de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c534:	4b2d      	ldr	r3, [pc, #180]	@ (801c5ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c536:	685b      	ldr	r3, [r3, #4]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d00a      	beq.n	801c552 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d007      	beq.n	801c552 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c542:	4b2a      	ldr	r3, [pc, #168]	@ (801c5ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c544:	685b      	ldr	r3, [r3, #4]
 801c546:	f107 0116 	add.w	r1, r7, #22
 801c54a:	f107 0218 	add.w	r2, r7, #24
 801c54e:	4610      	mov	r0, r2
 801c550:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c552:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c556:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c55a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c55c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c560:	4823      	ldr	r0, [pc, #140]	@ (801c5f0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c562:	f7ff fa2b 	bl	801b9bc <tiny_vsnprintf_like>
 801c566:	4603      	mov	r3, r0
 801c568:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801c56a:	f000 f9f1 	bl	801c950 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c56e:	8afa      	ldrh	r2, [r7, #22]
 801c570:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c572:	4413      	add	r3, r2
 801c574:	b29b      	uxth	r3, r3
 801c576:	f107 0214 	add.w	r2, r7, #20
 801c57a:	4611      	mov	r1, r2
 801c57c:	4618      	mov	r0, r3
 801c57e:	f000 f969 	bl	801c854 <TRACE_AllocateBufer>
 801c582:	4603      	mov	r3, r0
 801c584:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c588:	d025      	beq.n	801c5d6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c58a:	2300      	movs	r3, #0
 801c58c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c58e:	e00e      	b.n	801c5ae <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c590:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c592:	8aba      	ldrh	r2, [r7, #20]
 801c594:	3330      	adds	r3, #48	@ 0x30
 801c596:	443b      	add	r3, r7
 801c598:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c59c:	4b15      	ldr	r3, [pc, #84]	@ (801c5f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c59e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c5a0:	8abb      	ldrh	r3, [r7, #20]
 801c5a2:	3301      	adds	r3, #1
 801c5a4:	b29b      	uxth	r3, r3
 801c5a6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c5a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c5aa:	3301      	adds	r3, #1
 801c5ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c5ae:	8afb      	ldrh	r3, [r7, #22]
 801c5b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d3ec      	bcc.n	801c590 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c5b6:	8abb      	ldrh	r3, [r7, #20]
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	4b0e      	ldr	r3, [pc, #56]	@ (801c5f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c5bc:	18d0      	adds	r0, r2, r3
 801c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c5c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c5c6:	f7ff f9f9 	bl	801b9bc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c5ca:	f000 f9df 	bl	801c98c <TRACE_UnLock>

    return TRACE_Send();
 801c5ce:	f000 f831 	bl	801c634 <TRACE_Send>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	e003      	b.n	801c5de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c5d6:	f000 f9d9 	bl	801c98c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c5da:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c5de:	4618      	mov	r0, r3
 801c5e0:	3734      	adds	r7, #52	@ 0x34
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c5e8:	b001      	add	sp, #4
 801c5ea:	4770      	bx	lr
 801c5ec:	20001db8 	.word	0x20001db8
 801c5f0:	200021d0 	.word	0x200021d0
 801c5f4:	20001dd0 	.word	0x20001dd0

0801c5f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c5f8:	b480      	push	{r7}
 801c5fa:	b083      	sub	sp, #12
 801c5fc:	af00      	add	r7, sp, #0
 801c5fe:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c600:	4a03      	ldr	r2, [pc, #12]	@ (801c610 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	6053      	str	r3, [r2, #4]
}
 801c606:	bf00      	nop
 801c608:	370c      	adds	r7, #12
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bc80      	pop	{r7}
 801c60e:	4770      	bx	lr
 801c610:	20001db8 	.word	0x20001db8

0801c614 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c614:	b480      	push	{r7}
 801c616:	b083      	sub	sp, #12
 801c618:	af00      	add	r7, sp, #0
 801c61a:	4603      	mov	r3, r0
 801c61c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c61e:	4a04      	ldr	r2, [pc, #16]	@ (801c630 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c620:	79fb      	ldrb	r3, [r7, #7]
 801c622:	7213      	strb	r3, [r2, #8]
}
 801c624:	bf00      	nop
 801c626:	370c      	adds	r7, #12
 801c628:	46bd      	mov	sp, r7
 801c62a:	bc80      	pop	{r7}
 801c62c:	4770      	bx	lr
 801c62e:	bf00      	nop
 801c630:	20001db8 	.word	0x20001db8

0801c634 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b088      	sub	sp, #32
 801c638:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c63a:	2300      	movs	r3, #0
 801c63c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c63e:	2300      	movs	r3, #0
 801c640:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c642:	f3ef 8310 	mrs	r3, PRIMASK
 801c646:	613b      	str	r3, [r7, #16]
  return(result);
 801c648:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c64a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c64c:	b672      	cpsid	i
}
 801c64e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c650:	f000 f9ba 	bl	801c9c8 <TRACE_IsLocked>
 801c654:	4603      	mov	r3, r0
 801c656:	2b00      	cmp	r3, #0
 801c658:	d15d      	bne.n	801c716 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c65a:	f000 f979 	bl	801c950 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c65e:	4b34      	ldr	r3, [pc, #208]	@ (801c730 <TRACE_Send+0xfc>)
 801c660:	8a1a      	ldrh	r2, [r3, #16]
 801c662:	4b33      	ldr	r3, [pc, #204]	@ (801c730 <TRACE_Send+0xfc>)
 801c664:	8a5b      	ldrh	r3, [r3, #18]
 801c666:	429a      	cmp	r2, r3
 801c668:	d04d      	beq.n	801c706 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c66a:	4b31      	ldr	r3, [pc, #196]	@ (801c730 <TRACE_Send+0xfc>)
 801c66c:	789b      	ldrb	r3, [r3, #2]
 801c66e:	2b01      	cmp	r3, #1
 801c670:	d117      	bne.n	801c6a2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c672:	4b2f      	ldr	r3, [pc, #188]	@ (801c730 <TRACE_Send+0xfc>)
 801c674:	881a      	ldrh	r2, [r3, #0]
 801c676:	4b2e      	ldr	r3, [pc, #184]	@ (801c730 <TRACE_Send+0xfc>)
 801c678:	8a1b      	ldrh	r3, [r3, #16]
 801c67a:	1ad3      	subs	r3, r2, r3
 801c67c:	b29a      	uxth	r2, r3
 801c67e:	4b2c      	ldr	r3, [pc, #176]	@ (801c730 <TRACE_Send+0xfc>)
 801c680:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c682:	4b2b      	ldr	r3, [pc, #172]	@ (801c730 <TRACE_Send+0xfc>)
 801c684:	2202      	movs	r2, #2
 801c686:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c688:	4b29      	ldr	r3, [pc, #164]	@ (801c730 <TRACE_Send+0xfc>)
 801c68a:	2200      	movs	r2, #0
 801c68c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c68e:	4b28      	ldr	r3, [pc, #160]	@ (801c730 <TRACE_Send+0xfc>)
 801c690:	8a9b      	ldrh	r3, [r3, #20]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d105      	bne.n	801c6a2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c696:	4b26      	ldr	r3, [pc, #152]	@ (801c730 <TRACE_Send+0xfc>)
 801c698:	2200      	movs	r2, #0
 801c69a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c69c:	4b24      	ldr	r3, [pc, #144]	@ (801c730 <TRACE_Send+0xfc>)
 801c69e:	2200      	movs	r2, #0
 801c6a0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c6a2:	4b23      	ldr	r3, [pc, #140]	@ (801c730 <TRACE_Send+0xfc>)
 801c6a4:	789b      	ldrb	r3, [r3, #2]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d115      	bne.n	801c6d6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c6aa:	4b21      	ldr	r3, [pc, #132]	@ (801c730 <TRACE_Send+0xfc>)
 801c6ac:	8a5a      	ldrh	r2, [r3, #18]
 801c6ae:	4b20      	ldr	r3, [pc, #128]	@ (801c730 <TRACE_Send+0xfc>)
 801c6b0:	8a1b      	ldrh	r3, [r3, #16]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d908      	bls.n	801c6c8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c6b6:	4b1e      	ldr	r3, [pc, #120]	@ (801c730 <TRACE_Send+0xfc>)
 801c6b8:	8a5a      	ldrh	r2, [r3, #18]
 801c6ba:	4b1d      	ldr	r3, [pc, #116]	@ (801c730 <TRACE_Send+0xfc>)
 801c6bc:	8a1b      	ldrh	r3, [r3, #16]
 801c6be:	1ad3      	subs	r3, r2, r3
 801c6c0:	b29a      	uxth	r2, r3
 801c6c2:	4b1b      	ldr	r3, [pc, #108]	@ (801c730 <TRACE_Send+0xfc>)
 801c6c4:	829a      	strh	r2, [r3, #20]
 801c6c6:	e006      	b.n	801c6d6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c6c8:	4b19      	ldr	r3, [pc, #100]	@ (801c730 <TRACE_Send+0xfc>)
 801c6ca:	8a1b      	ldrh	r3, [r3, #16]
 801c6cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c6d0:	b29a      	uxth	r2, r3
 801c6d2:	4b17      	ldr	r3, [pc, #92]	@ (801c730 <TRACE_Send+0xfc>)
 801c6d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c6d6:	4b16      	ldr	r3, [pc, #88]	@ (801c730 <TRACE_Send+0xfc>)
 801c6d8:	8a1b      	ldrh	r3, [r3, #16]
 801c6da:	461a      	mov	r2, r3
 801c6dc:	4b15      	ldr	r3, [pc, #84]	@ (801c734 <TRACE_Send+0x100>)
 801c6de:	4413      	add	r3, r2
 801c6e0:	61bb      	str	r3, [r7, #24]
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	f383 8810 	msr	PRIMASK, r3
}
 801c6ec:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c6ee:	f7e5 ffef 	bl	80026d0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c6f2:	4b11      	ldr	r3, [pc, #68]	@ (801c738 <TRACE_Send+0x104>)
 801c6f4:	68db      	ldr	r3, [r3, #12]
 801c6f6:	4a0e      	ldr	r2, [pc, #56]	@ (801c730 <TRACE_Send+0xfc>)
 801c6f8:	8a92      	ldrh	r2, [r2, #20]
 801c6fa:	4611      	mov	r1, r2
 801c6fc:	69b8      	ldr	r0, [r7, #24]
 801c6fe:	4798      	blx	r3
 801c700:	4603      	mov	r3, r0
 801c702:	77fb      	strb	r3, [r7, #31]
 801c704:	e00d      	b.n	801c722 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c706:	f000 f941 	bl	801c98c <TRACE_UnLock>
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	f383 8810 	msr	PRIMASK, r3
}
 801c714:	e005      	b.n	801c722 <TRACE_Send+0xee>
 801c716:	697b      	ldr	r3, [r7, #20]
 801c718:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	f383 8810 	msr	PRIMASK, r3
}
 801c720:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c722:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c726:	4618      	mov	r0, r3
 801c728:	3720      	adds	r7, #32
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bd80      	pop	{r7, pc}
 801c72e:	bf00      	nop
 801c730:	20001db8 	.word	0x20001db8
 801c734:	20001dd0 	.word	0x20001dd0
 801c738:	08020048 	.word	0x08020048

0801c73c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b088      	sub	sp, #32
 801c740:	af00      	add	r7, sp, #0
 801c742:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c744:	2300      	movs	r3, #0
 801c746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c748:	f3ef 8310 	mrs	r3, PRIMASK
 801c74c:	617b      	str	r3, [r7, #20]
  return(result);
 801c74e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c750:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c752:	b672      	cpsid	i
}
 801c754:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c756:	4b3c      	ldr	r3, [pc, #240]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c758:	789b      	ldrb	r3, [r3, #2]
 801c75a:	2b02      	cmp	r3, #2
 801c75c:	d106      	bne.n	801c76c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c75e:	4b3a      	ldr	r3, [pc, #232]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c760:	2200      	movs	r2, #0
 801c762:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c764:	4b38      	ldr	r3, [pc, #224]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c766:	2200      	movs	r2, #0
 801c768:	821a      	strh	r2, [r3, #16]
 801c76a:	e00a      	b.n	801c782 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c76c:	4b36      	ldr	r3, [pc, #216]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c76e:	8a1a      	ldrh	r2, [r3, #16]
 801c770:	4b35      	ldr	r3, [pc, #212]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c772:	8a9b      	ldrh	r3, [r3, #20]
 801c774:	4413      	add	r3, r2
 801c776:	b29b      	uxth	r3, r3
 801c778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c77c:	b29a      	uxth	r2, r3
 801c77e:	4b32      	ldr	r3, [pc, #200]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c780:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c782:	4b31      	ldr	r3, [pc, #196]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c784:	8a1a      	ldrh	r2, [r3, #16]
 801c786:	4b30      	ldr	r3, [pc, #192]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c788:	8a5b      	ldrh	r3, [r3, #18]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d04d      	beq.n	801c82a <TRACE_TxCpltCallback+0xee>
 801c78e:	4b2e      	ldr	r3, [pc, #184]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c790:	8adb      	ldrh	r3, [r3, #22]
 801c792:	2b01      	cmp	r3, #1
 801c794:	d149      	bne.n	801c82a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c796:	4b2c      	ldr	r3, [pc, #176]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c798:	789b      	ldrb	r3, [r3, #2]
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d117      	bne.n	801c7ce <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c79e:	4b2a      	ldr	r3, [pc, #168]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7a0:	881a      	ldrh	r2, [r3, #0]
 801c7a2:	4b29      	ldr	r3, [pc, #164]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7a4:	8a1b      	ldrh	r3, [r3, #16]
 801c7a6:	1ad3      	subs	r3, r2, r3
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	4b27      	ldr	r3, [pc, #156]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7ac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c7ae:	4b26      	ldr	r3, [pc, #152]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7b0:	2202      	movs	r2, #2
 801c7b2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c7b4:	4b24      	ldr	r3, [pc, #144]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c7ba:	4b23      	ldr	r3, [pc, #140]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7bc:	8a9b      	ldrh	r3, [r3, #20]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d105      	bne.n	801c7ce <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c7c2:	4b21      	ldr	r3, [pc, #132]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c7c8:	4b1f      	ldr	r3, [pc, #124]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c7ce:	4b1e      	ldr	r3, [pc, #120]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7d0:	789b      	ldrb	r3, [r3, #2]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d115      	bne.n	801c802 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c7d6:	4b1c      	ldr	r3, [pc, #112]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7d8:	8a5a      	ldrh	r2, [r3, #18]
 801c7da:	4b1b      	ldr	r3, [pc, #108]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7dc:	8a1b      	ldrh	r3, [r3, #16]
 801c7de:	429a      	cmp	r2, r3
 801c7e0:	d908      	bls.n	801c7f4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c7e2:	4b19      	ldr	r3, [pc, #100]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7e4:	8a5a      	ldrh	r2, [r3, #18]
 801c7e6:	4b18      	ldr	r3, [pc, #96]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7e8:	8a1b      	ldrh	r3, [r3, #16]
 801c7ea:	1ad3      	subs	r3, r2, r3
 801c7ec:	b29a      	uxth	r2, r3
 801c7ee:	4b16      	ldr	r3, [pc, #88]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7f0:	829a      	strh	r2, [r3, #20]
 801c7f2:	e006      	b.n	801c802 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c7f4:	4b14      	ldr	r3, [pc, #80]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c7f6:	8a1b      	ldrh	r3, [r3, #16]
 801c7f8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c7fc:	b29a      	uxth	r2, r3
 801c7fe:	4b12      	ldr	r3, [pc, #72]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c800:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c802:	4b11      	ldr	r3, [pc, #68]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c804:	8a1b      	ldrh	r3, [r3, #16]
 801c806:	461a      	mov	r2, r3
 801c808:	4b10      	ldr	r3, [pc, #64]	@ (801c84c <TRACE_TxCpltCallback+0x110>)
 801c80a:	4413      	add	r3, r2
 801c80c:	61fb      	str	r3, [r7, #28]
 801c80e:	69bb      	ldr	r3, [r7, #24]
 801c810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c812:	693b      	ldr	r3, [r7, #16]
 801c814:	f383 8810 	msr	PRIMASK, r3
}
 801c818:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c81a:	4b0d      	ldr	r3, [pc, #52]	@ (801c850 <TRACE_TxCpltCallback+0x114>)
 801c81c:	68db      	ldr	r3, [r3, #12]
 801c81e:	4a0a      	ldr	r2, [pc, #40]	@ (801c848 <TRACE_TxCpltCallback+0x10c>)
 801c820:	8a92      	ldrh	r2, [r2, #20]
 801c822:	4611      	mov	r1, r2
 801c824:	69f8      	ldr	r0, [r7, #28]
 801c826:	4798      	blx	r3
 801c828:	e00a      	b.n	801c840 <TRACE_TxCpltCallback+0x104>
 801c82a:	69bb      	ldr	r3, [r7, #24]
 801c82c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	f383 8810 	msr	PRIMASK, r3
}
 801c834:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c836:	f7e5 ff53 	bl	80026e0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c83a:	f000 f8a7 	bl	801c98c <TRACE_UnLock>
  }
}
 801c83e:	bf00      	nop
 801c840:	bf00      	nop
 801c842:	3720      	adds	r7, #32
 801c844:	46bd      	mov	sp, r7
 801c846:	bd80      	pop	{r7, pc}
 801c848:	20001db8 	.word	0x20001db8
 801c84c:	20001dd0 	.word	0x20001dd0
 801c850:	08020048 	.word	0x08020048

0801c854 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c854:	b480      	push	{r7}
 801c856:	b087      	sub	sp, #28
 801c858:	af00      	add	r7, sp, #0
 801c85a:	4603      	mov	r3, r0
 801c85c:	6039      	str	r1, [r7, #0]
 801c85e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c864:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c866:	f3ef 8310 	mrs	r3, PRIMASK
 801c86a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c86c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c86e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c870:	b672      	cpsid	i
}
 801c872:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c874:	4b35      	ldr	r3, [pc, #212]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c876:	8a5a      	ldrh	r2, [r3, #18]
 801c878:	4b34      	ldr	r3, [pc, #208]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c87a:	8a1b      	ldrh	r3, [r3, #16]
 801c87c:	429a      	cmp	r2, r3
 801c87e:	d11b      	bne.n	801c8b8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c880:	4b32      	ldr	r3, [pc, #200]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c882:	8a5b      	ldrh	r3, [r3, #18]
 801c884:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c888:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c88a:	88fa      	ldrh	r2, [r7, #6]
 801c88c:	8afb      	ldrh	r3, [r7, #22]
 801c88e:	429a      	cmp	r2, r3
 801c890:	d33a      	bcc.n	801c908 <TRACE_AllocateBufer+0xb4>
 801c892:	4b2e      	ldr	r3, [pc, #184]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c894:	8a1b      	ldrh	r3, [r3, #16]
 801c896:	88fa      	ldrh	r2, [r7, #6]
 801c898:	429a      	cmp	r2, r3
 801c89a:	d235      	bcs.n	801c908 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c89c:	4b2b      	ldr	r3, [pc, #172]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c89e:	2201      	movs	r2, #1
 801c8a0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c8a2:	4b2a      	ldr	r3, [pc, #168]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8a4:	8a5a      	ldrh	r2, [r3, #18]
 801c8a6:	4b29      	ldr	r3, [pc, #164]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8a8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c8aa:	4b28      	ldr	r3, [pc, #160]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8ac:	8a1b      	ldrh	r3, [r3, #16]
 801c8ae:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c8b0:	4b26      	ldr	r3, [pc, #152]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	825a      	strh	r2, [r3, #18]
 801c8b6:	e027      	b.n	801c908 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c8b8:	4b24      	ldr	r3, [pc, #144]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8ba:	8a5a      	ldrh	r2, [r3, #18]
 801c8bc:	4b23      	ldr	r3, [pc, #140]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8be:	8a1b      	ldrh	r3, [r3, #16]
 801c8c0:	429a      	cmp	r2, r3
 801c8c2:	d91b      	bls.n	801c8fc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c8c4:	4b21      	ldr	r3, [pc, #132]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8c6:	8a5b      	ldrh	r3, [r3, #18]
 801c8c8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c8cc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c8ce:	88fa      	ldrh	r2, [r7, #6]
 801c8d0:	8afb      	ldrh	r3, [r7, #22]
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d318      	bcc.n	801c908 <TRACE_AllocateBufer+0xb4>
 801c8d6:	4b1d      	ldr	r3, [pc, #116]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8d8:	8a1b      	ldrh	r3, [r3, #16]
 801c8da:	88fa      	ldrh	r2, [r7, #6]
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	d213      	bcs.n	801c908 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c8e0:	4b1a      	ldr	r3, [pc, #104]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8e2:	2201      	movs	r2, #1
 801c8e4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c8e6:	4b19      	ldr	r3, [pc, #100]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8e8:	8a5a      	ldrh	r2, [r3, #18]
 801c8ea:	4b18      	ldr	r3, [pc, #96]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8ec:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c8ee:	4b17      	ldr	r3, [pc, #92]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8f0:	8a1b      	ldrh	r3, [r3, #16]
 801c8f2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c8f4:	4b15      	ldr	r3, [pc, #84]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	825a      	strh	r2, [r3, #18]
 801c8fa:	e005      	b.n	801c908 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c8fc:	4b13      	ldr	r3, [pc, #76]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c8fe:	8a1a      	ldrh	r2, [r3, #16]
 801c900:	4b12      	ldr	r3, [pc, #72]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c902:	8a5b      	ldrh	r3, [r3, #18]
 801c904:	1ad3      	subs	r3, r2, r3
 801c906:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c908:	8afa      	ldrh	r2, [r7, #22]
 801c90a:	88fb      	ldrh	r3, [r7, #6]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d90f      	bls.n	801c930 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c910:	4b0e      	ldr	r3, [pc, #56]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c912:	8a5a      	ldrh	r2, [r3, #18]
 801c914:	683b      	ldr	r3, [r7, #0]
 801c916:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c918:	4b0c      	ldr	r3, [pc, #48]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c91a:	8a5a      	ldrh	r2, [r3, #18]
 801c91c:	88fb      	ldrh	r3, [r7, #6]
 801c91e:	4413      	add	r3, r2
 801c920:	b29b      	uxth	r3, r3
 801c922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c926:	b29a      	uxth	r2, r3
 801c928:	4b08      	ldr	r3, [pc, #32]	@ (801c94c <TRACE_AllocateBufer+0xf8>)
 801c92a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c92c:	2300      	movs	r3, #0
 801c92e:	82bb      	strh	r3, [r7, #20]
 801c930:	693b      	ldr	r3, [r7, #16]
 801c932:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c934:	68bb      	ldr	r3, [r7, #8]
 801c936:	f383 8810 	msr	PRIMASK, r3
}
 801c93a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c93c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c940:	4618      	mov	r0, r3
 801c942:	371c      	adds	r7, #28
 801c944:	46bd      	mov	sp, r7
 801c946:	bc80      	pop	{r7}
 801c948:	4770      	bx	lr
 801c94a:	bf00      	nop
 801c94c:	20001db8 	.word	0x20001db8

0801c950 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c950:	b480      	push	{r7}
 801c952:	b085      	sub	sp, #20
 801c954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c956:	f3ef 8310 	mrs	r3, PRIMASK
 801c95a:	607b      	str	r3, [r7, #4]
  return(result);
 801c95c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c95e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c960:	b672      	cpsid	i
}
 801c962:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c964:	4b08      	ldr	r3, [pc, #32]	@ (801c988 <TRACE_Lock+0x38>)
 801c966:	8adb      	ldrh	r3, [r3, #22]
 801c968:	3301      	adds	r3, #1
 801c96a:	b29a      	uxth	r2, r3
 801c96c:	4b06      	ldr	r3, [pc, #24]	@ (801c988 <TRACE_Lock+0x38>)
 801c96e:	82da      	strh	r2, [r3, #22]
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c974:	68bb      	ldr	r3, [r7, #8]
 801c976:	f383 8810 	msr	PRIMASK, r3
}
 801c97a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c97c:	bf00      	nop
 801c97e:	3714      	adds	r7, #20
 801c980:	46bd      	mov	sp, r7
 801c982:	bc80      	pop	{r7}
 801c984:	4770      	bx	lr
 801c986:	bf00      	nop
 801c988:	20001db8 	.word	0x20001db8

0801c98c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c98c:	b480      	push	{r7}
 801c98e:	b085      	sub	sp, #20
 801c990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c992:	f3ef 8310 	mrs	r3, PRIMASK
 801c996:	607b      	str	r3, [r7, #4]
  return(result);
 801c998:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c99a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c99c:	b672      	cpsid	i
}
 801c99e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c9a0:	4b08      	ldr	r3, [pc, #32]	@ (801c9c4 <TRACE_UnLock+0x38>)
 801c9a2:	8adb      	ldrh	r3, [r3, #22]
 801c9a4:	3b01      	subs	r3, #1
 801c9a6:	b29a      	uxth	r2, r3
 801c9a8:	4b06      	ldr	r3, [pc, #24]	@ (801c9c4 <TRACE_UnLock+0x38>)
 801c9aa:	82da      	strh	r2, [r3, #22]
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	f383 8810 	msr	PRIMASK, r3
}
 801c9b6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c9b8:	bf00      	nop
 801c9ba:	3714      	adds	r7, #20
 801c9bc:	46bd      	mov	sp, r7
 801c9be:	bc80      	pop	{r7}
 801c9c0:	4770      	bx	lr
 801c9c2:	bf00      	nop
 801c9c4:	20001db8 	.word	0x20001db8

0801c9c8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c9c8:	b480      	push	{r7}
 801c9ca:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c9cc:	4b05      	ldr	r3, [pc, #20]	@ (801c9e4 <TRACE_IsLocked+0x1c>)
 801c9ce:	8adb      	ldrh	r3, [r3, #22]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	bf14      	ite	ne
 801c9d4:	2301      	movne	r3, #1
 801c9d6:	2300      	moveq	r3, #0
 801c9d8:	b2db      	uxtb	r3, r3
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bc80      	pop	{r7}
 801c9e0:	4770      	bx	lr
 801c9e2:	bf00      	nop
 801c9e4:	20001db8 	.word	0x20001db8

0801c9e8 <__cvt>:
 801c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9ec:	b088      	sub	sp, #32
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	461d      	mov	r5, r3
 801c9f2:	4614      	mov	r4, r2
 801c9f4:	bfbc      	itt	lt
 801c9f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801c9fa:	4614      	movlt	r4, r2
 801c9fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c9fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ca00:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801ca04:	bfb6      	itet	lt
 801ca06:	461d      	movlt	r5, r3
 801ca08:	2300      	movge	r3, #0
 801ca0a:	232d      	movlt	r3, #45	@ 0x2d
 801ca0c:	7013      	strb	r3, [r2, #0]
 801ca0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ca10:	f023 0820 	bic.w	r8, r3, #32
 801ca14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ca18:	d005      	beq.n	801ca26 <__cvt+0x3e>
 801ca1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801ca1e:	d100      	bne.n	801ca22 <__cvt+0x3a>
 801ca20:	3601      	adds	r6, #1
 801ca22:	2302      	movs	r3, #2
 801ca24:	e000      	b.n	801ca28 <__cvt+0x40>
 801ca26:	2303      	movs	r3, #3
 801ca28:	aa07      	add	r2, sp, #28
 801ca2a:	9204      	str	r2, [sp, #16]
 801ca2c:	aa06      	add	r2, sp, #24
 801ca2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 801ca32:	e9cd 3600 	strd	r3, r6, [sp]
 801ca36:	4622      	mov	r2, r4
 801ca38:	462b      	mov	r3, r5
 801ca3a:	f000 ff41 	bl	801d8c0 <_dtoa_r>
 801ca3e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801ca42:	4607      	mov	r7, r0
 801ca44:	d119      	bne.n	801ca7a <__cvt+0x92>
 801ca46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ca48:	07db      	lsls	r3, r3, #31
 801ca4a:	d50e      	bpl.n	801ca6a <__cvt+0x82>
 801ca4c:	eb00 0906 	add.w	r9, r0, r6
 801ca50:	2200      	movs	r2, #0
 801ca52:	2300      	movs	r3, #0
 801ca54:	4620      	mov	r0, r4
 801ca56:	4629      	mov	r1, r5
 801ca58:	f7e4 f80e 	bl	8000a78 <__aeabi_dcmpeq>
 801ca5c:	b108      	cbz	r0, 801ca62 <__cvt+0x7a>
 801ca5e:	f8cd 901c 	str.w	r9, [sp, #28]
 801ca62:	2230      	movs	r2, #48	@ 0x30
 801ca64:	9b07      	ldr	r3, [sp, #28]
 801ca66:	454b      	cmp	r3, r9
 801ca68:	d31e      	bcc.n	801caa8 <__cvt+0xc0>
 801ca6a:	9b07      	ldr	r3, [sp, #28]
 801ca6c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ca6e:	1bdb      	subs	r3, r3, r7
 801ca70:	4638      	mov	r0, r7
 801ca72:	6013      	str	r3, [r2, #0]
 801ca74:	b008      	add	sp, #32
 801ca76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ca7e:	eb00 0906 	add.w	r9, r0, r6
 801ca82:	d1e5      	bne.n	801ca50 <__cvt+0x68>
 801ca84:	7803      	ldrb	r3, [r0, #0]
 801ca86:	2b30      	cmp	r3, #48	@ 0x30
 801ca88:	d10a      	bne.n	801caa0 <__cvt+0xb8>
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	4620      	mov	r0, r4
 801ca90:	4629      	mov	r1, r5
 801ca92:	f7e3 fff1 	bl	8000a78 <__aeabi_dcmpeq>
 801ca96:	b918      	cbnz	r0, 801caa0 <__cvt+0xb8>
 801ca98:	f1c6 0601 	rsb	r6, r6, #1
 801ca9c:	f8ca 6000 	str.w	r6, [sl]
 801caa0:	f8da 3000 	ldr.w	r3, [sl]
 801caa4:	4499      	add	r9, r3
 801caa6:	e7d3      	b.n	801ca50 <__cvt+0x68>
 801caa8:	1c59      	adds	r1, r3, #1
 801caaa:	9107      	str	r1, [sp, #28]
 801caac:	701a      	strb	r2, [r3, #0]
 801caae:	e7d9      	b.n	801ca64 <__cvt+0x7c>

0801cab0 <__exponent>:
 801cab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cab2:	2900      	cmp	r1, #0
 801cab4:	bfba      	itte	lt
 801cab6:	4249      	neglt	r1, r1
 801cab8:	232d      	movlt	r3, #45	@ 0x2d
 801caba:	232b      	movge	r3, #43	@ 0x2b
 801cabc:	2909      	cmp	r1, #9
 801cabe:	7002      	strb	r2, [r0, #0]
 801cac0:	7043      	strb	r3, [r0, #1]
 801cac2:	dd29      	ble.n	801cb18 <__exponent+0x68>
 801cac4:	f10d 0307 	add.w	r3, sp, #7
 801cac8:	461d      	mov	r5, r3
 801caca:	270a      	movs	r7, #10
 801cacc:	461a      	mov	r2, r3
 801cace:	fbb1 f6f7 	udiv	r6, r1, r7
 801cad2:	fb07 1416 	mls	r4, r7, r6, r1
 801cad6:	3430      	adds	r4, #48	@ 0x30
 801cad8:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cadc:	460c      	mov	r4, r1
 801cade:	2c63      	cmp	r4, #99	@ 0x63
 801cae0:	f103 33ff 	add.w	r3, r3, #4294967295
 801cae4:	4631      	mov	r1, r6
 801cae6:	dcf1      	bgt.n	801cacc <__exponent+0x1c>
 801cae8:	3130      	adds	r1, #48	@ 0x30
 801caea:	1e94      	subs	r4, r2, #2
 801caec:	f803 1c01 	strb.w	r1, [r3, #-1]
 801caf0:	1c41      	adds	r1, r0, #1
 801caf2:	4623      	mov	r3, r4
 801caf4:	42ab      	cmp	r3, r5
 801caf6:	d30a      	bcc.n	801cb0e <__exponent+0x5e>
 801caf8:	f10d 0309 	add.w	r3, sp, #9
 801cafc:	1a9b      	subs	r3, r3, r2
 801cafe:	42ac      	cmp	r4, r5
 801cb00:	bf88      	it	hi
 801cb02:	2300      	movhi	r3, #0
 801cb04:	3302      	adds	r3, #2
 801cb06:	4403      	add	r3, r0
 801cb08:	1a18      	subs	r0, r3, r0
 801cb0a:	b003      	add	sp, #12
 801cb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cb12:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cb16:	e7ed      	b.n	801caf4 <__exponent+0x44>
 801cb18:	2330      	movs	r3, #48	@ 0x30
 801cb1a:	3130      	adds	r1, #48	@ 0x30
 801cb1c:	7083      	strb	r3, [r0, #2]
 801cb1e:	70c1      	strb	r1, [r0, #3]
 801cb20:	1d03      	adds	r3, r0, #4
 801cb22:	e7f1      	b.n	801cb08 <__exponent+0x58>

0801cb24 <_printf_float>:
 801cb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb28:	b091      	sub	sp, #68	@ 0x44
 801cb2a:	460c      	mov	r4, r1
 801cb2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801cb30:	4616      	mov	r6, r2
 801cb32:	461f      	mov	r7, r3
 801cb34:	4605      	mov	r5, r0
 801cb36:	f000 fdc1 	bl	801d6bc <_localeconv_r>
 801cb3a:	6803      	ldr	r3, [r0, #0]
 801cb3c:	9308      	str	r3, [sp, #32]
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f7e3 fb6e 	bl	8000220 <strlen>
 801cb44:	2300      	movs	r3, #0
 801cb46:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb48:	f8d8 3000 	ldr.w	r3, [r8]
 801cb4c:	9009      	str	r0, [sp, #36]	@ 0x24
 801cb4e:	3307      	adds	r3, #7
 801cb50:	f023 0307 	bic.w	r3, r3, #7
 801cb54:	f103 0208 	add.w	r2, r3, #8
 801cb58:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cb5c:	f8d4 b000 	ldr.w	fp, [r4]
 801cb60:	f8c8 2000 	str.w	r2, [r8]
 801cb64:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cb68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cb6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801cb72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cb76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801cb7a:	4b9d      	ldr	r3, [pc, #628]	@ (801cdf0 <_printf_float+0x2cc>)
 801cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 801cb80:	f7e3 ffac 	bl	8000adc <__aeabi_dcmpun>
 801cb84:	bb70      	cbnz	r0, 801cbe4 <_printf_float+0xc0>
 801cb86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801cb8a:	4b99      	ldr	r3, [pc, #612]	@ (801cdf0 <_printf_float+0x2cc>)
 801cb8c:	f04f 32ff 	mov.w	r2, #4294967295
 801cb90:	f7e3 ff86 	bl	8000aa0 <__aeabi_dcmple>
 801cb94:	bb30      	cbnz	r0, 801cbe4 <_printf_float+0xc0>
 801cb96:	2200      	movs	r2, #0
 801cb98:	2300      	movs	r3, #0
 801cb9a:	4640      	mov	r0, r8
 801cb9c:	4649      	mov	r1, r9
 801cb9e:	f7e3 ff75 	bl	8000a8c <__aeabi_dcmplt>
 801cba2:	b110      	cbz	r0, 801cbaa <_printf_float+0x86>
 801cba4:	232d      	movs	r3, #45	@ 0x2d
 801cba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cbaa:	4a92      	ldr	r2, [pc, #584]	@ (801cdf4 <_printf_float+0x2d0>)
 801cbac:	4b92      	ldr	r3, [pc, #584]	@ (801cdf8 <_printf_float+0x2d4>)
 801cbae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cbb2:	bf94      	ite	ls
 801cbb4:	4690      	movls	r8, r2
 801cbb6:	4698      	movhi	r8, r3
 801cbb8:	2303      	movs	r3, #3
 801cbba:	6123      	str	r3, [r4, #16]
 801cbbc:	f02b 0304 	bic.w	r3, fp, #4
 801cbc0:	6023      	str	r3, [r4, #0]
 801cbc2:	f04f 0900 	mov.w	r9, #0
 801cbc6:	9700      	str	r7, [sp, #0]
 801cbc8:	4633      	mov	r3, r6
 801cbca:	aa0f      	add	r2, sp, #60	@ 0x3c
 801cbcc:	4621      	mov	r1, r4
 801cbce:	4628      	mov	r0, r5
 801cbd0:	f000 f9d4 	bl	801cf7c <_printf_common>
 801cbd4:	3001      	adds	r0, #1
 801cbd6:	f040 808f 	bne.w	801ccf8 <_printf_float+0x1d4>
 801cbda:	f04f 30ff 	mov.w	r0, #4294967295
 801cbde:	b011      	add	sp, #68	@ 0x44
 801cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbe4:	4642      	mov	r2, r8
 801cbe6:	464b      	mov	r3, r9
 801cbe8:	4640      	mov	r0, r8
 801cbea:	4649      	mov	r1, r9
 801cbec:	f7e3 ff76 	bl	8000adc <__aeabi_dcmpun>
 801cbf0:	b140      	cbz	r0, 801cc04 <_printf_float+0xe0>
 801cbf2:	464b      	mov	r3, r9
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	bfbc      	itt	lt
 801cbf8:	232d      	movlt	r3, #45	@ 0x2d
 801cbfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cbfe:	4a7f      	ldr	r2, [pc, #508]	@ (801cdfc <_printf_float+0x2d8>)
 801cc00:	4b7f      	ldr	r3, [pc, #508]	@ (801ce00 <_printf_float+0x2dc>)
 801cc02:	e7d4      	b.n	801cbae <_printf_float+0x8a>
 801cc04:	6863      	ldr	r3, [r4, #4]
 801cc06:	1c5a      	adds	r2, r3, #1
 801cc08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801cc0c:	d13f      	bne.n	801cc8e <_printf_float+0x16a>
 801cc0e:	2306      	movs	r3, #6
 801cc10:	6063      	str	r3, [r4, #4]
 801cc12:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801cc16:	2200      	movs	r2, #0
 801cc18:	6023      	str	r3, [r4, #0]
 801cc1a:	9206      	str	r2, [sp, #24]
 801cc1c:	aa0e      	add	r2, sp, #56	@ 0x38
 801cc1e:	e9cd a204 	strd	sl, r2, [sp, #16]
 801cc22:	aa0d      	add	r2, sp, #52	@ 0x34
 801cc24:	9203      	str	r2, [sp, #12]
 801cc26:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801cc2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801cc2e:	6863      	ldr	r3, [r4, #4]
 801cc30:	9300      	str	r3, [sp, #0]
 801cc32:	4642      	mov	r2, r8
 801cc34:	464b      	mov	r3, r9
 801cc36:	4628      	mov	r0, r5
 801cc38:	910a      	str	r1, [sp, #40]	@ 0x28
 801cc3a:	f7ff fed5 	bl	801c9e8 <__cvt>
 801cc3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cc40:	2947      	cmp	r1, #71	@ 0x47
 801cc42:	4680      	mov	r8, r0
 801cc44:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801cc46:	d128      	bne.n	801cc9a <_printf_float+0x176>
 801cc48:	1cc8      	adds	r0, r1, #3
 801cc4a:	db02      	blt.n	801cc52 <_printf_float+0x12e>
 801cc4c:	6863      	ldr	r3, [r4, #4]
 801cc4e:	4299      	cmp	r1, r3
 801cc50:	dd40      	ble.n	801ccd4 <_printf_float+0x1b0>
 801cc52:	f1aa 0a02 	sub.w	sl, sl, #2
 801cc56:	fa5f fa8a 	uxtb.w	sl, sl
 801cc5a:	3901      	subs	r1, #1
 801cc5c:	4652      	mov	r2, sl
 801cc5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cc62:	910d      	str	r1, [sp, #52]	@ 0x34
 801cc64:	f7ff ff24 	bl	801cab0 <__exponent>
 801cc68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cc6a:	1813      	adds	r3, r2, r0
 801cc6c:	2a01      	cmp	r2, #1
 801cc6e:	4681      	mov	r9, r0
 801cc70:	6123      	str	r3, [r4, #16]
 801cc72:	dc02      	bgt.n	801cc7a <_printf_float+0x156>
 801cc74:	6822      	ldr	r2, [r4, #0]
 801cc76:	07d2      	lsls	r2, r2, #31
 801cc78:	d501      	bpl.n	801cc7e <_printf_float+0x15a>
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	6123      	str	r3, [r4, #16]
 801cc7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d09f      	beq.n	801cbc6 <_printf_float+0xa2>
 801cc86:	232d      	movs	r3, #45	@ 0x2d
 801cc88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc8c:	e79b      	b.n	801cbc6 <_printf_float+0xa2>
 801cc8e:	2947      	cmp	r1, #71	@ 0x47
 801cc90:	d1bf      	bne.n	801cc12 <_printf_float+0xee>
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d1bd      	bne.n	801cc12 <_printf_float+0xee>
 801cc96:	2301      	movs	r3, #1
 801cc98:	e7ba      	b.n	801cc10 <_printf_float+0xec>
 801cc9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cc9e:	d9dc      	bls.n	801cc5a <_printf_float+0x136>
 801cca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cca4:	d118      	bne.n	801ccd8 <_printf_float+0x1b4>
 801cca6:	2900      	cmp	r1, #0
 801cca8:	6863      	ldr	r3, [r4, #4]
 801ccaa:	dd0b      	ble.n	801ccc4 <_printf_float+0x1a0>
 801ccac:	6121      	str	r1, [r4, #16]
 801ccae:	b913      	cbnz	r3, 801ccb6 <_printf_float+0x192>
 801ccb0:	6822      	ldr	r2, [r4, #0]
 801ccb2:	07d0      	lsls	r0, r2, #31
 801ccb4:	d502      	bpl.n	801ccbc <_printf_float+0x198>
 801ccb6:	3301      	adds	r3, #1
 801ccb8:	440b      	add	r3, r1
 801ccba:	6123      	str	r3, [r4, #16]
 801ccbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 801ccbe:	f04f 0900 	mov.w	r9, #0
 801ccc2:	e7dc      	b.n	801cc7e <_printf_float+0x15a>
 801ccc4:	b913      	cbnz	r3, 801cccc <_printf_float+0x1a8>
 801ccc6:	6822      	ldr	r2, [r4, #0]
 801ccc8:	07d2      	lsls	r2, r2, #31
 801ccca:	d501      	bpl.n	801ccd0 <_printf_float+0x1ac>
 801cccc:	3302      	adds	r3, #2
 801ccce:	e7f4      	b.n	801ccba <_printf_float+0x196>
 801ccd0:	2301      	movs	r3, #1
 801ccd2:	e7f2      	b.n	801ccba <_printf_float+0x196>
 801ccd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801ccd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ccda:	4299      	cmp	r1, r3
 801ccdc:	db05      	blt.n	801ccea <_printf_float+0x1c6>
 801ccde:	6823      	ldr	r3, [r4, #0]
 801cce0:	6121      	str	r1, [r4, #16]
 801cce2:	07d8      	lsls	r0, r3, #31
 801cce4:	d5ea      	bpl.n	801ccbc <_printf_float+0x198>
 801cce6:	1c4b      	adds	r3, r1, #1
 801cce8:	e7e7      	b.n	801ccba <_printf_float+0x196>
 801ccea:	2900      	cmp	r1, #0
 801ccec:	bfd4      	ite	le
 801ccee:	f1c1 0202 	rsble	r2, r1, #2
 801ccf2:	2201      	movgt	r2, #1
 801ccf4:	4413      	add	r3, r2
 801ccf6:	e7e0      	b.n	801ccba <_printf_float+0x196>
 801ccf8:	6823      	ldr	r3, [r4, #0]
 801ccfa:	055a      	lsls	r2, r3, #21
 801ccfc:	d407      	bmi.n	801cd0e <_printf_float+0x1ea>
 801ccfe:	6923      	ldr	r3, [r4, #16]
 801cd00:	4642      	mov	r2, r8
 801cd02:	4631      	mov	r1, r6
 801cd04:	4628      	mov	r0, r5
 801cd06:	47b8      	blx	r7
 801cd08:	3001      	adds	r0, #1
 801cd0a:	d12b      	bne.n	801cd64 <_printf_float+0x240>
 801cd0c:	e765      	b.n	801cbda <_printf_float+0xb6>
 801cd0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cd12:	f240 80dd 	bls.w	801ced0 <_printf_float+0x3ac>
 801cd16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cd1a:	2200      	movs	r2, #0
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	f7e3 feab 	bl	8000a78 <__aeabi_dcmpeq>
 801cd22:	2800      	cmp	r0, #0
 801cd24:	d033      	beq.n	801cd8e <_printf_float+0x26a>
 801cd26:	4a37      	ldr	r2, [pc, #220]	@ (801ce04 <_printf_float+0x2e0>)
 801cd28:	2301      	movs	r3, #1
 801cd2a:	4631      	mov	r1, r6
 801cd2c:	4628      	mov	r0, r5
 801cd2e:	47b8      	blx	r7
 801cd30:	3001      	adds	r0, #1
 801cd32:	f43f af52 	beq.w	801cbda <_printf_float+0xb6>
 801cd36:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801cd3a:	4543      	cmp	r3, r8
 801cd3c:	db02      	blt.n	801cd44 <_printf_float+0x220>
 801cd3e:	6823      	ldr	r3, [r4, #0]
 801cd40:	07d8      	lsls	r0, r3, #31
 801cd42:	d50f      	bpl.n	801cd64 <_printf_float+0x240>
 801cd44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cd48:	4631      	mov	r1, r6
 801cd4a:	4628      	mov	r0, r5
 801cd4c:	47b8      	blx	r7
 801cd4e:	3001      	adds	r0, #1
 801cd50:	f43f af43 	beq.w	801cbda <_printf_float+0xb6>
 801cd54:	f04f 0900 	mov.w	r9, #0
 801cd58:	f108 38ff 	add.w	r8, r8, #4294967295
 801cd5c:	f104 0a1a 	add.w	sl, r4, #26
 801cd60:	45c8      	cmp	r8, r9
 801cd62:	dc09      	bgt.n	801cd78 <_printf_float+0x254>
 801cd64:	6823      	ldr	r3, [r4, #0]
 801cd66:	079b      	lsls	r3, r3, #30
 801cd68:	f100 8103 	bmi.w	801cf72 <_printf_float+0x44e>
 801cd6c:	68e0      	ldr	r0, [r4, #12]
 801cd6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd70:	4298      	cmp	r0, r3
 801cd72:	bfb8      	it	lt
 801cd74:	4618      	movlt	r0, r3
 801cd76:	e732      	b.n	801cbde <_printf_float+0xba>
 801cd78:	2301      	movs	r3, #1
 801cd7a:	4652      	mov	r2, sl
 801cd7c:	4631      	mov	r1, r6
 801cd7e:	4628      	mov	r0, r5
 801cd80:	47b8      	blx	r7
 801cd82:	3001      	adds	r0, #1
 801cd84:	f43f af29 	beq.w	801cbda <_printf_float+0xb6>
 801cd88:	f109 0901 	add.w	r9, r9, #1
 801cd8c:	e7e8      	b.n	801cd60 <_printf_float+0x23c>
 801cd8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	dc39      	bgt.n	801ce08 <_printf_float+0x2e4>
 801cd94:	4a1b      	ldr	r2, [pc, #108]	@ (801ce04 <_printf_float+0x2e0>)
 801cd96:	2301      	movs	r3, #1
 801cd98:	4631      	mov	r1, r6
 801cd9a:	4628      	mov	r0, r5
 801cd9c:	47b8      	blx	r7
 801cd9e:	3001      	adds	r0, #1
 801cda0:	f43f af1b 	beq.w	801cbda <_printf_float+0xb6>
 801cda4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801cda8:	ea59 0303 	orrs.w	r3, r9, r3
 801cdac:	d102      	bne.n	801cdb4 <_printf_float+0x290>
 801cdae:	6823      	ldr	r3, [r4, #0]
 801cdb0:	07d9      	lsls	r1, r3, #31
 801cdb2:	d5d7      	bpl.n	801cd64 <_printf_float+0x240>
 801cdb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cdb8:	4631      	mov	r1, r6
 801cdba:	4628      	mov	r0, r5
 801cdbc:	47b8      	blx	r7
 801cdbe:	3001      	adds	r0, #1
 801cdc0:	f43f af0b 	beq.w	801cbda <_printf_float+0xb6>
 801cdc4:	f04f 0a00 	mov.w	sl, #0
 801cdc8:	f104 0b1a 	add.w	fp, r4, #26
 801cdcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cdce:	425b      	negs	r3, r3
 801cdd0:	4553      	cmp	r3, sl
 801cdd2:	dc01      	bgt.n	801cdd8 <_printf_float+0x2b4>
 801cdd4:	464b      	mov	r3, r9
 801cdd6:	e793      	b.n	801cd00 <_printf_float+0x1dc>
 801cdd8:	2301      	movs	r3, #1
 801cdda:	465a      	mov	r2, fp
 801cddc:	4631      	mov	r1, r6
 801cdde:	4628      	mov	r0, r5
 801cde0:	47b8      	blx	r7
 801cde2:	3001      	adds	r0, #1
 801cde4:	f43f aef9 	beq.w	801cbda <_printf_float+0xb6>
 801cde8:	f10a 0a01 	add.w	sl, sl, #1
 801cdec:	e7ee      	b.n	801cdcc <_printf_float+0x2a8>
 801cdee:	bf00      	nop
 801cdf0:	7fefffff 	.word	0x7fefffff
 801cdf4:	08020598 	.word	0x08020598
 801cdf8:	0802059c 	.word	0x0802059c
 801cdfc:	080205a0 	.word	0x080205a0
 801ce00:	080205a4 	.word	0x080205a4
 801ce04:	080205a8 	.word	0x080205a8
 801ce08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ce0a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ce0e:	4553      	cmp	r3, sl
 801ce10:	bfa8      	it	ge
 801ce12:	4653      	movge	r3, sl
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	4699      	mov	r9, r3
 801ce18:	dc36      	bgt.n	801ce88 <_printf_float+0x364>
 801ce1a:	f04f 0b00 	mov.w	fp, #0
 801ce1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ce22:	f104 021a 	add.w	r2, r4, #26
 801ce26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ce28:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce2a:	eba3 0309 	sub.w	r3, r3, r9
 801ce2e:	455b      	cmp	r3, fp
 801ce30:	dc31      	bgt.n	801ce96 <_printf_float+0x372>
 801ce32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce34:	459a      	cmp	sl, r3
 801ce36:	dc3a      	bgt.n	801ceae <_printf_float+0x38a>
 801ce38:	6823      	ldr	r3, [r4, #0]
 801ce3a:	07da      	lsls	r2, r3, #31
 801ce3c:	d437      	bmi.n	801ceae <_printf_float+0x38a>
 801ce3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce40:	ebaa 0903 	sub.w	r9, sl, r3
 801ce44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce46:	ebaa 0303 	sub.w	r3, sl, r3
 801ce4a:	4599      	cmp	r9, r3
 801ce4c:	bfa8      	it	ge
 801ce4e:	4699      	movge	r9, r3
 801ce50:	f1b9 0f00 	cmp.w	r9, #0
 801ce54:	dc33      	bgt.n	801cebe <_printf_float+0x39a>
 801ce56:	f04f 0800 	mov.w	r8, #0
 801ce5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ce5e:	f104 0b1a 	add.w	fp, r4, #26
 801ce62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce64:	ebaa 0303 	sub.w	r3, sl, r3
 801ce68:	eba3 0309 	sub.w	r3, r3, r9
 801ce6c:	4543      	cmp	r3, r8
 801ce6e:	f77f af79 	ble.w	801cd64 <_printf_float+0x240>
 801ce72:	2301      	movs	r3, #1
 801ce74:	465a      	mov	r2, fp
 801ce76:	4631      	mov	r1, r6
 801ce78:	4628      	mov	r0, r5
 801ce7a:	47b8      	blx	r7
 801ce7c:	3001      	adds	r0, #1
 801ce7e:	f43f aeac 	beq.w	801cbda <_printf_float+0xb6>
 801ce82:	f108 0801 	add.w	r8, r8, #1
 801ce86:	e7ec      	b.n	801ce62 <_printf_float+0x33e>
 801ce88:	4642      	mov	r2, r8
 801ce8a:	4631      	mov	r1, r6
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	47b8      	blx	r7
 801ce90:	3001      	adds	r0, #1
 801ce92:	d1c2      	bne.n	801ce1a <_printf_float+0x2f6>
 801ce94:	e6a1      	b.n	801cbda <_printf_float+0xb6>
 801ce96:	2301      	movs	r3, #1
 801ce98:	4631      	mov	r1, r6
 801ce9a:	4628      	mov	r0, r5
 801ce9c:	920a      	str	r2, [sp, #40]	@ 0x28
 801ce9e:	47b8      	blx	r7
 801cea0:	3001      	adds	r0, #1
 801cea2:	f43f ae9a 	beq.w	801cbda <_printf_float+0xb6>
 801cea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cea8:	f10b 0b01 	add.w	fp, fp, #1
 801ceac:	e7bb      	b.n	801ce26 <_printf_float+0x302>
 801ceae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ceb2:	4631      	mov	r1, r6
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	47b8      	blx	r7
 801ceb8:	3001      	adds	r0, #1
 801ceba:	d1c0      	bne.n	801ce3e <_printf_float+0x31a>
 801cebc:	e68d      	b.n	801cbda <_printf_float+0xb6>
 801cebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cec0:	464b      	mov	r3, r9
 801cec2:	4442      	add	r2, r8
 801cec4:	4631      	mov	r1, r6
 801cec6:	4628      	mov	r0, r5
 801cec8:	47b8      	blx	r7
 801ceca:	3001      	adds	r0, #1
 801cecc:	d1c3      	bne.n	801ce56 <_printf_float+0x332>
 801cece:	e684      	b.n	801cbda <_printf_float+0xb6>
 801ced0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ced4:	f1ba 0f01 	cmp.w	sl, #1
 801ced8:	dc01      	bgt.n	801cede <_printf_float+0x3ba>
 801ceda:	07db      	lsls	r3, r3, #31
 801cedc:	d536      	bpl.n	801cf4c <_printf_float+0x428>
 801cede:	2301      	movs	r3, #1
 801cee0:	4642      	mov	r2, r8
 801cee2:	4631      	mov	r1, r6
 801cee4:	4628      	mov	r0, r5
 801cee6:	47b8      	blx	r7
 801cee8:	3001      	adds	r0, #1
 801ceea:	f43f ae76 	beq.w	801cbda <_printf_float+0xb6>
 801ceee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cef2:	4631      	mov	r1, r6
 801cef4:	4628      	mov	r0, r5
 801cef6:	47b8      	blx	r7
 801cef8:	3001      	adds	r0, #1
 801cefa:	f43f ae6e 	beq.w	801cbda <_printf_float+0xb6>
 801cefe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cf02:	2200      	movs	r2, #0
 801cf04:	2300      	movs	r3, #0
 801cf06:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf0a:	f7e3 fdb5 	bl	8000a78 <__aeabi_dcmpeq>
 801cf0e:	b9c0      	cbnz	r0, 801cf42 <_printf_float+0x41e>
 801cf10:	4653      	mov	r3, sl
 801cf12:	f108 0201 	add.w	r2, r8, #1
 801cf16:	4631      	mov	r1, r6
 801cf18:	4628      	mov	r0, r5
 801cf1a:	47b8      	blx	r7
 801cf1c:	3001      	adds	r0, #1
 801cf1e:	d10c      	bne.n	801cf3a <_printf_float+0x416>
 801cf20:	e65b      	b.n	801cbda <_printf_float+0xb6>
 801cf22:	2301      	movs	r3, #1
 801cf24:	465a      	mov	r2, fp
 801cf26:	4631      	mov	r1, r6
 801cf28:	4628      	mov	r0, r5
 801cf2a:	47b8      	blx	r7
 801cf2c:	3001      	adds	r0, #1
 801cf2e:	f43f ae54 	beq.w	801cbda <_printf_float+0xb6>
 801cf32:	f108 0801 	add.w	r8, r8, #1
 801cf36:	45d0      	cmp	r8, sl
 801cf38:	dbf3      	blt.n	801cf22 <_printf_float+0x3fe>
 801cf3a:	464b      	mov	r3, r9
 801cf3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cf40:	e6df      	b.n	801cd02 <_printf_float+0x1de>
 801cf42:	f04f 0800 	mov.w	r8, #0
 801cf46:	f104 0b1a 	add.w	fp, r4, #26
 801cf4a:	e7f4      	b.n	801cf36 <_printf_float+0x412>
 801cf4c:	2301      	movs	r3, #1
 801cf4e:	4642      	mov	r2, r8
 801cf50:	e7e1      	b.n	801cf16 <_printf_float+0x3f2>
 801cf52:	2301      	movs	r3, #1
 801cf54:	464a      	mov	r2, r9
 801cf56:	4631      	mov	r1, r6
 801cf58:	4628      	mov	r0, r5
 801cf5a:	47b8      	blx	r7
 801cf5c:	3001      	adds	r0, #1
 801cf5e:	f43f ae3c 	beq.w	801cbda <_printf_float+0xb6>
 801cf62:	f108 0801 	add.w	r8, r8, #1
 801cf66:	68e3      	ldr	r3, [r4, #12]
 801cf68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801cf6a:	1a5b      	subs	r3, r3, r1
 801cf6c:	4543      	cmp	r3, r8
 801cf6e:	dcf0      	bgt.n	801cf52 <_printf_float+0x42e>
 801cf70:	e6fc      	b.n	801cd6c <_printf_float+0x248>
 801cf72:	f04f 0800 	mov.w	r8, #0
 801cf76:	f104 0919 	add.w	r9, r4, #25
 801cf7a:	e7f4      	b.n	801cf66 <_printf_float+0x442>

0801cf7c <_printf_common>:
 801cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf80:	4616      	mov	r6, r2
 801cf82:	4698      	mov	r8, r3
 801cf84:	688a      	ldr	r2, [r1, #8]
 801cf86:	690b      	ldr	r3, [r1, #16]
 801cf88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	bfb8      	it	lt
 801cf90:	4613      	movlt	r3, r2
 801cf92:	6033      	str	r3, [r6, #0]
 801cf94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cf98:	4607      	mov	r7, r0
 801cf9a:	460c      	mov	r4, r1
 801cf9c:	b10a      	cbz	r2, 801cfa2 <_printf_common+0x26>
 801cf9e:	3301      	adds	r3, #1
 801cfa0:	6033      	str	r3, [r6, #0]
 801cfa2:	6823      	ldr	r3, [r4, #0]
 801cfa4:	0699      	lsls	r1, r3, #26
 801cfa6:	bf42      	ittt	mi
 801cfa8:	6833      	ldrmi	r3, [r6, #0]
 801cfaa:	3302      	addmi	r3, #2
 801cfac:	6033      	strmi	r3, [r6, #0]
 801cfae:	6825      	ldr	r5, [r4, #0]
 801cfb0:	f015 0506 	ands.w	r5, r5, #6
 801cfb4:	d106      	bne.n	801cfc4 <_printf_common+0x48>
 801cfb6:	f104 0a19 	add.w	sl, r4, #25
 801cfba:	68e3      	ldr	r3, [r4, #12]
 801cfbc:	6832      	ldr	r2, [r6, #0]
 801cfbe:	1a9b      	subs	r3, r3, r2
 801cfc0:	42ab      	cmp	r3, r5
 801cfc2:	dc26      	bgt.n	801d012 <_printf_common+0x96>
 801cfc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cfc8:	6822      	ldr	r2, [r4, #0]
 801cfca:	3b00      	subs	r3, #0
 801cfcc:	bf18      	it	ne
 801cfce:	2301      	movne	r3, #1
 801cfd0:	0692      	lsls	r2, r2, #26
 801cfd2:	d42b      	bmi.n	801d02c <_printf_common+0xb0>
 801cfd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cfd8:	4641      	mov	r1, r8
 801cfda:	4638      	mov	r0, r7
 801cfdc:	47c8      	blx	r9
 801cfde:	3001      	adds	r0, #1
 801cfe0:	d01e      	beq.n	801d020 <_printf_common+0xa4>
 801cfe2:	6823      	ldr	r3, [r4, #0]
 801cfe4:	6922      	ldr	r2, [r4, #16]
 801cfe6:	f003 0306 	and.w	r3, r3, #6
 801cfea:	2b04      	cmp	r3, #4
 801cfec:	bf02      	ittt	eq
 801cfee:	68e5      	ldreq	r5, [r4, #12]
 801cff0:	6833      	ldreq	r3, [r6, #0]
 801cff2:	1aed      	subeq	r5, r5, r3
 801cff4:	68a3      	ldr	r3, [r4, #8]
 801cff6:	bf0c      	ite	eq
 801cff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cffc:	2500      	movne	r5, #0
 801cffe:	4293      	cmp	r3, r2
 801d000:	bfc4      	itt	gt
 801d002:	1a9b      	subgt	r3, r3, r2
 801d004:	18ed      	addgt	r5, r5, r3
 801d006:	2600      	movs	r6, #0
 801d008:	341a      	adds	r4, #26
 801d00a:	42b5      	cmp	r5, r6
 801d00c:	d11a      	bne.n	801d044 <_printf_common+0xc8>
 801d00e:	2000      	movs	r0, #0
 801d010:	e008      	b.n	801d024 <_printf_common+0xa8>
 801d012:	2301      	movs	r3, #1
 801d014:	4652      	mov	r2, sl
 801d016:	4641      	mov	r1, r8
 801d018:	4638      	mov	r0, r7
 801d01a:	47c8      	blx	r9
 801d01c:	3001      	adds	r0, #1
 801d01e:	d103      	bne.n	801d028 <_printf_common+0xac>
 801d020:	f04f 30ff 	mov.w	r0, #4294967295
 801d024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d028:	3501      	adds	r5, #1
 801d02a:	e7c6      	b.n	801cfba <_printf_common+0x3e>
 801d02c:	18e1      	adds	r1, r4, r3
 801d02e:	1c5a      	adds	r2, r3, #1
 801d030:	2030      	movs	r0, #48	@ 0x30
 801d032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d036:	4422      	add	r2, r4
 801d038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d03c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d040:	3302      	adds	r3, #2
 801d042:	e7c7      	b.n	801cfd4 <_printf_common+0x58>
 801d044:	2301      	movs	r3, #1
 801d046:	4622      	mov	r2, r4
 801d048:	4641      	mov	r1, r8
 801d04a:	4638      	mov	r0, r7
 801d04c:	47c8      	blx	r9
 801d04e:	3001      	adds	r0, #1
 801d050:	d0e6      	beq.n	801d020 <_printf_common+0xa4>
 801d052:	3601      	adds	r6, #1
 801d054:	e7d9      	b.n	801d00a <_printf_common+0x8e>
	...

0801d058 <_printf_i>:
 801d058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d05c:	7e0f      	ldrb	r7, [r1, #24]
 801d05e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d060:	2f78      	cmp	r7, #120	@ 0x78
 801d062:	4691      	mov	r9, r2
 801d064:	4680      	mov	r8, r0
 801d066:	460c      	mov	r4, r1
 801d068:	469a      	mov	sl, r3
 801d06a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d06e:	d807      	bhi.n	801d080 <_printf_i+0x28>
 801d070:	2f62      	cmp	r7, #98	@ 0x62
 801d072:	d80a      	bhi.n	801d08a <_printf_i+0x32>
 801d074:	2f00      	cmp	r7, #0
 801d076:	f000 80d2 	beq.w	801d21e <_printf_i+0x1c6>
 801d07a:	2f58      	cmp	r7, #88	@ 0x58
 801d07c:	f000 80b9 	beq.w	801d1f2 <_printf_i+0x19a>
 801d080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d088:	e03a      	b.n	801d100 <_printf_i+0xa8>
 801d08a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d08e:	2b15      	cmp	r3, #21
 801d090:	d8f6      	bhi.n	801d080 <_printf_i+0x28>
 801d092:	a101      	add	r1, pc, #4	@ (adr r1, 801d098 <_printf_i+0x40>)
 801d094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d098:	0801d0f1 	.word	0x0801d0f1
 801d09c:	0801d105 	.word	0x0801d105
 801d0a0:	0801d081 	.word	0x0801d081
 801d0a4:	0801d081 	.word	0x0801d081
 801d0a8:	0801d081 	.word	0x0801d081
 801d0ac:	0801d081 	.word	0x0801d081
 801d0b0:	0801d105 	.word	0x0801d105
 801d0b4:	0801d081 	.word	0x0801d081
 801d0b8:	0801d081 	.word	0x0801d081
 801d0bc:	0801d081 	.word	0x0801d081
 801d0c0:	0801d081 	.word	0x0801d081
 801d0c4:	0801d205 	.word	0x0801d205
 801d0c8:	0801d12f 	.word	0x0801d12f
 801d0cc:	0801d1bf 	.word	0x0801d1bf
 801d0d0:	0801d081 	.word	0x0801d081
 801d0d4:	0801d081 	.word	0x0801d081
 801d0d8:	0801d227 	.word	0x0801d227
 801d0dc:	0801d081 	.word	0x0801d081
 801d0e0:	0801d12f 	.word	0x0801d12f
 801d0e4:	0801d081 	.word	0x0801d081
 801d0e8:	0801d081 	.word	0x0801d081
 801d0ec:	0801d1c7 	.word	0x0801d1c7
 801d0f0:	6833      	ldr	r3, [r6, #0]
 801d0f2:	1d1a      	adds	r2, r3, #4
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	6032      	str	r2, [r6, #0]
 801d0f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d0fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d100:	2301      	movs	r3, #1
 801d102:	e09d      	b.n	801d240 <_printf_i+0x1e8>
 801d104:	6833      	ldr	r3, [r6, #0]
 801d106:	6820      	ldr	r0, [r4, #0]
 801d108:	1d19      	adds	r1, r3, #4
 801d10a:	6031      	str	r1, [r6, #0]
 801d10c:	0606      	lsls	r6, r0, #24
 801d10e:	d501      	bpl.n	801d114 <_printf_i+0xbc>
 801d110:	681d      	ldr	r5, [r3, #0]
 801d112:	e003      	b.n	801d11c <_printf_i+0xc4>
 801d114:	0645      	lsls	r5, r0, #25
 801d116:	d5fb      	bpl.n	801d110 <_printf_i+0xb8>
 801d118:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d11c:	2d00      	cmp	r5, #0
 801d11e:	da03      	bge.n	801d128 <_printf_i+0xd0>
 801d120:	232d      	movs	r3, #45	@ 0x2d
 801d122:	426d      	negs	r5, r5
 801d124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d128:	4859      	ldr	r0, [pc, #356]	@ (801d290 <_printf_i+0x238>)
 801d12a:	230a      	movs	r3, #10
 801d12c:	e011      	b.n	801d152 <_printf_i+0xfa>
 801d12e:	6821      	ldr	r1, [r4, #0]
 801d130:	6833      	ldr	r3, [r6, #0]
 801d132:	0608      	lsls	r0, r1, #24
 801d134:	f853 5b04 	ldr.w	r5, [r3], #4
 801d138:	d402      	bmi.n	801d140 <_printf_i+0xe8>
 801d13a:	0649      	lsls	r1, r1, #25
 801d13c:	bf48      	it	mi
 801d13e:	b2ad      	uxthmi	r5, r5
 801d140:	2f6f      	cmp	r7, #111	@ 0x6f
 801d142:	4853      	ldr	r0, [pc, #332]	@ (801d290 <_printf_i+0x238>)
 801d144:	6033      	str	r3, [r6, #0]
 801d146:	bf14      	ite	ne
 801d148:	230a      	movne	r3, #10
 801d14a:	2308      	moveq	r3, #8
 801d14c:	2100      	movs	r1, #0
 801d14e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d152:	6866      	ldr	r6, [r4, #4]
 801d154:	60a6      	str	r6, [r4, #8]
 801d156:	2e00      	cmp	r6, #0
 801d158:	bfa2      	ittt	ge
 801d15a:	6821      	ldrge	r1, [r4, #0]
 801d15c:	f021 0104 	bicge.w	r1, r1, #4
 801d160:	6021      	strge	r1, [r4, #0]
 801d162:	b90d      	cbnz	r5, 801d168 <_printf_i+0x110>
 801d164:	2e00      	cmp	r6, #0
 801d166:	d04b      	beq.n	801d200 <_printf_i+0x1a8>
 801d168:	4616      	mov	r6, r2
 801d16a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d16e:	fb03 5711 	mls	r7, r3, r1, r5
 801d172:	5dc7      	ldrb	r7, [r0, r7]
 801d174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d178:	462f      	mov	r7, r5
 801d17a:	42bb      	cmp	r3, r7
 801d17c:	460d      	mov	r5, r1
 801d17e:	d9f4      	bls.n	801d16a <_printf_i+0x112>
 801d180:	2b08      	cmp	r3, #8
 801d182:	d10b      	bne.n	801d19c <_printf_i+0x144>
 801d184:	6823      	ldr	r3, [r4, #0]
 801d186:	07df      	lsls	r7, r3, #31
 801d188:	d508      	bpl.n	801d19c <_printf_i+0x144>
 801d18a:	6923      	ldr	r3, [r4, #16]
 801d18c:	6861      	ldr	r1, [r4, #4]
 801d18e:	4299      	cmp	r1, r3
 801d190:	bfde      	ittt	le
 801d192:	2330      	movle	r3, #48	@ 0x30
 801d194:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d198:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d19c:	1b92      	subs	r2, r2, r6
 801d19e:	6122      	str	r2, [r4, #16]
 801d1a0:	f8cd a000 	str.w	sl, [sp]
 801d1a4:	464b      	mov	r3, r9
 801d1a6:	aa03      	add	r2, sp, #12
 801d1a8:	4621      	mov	r1, r4
 801d1aa:	4640      	mov	r0, r8
 801d1ac:	f7ff fee6 	bl	801cf7c <_printf_common>
 801d1b0:	3001      	adds	r0, #1
 801d1b2:	d14a      	bne.n	801d24a <_printf_i+0x1f2>
 801d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1b8:	b004      	add	sp, #16
 801d1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1be:	6823      	ldr	r3, [r4, #0]
 801d1c0:	f043 0320 	orr.w	r3, r3, #32
 801d1c4:	6023      	str	r3, [r4, #0]
 801d1c6:	4833      	ldr	r0, [pc, #204]	@ (801d294 <_printf_i+0x23c>)
 801d1c8:	2778      	movs	r7, #120	@ 0x78
 801d1ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d1ce:	6823      	ldr	r3, [r4, #0]
 801d1d0:	6831      	ldr	r1, [r6, #0]
 801d1d2:	061f      	lsls	r7, r3, #24
 801d1d4:	f851 5b04 	ldr.w	r5, [r1], #4
 801d1d8:	d402      	bmi.n	801d1e0 <_printf_i+0x188>
 801d1da:	065f      	lsls	r7, r3, #25
 801d1dc:	bf48      	it	mi
 801d1de:	b2ad      	uxthmi	r5, r5
 801d1e0:	6031      	str	r1, [r6, #0]
 801d1e2:	07d9      	lsls	r1, r3, #31
 801d1e4:	bf44      	itt	mi
 801d1e6:	f043 0320 	orrmi.w	r3, r3, #32
 801d1ea:	6023      	strmi	r3, [r4, #0]
 801d1ec:	b11d      	cbz	r5, 801d1f6 <_printf_i+0x19e>
 801d1ee:	2310      	movs	r3, #16
 801d1f0:	e7ac      	b.n	801d14c <_printf_i+0xf4>
 801d1f2:	4827      	ldr	r0, [pc, #156]	@ (801d290 <_printf_i+0x238>)
 801d1f4:	e7e9      	b.n	801d1ca <_printf_i+0x172>
 801d1f6:	6823      	ldr	r3, [r4, #0]
 801d1f8:	f023 0320 	bic.w	r3, r3, #32
 801d1fc:	6023      	str	r3, [r4, #0]
 801d1fe:	e7f6      	b.n	801d1ee <_printf_i+0x196>
 801d200:	4616      	mov	r6, r2
 801d202:	e7bd      	b.n	801d180 <_printf_i+0x128>
 801d204:	6833      	ldr	r3, [r6, #0]
 801d206:	6825      	ldr	r5, [r4, #0]
 801d208:	6961      	ldr	r1, [r4, #20]
 801d20a:	1d18      	adds	r0, r3, #4
 801d20c:	6030      	str	r0, [r6, #0]
 801d20e:	062e      	lsls	r6, r5, #24
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	d501      	bpl.n	801d218 <_printf_i+0x1c0>
 801d214:	6019      	str	r1, [r3, #0]
 801d216:	e002      	b.n	801d21e <_printf_i+0x1c6>
 801d218:	0668      	lsls	r0, r5, #25
 801d21a:	d5fb      	bpl.n	801d214 <_printf_i+0x1bc>
 801d21c:	8019      	strh	r1, [r3, #0]
 801d21e:	2300      	movs	r3, #0
 801d220:	6123      	str	r3, [r4, #16]
 801d222:	4616      	mov	r6, r2
 801d224:	e7bc      	b.n	801d1a0 <_printf_i+0x148>
 801d226:	6833      	ldr	r3, [r6, #0]
 801d228:	1d1a      	adds	r2, r3, #4
 801d22a:	6032      	str	r2, [r6, #0]
 801d22c:	681e      	ldr	r6, [r3, #0]
 801d22e:	6862      	ldr	r2, [r4, #4]
 801d230:	2100      	movs	r1, #0
 801d232:	4630      	mov	r0, r6
 801d234:	f7e2 ffa4 	bl	8000180 <memchr>
 801d238:	b108      	cbz	r0, 801d23e <_printf_i+0x1e6>
 801d23a:	1b80      	subs	r0, r0, r6
 801d23c:	6060      	str	r0, [r4, #4]
 801d23e:	6863      	ldr	r3, [r4, #4]
 801d240:	6123      	str	r3, [r4, #16]
 801d242:	2300      	movs	r3, #0
 801d244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d248:	e7aa      	b.n	801d1a0 <_printf_i+0x148>
 801d24a:	6923      	ldr	r3, [r4, #16]
 801d24c:	4632      	mov	r2, r6
 801d24e:	4649      	mov	r1, r9
 801d250:	4640      	mov	r0, r8
 801d252:	47d0      	blx	sl
 801d254:	3001      	adds	r0, #1
 801d256:	d0ad      	beq.n	801d1b4 <_printf_i+0x15c>
 801d258:	6823      	ldr	r3, [r4, #0]
 801d25a:	079b      	lsls	r3, r3, #30
 801d25c:	d413      	bmi.n	801d286 <_printf_i+0x22e>
 801d25e:	68e0      	ldr	r0, [r4, #12]
 801d260:	9b03      	ldr	r3, [sp, #12]
 801d262:	4298      	cmp	r0, r3
 801d264:	bfb8      	it	lt
 801d266:	4618      	movlt	r0, r3
 801d268:	e7a6      	b.n	801d1b8 <_printf_i+0x160>
 801d26a:	2301      	movs	r3, #1
 801d26c:	4632      	mov	r2, r6
 801d26e:	4649      	mov	r1, r9
 801d270:	4640      	mov	r0, r8
 801d272:	47d0      	blx	sl
 801d274:	3001      	adds	r0, #1
 801d276:	d09d      	beq.n	801d1b4 <_printf_i+0x15c>
 801d278:	3501      	adds	r5, #1
 801d27a:	68e3      	ldr	r3, [r4, #12]
 801d27c:	9903      	ldr	r1, [sp, #12]
 801d27e:	1a5b      	subs	r3, r3, r1
 801d280:	42ab      	cmp	r3, r5
 801d282:	dcf2      	bgt.n	801d26a <_printf_i+0x212>
 801d284:	e7eb      	b.n	801d25e <_printf_i+0x206>
 801d286:	2500      	movs	r5, #0
 801d288:	f104 0619 	add.w	r6, r4, #25
 801d28c:	e7f5      	b.n	801d27a <_printf_i+0x222>
 801d28e:	bf00      	nop
 801d290:	080205aa 	.word	0x080205aa
 801d294:	080205bb 	.word	0x080205bb

0801d298 <std>:
 801d298:	2300      	movs	r3, #0
 801d29a:	b510      	push	{r4, lr}
 801d29c:	4604      	mov	r4, r0
 801d29e:	e9c0 3300 	strd	r3, r3, [r0]
 801d2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d2a6:	6083      	str	r3, [r0, #8]
 801d2a8:	8181      	strh	r1, [r0, #12]
 801d2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 801d2ac:	81c2      	strh	r2, [r0, #14]
 801d2ae:	6183      	str	r3, [r0, #24]
 801d2b0:	4619      	mov	r1, r3
 801d2b2:	2208      	movs	r2, #8
 801d2b4:	305c      	adds	r0, #92	@ 0x5c
 801d2b6:	f000 f9f9 	bl	801d6ac <memset>
 801d2ba:	4b0d      	ldr	r3, [pc, #52]	@ (801d2f0 <std+0x58>)
 801d2bc:	6263      	str	r3, [r4, #36]	@ 0x24
 801d2be:	4b0d      	ldr	r3, [pc, #52]	@ (801d2f4 <std+0x5c>)
 801d2c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d2c2:	4b0d      	ldr	r3, [pc, #52]	@ (801d2f8 <std+0x60>)
 801d2c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d2c6:	4b0d      	ldr	r3, [pc, #52]	@ (801d2fc <std+0x64>)
 801d2c8:	6323      	str	r3, [r4, #48]	@ 0x30
 801d2ca:	4b0d      	ldr	r3, [pc, #52]	@ (801d300 <std+0x68>)
 801d2cc:	6224      	str	r4, [r4, #32]
 801d2ce:	429c      	cmp	r4, r3
 801d2d0:	d006      	beq.n	801d2e0 <std+0x48>
 801d2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d2d6:	4294      	cmp	r4, r2
 801d2d8:	d002      	beq.n	801d2e0 <std+0x48>
 801d2da:	33d0      	adds	r3, #208	@ 0xd0
 801d2dc:	429c      	cmp	r4, r3
 801d2de:	d105      	bne.n	801d2ec <std+0x54>
 801d2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2e8:	f000 ba5c 	b.w	801d7a4 <__retarget_lock_init_recursive>
 801d2ec:	bd10      	pop	{r4, pc}
 801d2ee:	bf00      	nop
 801d2f0:	0801d4fd 	.word	0x0801d4fd
 801d2f4:	0801d51f 	.word	0x0801d51f
 801d2f8:	0801d557 	.word	0x0801d557
 801d2fc:	0801d57b 	.word	0x0801d57b
 801d300:	200023d0 	.word	0x200023d0

0801d304 <stdio_exit_handler>:
 801d304:	4a02      	ldr	r2, [pc, #8]	@ (801d310 <stdio_exit_handler+0xc>)
 801d306:	4903      	ldr	r1, [pc, #12]	@ (801d314 <stdio_exit_handler+0x10>)
 801d308:	4803      	ldr	r0, [pc, #12]	@ (801d318 <stdio_exit_handler+0x14>)
 801d30a:	f000 b869 	b.w	801d3e0 <_fwalk_sglue>
 801d30e:	bf00      	nop
 801d310:	20000158 	.word	0x20000158
 801d314:	0801f0d1 	.word	0x0801f0d1
 801d318:	20000168 	.word	0x20000168

0801d31c <cleanup_stdio>:
 801d31c:	6841      	ldr	r1, [r0, #4]
 801d31e:	4b0c      	ldr	r3, [pc, #48]	@ (801d350 <cleanup_stdio+0x34>)
 801d320:	4299      	cmp	r1, r3
 801d322:	b510      	push	{r4, lr}
 801d324:	4604      	mov	r4, r0
 801d326:	d001      	beq.n	801d32c <cleanup_stdio+0x10>
 801d328:	f001 fed2 	bl	801f0d0 <_fflush_r>
 801d32c:	68a1      	ldr	r1, [r4, #8]
 801d32e:	4b09      	ldr	r3, [pc, #36]	@ (801d354 <cleanup_stdio+0x38>)
 801d330:	4299      	cmp	r1, r3
 801d332:	d002      	beq.n	801d33a <cleanup_stdio+0x1e>
 801d334:	4620      	mov	r0, r4
 801d336:	f001 fecb 	bl	801f0d0 <_fflush_r>
 801d33a:	68e1      	ldr	r1, [r4, #12]
 801d33c:	4b06      	ldr	r3, [pc, #24]	@ (801d358 <cleanup_stdio+0x3c>)
 801d33e:	4299      	cmp	r1, r3
 801d340:	d004      	beq.n	801d34c <cleanup_stdio+0x30>
 801d342:	4620      	mov	r0, r4
 801d344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d348:	f001 bec2 	b.w	801f0d0 <_fflush_r>
 801d34c:	bd10      	pop	{r4, pc}
 801d34e:	bf00      	nop
 801d350:	200023d0 	.word	0x200023d0
 801d354:	20002438 	.word	0x20002438
 801d358:	200024a0 	.word	0x200024a0

0801d35c <global_stdio_init.part.0>:
 801d35c:	b510      	push	{r4, lr}
 801d35e:	4b0b      	ldr	r3, [pc, #44]	@ (801d38c <global_stdio_init.part.0+0x30>)
 801d360:	4c0b      	ldr	r4, [pc, #44]	@ (801d390 <global_stdio_init.part.0+0x34>)
 801d362:	4a0c      	ldr	r2, [pc, #48]	@ (801d394 <global_stdio_init.part.0+0x38>)
 801d364:	601a      	str	r2, [r3, #0]
 801d366:	4620      	mov	r0, r4
 801d368:	2200      	movs	r2, #0
 801d36a:	2104      	movs	r1, #4
 801d36c:	f7ff ff94 	bl	801d298 <std>
 801d370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d374:	2201      	movs	r2, #1
 801d376:	2109      	movs	r1, #9
 801d378:	f7ff ff8e 	bl	801d298 <std>
 801d37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d380:	2202      	movs	r2, #2
 801d382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d386:	2112      	movs	r1, #18
 801d388:	f7ff bf86 	b.w	801d298 <std>
 801d38c:	20002508 	.word	0x20002508
 801d390:	200023d0 	.word	0x200023d0
 801d394:	0801d305 	.word	0x0801d305

0801d398 <__sfp_lock_acquire>:
 801d398:	4801      	ldr	r0, [pc, #4]	@ (801d3a0 <__sfp_lock_acquire+0x8>)
 801d39a:	f000 ba04 	b.w	801d7a6 <__retarget_lock_acquire_recursive>
 801d39e:	bf00      	nop
 801d3a0:	20002511 	.word	0x20002511

0801d3a4 <__sfp_lock_release>:
 801d3a4:	4801      	ldr	r0, [pc, #4]	@ (801d3ac <__sfp_lock_release+0x8>)
 801d3a6:	f000 b9ff 	b.w	801d7a8 <__retarget_lock_release_recursive>
 801d3aa:	bf00      	nop
 801d3ac:	20002511 	.word	0x20002511

0801d3b0 <__sinit>:
 801d3b0:	b510      	push	{r4, lr}
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	f7ff fff0 	bl	801d398 <__sfp_lock_acquire>
 801d3b8:	6a23      	ldr	r3, [r4, #32]
 801d3ba:	b11b      	cbz	r3, 801d3c4 <__sinit+0x14>
 801d3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3c0:	f7ff bff0 	b.w	801d3a4 <__sfp_lock_release>
 801d3c4:	4b04      	ldr	r3, [pc, #16]	@ (801d3d8 <__sinit+0x28>)
 801d3c6:	6223      	str	r3, [r4, #32]
 801d3c8:	4b04      	ldr	r3, [pc, #16]	@ (801d3dc <__sinit+0x2c>)
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d1f5      	bne.n	801d3bc <__sinit+0xc>
 801d3d0:	f7ff ffc4 	bl	801d35c <global_stdio_init.part.0>
 801d3d4:	e7f2      	b.n	801d3bc <__sinit+0xc>
 801d3d6:	bf00      	nop
 801d3d8:	0801d31d 	.word	0x0801d31d
 801d3dc:	20002508 	.word	0x20002508

0801d3e0 <_fwalk_sglue>:
 801d3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3e4:	4607      	mov	r7, r0
 801d3e6:	4688      	mov	r8, r1
 801d3e8:	4614      	mov	r4, r2
 801d3ea:	2600      	movs	r6, #0
 801d3ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d3f0:	f1b9 0901 	subs.w	r9, r9, #1
 801d3f4:	d505      	bpl.n	801d402 <_fwalk_sglue+0x22>
 801d3f6:	6824      	ldr	r4, [r4, #0]
 801d3f8:	2c00      	cmp	r4, #0
 801d3fa:	d1f7      	bne.n	801d3ec <_fwalk_sglue+0xc>
 801d3fc:	4630      	mov	r0, r6
 801d3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d402:	89ab      	ldrh	r3, [r5, #12]
 801d404:	2b01      	cmp	r3, #1
 801d406:	d907      	bls.n	801d418 <_fwalk_sglue+0x38>
 801d408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d40c:	3301      	adds	r3, #1
 801d40e:	d003      	beq.n	801d418 <_fwalk_sglue+0x38>
 801d410:	4629      	mov	r1, r5
 801d412:	4638      	mov	r0, r7
 801d414:	47c0      	blx	r8
 801d416:	4306      	orrs	r6, r0
 801d418:	3568      	adds	r5, #104	@ 0x68
 801d41a:	e7e9      	b.n	801d3f0 <_fwalk_sglue+0x10>

0801d41c <iprintf>:
 801d41c:	b40f      	push	{r0, r1, r2, r3}
 801d41e:	b507      	push	{r0, r1, r2, lr}
 801d420:	4906      	ldr	r1, [pc, #24]	@ (801d43c <iprintf+0x20>)
 801d422:	ab04      	add	r3, sp, #16
 801d424:	6808      	ldr	r0, [r1, #0]
 801d426:	f853 2b04 	ldr.w	r2, [r3], #4
 801d42a:	6881      	ldr	r1, [r0, #8]
 801d42c:	9301      	str	r3, [sp, #4]
 801d42e:	f001 fcb7 	bl	801eda0 <_vfiprintf_r>
 801d432:	b003      	add	sp, #12
 801d434:	f85d eb04 	ldr.w	lr, [sp], #4
 801d438:	b004      	add	sp, #16
 801d43a:	4770      	bx	lr
 801d43c:	20000164 	.word	0x20000164

0801d440 <_puts_r>:
 801d440:	6a03      	ldr	r3, [r0, #32]
 801d442:	b570      	push	{r4, r5, r6, lr}
 801d444:	6884      	ldr	r4, [r0, #8]
 801d446:	4605      	mov	r5, r0
 801d448:	460e      	mov	r6, r1
 801d44a:	b90b      	cbnz	r3, 801d450 <_puts_r+0x10>
 801d44c:	f7ff ffb0 	bl	801d3b0 <__sinit>
 801d450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d452:	07db      	lsls	r3, r3, #31
 801d454:	d405      	bmi.n	801d462 <_puts_r+0x22>
 801d456:	89a3      	ldrh	r3, [r4, #12]
 801d458:	0598      	lsls	r0, r3, #22
 801d45a:	d402      	bmi.n	801d462 <_puts_r+0x22>
 801d45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d45e:	f000 f9a2 	bl	801d7a6 <__retarget_lock_acquire_recursive>
 801d462:	89a3      	ldrh	r3, [r4, #12]
 801d464:	0719      	lsls	r1, r3, #28
 801d466:	d502      	bpl.n	801d46e <_puts_r+0x2e>
 801d468:	6923      	ldr	r3, [r4, #16]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d135      	bne.n	801d4da <_puts_r+0x9a>
 801d46e:	4621      	mov	r1, r4
 801d470:	4628      	mov	r0, r5
 801d472:	f000 f8c5 	bl	801d600 <__swsetup_r>
 801d476:	b380      	cbz	r0, 801d4da <_puts_r+0x9a>
 801d478:	f04f 35ff 	mov.w	r5, #4294967295
 801d47c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d47e:	07da      	lsls	r2, r3, #31
 801d480:	d405      	bmi.n	801d48e <_puts_r+0x4e>
 801d482:	89a3      	ldrh	r3, [r4, #12]
 801d484:	059b      	lsls	r3, r3, #22
 801d486:	d402      	bmi.n	801d48e <_puts_r+0x4e>
 801d488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d48a:	f000 f98d 	bl	801d7a8 <__retarget_lock_release_recursive>
 801d48e:	4628      	mov	r0, r5
 801d490:	bd70      	pop	{r4, r5, r6, pc}
 801d492:	2b00      	cmp	r3, #0
 801d494:	da04      	bge.n	801d4a0 <_puts_r+0x60>
 801d496:	69a2      	ldr	r2, [r4, #24]
 801d498:	429a      	cmp	r2, r3
 801d49a:	dc17      	bgt.n	801d4cc <_puts_r+0x8c>
 801d49c:	290a      	cmp	r1, #10
 801d49e:	d015      	beq.n	801d4cc <_puts_r+0x8c>
 801d4a0:	6823      	ldr	r3, [r4, #0]
 801d4a2:	1c5a      	adds	r2, r3, #1
 801d4a4:	6022      	str	r2, [r4, #0]
 801d4a6:	7019      	strb	r1, [r3, #0]
 801d4a8:	68a3      	ldr	r3, [r4, #8]
 801d4aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d4ae:	3b01      	subs	r3, #1
 801d4b0:	60a3      	str	r3, [r4, #8]
 801d4b2:	2900      	cmp	r1, #0
 801d4b4:	d1ed      	bne.n	801d492 <_puts_r+0x52>
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	da11      	bge.n	801d4de <_puts_r+0x9e>
 801d4ba:	4622      	mov	r2, r4
 801d4bc:	210a      	movs	r1, #10
 801d4be:	4628      	mov	r0, r5
 801d4c0:	f000 f85f 	bl	801d582 <__swbuf_r>
 801d4c4:	3001      	adds	r0, #1
 801d4c6:	d0d7      	beq.n	801d478 <_puts_r+0x38>
 801d4c8:	250a      	movs	r5, #10
 801d4ca:	e7d7      	b.n	801d47c <_puts_r+0x3c>
 801d4cc:	4622      	mov	r2, r4
 801d4ce:	4628      	mov	r0, r5
 801d4d0:	f000 f857 	bl	801d582 <__swbuf_r>
 801d4d4:	3001      	adds	r0, #1
 801d4d6:	d1e7      	bne.n	801d4a8 <_puts_r+0x68>
 801d4d8:	e7ce      	b.n	801d478 <_puts_r+0x38>
 801d4da:	3e01      	subs	r6, #1
 801d4dc:	e7e4      	b.n	801d4a8 <_puts_r+0x68>
 801d4de:	6823      	ldr	r3, [r4, #0]
 801d4e0:	1c5a      	adds	r2, r3, #1
 801d4e2:	6022      	str	r2, [r4, #0]
 801d4e4:	220a      	movs	r2, #10
 801d4e6:	701a      	strb	r2, [r3, #0]
 801d4e8:	e7ee      	b.n	801d4c8 <_puts_r+0x88>
	...

0801d4ec <puts>:
 801d4ec:	4b02      	ldr	r3, [pc, #8]	@ (801d4f8 <puts+0xc>)
 801d4ee:	4601      	mov	r1, r0
 801d4f0:	6818      	ldr	r0, [r3, #0]
 801d4f2:	f7ff bfa5 	b.w	801d440 <_puts_r>
 801d4f6:	bf00      	nop
 801d4f8:	20000164 	.word	0x20000164

0801d4fc <__sread>:
 801d4fc:	b510      	push	{r4, lr}
 801d4fe:	460c      	mov	r4, r1
 801d500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d504:	f000 f900 	bl	801d708 <_read_r>
 801d508:	2800      	cmp	r0, #0
 801d50a:	bfab      	itete	ge
 801d50c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d50e:	89a3      	ldrhlt	r3, [r4, #12]
 801d510:	181b      	addge	r3, r3, r0
 801d512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d516:	bfac      	ite	ge
 801d518:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d51a:	81a3      	strhlt	r3, [r4, #12]
 801d51c:	bd10      	pop	{r4, pc}

0801d51e <__swrite>:
 801d51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d522:	461f      	mov	r7, r3
 801d524:	898b      	ldrh	r3, [r1, #12]
 801d526:	05db      	lsls	r3, r3, #23
 801d528:	4605      	mov	r5, r0
 801d52a:	460c      	mov	r4, r1
 801d52c:	4616      	mov	r6, r2
 801d52e:	d505      	bpl.n	801d53c <__swrite+0x1e>
 801d530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d534:	2302      	movs	r3, #2
 801d536:	2200      	movs	r2, #0
 801d538:	f000 f8d4 	bl	801d6e4 <_lseek_r>
 801d53c:	89a3      	ldrh	r3, [r4, #12]
 801d53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d546:	81a3      	strh	r3, [r4, #12]
 801d548:	4632      	mov	r2, r6
 801d54a:	463b      	mov	r3, r7
 801d54c:	4628      	mov	r0, r5
 801d54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d552:	f000 b8eb 	b.w	801d72c <_write_r>

0801d556 <__sseek>:
 801d556:	b510      	push	{r4, lr}
 801d558:	460c      	mov	r4, r1
 801d55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d55e:	f000 f8c1 	bl	801d6e4 <_lseek_r>
 801d562:	1c43      	adds	r3, r0, #1
 801d564:	89a3      	ldrh	r3, [r4, #12]
 801d566:	bf15      	itete	ne
 801d568:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d56a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d56e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d572:	81a3      	strheq	r3, [r4, #12]
 801d574:	bf18      	it	ne
 801d576:	81a3      	strhne	r3, [r4, #12]
 801d578:	bd10      	pop	{r4, pc}

0801d57a <__sclose>:
 801d57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d57e:	f000 b8a1 	b.w	801d6c4 <_close_r>

0801d582 <__swbuf_r>:
 801d582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d584:	460e      	mov	r6, r1
 801d586:	4614      	mov	r4, r2
 801d588:	4605      	mov	r5, r0
 801d58a:	b118      	cbz	r0, 801d594 <__swbuf_r+0x12>
 801d58c:	6a03      	ldr	r3, [r0, #32]
 801d58e:	b90b      	cbnz	r3, 801d594 <__swbuf_r+0x12>
 801d590:	f7ff ff0e 	bl	801d3b0 <__sinit>
 801d594:	69a3      	ldr	r3, [r4, #24]
 801d596:	60a3      	str	r3, [r4, #8]
 801d598:	89a3      	ldrh	r3, [r4, #12]
 801d59a:	071a      	lsls	r2, r3, #28
 801d59c:	d501      	bpl.n	801d5a2 <__swbuf_r+0x20>
 801d59e:	6923      	ldr	r3, [r4, #16]
 801d5a0:	b943      	cbnz	r3, 801d5b4 <__swbuf_r+0x32>
 801d5a2:	4621      	mov	r1, r4
 801d5a4:	4628      	mov	r0, r5
 801d5a6:	f000 f82b 	bl	801d600 <__swsetup_r>
 801d5aa:	b118      	cbz	r0, 801d5b4 <__swbuf_r+0x32>
 801d5ac:	f04f 37ff 	mov.w	r7, #4294967295
 801d5b0:	4638      	mov	r0, r7
 801d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5b4:	6823      	ldr	r3, [r4, #0]
 801d5b6:	6922      	ldr	r2, [r4, #16]
 801d5b8:	1a98      	subs	r0, r3, r2
 801d5ba:	6963      	ldr	r3, [r4, #20]
 801d5bc:	b2f6      	uxtb	r6, r6
 801d5be:	4283      	cmp	r3, r0
 801d5c0:	4637      	mov	r7, r6
 801d5c2:	dc05      	bgt.n	801d5d0 <__swbuf_r+0x4e>
 801d5c4:	4621      	mov	r1, r4
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f001 fd82 	bl	801f0d0 <_fflush_r>
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d1ed      	bne.n	801d5ac <__swbuf_r+0x2a>
 801d5d0:	68a3      	ldr	r3, [r4, #8]
 801d5d2:	3b01      	subs	r3, #1
 801d5d4:	60a3      	str	r3, [r4, #8]
 801d5d6:	6823      	ldr	r3, [r4, #0]
 801d5d8:	1c5a      	adds	r2, r3, #1
 801d5da:	6022      	str	r2, [r4, #0]
 801d5dc:	701e      	strb	r6, [r3, #0]
 801d5de:	6962      	ldr	r2, [r4, #20]
 801d5e0:	1c43      	adds	r3, r0, #1
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d004      	beq.n	801d5f0 <__swbuf_r+0x6e>
 801d5e6:	89a3      	ldrh	r3, [r4, #12]
 801d5e8:	07db      	lsls	r3, r3, #31
 801d5ea:	d5e1      	bpl.n	801d5b0 <__swbuf_r+0x2e>
 801d5ec:	2e0a      	cmp	r6, #10
 801d5ee:	d1df      	bne.n	801d5b0 <__swbuf_r+0x2e>
 801d5f0:	4621      	mov	r1, r4
 801d5f2:	4628      	mov	r0, r5
 801d5f4:	f001 fd6c 	bl	801f0d0 <_fflush_r>
 801d5f8:	2800      	cmp	r0, #0
 801d5fa:	d0d9      	beq.n	801d5b0 <__swbuf_r+0x2e>
 801d5fc:	e7d6      	b.n	801d5ac <__swbuf_r+0x2a>
	...

0801d600 <__swsetup_r>:
 801d600:	b538      	push	{r3, r4, r5, lr}
 801d602:	4b29      	ldr	r3, [pc, #164]	@ (801d6a8 <__swsetup_r+0xa8>)
 801d604:	4605      	mov	r5, r0
 801d606:	6818      	ldr	r0, [r3, #0]
 801d608:	460c      	mov	r4, r1
 801d60a:	b118      	cbz	r0, 801d614 <__swsetup_r+0x14>
 801d60c:	6a03      	ldr	r3, [r0, #32]
 801d60e:	b90b      	cbnz	r3, 801d614 <__swsetup_r+0x14>
 801d610:	f7ff fece 	bl	801d3b0 <__sinit>
 801d614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d618:	0719      	lsls	r1, r3, #28
 801d61a:	d422      	bmi.n	801d662 <__swsetup_r+0x62>
 801d61c:	06da      	lsls	r2, r3, #27
 801d61e:	d407      	bmi.n	801d630 <__swsetup_r+0x30>
 801d620:	2209      	movs	r2, #9
 801d622:	602a      	str	r2, [r5, #0]
 801d624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d628:	81a3      	strh	r3, [r4, #12]
 801d62a:	f04f 30ff 	mov.w	r0, #4294967295
 801d62e:	e033      	b.n	801d698 <__swsetup_r+0x98>
 801d630:	0758      	lsls	r0, r3, #29
 801d632:	d512      	bpl.n	801d65a <__swsetup_r+0x5a>
 801d634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d636:	b141      	cbz	r1, 801d64a <__swsetup_r+0x4a>
 801d638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d63c:	4299      	cmp	r1, r3
 801d63e:	d002      	beq.n	801d646 <__swsetup_r+0x46>
 801d640:	4628      	mov	r0, r5
 801d642:	f000 ff05 	bl	801e450 <_free_r>
 801d646:	2300      	movs	r3, #0
 801d648:	6363      	str	r3, [r4, #52]	@ 0x34
 801d64a:	89a3      	ldrh	r3, [r4, #12]
 801d64c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d650:	81a3      	strh	r3, [r4, #12]
 801d652:	2300      	movs	r3, #0
 801d654:	6063      	str	r3, [r4, #4]
 801d656:	6923      	ldr	r3, [r4, #16]
 801d658:	6023      	str	r3, [r4, #0]
 801d65a:	89a3      	ldrh	r3, [r4, #12]
 801d65c:	f043 0308 	orr.w	r3, r3, #8
 801d660:	81a3      	strh	r3, [r4, #12]
 801d662:	6923      	ldr	r3, [r4, #16]
 801d664:	b94b      	cbnz	r3, 801d67a <__swsetup_r+0x7a>
 801d666:	89a3      	ldrh	r3, [r4, #12]
 801d668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d66c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d670:	d003      	beq.n	801d67a <__swsetup_r+0x7a>
 801d672:	4621      	mov	r1, r4
 801d674:	4628      	mov	r0, r5
 801d676:	f001 fd79 	bl	801f16c <__smakebuf_r>
 801d67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d67e:	f013 0201 	ands.w	r2, r3, #1
 801d682:	d00a      	beq.n	801d69a <__swsetup_r+0x9a>
 801d684:	2200      	movs	r2, #0
 801d686:	60a2      	str	r2, [r4, #8]
 801d688:	6962      	ldr	r2, [r4, #20]
 801d68a:	4252      	negs	r2, r2
 801d68c:	61a2      	str	r2, [r4, #24]
 801d68e:	6922      	ldr	r2, [r4, #16]
 801d690:	b942      	cbnz	r2, 801d6a4 <__swsetup_r+0xa4>
 801d692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d696:	d1c5      	bne.n	801d624 <__swsetup_r+0x24>
 801d698:	bd38      	pop	{r3, r4, r5, pc}
 801d69a:	0799      	lsls	r1, r3, #30
 801d69c:	bf58      	it	pl
 801d69e:	6962      	ldrpl	r2, [r4, #20]
 801d6a0:	60a2      	str	r2, [r4, #8]
 801d6a2:	e7f4      	b.n	801d68e <__swsetup_r+0x8e>
 801d6a4:	2000      	movs	r0, #0
 801d6a6:	e7f7      	b.n	801d698 <__swsetup_r+0x98>
 801d6a8:	20000164 	.word	0x20000164

0801d6ac <memset>:
 801d6ac:	4402      	add	r2, r0
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	4293      	cmp	r3, r2
 801d6b2:	d100      	bne.n	801d6b6 <memset+0xa>
 801d6b4:	4770      	bx	lr
 801d6b6:	f803 1b01 	strb.w	r1, [r3], #1
 801d6ba:	e7f9      	b.n	801d6b0 <memset+0x4>

0801d6bc <_localeconv_r>:
 801d6bc:	4800      	ldr	r0, [pc, #0]	@ (801d6c0 <_localeconv_r+0x4>)
 801d6be:	4770      	bx	lr
 801d6c0:	200002a4 	.word	0x200002a4

0801d6c4 <_close_r>:
 801d6c4:	b538      	push	{r3, r4, r5, lr}
 801d6c6:	4d06      	ldr	r5, [pc, #24]	@ (801d6e0 <_close_r+0x1c>)
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	4608      	mov	r0, r1
 801d6ce:	602b      	str	r3, [r5, #0]
 801d6d0:	f7e5 f952 	bl	8002978 <_close>
 801d6d4:	1c43      	adds	r3, r0, #1
 801d6d6:	d102      	bne.n	801d6de <_close_r+0x1a>
 801d6d8:	682b      	ldr	r3, [r5, #0]
 801d6da:	b103      	cbz	r3, 801d6de <_close_r+0x1a>
 801d6dc:	6023      	str	r3, [r4, #0]
 801d6de:	bd38      	pop	{r3, r4, r5, pc}
 801d6e0:	2000250c 	.word	0x2000250c

0801d6e4 <_lseek_r>:
 801d6e4:	b538      	push	{r3, r4, r5, lr}
 801d6e6:	4d07      	ldr	r5, [pc, #28]	@ (801d704 <_lseek_r+0x20>)
 801d6e8:	4604      	mov	r4, r0
 801d6ea:	4608      	mov	r0, r1
 801d6ec:	4611      	mov	r1, r2
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	602a      	str	r2, [r5, #0]
 801d6f2:	461a      	mov	r2, r3
 801d6f4:	f7e5 f964 	bl	80029c0 <_lseek>
 801d6f8:	1c43      	adds	r3, r0, #1
 801d6fa:	d102      	bne.n	801d702 <_lseek_r+0x1e>
 801d6fc:	682b      	ldr	r3, [r5, #0]
 801d6fe:	b103      	cbz	r3, 801d702 <_lseek_r+0x1e>
 801d700:	6023      	str	r3, [r4, #0]
 801d702:	bd38      	pop	{r3, r4, r5, pc}
 801d704:	2000250c 	.word	0x2000250c

0801d708 <_read_r>:
 801d708:	b538      	push	{r3, r4, r5, lr}
 801d70a:	4d07      	ldr	r5, [pc, #28]	@ (801d728 <_read_r+0x20>)
 801d70c:	4604      	mov	r4, r0
 801d70e:	4608      	mov	r0, r1
 801d710:	4611      	mov	r1, r2
 801d712:	2200      	movs	r2, #0
 801d714:	602a      	str	r2, [r5, #0]
 801d716:	461a      	mov	r2, r3
 801d718:	f7e5 f8f5 	bl	8002906 <_read>
 801d71c:	1c43      	adds	r3, r0, #1
 801d71e:	d102      	bne.n	801d726 <_read_r+0x1e>
 801d720:	682b      	ldr	r3, [r5, #0]
 801d722:	b103      	cbz	r3, 801d726 <_read_r+0x1e>
 801d724:	6023      	str	r3, [r4, #0]
 801d726:	bd38      	pop	{r3, r4, r5, pc}
 801d728:	2000250c 	.word	0x2000250c

0801d72c <_write_r>:
 801d72c:	b538      	push	{r3, r4, r5, lr}
 801d72e:	4d07      	ldr	r5, [pc, #28]	@ (801d74c <_write_r+0x20>)
 801d730:	4604      	mov	r4, r0
 801d732:	4608      	mov	r0, r1
 801d734:	4611      	mov	r1, r2
 801d736:	2200      	movs	r2, #0
 801d738:	602a      	str	r2, [r5, #0]
 801d73a:	461a      	mov	r2, r3
 801d73c:	f7e5 f900 	bl	8002940 <_write>
 801d740:	1c43      	adds	r3, r0, #1
 801d742:	d102      	bne.n	801d74a <_write_r+0x1e>
 801d744:	682b      	ldr	r3, [r5, #0]
 801d746:	b103      	cbz	r3, 801d74a <_write_r+0x1e>
 801d748:	6023      	str	r3, [r4, #0]
 801d74a:	bd38      	pop	{r3, r4, r5, pc}
 801d74c:	2000250c 	.word	0x2000250c

0801d750 <__errno>:
 801d750:	4b01      	ldr	r3, [pc, #4]	@ (801d758 <__errno+0x8>)
 801d752:	6818      	ldr	r0, [r3, #0]
 801d754:	4770      	bx	lr
 801d756:	bf00      	nop
 801d758:	20000164 	.word	0x20000164

0801d75c <__libc_init_array>:
 801d75c:	b570      	push	{r4, r5, r6, lr}
 801d75e:	4d0d      	ldr	r5, [pc, #52]	@ (801d794 <__libc_init_array+0x38>)
 801d760:	4c0d      	ldr	r4, [pc, #52]	@ (801d798 <__libc_init_array+0x3c>)
 801d762:	1b64      	subs	r4, r4, r5
 801d764:	10a4      	asrs	r4, r4, #2
 801d766:	2600      	movs	r6, #0
 801d768:	42a6      	cmp	r6, r4
 801d76a:	d109      	bne.n	801d780 <__libc_init_array+0x24>
 801d76c:	4d0b      	ldr	r5, [pc, #44]	@ (801d79c <__libc_init_array+0x40>)
 801d76e:	4c0c      	ldr	r4, [pc, #48]	@ (801d7a0 <__libc_init_array+0x44>)
 801d770:	f001 feaa 	bl	801f4c8 <_init>
 801d774:	1b64      	subs	r4, r4, r5
 801d776:	10a4      	asrs	r4, r4, #2
 801d778:	2600      	movs	r6, #0
 801d77a:	42a6      	cmp	r6, r4
 801d77c:	d105      	bne.n	801d78a <__libc_init_array+0x2e>
 801d77e:	bd70      	pop	{r4, r5, r6, pc}
 801d780:	f855 3b04 	ldr.w	r3, [r5], #4
 801d784:	4798      	blx	r3
 801d786:	3601      	adds	r6, #1
 801d788:	e7ee      	b.n	801d768 <__libc_init_array+0xc>
 801d78a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d78e:	4798      	blx	r3
 801d790:	3601      	adds	r6, #1
 801d792:	e7f2      	b.n	801d77a <__libc_init_array+0x1e>
 801d794:	080209d0 	.word	0x080209d0
 801d798:	080209d0 	.word	0x080209d0
 801d79c:	080209d0 	.word	0x080209d0
 801d7a0:	080209d4 	.word	0x080209d4

0801d7a4 <__retarget_lock_init_recursive>:
 801d7a4:	4770      	bx	lr

0801d7a6 <__retarget_lock_acquire_recursive>:
 801d7a6:	4770      	bx	lr

0801d7a8 <__retarget_lock_release_recursive>:
 801d7a8:	4770      	bx	lr

0801d7aa <quorem>:
 801d7aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ae:	6903      	ldr	r3, [r0, #16]
 801d7b0:	690c      	ldr	r4, [r1, #16]
 801d7b2:	42a3      	cmp	r3, r4
 801d7b4:	4607      	mov	r7, r0
 801d7b6:	db7e      	blt.n	801d8b6 <quorem+0x10c>
 801d7b8:	3c01      	subs	r4, #1
 801d7ba:	f101 0814 	add.w	r8, r1, #20
 801d7be:	00a3      	lsls	r3, r4, #2
 801d7c0:	f100 0514 	add.w	r5, r0, #20
 801d7c4:	9300      	str	r3, [sp, #0]
 801d7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d7ca:	9301      	str	r3, [sp, #4]
 801d7cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d7d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d7d4:	3301      	adds	r3, #1
 801d7d6:	429a      	cmp	r2, r3
 801d7d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d7dc:	fbb2 f6f3 	udiv	r6, r2, r3
 801d7e0:	d32e      	bcc.n	801d840 <quorem+0x96>
 801d7e2:	f04f 0a00 	mov.w	sl, #0
 801d7e6:	46c4      	mov	ip, r8
 801d7e8:	46ae      	mov	lr, r5
 801d7ea:	46d3      	mov	fp, sl
 801d7ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d7f0:	b298      	uxth	r0, r3
 801d7f2:	fb06 a000 	mla	r0, r6, r0, sl
 801d7f6:	0c02      	lsrs	r2, r0, #16
 801d7f8:	0c1b      	lsrs	r3, r3, #16
 801d7fa:	fb06 2303 	mla	r3, r6, r3, r2
 801d7fe:	f8de 2000 	ldr.w	r2, [lr]
 801d802:	b280      	uxth	r0, r0
 801d804:	b292      	uxth	r2, r2
 801d806:	1a12      	subs	r2, r2, r0
 801d808:	445a      	add	r2, fp
 801d80a:	f8de 0000 	ldr.w	r0, [lr]
 801d80e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d812:	b29b      	uxth	r3, r3
 801d814:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d818:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d81c:	b292      	uxth	r2, r2
 801d81e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d822:	45e1      	cmp	r9, ip
 801d824:	f84e 2b04 	str.w	r2, [lr], #4
 801d828:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d82c:	d2de      	bcs.n	801d7ec <quorem+0x42>
 801d82e:	9b00      	ldr	r3, [sp, #0]
 801d830:	58eb      	ldr	r3, [r5, r3]
 801d832:	b92b      	cbnz	r3, 801d840 <quorem+0x96>
 801d834:	9b01      	ldr	r3, [sp, #4]
 801d836:	3b04      	subs	r3, #4
 801d838:	429d      	cmp	r5, r3
 801d83a:	461a      	mov	r2, r3
 801d83c:	d32f      	bcc.n	801d89e <quorem+0xf4>
 801d83e:	613c      	str	r4, [r7, #16]
 801d840:	4638      	mov	r0, r7
 801d842:	f001 f97f 	bl	801eb44 <__mcmp>
 801d846:	2800      	cmp	r0, #0
 801d848:	db25      	blt.n	801d896 <quorem+0xec>
 801d84a:	4629      	mov	r1, r5
 801d84c:	2000      	movs	r0, #0
 801d84e:	f858 2b04 	ldr.w	r2, [r8], #4
 801d852:	f8d1 c000 	ldr.w	ip, [r1]
 801d856:	fa1f fe82 	uxth.w	lr, r2
 801d85a:	fa1f f38c 	uxth.w	r3, ip
 801d85e:	eba3 030e 	sub.w	r3, r3, lr
 801d862:	4403      	add	r3, r0
 801d864:	0c12      	lsrs	r2, r2, #16
 801d866:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d86a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d86e:	b29b      	uxth	r3, r3
 801d870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d874:	45c1      	cmp	r9, r8
 801d876:	f841 3b04 	str.w	r3, [r1], #4
 801d87a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d87e:	d2e6      	bcs.n	801d84e <quorem+0xa4>
 801d880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d888:	b922      	cbnz	r2, 801d894 <quorem+0xea>
 801d88a:	3b04      	subs	r3, #4
 801d88c:	429d      	cmp	r5, r3
 801d88e:	461a      	mov	r2, r3
 801d890:	d30b      	bcc.n	801d8aa <quorem+0x100>
 801d892:	613c      	str	r4, [r7, #16]
 801d894:	3601      	adds	r6, #1
 801d896:	4630      	mov	r0, r6
 801d898:	b003      	add	sp, #12
 801d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d89e:	6812      	ldr	r2, [r2, #0]
 801d8a0:	3b04      	subs	r3, #4
 801d8a2:	2a00      	cmp	r2, #0
 801d8a4:	d1cb      	bne.n	801d83e <quorem+0x94>
 801d8a6:	3c01      	subs	r4, #1
 801d8a8:	e7c6      	b.n	801d838 <quorem+0x8e>
 801d8aa:	6812      	ldr	r2, [r2, #0]
 801d8ac:	3b04      	subs	r3, #4
 801d8ae:	2a00      	cmp	r2, #0
 801d8b0:	d1ef      	bne.n	801d892 <quorem+0xe8>
 801d8b2:	3c01      	subs	r4, #1
 801d8b4:	e7ea      	b.n	801d88c <quorem+0xe2>
 801d8b6:	2000      	movs	r0, #0
 801d8b8:	e7ee      	b.n	801d898 <quorem+0xee>
 801d8ba:	0000      	movs	r0, r0
 801d8bc:	0000      	movs	r0, r0
	...

0801d8c0 <_dtoa_r>:
 801d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c4:	69c7      	ldr	r7, [r0, #28]
 801d8c6:	b097      	sub	sp, #92	@ 0x5c
 801d8c8:	4614      	mov	r4, r2
 801d8ca:	461d      	mov	r5, r3
 801d8cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801d8d0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801d8d2:	4683      	mov	fp, r0
 801d8d4:	b97f      	cbnz	r7, 801d8f6 <_dtoa_r+0x36>
 801d8d6:	2010      	movs	r0, #16
 801d8d8:	f000 fe04 	bl	801e4e4 <malloc>
 801d8dc:	4602      	mov	r2, r0
 801d8de:	f8cb 001c 	str.w	r0, [fp, #28]
 801d8e2:	b920      	cbnz	r0, 801d8ee <_dtoa_r+0x2e>
 801d8e4:	4ba8      	ldr	r3, [pc, #672]	@ (801db88 <_dtoa_r+0x2c8>)
 801d8e6:	21ef      	movs	r1, #239	@ 0xef
 801d8e8:	48a8      	ldr	r0, [pc, #672]	@ (801db8c <_dtoa_r+0x2cc>)
 801d8ea:	f001 fcbb 	bl	801f264 <__assert_func>
 801d8ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d8f2:	6007      	str	r7, [r0, #0]
 801d8f4:	60c7      	str	r7, [r0, #12]
 801d8f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d8fa:	6819      	ldr	r1, [r3, #0]
 801d8fc:	b159      	cbz	r1, 801d916 <_dtoa_r+0x56>
 801d8fe:	685a      	ldr	r2, [r3, #4]
 801d900:	604a      	str	r2, [r1, #4]
 801d902:	2301      	movs	r3, #1
 801d904:	4093      	lsls	r3, r2
 801d906:	608b      	str	r3, [r1, #8]
 801d908:	4658      	mov	r0, fp
 801d90a:	f000 fee1 	bl	801e6d0 <_Bfree>
 801d90e:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d912:	2200      	movs	r2, #0
 801d914:	601a      	str	r2, [r3, #0]
 801d916:	1e2b      	subs	r3, r5, #0
 801d918:	bfb9      	ittee	lt
 801d91a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d91e:	9303      	strlt	r3, [sp, #12]
 801d920:	2300      	movge	r3, #0
 801d922:	6033      	strge	r3, [r6, #0]
 801d924:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d928:	4b99      	ldr	r3, [pc, #612]	@ (801db90 <_dtoa_r+0x2d0>)
 801d92a:	bfbc      	itt	lt
 801d92c:	2201      	movlt	r2, #1
 801d92e:	6032      	strlt	r2, [r6, #0]
 801d930:	ea33 0308 	bics.w	r3, r3, r8
 801d934:	d112      	bne.n	801d95c <_dtoa_r+0x9c>
 801d936:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d938:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d93c:	6013      	str	r3, [r2, #0]
 801d93e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d942:	4323      	orrs	r3, r4
 801d944:	f000 8551 	beq.w	801e3ea <_dtoa_r+0xb2a>
 801d948:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d94a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 801db94 <_dtoa_r+0x2d4>
 801d94e:	2b00      	cmp	r3, #0
 801d950:	f000 8553 	beq.w	801e3fa <_dtoa_r+0xb3a>
 801d954:	f10a 0303 	add.w	r3, sl, #3
 801d958:	f000 bd4d 	b.w	801e3f6 <_dtoa_r+0xb36>
 801d95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d960:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d968:	2200      	movs	r2, #0
 801d96a:	2300      	movs	r3, #0
 801d96c:	f7e3 f884 	bl	8000a78 <__aeabi_dcmpeq>
 801d970:	4607      	mov	r7, r0
 801d972:	b158      	cbz	r0, 801d98c <_dtoa_r+0xcc>
 801d974:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d976:	2301      	movs	r3, #1
 801d978:	6013      	str	r3, [r2, #0]
 801d97a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d97c:	b113      	cbz	r3, 801d984 <_dtoa_r+0xc4>
 801d97e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d980:	4b85      	ldr	r3, [pc, #532]	@ (801db98 <_dtoa_r+0x2d8>)
 801d982:	6013      	str	r3, [r2, #0]
 801d984:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801db9c <_dtoa_r+0x2dc>
 801d988:	f000 bd37 	b.w	801e3fa <_dtoa_r+0xb3a>
 801d98c:	ab14      	add	r3, sp, #80	@ 0x50
 801d98e:	9301      	str	r3, [sp, #4]
 801d990:	ab15      	add	r3, sp, #84	@ 0x54
 801d992:	9300      	str	r3, [sp, #0]
 801d994:	4658      	mov	r0, fp
 801d996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801d99a:	f001 f981 	bl	801eca0 <__d2b>
 801d99e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801d9a2:	4681      	mov	r9, r0
 801d9a4:	2e00      	cmp	r6, #0
 801d9a6:	d076      	beq.n	801da96 <_dtoa_r+0x1d6>
 801d9a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9aa:	9712      	str	r7, [sp, #72]	@ 0x48
 801d9ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d9b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d9b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d9bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d9c0:	4619      	mov	r1, r3
 801d9c2:	2200      	movs	r2, #0
 801d9c4:	4b76      	ldr	r3, [pc, #472]	@ (801dba0 <_dtoa_r+0x2e0>)
 801d9c6:	f7e2 fc37 	bl	8000238 <__aeabi_dsub>
 801d9ca:	a369      	add	r3, pc, #420	@ (adr r3, 801db70 <_dtoa_r+0x2b0>)
 801d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9d0:	f7e2 fdea 	bl	80005a8 <__aeabi_dmul>
 801d9d4:	a368      	add	r3, pc, #416	@ (adr r3, 801db78 <_dtoa_r+0x2b8>)
 801d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9da:	f7e2 fc2f 	bl	800023c <__adddf3>
 801d9de:	4604      	mov	r4, r0
 801d9e0:	4630      	mov	r0, r6
 801d9e2:	460d      	mov	r5, r1
 801d9e4:	f7e2 fd76 	bl	80004d4 <__aeabi_i2d>
 801d9e8:	a365      	add	r3, pc, #404	@ (adr r3, 801db80 <_dtoa_r+0x2c0>)
 801d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ee:	f7e2 fddb 	bl	80005a8 <__aeabi_dmul>
 801d9f2:	4602      	mov	r2, r0
 801d9f4:	460b      	mov	r3, r1
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	4629      	mov	r1, r5
 801d9fa:	f7e2 fc1f 	bl	800023c <__adddf3>
 801d9fe:	4604      	mov	r4, r0
 801da00:	460d      	mov	r5, r1
 801da02:	f7e3 f881 	bl	8000b08 <__aeabi_d2iz>
 801da06:	2200      	movs	r2, #0
 801da08:	4607      	mov	r7, r0
 801da0a:	2300      	movs	r3, #0
 801da0c:	4620      	mov	r0, r4
 801da0e:	4629      	mov	r1, r5
 801da10:	f7e3 f83c 	bl	8000a8c <__aeabi_dcmplt>
 801da14:	b140      	cbz	r0, 801da28 <_dtoa_r+0x168>
 801da16:	4638      	mov	r0, r7
 801da18:	f7e2 fd5c 	bl	80004d4 <__aeabi_i2d>
 801da1c:	4622      	mov	r2, r4
 801da1e:	462b      	mov	r3, r5
 801da20:	f7e3 f82a 	bl	8000a78 <__aeabi_dcmpeq>
 801da24:	b900      	cbnz	r0, 801da28 <_dtoa_r+0x168>
 801da26:	3f01      	subs	r7, #1
 801da28:	2f16      	cmp	r7, #22
 801da2a:	d852      	bhi.n	801dad2 <_dtoa_r+0x212>
 801da2c:	4b5d      	ldr	r3, [pc, #372]	@ (801dba4 <_dtoa_r+0x2e4>)
 801da2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801da32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da3a:	f7e3 f827 	bl	8000a8c <__aeabi_dcmplt>
 801da3e:	2800      	cmp	r0, #0
 801da40:	d049      	beq.n	801dad6 <_dtoa_r+0x216>
 801da42:	3f01      	subs	r7, #1
 801da44:	2300      	movs	r3, #0
 801da46:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801da4a:	1b9b      	subs	r3, r3, r6
 801da4c:	1e5a      	subs	r2, r3, #1
 801da4e:	bf44      	itt	mi
 801da50:	f1c3 0801 	rsbmi	r8, r3, #1
 801da54:	2300      	movmi	r3, #0
 801da56:	9209      	str	r2, [sp, #36]	@ 0x24
 801da58:	bf54      	ite	pl
 801da5a:	f04f 0800 	movpl.w	r8, #0
 801da5e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801da60:	2f00      	cmp	r7, #0
 801da62:	db3a      	blt.n	801dada <_dtoa_r+0x21a>
 801da64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da66:	970e      	str	r7, [sp, #56]	@ 0x38
 801da68:	443b      	add	r3, r7
 801da6a:	9309      	str	r3, [sp, #36]	@ 0x24
 801da6c:	2300      	movs	r3, #0
 801da6e:	930a      	str	r3, [sp, #40]	@ 0x28
 801da70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801da72:	2b09      	cmp	r3, #9
 801da74:	d865      	bhi.n	801db42 <_dtoa_r+0x282>
 801da76:	2b05      	cmp	r3, #5
 801da78:	bfc4      	itt	gt
 801da7a:	3b04      	subgt	r3, #4
 801da7c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801da7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801da80:	f1a3 0302 	sub.w	r3, r3, #2
 801da84:	bfcc      	ite	gt
 801da86:	2400      	movgt	r4, #0
 801da88:	2401      	movle	r4, #1
 801da8a:	2b03      	cmp	r3, #3
 801da8c:	d864      	bhi.n	801db58 <_dtoa_r+0x298>
 801da8e:	e8df f003 	tbb	[pc, r3]
 801da92:	382b      	.short	0x382b
 801da94:	5636      	.short	0x5636
 801da96:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801da9a:	441e      	add	r6, r3
 801da9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801daa0:	2b20      	cmp	r3, #32
 801daa2:	bfc1      	itttt	gt
 801daa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801daa8:	fa08 f803 	lslgt.w	r8, r8, r3
 801daac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801dab0:	fa24 f303 	lsrgt.w	r3, r4, r3
 801dab4:	bfd6      	itet	le
 801dab6:	f1c3 0320 	rsble	r3, r3, #32
 801daba:	ea48 0003 	orrgt.w	r0, r8, r3
 801dabe:	fa04 f003 	lslle.w	r0, r4, r3
 801dac2:	f7e2 fcf7 	bl	80004b4 <__aeabi_ui2d>
 801dac6:	2201      	movs	r2, #1
 801dac8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801dacc:	3e01      	subs	r6, #1
 801dace:	9212      	str	r2, [sp, #72]	@ 0x48
 801dad0:	e776      	b.n	801d9c0 <_dtoa_r+0x100>
 801dad2:	2301      	movs	r3, #1
 801dad4:	e7b7      	b.n	801da46 <_dtoa_r+0x186>
 801dad6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dad8:	e7b6      	b.n	801da48 <_dtoa_r+0x188>
 801dada:	427b      	negs	r3, r7
 801dadc:	930a      	str	r3, [sp, #40]	@ 0x28
 801dade:	2300      	movs	r3, #0
 801dae0:	eba8 0807 	sub.w	r8, r8, r7
 801dae4:	930e      	str	r3, [sp, #56]	@ 0x38
 801dae6:	e7c3      	b.n	801da70 <_dtoa_r+0x1b0>
 801dae8:	2300      	movs	r3, #0
 801daea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801daec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801daee:	2b00      	cmp	r3, #0
 801daf0:	dc35      	bgt.n	801db5e <_dtoa_r+0x29e>
 801daf2:	2301      	movs	r3, #1
 801daf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801daf8:	461a      	mov	r2, r3
 801dafa:	9221      	str	r2, [sp, #132]	@ 0x84
 801dafc:	e00b      	b.n	801db16 <_dtoa_r+0x256>
 801dafe:	2301      	movs	r3, #1
 801db00:	e7f3      	b.n	801daea <_dtoa_r+0x22a>
 801db02:	2300      	movs	r3, #0
 801db04:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801db08:	18fb      	adds	r3, r7, r3
 801db0a:	9308      	str	r3, [sp, #32]
 801db0c:	3301      	adds	r3, #1
 801db0e:	2b01      	cmp	r3, #1
 801db10:	9307      	str	r3, [sp, #28]
 801db12:	bfb8      	it	lt
 801db14:	2301      	movlt	r3, #1
 801db16:	f8db 001c 	ldr.w	r0, [fp, #28]
 801db1a:	2100      	movs	r1, #0
 801db1c:	2204      	movs	r2, #4
 801db1e:	f102 0514 	add.w	r5, r2, #20
 801db22:	429d      	cmp	r5, r3
 801db24:	d91f      	bls.n	801db66 <_dtoa_r+0x2a6>
 801db26:	6041      	str	r1, [r0, #4]
 801db28:	4658      	mov	r0, fp
 801db2a:	f000 fd91 	bl	801e650 <_Balloc>
 801db2e:	4682      	mov	sl, r0
 801db30:	2800      	cmp	r0, #0
 801db32:	d13b      	bne.n	801dbac <_dtoa_r+0x2ec>
 801db34:	4b1c      	ldr	r3, [pc, #112]	@ (801dba8 <_dtoa_r+0x2e8>)
 801db36:	4602      	mov	r2, r0
 801db38:	f240 11af 	movw	r1, #431	@ 0x1af
 801db3c:	e6d4      	b.n	801d8e8 <_dtoa_r+0x28>
 801db3e:	2301      	movs	r3, #1
 801db40:	e7e0      	b.n	801db04 <_dtoa_r+0x244>
 801db42:	2401      	movs	r4, #1
 801db44:	2300      	movs	r3, #0
 801db46:	9320      	str	r3, [sp, #128]	@ 0x80
 801db48:	940b      	str	r4, [sp, #44]	@ 0x2c
 801db4a:	f04f 33ff 	mov.w	r3, #4294967295
 801db4e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801db52:	2200      	movs	r2, #0
 801db54:	2312      	movs	r3, #18
 801db56:	e7d0      	b.n	801dafa <_dtoa_r+0x23a>
 801db58:	2301      	movs	r3, #1
 801db5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db5c:	e7f5      	b.n	801db4a <_dtoa_r+0x28a>
 801db5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801db60:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801db64:	e7d7      	b.n	801db16 <_dtoa_r+0x256>
 801db66:	3101      	adds	r1, #1
 801db68:	0052      	lsls	r2, r2, #1
 801db6a:	e7d8      	b.n	801db1e <_dtoa_r+0x25e>
 801db6c:	f3af 8000 	nop.w
 801db70:	636f4361 	.word	0x636f4361
 801db74:	3fd287a7 	.word	0x3fd287a7
 801db78:	8b60c8b3 	.word	0x8b60c8b3
 801db7c:	3fc68a28 	.word	0x3fc68a28
 801db80:	509f79fb 	.word	0x509f79fb
 801db84:	3fd34413 	.word	0x3fd34413
 801db88:	080205d9 	.word	0x080205d9
 801db8c:	080205f0 	.word	0x080205f0
 801db90:	7ff00000 	.word	0x7ff00000
 801db94:	080205d5 	.word	0x080205d5
 801db98:	080205a9 	.word	0x080205a9
 801db9c:	080205a8 	.word	0x080205a8
 801dba0:	3ff80000 	.word	0x3ff80000
 801dba4:	080206e8 	.word	0x080206e8
 801dba8:	08020648 	.word	0x08020648
 801dbac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dbb0:	6018      	str	r0, [r3, #0]
 801dbb2:	9b07      	ldr	r3, [sp, #28]
 801dbb4:	2b0e      	cmp	r3, #14
 801dbb6:	f200 80a4 	bhi.w	801dd02 <_dtoa_r+0x442>
 801dbba:	2c00      	cmp	r4, #0
 801dbbc:	f000 80a1 	beq.w	801dd02 <_dtoa_r+0x442>
 801dbc0:	2f00      	cmp	r7, #0
 801dbc2:	dd33      	ble.n	801dc2c <_dtoa_r+0x36c>
 801dbc4:	4b86      	ldr	r3, [pc, #536]	@ (801dde0 <_dtoa_r+0x520>)
 801dbc6:	f007 020f 	and.w	r2, r7, #15
 801dbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dbce:	e9d3 3400 	ldrd	r3, r4, [r3]
 801dbd2:	05f8      	lsls	r0, r7, #23
 801dbd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801dbd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dbdc:	d516      	bpl.n	801dc0c <_dtoa_r+0x34c>
 801dbde:	4b81      	ldr	r3, [pc, #516]	@ (801dde4 <_dtoa_r+0x524>)
 801dbe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dbe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dbe8:	f7e2 fe08 	bl	80007fc <__aeabi_ddiv>
 801dbec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dbf0:	f004 040f 	and.w	r4, r4, #15
 801dbf4:	2603      	movs	r6, #3
 801dbf6:	4d7b      	ldr	r5, [pc, #492]	@ (801dde4 <_dtoa_r+0x524>)
 801dbf8:	b954      	cbnz	r4, 801dc10 <_dtoa_r+0x350>
 801dbfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc02:	f7e2 fdfb 	bl	80007fc <__aeabi_ddiv>
 801dc06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc0a:	e028      	b.n	801dc5e <_dtoa_r+0x39e>
 801dc0c:	2602      	movs	r6, #2
 801dc0e:	e7f2      	b.n	801dbf6 <_dtoa_r+0x336>
 801dc10:	07e1      	lsls	r1, r4, #31
 801dc12:	d508      	bpl.n	801dc26 <_dtoa_r+0x366>
 801dc14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dc18:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dc1c:	f7e2 fcc4 	bl	80005a8 <__aeabi_dmul>
 801dc20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dc24:	3601      	adds	r6, #1
 801dc26:	1064      	asrs	r4, r4, #1
 801dc28:	3508      	adds	r5, #8
 801dc2a:	e7e5      	b.n	801dbf8 <_dtoa_r+0x338>
 801dc2c:	f000 80d2 	beq.w	801ddd4 <_dtoa_r+0x514>
 801dc30:	427c      	negs	r4, r7
 801dc32:	4b6b      	ldr	r3, [pc, #428]	@ (801dde0 <_dtoa_r+0x520>)
 801dc34:	4d6b      	ldr	r5, [pc, #428]	@ (801dde4 <_dtoa_r+0x524>)
 801dc36:	f004 020f 	and.w	r2, r4, #15
 801dc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dc46:	f7e2 fcaf 	bl	80005a8 <__aeabi_dmul>
 801dc4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc4e:	1124      	asrs	r4, r4, #4
 801dc50:	2300      	movs	r3, #0
 801dc52:	2602      	movs	r6, #2
 801dc54:	2c00      	cmp	r4, #0
 801dc56:	f040 80b2 	bne.w	801ddbe <_dtoa_r+0x4fe>
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d1d3      	bne.n	801dc06 <_dtoa_r+0x346>
 801dc5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dc60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	f000 80b7 	beq.w	801ddd8 <_dtoa_r+0x518>
 801dc6a:	4b5f      	ldr	r3, [pc, #380]	@ (801dde8 <_dtoa_r+0x528>)
 801dc6c:	2200      	movs	r2, #0
 801dc6e:	4620      	mov	r0, r4
 801dc70:	4629      	mov	r1, r5
 801dc72:	f7e2 ff0b 	bl	8000a8c <__aeabi_dcmplt>
 801dc76:	2800      	cmp	r0, #0
 801dc78:	f000 80ae 	beq.w	801ddd8 <_dtoa_r+0x518>
 801dc7c:	9b07      	ldr	r3, [sp, #28]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	f000 80aa 	beq.w	801ddd8 <_dtoa_r+0x518>
 801dc84:	9b08      	ldr	r3, [sp, #32]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	dd37      	ble.n	801dcfa <_dtoa_r+0x43a>
 801dc8a:	1e7b      	subs	r3, r7, #1
 801dc8c:	9304      	str	r3, [sp, #16]
 801dc8e:	4620      	mov	r0, r4
 801dc90:	4b56      	ldr	r3, [pc, #344]	@ (801ddec <_dtoa_r+0x52c>)
 801dc92:	2200      	movs	r2, #0
 801dc94:	4629      	mov	r1, r5
 801dc96:	f7e2 fc87 	bl	80005a8 <__aeabi_dmul>
 801dc9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc9e:	9c08      	ldr	r4, [sp, #32]
 801dca0:	3601      	adds	r6, #1
 801dca2:	4630      	mov	r0, r6
 801dca4:	f7e2 fc16 	bl	80004d4 <__aeabi_i2d>
 801dca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dcac:	f7e2 fc7c 	bl	80005a8 <__aeabi_dmul>
 801dcb0:	4b4f      	ldr	r3, [pc, #316]	@ (801ddf0 <_dtoa_r+0x530>)
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	f7e2 fac2 	bl	800023c <__adddf3>
 801dcb8:	4605      	mov	r5, r0
 801dcba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dcbe:	2c00      	cmp	r4, #0
 801dcc0:	f040 809a 	bne.w	801ddf8 <_dtoa_r+0x538>
 801dcc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcc8:	4b4a      	ldr	r3, [pc, #296]	@ (801ddf4 <_dtoa_r+0x534>)
 801dcca:	2200      	movs	r2, #0
 801dccc:	f7e2 fab4 	bl	8000238 <__aeabi_dsub>
 801dcd0:	4602      	mov	r2, r0
 801dcd2:	460b      	mov	r3, r1
 801dcd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dcd8:	462a      	mov	r2, r5
 801dcda:	4633      	mov	r3, r6
 801dcdc:	f7e2 fef4 	bl	8000ac8 <__aeabi_dcmpgt>
 801dce0:	2800      	cmp	r0, #0
 801dce2:	f040 828e 	bne.w	801e202 <_dtoa_r+0x942>
 801dce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcea:	462a      	mov	r2, r5
 801dcec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dcf0:	f7e2 fecc 	bl	8000a8c <__aeabi_dcmplt>
 801dcf4:	2800      	cmp	r0, #0
 801dcf6:	f040 8127 	bne.w	801df48 <_dtoa_r+0x688>
 801dcfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dcfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dd02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	f2c0 8163 	blt.w	801dfd0 <_dtoa_r+0x710>
 801dd0a:	2f0e      	cmp	r7, #14
 801dd0c:	f300 8160 	bgt.w	801dfd0 <_dtoa_r+0x710>
 801dd10:	4b33      	ldr	r3, [pc, #204]	@ (801dde0 <_dtoa_r+0x520>)
 801dd12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dd16:	e9d3 3400 	ldrd	r3, r4, [r3]
 801dd1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801dd1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	da03      	bge.n	801dd2c <_dtoa_r+0x46c>
 801dd24:	9b07      	ldr	r3, [sp, #28]
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	f340 8100 	ble.w	801df2c <_dtoa_r+0x66c>
 801dd2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dd30:	4656      	mov	r6, sl
 801dd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd36:	4620      	mov	r0, r4
 801dd38:	4629      	mov	r1, r5
 801dd3a:	f7e2 fd5f 	bl	80007fc <__aeabi_ddiv>
 801dd3e:	f7e2 fee3 	bl	8000b08 <__aeabi_d2iz>
 801dd42:	4680      	mov	r8, r0
 801dd44:	f7e2 fbc6 	bl	80004d4 <__aeabi_i2d>
 801dd48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd4c:	f7e2 fc2c 	bl	80005a8 <__aeabi_dmul>
 801dd50:	4602      	mov	r2, r0
 801dd52:	460b      	mov	r3, r1
 801dd54:	4620      	mov	r0, r4
 801dd56:	4629      	mov	r1, r5
 801dd58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801dd5c:	f7e2 fa6c 	bl	8000238 <__aeabi_dsub>
 801dd60:	f806 4b01 	strb.w	r4, [r6], #1
 801dd64:	9d07      	ldr	r5, [sp, #28]
 801dd66:	eba6 040a 	sub.w	r4, r6, sl
 801dd6a:	42a5      	cmp	r5, r4
 801dd6c:	4602      	mov	r2, r0
 801dd6e:	460b      	mov	r3, r1
 801dd70:	f040 8116 	bne.w	801dfa0 <_dtoa_r+0x6e0>
 801dd74:	f7e2 fa62 	bl	800023c <__adddf3>
 801dd78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd7c:	4604      	mov	r4, r0
 801dd7e:	460d      	mov	r5, r1
 801dd80:	f7e2 fea2 	bl	8000ac8 <__aeabi_dcmpgt>
 801dd84:	2800      	cmp	r0, #0
 801dd86:	f040 80f8 	bne.w	801df7a <_dtoa_r+0x6ba>
 801dd8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd8e:	4620      	mov	r0, r4
 801dd90:	4629      	mov	r1, r5
 801dd92:	f7e2 fe71 	bl	8000a78 <__aeabi_dcmpeq>
 801dd96:	b118      	cbz	r0, 801dda0 <_dtoa_r+0x4e0>
 801dd98:	f018 0f01 	tst.w	r8, #1
 801dd9c:	f040 80ed 	bne.w	801df7a <_dtoa_r+0x6ba>
 801dda0:	4649      	mov	r1, r9
 801dda2:	4658      	mov	r0, fp
 801dda4:	f000 fc94 	bl	801e6d0 <_Bfree>
 801dda8:	2300      	movs	r3, #0
 801ddaa:	7033      	strb	r3, [r6, #0]
 801ddac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ddae:	3701      	adds	r7, #1
 801ddb0:	601f      	str	r7, [r3, #0]
 801ddb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	f000 8320 	beq.w	801e3fa <_dtoa_r+0xb3a>
 801ddba:	601e      	str	r6, [r3, #0]
 801ddbc:	e31d      	b.n	801e3fa <_dtoa_r+0xb3a>
 801ddbe:	07e2      	lsls	r2, r4, #31
 801ddc0:	d505      	bpl.n	801ddce <_dtoa_r+0x50e>
 801ddc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ddc6:	f7e2 fbef 	bl	80005a8 <__aeabi_dmul>
 801ddca:	3601      	adds	r6, #1
 801ddcc:	2301      	movs	r3, #1
 801ddce:	1064      	asrs	r4, r4, #1
 801ddd0:	3508      	adds	r5, #8
 801ddd2:	e73f      	b.n	801dc54 <_dtoa_r+0x394>
 801ddd4:	2602      	movs	r6, #2
 801ddd6:	e742      	b.n	801dc5e <_dtoa_r+0x39e>
 801ddd8:	9c07      	ldr	r4, [sp, #28]
 801ddda:	9704      	str	r7, [sp, #16]
 801dddc:	e761      	b.n	801dca2 <_dtoa_r+0x3e2>
 801ddde:	bf00      	nop
 801dde0:	080206e8 	.word	0x080206e8
 801dde4:	080206c0 	.word	0x080206c0
 801dde8:	3ff00000 	.word	0x3ff00000
 801ddec:	40240000 	.word	0x40240000
 801ddf0:	401c0000 	.word	0x401c0000
 801ddf4:	40140000 	.word	0x40140000
 801ddf8:	4b70      	ldr	r3, [pc, #448]	@ (801dfbc <_dtoa_r+0x6fc>)
 801ddfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ddfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801de00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801de04:	4454      	add	r4, sl
 801de06:	2900      	cmp	r1, #0
 801de08:	d045      	beq.n	801de96 <_dtoa_r+0x5d6>
 801de0a:	496d      	ldr	r1, [pc, #436]	@ (801dfc0 <_dtoa_r+0x700>)
 801de0c:	2000      	movs	r0, #0
 801de0e:	f7e2 fcf5 	bl	80007fc <__aeabi_ddiv>
 801de12:	4633      	mov	r3, r6
 801de14:	462a      	mov	r2, r5
 801de16:	f7e2 fa0f 	bl	8000238 <__aeabi_dsub>
 801de1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801de1e:	4656      	mov	r6, sl
 801de20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de24:	f7e2 fe70 	bl	8000b08 <__aeabi_d2iz>
 801de28:	4605      	mov	r5, r0
 801de2a:	f7e2 fb53 	bl	80004d4 <__aeabi_i2d>
 801de2e:	4602      	mov	r2, r0
 801de30:	460b      	mov	r3, r1
 801de32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de36:	f7e2 f9ff 	bl	8000238 <__aeabi_dsub>
 801de3a:	3530      	adds	r5, #48	@ 0x30
 801de3c:	4602      	mov	r2, r0
 801de3e:	460b      	mov	r3, r1
 801de40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801de44:	f806 5b01 	strb.w	r5, [r6], #1
 801de48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801de4c:	f7e2 fe1e 	bl	8000a8c <__aeabi_dcmplt>
 801de50:	2800      	cmp	r0, #0
 801de52:	d163      	bne.n	801df1c <_dtoa_r+0x65c>
 801de54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de58:	495a      	ldr	r1, [pc, #360]	@ (801dfc4 <_dtoa_r+0x704>)
 801de5a:	2000      	movs	r0, #0
 801de5c:	f7e2 f9ec 	bl	8000238 <__aeabi_dsub>
 801de60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801de64:	f7e2 fe12 	bl	8000a8c <__aeabi_dcmplt>
 801de68:	2800      	cmp	r0, #0
 801de6a:	f040 8087 	bne.w	801df7c <_dtoa_r+0x6bc>
 801de6e:	42a6      	cmp	r6, r4
 801de70:	f43f af43 	beq.w	801dcfa <_dtoa_r+0x43a>
 801de74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801de78:	4b53      	ldr	r3, [pc, #332]	@ (801dfc8 <_dtoa_r+0x708>)
 801de7a:	2200      	movs	r2, #0
 801de7c:	f7e2 fb94 	bl	80005a8 <__aeabi_dmul>
 801de80:	4b51      	ldr	r3, [pc, #324]	@ (801dfc8 <_dtoa_r+0x708>)
 801de82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801de86:	2200      	movs	r2, #0
 801de88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de8c:	f7e2 fb8c 	bl	80005a8 <__aeabi_dmul>
 801de90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801de94:	e7c4      	b.n	801de20 <_dtoa_r+0x560>
 801de96:	4631      	mov	r1, r6
 801de98:	4628      	mov	r0, r5
 801de9a:	f7e2 fb85 	bl	80005a8 <__aeabi_dmul>
 801de9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801dea2:	9413      	str	r4, [sp, #76]	@ 0x4c
 801dea4:	4656      	mov	r6, sl
 801dea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801deaa:	f7e2 fe2d 	bl	8000b08 <__aeabi_d2iz>
 801deae:	4605      	mov	r5, r0
 801deb0:	f7e2 fb10 	bl	80004d4 <__aeabi_i2d>
 801deb4:	4602      	mov	r2, r0
 801deb6:	460b      	mov	r3, r1
 801deb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801debc:	f7e2 f9bc 	bl	8000238 <__aeabi_dsub>
 801dec0:	3530      	adds	r5, #48	@ 0x30
 801dec2:	f806 5b01 	strb.w	r5, [r6], #1
 801dec6:	4602      	mov	r2, r0
 801dec8:	460b      	mov	r3, r1
 801deca:	42a6      	cmp	r6, r4
 801decc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ded0:	f04f 0200 	mov.w	r2, #0
 801ded4:	d124      	bne.n	801df20 <_dtoa_r+0x660>
 801ded6:	4b3a      	ldr	r3, [pc, #232]	@ (801dfc0 <_dtoa_r+0x700>)
 801ded8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801dedc:	f7e2 f9ae 	bl	800023c <__adddf3>
 801dee0:	4602      	mov	r2, r0
 801dee2:	460b      	mov	r3, r1
 801dee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dee8:	f7e2 fdee 	bl	8000ac8 <__aeabi_dcmpgt>
 801deec:	2800      	cmp	r0, #0
 801deee:	d145      	bne.n	801df7c <_dtoa_r+0x6bc>
 801def0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801def4:	4932      	ldr	r1, [pc, #200]	@ (801dfc0 <_dtoa_r+0x700>)
 801def6:	2000      	movs	r0, #0
 801def8:	f7e2 f99e 	bl	8000238 <__aeabi_dsub>
 801defc:	4602      	mov	r2, r0
 801defe:	460b      	mov	r3, r1
 801df00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df04:	f7e2 fdc2 	bl	8000a8c <__aeabi_dcmplt>
 801df08:	2800      	cmp	r0, #0
 801df0a:	f43f aef6 	beq.w	801dcfa <_dtoa_r+0x43a>
 801df0e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801df10:	1e73      	subs	r3, r6, #1
 801df12:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801df18:	2b30      	cmp	r3, #48	@ 0x30
 801df1a:	d0f8      	beq.n	801df0e <_dtoa_r+0x64e>
 801df1c:	9f04      	ldr	r7, [sp, #16]
 801df1e:	e73f      	b.n	801dda0 <_dtoa_r+0x4e0>
 801df20:	4b29      	ldr	r3, [pc, #164]	@ (801dfc8 <_dtoa_r+0x708>)
 801df22:	f7e2 fb41 	bl	80005a8 <__aeabi_dmul>
 801df26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df2a:	e7bc      	b.n	801dea6 <_dtoa_r+0x5e6>
 801df2c:	d10c      	bne.n	801df48 <_dtoa_r+0x688>
 801df2e:	4b27      	ldr	r3, [pc, #156]	@ (801dfcc <_dtoa_r+0x70c>)
 801df30:	2200      	movs	r2, #0
 801df32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801df36:	f7e2 fb37 	bl	80005a8 <__aeabi_dmul>
 801df3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801df3e:	f7e2 fdb9 	bl	8000ab4 <__aeabi_dcmpge>
 801df42:	2800      	cmp	r0, #0
 801df44:	f000 815b 	beq.w	801e1fe <_dtoa_r+0x93e>
 801df48:	2400      	movs	r4, #0
 801df4a:	4625      	mov	r5, r4
 801df4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801df4e:	43db      	mvns	r3, r3
 801df50:	9304      	str	r3, [sp, #16]
 801df52:	4656      	mov	r6, sl
 801df54:	2700      	movs	r7, #0
 801df56:	4621      	mov	r1, r4
 801df58:	4658      	mov	r0, fp
 801df5a:	f000 fbb9 	bl	801e6d0 <_Bfree>
 801df5e:	2d00      	cmp	r5, #0
 801df60:	d0dc      	beq.n	801df1c <_dtoa_r+0x65c>
 801df62:	b12f      	cbz	r7, 801df70 <_dtoa_r+0x6b0>
 801df64:	42af      	cmp	r7, r5
 801df66:	d003      	beq.n	801df70 <_dtoa_r+0x6b0>
 801df68:	4639      	mov	r1, r7
 801df6a:	4658      	mov	r0, fp
 801df6c:	f000 fbb0 	bl	801e6d0 <_Bfree>
 801df70:	4629      	mov	r1, r5
 801df72:	4658      	mov	r0, fp
 801df74:	f000 fbac 	bl	801e6d0 <_Bfree>
 801df78:	e7d0      	b.n	801df1c <_dtoa_r+0x65c>
 801df7a:	9704      	str	r7, [sp, #16]
 801df7c:	4633      	mov	r3, r6
 801df7e:	461e      	mov	r6, r3
 801df80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801df84:	2a39      	cmp	r2, #57	@ 0x39
 801df86:	d107      	bne.n	801df98 <_dtoa_r+0x6d8>
 801df88:	459a      	cmp	sl, r3
 801df8a:	d1f8      	bne.n	801df7e <_dtoa_r+0x6be>
 801df8c:	9a04      	ldr	r2, [sp, #16]
 801df8e:	3201      	adds	r2, #1
 801df90:	9204      	str	r2, [sp, #16]
 801df92:	2230      	movs	r2, #48	@ 0x30
 801df94:	f88a 2000 	strb.w	r2, [sl]
 801df98:	781a      	ldrb	r2, [r3, #0]
 801df9a:	3201      	adds	r2, #1
 801df9c:	701a      	strb	r2, [r3, #0]
 801df9e:	e7bd      	b.n	801df1c <_dtoa_r+0x65c>
 801dfa0:	4b09      	ldr	r3, [pc, #36]	@ (801dfc8 <_dtoa_r+0x708>)
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	f7e2 fb00 	bl	80005a8 <__aeabi_dmul>
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	2300      	movs	r3, #0
 801dfac:	4604      	mov	r4, r0
 801dfae:	460d      	mov	r5, r1
 801dfb0:	f7e2 fd62 	bl	8000a78 <__aeabi_dcmpeq>
 801dfb4:	2800      	cmp	r0, #0
 801dfb6:	f43f aebc 	beq.w	801dd32 <_dtoa_r+0x472>
 801dfba:	e6f1      	b.n	801dda0 <_dtoa_r+0x4e0>
 801dfbc:	080206e8 	.word	0x080206e8
 801dfc0:	3fe00000 	.word	0x3fe00000
 801dfc4:	3ff00000 	.word	0x3ff00000
 801dfc8:	40240000 	.word	0x40240000
 801dfcc:	40140000 	.word	0x40140000
 801dfd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dfd2:	2a00      	cmp	r2, #0
 801dfd4:	f000 80db 	beq.w	801e18e <_dtoa_r+0x8ce>
 801dfd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801dfda:	2a01      	cmp	r2, #1
 801dfdc:	f300 80bf 	bgt.w	801e15e <_dtoa_r+0x89e>
 801dfe0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dfe2:	2a00      	cmp	r2, #0
 801dfe4:	f000 80b7 	beq.w	801e156 <_dtoa_r+0x896>
 801dfe8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801dfec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dfee:	4646      	mov	r6, r8
 801dff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dff2:	2101      	movs	r1, #1
 801dff4:	441a      	add	r2, r3
 801dff6:	4658      	mov	r0, fp
 801dff8:	4498      	add	r8, r3
 801dffa:	9209      	str	r2, [sp, #36]	@ 0x24
 801dffc:	f000 fc1c 	bl	801e838 <__i2b>
 801e000:	4605      	mov	r5, r0
 801e002:	b15e      	cbz	r6, 801e01c <_dtoa_r+0x75c>
 801e004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e006:	2b00      	cmp	r3, #0
 801e008:	dd08      	ble.n	801e01c <_dtoa_r+0x75c>
 801e00a:	42b3      	cmp	r3, r6
 801e00c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e00e:	bfa8      	it	ge
 801e010:	4633      	movge	r3, r6
 801e012:	eba8 0803 	sub.w	r8, r8, r3
 801e016:	1af6      	subs	r6, r6, r3
 801e018:	1ad3      	subs	r3, r2, r3
 801e01a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e01e:	b1f3      	cbz	r3, 801e05e <_dtoa_r+0x79e>
 801e020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e022:	2b00      	cmp	r3, #0
 801e024:	f000 80b7 	beq.w	801e196 <_dtoa_r+0x8d6>
 801e028:	b18c      	cbz	r4, 801e04e <_dtoa_r+0x78e>
 801e02a:	4629      	mov	r1, r5
 801e02c:	4622      	mov	r2, r4
 801e02e:	4658      	mov	r0, fp
 801e030:	f000 fcc2 	bl	801e9b8 <__pow5mult>
 801e034:	464a      	mov	r2, r9
 801e036:	4601      	mov	r1, r0
 801e038:	4605      	mov	r5, r0
 801e03a:	4658      	mov	r0, fp
 801e03c:	f000 fc12 	bl	801e864 <__multiply>
 801e040:	4649      	mov	r1, r9
 801e042:	9004      	str	r0, [sp, #16]
 801e044:	4658      	mov	r0, fp
 801e046:	f000 fb43 	bl	801e6d0 <_Bfree>
 801e04a:	9b04      	ldr	r3, [sp, #16]
 801e04c:	4699      	mov	r9, r3
 801e04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e050:	1b1a      	subs	r2, r3, r4
 801e052:	d004      	beq.n	801e05e <_dtoa_r+0x79e>
 801e054:	4649      	mov	r1, r9
 801e056:	4658      	mov	r0, fp
 801e058:	f000 fcae 	bl	801e9b8 <__pow5mult>
 801e05c:	4681      	mov	r9, r0
 801e05e:	2101      	movs	r1, #1
 801e060:	4658      	mov	r0, fp
 801e062:	f000 fbe9 	bl	801e838 <__i2b>
 801e066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e068:	4604      	mov	r4, r0
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	f000 81c9 	beq.w	801e402 <_dtoa_r+0xb42>
 801e070:	461a      	mov	r2, r3
 801e072:	4601      	mov	r1, r0
 801e074:	4658      	mov	r0, fp
 801e076:	f000 fc9f 	bl	801e9b8 <__pow5mult>
 801e07a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e07c:	2b01      	cmp	r3, #1
 801e07e:	4604      	mov	r4, r0
 801e080:	f300 808f 	bgt.w	801e1a2 <_dtoa_r+0x8e2>
 801e084:	9b02      	ldr	r3, [sp, #8]
 801e086:	2b00      	cmp	r3, #0
 801e088:	f040 8087 	bne.w	801e19a <_dtoa_r+0x8da>
 801e08c:	9b03      	ldr	r3, [sp, #12]
 801e08e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e092:	2b00      	cmp	r3, #0
 801e094:	f040 8083 	bne.w	801e19e <_dtoa_r+0x8de>
 801e098:	9b03      	ldr	r3, [sp, #12]
 801e09a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e09e:	0d1b      	lsrs	r3, r3, #20
 801e0a0:	051b      	lsls	r3, r3, #20
 801e0a2:	b12b      	cbz	r3, 801e0b0 <_dtoa_r+0x7f0>
 801e0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0a6:	3301      	adds	r3, #1
 801e0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0aa:	f108 0801 	add.w	r8, r8, #1
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	f000 81aa 	beq.w	801e40e <_dtoa_r+0xb4e>
 801e0ba:	6923      	ldr	r3, [r4, #16]
 801e0bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e0c0:	6918      	ldr	r0, [r3, #16]
 801e0c2:	f000 fb6d 	bl	801e7a0 <__hi0bits>
 801e0c6:	f1c0 0020 	rsb	r0, r0, #32
 801e0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0cc:	4418      	add	r0, r3
 801e0ce:	f010 001f 	ands.w	r0, r0, #31
 801e0d2:	d071      	beq.n	801e1b8 <_dtoa_r+0x8f8>
 801e0d4:	f1c0 0320 	rsb	r3, r0, #32
 801e0d8:	2b04      	cmp	r3, #4
 801e0da:	dd65      	ble.n	801e1a8 <_dtoa_r+0x8e8>
 801e0dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0de:	f1c0 001c 	rsb	r0, r0, #28
 801e0e2:	4403      	add	r3, r0
 801e0e4:	4480      	add	r8, r0
 801e0e6:	4406      	add	r6, r0
 801e0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0ea:	f1b8 0f00 	cmp.w	r8, #0
 801e0ee:	dd05      	ble.n	801e0fc <_dtoa_r+0x83c>
 801e0f0:	4649      	mov	r1, r9
 801e0f2:	4642      	mov	r2, r8
 801e0f4:	4658      	mov	r0, fp
 801e0f6:	f000 fcb9 	bl	801ea6c <__lshift>
 801e0fa:	4681      	mov	r9, r0
 801e0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	dd05      	ble.n	801e10e <_dtoa_r+0x84e>
 801e102:	4621      	mov	r1, r4
 801e104:	461a      	mov	r2, r3
 801e106:	4658      	mov	r0, fp
 801e108:	f000 fcb0 	bl	801ea6c <__lshift>
 801e10c:	4604      	mov	r4, r0
 801e10e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e110:	2b00      	cmp	r3, #0
 801e112:	d053      	beq.n	801e1bc <_dtoa_r+0x8fc>
 801e114:	4621      	mov	r1, r4
 801e116:	4648      	mov	r0, r9
 801e118:	f000 fd14 	bl	801eb44 <__mcmp>
 801e11c:	2800      	cmp	r0, #0
 801e11e:	da4d      	bge.n	801e1bc <_dtoa_r+0x8fc>
 801e120:	1e7b      	subs	r3, r7, #1
 801e122:	9304      	str	r3, [sp, #16]
 801e124:	4649      	mov	r1, r9
 801e126:	2300      	movs	r3, #0
 801e128:	220a      	movs	r2, #10
 801e12a:	4658      	mov	r0, fp
 801e12c:	f000 faf2 	bl	801e714 <__multadd>
 801e130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e132:	4681      	mov	r9, r0
 801e134:	2b00      	cmp	r3, #0
 801e136:	f000 816c 	beq.w	801e412 <_dtoa_r+0xb52>
 801e13a:	2300      	movs	r3, #0
 801e13c:	4629      	mov	r1, r5
 801e13e:	220a      	movs	r2, #10
 801e140:	4658      	mov	r0, fp
 801e142:	f000 fae7 	bl	801e714 <__multadd>
 801e146:	9b08      	ldr	r3, [sp, #32]
 801e148:	2b00      	cmp	r3, #0
 801e14a:	4605      	mov	r5, r0
 801e14c:	dc61      	bgt.n	801e212 <_dtoa_r+0x952>
 801e14e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e150:	2b02      	cmp	r3, #2
 801e152:	dc3b      	bgt.n	801e1cc <_dtoa_r+0x90c>
 801e154:	e05d      	b.n	801e212 <_dtoa_r+0x952>
 801e156:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e158:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e15c:	e746      	b.n	801dfec <_dtoa_r+0x72c>
 801e15e:	9b07      	ldr	r3, [sp, #28]
 801e160:	1e5c      	subs	r4, r3, #1
 801e162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e164:	42a3      	cmp	r3, r4
 801e166:	bfbf      	itttt	lt
 801e168:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e16a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801e16c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e16e:	1ae3      	sublt	r3, r4, r3
 801e170:	bfb4      	ite	lt
 801e172:	18d2      	addlt	r2, r2, r3
 801e174:	1b1c      	subge	r4, r3, r4
 801e176:	9b07      	ldr	r3, [sp, #28]
 801e178:	bfbc      	itt	lt
 801e17a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801e17c:	2400      	movlt	r4, #0
 801e17e:	2b00      	cmp	r3, #0
 801e180:	bfb5      	itete	lt
 801e182:	eba8 0603 	sublt.w	r6, r8, r3
 801e186:	9b07      	ldrge	r3, [sp, #28]
 801e188:	2300      	movlt	r3, #0
 801e18a:	4646      	movge	r6, r8
 801e18c:	e730      	b.n	801dff0 <_dtoa_r+0x730>
 801e18e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e190:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e192:	4646      	mov	r6, r8
 801e194:	e735      	b.n	801e002 <_dtoa_r+0x742>
 801e196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e198:	e75c      	b.n	801e054 <_dtoa_r+0x794>
 801e19a:	2300      	movs	r3, #0
 801e19c:	e788      	b.n	801e0b0 <_dtoa_r+0x7f0>
 801e19e:	9b02      	ldr	r3, [sp, #8]
 801e1a0:	e786      	b.n	801e0b0 <_dtoa_r+0x7f0>
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801e1a6:	e788      	b.n	801e0ba <_dtoa_r+0x7fa>
 801e1a8:	d09f      	beq.n	801e0ea <_dtoa_r+0x82a>
 801e1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1ac:	331c      	adds	r3, #28
 801e1ae:	441a      	add	r2, r3
 801e1b0:	4498      	add	r8, r3
 801e1b2:	441e      	add	r6, r3
 801e1b4:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1b6:	e798      	b.n	801e0ea <_dtoa_r+0x82a>
 801e1b8:	4603      	mov	r3, r0
 801e1ba:	e7f6      	b.n	801e1aa <_dtoa_r+0x8ea>
 801e1bc:	9b07      	ldr	r3, [sp, #28]
 801e1be:	9704      	str	r7, [sp, #16]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	dc20      	bgt.n	801e206 <_dtoa_r+0x946>
 801e1c4:	9308      	str	r3, [sp, #32]
 801e1c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e1c8:	2b02      	cmp	r3, #2
 801e1ca:	dd1e      	ble.n	801e20a <_dtoa_r+0x94a>
 801e1cc:	9b08      	ldr	r3, [sp, #32]
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	f47f aebc 	bne.w	801df4c <_dtoa_r+0x68c>
 801e1d4:	4621      	mov	r1, r4
 801e1d6:	2205      	movs	r2, #5
 801e1d8:	4658      	mov	r0, fp
 801e1da:	f000 fa9b 	bl	801e714 <__multadd>
 801e1de:	4601      	mov	r1, r0
 801e1e0:	4604      	mov	r4, r0
 801e1e2:	4648      	mov	r0, r9
 801e1e4:	f000 fcae 	bl	801eb44 <__mcmp>
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	f77f aeaf 	ble.w	801df4c <_dtoa_r+0x68c>
 801e1ee:	4656      	mov	r6, sl
 801e1f0:	2331      	movs	r3, #49	@ 0x31
 801e1f2:	f806 3b01 	strb.w	r3, [r6], #1
 801e1f6:	9b04      	ldr	r3, [sp, #16]
 801e1f8:	3301      	adds	r3, #1
 801e1fa:	9304      	str	r3, [sp, #16]
 801e1fc:	e6aa      	b.n	801df54 <_dtoa_r+0x694>
 801e1fe:	9c07      	ldr	r4, [sp, #28]
 801e200:	9704      	str	r7, [sp, #16]
 801e202:	4625      	mov	r5, r4
 801e204:	e7f3      	b.n	801e1ee <_dtoa_r+0x92e>
 801e206:	9b07      	ldr	r3, [sp, #28]
 801e208:	9308      	str	r3, [sp, #32]
 801e20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	f000 8104 	beq.w	801e41a <_dtoa_r+0xb5a>
 801e212:	2e00      	cmp	r6, #0
 801e214:	dd05      	ble.n	801e222 <_dtoa_r+0x962>
 801e216:	4629      	mov	r1, r5
 801e218:	4632      	mov	r2, r6
 801e21a:	4658      	mov	r0, fp
 801e21c:	f000 fc26 	bl	801ea6c <__lshift>
 801e220:	4605      	mov	r5, r0
 801e222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e224:	2b00      	cmp	r3, #0
 801e226:	d05a      	beq.n	801e2de <_dtoa_r+0xa1e>
 801e228:	6869      	ldr	r1, [r5, #4]
 801e22a:	4658      	mov	r0, fp
 801e22c:	f000 fa10 	bl	801e650 <_Balloc>
 801e230:	4606      	mov	r6, r0
 801e232:	b928      	cbnz	r0, 801e240 <_dtoa_r+0x980>
 801e234:	4b84      	ldr	r3, [pc, #528]	@ (801e448 <_dtoa_r+0xb88>)
 801e236:	4602      	mov	r2, r0
 801e238:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e23c:	f7ff bb54 	b.w	801d8e8 <_dtoa_r+0x28>
 801e240:	692a      	ldr	r2, [r5, #16]
 801e242:	3202      	adds	r2, #2
 801e244:	0092      	lsls	r2, r2, #2
 801e246:	f105 010c 	add.w	r1, r5, #12
 801e24a:	300c      	adds	r0, #12
 801e24c:	f000 fffc 	bl	801f248 <memcpy>
 801e250:	2201      	movs	r2, #1
 801e252:	4631      	mov	r1, r6
 801e254:	4658      	mov	r0, fp
 801e256:	f000 fc09 	bl	801ea6c <__lshift>
 801e25a:	f10a 0301 	add.w	r3, sl, #1
 801e25e:	9307      	str	r3, [sp, #28]
 801e260:	9b08      	ldr	r3, [sp, #32]
 801e262:	4453      	add	r3, sl
 801e264:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e266:	9b02      	ldr	r3, [sp, #8]
 801e268:	f003 0301 	and.w	r3, r3, #1
 801e26c:	462f      	mov	r7, r5
 801e26e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e270:	4605      	mov	r5, r0
 801e272:	9b07      	ldr	r3, [sp, #28]
 801e274:	4621      	mov	r1, r4
 801e276:	3b01      	subs	r3, #1
 801e278:	4648      	mov	r0, r9
 801e27a:	9302      	str	r3, [sp, #8]
 801e27c:	f7ff fa95 	bl	801d7aa <quorem>
 801e280:	4639      	mov	r1, r7
 801e282:	9008      	str	r0, [sp, #32]
 801e284:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e288:	4648      	mov	r0, r9
 801e28a:	f000 fc5b 	bl	801eb44 <__mcmp>
 801e28e:	462a      	mov	r2, r5
 801e290:	9009      	str	r0, [sp, #36]	@ 0x24
 801e292:	4621      	mov	r1, r4
 801e294:	4658      	mov	r0, fp
 801e296:	f000 fc71 	bl	801eb7c <__mdiff>
 801e29a:	68c2      	ldr	r2, [r0, #12]
 801e29c:	4606      	mov	r6, r0
 801e29e:	bb02      	cbnz	r2, 801e2e2 <_dtoa_r+0xa22>
 801e2a0:	4601      	mov	r1, r0
 801e2a2:	4648      	mov	r0, r9
 801e2a4:	f000 fc4e 	bl	801eb44 <__mcmp>
 801e2a8:	4602      	mov	r2, r0
 801e2aa:	4631      	mov	r1, r6
 801e2ac:	4658      	mov	r0, fp
 801e2ae:	920c      	str	r2, [sp, #48]	@ 0x30
 801e2b0:	f000 fa0e 	bl	801e6d0 <_Bfree>
 801e2b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e2b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e2b8:	9e07      	ldr	r6, [sp, #28]
 801e2ba:	ea43 0102 	orr.w	r1, r3, r2
 801e2be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2c0:	4319      	orrs	r1, r3
 801e2c2:	d110      	bne.n	801e2e6 <_dtoa_r+0xa26>
 801e2c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e2c8:	d029      	beq.n	801e31e <_dtoa_r+0xa5e>
 801e2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	dd02      	ble.n	801e2d6 <_dtoa_r+0xa16>
 801e2d0:	9b08      	ldr	r3, [sp, #32]
 801e2d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e2d6:	9b02      	ldr	r3, [sp, #8]
 801e2d8:	f883 8000 	strb.w	r8, [r3]
 801e2dc:	e63b      	b.n	801df56 <_dtoa_r+0x696>
 801e2de:	4628      	mov	r0, r5
 801e2e0:	e7bb      	b.n	801e25a <_dtoa_r+0x99a>
 801e2e2:	2201      	movs	r2, #1
 801e2e4:	e7e1      	b.n	801e2aa <_dtoa_r+0x9ea>
 801e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	db04      	blt.n	801e2f6 <_dtoa_r+0xa36>
 801e2ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801e2ee:	430b      	orrs	r3, r1
 801e2f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e2f2:	430b      	orrs	r3, r1
 801e2f4:	d120      	bne.n	801e338 <_dtoa_r+0xa78>
 801e2f6:	2a00      	cmp	r2, #0
 801e2f8:	dded      	ble.n	801e2d6 <_dtoa_r+0xa16>
 801e2fa:	4649      	mov	r1, r9
 801e2fc:	2201      	movs	r2, #1
 801e2fe:	4658      	mov	r0, fp
 801e300:	f000 fbb4 	bl	801ea6c <__lshift>
 801e304:	4621      	mov	r1, r4
 801e306:	4681      	mov	r9, r0
 801e308:	f000 fc1c 	bl	801eb44 <__mcmp>
 801e30c:	2800      	cmp	r0, #0
 801e30e:	dc03      	bgt.n	801e318 <_dtoa_r+0xa58>
 801e310:	d1e1      	bne.n	801e2d6 <_dtoa_r+0xa16>
 801e312:	f018 0f01 	tst.w	r8, #1
 801e316:	d0de      	beq.n	801e2d6 <_dtoa_r+0xa16>
 801e318:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e31c:	d1d8      	bne.n	801e2d0 <_dtoa_r+0xa10>
 801e31e:	9a02      	ldr	r2, [sp, #8]
 801e320:	2339      	movs	r3, #57	@ 0x39
 801e322:	7013      	strb	r3, [r2, #0]
 801e324:	4633      	mov	r3, r6
 801e326:	461e      	mov	r6, r3
 801e328:	3b01      	subs	r3, #1
 801e32a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e32e:	2a39      	cmp	r2, #57	@ 0x39
 801e330:	d052      	beq.n	801e3d8 <_dtoa_r+0xb18>
 801e332:	3201      	adds	r2, #1
 801e334:	701a      	strb	r2, [r3, #0]
 801e336:	e60e      	b.n	801df56 <_dtoa_r+0x696>
 801e338:	2a00      	cmp	r2, #0
 801e33a:	dd07      	ble.n	801e34c <_dtoa_r+0xa8c>
 801e33c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e340:	d0ed      	beq.n	801e31e <_dtoa_r+0xa5e>
 801e342:	9a02      	ldr	r2, [sp, #8]
 801e344:	f108 0301 	add.w	r3, r8, #1
 801e348:	7013      	strb	r3, [r2, #0]
 801e34a:	e604      	b.n	801df56 <_dtoa_r+0x696>
 801e34c:	9b07      	ldr	r3, [sp, #28]
 801e34e:	9a07      	ldr	r2, [sp, #28]
 801e350:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e356:	4293      	cmp	r3, r2
 801e358:	d028      	beq.n	801e3ac <_dtoa_r+0xaec>
 801e35a:	4649      	mov	r1, r9
 801e35c:	2300      	movs	r3, #0
 801e35e:	220a      	movs	r2, #10
 801e360:	4658      	mov	r0, fp
 801e362:	f000 f9d7 	bl	801e714 <__multadd>
 801e366:	42af      	cmp	r7, r5
 801e368:	4681      	mov	r9, r0
 801e36a:	f04f 0300 	mov.w	r3, #0
 801e36e:	f04f 020a 	mov.w	r2, #10
 801e372:	4639      	mov	r1, r7
 801e374:	4658      	mov	r0, fp
 801e376:	d107      	bne.n	801e388 <_dtoa_r+0xac8>
 801e378:	f000 f9cc 	bl	801e714 <__multadd>
 801e37c:	4607      	mov	r7, r0
 801e37e:	4605      	mov	r5, r0
 801e380:	9b07      	ldr	r3, [sp, #28]
 801e382:	3301      	adds	r3, #1
 801e384:	9307      	str	r3, [sp, #28]
 801e386:	e774      	b.n	801e272 <_dtoa_r+0x9b2>
 801e388:	f000 f9c4 	bl	801e714 <__multadd>
 801e38c:	4629      	mov	r1, r5
 801e38e:	4607      	mov	r7, r0
 801e390:	2300      	movs	r3, #0
 801e392:	220a      	movs	r2, #10
 801e394:	4658      	mov	r0, fp
 801e396:	f000 f9bd 	bl	801e714 <__multadd>
 801e39a:	4605      	mov	r5, r0
 801e39c:	e7f0      	b.n	801e380 <_dtoa_r+0xac0>
 801e39e:	9b08      	ldr	r3, [sp, #32]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	bfcc      	ite	gt
 801e3a4:	461e      	movgt	r6, r3
 801e3a6:	2601      	movle	r6, #1
 801e3a8:	4456      	add	r6, sl
 801e3aa:	2700      	movs	r7, #0
 801e3ac:	4649      	mov	r1, r9
 801e3ae:	2201      	movs	r2, #1
 801e3b0:	4658      	mov	r0, fp
 801e3b2:	f000 fb5b 	bl	801ea6c <__lshift>
 801e3b6:	4621      	mov	r1, r4
 801e3b8:	4681      	mov	r9, r0
 801e3ba:	f000 fbc3 	bl	801eb44 <__mcmp>
 801e3be:	2800      	cmp	r0, #0
 801e3c0:	dcb0      	bgt.n	801e324 <_dtoa_r+0xa64>
 801e3c2:	d102      	bne.n	801e3ca <_dtoa_r+0xb0a>
 801e3c4:	f018 0f01 	tst.w	r8, #1
 801e3c8:	d1ac      	bne.n	801e324 <_dtoa_r+0xa64>
 801e3ca:	4633      	mov	r3, r6
 801e3cc:	461e      	mov	r6, r3
 801e3ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e3d2:	2a30      	cmp	r2, #48	@ 0x30
 801e3d4:	d0fa      	beq.n	801e3cc <_dtoa_r+0xb0c>
 801e3d6:	e5be      	b.n	801df56 <_dtoa_r+0x696>
 801e3d8:	459a      	cmp	sl, r3
 801e3da:	d1a4      	bne.n	801e326 <_dtoa_r+0xa66>
 801e3dc:	9b04      	ldr	r3, [sp, #16]
 801e3de:	3301      	adds	r3, #1
 801e3e0:	9304      	str	r3, [sp, #16]
 801e3e2:	2331      	movs	r3, #49	@ 0x31
 801e3e4:	f88a 3000 	strb.w	r3, [sl]
 801e3e8:	e5b5      	b.n	801df56 <_dtoa_r+0x696>
 801e3ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e44c <_dtoa_r+0xb8c>
 801e3f0:	b11b      	cbz	r3, 801e3fa <_dtoa_r+0xb3a>
 801e3f2:	f10a 0308 	add.w	r3, sl, #8
 801e3f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e3f8:	6013      	str	r3, [r2, #0]
 801e3fa:	4650      	mov	r0, sl
 801e3fc:	b017      	add	sp, #92	@ 0x5c
 801e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e404:	2b01      	cmp	r3, #1
 801e406:	f77f ae3d 	ble.w	801e084 <_dtoa_r+0x7c4>
 801e40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e40c:	930a      	str	r3, [sp, #40]	@ 0x28
 801e40e:	2001      	movs	r0, #1
 801e410:	e65b      	b.n	801e0ca <_dtoa_r+0x80a>
 801e412:	9b08      	ldr	r3, [sp, #32]
 801e414:	2b00      	cmp	r3, #0
 801e416:	f77f aed6 	ble.w	801e1c6 <_dtoa_r+0x906>
 801e41a:	4656      	mov	r6, sl
 801e41c:	4621      	mov	r1, r4
 801e41e:	4648      	mov	r0, r9
 801e420:	f7ff f9c3 	bl	801d7aa <quorem>
 801e424:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e428:	f806 8b01 	strb.w	r8, [r6], #1
 801e42c:	9b08      	ldr	r3, [sp, #32]
 801e42e:	eba6 020a 	sub.w	r2, r6, sl
 801e432:	4293      	cmp	r3, r2
 801e434:	ddb3      	ble.n	801e39e <_dtoa_r+0xade>
 801e436:	4649      	mov	r1, r9
 801e438:	2300      	movs	r3, #0
 801e43a:	220a      	movs	r2, #10
 801e43c:	4658      	mov	r0, fp
 801e43e:	f000 f969 	bl	801e714 <__multadd>
 801e442:	4681      	mov	r9, r0
 801e444:	e7ea      	b.n	801e41c <_dtoa_r+0xb5c>
 801e446:	bf00      	nop
 801e448:	08020648 	.word	0x08020648
 801e44c:	080205cc 	.word	0x080205cc

0801e450 <_free_r>:
 801e450:	b538      	push	{r3, r4, r5, lr}
 801e452:	4605      	mov	r5, r0
 801e454:	2900      	cmp	r1, #0
 801e456:	d041      	beq.n	801e4dc <_free_r+0x8c>
 801e458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e45c:	1f0c      	subs	r4, r1, #4
 801e45e:	2b00      	cmp	r3, #0
 801e460:	bfb8      	it	lt
 801e462:	18e4      	addlt	r4, r4, r3
 801e464:	f000 f8e8 	bl	801e638 <__malloc_lock>
 801e468:	4a1d      	ldr	r2, [pc, #116]	@ (801e4e0 <_free_r+0x90>)
 801e46a:	6813      	ldr	r3, [r2, #0]
 801e46c:	b933      	cbnz	r3, 801e47c <_free_r+0x2c>
 801e46e:	6063      	str	r3, [r4, #4]
 801e470:	6014      	str	r4, [r2, #0]
 801e472:	4628      	mov	r0, r5
 801e474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e478:	f000 b8e4 	b.w	801e644 <__malloc_unlock>
 801e47c:	42a3      	cmp	r3, r4
 801e47e:	d908      	bls.n	801e492 <_free_r+0x42>
 801e480:	6820      	ldr	r0, [r4, #0]
 801e482:	1821      	adds	r1, r4, r0
 801e484:	428b      	cmp	r3, r1
 801e486:	bf01      	itttt	eq
 801e488:	6819      	ldreq	r1, [r3, #0]
 801e48a:	685b      	ldreq	r3, [r3, #4]
 801e48c:	1809      	addeq	r1, r1, r0
 801e48e:	6021      	streq	r1, [r4, #0]
 801e490:	e7ed      	b.n	801e46e <_free_r+0x1e>
 801e492:	461a      	mov	r2, r3
 801e494:	685b      	ldr	r3, [r3, #4]
 801e496:	b10b      	cbz	r3, 801e49c <_free_r+0x4c>
 801e498:	42a3      	cmp	r3, r4
 801e49a:	d9fa      	bls.n	801e492 <_free_r+0x42>
 801e49c:	6811      	ldr	r1, [r2, #0]
 801e49e:	1850      	adds	r0, r2, r1
 801e4a0:	42a0      	cmp	r0, r4
 801e4a2:	d10b      	bne.n	801e4bc <_free_r+0x6c>
 801e4a4:	6820      	ldr	r0, [r4, #0]
 801e4a6:	4401      	add	r1, r0
 801e4a8:	1850      	adds	r0, r2, r1
 801e4aa:	4283      	cmp	r3, r0
 801e4ac:	6011      	str	r1, [r2, #0]
 801e4ae:	d1e0      	bne.n	801e472 <_free_r+0x22>
 801e4b0:	6818      	ldr	r0, [r3, #0]
 801e4b2:	685b      	ldr	r3, [r3, #4]
 801e4b4:	6053      	str	r3, [r2, #4]
 801e4b6:	4408      	add	r0, r1
 801e4b8:	6010      	str	r0, [r2, #0]
 801e4ba:	e7da      	b.n	801e472 <_free_r+0x22>
 801e4bc:	d902      	bls.n	801e4c4 <_free_r+0x74>
 801e4be:	230c      	movs	r3, #12
 801e4c0:	602b      	str	r3, [r5, #0]
 801e4c2:	e7d6      	b.n	801e472 <_free_r+0x22>
 801e4c4:	6820      	ldr	r0, [r4, #0]
 801e4c6:	1821      	adds	r1, r4, r0
 801e4c8:	428b      	cmp	r3, r1
 801e4ca:	bf04      	itt	eq
 801e4cc:	6819      	ldreq	r1, [r3, #0]
 801e4ce:	685b      	ldreq	r3, [r3, #4]
 801e4d0:	6063      	str	r3, [r4, #4]
 801e4d2:	bf04      	itt	eq
 801e4d4:	1809      	addeq	r1, r1, r0
 801e4d6:	6021      	streq	r1, [r4, #0]
 801e4d8:	6054      	str	r4, [r2, #4]
 801e4da:	e7ca      	b.n	801e472 <_free_r+0x22>
 801e4dc:	bd38      	pop	{r3, r4, r5, pc}
 801e4de:	bf00      	nop
 801e4e0:	20002518 	.word	0x20002518

0801e4e4 <malloc>:
 801e4e4:	4b02      	ldr	r3, [pc, #8]	@ (801e4f0 <malloc+0xc>)
 801e4e6:	4601      	mov	r1, r0
 801e4e8:	6818      	ldr	r0, [r3, #0]
 801e4ea:	f000 b825 	b.w	801e538 <_malloc_r>
 801e4ee:	bf00      	nop
 801e4f0:	20000164 	.word	0x20000164

0801e4f4 <sbrk_aligned>:
 801e4f4:	b570      	push	{r4, r5, r6, lr}
 801e4f6:	4e0f      	ldr	r6, [pc, #60]	@ (801e534 <sbrk_aligned+0x40>)
 801e4f8:	460c      	mov	r4, r1
 801e4fa:	6831      	ldr	r1, [r6, #0]
 801e4fc:	4605      	mov	r5, r0
 801e4fe:	b911      	cbnz	r1, 801e506 <sbrk_aligned+0x12>
 801e500:	f000 fe92 	bl	801f228 <_sbrk_r>
 801e504:	6030      	str	r0, [r6, #0]
 801e506:	4621      	mov	r1, r4
 801e508:	4628      	mov	r0, r5
 801e50a:	f000 fe8d 	bl	801f228 <_sbrk_r>
 801e50e:	1c43      	adds	r3, r0, #1
 801e510:	d103      	bne.n	801e51a <sbrk_aligned+0x26>
 801e512:	f04f 34ff 	mov.w	r4, #4294967295
 801e516:	4620      	mov	r0, r4
 801e518:	bd70      	pop	{r4, r5, r6, pc}
 801e51a:	1cc4      	adds	r4, r0, #3
 801e51c:	f024 0403 	bic.w	r4, r4, #3
 801e520:	42a0      	cmp	r0, r4
 801e522:	d0f8      	beq.n	801e516 <sbrk_aligned+0x22>
 801e524:	1a21      	subs	r1, r4, r0
 801e526:	4628      	mov	r0, r5
 801e528:	f000 fe7e 	bl	801f228 <_sbrk_r>
 801e52c:	3001      	adds	r0, #1
 801e52e:	d1f2      	bne.n	801e516 <sbrk_aligned+0x22>
 801e530:	e7ef      	b.n	801e512 <sbrk_aligned+0x1e>
 801e532:	bf00      	nop
 801e534:	20002514 	.word	0x20002514

0801e538 <_malloc_r>:
 801e538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e53c:	1ccd      	adds	r5, r1, #3
 801e53e:	f025 0503 	bic.w	r5, r5, #3
 801e542:	3508      	adds	r5, #8
 801e544:	2d0c      	cmp	r5, #12
 801e546:	bf38      	it	cc
 801e548:	250c      	movcc	r5, #12
 801e54a:	2d00      	cmp	r5, #0
 801e54c:	4606      	mov	r6, r0
 801e54e:	db01      	blt.n	801e554 <_malloc_r+0x1c>
 801e550:	42a9      	cmp	r1, r5
 801e552:	d904      	bls.n	801e55e <_malloc_r+0x26>
 801e554:	230c      	movs	r3, #12
 801e556:	6033      	str	r3, [r6, #0]
 801e558:	2000      	movs	r0, #0
 801e55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e55e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e634 <_malloc_r+0xfc>
 801e562:	f000 f869 	bl	801e638 <__malloc_lock>
 801e566:	f8d8 3000 	ldr.w	r3, [r8]
 801e56a:	461c      	mov	r4, r3
 801e56c:	bb44      	cbnz	r4, 801e5c0 <_malloc_r+0x88>
 801e56e:	4629      	mov	r1, r5
 801e570:	4630      	mov	r0, r6
 801e572:	f7ff ffbf 	bl	801e4f4 <sbrk_aligned>
 801e576:	1c43      	adds	r3, r0, #1
 801e578:	4604      	mov	r4, r0
 801e57a:	d158      	bne.n	801e62e <_malloc_r+0xf6>
 801e57c:	f8d8 4000 	ldr.w	r4, [r8]
 801e580:	4627      	mov	r7, r4
 801e582:	2f00      	cmp	r7, #0
 801e584:	d143      	bne.n	801e60e <_malloc_r+0xd6>
 801e586:	2c00      	cmp	r4, #0
 801e588:	d04b      	beq.n	801e622 <_malloc_r+0xea>
 801e58a:	6823      	ldr	r3, [r4, #0]
 801e58c:	4639      	mov	r1, r7
 801e58e:	4630      	mov	r0, r6
 801e590:	eb04 0903 	add.w	r9, r4, r3
 801e594:	f000 fe48 	bl	801f228 <_sbrk_r>
 801e598:	4581      	cmp	r9, r0
 801e59a:	d142      	bne.n	801e622 <_malloc_r+0xea>
 801e59c:	6821      	ldr	r1, [r4, #0]
 801e59e:	1a6d      	subs	r5, r5, r1
 801e5a0:	4629      	mov	r1, r5
 801e5a2:	4630      	mov	r0, r6
 801e5a4:	f7ff ffa6 	bl	801e4f4 <sbrk_aligned>
 801e5a8:	3001      	adds	r0, #1
 801e5aa:	d03a      	beq.n	801e622 <_malloc_r+0xea>
 801e5ac:	6823      	ldr	r3, [r4, #0]
 801e5ae:	442b      	add	r3, r5
 801e5b0:	6023      	str	r3, [r4, #0]
 801e5b2:	f8d8 3000 	ldr.w	r3, [r8]
 801e5b6:	685a      	ldr	r2, [r3, #4]
 801e5b8:	bb62      	cbnz	r2, 801e614 <_malloc_r+0xdc>
 801e5ba:	f8c8 7000 	str.w	r7, [r8]
 801e5be:	e00f      	b.n	801e5e0 <_malloc_r+0xa8>
 801e5c0:	6822      	ldr	r2, [r4, #0]
 801e5c2:	1b52      	subs	r2, r2, r5
 801e5c4:	d420      	bmi.n	801e608 <_malloc_r+0xd0>
 801e5c6:	2a0b      	cmp	r2, #11
 801e5c8:	d917      	bls.n	801e5fa <_malloc_r+0xc2>
 801e5ca:	1961      	adds	r1, r4, r5
 801e5cc:	42a3      	cmp	r3, r4
 801e5ce:	6025      	str	r5, [r4, #0]
 801e5d0:	bf18      	it	ne
 801e5d2:	6059      	strne	r1, [r3, #4]
 801e5d4:	6863      	ldr	r3, [r4, #4]
 801e5d6:	bf08      	it	eq
 801e5d8:	f8c8 1000 	streq.w	r1, [r8]
 801e5dc:	5162      	str	r2, [r4, r5]
 801e5de:	604b      	str	r3, [r1, #4]
 801e5e0:	4630      	mov	r0, r6
 801e5e2:	f000 f82f 	bl	801e644 <__malloc_unlock>
 801e5e6:	f104 000b 	add.w	r0, r4, #11
 801e5ea:	1d23      	adds	r3, r4, #4
 801e5ec:	f020 0007 	bic.w	r0, r0, #7
 801e5f0:	1ac2      	subs	r2, r0, r3
 801e5f2:	bf1c      	itt	ne
 801e5f4:	1a1b      	subne	r3, r3, r0
 801e5f6:	50a3      	strne	r3, [r4, r2]
 801e5f8:	e7af      	b.n	801e55a <_malloc_r+0x22>
 801e5fa:	6862      	ldr	r2, [r4, #4]
 801e5fc:	42a3      	cmp	r3, r4
 801e5fe:	bf0c      	ite	eq
 801e600:	f8c8 2000 	streq.w	r2, [r8]
 801e604:	605a      	strne	r2, [r3, #4]
 801e606:	e7eb      	b.n	801e5e0 <_malloc_r+0xa8>
 801e608:	4623      	mov	r3, r4
 801e60a:	6864      	ldr	r4, [r4, #4]
 801e60c:	e7ae      	b.n	801e56c <_malloc_r+0x34>
 801e60e:	463c      	mov	r4, r7
 801e610:	687f      	ldr	r7, [r7, #4]
 801e612:	e7b6      	b.n	801e582 <_malloc_r+0x4a>
 801e614:	461a      	mov	r2, r3
 801e616:	685b      	ldr	r3, [r3, #4]
 801e618:	42a3      	cmp	r3, r4
 801e61a:	d1fb      	bne.n	801e614 <_malloc_r+0xdc>
 801e61c:	2300      	movs	r3, #0
 801e61e:	6053      	str	r3, [r2, #4]
 801e620:	e7de      	b.n	801e5e0 <_malloc_r+0xa8>
 801e622:	230c      	movs	r3, #12
 801e624:	6033      	str	r3, [r6, #0]
 801e626:	4630      	mov	r0, r6
 801e628:	f000 f80c 	bl	801e644 <__malloc_unlock>
 801e62c:	e794      	b.n	801e558 <_malloc_r+0x20>
 801e62e:	6005      	str	r5, [r0, #0]
 801e630:	e7d6      	b.n	801e5e0 <_malloc_r+0xa8>
 801e632:	bf00      	nop
 801e634:	20002518 	.word	0x20002518

0801e638 <__malloc_lock>:
 801e638:	4801      	ldr	r0, [pc, #4]	@ (801e640 <__malloc_lock+0x8>)
 801e63a:	f7ff b8b4 	b.w	801d7a6 <__retarget_lock_acquire_recursive>
 801e63e:	bf00      	nop
 801e640:	20002510 	.word	0x20002510

0801e644 <__malloc_unlock>:
 801e644:	4801      	ldr	r0, [pc, #4]	@ (801e64c <__malloc_unlock+0x8>)
 801e646:	f7ff b8af 	b.w	801d7a8 <__retarget_lock_release_recursive>
 801e64a:	bf00      	nop
 801e64c:	20002510 	.word	0x20002510

0801e650 <_Balloc>:
 801e650:	b570      	push	{r4, r5, r6, lr}
 801e652:	69c6      	ldr	r6, [r0, #28]
 801e654:	4604      	mov	r4, r0
 801e656:	460d      	mov	r5, r1
 801e658:	b976      	cbnz	r6, 801e678 <_Balloc+0x28>
 801e65a:	2010      	movs	r0, #16
 801e65c:	f7ff ff42 	bl	801e4e4 <malloc>
 801e660:	4602      	mov	r2, r0
 801e662:	61e0      	str	r0, [r4, #28]
 801e664:	b920      	cbnz	r0, 801e670 <_Balloc+0x20>
 801e666:	4b18      	ldr	r3, [pc, #96]	@ (801e6c8 <_Balloc+0x78>)
 801e668:	4818      	ldr	r0, [pc, #96]	@ (801e6cc <_Balloc+0x7c>)
 801e66a:	216b      	movs	r1, #107	@ 0x6b
 801e66c:	f000 fdfa 	bl	801f264 <__assert_func>
 801e670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e674:	6006      	str	r6, [r0, #0]
 801e676:	60c6      	str	r6, [r0, #12]
 801e678:	69e6      	ldr	r6, [r4, #28]
 801e67a:	68f3      	ldr	r3, [r6, #12]
 801e67c:	b183      	cbz	r3, 801e6a0 <_Balloc+0x50>
 801e67e:	69e3      	ldr	r3, [r4, #28]
 801e680:	68db      	ldr	r3, [r3, #12]
 801e682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e686:	b9b8      	cbnz	r0, 801e6b8 <_Balloc+0x68>
 801e688:	2101      	movs	r1, #1
 801e68a:	fa01 f605 	lsl.w	r6, r1, r5
 801e68e:	1d72      	adds	r2, r6, #5
 801e690:	0092      	lsls	r2, r2, #2
 801e692:	4620      	mov	r0, r4
 801e694:	f000 fe04 	bl	801f2a0 <_calloc_r>
 801e698:	b160      	cbz	r0, 801e6b4 <_Balloc+0x64>
 801e69a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e69e:	e00e      	b.n	801e6be <_Balloc+0x6e>
 801e6a0:	2221      	movs	r2, #33	@ 0x21
 801e6a2:	2104      	movs	r1, #4
 801e6a4:	4620      	mov	r0, r4
 801e6a6:	f000 fdfb 	bl	801f2a0 <_calloc_r>
 801e6aa:	69e3      	ldr	r3, [r4, #28]
 801e6ac:	60f0      	str	r0, [r6, #12]
 801e6ae:	68db      	ldr	r3, [r3, #12]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d1e4      	bne.n	801e67e <_Balloc+0x2e>
 801e6b4:	2000      	movs	r0, #0
 801e6b6:	bd70      	pop	{r4, r5, r6, pc}
 801e6b8:	6802      	ldr	r2, [r0, #0]
 801e6ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e6be:	2300      	movs	r3, #0
 801e6c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e6c4:	e7f7      	b.n	801e6b6 <_Balloc+0x66>
 801e6c6:	bf00      	nop
 801e6c8:	080205d9 	.word	0x080205d9
 801e6cc:	08020659 	.word	0x08020659

0801e6d0 <_Bfree>:
 801e6d0:	b570      	push	{r4, r5, r6, lr}
 801e6d2:	69c6      	ldr	r6, [r0, #28]
 801e6d4:	4605      	mov	r5, r0
 801e6d6:	460c      	mov	r4, r1
 801e6d8:	b976      	cbnz	r6, 801e6f8 <_Bfree+0x28>
 801e6da:	2010      	movs	r0, #16
 801e6dc:	f7ff ff02 	bl	801e4e4 <malloc>
 801e6e0:	4602      	mov	r2, r0
 801e6e2:	61e8      	str	r0, [r5, #28]
 801e6e4:	b920      	cbnz	r0, 801e6f0 <_Bfree+0x20>
 801e6e6:	4b09      	ldr	r3, [pc, #36]	@ (801e70c <_Bfree+0x3c>)
 801e6e8:	4809      	ldr	r0, [pc, #36]	@ (801e710 <_Bfree+0x40>)
 801e6ea:	218f      	movs	r1, #143	@ 0x8f
 801e6ec:	f000 fdba 	bl	801f264 <__assert_func>
 801e6f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e6f4:	6006      	str	r6, [r0, #0]
 801e6f6:	60c6      	str	r6, [r0, #12]
 801e6f8:	b13c      	cbz	r4, 801e70a <_Bfree+0x3a>
 801e6fa:	69eb      	ldr	r3, [r5, #28]
 801e6fc:	6862      	ldr	r2, [r4, #4]
 801e6fe:	68db      	ldr	r3, [r3, #12]
 801e700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e704:	6021      	str	r1, [r4, #0]
 801e706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e70a:	bd70      	pop	{r4, r5, r6, pc}
 801e70c:	080205d9 	.word	0x080205d9
 801e710:	08020659 	.word	0x08020659

0801e714 <__multadd>:
 801e714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e718:	690d      	ldr	r5, [r1, #16]
 801e71a:	4607      	mov	r7, r0
 801e71c:	460c      	mov	r4, r1
 801e71e:	461e      	mov	r6, r3
 801e720:	f101 0c14 	add.w	ip, r1, #20
 801e724:	2000      	movs	r0, #0
 801e726:	f8dc 3000 	ldr.w	r3, [ip]
 801e72a:	b299      	uxth	r1, r3
 801e72c:	fb02 6101 	mla	r1, r2, r1, r6
 801e730:	0c1e      	lsrs	r6, r3, #16
 801e732:	0c0b      	lsrs	r3, r1, #16
 801e734:	fb02 3306 	mla	r3, r2, r6, r3
 801e738:	b289      	uxth	r1, r1
 801e73a:	3001      	adds	r0, #1
 801e73c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e740:	4285      	cmp	r5, r0
 801e742:	f84c 1b04 	str.w	r1, [ip], #4
 801e746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e74a:	dcec      	bgt.n	801e726 <__multadd+0x12>
 801e74c:	b30e      	cbz	r6, 801e792 <__multadd+0x7e>
 801e74e:	68a3      	ldr	r3, [r4, #8]
 801e750:	42ab      	cmp	r3, r5
 801e752:	dc19      	bgt.n	801e788 <__multadd+0x74>
 801e754:	6861      	ldr	r1, [r4, #4]
 801e756:	4638      	mov	r0, r7
 801e758:	3101      	adds	r1, #1
 801e75a:	f7ff ff79 	bl	801e650 <_Balloc>
 801e75e:	4680      	mov	r8, r0
 801e760:	b928      	cbnz	r0, 801e76e <__multadd+0x5a>
 801e762:	4602      	mov	r2, r0
 801e764:	4b0c      	ldr	r3, [pc, #48]	@ (801e798 <__multadd+0x84>)
 801e766:	480d      	ldr	r0, [pc, #52]	@ (801e79c <__multadd+0x88>)
 801e768:	21ba      	movs	r1, #186	@ 0xba
 801e76a:	f000 fd7b 	bl	801f264 <__assert_func>
 801e76e:	6922      	ldr	r2, [r4, #16]
 801e770:	3202      	adds	r2, #2
 801e772:	f104 010c 	add.w	r1, r4, #12
 801e776:	0092      	lsls	r2, r2, #2
 801e778:	300c      	adds	r0, #12
 801e77a:	f000 fd65 	bl	801f248 <memcpy>
 801e77e:	4621      	mov	r1, r4
 801e780:	4638      	mov	r0, r7
 801e782:	f7ff ffa5 	bl	801e6d0 <_Bfree>
 801e786:	4644      	mov	r4, r8
 801e788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e78c:	3501      	adds	r5, #1
 801e78e:	615e      	str	r6, [r3, #20]
 801e790:	6125      	str	r5, [r4, #16]
 801e792:	4620      	mov	r0, r4
 801e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e798:	08020648 	.word	0x08020648
 801e79c:	08020659 	.word	0x08020659

0801e7a0 <__hi0bits>:
 801e7a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	bf36      	itet	cc
 801e7a8:	0403      	lslcc	r3, r0, #16
 801e7aa:	2000      	movcs	r0, #0
 801e7ac:	2010      	movcc	r0, #16
 801e7ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e7b2:	bf3c      	itt	cc
 801e7b4:	021b      	lslcc	r3, r3, #8
 801e7b6:	3008      	addcc	r0, #8
 801e7b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e7bc:	bf3c      	itt	cc
 801e7be:	011b      	lslcc	r3, r3, #4
 801e7c0:	3004      	addcc	r0, #4
 801e7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e7c6:	bf3c      	itt	cc
 801e7c8:	009b      	lslcc	r3, r3, #2
 801e7ca:	3002      	addcc	r0, #2
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	db05      	blt.n	801e7dc <__hi0bits+0x3c>
 801e7d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e7d4:	f100 0001 	add.w	r0, r0, #1
 801e7d8:	bf08      	it	eq
 801e7da:	2020      	moveq	r0, #32
 801e7dc:	4770      	bx	lr

0801e7de <__lo0bits>:
 801e7de:	6803      	ldr	r3, [r0, #0]
 801e7e0:	4602      	mov	r2, r0
 801e7e2:	f013 0007 	ands.w	r0, r3, #7
 801e7e6:	d00b      	beq.n	801e800 <__lo0bits+0x22>
 801e7e8:	07d9      	lsls	r1, r3, #31
 801e7ea:	d421      	bmi.n	801e830 <__lo0bits+0x52>
 801e7ec:	0798      	lsls	r0, r3, #30
 801e7ee:	bf49      	itett	mi
 801e7f0:	085b      	lsrmi	r3, r3, #1
 801e7f2:	089b      	lsrpl	r3, r3, #2
 801e7f4:	2001      	movmi	r0, #1
 801e7f6:	6013      	strmi	r3, [r2, #0]
 801e7f8:	bf5c      	itt	pl
 801e7fa:	6013      	strpl	r3, [r2, #0]
 801e7fc:	2002      	movpl	r0, #2
 801e7fe:	4770      	bx	lr
 801e800:	b299      	uxth	r1, r3
 801e802:	b909      	cbnz	r1, 801e808 <__lo0bits+0x2a>
 801e804:	0c1b      	lsrs	r3, r3, #16
 801e806:	2010      	movs	r0, #16
 801e808:	b2d9      	uxtb	r1, r3
 801e80a:	b909      	cbnz	r1, 801e810 <__lo0bits+0x32>
 801e80c:	3008      	adds	r0, #8
 801e80e:	0a1b      	lsrs	r3, r3, #8
 801e810:	0719      	lsls	r1, r3, #28
 801e812:	bf04      	itt	eq
 801e814:	091b      	lsreq	r3, r3, #4
 801e816:	3004      	addeq	r0, #4
 801e818:	0799      	lsls	r1, r3, #30
 801e81a:	bf04      	itt	eq
 801e81c:	089b      	lsreq	r3, r3, #2
 801e81e:	3002      	addeq	r0, #2
 801e820:	07d9      	lsls	r1, r3, #31
 801e822:	d403      	bmi.n	801e82c <__lo0bits+0x4e>
 801e824:	085b      	lsrs	r3, r3, #1
 801e826:	f100 0001 	add.w	r0, r0, #1
 801e82a:	d003      	beq.n	801e834 <__lo0bits+0x56>
 801e82c:	6013      	str	r3, [r2, #0]
 801e82e:	4770      	bx	lr
 801e830:	2000      	movs	r0, #0
 801e832:	4770      	bx	lr
 801e834:	2020      	movs	r0, #32
 801e836:	4770      	bx	lr

0801e838 <__i2b>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	460c      	mov	r4, r1
 801e83c:	2101      	movs	r1, #1
 801e83e:	f7ff ff07 	bl	801e650 <_Balloc>
 801e842:	4602      	mov	r2, r0
 801e844:	b928      	cbnz	r0, 801e852 <__i2b+0x1a>
 801e846:	4b05      	ldr	r3, [pc, #20]	@ (801e85c <__i2b+0x24>)
 801e848:	4805      	ldr	r0, [pc, #20]	@ (801e860 <__i2b+0x28>)
 801e84a:	f240 1145 	movw	r1, #325	@ 0x145
 801e84e:	f000 fd09 	bl	801f264 <__assert_func>
 801e852:	2301      	movs	r3, #1
 801e854:	6144      	str	r4, [r0, #20]
 801e856:	6103      	str	r3, [r0, #16]
 801e858:	bd10      	pop	{r4, pc}
 801e85a:	bf00      	nop
 801e85c:	08020648 	.word	0x08020648
 801e860:	08020659 	.word	0x08020659

0801e864 <__multiply>:
 801e864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e868:	4614      	mov	r4, r2
 801e86a:	690a      	ldr	r2, [r1, #16]
 801e86c:	6923      	ldr	r3, [r4, #16]
 801e86e:	429a      	cmp	r2, r3
 801e870:	bfa8      	it	ge
 801e872:	4623      	movge	r3, r4
 801e874:	460f      	mov	r7, r1
 801e876:	bfa4      	itt	ge
 801e878:	460c      	movge	r4, r1
 801e87a:	461f      	movge	r7, r3
 801e87c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e880:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e884:	68a3      	ldr	r3, [r4, #8]
 801e886:	6861      	ldr	r1, [r4, #4]
 801e888:	eb0a 0609 	add.w	r6, sl, r9
 801e88c:	42b3      	cmp	r3, r6
 801e88e:	b085      	sub	sp, #20
 801e890:	bfb8      	it	lt
 801e892:	3101      	addlt	r1, #1
 801e894:	f7ff fedc 	bl	801e650 <_Balloc>
 801e898:	b930      	cbnz	r0, 801e8a8 <__multiply+0x44>
 801e89a:	4602      	mov	r2, r0
 801e89c:	4b44      	ldr	r3, [pc, #272]	@ (801e9b0 <__multiply+0x14c>)
 801e89e:	4845      	ldr	r0, [pc, #276]	@ (801e9b4 <__multiply+0x150>)
 801e8a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e8a4:	f000 fcde 	bl	801f264 <__assert_func>
 801e8a8:	f100 0514 	add.w	r5, r0, #20
 801e8ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e8b0:	462b      	mov	r3, r5
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	4543      	cmp	r3, r8
 801e8b6:	d321      	bcc.n	801e8fc <__multiply+0x98>
 801e8b8:	f107 0114 	add.w	r1, r7, #20
 801e8bc:	f104 0214 	add.w	r2, r4, #20
 801e8c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e8c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e8c8:	9302      	str	r3, [sp, #8]
 801e8ca:	1b13      	subs	r3, r2, r4
 801e8cc:	3b15      	subs	r3, #21
 801e8ce:	f023 0303 	bic.w	r3, r3, #3
 801e8d2:	3304      	adds	r3, #4
 801e8d4:	f104 0715 	add.w	r7, r4, #21
 801e8d8:	42ba      	cmp	r2, r7
 801e8da:	bf38      	it	cc
 801e8dc:	2304      	movcc	r3, #4
 801e8de:	9301      	str	r3, [sp, #4]
 801e8e0:	9b02      	ldr	r3, [sp, #8]
 801e8e2:	9103      	str	r1, [sp, #12]
 801e8e4:	428b      	cmp	r3, r1
 801e8e6:	d80c      	bhi.n	801e902 <__multiply+0x9e>
 801e8e8:	2e00      	cmp	r6, #0
 801e8ea:	dd03      	ble.n	801e8f4 <__multiply+0x90>
 801e8ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d05a      	beq.n	801e9aa <__multiply+0x146>
 801e8f4:	6106      	str	r6, [r0, #16]
 801e8f6:	b005      	add	sp, #20
 801e8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8fc:	f843 2b04 	str.w	r2, [r3], #4
 801e900:	e7d8      	b.n	801e8b4 <__multiply+0x50>
 801e902:	f8b1 a000 	ldrh.w	sl, [r1]
 801e906:	f1ba 0f00 	cmp.w	sl, #0
 801e90a:	d023      	beq.n	801e954 <__multiply+0xf0>
 801e90c:	f104 0e14 	add.w	lr, r4, #20
 801e910:	46a9      	mov	r9, r5
 801e912:	f04f 0c00 	mov.w	ip, #0
 801e916:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e91a:	f8d9 3000 	ldr.w	r3, [r9]
 801e91e:	fa1f fb87 	uxth.w	fp, r7
 801e922:	b29b      	uxth	r3, r3
 801e924:	fb0a 330b 	mla	r3, sl, fp, r3
 801e928:	4463      	add	r3, ip
 801e92a:	f8d9 c000 	ldr.w	ip, [r9]
 801e92e:	0c3f      	lsrs	r7, r7, #16
 801e930:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e934:	fb0a c707 	mla	r7, sl, r7, ip
 801e938:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e93c:	b29b      	uxth	r3, r3
 801e93e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e942:	4572      	cmp	r2, lr
 801e944:	f849 3b04 	str.w	r3, [r9], #4
 801e948:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e94c:	d8e3      	bhi.n	801e916 <__multiply+0xb2>
 801e94e:	9b01      	ldr	r3, [sp, #4]
 801e950:	f845 c003 	str.w	ip, [r5, r3]
 801e954:	9b03      	ldr	r3, [sp, #12]
 801e956:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e95a:	3104      	adds	r1, #4
 801e95c:	f1b9 0f00 	cmp.w	r9, #0
 801e960:	d021      	beq.n	801e9a6 <__multiply+0x142>
 801e962:	682b      	ldr	r3, [r5, #0]
 801e964:	f104 0c14 	add.w	ip, r4, #20
 801e968:	46ae      	mov	lr, r5
 801e96a:	f04f 0a00 	mov.w	sl, #0
 801e96e:	f8bc b000 	ldrh.w	fp, [ip]
 801e972:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e976:	fb09 770b 	mla	r7, r9, fp, r7
 801e97a:	4457      	add	r7, sl
 801e97c:	b29b      	uxth	r3, r3
 801e97e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e982:	f84e 3b04 	str.w	r3, [lr], #4
 801e986:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e98a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e98e:	f8be 3000 	ldrh.w	r3, [lr]
 801e992:	fb09 330a 	mla	r3, r9, sl, r3
 801e996:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e99a:	4562      	cmp	r2, ip
 801e99c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e9a0:	d8e5      	bhi.n	801e96e <__multiply+0x10a>
 801e9a2:	9f01      	ldr	r7, [sp, #4]
 801e9a4:	51eb      	str	r3, [r5, r7]
 801e9a6:	3504      	adds	r5, #4
 801e9a8:	e79a      	b.n	801e8e0 <__multiply+0x7c>
 801e9aa:	3e01      	subs	r6, #1
 801e9ac:	e79c      	b.n	801e8e8 <__multiply+0x84>
 801e9ae:	bf00      	nop
 801e9b0:	08020648 	.word	0x08020648
 801e9b4:	08020659 	.word	0x08020659

0801e9b8 <__pow5mult>:
 801e9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9bc:	4615      	mov	r5, r2
 801e9be:	f012 0203 	ands.w	r2, r2, #3
 801e9c2:	4607      	mov	r7, r0
 801e9c4:	460e      	mov	r6, r1
 801e9c6:	d007      	beq.n	801e9d8 <__pow5mult+0x20>
 801e9c8:	4c25      	ldr	r4, [pc, #148]	@ (801ea60 <__pow5mult+0xa8>)
 801e9ca:	3a01      	subs	r2, #1
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e9d2:	f7ff fe9f 	bl	801e714 <__multadd>
 801e9d6:	4606      	mov	r6, r0
 801e9d8:	10ad      	asrs	r5, r5, #2
 801e9da:	d03d      	beq.n	801ea58 <__pow5mult+0xa0>
 801e9dc:	69fc      	ldr	r4, [r7, #28]
 801e9de:	b97c      	cbnz	r4, 801ea00 <__pow5mult+0x48>
 801e9e0:	2010      	movs	r0, #16
 801e9e2:	f7ff fd7f 	bl	801e4e4 <malloc>
 801e9e6:	4602      	mov	r2, r0
 801e9e8:	61f8      	str	r0, [r7, #28]
 801e9ea:	b928      	cbnz	r0, 801e9f8 <__pow5mult+0x40>
 801e9ec:	4b1d      	ldr	r3, [pc, #116]	@ (801ea64 <__pow5mult+0xac>)
 801e9ee:	481e      	ldr	r0, [pc, #120]	@ (801ea68 <__pow5mult+0xb0>)
 801e9f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e9f4:	f000 fc36 	bl	801f264 <__assert_func>
 801e9f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e9fc:	6004      	str	r4, [r0, #0]
 801e9fe:	60c4      	str	r4, [r0, #12]
 801ea00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ea04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ea08:	b94c      	cbnz	r4, 801ea1e <__pow5mult+0x66>
 801ea0a:	f240 2171 	movw	r1, #625	@ 0x271
 801ea0e:	4638      	mov	r0, r7
 801ea10:	f7ff ff12 	bl	801e838 <__i2b>
 801ea14:	2300      	movs	r3, #0
 801ea16:	f8c8 0008 	str.w	r0, [r8, #8]
 801ea1a:	4604      	mov	r4, r0
 801ea1c:	6003      	str	r3, [r0, #0]
 801ea1e:	f04f 0900 	mov.w	r9, #0
 801ea22:	07eb      	lsls	r3, r5, #31
 801ea24:	d50a      	bpl.n	801ea3c <__pow5mult+0x84>
 801ea26:	4631      	mov	r1, r6
 801ea28:	4622      	mov	r2, r4
 801ea2a:	4638      	mov	r0, r7
 801ea2c:	f7ff ff1a 	bl	801e864 <__multiply>
 801ea30:	4631      	mov	r1, r6
 801ea32:	4680      	mov	r8, r0
 801ea34:	4638      	mov	r0, r7
 801ea36:	f7ff fe4b 	bl	801e6d0 <_Bfree>
 801ea3a:	4646      	mov	r6, r8
 801ea3c:	106d      	asrs	r5, r5, #1
 801ea3e:	d00b      	beq.n	801ea58 <__pow5mult+0xa0>
 801ea40:	6820      	ldr	r0, [r4, #0]
 801ea42:	b938      	cbnz	r0, 801ea54 <__pow5mult+0x9c>
 801ea44:	4622      	mov	r2, r4
 801ea46:	4621      	mov	r1, r4
 801ea48:	4638      	mov	r0, r7
 801ea4a:	f7ff ff0b 	bl	801e864 <__multiply>
 801ea4e:	6020      	str	r0, [r4, #0]
 801ea50:	f8c0 9000 	str.w	r9, [r0]
 801ea54:	4604      	mov	r4, r0
 801ea56:	e7e4      	b.n	801ea22 <__pow5mult+0x6a>
 801ea58:	4630      	mov	r0, r6
 801ea5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea5e:	bf00      	nop
 801ea60:	080206b4 	.word	0x080206b4
 801ea64:	080205d9 	.word	0x080205d9
 801ea68:	08020659 	.word	0x08020659

0801ea6c <__lshift>:
 801ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea70:	460c      	mov	r4, r1
 801ea72:	6849      	ldr	r1, [r1, #4]
 801ea74:	6923      	ldr	r3, [r4, #16]
 801ea76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea7a:	68a3      	ldr	r3, [r4, #8]
 801ea7c:	4607      	mov	r7, r0
 801ea7e:	4691      	mov	r9, r2
 801ea80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea84:	f108 0601 	add.w	r6, r8, #1
 801ea88:	42b3      	cmp	r3, r6
 801ea8a:	db0b      	blt.n	801eaa4 <__lshift+0x38>
 801ea8c:	4638      	mov	r0, r7
 801ea8e:	f7ff fddf 	bl	801e650 <_Balloc>
 801ea92:	4605      	mov	r5, r0
 801ea94:	b948      	cbnz	r0, 801eaaa <__lshift+0x3e>
 801ea96:	4602      	mov	r2, r0
 801ea98:	4b28      	ldr	r3, [pc, #160]	@ (801eb3c <__lshift+0xd0>)
 801ea9a:	4829      	ldr	r0, [pc, #164]	@ (801eb40 <__lshift+0xd4>)
 801ea9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801eaa0:	f000 fbe0 	bl	801f264 <__assert_func>
 801eaa4:	3101      	adds	r1, #1
 801eaa6:	005b      	lsls	r3, r3, #1
 801eaa8:	e7ee      	b.n	801ea88 <__lshift+0x1c>
 801eaaa:	2300      	movs	r3, #0
 801eaac:	f100 0114 	add.w	r1, r0, #20
 801eab0:	f100 0210 	add.w	r2, r0, #16
 801eab4:	4618      	mov	r0, r3
 801eab6:	4553      	cmp	r3, sl
 801eab8:	db33      	blt.n	801eb22 <__lshift+0xb6>
 801eaba:	6920      	ldr	r0, [r4, #16]
 801eabc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eac0:	f104 0314 	add.w	r3, r4, #20
 801eac4:	f019 091f 	ands.w	r9, r9, #31
 801eac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eacc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ead0:	d02b      	beq.n	801eb2a <__lshift+0xbe>
 801ead2:	f1c9 0e20 	rsb	lr, r9, #32
 801ead6:	468a      	mov	sl, r1
 801ead8:	2200      	movs	r2, #0
 801eada:	6818      	ldr	r0, [r3, #0]
 801eadc:	fa00 f009 	lsl.w	r0, r0, r9
 801eae0:	4310      	orrs	r0, r2
 801eae2:	f84a 0b04 	str.w	r0, [sl], #4
 801eae6:	f853 2b04 	ldr.w	r2, [r3], #4
 801eaea:	459c      	cmp	ip, r3
 801eaec:	fa22 f20e 	lsr.w	r2, r2, lr
 801eaf0:	d8f3      	bhi.n	801eada <__lshift+0x6e>
 801eaf2:	ebac 0304 	sub.w	r3, ip, r4
 801eaf6:	3b15      	subs	r3, #21
 801eaf8:	f023 0303 	bic.w	r3, r3, #3
 801eafc:	3304      	adds	r3, #4
 801eafe:	f104 0015 	add.w	r0, r4, #21
 801eb02:	4584      	cmp	ip, r0
 801eb04:	bf38      	it	cc
 801eb06:	2304      	movcc	r3, #4
 801eb08:	50ca      	str	r2, [r1, r3]
 801eb0a:	b10a      	cbz	r2, 801eb10 <__lshift+0xa4>
 801eb0c:	f108 0602 	add.w	r6, r8, #2
 801eb10:	3e01      	subs	r6, #1
 801eb12:	4638      	mov	r0, r7
 801eb14:	612e      	str	r6, [r5, #16]
 801eb16:	4621      	mov	r1, r4
 801eb18:	f7ff fdda 	bl	801e6d0 <_Bfree>
 801eb1c:	4628      	mov	r0, r5
 801eb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb22:	f842 0f04 	str.w	r0, [r2, #4]!
 801eb26:	3301      	adds	r3, #1
 801eb28:	e7c5      	b.n	801eab6 <__lshift+0x4a>
 801eb2a:	3904      	subs	r1, #4
 801eb2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb30:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb34:	459c      	cmp	ip, r3
 801eb36:	d8f9      	bhi.n	801eb2c <__lshift+0xc0>
 801eb38:	e7ea      	b.n	801eb10 <__lshift+0xa4>
 801eb3a:	bf00      	nop
 801eb3c:	08020648 	.word	0x08020648
 801eb40:	08020659 	.word	0x08020659

0801eb44 <__mcmp>:
 801eb44:	690a      	ldr	r2, [r1, #16]
 801eb46:	4603      	mov	r3, r0
 801eb48:	6900      	ldr	r0, [r0, #16]
 801eb4a:	1a80      	subs	r0, r0, r2
 801eb4c:	b530      	push	{r4, r5, lr}
 801eb4e:	d10e      	bne.n	801eb6e <__mcmp+0x2a>
 801eb50:	3314      	adds	r3, #20
 801eb52:	3114      	adds	r1, #20
 801eb54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801eb58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801eb5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801eb60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801eb64:	4295      	cmp	r5, r2
 801eb66:	d003      	beq.n	801eb70 <__mcmp+0x2c>
 801eb68:	d205      	bcs.n	801eb76 <__mcmp+0x32>
 801eb6a:	f04f 30ff 	mov.w	r0, #4294967295
 801eb6e:	bd30      	pop	{r4, r5, pc}
 801eb70:	42a3      	cmp	r3, r4
 801eb72:	d3f3      	bcc.n	801eb5c <__mcmp+0x18>
 801eb74:	e7fb      	b.n	801eb6e <__mcmp+0x2a>
 801eb76:	2001      	movs	r0, #1
 801eb78:	e7f9      	b.n	801eb6e <__mcmp+0x2a>
	...

0801eb7c <__mdiff>:
 801eb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb80:	4689      	mov	r9, r1
 801eb82:	4606      	mov	r6, r0
 801eb84:	4611      	mov	r1, r2
 801eb86:	4648      	mov	r0, r9
 801eb88:	4614      	mov	r4, r2
 801eb8a:	f7ff ffdb 	bl	801eb44 <__mcmp>
 801eb8e:	1e05      	subs	r5, r0, #0
 801eb90:	d112      	bne.n	801ebb8 <__mdiff+0x3c>
 801eb92:	4629      	mov	r1, r5
 801eb94:	4630      	mov	r0, r6
 801eb96:	f7ff fd5b 	bl	801e650 <_Balloc>
 801eb9a:	4602      	mov	r2, r0
 801eb9c:	b928      	cbnz	r0, 801ebaa <__mdiff+0x2e>
 801eb9e:	4b3e      	ldr	r3, [pc, #248]	@ (801ec98 <__mdiff+0x11c>)
 801eba0:	f240 2137 	movw	r1, #567	@ 0x237
 801eba4:	483d      	ldr	r0, [pc, #244]	@ (801ec9c <__mdiff+0x120>)
 801eba6:	f000 fb5d 	bl	801f264 <__assert_func>
 801ebaa:	2301      	movs	r3, #1
 801ebac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ebb0:	4610      	mov	r0, r2
 801ebb2:	b003      	add	sp, #12
 801ebb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebb8:	bfbc      	itt	lt
 801ebba:	464b      	movlt	r3, r9
 801ebbc:	46a1      	movlt	r9, r4
 801ebbe:	4630      	mov	r0, r6
 801ebc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ebc4:	bfba      	itte	lt
 801ebc6:	461c      	movlt	r4, r3
 801ebc8:	2501      	movlt	r5, #1
 801ebca:	2500      	movge	r5, #0
 801ebcc:	f7ff fd40 	bl	801e650 <_Balloc>
 801ebd0:	4602      	mov	r2, r0
 801ebd2:	b918      	cbnz	r0, 801ebdc <__mdiff+0x60>
 801ebd4:	4b30      	ldr	r3, [pc, #192]	@ (801ec98 <__mdiff+0x11c>)
 801ebd6:	f240 2145 	movw	r1, #581	@ 0x245
 801ebda:	e7e3      	b.n	801eba4 <__mdiff+0x28>
 801ebdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ebe0:	6926      	ldr	r6, [r4, #16]
 801ebe2:	60c5      	str	r5, [r0, #12]
 801ebe4:	f109 0310 	add.w	r3, r9, #16
 801ebe8:	f109 0514 	add.w	r5, r9, #20
 801ebec:	f104 0e14 	add.w	lr, r4, #20
 801ebf0:	f100 0b14 	add.w	fp, r0, #20
 801ebf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ebf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ebfc:	9301      	str	r3, [sp, #4]
 801ebfe:	46d9      	mov	r9, fp
 801ec00:	f04f 0c00 	mov.w	ip, #0
 801ec04:	9b01      	ldr	r3, [sp, #4]
 801ec06:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ec0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ec0e:	9301      	str	r3, [sp, #4]
 801ec10:	b281      	uxth	r1, r0
 801ec12:	fa1f f38a 	uxth.w	r3, sl
 801ec16:	1a5b      	subs	r3, r3, r1
 801ec18:	0c00      	lsrs	r0, r0, #16
 801ec1a:	4463      	add	r3, ip
 801ec1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ec20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ec24:	b29b      	uxth	r3, r3
 801ec26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ec2a:	4576      	cmp	r6, lr
 801ec2c:	f849 3b04 	str.w	r3, [r9], #4
 801ec30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec34:	d8e6      	bhi.n	801ec04 <__mdiff+0x88>
 801ec36:	1b33      	subs	r3, r6, r4
 801ec38:	3b15      	subs	r3, #21
 801ec3a:	f023 0303 	bic.w	r3, r3, #3
 801ec3e:	3415      	adds	r4, #21
 801ec40:	3304      	adds	r3, #4
 801ec42:	42a6      	cmp	r6, r4
 801ec44:	bf38      	it	cc
 801ec46:	2304      	movcc	r3, #4
 801ec48:	441d      	add	r5, r3
 801ec4a:	445b      	add	r3, fp
 801ec4c:	461e      	mov	r6, r3
 801ec4e:	462c      	mov	r4, r5
 801ec50:	4544      	cmp	r4, r8
 801ec52:	d30e      	bcc.n	801ec72 <__mdiff+0xf6>
 801ec54:	f108 0103 	add.w	r1, r8, #3
 801ec58:	1b49      	subs	r1, r1, r5
 801ec5a:	f021 0103 	bic.w	r1, r1, #3
 801ec5e:	3d03      	subs	r5, #3
 801ec60:	45a8      	cmp	r8, r5
 801ec62:	bf38      	it	cc
 801ec64:	2100      	movcc	r1, #0
 801ec66:	440b      	add	r3, r1
 801ec68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ec6c:	b191      	cbz	r1, 801ec94 <__mdiff+0x118>
 801ec6e:	6117      	str	r7, [r2, #16]
 801ec70:	e79e      	b.n	801ebb0 <__mdiff+0x34>
 801ec72:	f854 1b04 	ldr.w	r1, [r4], #4
 801ec76:	46e6      	mov	lr, ip
 801ec78:	0c08      	lsrs	r0, r1, #16
 801ec7a:	fa1c fc81 	uxtah	ip, ip, r1
 801ec7e:	4471      	add	r1, lr
 801ec80:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ec84:	b289      	uxth	r1, r1
 801ec86:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ec8a:	f846 1b04 	str.w	r1, [r6], #4
 801ec8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec92:	e7dd      	b.n	801ec50 <__mdiff+0xd4>
 801ec94:	3f01      	subs	r7, #1
 801ec96:	e7e7      	b.n	801ec68 <__mdiff+0xec>
 801ec98:	08020648 	.word	0x08020648
 801ec9c:	08020659 	.word	0x08020659

0801eca0 <__d2b>:
 801eca0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801eca4:	2101      	movs	r1, #1
 801eca6:	9e08      	ldr	r6, [sp, #32]
 801eca8:	4690      	mov	r8, r2
 801ecaa:	4699      	mov	r9, r3
 801ecac:	f7ff fcd0 	bl	801e650 <_Balloc>
 801ecb0:	4604      	mov	r4, r0
 801ecb2:	b930      	cbnz	r0, 801ecc2 <__d2b+0x22>
 801ecb4:	4602      	mov	r2, r0
 801ecb6:	4b24      	ldr	r3, [pc, #144]	@ (801ed48 <__d2b+0xa8>)
 801ecb8:	4824      	ldr	r0, [pc, #144]	@ (801ed4c <__d2b+0xac>)
 801ecba:	f240 310f 	movw	r1, #783	@ 0x30f
 801ecbe:	f000 fad1 	bl	801f264 <__assert_func>
 801ecc2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ecc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ecca:	b10d      	cbz	r5, 801ecd0 <__d2b+0x30>
 801eccc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ecd0:	9301      	str	r3, [sp, #4]
 801ecd2:	f1b8 0300 	subs.w	r3, r8, #0
 801ecd6:	d024      	beq.n	801ed22 <__d2b+0x82>
 801ecd8:	4668      	mov	r0, sp
 801ecda:	9300      	str	r3, [sp, #0]
 801ecdc:	f7ff fd7f 	bl	801e7de <__lo0bits>
 801ece0:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ece4:	b1d8      	cbz	r0, 801ed1e <__d2b+0x7e>
 801ece6:	f1c0 0320 	rsb	r3, r0, #32
 801ecea:	fa02 f303 	lsl.w	r3, r2, r3
 801ecee:	430b      	orrs	r3, r1
 801ecf0:	40c2      	lsrs	r2, r0
 801ecf2:	6163      	str	r3, [r4, #20]
 801ecf4:	9201      	str	r2, [sp, #4]
 801ecf6:	9b01      	ldr	r3, [sp, #4]
 801ecf8:	61a3      	str	r3, [r4, #24]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	bf0c      	ite	eq
 801ecfe:	2201      	moveq	r2, #1
 801ed00:	2202      	movne	r2, #2
 801ed02:	6122      	str	r2, [r4, #16]
 801ed04:	b1ad      	cbz	r5, 801ed32 <__d2b+0x92>
 801ed06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ed0a:	4405      	add	r5, r0
 801ed0c:	6035      	str	r5, [r6, #0]
 801ed0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ed12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed14:	6018      	str	r0, [r3, #0]
 801ed16:	4620      	mov	r0, r4
 801ed18:	b002      	add	sp, #8
 801ed1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801ed1e:	6161      	str	r1, [r4, #20]
 801ed20:	e7e9      	b.n	801ecf6 <__d2b+0x56>
 801ed22:	a801      	add	r0, sp, #4
 801ed24:	f7ff fd5b 	bl	801e7de <__lo0bits>
 801ed28:	9b01      	ldr	r3, [sp, #4]
 801ed2a:	6163      	str	r3, [r4, #20]
 801ed2c:	3020      	adds	r0, #32
 801ed2e:	2201      	movs	r2, #1
 801ed30:	e7e7      	b.n	801ed02 <__d2b+0x62>
 801ed32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ed36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ed3a:	6030      	str	r0, [r6, #0]
 801ed3c:	6918      	ldr	r0, [r3, #16]
 801ed3e:	f7ff fd2f 	bl	801e7a0 <__hi0bits>
 801ed42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ed46:	e7e4      	b.n	801ed12 <__d2b+0x72>
 801ed48:	08020648 	.word	0x08020648
 801ed4c:	08020659 	.word	0x08020659

0801ed50 <__sfputc_r>:
 801ed50:	6893      	ldr	r3, [r2, #8]
 801ed52:	3b01      	subs	r3, #1
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	b410      	push	{r4}
 801ed58:	6093      	str	r3, [r2, #8]
 801ed5a:	da07      	bge.n	801ed6c <__sfputc_r+0x1c>
 801ed5c:	6994      	ldr	r4, [r2, #24]
 801ed5e:	42a3      	cmp	r3, r4
 801ed60:	db01      	blt.n	801ed66 <__sfputc_r+0x16>
 801ed62:	290a      	cmp	r1, #10
 801ed64:	d102      	bne.n	801ed6c <__sfputc_r+0x1c>
 801ed66:	bc10      	pop	{r4}
 801ed68:	f7fe bc0b 	b.w	801d582 <__swbuf_r>
 801ed6c:	6813      	ldr	r3, [r2, #0]
 801ed6e:	1c58      	adds	r0, r3, #1
 801ed70:	6010      	str	r0, [r2, #0]
 801ed72:	7019      	strb	r1, [r3, #0]
 801ed74:	4608      	mov	r0, r1
 801ed76:	bc10      	pop	{r4}
 801ed78:	4770      	bx	lr

0801ed7a <__sfputs_r>:
 801ed7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed7c:	4606      	mov	r6, r0
 801ed7e:	460f      	mov	r7, r1
 801ed80:	4614      	mov	r4, r2
 801ed82:	18d5      	adds	r5, r2, r3
 801ed84:	42ac      	cmp	r4, r5
 801ed86:	d101      	bne.n	801ed8c <__sfputs_r+0x12>
 801ed88:	2000      	movs	r0, #0
 801ed8a:	e007      	b.n	801ed9c <__sfputs_r+0x22>
 801ed8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed90:	463a      	mov	r2, r7
 801ed92:	4630      	mov	r0, r6
 801ed94:	f7ff ffdc 	bl	801ed50 <__sfputc_r>
 801ed98:	1c43      	adds	r3, r0, #1
 801ed9a:	d1f3      	bne.n	801ed84 <__sfputs_r+0xa>
 801ed9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eda0 <_vfiprintf_r>:
 801eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda4:	460d      	mov	r5, r1
 801eda6:	b09d      	sub	sp, #116	@ 0x74
 801eda8:	4614      	mov	r4, r2
 801edaa:	4698      	mov	r8, r3
 801edac:	4606      	mov	r6, r0
 801edae:	b118      	cbz	r0, 801edb8 <_vfiprintf_r+0x18>
 801edb0:	6a03      	ldr	r3, [r0, #32]
 801edb2:	b90b      	cbnz	r3, 801edb8 <_vfiprintf_r+0x18>
 801edb4:	f7fe fafc 	bl	801d3b0 <__sinit>
 801edb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801edba:	07d9      	lsls	r1, r3, #31
 801edbc:	d405      	bmi.n	801edca <_vfiprintf_r+0x2a>
 801edbe:	89ab      	ldrh	r3, [r5, #12]
 801edc0:	059a      	lsls	r2, r3, #22
 801edc2:	d402      	bmi.n	801edca <_vfiprintf_r+0x2a>
 801edc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edc6:	f7fe fcee 	bl	801d7a6 <__retarget_lock_acquire_recursive>
 801edca:	89ab      	ldrh	r3, [r5, #12]
 801edcc:	071b      	lsls	r3, r3, #28
 801edce:	d501      	bpl.n	801edd4 <_vfiprintf_r+0x34>
 801edd0:	692b      	ldr	r3, [r5, #16]
 801edd2:	b99b      	cbnz	r3, 801edfc <_vfiprintf_r+0x5c>
 801edd4:	4629      	mov	r1, r5
 801edd6:	4630      	mov	r0, r6
 801edd8:	f7fe fc12 	bl	801d600 <__swsetup_r>
 801eddc:	b170      	cbz	r0, 801edfc <_vfiprintf_r+0x5c>
 801edde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ede0:	07dc      	lsls	r4, r3, #31
 801ede2:	d504      	bpl.n	801edee <_vfiprintf_r+0x4e>
 801ede4:	f04f 30ff 	mov.w	r0, #4294967295
 801ede8:	b01d      	add	sp, #116	@ 0x74
 801edea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edee:	89ab      	ldrh	r3, [r5, #12]
 801edf0:	0598      	lsls	r0, r3, #22
 801edf2:	d4f7      	bmi.n	801ede4 <_vfiprintf_r+0x44>
 801edf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edf6:	f7fe fcd7 	bl	801d7a8 <__retarget_lock_release_recursive>
 801edfa:	e7f3      	b.n	801ede4 <_vfiprintf_r+0x44>
 801edfc:	2300      	movs	r3, #0
 801edfe:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee00:	2320      	movs	r3, #32
 801ee02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ee06:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee0a:	2330      	movs	r3, #48	@ 0x30
 801ee0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801efbc <_vfiprintf_r+0x21c>
 801ee10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ee14:	f04f 0901 	mov.w	r9, #1
 801ee18:	4623      	mov	r3, r4
 801ee1a:	469a      	mov	sl, r3
 801ee1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee20:	b10a      	cbz	r2, 801ee26 <_vfiprintf_r+0x86>
 801ee22:	2a25      	cmp	r2, #37	@ 0x25
 801ee24:	d1f9      	bne.n	801ee1a <_vfiprintf_r+0x7a>
 801ee26:	ebba 0b04 	subs.w	fp, sl, r4
 801ee2a:	d00b      	beq.n	801ee44 <_vfiprintf_r+0xa4>
 801ee2c:	465b      	mov	r3, fp
 801ee2e:	4622      	mov	r2, r4
 801ee30:	4629      	mov	r1, r5
 801ee32:	4630      	mov	r0, r6
 801ee34:	f7ff ffa1 	bl	801ed7a <__sfputs_r>
 801ee38:	3001      	adds	r0, #1
 801ee3a:	f000 80a7 	beq.w	801ef8c <_vfiprintf_r+0x1ec>
 801ee3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee40:	445a      	add	r2, fp
 801ee42:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee44:	f89a 3000 	ldrb.w	r3, [sl]
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	f000 809f 	beq.w	801ef8c <_vfiprintf_r+0x1ec>
 801ee4e:	2300      	movs	r3, #0
 801ee50:	f04f 32ff 	mov.w	r2, #4294967295
 801ee54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee58:	f10a 0a01 	add.w	sl, sl, #1
 801ee5c:	9304      	str	r3, [sp, #16]
 801ee5e:	9307      	str	r3, [sp, #28]
 801ee60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ee64:	931a      	str	r3, [sp, #104]	@ 0x68
 801ee66:	4654      	mov	r4, sl
 801ee68:	2205      	movs	r2, #5
 801ee6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee6e:	4853      	ldr	r0, [pc, #332]	@ (801efbc <_vfiprintf_r+0x21c>)
 801ee70:	f7e1 f986 	bl	8000180 <memchr>
 801ee74:	9a04      	ldr	r2, [sp, #16]
 801ee76:	b9d8      	cbnz	r0, 801eeb0 <_vfiprintf_r+0x110>
 801ee78:	06d1      	lsls	r1, r2, #27
 801ee7a:	bf44      	itt	mi
 801ee7c:	2320      	movmi	r3, #32
 801ee7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee82:	0713      	lsls	r3, r2, #28
 801ee84:	bf44      	itt	mi
 801ee86:	232b      	movmi	r3, #43	@ 0x2b
 801ee88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee8c:	f89a 3000 	ldrb.w	r3, [sl]
 801ee90:	2b2a      	cmp	r3, #42	@ 0x2a
 801ee92:	d015      	beq.n	801eec0 <_vfiprintf_r+0x120>
 801ee94:	9a07      	ldr	r2, [sp, #28]
 801ee96:	4654      	mov	r4, sl
 801ee98:	2000      	movs	r0, #0
 801ee9a:	f04f 0c0a 	mov.w	ip, #10
 801ee9e:	4621      	mov	r1, r4
 801eea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eea4:	3b30      	subs	r3, #48	@ 0x30
 801eea6:	2b09      	cmp	r3, #9
 801eea8:	d94b      	bls.n	801ef42 <_vfiprintf_r+0x1a2>
 801eeaa:	b1b0      	cbz	r0, 801eeda <_vfiprintf_r+0x13a>
 801eeac:	9207      	str	r2, [sp, #28]
 801eeae:	e014      	b.n	801eeda <_vfiprintf_r+0x13a>
 801eeb0:	eba0 0308 	sub.w	r3, r0, r8
 801eeb4:	fa09 f303 	lsl.w	r3, r9, r3
 801eeb8:	4313      	orrs	r3, r2
 801eeba:	9304      	str	r3, [sp, #16]
 801eebc:	46a2      	mov	sl, r4
 801eebe:	e7d2      	b.n	801ee66 <_vfiprintf_r+0xc6>
 801eec0:	9b03      	ldr	r3, [sp, #12]
 801eec2:	1d19      	adds	r1, r3, #4
 801eec4:	681b      	ldr	r3, [r3, #0]
 801eec6:	9103      	str	r1, [sp, #12]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	bfbb      	ittet	lt
 801eecc:	425b      	neglt	r3, r3
 801eece:	f042 0202 	orrlt.w	r2, r2, #2
 801eed2:	9307      	strge	r3, [sp, #28]
 801eed4:	9307      	strlt	r3, [sp, #28]
 801eed6:	bfb8      	it	lt
 801eed8:	9204      	strlt	r2, [sp, #16]
 801eeda:	7823      	ldrb	r3, [r4, #0]
 801eedc:	2b2e      	cmp	r3, #46	@ 0x2e
 801eede:	d10a      	bne.n	801eef6 <_vfiprintf_r+0x156>
 801eee0:	7863      	ldrb	r3, [r4, #1]
 801eee2:	2b2a      	cmp	r3, #42	@ 0x2a
 801eee4:	d132      	bne.n	801ef4c <_vfiprintf_r+0x1ac>
 801eee6:	9b03      	ldr	r3, [sp, #12]
 801eee8:	1d1a      	adds	r2, r3, #4
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	9203      	str	r2, [sp, #12]
 801eeee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eef2:	3402      	adds	r4, #2
 801eef4:	9305      	str	r3, [sp, #20]
 801eef6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801efc0 <_vfiprintf_r+0x220>
 801eefa:	7821      	ldrb	r1, [r4, #0]
 801eefc:	2203      	movs	r2, #3
 801eefe:	4650      	mov	r0, sl
 801ef00:	f7e1 f93e 	bl	8000180 <memchr>
 801ef04:	b138      	cbz	r0, 801ef16 <_vfiprintf_r+0x176>
 801ef06:	9b04      	ldr	r3, [sp, #16]
 801ef08:	eba0 000a 	sub.w	r0, r0, sl
 801ef0c:	2240      	movs	r2, #64	@ 0x40
 801ef0e:	4082      	lsls	r2, r0
 801ef10:	4313      	orrs	r3, r2
 801ef12:	3401      	adds	r4, #1
 801ef14:	9304      	str	r3, [sp, #16]
 801ef16:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef1a:	482a      	ldr	r0, [pc, #168]	@ (801efc4 <_vfiprintf_r+0x224>)
 801ef1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ef20:	2206      	movs	r2, #6
 801ef22:	f7e1 f92d 	bl	8000180 <memchr>
 801ef26:	2800      	cmp	r0, #0
 801ef28:	d03f      	beq.n	801efaa <_vfiprintf_r+0x20a>
 801ef2a:	4b27      	ldr	r3, [pc, #156]	@ (801efc8 <_vfiprintf_r+0x228>)
 801ef2c:	bb1b      	cbnz	r3, 801ef76 <_vfiprintf_r+0x1d6>
 801ef2e:	9b03      	ldr	r3, [sp, #12]
 801ef30:	3307      	adds	r3, #7
 801ef32:	f023 0307 	bic.w	r3, r3, #7
 801ef36:	3308      	adds	r3, #8
 801ef38:	9303      	str	r3, [sp, #12]
 801ef3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef3c:	443b      	add	r3, r7
 801ef3e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef40:	e76a      	b.n	801ee18 <_vfiprintf_r+0x78>
 801ef42:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef46:	460c      	mov	r4, r1
 801ef48:	2001      	movs	r0, #1
 801ef4a:	e7a8      	b.n	801ee9e <_vfiprintf_r+0xfe>
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	3401      	adds	r4, #1
 801ef50:	9305      	str	r3, [sp, #20]
 801ef52:	4619      	mov	r1, r3
 801ef54:	f04f 0c0a 	mov.w	ip, #10
 801ef58:	4620      	mov	r0, r4
 801ef5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef5e:	3a30      	subs	r2, #48	@ 0x30
 801ef60:	2a09      	cmp	r2, #9
 801ef62:	d903      	bls.n	801ef6c <_vfiprintf_r+0x1cc>
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d0c6      	beq.n	801eef6 <_vfiprintf_r+0x156>
 801ef68:	9105      	str	r1, [sp, #20]
 801ef6a:	e7c4      	b.n	801eef6 <_vfiprintf_r+0x156>
 801ef6c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef70:	4604      	mov	r4, r0
 801ef72:	2301      	movs	r3, #1
 801ef74:	e7f0      	b.n	801ef58 <_vfiprintf_r+0x1b8>
 801ef76:	ab03      	add	r3, sp, #12
 801ef78:	9300      	str	r3, [sp, #0]
 801ef7a:	462a      	mov	r2, r5
 801ef7c:	4b13      	ldr	r3, [pc, #76]	@ (801efcc <_vfiprintf_r+0x22c>)
 801ef7e:	a904      	add	r1, sp, #16
 801ef80:	4630      	mov	r0, r6
 801ef82:	f7fd fdcf 	bl	801cb24 <_printf_float>
 801ef86:	4607      	mov	r7, r0
 801ef88:	1c78      	adds	r0, r7, #1
 801ef8a:	d1d6      	bne.n	801ef3a <_vfiprintf_r+0x19a>
 801ef8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ef8e:	07d9      	lsls	r1, r3, #31
 801ef90:	d405      	bmi.n	801ef9e <_vfiprintf_r+0x1fe>
 801ef92:	89ab      	ldrh	r3, [r5, #12]
 801ef94:	059a      	lsls	r2, r3, #22
 801ef96:	d402      	bmi.n	801ef9e <_vfiprintf_r+0x1fe>
 801ef98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ef9a:	f7fe fc05 	bl	801d7a8 <__retarget_lock_release_recursive>
 801ef9e:	89ab      	ldrh	r3, [r5, #12]
 801efa0:	065b      	lsls	r3, r3, #25
 801efa2:	f53f af1f 	bmi.w	801ede4 <_vfiprintf_r+0x44>
 801efa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801efa8:	e71e      	b.n	801ede8 <_vfiprintf_r+0x48>
 801efaa:	ab03      	add	r3, sp, #12
 801efac:	9300      	str	r3, [sp, #0]
 801efae:	462a      	mov	r2, r5
 801efb0:	4b06      	ldr	r3, [pc, #24]	@ (801efcc <_vfiprintf_r+0x22c>)
 801efb2:	a904      	add	r1, sp, #16
 801efb4:	4630      	mov	r0, r6
 801efb6:	f7fe f84f 	bl	801d058 <_printf_i>
 801efba:	e7e4      	b.n	801ef86 <_vfiprintf_r+0x1e6>
 801efbc:	080207b0 	.word	0x080207b0
 801efc0:	080207b6 	.word	0x080207b6
 801efc4:	080207ba 	.word	0x080207ba
 801efc8:	0801cb25 	.word	0x0801cb25
 801efcc:	0801ed7b 	.word	0x0801ed7b

0801efd0 <__sflush_r>:
 801efd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efd6:	0716      	lsls	r6, r2, #28
 801efd8:	4605      	mov	r5, r0
 801efda:	460c      	mov	r4, r1
 801efdc:	d454      	bmi.n	801f088 <__sflush_r+0xb8>
 801efde:	684b      	ldr	r3, [r1, #4]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	dc02      	bgt.n	801efea <__sflush_r+0x1a>
 801efe4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	dd48      	ble.n	801f07c <__sflush_r+0xac>
 801efea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801efec:	2e00      	cmp	r6, #0
 801efee:	d045      	beq.n	801f07c <__sflush_r+0xac>
 801eff0:	2300      	movs	r3, #0
 801eff2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801eff6:	682f      	ldr	r7, [r5, #0]
 801eff8:	6a21      	ldr	r1, [r4, #32]
 801effa:	602b      	str	r3, [r5, #0]
 801effc:	d030      	beq.n	801f060 <__sflush_r+0x90>
 801effe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f000:	89a3      	ldrh	r3, [r4, #12]
 801f002:	0759      	lsls	r1, r3, #29
 801f004:	d505      	bpl.n	801f012 <__sflush_r+0x42>
 801f006:	6863      	ldr	r3, [r4, #4]
 801f008:	1ad2      	subs	r2, r2, r3
 801f00a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f00c:	b10b      	cbz	r3, 801f012 <__sflush_r+0x42>
 801f00e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f010:	1ad2      	subs	r2, r2, r3
 801f012:	2300      	movs	r3, #0
 801f014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f016:	6a21      	ldr	r1, [r4, #32]
 801f018:	4628      	mov	r0, r5
 801f01a:	47b0      	blx	r6
 801f01c:	1c43      	adds	r3, r0, #1
 801f01e:	89a3      	ldrh	r3, [r4, #12]
 801f020:	d106      	bne.n	801f030 <__sflush_r+0x60>
 801f022:	6829      	ldr	r1, [r5, #0]
 801f024:	291d      	cmp	r1, #29
 801f026:	d82b      	bhi.n	801f080 <__sflush_r+0xb0>
 801f028:	4a28      	ldr	r2, [pc, #160]	@ (801f0cc <__sflush_r+0xfc>)
 801f02a:	410a      	asrs	r2, r1
 801f02c:	07d6      	lsls	r6, r2, #31
 801f02e:	d427      	bmi.n	801f080 <__sflush_r+0xb0>
 801f030:	2200      	movs	r2, #0
 801f032:	6062      	str	r2, [r4, #4]
 801f034:	04d9      	lsls	r1, r3, #19
 801f036:	6922      	ldr	r2, [r4, #16]
 801f038:	6022      	str	r2, [r4, #0]
 801f03a:	d504      	bpl.n	801f046 <__sflush_r+0x76>
 801f03c:	1c42      	adds	r2, r0, #1
 801f03e:	d101      	bne.n	801f044 <__sflush_r+0x74>
 801f040:	682b      	ldr	r3, [r5, #0]
 801f042:	b903      	cbnz	r3, 801f046 <__sflush_r+0x76>
 801f044:	6560      	str	r0, [r4, #84]	@ 0x54
 801f046:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f048:	602f      	str	r7, [r5, #0]
 801f04a:	b1b9      	cbz	r1, 801f07c <__sflush_r+0xac>
 801f04c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f050:	4299      	cmp	r1, r3
 801f052:	d002      	beq.n	801f05a <__sflush_r+0x8a>
 801f054:	4628      	mov	r0, r5
 801f056:	f7ff f9fb 	bl	801e450 <_free_r>
 801f05a:	2300      	movs	r3, #0
 801f05c:	6363      	str	r3, [r4, #52]	@ 0x34
 801f05e:	e00d      	b.n	801f07c <__sflush_r+0xac>
 801f060:	2301      	movs	r3, #1
 801f062:	4628      	mov	r0, r5
 801f064:	47b0      	blx	r6
 801f066:	4602      	mov	r2, r0
 801f068:	1c50      	adds	r0, r2, #1
 801f06a:	d1c9      	bne.n	801f000 <__sflush_r+0x30>
 801f06c:	682b      	ldr	r3, [r5, #0]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d0c6      	beq.n	801f000 <__sflush_r+0x30>
 801f072:	2b1d      	cmp	r3, #29
 801f074:	d001      	beq.n	801f07a <__sflush_r+0xaa>
 801f076:	2b16      	cmp	r3, #22
 801f078:	d11d      	bne.n	801f0b6 <__sflush_r+0xe6>
 801f07a:	602f      	str	r7, [r5, #0]
 801f07c:	2000      	movs	r0, #0
 801f07e:	e021      	b.n	801f0c4 <__sflush_r+0xf4>
 801f080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f084:	b21b      	sxth	r3, r3
 801f086:	e01a      	b.n	801f0be <__sflush_r+0xee>
 801f088:	690f      	ldr	r7, [r1, #16]
 801f08a:	2f00      	cmp	r7, #0
 801f08c:	d0f6      	beq.n	801f07c <__sflush_r+0xac>
 801f08e:	0793      	lsls	r3, r2, #30
 801f090:	680e      	ldr	r6, [r1, #0]
 801f092:	bf08      	it	eq
 801f094:	694b      	ldreq	r3, [r1, #20]
 801f096:	600f      	str	r7, [r1, #0]
 801f098:	bf18      	it	ne
 801f09a:	2300      	movne	r3, #0
 801f09c:	1bf6      	subs	r6, r6, r7
 801f09e:	608b      	str	r3, [r1, #8]
 801f0a0:	2e00      	cmp	r6, #0
 801f0a2:	ddeb      	ble.n	801f07c <__sflush_r+0xac>
 801f0a4:	6a21      	ldr	r1, [r4, #32]
 801f0a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801f0aa:	4633      	mov	r3, r6
 801f0ac:	463a      	mov	r2, r7
 801f0ae:	4628      	mov	r0, r5
 801f0b0:	47e0      	blx	ip
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	dc07      	bgt.n	801f0c6 <__sflush_r+0xf6>
 801f0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f0be:	81a3      	strh	r3, [r4, #12]
 801f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f0c6:	4407      	add	r7, r0
 801f0c8:	1a36      	subs	r6, r6, r0
 801f0ca:	e7e9      	b.n	801f0a0 <__sflush_r+0xd0>
 801f0cc:	dfbffffe 	.word	0xdfbffffe

0801f0d0 <_fflush_r>:
 801f0d0:	b538      	push	{r3, r4, r5, lr}
 801f0d2:	690b      	ldr	r3, [r1, #16]
 801f0d4:	4605      	mov	r5, r0
 801f0d6:	460c      	mov	r4, r1
 801f0d8:	b913      	cbnz	r3, 801f0e0 <_fflush_r+0x10>
 801f0da:	2500      	movs	r5, #0
 801f0dc:	4628      	mov	r0, r5
 801f0de:	bd38      	pop	{r3, r4, r5, pc}
 801f0e0:	b118      	cbz	r0, 801f0ea <_fflush_r+0x1a>
 801f0e2:	6a03      	ldr	r3, [r0, #32]
 801f0e4:	b90b      	cbnz	r3, 801f0ea <_fflush_r+0x1a>
 801f0e6:	f7fe f963 	bl	801d3b0 <__sinit>
 801f0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d0f3      	beq.n	801f0da <_fflush_r+0xa>
 801f0f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f0f4:	07d0      	lsls	r0, r2, #31
 801f0f6:	d404      	bmi.n	801f102 <_fflush_r+0x32>
 801f0f8:	0599      	lsls	r1, r3, #22
 801f0fa:	d402      	bmi.n	801f102 <_fflush_r+0x32>
 801f0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0fe:	f7fe fb52 	bl	801d7a6 <__retarget_lock_acquire_recursive>
 801f102:	4628      	mov	r0, r5
 801f104:	4621      	mov	r1, r4
 801f106:	f7ff ff63 	bl	801efd0 <__sflush_r>
 801f10a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f10c:	07da      	lsls	r2, r3, #31
 801f10e:	4605      	mov	r5, r0
 801f110:	d4e4      	bmi.n	801f0dc <_fflush_r+0xc>
 801f112:	89a3      	ldrh	r3, [r4, #12]
 801f114:	059b      	lsls	r3, r3, #22
 801f116:	d4e1      	bmi.n	801f0dc <_fflush_r+0xc>
 801f118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f11a:	f7fe fb45 	bl	801d7a8 <__retarget_lock_release_recursive>
 801f11e:	e7dd      	b.n	801f0dc <_fflush_r+0xc>

0801f120 <__swhatbuf_r>:
 801f120:	b570      	push	{r4, r5, r6, lr}
 801f122:	460c      	mov	r4, r1
 801f124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f128:	2900      	cmp	r1, #0
 801f12a:	b096      	sub	sp, #88	@ 0x58
 801f12c:	4615      	mov	r5, r2
 801f12e:	461e      	mov	r6, r3
 801f130:	da0d      	bge.n	801f14e <__swhatbuf_r+0x2e>
 801f132:	89a3      	ldrh	r3, [r4, #12]
 801f134:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f138:	f04f 0100 	mov.w	r1, #0
 801f13c:	bf14      	ite	ne
 801f13e:	2340      	movne	r3, #64	@ 0x40
 801f140:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f144:	2000      	movs	r0, #0
 801f146:	6031      	str	r1, [r6, #0]
 801f148:	602b      	str	r3, [r5, #0]
 801f14a:	b016      	add	sp, #88	@ 0x58
 801f14c:	bd70      	pop	{r4, r5, r6, pc}
 801f14e:	466a      	mov	r2, sp
 801f150:	f000 f848 	bl	801f1e4 <_fstat_r>
 801f154:	2800      	cmp	r0, #0
 801f156:	dbec      	blt.n	801f132 <__swhatbuf_r+0x12>
 801f158:	9901      	ldr	r1, [sp, #4]
 801f15a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f15e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f162:	4259      	negs	r1, r3
 801f164:	4159      	adcs	r1, r3
 801f166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f16a:	e7eb      	b.n	801f144 <__swhatbuf_r+0x24>

0801f16c <__smakebuf_r>:
 801f16c:	898b      	ldrh	r3, [r1, #12]
 801f16e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f170:	079d      	lsls	r5, r3, #30
 801f172:	4606      	mov	r6, r0
 801f174:	460c      	mov	r4, r1
 801f176:	d507      	bpl.n	801f188 <__smakebuf_r+0x1c>
 801f178:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f17c:	6023      	str	r3, [r4, #0]
 801f17e:	6123      	str	r3, [r4, #16]
 801f180:	2301      	movs	r3, #1
 801f182:	6163      	str	r3, [r4, #20]
 801f184:	b003      	add	sp, #12
 801f186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f188:	ab01      	add	r3, sp, #4
 801f18a:	466a      	mov	r2, sp
 801f18c:	f7ff ffc8 	bl	801f120 <__swhatbuf_r>
 801f190:	9f00      	ldr	r7, [sp, #0]
 801f192:	4605      	mov	r5, r0
 801f194:	4639      	mov	r1, r7
 801f196:	4630      	mov	r0, r6
 801f198:	f7ff f9ce 	bl	801e538 <_malloc_r>
 801f19c:	b948      	cbnz	r0, 801f1b2 <__smakebuf_r+0x46>
 801f19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1a2:	059a      	lsls	r2, r3, #22
 801f1a4:	d4ee      	bmi.n	801f184 <__smakebuf_r+0x18>
 801f1a6:	f023 0303 	bic.w	r3, r3, #3
 801f1aa:	f043 0302 	orr.w	r3, r3, #2
 801f1ae:	81a3      	strh	r3, [r4, #12]
 801f1b0:	e7e2      	b.n	801f178 <__smakebuf_r+0xc>
 801f1b2:	89a3      	ldrh	r3, [r4, #12]
 801f1b4:	6020      	str	r0, [r4, #0]
 801f1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f1ba:	81a3      	strh	r3, [r4, #12]
 801f1bc:	9b01      	ldr	r3, [sp, #4]
 801f1be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f1c2:	b15b      	cbz	r3, 801f1dc <__smakebuf_r+0x70>
 801f1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1c8:	4630      	mov	r0, r6
 801f1ca:	f000 f81d 	bl	801f208 <_isatty_r>
 801f1ce:	b128      	cbz	r0, 801f1dc <__smakebuf_r+0x70>
 801f1d0:	89a3      	ldrh	r3, [r4, #12]
 801f1d2:	f023 0303 	bic.w	r3, r3, #3
 801f1d6:	f043 0301 	orr.w	r3, r3, #1
 801f1da:	81a3      	strh	r3, [r4, #12]
 801f1dc:	89a3      	ldrh	r3, [r4, #12]
 801f1de:	431d      	orrs	r5, r3
 801f1e0:	81a5      	strh	r5, [r4, #12]
 801f1e2:	e7cf      	b.n	801f184 <__smakebuf_r+0x18>

0801f1e4 <_fstat_r>:
 801f1e4:	b538      	push	{r3, r4, r5, lr}
 801f1e6:	4d07      	ldr	r5, [pc, #28]	@ (801f204 <_fstat_r+0x20>)
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	4604      	mov	r4, r0
 801f1ec:	4608      	mov	r0, r1
 801f1ee:	4611      	mov	r1, r2
 801f1f0:	602b      	str	r3, [r5, #0]
 801f1f2:	f7e3 fbcc 	bl	800298e <_fstat>
 801f1f6:	1c43      	adds	r3, r0, #1
 801f1f8:	d102      	bne.n	801f200 <_fstat_r+0x1c>
 801f1fa:	682b      	ldr	r3, [r5, #0]
 801f1fc:	b103      	cbz	r3, 801f200 <_fstat_r+0x1c>
 801f1fe:	6023      	str	r3, [r4, #0]
 801f200:	bd38      	pop	{r3, r4, r5, pc}
 801f202:	bf00      	nop
 801f204:	2000250c 	.word	0x2000250c

0801f208 <_isatty_r>:
 801f208:	b538      	push	{r3, r4, r5, lr}
 801f20a:	4d06      	ldr	r5, [pc, #24]	@ (801f224 <_isatty_r+0x1c>)
 801f20c:	2300      	movs	r3, #0
 801f20e:	4604      	mov	r4, r0
 801f210:	4608      	mov	r0, r1
 801f212:	602b      	str	r3, [r5, #0]
 801f214:	f7e3 fbca 	bl	80029ac <_isatty>
 801f218:	1c43      	adds	r3, r0, #1
 801f21a:	d102      	bne.n	801f222 <_isatty_r+0x1a>
 801f21c:	682b      	ldr	r3, [r5, #0]
 801f21e:	b103      	cbz	r3, 801f222 <_isatty_r+0x1a>
 801f220:	6023      	str	r3, [r4, #0]
 801f222:	bd38      	pop	{r3, r4, r5, pc}
 801f224:	2000250c 	.word	0x2000250c

0801f228 <_sbrk_r>:
 801f228:	b538      	push	{r3, r4, r5, lr}
 801f22a:	4d06      	ldr	r5, [pc, #24]	@ (801f244 <_sbrk_r+0x1c>)
 801f22c:	2300      	movs	r3, #0
 801f22e:	4604      	mov	r4, r0
 801f230:	4608      	mov	r0, r1
 801f232:	602b      	str	r3, [r5, #0]
 801f234:	f7e3 fbd0 	bl	80029d8 <_sbrk>
 801f238:	1c43      	adds	r3, r0, #1
 801f23a:	d102      	bne.n	801f242 <_sbrk_r+0x1a>
 801f23c:	682b      	ldr	r3, [r5, #0]
 801f23e:	b103      	cbz	r3, 801f242 <_sbrk_r+0x1a>
 801f240:	6023      	str	r3, [r4, #0]
 801f242:	bd38      	pop	{r3, r4, r5, pc}
 801f244:	2000250c 	.word	0x2000250c

0801f248 <memcpy>:
 801f248:	440a      	add	r2, r1
 801f24a:	4291      	cmp	r1, r2
 801f24c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f250:	d100      	bne.n	801f254 <memcpy+0xc>
 801f252:	4770      	bx	lr
 801f254:	b510      	push	{r4, lr}
 801f256:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f25e:	4291      	cmp	r1, r2
 801f260:	d1f9      	bne.n	801f256 <memcpy+0xe>
 801f262:	bd10      	pop	{r4, pc}

0801f264 <__assert_func>:
 801f264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f266:	4614      	mov	r4, r2
 801f268:	461a      	mov	r2, r3
 801f26a:	4b09      	ldr	r3, [pc, #36]	@ (801f290 <__assert_func+0x2c>)
 801f26c:	681b      	ldr	r3, [r3, #0]
 801f26e:	4605      	mov	r5, r0
 801f270:	68d8      	ldr	r0, [r3, #12]
 801f272:	b954      	cbnz	r4, 801f28a <__assert_func+0x26>
 801f274:	4b07      	ldr	r3, [pc, #28]	@ (801f294 <__assert_func+0x30>)
 801f276:	461c      	mov	r4, r3
 801f278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f27c:	9100      	str	r1, [sp, #0]
 801f27e:	462b      	mov	r3, r5
 801f280:	4905      	ldr	r1, [pc, #20]	@ (801f298 <__assert_func+0x34>)
 801f282:	f000 f841 	bl	801f308 <fiprintf>
 801f286:	f000 f851 	bl	801f32c <abort>
 801f28a:	4b04      	ldr	r3, [pc, #16]	@ (801f29c <__assert_func+0x38>)
 801f28c:	e7f4      	b.n	801f278 <__assert_func+0x14>
 801f28e:	bf00      	nop
 801f290:	20000164 	.word	0x20000164
 801f294:	08020806 	.word	0x08020806
 801f298:	080207d8 	.word	0x080207d8
 801f29c:	080207cb 	.word	0x080207cb

0801f2a0 <_calloc_r>:
 801f2a0:	b570      	push	{r4, r5, r6, lr}
 801f2a2:	fba1 5402 	umull	r5, r4, r1, r2
 801f2a6:	b93c      	cbnz	r4, 801f2b8 <_calloc_r+0x18>
 801f2a8:	4629      	mov	r1, r5
 801f2aa:	f7ff f945 	bl	801e538 <_malloc_r>
 801f2ae:	4606      	mov	r6, r0
 801f2b0:	b928      	cbnz	r0, 801f2be <_calloc_r+0x1e>
 801f2b2:	2600      	movs	r6, #0
 801f2b4:	4630      	mov	r0, r6
 801f2b6:	bd70      	pop	{r4, r5, r6, pc}
 801f2b8:	220c      	movs	r2, #12
 801f2ba:	6002      	str	r2, [r0, #0]
 801f2bc:	e7f9      	b.n	801f2b2 <_calloc_r+0x12>
 801f2be:	462a      	mov	r2, r5
 801f2c0:	4621      	mov	r1, r4
 801f2c2:	f7fe f9f3 	bl	801d6ac <memset>
 801f2c6:	e7f5      	b.n	801f2b4 <_calloc_r+0x14>

0801f2c8 <__ascii_mbtowc>:
 801f2c8:	b082      	sub	sp, #8
 801f2ca:	b901      	cbnz	r1, 801f2ce <__ascii_mbtowc+0x6>
 801f2cc:	a901      	add	r1, sp, #4
 801f2ce:	b142      	cbz	r2, 801f2e2 <__ascii_mbtowc+0x1a>
 801f2d0:	b14b      	cbz	r3, 801f2e6 <__ascii_mbtowc+0x1e>
 801f2d2:	7813      	ldrb	r3, [r2, #0]
 801f2d4:	600b      	str	r3, [r1, #0]
 801f2d6:	7812      	ldrb	r2, [r2, #0]
 801f2d8:	1e10      	subs	r0, r2, #0
 801f2da:	bf18      	it	ne
 801f2dc:	2001      	movne	r0, #1
 801f2de:	b002      	add	sp, #8
 801f2e0:	4770      	bx	lr
 801f2e2:	4610      	mov	r0, r2
 801f2e4:	e7fb      	b.n	801f2de <__ascii_mbtowc+0x16>
 801f2e6:	f06f 0001 	mvn.w	r0, #1
 801f2ea:	e7f8      	b.n	801f2de <__ascii_mbtowc+0x16>

0801f2ec <__ascii_wctomb>:
 801f2ec:	4603      	mov	r3, r0
 801f2ee:	4608      	mov	r0, r1
 801f2f0:	b141      	cbz	r1, 801f304 <__ascii_wctomb+0x18>
 801f2f2:	2aff      	cmp	r2, #255	@ 0xff
 801f2f4:	d904      	bls.n	801f300 <__ascii_wctomb+0x14>
 801f2f6:	228a      	movs	r2, #138	@ 0x8a
 801f2f8:	601a      	str	r2, [r3, #0]
 801f2fa:	f04f 30ff 	mov.w	r0, #4294967295
 801f2fe:	4770      	bx	lr
 801f300:	700a      	strb	r2, [r1, #0]
 801f302:	2001      	movs	r0, #1
 801f304:	4770      	bx	lr
	...

0801f308 <fiprintf>:
 801f308:	b40e      	push	{r1, r2, r3}
 801f30a:	b503      	push	{r0, r1, lr}
 801f30c:	4601      	mov	r1, r0
 801f30e:	ab03      	add	r3, sp, #12
 801f310:	4805      	ldr	r0, [pc, #20]	@ (801f328 <fiprintf+0x20>)
 801f312:	f853 2b04 	ldr.w	r2, [r3], #4
 801f316:	6800      	ldr	r0, [r0, #0]
 801f318:	9301      	str	r3, [sp, #4]
 801f31a:	f7ff fd41 	bl	801eda0 <_vfiprintf_r>
 801f31e:	b002      	add	sp, #8
 801f320:	f85d eb04 	ldr.w	lr, [sp], #4
 801f324:	b003      	add	sp, #12
 801f326:	4770      	bx	lr
 801f328:	20000164 	.word	0x20000164

0801f32c <abort>:
 801f32c:	b508      	push	{r3, lr}
 801f32e:	2006      	movs	r0, #6
 801f330:	f000 f82c 	bl	801f38c <raise>
 801f334:	2001      	movs	r0, #1
 801f336:	f7e3 fadb 	bl	80028f0 <_exit>

0801f33a <_raise_r>:
 801f33a:	291f      	cmp	r1, #31
 801f33c:	b538      	push	{r3, r4, r5, lr}
 801f33e:	4605      	mov	r5, r0
 801f340:	460c      	mov	r4, r1
 801f342:	d904      	bls.n	801f34e <_raise_r+0x14>
 801f344:	2316      	movs	r3, #22
 801f346:	6003      	str	r3, [r0, #0]
 801f348:	f04f 30ff 	mov.w	r0, #4294967295
 801f34c:	bd38      	pop	{r3, r4, r5, pc}
 801f34e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f350:	b112      	cbz	r2, 801f358 <_raise_r+0x1e>
 801f352:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f356:	b94b      	cbnz	r3, 801f36c <_raise_r+0x32>
 801f358:	4628      	mov	r0, r5
 801f35a:	f000 f831 	bl	801f3c0 <_getpid_r>
 801f35e:	4622      	mov	r2, r4
 801f360:	4601      	mov	r1, r0
 801f362:	4628      	mov	r0, r5
 801f364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f368:	f000 b818 	b.w	801f39c <_kill_r>
 801f36c:	2b01      	cmp	r3, #1
 801f36e:	d00a      	beq.n	801f386 <_raise_r+0x4c>
 801f370:	1c59      	adds	r1, r3, #1
 801f372:	d103      	bne.n	801f37c <_raise_r+0x42>
 801f374:	2316      	movs	r3, #22
 801f376:	6003      	str	r3, [r0, #0]
 801f378:	2001      	movs	r0, #1
 801f37a:	e7e7      	b.n	801f34c <_raise_r+0x12>
 801f37c:	2100      	movs	r1, #0
 801f37e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f382:	4620      	mov	r0, r4
 801f384:	4798      	blx	r3
 801f386:	2000      	movs	r0, #0
 801f388:	e7e0      	b.n	801f34c <_raise_r+0x12>
	...

0801f38c <raise>:
 801f38c:	4b02      	ldr	r3, [pc, #8]	@ (801f398 <raise+0xc>)
 801f38e:	4601      	mov	r1, r0
 801f390:	6818      	ldr	r0, [r3, #0]
 801f392:	f7ff bfd2 	b.w	801f33a <_raise_r>
 801f396:	bf00      	nop
 801f398:	20000164 	.word	0x20000164

0801f39c <_kill_r>:
 801f39c:	b538      	push	{r3, r4, r5, lr}
 801f39e:	4d07      	ldr	r5, [pc, #28]	@ (801f3bc <_kill_r+0x20>)
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	4604      	mov	r4, r0
 801f3a4:	4608      	mov	r0, r1
 801f3a6:	4611      	mov	r1, r2
 801f3a8:	602b      	str	r3, [r5, #0]
 801f3aa:	f7e3 fa91 	bl	80028d0 <_kill>
 801f3ae:	1c43      	adds	r3, r0, #1
 801f3b0:	d102      	bne.n	801f3b8 <_kill_r+0x1c>
 801f3b2:	682b      	ldr	r3, [r5, #0]
 801f3b4:	b103      	cbz	r3, 801f3b8 <_kill_r+0x1c>
 801f3b6:	6023      	str	r3, [r4, #0]
 801f3b8:	bd38      	pop	{r3, r4, r5, pc}
 801f3ba:	bf00      	nop
 801f3bc:	2000250c 	.word	0x2000250c

0801f3c0 <_getpid_r>:
 801f3c0:	f7e3 ba7f 	b.w	80028c2 <_getpid>
 801f3c4:	0000      	movs	r0, r0
	...

0801f3c8 <floor>:
 801f3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801f3d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801f3d4:	2e13      	cmp	r6, #19
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	460b      	mov	r3, r1
 801f3da:	460c      	mov	r4, r1
 801f3dc:	4605      	mov	r5, r0
 801f3de:	4680      	mov	r8, r0
 801f3e0:	dc35      	bgt.n	801f44e <floor+0x86>
 801f3e2:	2e00      	cmp	r6, #0
 801f3e4:	da17      	bge.n	801f416 <floor+0x4e>
 801f3e6:	a334      	add	r3, pc, #208	@ (adr r3, 801f4b8 <floor+0xf0>)
 801f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ec:	f7e0 ff26 	bl	800023c <__adddf3>
 801f3f0:	2200      	movs	r2, #0
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	f7e1 fb68 	bl	8000ac8 <__aeabi_dcmpgt>
 801f3f8:	b150      	cbz	r0, 801f410 <floor+0x48>
 801f3fa:	2c00      	cmp	r4, #0
 801f3fc:	da57      	bge.n	801f4ae <floor+0xe6>
 801f3fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801f402:	432c      	orrs	r4, r5
 801f404:	2500      	movs	r5, #0
 801f406:	42ac      	cmp	r4, r5
 801f408:	4c2d      	ldr	r4, [pc, #180]	@ (801f4c0 <floor+0xf8>)
 801f40a:	bf08      	it	eq
 801f40c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801f410:	4623      	mov	r3, r4
 801f412:	462a      	mov	r2, r5
 801f414:	e024      	b.n	801f460 <floor+0x98>
 801f416:	4f2b      	ldr	r7, [pc, #172]	@ (801f4c4 <floor+0xfc>)
 801f418:	4137      	asrs	r7, r6
 801f41a:	ea01 0c07 	and.w	ip, r1, r7
 801f41e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801f422:	d01d      	beq.n	801f460 <floor+0x98>
 801f424:	a324      	add	r3, pc, #144	@ (adr r3, 801f4b8 <floor+0xf0>)
 801f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f42a:	f7e0 ff07 	bl	800023c <__adddf3>
 801f42e:	2200      	movs	r2, #0
 801f430:	2300      	movs	r3, #0
 801f432:	f7e1 fb49 	bl	8000ac8 <__aeabi_dcmpgt>
 801f436:	2800      	cmp	r0, #0
 801f438:	d0ea      	beq.n	801f410 <floor+0x48>
 801f43a:	2c00      	cmp	r4, #0
 801f43c:	bfbe      	ittt	lt
 801f43e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801f442:	4133      	asrlt	r3, r6
 801f444:	18e4      	addlt	r4, r4, r3
 801f446:	ea24 0407 	bic.w	r4, r4, r7
 801f44a:	2500      	movs	r5, #0
 801f44c:	e7e0      	b.n	801f410 <floor+0x48>
 801f44e:	2e33      	cmp	r6, #51	@ 0x33
 801f450:	dd0a      	ble.n	801f468 <floor+0xa0>
 801f452:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f456:	d103      	bne.n	801f460 <floor+0x98>
 801f458:	f7e0 fef0 	bl	800023c <__adddf3>
 801f45c:	4602      	mov	r2, r0
 801f45e:	460b      	mov	r3, r1
 801f460:	4610      	mov	r0, r2
 801f462:	4619      	mov	r1, r3
 801f464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f468:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801f46c:	f04f 3cff 	mov.w	ip, #4294967295
 801f470:	fa2c f707 	lsr.w	r7, ip, r7
 801f474:	4207      	tst	r7, r0
 801f476:	d0f3      	beq.n	801f460 <floor+0x98>
 801f478:	a30f      	add	r3, pc, #60	@ (adr r3, 801f4b8 <floor+0xf0>)
 801f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f47e:	f7e0 fedd 	bl	800023c <__adddf3>
 801f482:	2200      	movs	r2, #0
 801f484:	2300      	movs	r3, #0
 801f486:	f7e1 fb1f 	bl	8000ac8 <__aeabi_dcmpgt>
 801f48a:	2800      	cmp	r0, #0
 801f48c:	d0c0      	beq.n	801f410 <floor+0x48>
 801f48e:	2c00      	cmp	r4, #0
 801f490:	da0a      	bge.n	801f4a8 <floor+0xe0>
 801f492:	2e14      	cmp	r6, #20
 801f494:	d101      	bne.n	801f49a <floor+0xd2>
 801f496:	3401      	adds	r4, #1
 801f498:	e006      	b.n	801f4a8 <floor+0xe0>
 801f49a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801f49e:	2301      	movs	r3, #1
 801f4a0:	40b3      	lsls	r3, r6
 801f4a2:	441d      	add	r5, r3
 801f4a4:	4545      	cmp	r5, r8
 801f4a6:	d3f6      	bcc.n	801f496 <floor+0xce>
 801f4a8:	ea25 0507 	bic.w	r5, r5, r7
 801f4ac:	e7b0      	b.n	801f410 <floor+0x48>
 801f4ae:	2500      	movs	r5, #0
 801f4b0:	462c      	mov	r4, r5
 801f4b2:	e7ad      	b.n	801f410 <floor+0x48>
 801f4b4:	f3af 8000 	nop.w
 801f4b8:	8800759c 	.word	0x8800759c
 801f4bc:	7e37e43c 	.word	0x7e37e43c
 801f4c0:	bff00000 	.word	0xbff00000
 801f4c4:	000fffff 	.word	0x000fffff

0801f4c8 <_init>:
 801f4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4ca:	bf00      	nop
 801f4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4ce:	bc08      	pop	{r3}
 801f4d0:	469e      	mov	lr, r3
 801f4d2:	4770      	bx	lr

0801f4d4 <_fini>:
 801f4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4d6:	bf00      	nop
 801f4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4da:	bc08      	pop	{r3}
 801f4dc:	469e      	mov	lr, r3
 801f4de:	4770      	bx	lr
